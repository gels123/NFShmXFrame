/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 */

#ifndef PB_NFRAMECOMM_FRAMETESTCOMM_NANOPB_H_INCLUDED
#define PB_NFRAMECOMM_FRAMETESTCOMM_NANOPB_H_INCLUDED
#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <NFComm/NFCore/NFHash.hpp>
#include "NFComm/NFShmStl/NFShmString.h"
#include "NFComm/NFShmStl/NFShmVector.h"
#include "NFComm/NFShmStl/NFShmList.h"
#include "NFComm/NFShmStl/NFShmHashSet.h"
#include "NFComm/NFShmStl/NFShmHashMultiSet.h"
#include "NFComm/NFShmStl/NFShmHashSetWithList.h"
#include <pb.h>

#include "FrameTestComm.pb.h"
#include "FrameTestEnum.nanopb.h"


/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
struct BevLogTestItem {
    uint32_t item_id;
    uint32_t item_num;

	BevLogTestItem();
	~BevLogTestItem();
	BevLogTestItem(const BevLogTestItem& stArgsData);
	BevLogTestItem& operator=(const BevLogTestItem& stArgsData);
	void CopyData(const BevLogTestItem& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrameComm::BevLogTestItem& cc);
    void ToPb(NFrameComm::BevLogTestItem* cc) const;
    NFrameComm::BevLogTestItem ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:BevLogTestItem) */
};

struct WelfareNodeDBDataGetTaskManual {
    int32_t m_iState;

	WelfareNodeDBDataGetTaskManual();
	~WelfareNodeDBDataGetTaskManual();
	WelfareNodeDBDataGetTaskManual(const WelfareNodeDBDataGetTaskManual& stArgsData);
	WelfareNodeDBDataGetTaskManual& operator=(const WelfareNodeDBDataGetTaskManual& stArgsData);
	void CopyData(const WelfareNodeDBDataGetTaskManual& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrameComm::WelfareNodeDBDataGetTaskManual& cc);
    void ToPb(NFrameComm::WelfareNodeDBDataGetTaskManual* cc) const;
    NFrameComm::WelfareNodeDBDataGetTaskManual ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:WelfareNodeDBDataGetTaskManual) */
};

struct WelfareNodeDBDataPddBuy {
    NFShmString<FRAME_ENUM_STRING_NUM> test_string;
    NFShmString<FRAME_ENUM_STRING_NUM> test_string_stl;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_vector;
    NFShmList<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_list;
    NFShmHashSet<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_unordered_set;
    NFShmVector<int32_t,FRAME_ENUM_DEFAULT_REPEATED> test_int_vector;
    NFShmVector<int32_t,FRAME_ENUM_DEFAULT_REPEATED> test_int_list;
    NFShmHashSet<int32_t,FRAME_ENUM_DEFAULT_REPEATED> test_int_unordered_set;
    NFShmString<FRAME_ENUM_STRING_NUM> test_bytes;
    NFShmString<FRAME_ENUM_STRING_NUM> test_bytes_stl;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_vector;
    NFShmList<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_list;
    NFShmHashSet<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_unordered_set;
    uint32_t m_dwBuyCount;
    uint32_t m_dwLastBuyTime;

	WelfareNodeDBDataPddBuy();
	~WelfareNodeDBDataPddBuy();
	WelfareNodeDBDataPddBuy(const WelfareNodeDBDataPddBuy& stArgsData);
	WelfareNodeDBDataPddBuy& operator=(const WelfareNodeDBDataPddBuy& stArgsData);
	void CopyData(const WelfareNodeDBDataPddBuy& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrameComm::WelfareNodeDBDataPddBuy& cc);
    void ToPb(NFrameComm::WelfareNodeDBDataPddBuy* cc) const;
    NFrameComm::WelfareNodeDBDataPddBuy ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:WelfareNodeDBDataPddBuy) */
};

struct WelfareNodeDBDataPddOpen {
    uint32_t m_dwOpenCount;
    uint32_t m_dwLastJoinTime;
    uint64_t m_ullTeamID;
    uint32_t m_dwRwdCount;
    uint32_t m_dwLastRwdTime;

	WelfareNodeDBDataPddOpen();
	~WelfareNodeDBDataPddOpen();
	WelfareNodeDBDataPddOpen(const WelfareNodeDBDataPddOpen& stArgsData);
	WelfareNodeDBDataPddOpen& operator=(const WelfareNodeDBDataPddOpen& stArgsData);
	void CopyData(const WelfareNodeDBDataPddOpen& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrameComm::WelfareNodeDBDataPddOpen& cc);
    void ToPb(NFrameComm::WelfareNodeDBDataPddOpen* cc) const;
    NFrameComm::WelfareNodeDBDataPddOpen ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:WelfareNodeDBDataPddOpen) */
};

struct wxWorkRobotTextTest {
    NFShmString<FRAME_ENUM_STRING_NUM> test_string;
    NFShmString<FRAME_ENUM_STRING_NUM> test_string_stl;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_vector;
    NFShmList<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_list;
    NFShmHashSet<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_string_stl_unordered_set;
    NFShmVector<int32_t,FRAME_ENUM_DEFAULT_REPEATED> test_int_vector;
    NFShmVector<int32_t,FRAME_ENUM_DEFAULT_REPEATED> test_int_list;
    NFShmHashSet<int32_t,FRAME_ENUM_DEFAULT_REPEATED> test_int_unordered_set;
    NFShmString<FRAME_ENUM_STRING_NUM> test_bytes;
    NFShmString<FRAME_ENUM_STRING_NUM> test_bytes_stl;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_repeated;
    NFShmVector<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_vector;
    NFShmList<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_list;
    NFShmHashSet<NFShmString<FRAME_ENUM_STRING_NUM>,FRAME_ENUM_DEFAULT_REPEATED> test_bytes_stl_unordered_set;
    uint32_t id;

	wxWorkRobotTextTest();
	~wxWorkRobotTextTest();
	wxWorkRobotTextTest(const wxWorkRobotTextTest& stArgsData);
	wxWorkRobotTextTest& operator=(const wxWorkRobotTextTest& stArgsData);
	void CopyData(const wxWorkRobotTextTest& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrameComm::wxWorkRobotTextTest& cc);
    void ToPb(NFrameComm::wxWorkRobotTextTest* cc) const;
    NFrameComm::wxWorkRobotTextTest ToPb() const;
    std::string ShortDebugString() const;

	bool operator==(const wxWorkRobotTextTest &value) const
	{
		return id == value.id;
	}

	bool operator<(const wxWorkRobotTextTest &value) const
	{
		return id < value.id;
	}

/* @@protoc_insertion_point(struct:wxWorkRobotTextTest) */
};

namespace std
{
	template<>
	struct hash<wxWorkRobotTextTest>
	{
		size_t operator()(const wxWorkRobotTextTest &value) const
		{
			return NFHash::hash_combine(value.id);
		}
	};
}


struct BevLogTest {
    uint64_t tDtEventTime;
    NFShmString<MAX_STRING_LEN_32> szVGameIP;
    int32_t iIZoneAreaID;
    int32_t iITimeShift;
    BevLogTestItem item;
    NFShmVector<BevLogTestItem,MAX_REPEATED_DEFAULT_COUNT> item_list;
    NFShmVector<int32_t,MAX_REPEATED_DEFAULT_COUNT> id_list;

	BevLogTest();
	~BevLogTest();
	BevLogTest(const BevLogTest& stArgsData);
	BevLogTest& operator=(const BevLogTest& stArgsData);
	void CopyData(const BevLogTest& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrameComm::BevLogTest& cc);
    void ToPb(NFrameComm::BevLogTest* cc) const;
    NFrameComm::BevLogTest ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:BevLogTest) */
};

struct WelfareNodeDBDataUnion {
    pb_size_t which_m_stData;
    union WelfareNodeDBDataUnion_m_stData {
        WelfareNodeDBDataUnion_m_stData() { }
        ~WelfareNodeDBDataUnion_m_stData() { }
        WelfareNodeDBDataUnion_m_stData(const WelfareNodeDBDataUnion_m_stData& _paramData) { }
        WelfareNodeDBDataUnion_m_stData& operator=(const WelfareNodeDBDataUnion_m_stData& _paramData) { return *this; }
        NFShmString<FRAME_ENUM_STRING_NUM> test_string;
        NFShmString<FRAME_ENUM_STRING_NUM> test_string_stl;
        NFShmString<FRAME_ENUM_STRING_NUM> test_bytes;
        NFShmString<FRAME_ENUM_STRING_NUM> test_bytes_stl;
        FrameGlobalTestEnum test_enum;
        uint32_t m_dwBuyCount;
        uint32_t m_dwLastBuyTime;
        WelfareNodeDBDataPddBuy m_stPddBuy;
        WelfareNodeDBDataPddOpen m_stPddOpen;
        WelfareNodeDBDataGetTaskManual m_stGetTaskManual;
    } m_stData;
    WelfareNodeDBDataPddBuy m_stPddBuy1;
    pb_size_t which_m_stData2;
    union WelfareNodeDBDataUnion_m_stData2 {
        WelfareNodeDBDataUnion_m_stData2() { }
        ~WelfareNodeDBDataUnion_m_stData2() { }
        WelfareNodeDBDataUnion_m_stData2(const WelfareNodeDBDataUnion_m_stData2& _paramData) { }
        WelfareNodeDBDataUnion_m_stData2& operator=(const WelfareNodeDBDataUnion_m_stData2& _paramData) { return *this; }
        uint32_t m_dwBuyCount2;
        uint32_t m_dwLastBuyTime2;
    } m_stData2;

	WelfareNodeDBDataUnion();
	~WelfareNodeDBDataUnion();
	WelfareNodeDBDataUnion(const WelfareNodeDBDataUnion& stArgsData);
	WelfareNodeDBDataUnion& operator=(const WelfareNodeDBDataUnion& stArgsData);
	void CopyData(const WelfareNodeDBDataUnion& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrameComm::WelfareNodeDBDataUnion& cc);
    void ToPb(NFrameComm::WelfareNodeDBDataUnion* cc) const;
    NFrameComm::WelfareNodeDBDataUnion ToPb() const;
    std::string ShortDebugString() const;
public:
    void init_which_m_stData(pb_size_t which_data);
    void uninit_which_m_stData();
    pb_size_t get_which_m_stData() const { return which_m_stData; }
    NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_string();
    const NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_string() const;
    NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_string_stl();
    const NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_string_stl() const;
    NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_bytes();
    const NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_bytes() const;
    NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_bytes_stl();
    const NFShmString<FRAME_ENUM_STRING_NUM>* get_m_stData_test_bytes_stl() const;
    FrameGlobalTestEnum* get_m_stData_test_enum();
    const FrameGlobalTestEnum* get_m_stData_test_enum() const;
    uint32_t* get_m_stData_m_dwBuyCount();
    const uint32_t* get_m_stData_m_dwBuyCount() const;
    uint32_t* get_m_stData_m_dwLastBuyTime();
    const uint32_t* get_m_stData_m_dwLastBuyTime() const;
    WelfareNodeDBDataPddBuy* get_m_stData_m_stPddBuy();
    const WelfareNodeDBDataPddBuy* get_m_stData_m_stPddBuy() const;
    WelfareNodeDBDataPddOpen* get_m_stData_m_stPddOpen();
    const WelfareNodeDBDataPddOpen* get_m_stData_m_stPddOpen() const;
    WelfareNodeDBDataGetTaskManual* get_m_stData_m_stGetTaskManual();
    const WelfareNodeDBDataGetTaskManual* get_m_stData_m_stGetTaskManual() const;
public:
    void init_which_m_stData2(pb_size_t which_data);
    void uninit_which_m_stData2();
    pb_size_t get_which_m_stData2() const { return which_m_stData2; }
    uint32_t* get_m_stData2_m_dwBuyCount2();
    const uint32_t* get_m_stData2_m_dwBuyCount2() const;
    uint32_t* get_m_stData2_m_dwLastBuyTime2();
    const uint32_t* get_m_stData2_m_dwLastBuyTime2() const;

/* @@protoc_insertion_point(struct:WelfareNodeDBDataUnion) */
};

/* Field tags (for use in manual encoding/decoding) */
#define BevLogTestItem_item_id_tag               1
#define BevLogTestItem_item_num_tag              2
#define WelfareNodeDBDataGetTaskManual_m_iState_tag 1
#define WelfareNodeDBDataPddBuy_m_dwBuyCount_tag 100
#define WelfareNodeDBDataPddBuy_m_dwLastBuyTime_tag 102
#define WelfareNodeDBDataPddBuy_test_string_tag  1
#define WelfareNodeDBDataPddBuy_test_string_stl_tag 2
#define WelfareNodeDBDataPddBuy_test_string_repeated_tag 3
#define WelfareNodeDBDataPddBuy_test_string_stl_repeated_tag 4
#define WelfareNodeDBDataPddBuy_test_string_stl_vector_tag 5
#define WelfareNodeDBDataPddBuy_test_string_stl_list_tag 6
#define WelfareNodeDBDataPddBuy_test_string_stl_unordered_set_tag 7
#define WelfareNodeDBDataPddBuy_test_int_vector_tag 8
#define WelfareNodeDBDataPddBuy_test_int_list_tag 9
#define WelfareNodeDBDataPddBuy_test_int_unordered_set_tag 10
#define WelfareNodeDBDataPddBuy_test_bytes_tag   11
#define WelfareNodeDBDataPddBuy_test_bytes_stl_tag 12
#define WelfareNodeDBDataPddBuy_test_bytes_repeated_tag 13
#define WelfareNodeDBDataPddBuy_test_bytes_stl_repeated_tag 14
#define WelfareNodeDBDataPddBuy_test_bytes_stl_vector_tag 15
#define WelfareNodeDBDataPddBuy_test_bytes_stl_list_tag 16
#define WelfareNodeDBDataPddBuy_test_bytes_stl_unordered_set_tag 17
#define WelfareNodeDBDataPddOpen_m_dwOpenCount_tag 1
#define WelfareNodeDBDataPddOpen_m_dwLastJoinTime_tag 2
#define WelfareNodeDBDataPddOpen_m_ullTeamID_tag 3
#define WelfareNodeDBDataPddOpen_m_dwRwdCount_tag 4
#define WelfareNodeDBDataPddOpen_m_dwLastRwdTime_tag 5
#define wxWorkRobotTextTest_id_tag               100
#define wxWorkRobotTextTest_test_string_tag      1
#define wxWorkRobotTextTest_test_string_stl_tag  2
#define wxWorkRobotTextTest_test_string_repeated_tag 3
#define wxWorkRobotTextTest_test_string_stl_repeated_tag 4
#define wxWorkRobotTextTest_test_string_stl_vector_tag 5
#define wxWorkRobotTextTest_test_string_stl_list_tag 6
#define wxWorkRobotTextTest_test_string_stl_unordered_set_tag 7
#define wxWorkRobotTextTest_test_int_vector_tag  8
#define wxWorkRobotTextTest_test_int_list_tag    9
#define wxWorkRobotTextTest_test_int_unordered_set_tag 10
#define wxWorkRobotTextTest_test_bytes_tag       11
#define wxWorkRobotTextTest_test_bytes_stl_tag   12
#define wxWorkRobotTextTest_test_bytes_repeated_tag 13
#define wxWorkRobotTextTest_test_bytes_stl_repeated_tag 14
#define wxWorkRobotTextTest_test_bytes_stl_vector_tag 15
#define wxWorkRobotTextTest_test_bytes_stl_list_tag 16
#define wxWorkRobotTextTest_test_bytes_stl_unordered_set_tag 17
#define BevLogTest_tDtEventTime_tag              1
#define BevLogTest_szVGameIP_tag                 2
#define BevLogTest_iIZoneAreaID_tag              3
#define BevLogTest_iITimeShift_tag               4
#define BevLogTest_item_tag                      5
#define BevLogTest_item_list_tag                 6
#define BevLogTest_id_list_tag                   7
#define WelfareNodeDBDataUnion_test_string_tag   1
#define WelfareNodeDBDataUnion_test_string_stl_tag 2
#define WelfareNodeDBDataUnion_test_bytes_tag    11
#define WelfareNodeDBDataUnion_test_bytes_stl_tag 12
#define WelfareNodeDBDataUnion_test_enum_tag     13
#define WelfareNodeDBDataUnion_m_dwBuyCount_tag  100
#define WelfareNodeDBDataUnion_m_dwLastBuyTime_tag 102
#define WelfareNodeDBDataUnion_m_stPddBuy_tag    10001
#define WelfareNodeDBDataUnion_m_stPddOpen_tag   10002
#define WelfareNodeDBDataUnion_m_stGetTaskManual_tag 10003
#define WelfareNodeDBDataUnion_m_dwBuyCount2_tag 1000
#define WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag 1002
#define WelfareNodeDBDataUnion_m_stPddBuy1_tag   111

/* Struct field encoding specification for nanopb */

/* Maximum encoded size of messages (where known) */
#define wxWorkRobotTextTest_size                 1757
#define WelfareNodeDBDataPddBuy_size             1764
#define WelfareNodeDBDataPddOpen_size            35
#define WelfareNodeDBDataGetTaskManual_size      11
#define WelfareNodeDBDataUnion_size              (sizeof(WelfareNodeDBDataUnion) * 2)
#define BevLogTestItem_size                      12
#define BevLogTest_size                          108

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FRAMETESTCOMM_MESSAGES \


#endif

/* @@protoc_insertion_point(eof) */

#endif
