/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 */

#ifndef PB_NFRAME_FRAMECOMM_NANOPB_H_INCLUDED
#define PB_NFRAME_FRAMECOMM_NANOPB_H_INCLUDED
#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <NFComm/NFCore/NFHash.hpp>
#include <pb.h>

#include "FrameComm.pb.h"
#include "FrameEnum.nanopb.h"


/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
struct ExcelSheetInfo {
    std::string name;
    std::string unique_index;
    std::string multi_index;
    std::string relation;
    bool createSql;
    std::string field_enum;
    std::string import_proto;
    std::string colMessageType;
    std::string add_field;
    std::string otherName;
    std::string sheetMsgName;
    std::string protoMsgName;

	ExcelSheetInfo();
	~ExcelSheetInfo();
	ExcelSheetInfo(const ExcelSheetInfo& stArgsData);
	ExcelSheetInfo& operator=(const ExcelSheetInfo& stArgsData);
	void CopyData(const ExcelSheetInfo& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::ExcelSheetInfo& cc);
    void ToPb(NFrame::ExcelSheetInfo* cc) const;
    NFrame::ExcelSheetInfo ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:ExcelSheetInfo) */
};

struct pbAllServerConfig {
    std::string Server;
    std::string ID;
    uint32_t ServerType;

	pbAllServerConfig();
	~pbAllServerConfig();
	pbAllServerConfig(const pbAllServerConfig& stArgsData);
	pbAllServerConfig& operator=(const pbAllServerConfig& stArgsData);
	void CopyData(const pbAllServerConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbAllServerConfig& cc);
    void ToPb(NFrame::pbAllServerConfig* cc) const;
    NFrame::pbAllServerConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbAllServerConfig) */
};

struct pbEncryptConfig {
    std::string PublicAuthEncryptkey;
    uint32_t EncryptPolicy;
    uint32_t CompressPolicy;
    std::string EncrypyKey;

	pbEncryptConfig();
	~pbEncryptConfig();
	pbEncryptConfig(const pbEncryptConfig& stArgsData);
	pbEncryptConfig& operator=(const pbEncryptConfig& stArgsData);
	void CopyData(const pbEncryptConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbEncryptConfig& cc);
    void ToPb(NFrame::pbEncryptConfig* cc) const;
    NFrame::pbEncryptConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbEncryptConfig) */
};

struct pbRedisConfig {
    std::string RedisIp;
    uint32_t RedisPort;
    std::string RedisPass;

	pbRedisConfig();
	~pbRedisConfig();
	pbRedisConfig(const pbRedisConfig& stArgsData);
	pbRedisConfig& operator=(const pbRedisConfig& stArgsData);
	void CopyData(const pbRedisConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbRedisConfig& cc);
    void ToPb(NFrame::pbRedisConfig* cc) const;
    NFrame::pbRedisConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbRedisConfig) */
};

struct pbRouteConfig {
    std::string MasterIp;
    uint32_t MasterPort;
    std::string NamingHost;
    std::string NamingPath;
    std::string RouteAgent;

	pbRouteConfig();
	~pbRouteConfig();
	pbRouteConfig(const pbRouteConfig& stArgsData);
	pbRouteConfig& operator=(const pbRouteConfig& stArgsData);
	void CopyData(const pbRouteConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbRouteConfig& cc);
    void ToPb(NFrame::pbRouteConfig* cc) const;
    NFrame::pbRouteConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbRouteConfig) */
};

struct pbTableConfig {
    std::string TableName;
    uint32_t TableCount;
    bool Cache;

	pbTableConfig();
	~pbTableConfig();
	pbTableConfig(const pbTableConfig& stArgsData);
	pbTableConfig& operator=(const pbTableConfig& stArgsData);
	void CopyData(const pbTableConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbTableConfig& cc);
    void ToPb(NFrame::pbTableConfig* cc) const;
    NFrame::pbTableConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbTableConfig) */
};

struct tbServerMgr {
    uint64_t id;
    std::string contract;
    std::string machine_addr;
    std::string ip;
    std::string bus_name;
    std::string server_desc;
    uint32_t cur_count;
    uint64_t last_login_time;
    uint64_t last_logout_time;
    uint64_t create_time;

	tbServerMgr();
	~tbServerMgr();
	tbServerMgr(const tbServerMgr& stArgsData);
	tbServerMgr& operator=(const tbServerMgr& stArgsData);
	void CopyData(const tbServerMgr& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::tbServerMgr& cc);
    void ToPb(NFrame::tbServerMgr* cc) const;
    NFrame::tbServerMgr ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:tbServerMgr) */
};

struct wxWorkRobotText {
    std::string content;
    std::vector<std::string> mentioned_list;
    std::vector<std::string> mentioned_mobile_list;

	wxWorkRobotText();
	~wxWorkRobotText();
	wxWorkRobotText(const wxWorkRobotText& stArgsData);
	wxWorkRobotText& operator=(const wxWorkRobotText& stArgsData);
	void CopyData(const wxWorkRobotText& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::wxWorkRobotText& cc);
    void ToPb(NFrame::wxWorkRobotText* cc) const;
    NFrame::wxWorkRobotText ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:wxWorkRobotText) */
};

struct ExcelPbInfo {
    std::string name;
    std::unordered_map<std::string, ExcelSheetInfo> sheet;

	ExcelPbInfo();
	~ExcelPbInfo();
	ExcelPbInfo(const ExcelPbInfo& stArgsData);
	ExcelPbInfo& operator=(const ExcelPbInfo& stArgsData);
	void CopyData(const ExcelPbInfo& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::ExcelPbInfo& cc);
    void ToPb(NFrame::ExcelPbInfo* cc) const;
    NFrame::ExcelPbInfo ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:ExcelPbInfo) */
};

struct pbMysqlConfig {
    std::string MysqlIp;
    uint32_t MysqlPort;
    std::string MysqlDbName;
    std::string MysqlUser;
    std::string MysqlPassword;
    std::vector<pbTableConfig> TBConfList;

	pbMysqlConfig();
	~pbMysqlConfig();
	pbMysqlConfig(const pbMysqlConfig& stArgsData);
	pbMysqlConfig& operator=(const pbMysqlConfig& stArgsData);
	void CopyData(const pbMysqlConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbMysqlConfig& cc);
    void ToPb(NFrame::pbMysqlConfig* cc) const;
    NFrame::pbMysqlConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbMysqlConfig) */
};

struct pbPluginConfig {
    uint32_t ServerType;
    std::vector<std::string> FramePlugins;
    std::vector<std::string> ServerPlugins;
    std::vector<std::string> WorkPlugins;
    std::vector<pbAllServerConfig> ServerList;

	pbPluginConfig();
	~pbPluginConfig();
	pbPluginConfig(const pbPluginConfig& stArgsData);
	pbPluginConfig& operator=(const pbPluginConfig& stArgsData);
	void CopyData(const pbPluginConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbPluginConfig& cc);
    void ToPb(NFrame::pbPluginConfig* cc) const;
    NFrame::pbPluginConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbPluginConfig) */
};

struct wxWorkRobotHttpPost {
    std::string msgtype;
    wxWorkRobotText text;

	wxWorkRobotHttpPost();
	~wxWorkRobotHttpPost();
	wxWorkRobotHttpPost(const wxWorkRobotHttpPost& stArgsData);
	wxWorkRobotHttpPost& operator=(const wxWorkRobotHttpPost& stArgsData);
	void CopyData(const wxWorkRobotHttpPost& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::wxWorkRobotHttpPost& cc);
    void ToPb(NFrame::wxWorkRobotHttpPost* cc) const;
    NFrame::wxWorkRobotHttpPost ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:wxWorkRobotHttpPost) */
};

struct ExcelParseInfo {
    std::unordered_map<std::string, ExcelPbInfo> excel;

	ExcelParseInfo();
	~ExcelParseInfo();
	ExcelParseInfo(const ExcelParseInfo& stArgsData);
	ExcelParseInfo& operator=(const ExcelParseInfo& stArgsData);
	void CopyData(const ExcelParseInfo& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::ExcelParseInfo& cc);
    void ToPb(NFrame::ExcelParseInfo* cc) const;
    NFrame::ExcelParseInfo ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:ExcelParseInfo) */
};

struct pbNFServerConfig {
    std::string ServerId;
    uint32_t ServerType;
    std::string ServerName;
    uint32_t BusId;
    uint32_t BusLength;
    std::string LinkMode;
    std::string Url;
    uint32_t IdleSleepUS;
    uint32_t HandleMsgNumPerFrame;
    uint64_t ServerOpenTime;
    std::string LoadProtoDs;
    bool CrossServer;
    std::string ServerIp;
    uint32_t ServerPort;
    std::string ExternalServerIp;
    uint32_t ExternalServerPort;
    uint32_t HttpPort;
    uint32_t MaxConnectNum;
    uint32_t WorkThreadNum;
    uint32_t NetThreadNum;
    bool Security;
    bool WebSocket;
    uint32_t ParseType;
    pbRouteConfig RouteConfig;
    pbMysqlConfig MysqlConfig;
    std::string DefaultDBName;
    std::string CrossDBName;
    pbRedisConfig RedisConfig;
    std::string sendEmail;
    std::string sendEmailPass;
    std::string sendEmailUrl;
    std::string sendEmailPort;
    std::string recvEmail;
    std::string wxWorkdRobot;
    uint32_t MaxOnlinePlayerNum;
    uint32_t HeartBeatTimeout;
    uint32_t ClientKeepAliveTimeout;
    uint32_t ClientVersion;
    bool IsNoToken;
    pbEncryptConfig EncryptConfig;

	pbNFServerConfig();
	~pbNFServerConfig();
	pbNFServerConfig(const pbNFServerConfig& stArgsData);
	pbNFServerConfig& operator=(const pbNFServerConfig& stArgsData);
	void CopyData(const pbNFServerConfig& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::pbNFServerConfig& cc);
    void ToPb(NFrame::pbNFServerConfig* cc) const;
    NFrame::pbNFServerConfig ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:pbNFServerConfig) */
};

/* Field tags (for use in manual encoding/decoding) */
#define ExcelSheetInfo_name_tag                  1
#define ExcelSheetInfo_unique_index_tag          2
#define ExcelSheetInfo_multi_index_tag           3
#define ExcelSheetInfo_relation_tag              4
#define ExcelSheetInfo_createSql_tag             5
#define ExcelSheetInfo_field_enum_tag            6
#define ExcelSheetInfo_import_proto_tag          7
#define ExcelSheetInfo_colMessageType_tag        8
#define ExcelSheetInfo_add_field_tag             9
#define ExcelSheetInfo_otherName_tag             10
#define ExcelSheetInfo_sheetMsgName_tag          11
#define ExcelSheetInfo_protoMsgName_tag          12
#define pbAllServerConfig_Server_tag             1
#define pbAllServerConfig_ID_tag                 2
#define pbAllServerConfig_ServerType_tag         3
#define pbEncryptConfig_PublicAuthEncryptkey_tag 1
#define pbEncryptConfig_EncryptPolicy_tag        10
#define pbEncryptConfig_CompressPolicy_tag       11
#define pbEncryptConfig_EncrypyKey_tag           12
#define pbRedisConfig_RedisIp_tag                1
#define pbRedisConfig_RedisPort_tag              2
#define pbRedisConfig_RedisPass_tag              3
#define pbRouteConfig_MasterIp_tag               1
#define pbRouteConfig_MasterPort_tag             2
#define pbRouteConfig_NamingHost_tag             3
#define pbRouteConfig_NamingPath_tag             4
#define pbRouteConfig_RouteAgent_tag             5
#define pbTableConfig_TableName_tag              1
#define pbTableConfig_TableCount_tag             2
#define pbTableConfig_Cache_tag                  3
#define tbServerMgr_id_tag                       1
#define tbServerMgr_contract_tag                 2
#define tbServerMgr_machine_addr_tag             3
#define tbServerMgr_ip_tag                       4
#define tbServerMgr_bus_name_tag                 5
#define tbServerMgr_server_desc_tag              6
#define tbServerMgr_cur_count_tag                7
#define tbServerMgr_last_login_time_tag          8
#define tbServerMgr_last_logout_time_tag         9
#define tbServerMgr_create_time_tag              10
#define wxWorkRobotText_content_tag              1
#define wxWorkRobotText_mentioned_list_tag       2
#define wxWorkRobotText_mentioned_mobile_list_tag 3
#define ExcelPbInfo_name_tag                     1
#define ExcelPbInfo_sheet_tag                    2
#define pbMysqlConfig_MysqlIp_tag                1
#define pbMysqlConfig_MysqlPort_tag              2
#define pbMysqlConfig_MysqlDbName_tag            3
#define pbMysqlConfig_MysqlUser_tag              4
#define pbMysqlConfig_MysqlPassword_tag          5
#define pbMysqlConfig_TBConfList_tag             6
#define pbPluginConfig_ServerType_tag            1
#define pbPluginConfig_FramePlugins_tag          2
#define pbPluginConfig_ServerPlugins_tag         3
#define pbPluginConfig_WorkPlugins_tag           4
#define pbPluginConfig_ServerList_tag            5
#define wxWorkRobotHttpPost_msgtype_tag          1
#define wxWorkRobotHttpPost_text_tag             2
#define ExcelParseInfo_excel_tag                 1
#define pbNFServerConfig_ServerId_tag            1
#define pbNFServerConfig_ServerType_tag          2
#define pbNFServerConfig_ServerName_tag          3
#define pbNFServerConfig_BusId_tag               4
#define pbNFServerConfig_BusLength_tag           5
#define pbNFServerConfig_LinkMode_tag            7
#define pbNFServerConfig_Url_tag                 8
#define pbNFServerConfig_IdleSleepUS_tag         9
#define pbNFServerConfig_HandleMsgNumPerFrame_tag 10
#define pbNFServerConfig_ServerOpenTime_tag      11
#define pbNFServerConfig_LoadProtoDs_tag         12
#define pbNFServerConfig_CrossServer_tag         13
#define pbNFServerConfig_ServerIp_tag            20
#define pbNFServerConfig_ServerPort_tag          21
#define pbNFServerConfig_ExternalServerIp_tag    22
#define pbNFServerConfig_ExternalServerPort_tag  23
#define pbNFServerConfig_HttpPort_tag            24
#define pbNFServerConfig_MaxConnectNum_tag       25
#define pbNFServerConfig_WorkThreadNum_tag       26
#define pbNFServerConfig_NetThreadNum_tag        27
#define pbNFServerConfig_Security_tag            28
#define pbNFServerConfig_WebSocket_tag           29
#define pbNFServerConfig_ParseType_tag           30
#define pbNFServerConfig_RouteConfig_tag         50
#define pbNFServerConfig_MysqlConfig_tag         70
#define pbNFServerConfig_DefaultDBName_tag       75
#define pbNFServerConfig_CrossDBName_tag         76
#define pbNFServerConfig_RedisConfig_tag         80
#define pbNFServerConfig_sendEmail_tag           91
#define pbNFServerConfig_sendEmailPass_tag       92
#define pbNFServerConfig_sendEmailUrl_tag        93
#define pbNFServerConfig_sendEmailPort_tag       94
#define pbNFServerConfig_recvEmail_tag           95
#define pbNFServerConfig_wxWorkdRobot_tag        96
#define pbNFServerConfig_MaxOnlinePlayerNum_tag  100
#define pbNFServerConfig_HeartBeatTimeout_tag    101
#define pbNFServerConfig_ClientKeepAliveTimeout_tag 102
#define pbNFServerConfig_ClientVersion_tag       103
#define pbNFServerConfig_IsNoToken_tag           104
#define pbNFServerConfig_EncryptConfig_tag       110

/* Struct field encoding specification for nanopb */

/* Maximum encoded size of messages (where known) */
#define tbServerMgr_size                         220
#define pbMysqlConfig_size                       187
#define pbRedisConfig_size                       74
#define pbRouteConfig_size                       142
#define pbPluginConfig_size                      188
#define pbAllServerConfig_size                   74
#define pbTableConfig_size                       42
#define pbEncryptConfig_size                     80
#define pbNFServerConfig_size                    1146
#define wxWorkRobotText_size                     104
#define wxWorkRobotHttpPost_size                 140
#define ExcelSheetInfo_size                      376
#define ExcelPbInfo_size                         414
#define ExcelParseInfo_size                      418

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FRAMECOMM_MESSAGES \


#endif

/* @@protoc_insertion_point(eof) */

#endif
