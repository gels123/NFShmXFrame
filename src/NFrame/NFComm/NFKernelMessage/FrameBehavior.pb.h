// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameBehavior.proto

#ifndef PROTOBUF_INCLUDED_FrameBehavior_2eproto
#define PROTOBUF_INCLUDED_FrameBehavior_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
#include "FrameEnum.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FrameBehavior_2eproto 

namespace protobuf_FrameBehavior_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FrameBehavior_2eproto
namespace NFrame {
class BevLogBaseInfo;
class BevLogBaseInfoDefaultTypeInternal;
extern BevLogBaseInfoDefaultTypeInternal _BevLogBaseInfo_default_instance_;
class BevLogDeviceInfo;
class BevLogDeviceInfoDefaultTypeInternal;
extern BevLogDeviceInfoDefaultTypeInternal _BevLogDeviceInfo_default_instance_;
class BevLogRoleBaseInfo;
class BevLogRoleBaseInfoDefaultTypeInternal;
extern BevLogRoleBaseInfoDefaultTypeInternal _BevLogRoleBaseInfo_default_instance_;
class BevLogTransBaseInfo;
class BevLogTransBaseInfoDefaultTypeInternal;
extern BevLogTransBaseInfoDefaultTypeInternal _BevLogTransBaseInfo_default_instance_;
class ServerStateFlow;
class ServerStateFlowDefaultTypeInternal;
extern ServerStateFlowDefaultTypeInternal _ServerStateFlow_default_instance_;
}  // namespace NFrame
namespace google {
namespace protobuf {
template<> ::NFrame::BevLogBaseInfo* Arena::CreateMaybeMessage<::NFrame::BevLogBaseInfo>(Arena*);
template<> ::NFrame::BevLogDeviceInfo* Arena::CreateMaybeMessage<::NFrame::BevLogDeviceInfo>(Arena*);
template<> ::NFrame::BevLogRoleBaseInfo* Arena::CreateMaybeMessage<::NFrame::BevLogRoleBaseInfo>(Arena*);
template<> ::NFrame::BevLogTransBaseInfo* Arena::CreateMaybeMessage<::NFrame::BevLogTransBaseInfo>(Arena*);
template<> ::NFrame::ServerStateFlow* Arena::CreateMaybeMessage<::NFrame::ServerStateFlow>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFrame {

// ===================================================================

class BevLogBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.BevLogBaseInfo) */ {
 public:
  BevLogBaseInfo();
  virtual ~BevLogBaseInfo();

  BevLogBaseInfo(const BevLogBaseInfo& from);

  inline BevLogBaseInfo& operator=(const BevLogBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BevLogBaseInfo(BevLogBaseInfo&& from) noexcept
    : BevLogBaseInfo() {
    *this = ::std::move(from);
  }

  inline BevLogBaseInfo& operator=(BevLogBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BevLogBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BevLogBaseInfo* internal_default_instance() {
    return reinterpret_cast<const BevLogBaseInfo*>(
               &_BevLogBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BevLogBaseInfo* other);
  friend void swap(BevLogBaseInfo& a, BevLogBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BevLogBaseInfo* New() const final {
    return CreateMaybeMessage<BevLogBaseInfo>(NULL);
  }

  BevLogBaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BevLogBaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BevLogBaseInfo& from);
  void MergeFrom(const BevLogBaseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BevLogBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szGameSvrId = 1 [(.nanopb) = {
  void clear_szgamesvrid();
  static const int kSzGameSvrIdFieldNumber = 1;
  const ::std::string& szgamesvrid() const;
  void set_szgamesvrid(const ::std::string& value);
  #if LANG_CXX11
  void set_szgamesvrid(::std::string&& value);
  #endif
  void set_szgamesvrid(const char* value);
  void set_szgamesvrid(const char* value, size_t size);
  ::std::string* mutable_szgamesvrid();
  ::std::string* release_szgamesvrid();
  void set_allocated_szgamesvrid(::std::string* szgamesvrid);

  // string szVGameAppid = 3 [(.nanopb) = {
  void clear_szvgameappid();
  static const int kSzVGameAppidFieldNumber = 3;
  const ::std::string& szvgameappid() const;
  void set_szvgameappid(const ::std::string& value);
  #if LANG_CXX11
  void set_szvgameappid(::std::string&& value);
  #endif
  void set_szvgameappid(const char* value);
  void set_szvgameappid(const char* value, size_t size);
  ::std::string* mutable_szvgameappid();
  ::std::string* release_szvgameappid();
  void set_allocated_szvgameappid(::std::string* szvgameappid);

  // string szVopenid = 6 [(.nanopb) = {
  void clear_szvopenid();
  static const int kSzVopenidFieldNumber = 6;
  const ::std::string& szvopenid() const;
  void set_szvopenid(const ::std::string& value);
  #if LANG_CXX11
  void set_szvopenid(::std::string&& value);
  #endif
  void set_szvopenid(const char* value);
  void set_szvopenid(const char* value, size_t size);
  ::std::string* mutable_szvopenid();
  ::std::string* release_szvopenid();
  void set_allocated_szvopenid(::std::string* szvopenid);

  // uint64 tDtEventTime = 2;
  void clear_tdteventtime();
  static const int kTDtEventTimeFieldNumber = 2;
  ::google::protobuf::uint64 tdteventtime() const;
  void set_tdteventtime(::google::protobuf::uint64 value);

  // int32 iPlatID = 4;
  void clear_iplatid();
  static const int kIPlatIDFieldNumber = 4;
  ::google::protobuf::int32 iplatid() const;
  void set_iplatid(::google::protobuf::int32 value);

  // int32 iIZoneAreaID = 5;
  void clear_iizoneareaid();
  static const int kIIZoneAreaIDFieldNumber = 5;
  ::google::protobuf::int32 iizoneareaid() const;
  void set_iizoneareaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.BevLogBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szgamesvrid_;
  ::google::protobuf::internal::ArenaStringPtr szvgameappid_;
  ::google::protobuf::internal::ArenaStringPtr szvopenid_;
  ::google::protobuf::uint64 tdteventtime_;
  ::google::protobuf::int32 iplatid_;
  ::google::protobuf::int32 iizoneareaid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameBehavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BevLogDeviceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.BevLogDeviceInfo) */ {
 public:
  BevLogDeviceInfo();
  virtual ~BevLogDeviceInfo();

  BevLogDeviceInfo(const BevLogDeviceInfo& from);

  inline BevLogDeviceInfo& operator=(const BevLogDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BevLogDeviceInfo(BevLogDeviceInfo&& from) noexcept
    : BevLogDeviceInfo() {
    *this = ::std::move(from);
  }

  inline BevLogDeviceInfo& operator=(BevLogDeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BevLogDeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BevLogDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const BevLogDeviceInfo*>(
               &_BevLogDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BevLogDeviceInfo* other);
  friend void swap(BevLogDeviceInfo& a, BevLogDeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BevLogDeviceInfo* New() const final {
    return CreateMaybeMessage<BevLogDeviceInfo>(NULL);
  }

  BevLogDeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BevLogDeviceInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BevLogDeviceInfo& from);
  void MergeFrom(const BevLogDeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BevLogDeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szClientVersion = 1 [(.nanopb) = {
  void clear_szclientversion();
  static const int kSzClientVersionFieldNumber = 1;
  const ::std::string& szclientversion() const;
  void set_szclientversion(const ::std::string& value);
  #if LANG_CXX11
  void set_szclientversion(::std::string&& value);
  #endif
  void set_szclientversion(const char* value);
  void set_szclientversion(const char* value, size_t size);
  ::std::string* mutable_szclientversion();
  ::std::string* release_szclientversion();
  void set_allocated_szclientversion(::std::string* szclientversion);

  // string szSystemSoftware = 2 [(.nanopb) = {
  void clear_szsystemsoftware();
  static const int kSzSystemSoftwareFieldNumber = 2;
  const ::std::string& szsystemsoftware() const;
  void set_szsystemsoftware(const ::std::string& value);
  #if LANG_CXX11
  void set_szsystemsoftware(::std::string&& value);
  #endif
  void set_szsystemsoftware(const char* value);
  void set_szsystemsoftware(const char* value, size_t size);
  ::std::string* mutable_szsystemsoftware();
  ::std::string* release_szsystemsoftware();
  void set_allocated_szsystemsoftware(::std::string* szsystemsoftware);

  // string szSystemHardware = 3 [(.nanopb) = {
  void clear_szsystemhardware();
  static const int kSzSystemHardwareFieldNumber = 3;
  const ::std::string& szsystemhardware() const;
  void set_szsystemhardware(const ::std::string& value);
  #if LANG_CXX11
  void set_szsystemhardware(::std::string&& value);
  #endif
  void set_szsystemhardware(const char* value);
  void set_szsystemhardware(const char* value, size_t size);
  ::std::string* mutable_szsystemhardware();
  ::std::string* release_szsystemhardware();
  void set_allocated_szsystemhardware(::std::string* szsystemhardware);

  // string szTelecomOper = 4 [(.nanopb) = {
  void clear_sztelecomoper();
  static const int kSzTelecomOperFieldNumber = 4;
  const ::std::string& sztelecomoper() const;
  void set_sztelecomoper(const ::std::string& value);
  #if LANG_CXX11
  void set_sztelecomoper(::std::string&& value);
  #endif
  void set_sztelecomoper(const char* value);
  void set_sztelecomoper(const char* value, size_t size);
  ::std::string* mutable_sztelecomoper();
  ::std::string* release_sztelecomoper();
  void set_allocated_sztelecomoper(::std::string* sztelecomoper);

  // string szNetwork = 5 [(.nanopb) = {
  void clear_sznetwork();
  static const int kSzNetworkFieldNumber = 5;
  const ::std::string& sznetwork() const;
  void set_sznetwork(const ::std::string& value);
  #if LANG_CXX11
  void set_sznetwork(::std::string&& value);
  #endif
  void set_sznetwork(const char* value);
  void set_sznetwork(const char* value, size_t size);
  ::std::string* mutable_sznetwork();
  ::std::string* release_sznetwork();
  void set_allocated_sznetwork(::std::string* sznetwork);

  // string szCpuHardware = 9 [(.nanopb) = {
  void clear_szcpuhardware();
  static const int kSzCpuHardwareFieldNumber = 9;
  const ::std::string& szcpuhardware() const;
  void set_szcpuhardware(const ::std::string& value);
  #if LANG_CXX11
  void set_szcpuhardware(::std::string&& value);
  #endif
  void set_szcpuhardware(const char* value);
  void set_szcpuhardware(const char* value, size_t size);
  ::std::string* mutable_szcpuhardware();
  ::std::string* release_szcpuhardware();
  void set_allocated_szcpuhardware(::std::string* szcpuhardware);

  // string szGLRender = 11 [(.nanopb) = {
  void clear_szglrender();
  static const int kSzGLRenderFieldNumber = 11;
  const ::std::string& szglrender() const;
  void set_szglrender(const ::std::string& value);
  #if LANG_CXX11
  void set_szglrender(::std::string&& value);
  #endif
  void set_szglrender(const char* value);
  void set_szglrender(const char* value, size_t size);
  ::std::string* mutable_szglrender();
  ::std::string* release_szglrender();
  void set_allocated_szglrender(::std::string* szglrender);

  // string szGLVersion = 12 [(.nanopb) = {
  void clear_szglversion();
  static const int kSzGLVersionFieldNumber = 12;
  const ::std::string& szglversion() const;
  void set_szglversion(const ::std::string& value);
  #if LANG_CXX11
  void set_szglversion(::std::string&& value);
  #endif
  void set_szglversion(const char* value);
  void set_szglversion(const char* value, size_t size);
  ::std::string* mutable_szglversion();
  ::std::string* release_szglversion();
  void set_allocated_szglversion(::std::string* szglversion);

  // string szDeviceId = 13 [(.nanopb) = {
  void clear_szdeviceid();
  static const int kSzDeviceIdFieldNumber = 13;
  const ::std::string& szdeviceid() const;
  void set_szdeviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_szdeviceid(::std::string&& value);
  #endif
  void set_szdeviceid(const char* value);
  void set_szdeviceid(const char* value, size_t size);
  ::std::string* mutable_szdeviceid();
  ::std::string* release_szdeviceid();
  void set_allocated_szdeviceid(::std::string* szdeviceid);

  // string szIPStr = 15 [(.nanopb) = {
  void clear_szipstr();
  static const int kSzIPStrFieldNumber = 15;
  const ::std::string& szipstr() const;
  void set_szipstr(const ::std::string& value);
  #if LANG_CXX11
  void set_szipstr(::std::string&& value);
  #endif
  void set_szipstr(const char* value);
  void set_szipstr(const char* value, size_t size);
  ::std::string* mutable_szipstr();
  ::std::string* release_szipstr();
  void set_allocated_szipstr(::std::string* szipstr);

  // string szIPV6Str = 17 [(.nanopb) = {
  void clear_szipv6str();
  static const int kSzIPV6StrFieldNumber = 17;
  const ::std::string& szipv6str() const;
  void set_szipv6str(const ::std::string& value);
  #if LANG_CXX11
  void set_szipv6str(::std::string&& value);
  #endif
  void set_szipv6str(const char* value);
  void set_szipv6str(const char* value, size_t size);
  ::std::string* mutable_szipv6str();
  ::std::string* release_szipv6str();
  void set_allocated_szipv6str(::std::string* szipv6str);

  // string szMacAddr = 18 [(.nanopb) = {
  void clear_szmacaddr();
  static const int kSzMacAddrFieldNumber = 18;
  const ::std::string& szmacaddr() const;
  void set_szmacaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_szmacaddr(::std::string&& value);
  #endif
  void set_szmacaddr(const char* value);
  void set_szmacaddr(const char* value, size_t size);
  ::std::string* mutable_szmacaddr();
  ::std::string* release_szmacaddr();
  void set_allocated_szmacaddr(::std::string* szmacaddr);

  // string szInstallPath = 19 [(.nanopb) = {
  void clear_szinstallpath();
  static const int kSzInstallPathFieldNumber = 19;
  const ::std::string& szinstallpath() const;
  void set_szinstallpath(const ::std::string& value);
  #if LANG_CXX11
  void set_szinstallpath(::std::string&& value);
  #endif
  void set_szinstallpath(const char* value);
  void set_szinstallpath(const char* value, size_t size);
  ::std::string* mutable_szinstallpath();
  ::std::string* release_szinstallpath();
  void set_allocated_szinstallpath(::std::string* szinstallpath);

  // int32 iScreenWidth = 6;
  void clear_iscreenwidth();
  static const int kIScreenWidthFieldNumber = 6;
  ::google::protobuf::int32 iscreenwidth() const;
  void set_iscreenwidth(::google::protobuf::int32 value);

  // int32 iScreenHight = 7;
  void clear_iscreenhight();
  static const int kIScreenHightFieldNumber = 7;
  ::google::protobuf::int32 iscreenhight() const;
  void set_iscreenhight(::google::protobuf::int32 value);

  // float fDensity = 8;
  void clear_fdensity();
  static const int kFDensityFieldNumber = 8;
  float fdensity() const;
  void set_fdensity(float value);

  // int32 iMemory = 10;
  void clear_imemory();
  static const int kIMemoryFieldNumber = 10;
  ::google::protobuf::int32 imemory() const;
  void set_imemory(::google::protobuf::int32 value);

  // int32 iIsRoot = 14;
  void clear_iisroot();
  static const int kIIsRootFieldNumber = 14;
  ::google::protobuf::int32 iisroot() const;
  void set_iisroot(::google::protobuf::int32 value);

  // int32 iPort = 16;
  void clear_iport();
  static const int kIPortFieldNumber = 16;
  ::google::protobuf::int32 iport() const;
  void set_iport(::google::protobuf::int32 value);

  // int32 iCountryCode = 20;
  void clear_icountrycode();
  static const int kICountryCodeFieldNumber = 20;
  ::google::protobuf::int32 icountrycode() const;
  void set_icountrycode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.BevLogDeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szclientversion_;
  ::google::protobuf::internal::ArenaStringPtr szsystemsoftware_;
  ::google::protobuf::internal::ArenaStringPtr szsystemhardware_;
  ::google::protobuf::internal::ArenaStringPtr sztelecomoper_;
  ::google::protobuf::internal::ArenaStringPtr sznetwork_;
  ::google::protobuf::internal::ArenaStringPtr szcpuhardware_;
  ::google::protobuf::internal::ArenaStringPtr szglrender_;
  ::google::protobuf::internal::ArenaStringPtr szglversion_;
  ::google::protobuf::internal::ArenaStringPtr szdeviceid_;
  ::google::protobuf::internal::ArenaStringPtr szipstr_;
  ::google::protobuf::internal::ArenaStringPtr szipv6str_;
  ::google::protobuf::internal::ArenaStringPtr szmacaddr_;
  ::google::protobuf::internal::ArenaStringPtr szinstallpath_;
  ::google::protobuf::int32 iscreenwidth_;
  ::google::protobuf::int32 iscreenhight_;
  float fdensity_;
  ::google::protobuf::int32 imemory_;
  ::google::protobuf::int32 iisroot_;
  ::google::protobuf::int32 iport_;
  ::google::protobuf::int32 icountrycode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameBehavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BevLogRoleBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.BevLogRoleBaseInfo) */ {
 public:
  BevLogRoleBaseInfo();
  virtual ~BevLogRoleBaseInfo();

  BevLogRoleBaseInfo(const BevLogRoleBaseInfo& from);

  inline BevLogRoleBaseInfo& operator=(const BevLogRoleBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BevLogRoleBaseInfo(BevLogRoleBaseInfo&& from) noexcept
    : BevLogRoleBaseInfo() {
    *this = ::std::move(from);
  }

  inline BevLogRoleBaseInfo& operator=(BevLogRoleBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BevLogRoleBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BevLogRoleBaseInfo* internal_default_instance() {
    return reinterpret_cast<const BevLogRoleBaseInfo*>(
               &_BevLogRoleBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BevLogRoleBaseInfo* other);
  friend void swap(BevLogRoleBaseInfo& a, BevLogRoleBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BevLogRoleBaseInfo* New() const final {
    return CreateMaybeMessage<BevLogRoleBaseInfo>(NULL);
  }

  BevLogRoleBaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BevLogRoleBaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BevLogRoleBaseInfo& from);
  void MergeFrom(const BevLogRoleBaseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BevLogRoleBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szVRoleID = 1 [(.nanopb) = {
  void clear_szvroleid();
  static const int kSzVRoleIDFieldNumber = 1;
  const ::std::string& szvroleid() const;
  void set_szvroleid(const ::std::string& value);
  #if LANG_CXX11
  void set_szvroleid(::std::string&& value);
  #endif
  void set_szvroleid(const char* value);
  void set_szvroleid(const char* value, size_t size);
  ::std::string* mutable_szvroleid();
  ::std::string* release_szvroleid();
  void set_allocated_szvroleid(::std::string* szvroleid);

  // string szVRoleName = 2 [(.nanopb) = {
  void clear_szvrolename();
  static const int kSzVRoleNameFieldNumber = 2;
  const ::std::string& szvrolename() const;
  void set_szvrolename(const ::std::string& value);
  #if LANG_CXX11
  void set_szvrolename(::std::string&& value);
  #endif
  void set_szvrolename(const char* value);
  void set_szvrolename(const char* value, size_t size);
  ::std::string* mutable_szvrolename();
  ::std::string* release_szvrolename();
  void set_allocated_szvrolename(::std::string* szvrolename);

  // int32 iIHomeLevel = 3;
  void clear_iihomelevel();
  static const int kIIHomeLevelFieldNumber = 3;
  ::google::protobuf::int32 iihomelevel() const;
  void set_iihomelevel(::google::protobuf::int32 value);

  // int32 iSurviveLevel = 4;
  void clear_isurvivelevel();
  static const int kISurviveLevelFieldNumber = 4;
  ::google::protobuf::int32 isurvivelevel() const;
  void set_isurvivelevel(::google::protobuf::int32 value);

  // int64 llFamilyID = 6;
  void clear_llfamilyid();
  static const int kLlFamilyIDFieldNumber = 6;
  ::google::protobuf::int64 llfamilyid() const;
  void set_llfamilyid(::google::protobuf::int64 value);

  // int32 iBattleLevel = 5;
  void clear_ibattlelevel();
  static const int kIBattleLevelFieldNumber = 5;
  ::google::protobuf::int32 ibattlelevel() const;
  void set_ibattlelevel(::google::protobuf::int32 value);

  // int32 iIVipLevel = 7;
  void clear_iiviplevel();
  static const int kIIVipLevelFieldNumber = 7;
  ::google::protobuf::int32 iiviplevel() const;
  void set_iiviplevel(::google::protobuf::int32 value);

  // int32 iProfId = 8;
  void clear_iprofid();
  static const int kIProfIdFieldNumber = 8;
  ::google::protobuf::int32 iprofid() const;
  void set_iprofid(::google::protobuf::int32 value);

  // int32 iGender = 9;
  void clear_igender();
  static const int kIGenderFieldNumber = 9;
  ::google::protobuf::int32 igender() const;
  void set_igender(::google::protobuf::int32 value);

  // int32 iBattleForce = 10;
  void clear_ibattleforce();
  static const int kIBattleForceFieldNumber = 10;
  ::google::protobuf::int32 ibattleforce() const;
  void set_ibattleforce(::google::protobuf::int32 value);

  // int32 iBirthTime = 11;
  void clear_ibirthtime();
  static const int kIBirthTimeFieldNumber = 11;
  ::google::protobuf::int32 ibirthtime() const;
  void set_ibirthtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.BevLogRoleBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szvroleid_;
  ::google::protobuf::internal::ArenaStringPtr szvrolename_;
  ::google::protobuf::int32 iihomelevel_;
  ::google::protobuf::int32 isurvivelevel_;
  ::google::protobuf::int64 llfamilyid_;
  ::google::protobuf::int32 ibattlelevel_;
  ::google::protobuf::int32 iiviplevel_;
  ::google::protobuf::int32 iprofid_;
  ::google::protobuf::int32 igender_;
  ::google::protobuf::int32 ibattleforce_;
  ::google::protobuf::int32 ibirthtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameBehavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BevLogTransBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.BevLogTransBaseInfo) */ {
 public:
  BevLogTransBaseInfo();
  virtual ~BevLogTransBaseInfo();

  BevLogTransBaseInfo(const BevLogTransBaseInfo& from);

  inline BevLogTransBaseInfo& operator=(const BevLogTransBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BevLogTransBaseInfo(BevLogTransBaseInfo&& from) noexcept
    : BevLogTransBaseInfo() {
    *this = ::std::move(from);
  }

  inline BevLogTransBaseInfo& operator=(BevLogTransBaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BevLogTransBaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BevLogTransBaseInfo* internal_default_instance() {
    return reinterpret_cast<const BevLogTransBaseInfo*>(
               &_BevLogTransBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BevLogTransBaseInfo* other);
  friend void swap(BevLogTransBaseInfo& a, BevLogTransBaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BevLogTransBaseInfo* New() const final {
    return CreateMaybeMessage<BevLogTransBaseInfo>(NULL);
  }

  BevLogTransBaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BevLogTransBaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BevLogTransBaseInfo& from);
  void MergeFrom(const BevLogTransBaseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BevLogTransBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 iGlobalID = 1;
  void clear_iglobalid();
  static const int kIGlobalIDFieldNumber = 1;
  ::google::protobuf::int32 iglobalid() const;
  void set_iglobalid(::google::protobuf::int32 value);

  // int32 iErrCode = 2;
  void clear_ierrcode();
  static const int kIErrCodeFieldNumber = 2;
  ::google::protobuf::int32 ierrcode() const;
  void set_ierrcode(::google::protobuf::int32 value);

  // uint64 ullTransStartTime = 4;
  void clear_ulltransstarttime();
  static const int kUllTransStartTimeFieldNumber = 4;
  ::google::protobuf::uint64 ulltransstarttime() const;
  void set_ulltransstarttime(::google::protobuf::uint64 value);

  // uint64 ullTransStopTime = 5;
  void clear_ulltransstoptime();
  static const int kUllTransStopTimeFieldNumber = 5;
  ::google::protobuf::uint64 ulltransstoptime() const;
  void set_ulltransstoptime(::google::protobuf::uint64 value);

  // int32 iEotType = 3;
  void clear_ieottype();
  static const int kIEotTypeFieldNumber = 3;
  ::google::protobuf::int32 ieottype() const;
  void set_ieottype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.BevLogTransBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 iglobalid_;
  ::google::protobuf::int32 ierrcode_;
  ::google::protobuf::uint64 ulltransstarttime_;
  ::google::protobuf::uint64 ulltransstoptime_;
  ::google::protobuf::int32 ieottype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameBehavior_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerStateFlow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ServerStateFlow) */ {
 public:
  ServerStateFlow();
  virtual ~ServerStateFlow();

  ServerStateFlow(const ServerStateFlow& from);

  inline ServerStateFlow& operator=(const ServerStateFlow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerStateFlow(ServerStateFlow&& from) noexcept
    : ServerStateFlow() {
    *this = ::std::move(from);
  }

  inline ServerStateFlow& operator=(ServerStateFlow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStateFlow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStateFlow* internal_default_instance() {
    return reinterpret_cast<const ServerStateFlow*>(
               &_ServerStateFlow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServerStateFlow* other);
  friend void swap(ServerStateFlow& a, ServerStateFlow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerStateFlow* New() const final {
    return CreateMaybeMessage<ServerStateFlow>(NULL);
  }

  ServerStateFlow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerStateFlow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerStateFlow& from);
  void MergeFrom(const ServerStateFlow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStateFlow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szVGameIP = 2 [(.nanopb) = {
  void clear_szvgameip();
  static const int kSzVGameIPFieldNumber = 2;
  const ::std::string& szvgameip() const;
  void set_szvgameip(const ::std::string& value);
  #if LANG_CXX11
  void set_szvgameip(::std::string&& value);
  #endif
  void set_szvgameip(const char* value);
  void set_szvgameip(const char* value, size_t size);
  ::std::string* mutable_szvgameip();
  ::std::string* release_szvgameip();
  void set_allocated_szvgameip(::std::string* szvgameip);

  // uint64 tDtEventTime = 1 [(.nanopb) = {
  void clear_tdteventtime();
  static const int kTDtEventTimeFieldNumber = 1;
  ::google::protobuf::uint64 tdteventtime() const;
  void set_tdteventtime(::google::protobuf::uint64 value);

  // int32 iIZoneAreaID = 3;
  void clear_iizoneareaid();
  static const int kIIZoneAreaIDFieldNumber = 3;
  ::google::protobuf::int32 iizoneareaid() const;
  void set_iizoneareaid(::google::protobuf::int32 value);

  // int32 iITimeShift = 4;
  void clear_iitimeshift();
  static const int kIITimeShiftFieldNumber = 4;
  ::google::protobuf::int32 iitimeshift() const;
  void set_iitimeshift(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.ServerStateFlow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szvgameip_;
  ::google::protobuf::uint64 tdteventtime_;
  ::google::protobuf::int32 iizoneareaid_;
  ::google::protobuf::int32 iitimeshift_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameBehavior_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BevLogBaseInfo

// string szGameSvrId = 1 [(.nanopb) = {
inline void BevLogBaseInfo::clear_szgamesvrid() {
  szgamesvrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogBaseInfo::szgamesvrid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogBaseInfo.szGameSvrId)
  return szgamesvrid_.GetNoArena();
}
inline void BevLogBaseInfo::set_szgamesvrid(const ::std::string& value) {
  
  szgamesvrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogBaseInfo.szGameSvrId)
}
#if LANG_CXX11
inline void BevLogBaseInfo::set_szgamesvrid(::std::string&& value) {
  
  szgamesvrid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogBaseInfo.szGameSvrId)
}
#endif
inline void BevLogBaseInfo::set_szgamesvrid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szgamesvrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogBaseInfo.szGameSvrId)
}
inline void BevLogBaseInfo::set_szgamesvrid(const char* value, size_t size) {
  
  szgamesvrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogBaseInfo.szGameSvrId)
}
inline ::std::string* BevLogBaseInfo::mutable_szgamesvrid() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogBaseInfo.szGameSvrId)
  return szgamesvrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogBaseInfo::release_szgamesvrid() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogBaseInfo.szGameSvrId)
  
  return szgamesvrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogBaseInfo::set_allocated_szgamesvrid(::std::string* szgamesvrid) {
  if (szgamesvrid != NULL) {
    
  } else {
    
  }
  szgamesvrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szgamesvrid);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogBaseInfo.szGameSvrId)
}

// uint64 tDtEventTime = 2;
inline void BevLogBaseInfo::clear_tdteventtime() {
  tdteventtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BevLogBaseInfo::tdteventtime() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogBaseInfo.tDtEventTime)
  return tdteventtime_;
}
inline void BevLogBaseInfo::set_tdteventtime(::google::protobuf::uint64 value) {
  
  tdteventtime_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogBaseInfo.tDtEventTime)
}

// string szVGameAppid = 3 [(.nanopb) = {
inline void BevLogBaseInfo::clear_szvgameappid() {
  szvgameappid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogBaseInfo::szvgameappid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogBaseInfo.szVGameAppid)
  return szvgameappid_.GetNoArena();
}
inline void BevLogBaseInfo::set_szvgameappid(const ::std::string& value) {
  
  szvgameappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogBaseInfo.szVGameAppid)
}
#if LANG_CXX11
inline void BevLogBaseInfo::set_szvgameappid(::std::string&& value) {
  
  szvgameappid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogBaseInfo.szVGameAppid)
}
#endif
inline void BevLogBaseInfo::set_szvgameappid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szvgameappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogBaseInfo.szVGameAppid)
}
inline void BevLogBaseInfo::set_szvgameappid(const char* value, size_t size) {
  
  szvgameappid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogBaseInfo.szVGameAppid)
}
inline ::std::string* BevLogBaseInfo::mutable_szvgameappid() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogBaseInfo.szVGameAppid)
  return szvgameappid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogBaseInfo::release_szvgameappid() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogBaseInfo.szVGameAppid)
  
  return szvgameappid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogBaseInfo::set_allocated_szvgameappid(::std::string* szvgameappid) {
  if (szvgameappid != NULL) {
    
  } else {
    
  }
  szvgameappid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szvgameappid);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogBaseInfo.szVGameAppid)
}

// int32 iPlatID = 4;
inline void BevLogBaseInfo::clear_iplatid() {
  iplatid_ = 0;
}
inline ::google::protobuf::int32 BevLogBaseInfo::iplatid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogBaseInfo.iPlatID)
  return iplatid_;
}
inline void BevLogBaseInfo::set_iplatid(::google::protobuf::int32 value) {
  
  iplatid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogBaseInfo.iPlatID)
}

// int32 iIZoneAreaID = 5;
inline void BevLogBaseInfo::clear_iizoneareaid() {
  iizoneareaid_ = 0;
}
inline ::google::protobuf::int32 BevLogBaseInfo::iizoneareaid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogBaseInfo.iIZoneAreaID)
  return iizoneareaid_;
}
inline void BevLogBaseInfo::set_iizoneareaid(::google::protobuf::int32 value) {
  
  iizoneareaid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogBaseInfo.iIZoneAreaID)
}

// string szVopenid = 6 [(.nanopb) = {
inline void BevLogBaseInfo::clear_szvopenid() {
  szvopenid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogBaseInfo::szvopenid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogBaseInfo.szVopenid)
  return szvopenid_.GetNoArena();
}
inline void BevLogBaseInfo::set_szvopenid(const ::std::string& value) {
  
  szvopenid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogBaseInfo.szVopenid)
}
#if LANG_CXX11
inline void BevLogBaseInfo::set_szvopenid(::std::string&& value) {
  
  szvopenid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogBaseInfo.szVopenid)
}
#endif
inline void BevLogBaseInfo::set_szvopenid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szvopenid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogBaseInfo.szVopenid)
}
inline void BevLogBaseInfo::set_szvopenid(const char* value, size_t size) {
  
  szvopenid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogBaseInfo.szVopenid)
}
inline ::std::string* BevLogBaseInfo::mutable_szvopenid() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogBaseInfo.szVopenid)
  return szvopenid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogBaseInfo::release_szvopenid() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogBaseInfo.szVopenid)
  
  return szvopenid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogBaseInfo::set_allocated_szvopenid(::std::string* szvopenid) {
  if (szvopenid != NULL) {
    
  } else {
    
  }
  szvopenid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szvopenid);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogBaseInfo.szVopenid)
}

// -------------------------------------------------------------------

// BevLogDeviceInfo

// string szClientVersion = 1 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szclientversion() {
  szclientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szclientversion() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szClientVersion)
  return szclientversion_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szclientversion(const ::std::string& value) {
  
  szclientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szClientVersion)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szclientversion(::std::string&& value) {
  
  szclientversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szClientVersion)
}
#endif
inline void BevLogDeviceInfo::set_szclientversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szclientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szClientVersion)
}
inline void BevLogDeviceInfo::set_szclientversion(const char* value, size_t size) {
  
  szclientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szClientVersion)
}
inline ::std::string* BevLogDeviceInfo::mutable_szclientversion() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szClientVersion)
  return szclientversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szclientversion() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szClientVersion)
  
  return szclientversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szclientversion(::std::string* szclientversion) {
  if (szclientversion != NULL) {
    
  } else {
    
  }
  szclientversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szclientversion);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szClientVersion)
}

// string szSystemSoftware = 2 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szsystemsoftware() {
  szsystemsoftware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szsystemsoftware() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szSystemSoftware)
  return szsystemsoftware_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szsystemsoftware(const ::std::string& value) {
  
  szsystemsoftware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szSystemSoftware)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szsystemsoftware(::std::string&& value) {
  
  szsystemsoftware_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szSystemSoftware)
}
#endif
inline void BevLogDeviceInfo::set_szsystemsoftware(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szsystemsoftware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szSystemSoftware)
}
inline void BevLogDeviceInfo::set_szsystemsoftware(const char* value, size_t size) {
  
  szsystemsoftware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szSystemSoftware)
}
inline ::std::string* BevLogDeviceInfo::mutable_szsystemsoftware() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szSystemSoftware)
  return szsystemsoftware_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szsystemsoftware() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szSystemSoftware)
  
  return szsystemsoftware_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szsystemsoftware(::std::string* szsystemsoftware) {
  if (szsystemsoftware != NULL) {
    
  } else {
    
  }
  szsystemsoftware_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szsystemsoftware);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szSystemSoftware)
}

// string szSystemHardware = 3 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szsystemhardware() {
  szsystemhardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szsystemhardware() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szSystemHardware)
  return szsystemhardware_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szsystemhardware(const ::std::string& value) {
  
  szsystemhardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szSystemHardware)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szsystemhardware(::std::string&& value) {
  
  szsystemhardware_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szSystemHardware)
}
#endif
inline void BevLogDeviceInfo::set_szsystemhardware(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szsystemhardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szSystemHardware)
}
inline void BevLogDeviceInfo::set_szsystemhardware(const char* value, size_t size) {
  
  szsystemhardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szSystemHardware)
}
inline ::std::string* BevLogDeviceInfo::mutable_szsystemhardware() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szSystemHardware)
  return szsystemhardware_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szsystemhardware() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szSystemHardware)
  
  return szsystemhardware_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szsystemhardware(::std::string* szsystemhardware) {
  if (szsystemhardware != NULL) {
    
  } else {
    
  }
  szsystemhardware_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szsystemhardware);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szSystemHardware)
}

// string szTelecomOper = 4 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_sztelecomoper() {
  sztelecomoper_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::sztelecomoper() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szTelecomOper)
  return sztelecomoper_.GetNoArena();
}
inline void BevLogDeviceInfo::set_sztelecomoper(const ::std::string& value) {
  
  sztelecomoper_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szTelecomOper)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_sztelecomoper(::std::string&& value) {
  
  sztelecomoper_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szTelecomOper)
}
#endif
inline void BevLogDeviceInfo::set_sztelecomoper(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sztelecomoper_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szTelecomOper)
}
inline void BevLogDeviceInfo::set_sztelecomoper(const char* value, size_t size) {
  
  sztelecomoper_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szTelecomOper)
}
inline ::std::string* BevLogDeviceInfo::mutable_sztelecomoper() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szTelecomOper)
  return sztelecomoper_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_sztelecomoper() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szTelecomOper)
  
  return sztelecomoper_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_sztelecomoper(::std::string* sztelecomoper) {
  if (sztelecomoper != NULL) {
    
  } else {
    
  }
  sztelecomoper_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sztelecomoper);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szTelecomOper)
}

// string szNetwork = 5 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_sznetwork() {
  sznetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::sznetwork() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szNetwork)
  return sznetwork_.GetNoArena();
}
inline void BevLogDeviceInfo::set_sznetwork(const ::std::string& value) {
  
  sznetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szNetwork)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_sznetwork(::std::string&& value) {
  
  sznetwork_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szNetwork)
}
#endif
inline void BevLogDeviceInfo::set_sznetwork(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sznetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szNetwork)
}
inline void BevLogDeviceInfo::set_sznetwork(const char* value, size_t size) {
  
  sznetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szNetwork)
}
inline ::std::string* BevLogDeviceInfo::mutable_sznetwork() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szNetwork)
  return sznetwork_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_sznetwork() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szNetwork)
  
  return sznetwork_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_sznetwork(::std::string* sznetwork) {
  if (sznetwork != NULL) {
    
  } else {
    
  }
  sznetwork_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznetwork);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szNetwork)
}

// int32 iScreenWidth = 6;
inline void BevLogDeviceInfo::clear_iscreenwidth() {
  iscreenwidth_ = 0;
}
inline ::google::protobuf::int32 BevLogDeviceInfo::iscreenwidth() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.iScreenWidth)
  return iscreenwidth_;
}
inline void BevLogDeviceInfo::set_iscreenwidth(::google::protobuf::int32 value) {
  
  iscreenwidth_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.iScreenWidth)
}

// int32 iScreenHight = 7;
inline void BevLogDeviceInfo::clear_iscreenhight() {
  iscreenhight_ = 0;
}
inline ::google::protobuf::int32 BevLogDeviceInfo::iscreenhight() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.iScreenHight)
  return iscreenhight_;
}
inline void BevLogDeviceInfo::set_iscreenhight(::google::protobuf::int32 value) {
  
  iscreenhight_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.iScreenHight)
}

// float fDensity = 8;
inline void BevLogDeviceInfo::clear_fdensity() {
  fdensity_ = 0;
}
inline float BevLogDeviceInfo::fdensity() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.fDensity)
  return fdensity_;
}
inline void BevLogDeviceInfo::set_fdensity(float value) {
  
  fdensity_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.fDensity)
}

// string szCpuHardware = 9 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szcpuhardware() {
  szcpuhardware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szcpuhardware() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szCpuHardware)
  return szcpuhardware_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szcpuhardware(const ::std::string& value) {
  
  szcpuhardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szCpuHardware)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szcpuhardware(::std::string&& value) {
  
  szcpuhardware_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szCpuHardware)
}
#endif
inline void BevLogDeviceInfo::set_szcpuhardware(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szcpuhardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szCpuHardware)
}
inline void BevLogDeviceInfo::set_szcpuhardware(const char* value, size_t size) {
  
  szcpuhardware_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szCpuHardware)
}
inline ::std::string* BevLogDeviceInfo::mutable_szcpuhardware() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szCpuHardware)
  return szcpuhardware_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szcpuhardware() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szCpuHardware)
  
  return szcpuhardware_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szcpuhardware(::std::string* szcpuhardware) {
  if (szcpuhardware != NULL) {
    
  } else {
    
  }
  szcpuhardware_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szcpuhardware);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szCpuHardware)
}

// int32 iMemory = 10;
inline void BevLogDeviceInfo::clear_imemory() {
  imemory_ = 0;
}
inline ::google::protobuf::int32 BevLogDeviceInfo::imemory() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.iMemory)
  return imemory_;
}
inline void BevLogDeviceInfo::set_imemory(::google::protobuf::int32 value) {
  
  imemory_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.iMemory)
}

// string szGLRender = 11 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szglrender() {
  szglrender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szglrender() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szGLRender)
  return szglrender_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szglrender(const ::std::string& value) {
  
  szglrender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szGLRender)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szglrender(::std::string&& value) {
  
  szglrender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szGLRender)
}
#endif
inline void BevLogDeviceInfo::set_szglrender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szglrender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szGLRender)
}
inline void BevLogDeviceInfo::set_szglrender(const char* value, size_t size) {
  
  szglrender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szGLRender)
}
inline ::std::string* BevLogDeviceInfo::mutable_szglrender() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szGLRender)
  return szglrender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szglrender() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szGLRender)
  
  return szglrender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szglrender(::std::string* szglrender) {
  if (szglrender != NULL) {
    
  } else {
    
  }
  szglrender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szglrender);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szGLRender)
}

// string szGLVersion = 12 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szglversion() {
  szglversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szglversion() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szGLVersion)
  return szglversion_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szglversion(const ::std::string& value) {
  
  szglversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szGLVersion)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szglversion(::std::string&& value) {
  
  szglversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szGLVersion)
}
#endif
inline void BevLogDeviceInfo::set_szglversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szglversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szGLVersion)
}
inline void BevLogDeviceInfo::set_szglversion(const char* value, size_t size) {
  
  szglversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szGLVersion)
}
inline ::std::string* BevLogDeviceInfo::mutable_szglversion() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szGLVersion)
  return szglversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szglversion() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szGLVersion)
  
  return szglversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szglversion(::std::string* szglversion) {
  if (szglversion != NULL) {
    
  } else {
    
  }
  szglversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szglversion);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szGLVersion)
}

// string szDeviceId = 13 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szdeviceid() {
  szdeviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szdeviceid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szDeviceId)
  return szdeviceid_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szdeviceid(const ::std::string& value) {
  
  szdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szDeviceId)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szdeviceid(::std::string&& value) {
  
  szdeviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szDeviceId)
}
#endif
inline void BevLogDeviceInfo::set_szdeviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szDeviceId)
}
inline void BevLogDeviceInfo::set_szdeviceid(const char* value, size_t size) {
  
  szdeviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szDeviceId)
}
inline ::std::string* BevLogDeviceInfo::mutable_szdeviceid() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szDeviceId)
  return szdeviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szdeviceid() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szDeviceId)
  
  return szdeviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szdeviceid(::std::string* szdeviceid) {
  if (szdeviceid != NULL) {
    
  } else {
    
  }
  szdeviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdeviceid);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szDeviceId)
}

// int32 iIsRoot = 14;
inline void BevLogDeviceInfo::clear_iisroot() {
  iisroot_ = 0;
}
inline ::google::protobuf::int32 BevLogDeviceInfo::iisroot() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.iIsRoot)
  return iisroot_;
}
inline void BevLogDeviceInfo::set_iisroot(::google::protobuf::int32 value) {
  
  iisroot_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.iIsRoot)
}

// string szIPStr = 15 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szipstr() {
  szipstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szipstr() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szIPStr)
  return szipstr_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szipstr(const ::std::string& value) {
  
  szipstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szIPStr)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szipstr(::std::string&& value) {
  
  szipstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szIPStr)
}
#endif
inline void BevLogDeviceInfo::set_szipstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szipstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szIPStr)
}
inline void BevLogDeviceInfo::set_szipstr(const char* value, size_t size) {
  
  szipstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szIPStr)
}
inline ::std::string* BevLogDeviceInfo::mutable_szipstr() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szIPStr)
  return szipstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szipstr() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szIPStr)
  
  return szipstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szipstr(::std::string* szipstr) {
  if (szipstr != NULL) {
    
  } else {
    
  }
  szipstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szipstr);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szIPStr)
}

// int32 iPort = 16;
inline void BevLogDeviceInfo::clear_iport() {
  iport_ = 0;
}
inline ::google::protobuf::int32 BevLogDeviceInfo::iport() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.iPort)
  return iport_;
}
inline void BevLogDeviceInfo::set_iport(::google::protobuf::int32 value) {
  
  iport_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.iPort)
}

// string szIPV6Str = 17 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szipv6str() {
  szipv6str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szipv6str() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szIPV6Str)
  return szipv6str_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szipv6str(const ::std::string& value) {
  
  szipv6str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szIPV6Str)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szipv6str(::std::string&& value) {
  
  szipv6str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szIPV6Str)
}
#endif
inline void BevLogDeviceInfo::set_szipv6str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szipv6str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szIPV6Str)
}
inline void BevLogDeviceInfo::set_szipv6str(const char* value, size_t size) {
  
  szipv6str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szIPV6Str)
}
inline ::std::string* BevLogDeviceInfo::mutable_szipv6str() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szIPV6Str)
  return szipv6str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szipv6str() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szIPV6Str)
  
  return szipv6str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szipv6str(::std::string* szipv6str) {
  if (szipv6str != NULL) {
    
  } else {
    
  }
  szipv6str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szipv6str);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szIPV6Str)
}

// string szMacAddr = 18 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szmacaddr() {
  szmacaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szmacaddr() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szMacAddr)
  return szmacaddr_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szmacaddr(const ::std::string& value) {
  
  szmacaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szMacAddr)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szmacaddr(::std::string&& value) {
  
  szmacaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szMacAddr)
}
#endif
inline void BevLogDeviceInfo::set_szmacaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szmacaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szMacAddr)
}
inline void BevLogDeviceInfo::set_szmacaddr(const char* value, size_t size) {
  
  szmacaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szMacAddr)
}
inline ::std::string* BevLogDeviceInfo::mutable_szmacaddr() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szMacAddr)
  return szmacaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szmacaddr() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szMacAddr)
  
  return szmacaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szmacaddr(::std::string* szmacaddr) {
  if (szmacaddr != NULL) {
    
  } else {
    
  }
  szmacaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szmacaddr);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szMacAddr)
}

// string szInstallPath = 19 [(.nanopb) = {
inline void BevLogDeviceInfo::clear_szinstallpath() {
  szinstallpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogDeviceInfo::szinstallpath() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.szInstallPath)
  return szinstallpath_.GetNoArena();
}
inline void BevLogDeviceInfo::set_szinstallpath(const ::std::string& value) {
  
  szinstallpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.szInstallPath)
}
#if LANG_CXX11
inline void BevLogDeviceInfo::set_szinstallpath(::std::string&& value) {
  
  szinstallpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogDeviceInfo.szInstallPath)
}
#endif
inline void BevLogDeviceInfo::set_szinstallpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szinstallpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogDeviceInfo.szInstallPath)
}
inline void BevLogDeviceInfo::set_szinstallpath(const char* value, size_t size) {
  
  szinstallpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogDeviceInfo.szInstallPath)
}
inline ::std::string* BevLogDeviceInfo::mutable_szinstallpath() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogDeviceInfo.szInstallPath)
  return szinstallpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogDeviceInfo::release_szinstallpath() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogDeviceInfo.szInstallPath)
  
  return szinstallpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogDeviceInfo::set_allocated_szinstallpath(::std::string* szinstallpath) {
  if (szinstallpath != NULL) {
    
  } else {
    
  }
  szinstallpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szinstallpath);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogDeviceInfo.szInstallPath)
}

// int32 iCountryCode = 20;
inline void BevLogDeviceInfo::clear_icountrycode() {
  icountrycode_ = 0;
}
inline ::google::protobuf::int32 BevLogDeviceInfo::icountrycode() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogDeviceInfo.iCountryCode)
  return icountrycode_;
}
inline void BevLogDeviceInfo::set_icountrycode(::google::protobuf::int32 value) {
  
  icountrycode_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogDeviceInfo.iCountryCode)
}

// -------------------------------------------------------------------

// BevLogRoleBaseInfo

// string szVRoleID = 1 [(.nanopb) = {
inline void BevLogRoleBaseInfo::clear_szvroleid() {
  szvroleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogRoleBaseInfo::szvroleid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.szVRoleID)
  return szvroleid_.GetNoArena();
}
inline void BevLogRoleBaseInfo::set_szvroleid(const ::std::string& value) {
  
  szvroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.szVRoleID)
}
#if LANG_CXX11
inline void BevLogRoleBaseInfo::set_szvroleid(::std::string&& value) {
  
  szvroleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogRoleBaseInfo.szVRoleID)
}
#endif
inline void BevLogRoleBaseInfo::set_szvroleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szvroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogRoleBaseInfo.szVRoleID)
}
inline void BevLogRoleBaseInfo::set_szvroleid(const char* value, size_t size) {
  
  szvroleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogRoleBaseInfo.szVRoleID)
}
inline ::std::string* BevLogRoleBaseInfo::mutable_szvroleid() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogRoleBaseInfo.szVRoleID)
  return szvroleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogRoleBaseInfo::release_szvroleid() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogRoleBaseInfo.szVRoleID)
  
  return szvroleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogRoleBaseInfo::set_allocated_szvroleid(::std::string* szvroleid) {
  if (szvroleid != NULL) {
    
  } else {
    
  }
  szvroleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szvroleid);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogRoleBaseInfo.szVRoleID)
}

// string szVRoleName = 2 [(.nanopb) = {
inline void BevLogRoleBaseInfo::clear_szvrolename() {
  szvrolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogRoleBaseInfo::szvrolename() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.szVRoleName)
  return szvrolename_.GetNoArena();
}
inline void BevLogRoleBaseInfo::set_szvrolename(const ::std::string& value) {
  
  szvrolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.szVRoleName)
}
#if LANG_CXX11
inline void BevLogRoleBaseInfo::set_szvrolename(::std::string&& value) {
  
  szvrolename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.BevLogRoleBaseInfo.szVRoleName)
}
#endif
inline void BevLogRoleBaseInfo::set_szvrolename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szvrolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.BevLogRoleBaseInfo.szVRoleName)
}
inline void BevLogRoleBaseInfo::set_szvrolename(const char* value, size_t size) {
  
  szvrolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.BevLogRoleBaseInfo.szVRoleName)
}
inline ::std::string* BevLogRoleBaseInfo::mutable_szvrolename() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.BevLogRoleBaseInfo.szVRoleName)
  return szvrolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogRoleBaseInfo::release_szvrolename() {
  // @@protoc_insertion_point(field_release:NFrame.BevLogRoleBaseInfo.szVRoleName)
  
  return szvrolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogRoleBaseInfo::set_allocated_szvrolename(::std::string* szvrolename) {
  if (szvrolename != NULL) {
    
  } else {
    
  }
  szvrolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szvrolename);
  // @@protoc_insertion_point(field_set_allocated:NFrame.BevLogRoleBaseInfo.szVRoleName)
}

// int32 iIHomeLevel = 3;
inline void BevLogRoleBaseInfo::clear_iihomelevel() {
  iihomelevel_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::iihomelevel() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iIHomeLevel)
  return iihomelevel_;
}
inline void BevLogRoleBaseInfo::set_iihomelevel(::google::protobuf::int32 value) {
  
  iihomelevel_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iIHomeLevel)
}

// int32 iSurviveLevel = 4;
inline void BevLogRoleBaseInfo::clear_isurvivelevel() {
  isurvivelevel_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::isurvivelevel() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iSurviveLevel)
  return isurvivelevel_;
}
inline void BevLogRoleBaseInfo::set_isurvivelevel(::google::protobuf::int32 value) {
  
  isurvivelevel_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iSurviveLevel)
}

// int32 iBattleLevel = 5;
inline void BevLogRoleBaseInfo::clear_ibattlelevel() {
  ibattlelevel_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::ibattlelevel() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iBattleLevel)
  return ibattlelevel_;
}
inline void BevLogRoleBaseInfo::set_ibattlelevel(::google::protobuf::int32 value) {
  
  ibattlelevel_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iBattleLevel)
}

// int64 llFamilyID = 6;
inline void BevLogRoleBaseInfo::clear_llfamilyid() {
  llfamilyid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BevLogRoleBaseInfo::llfamilyid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.llFamilyID)
  return llfamilyid_;
}
inline void BevLogRoleBaseInfo::set_llfamilyid(::google::protobuf::int64 value) {
  
  llfamilyid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.llFamilyID)
}

// int32 iIVipLevel = 7;
inline void BevLogRoleBaseInfo::clear_iiviplevel() {
  iiviplevel_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::iiviplevel() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iIVipLevel)
  return iiviplevel_;
}
inline void BevLogRoleBaseInfo::set_iiviplevel(::google::protobuf::int32 value) {
  
  iiviplevel_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iIVipLevel)
}

// int32 iProfId = 8;
inline void BevLogRoleBaseInfo::clear_iprofid() {
  iprofid_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::iprofid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iProfId)
  return iprofid_;
}
inline void BevLogRoleBaseInfo::set_iprofid(::google::protobuf::int32 value) {
  
  iprofid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iProfId)
}

// int32 iGender = 9;
inline void BevLogRoleBaseInfo::clear_igender() {
  igender_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::igender() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iGender)
  return igender_;
}
inline void BevLogRoleBaseInfo::set_igender(::google::protobuf::int32 value) {
  
  igender_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iGender)
}

// int32 iBattleForce = 10;
inline void BevLogRoleBaseInfo::clear_ibattleforce() {
  ibattleforce_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::ibattleforce() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iBattleForce)
  return ibattleforce_;
}
inline void BevLogRoleBaseInfo::set_ibattleforce(::google::protobuf::int32 value) {
  
  ibattleforce_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iBattleForce)
}

// int32 iBirthTime = 11;
inline void BevLogRoleBaseInfo::clear_ibirthtime() {
  ibirthtime_ = 0;
}
inline ::google::protobuf::int32 BevLogRoleBaseInfo::ibirthtime() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogRoleBaseInfo.iBirthTime)
  return ibirthtime_;
}
inline void BevLogRoleBaseInfo::set_ibirthtime(::google::protobuf::int32 value) {
  
  ibirthtime_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogRoleBaseInfo.iBirthTime)
}

// -------------------------------------------------------------------

// BevLogTransBaseInfo

// int32 iGlobalID = 1;
inline void BevLogTransBaseInfo::clear_iglobalid() {
  iglobalid_ = 0;
}
inline ::google::protobuf::int32 BevLogTransBaseInfo::iglobalid() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogTransBaseInfo.iGlobalID)
  return iglobalid_;
}
inline void BevLogTransBaseInfo::set_iglobalid(::google::protobuf::int32 value) {
  
  iglobalid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogTransBaseInfo.iGlobalID)
}

// int32 iErrCode = 2;
inline void BevLogTransBaseInfo::clear_ierrcode() {
  ierrcode_ = 0;
}
inline ::google::protobuf::int32 BevLogTransBaseInfo::ierrcode() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogTransBaseInfo.iErrCode)
  return ierrcode_;
}
inline void BevLogTransBaseInfo::set_ierrcode(::google::protobuf::int32 value) {
  
  ierrcode_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogTransBaseInfo.iErrCode)
}

// int32 iEotType = 3;
inline void BevLogTransBaseInfo::clear_ieottype() {
  ieottype_ = 0;
}
inline ::google::protobuf::int32 BevLogTransBaseInfo::ieottype() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogTransBaseInfo.iEotType)
  return ieottype_;
}
inline void BevLogTransBaseInfo::set_ieottype(::google::protobuf::int32 value) {
  
  ieottype_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogTransBaseInfo.iEotType)
}

// uint64 ullTransStartTime = 4;
inline void BevLogTransBaseInfo::clear_ulltransstarttime() {
  ulltransstarttime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BevLogTransBaseInfo::ulltransstarttime() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogTransBaseInfo.ullTransStartTime)
  return ulltransstarttime_;
}
inline void BevLogTransBaseInfo::set_ulltransstarttime(::google::protobuf::uint64 value) {
  
  ulltransstarttime_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogTransBaseInfo.ullTransStartTime)
}

// uint64 ullTransStopTime = 5;
inline void BevLogTransBaseInfo::clear_ulltransstoptime() {
  ulltransstoptime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BevLogTransBaseInfo::ulltransstoptime() const {
  // @@protoc_insertion_point(field_get:NFrame.BevLogTransBaseInfo.ullTransStopTime)
  return ulltransstoptime_;
}
inline void BevLogTransBaseInfo::set_ulltransstoptime(::google::protobuf::uint64 value) {
  
  ulltransstoptime_ = value;
  // @@protoc_insertion_point(field_set:NFrame.BevLogTransBaseInfo.ullTransStopTime)
}

// -------------------------------------------------------------------

// ServerStateFlow

// uint64 tDtEventTime = 1 [(.nanopb) = {
inline void ServerStateFlow::clear_tdteventtime() {
  tdteventtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerStateFlow::tdteventtime() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerStateFlow.tDtEventTime)
  return tdteventtime_;
}
inline void ServerStateFlow::set_tdteventtime(::google::protobuf::uint64 value) {
  
  tdteventtime_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerStateFlow.tDtEventTime)
}

// string szVGameIP = 2 [(.nanopb) = {
inline void ServerStateFlow::clear_szvgameip() {
  szvgameip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStateFlow::szvgameip() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerStateFlow.szVGameIP)
  return szvgameip_.GetNoArena();
}
inline void ServerStateFlow::set_szvgameip(const ::std::string& value) {
  
  szvgameip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerStateFlow.szVGameIP)
}
#if LANG_CXX11
inline void ServerStateFlow::set_szvgameip(::std::string&& value) {
  
  szvgameip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerStateFlow.szVGameIP)
}
#endif
inline void ServerStateFlow::set_szvgameip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szvgameip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerStateFlow.szVGameIP)
}
inline void ServerStateFlow::set_szvgameip(const char* value, size_t size) {
  
  szvgameip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerStateFlow.szVGameIP)
}
inline ::std::string* ServerStateFlow::mutable_szvgameip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerStateFlow.szVGameIP)
  return szvgameip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStateFlow::release_szvgameip() {
  // @@protoc_insertion_point(field_release:NFrame.ServerStateFlow.szVGameIP)
  
  return szvgameip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStateFlow::set_allocated_szvgameip(::std::string* szvgameip) {
  if (szvgameip != NULL) {
    
  } else {
    
  }
  szvgameip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szvgameip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerStateFlow.szVGameIP)
}

// int32 iIZoneAreaID = 3;
inline void ServerStateFlow::clear_iizoneareaid() {
  iizoneareaid_ = 0;
}
inline ::google::protobuf::int32 ServerStateFlow::iizoneareaid() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerStateFlow.iIZoneAreaID)
  return iizoneareaid_;
}
inline void ServerStateFlow::set_iizoneareaid(::google::protobuf::int32 value) {
  
  iizoneareaid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerStateFlow.iIZoneAreaID)
}

// int32 iITimeShift = 4;
inline void ServerStateFlow::clear_iitimeshift() {
  iitimeshift_ = 0;
}
inline ::google::protobuf::int32 ServerStateFlow::iitimeshift() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerStateFlow.iITimeShift)
  return iitimeshift_;
}
inline void ServerStateFlow::set_iitimeshift(::google::protobuf::int32 value) {
  
  iitimeshift_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerStateFlow.iITimeShift)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFrame

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FrameBehavior_2eproto
