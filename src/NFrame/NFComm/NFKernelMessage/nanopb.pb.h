// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanopb.proto

#ifndef PROTOBUF_INCLUDED_nanopb_2eproto
#define PROTOBUF_INCLUDED_nanopb_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nanopb_2eproto 

namespace protobuf_nanopb_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nanopb_2eproto
class NanoPBOptions;
class NanoPBOptionsDefaultTypeInternal;
extern NanoPBOptionsDefaultTypeInternal _NanoPBOptions_default_instance_;
namespace google {
namespace protobuf {
template<> ::NanoPBOptions* Arena::CreateMaybeMessage<::NanoPBOptions>(Arena*);
}  // namespace protobuf
}  // namespace google

enum FieldType {
  FT_DEFAULT = 0,
  FT_CALLBACK = 1,
  FT_POINTER = 4,
  FT_STATIC = 2,
  FT_IGNORE = 3,
  FT_INLINE = 5
};
bool FieldType_IsValid(int value);
const FieldType FieldType_MIN = FT_DEFAULT;
const FieldType FieldType_MAX = FT_INLINE;
const int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldType_descriptor();
inline const ::std::string& FieldType_Name(FieldType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldType_descriptor(), value);
}
inline bool FieldType_Parse(
    const ::std::string& name, FieldType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldType>(
    FieldType_descriptor(), name, value);
}
enum IntSize {
  IS_DEFAULT = 0,
  IS_8 = 8,
  IS_16 = 16,
  IS_32 = 32,
  IS_64 = 64
};
bool IntSize_IsValid(int value);
const IntSize IntSize_MIN = IS_DEFAULT;
const IntSize IntSize_MAX = IS_64;
const int IntSize_ARRAYSIZE = IntSize_MAX + 1;

const ::google::protobuf::EnumDescriptor* IntSize_descriptor();
inline const ::std::string& IntSize_Name(IntSize value) {
  return ::google::protobuf::internal::NameOfEnum(
    IntSize_descriptor(), value);
}
inline bool IntSize_Parse(
    const ::std::string& name, IntSize* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IntSize>(
    IntSize_descriptor(), name, value);
}
enum StlType {
  STL_VECTOR = 0,
  STL_LIST = 1,
  STL_UNORDERED_MAP = 2,
  STL_MULTI_UNORDERED_MAP = 3,
  STL_UNORDERED_MAP_LIST = 4,
  STL_MULTI_UNORDERED_MAP_LIST = 5,
  STL_UNORDERED_SET = 6,
  STL_MULTI_UNORDERED_SET = 7,
  STL_UNORDERED_SET_LIST = 8,
  STL_MULTI_UNORDERED_SET_LIST = 9,
  STL_MAP = 10,
  STL_MULTI_MAP = 11,
  STL_SET = 12,
  STL_MULTI_SET = 13
};
bool StlType_IsValid(int value);
const StlType StlType_MIN = STL_VECTOR;
const StlType StlType_MAX = STL_MULTI_SET;
const int StlType_ARRAYSIZE = StlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StlType_descriptor();
inline const ::std::string& StlType_Name(StlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StlType_descriptor(), value);
}
inline bool StlType_Parse(
    const ::std::string& name, StlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StlType>(
    StlType_descriptor(), name, value);
}
enum FrameEnum {
  FRAME_ENUM_NONE = 0,
  JSON_DESC_KEY_LEN = 64,
  JSON_DESC_CONTENT_LEN = 1024,
  MAX_STRING_LEN_DEFAULT = 32,
  MAX_STRING_LEN_16 = 16,
  MAX_STRING_LEN_32 = 32,
  MAX_STRING_LEN_64 = 64,
  MAX_STRING_LEN_128 = 128,
  MAX_STRING_LEN_256 = 256,
  MAX_STRING_LEN_512 = 512,
  MAX_STRING_LEN_1024 = 1024,
  MAX_STRING_LEN_2048 = 2048,
  MAX_STRING_LEN_4096 = 4096,
  MAX_REPEATED_DEFAULT_COUNT = 1
};
bool FrameEnum_IsValid(int value);
const FrameEnum FrameEnum_MIN = FRAME_ENUM_NONE;
const FrameEnum FrameEnum_MAX = MAX_STRING_LEN_4096;
const int FrameEnum_ARRAYSIZE = FrameEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameEnum_descriptor();
inline const ::std::string& FrameEnum_Name(FrameEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameEnum_descriptor(), value);
}
inline bool FrameEnum_Parse(
    const ::std::string& name, FrameEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameEnum>(
    FrameEnum_descriptor(), name, value);
}
enum FieldParseType {
  FPT_DEFAULT = 0,
  FPT_JSON = 1,
  FPT_XML = 2,
  FPT_LUA = 3
};
bool FieldParseType_IsValid(int value);
const FieldParseType FieldParseType_MIN = FPT_DEFAULT;
const FieldParseType FieldParseType_MAX = FPT_LUA;
const int FieldParseType_ARRAYSIZE = FieldParseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldParseType_descriptor();
inline const ::std::string& FieldParseType_Name(FieldParseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldParseType_descriptor(), value);
}
inline bool FieldParseType_Parse(
    const ::std::string& name, FieldParseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldParseType>(
    FieldParseType_descriptor(), name, value);
}
enum enum_field_type {
  E_FIELD_TYPE_NORMAL = 1,
  E_FIELD_TYPE_PRIMARYKEY = 2,
  E_FIELD_TYPE_UNIQUE_INDEX = 3,
  E_FIELD_TYPE_INDEX = 4
};
bool enum_field_type_IsValid(int value);
const enum_field_type enum_field_type_MIN = E_FIELD_TYPE_NORMAL;
const enum_field_type enum_field_type_MAX = E_FIELD_TYPE_INDEX;
const int enum_field_type_ARRAYSIZE = enum_field_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* enum_field_type_descriptor();
inline const ::std::string& enum_field_type_Name(enum_field_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    enum_field_type_descriptor(), value);
}
inline bool enum_field_type_Parse(
    const ::std::string& name, enum_field_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enum_field_type>(
    enum_field_type_descriptor(), name, value);
}
// ===================================================================

class NanoPBOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NanoPBOptions) */ {
 public:
  NanoPBOptions();
  virtual ~NanoPBOptions();

  NanoPBOptions(const NanoPBOptions& from);

  inline NanoPBOptions& operator=(const NanoPBOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NanoPBOptions(NanoPBOptions&& from) noexcept
    : NanoPBOptions() {
    *this = ::std::move(from);
  }

  inline NanoPBOptions& operator=(NanoPBOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NanoPBOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NanoPBOptions* internal_default_instance() {
    return reinterpret_cast<const NanoPBOptions*>(
               &_NanoPBOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NanoPBOptions* other);
  friend void swap(NanoPBOptions& a, NanoPBOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NanoPBOptions* New() const final {
    return CreateMaybeMessage<NanoPBOptions>(NULL);
  }

  NanoPBOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NanoPBOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NanoPBOptions& from);
  void MergeFrom(const NanoPBOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NanoPBOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string max_count_enum = 17;
  bool has_max_count_enum() const;
  void clear_max_count_enum();
  static const int kMaxCountEnumFieldNumber = 17;
  const ::std::string& max_count_enum() const;
  void set_max_count_enum(const ::std::string& value);
  #if LANG_CXX11
  void set_max_count_enum(::std::string&& value);
  #endif
  void set_max_count_enum(const char* value);
  void set_max_count_enum(const char* value, size_t size);
  ::std::string* mutable_max_count_enum();
  ::std::string* release_max_count_enum();
  void set_allocated_max_count_enum(::std::string* max_count_enum);

  // optional string max_size_enum = 18;
  bool has_max_size_enum() const;
  void clear_max_size_enum();
  static const int kMaxSizeEnumFieldNumber = 18;
  const ::std::string& max_size_enum() const;
  void set_max_size_enum(const ::std::string& value);
  #if LANG_CXX11
  void set_max_size_enum(::std::string&& value);
  #endif
  void set_max_size_enum(const char* value);
  void set_max_size_enum(const char* value, size_t size);
  ::std::string* mutable_max_size_enum();
  ::std::string* release_max_size_enum();
  void set_allocated_max_size_enum(::std::string* max_size_enum);

  // optional string macro_type = 19;
  bool has_macro_type() const;
  void clear_macro_type();
  static const int kMacroTypeFieldNumber = 19;
  const ::std::string& macro_type() const;
  void set_macro_type(const ::std::string& value);
  #if LANG_CXX11
  void set_macro_type(::std::string&& value);
  #endif
  void set_macro_type(const char* value);
  void set_macro_type(const char* value, size_t size);
  ::std::string* mutable_macro_type();
  ::std::string* release_macro_type();
  void set_allocated_macro_type(::std::string* macro_type);

  // optional string macro_name = 20;
  bool has_macro_name() const;
  void clear_macro_name();
  static const int kMacroNameFieldNumber = 20;
  const ::std::string& macro_name() const;
  void set_macro_name(const ::std::string& value);
  #if LANG_CXX11
  void set_macro_name(::std::string&& value);
  #endif
  void set_macro_name(const char* value);
  void set_macro_name(const char* value, size_t size);
  ::std::string* mutable_macro_name();
  ::std::string* release_macro_name();
  void set_allocated_macro_name(::std::string* macro_name);

  // optional string include_files = 21;
  bool has_include_files() const;
  void clear_include_files();
  static const int kIncludeFilesFieldNumber = 21;
  const ::std::string& include_files() const;
  void set_include_files(const ::std::string& value);
  #if LANG_CXX11
  void set_include_files(::std::string&& value);
  #endif
  void set_include_files(const char* value);
  void set_include_files(const char* value, size_t size);
  ::std::string* mutable_include_files();
  ::std::string* release_include_files();
  void set_allocated_include_files(::std::string* include_files);

  // optional string insert_msg_last = 22;
  bool has_insert_msg_last() const;
  void clear_insert_msg_last();
  static const int kInsertMsgLastFieldNumber = 22;
  const ::std::string& insert_msg_last() const;
  void set_insert_msg_last(const ::std::string& value);
  #if LANG_CXX11
  void set_insert_msg_last(::std::string&& value);
  #endif
  void set_insert_msg_last(const char* value);
  void set_insert_msg_last(const char* value, size_t size);
  ::std::string* mutable_insert_msg_last();
  ::std::string* release_insert_msg_last();
  void set_allocated_insert_msg_last(::std::string* insert_msg_last);

  // optional string enum_name = 23;
  bool has_enum_name() const;
  void clear_enum_name();
  static const int kEnumNameFieldNumber = 23;
  const ::std::string& enum_name() const;
  void set_enum_name(const ::std::string& value);
  #if LANG_CXX11
  void set_enum_name(::std::string&& value);
  #endif
  void set_enum_name(const char* value);
  void set_enum_name(const char* value, size_t size);
  ::std::string* mutable_enum_name();
  ::std::string* release_enum_name();
  void set_allocated_enum_name(::std::string* enum_name);

  // optional string field_cname = 24;
  bool has_field_cname() const;
  void clear_field_cname();
  static const int kFieldCnameFieldNumber = 24;
  const ::std::string& field_cname() const;
  void set_field_cname(const ::std::string& value);
  #if LANG_CXX11
  void set_field_cname(::std::string&& value);
  #endif
  void set_field_cname(const char* value);
  void set_field_cname(const char* value, size_t size);
  ::std::string* mutable_field_cname();
  ::std::string* release_field_cname();
  void set_allocated_field_cname(::std::string* field_cname);

  // optional string use_stl_enum = 31;
  bool has_use_stl_enum() const;
  void clear_use_stl_enum();
  static const int kUseStlEnumFieldNumber = 31;
  const ::std::string& use_stl_enum() const;
  void set_use_stl_enum(const ::std::string& value);
  #if LANG_CXX11
  void set_use_stl_enum(::std::string&& value);
  #endif
  void set_use_stl_enum(const char* value);
  void set_use_stl_enum(const char* value, size_t size);
  ::std::string* mutable_use_stl_enum();
  ::std::string* release_use_stl_enum();
  void set_allocated_use_stl_enum(::std::string* use_stl_enum);

  // optional string use_stl_key = 33;
  bool has_use_stl_key() const;
  void clear_use_stl_key();
  static const int kUseStlKeyFieldNumber = 33;
  const ::std::string& use_stl_key() const;
  void set_use_stl_key(const ::std::string& value);
  #if LANG_CXX11
  void set_use_stl_key(::std::string&& value);
  #endif
  void set_use_stl_key(const char* value);
  void set_use_stl_key(const char* value, size_t size);
  ::std::string* mutable_use_stl_key();
  ::std::string* release_use_stl_key();
  void set_allocated_use_stl_key(::std::string* use_stl_key);

  // optional string db_max_size_enum = 52;
  bool has_db_max_size_enum() const;
  void clear_db_max_size_enum();
  static const int kDbMaxSizeEnumFieldNumber = 52;
  const ::std::string& db_max_size_enum() const;
  void set_db_max_size_enum(const ::std::string& value);
  #if LANG_CXX11
  void set_db_max_size_enum(::std::string&& value);
  #endif
  void set_db_max_size_enum(const char* value);
  void set_db_max_size_enum(const char* value, size_t size);
  ::std::string* mutable_db_max_size_enum();
  ::std::string* release_db_max_size_enum();
  void set_allocated_db_max_size_enum(::std::string* db_max_size_enum);

  // optional string db_max_count_enum = 56;
  bool has_db_max_count_enum() const;
  void clear_db_max_count_enum();
  static const int kDbMaxCountEnumFieldNumber = 56;
  const ::std::string& db_max_count_enum() const;
  void set_db_max_count_enum(const ::std::string& value);
  #if LANG_CXX11
  void set_db_max_count_enum(::std::string&& value);
  #endif
  void set_db_max_count_enum(const char* value);
  void set_db_max_count_enum(const char* value, size_t size);
  ::std::string* mutable_db_max_count_enum();
  ::std::string* release_db_max_count_enum();
  void set_allocated_db_max_count_enum(::std::string* db_max_count_enum);

  // optional string db_comment = 59;
  bool has_db_comment() const;
  void clear_db_comment();
  static const int kDbCommentFieldNumber = 59;
  const ::std::string& db_comment() const;
  void set_db_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_db_comment(::std::string&& value);
  #endif
  void set_db_comment(const char* value);
  void set_db_comment(const char* value, size_t size);
  ::std::string* mutable_db_comment();
  ::std::string* release_db_comment();
  void set_allocated_db_comment(::std::string* db_comment);

  // optional string res_unique_ndex = 71;
  bool has_res_unique_ndex() const;
  void clear_res_unique_ndex();
  static const int kResUniqueNdexFieldNumber = 71;
  const ::std::string& res_unique_ndex() const;
  void set_res_unique_ndex(const ::std::string& value);
  #if LANG_CXX11
  void set_res_unique_ndex(::std::string&& value);
  #endif
  void set_res_unique_ndex(const char* value);
  void set_res_unique_ndex(const char* value, size_t size);
  ::std::string* mutable_res_unique_ndex();
  ::std::string* release_res_unique_ndex();
  void set_allocated_res_unique_ndex(::std::string* res_unique_ndex);

  // optional string res_multi_index = 72;
  bool has_res_multi_index() const;
  void clear_res_multi_index();
  static const int kResMultiIndexFieldNumber = 72;
  const ::std::string& res_multi_index() const;
  void set_res_multi_index(const ::std::string& value);
  #if LANG_CXX11
  void set_res_multi_index(::std::string&& value);
  #endif
  void set_res_multi_index(const char* value);
  void set_res_multi_index(const char* value, size_t size);
  ::std::string* mutable_res_multi_index();
  ::std::string* release_res_multi_index();
  void set_allocated_res_multi_index(::std::string* res_multi_index);

  // optional string res_relation = 73;
  bool has_res_relation() const;
  void clear_res_relation();
  static const int kResRelationFieldNumber = 73;
  const ::std::string& res_relation() const;
  void set_res_relation(const ::std::string& value);
  #if LANG_CXX11
  void set_res_relation(::std::string&& value);
  #endif
  void set_res_relation(const char* value);
  void set_res_relation(const char* value, size_t size);
  ::std::string* mutable_res_relation();
  ::std::string* release_res_relation();
  void set_allocated_res_relation(::std::string* res_relation);

  // optional int32 max_size = 1;
  bool has_max_size() const;
  void clear_max_size();
  static const int kMaxSizeFieldNumber = 1;
  ::google::protobuf::int32 max_size() const;
  void set_max_size(::google::protobuf::int32 value);

  // optional int32 max_count = 2;
  bool has_max_count() const;
  void clear_max_count();
  static const int kMaxCountFieldNumber = 2;
  ::google::protobuf::int32 max_count() const;
  void set_max_count(::google::protobuf::int32 value);

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::FieldType type() const;
  void set_type(::FieldType value);

  // optional bool long_names = 4 [default = false];
  bool has_long_names() const;
  void clear_long_names();
  static const int kLongNamesFieldNumber = 4;
  bool long_names() const;
  void set_long_names(bool value);

  // optional bool packed_struct = 5 [default = false];
  bool has_packed_struct() const;
  void clear_packed_struct();
  static const int kPackedStructFieldNumber = 5;
  bool packed_struct() const;
  void set_packed_struct(bool value);

  // optional bool packed_enum = 10 [default = false];
  bool has_packed_enum() const;
  void clear_packed_enum();
  static const int kPackedEnumFieldNumber = 10;
  bool packed_enum() const;
  void set_packed_enum(bool value);

  // optional bool skip_message = 6 [default = false];
  bool has_skip_message() const;
  void clear_skip_message();
  static const int kSkipMessageFieldNumber = 6;
  bool skip_message() const;
  void set_skip_message(bool value);

  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  bool has_int_size() const;
  void clear_int_size();
  static const int kIntSizeFieldNumber = 7;
  ::IntSize int_size() const;
  void set_int_size(::IntSize value);

  // optional uint32 msgid = 9;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgidFieldNumber = 9;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // optional bool no_unions = 8 [default = false];
  bool has_no_unions() const;
  void clear_no_unions();
  static const int kNoUnionsFieldNumber = 8;
  bool no_unions() const;
  void set_no_unions(bool value);

  // optional bool anonymous_oneof = 11 [default = false];
  bool has_anonymous_oneof() const;
  void clear_anonymous_oneof();
  static const int kAnonymousOneofFieldNumber = 11;
  bool anonymous_oneof() const;
  void set_anonymous_oneof(bool value);

  // optional bool proto3 = 12 [default = false];
  bool has_proto3() const;
  void clear_proto3();
  static const int kProto3FieldNumber = 12;
  bool proto3() const;
  void set_proto3(bool value);

  // optional bool enum_to_string = 13 [default = false];
  bool has_enum_to_string() const;
  void clear_enum_to_string();
  static const int kEnumToStringFieldNumber = 13;
  bool enum_to_string() const;
  void set_enum_to_string(bool value);

  // optional int32 max_length = 14;
  bool has_max_length() const;
  void clear_max_length();
  static const int kMaxLengthFieldNumber = 14;
  ::google::protobuf::int32 max_length() const;
  void set_max_length(::google::protobuf::int32 value);

  // optional bool fixed_length = 15 [default = false];
  bool has_fixed_length() const;
  void clear_fixed_length();
  static const int kFixedLengthFieldNumber = 15;
  bool fixed_length() const;
  void set_fixed_length(bool value);

  // optional bool fixed_count = 16 [default = false];
  bool has_fixed_count() const;
  void clear_fixed_count();
  static const int kFixedCountFieldNumber = 16;
  bool fixed_count() const;
  void set_fixed_count(bool value);

  // optional bool use_stl_string = 32;
  bool has_use_stl_string() const;
  void clear_use_stl_string();
  static const int kUseStlStringFieldNumber = 32;
  bool use_stl_string() const;
  void set_use_stl_string(bool value);

  // optional bool is_stl_key = 34 [default = false];
  bool has_is_stl_key() const;
  void clear_is_stl_key();
  static const int kIsStlKeyFieldNumber = 34;
  bool is_stl_key() const;
  void set_is_stl_key(bool value);

  // optional int32 use_stl = 30;
  bool has_use_stl() const;
  void clear_use_stl();
  static const int kUseStlFieldNumber = 30;
  ::google::protobuf::int32 use_stl() const;
  void set_use_stl(::google::protobuf::int32 value);

  // optional .FieldParseType parse_type = 37 [default = FPT_DEFAULT];
  bool has_parse_type() const;
  void clear_parse_type();
  static const int kParseTypeFieldNumber = 37;
  ::FieldParseType parse_type() const;
  void set_parse_type(::FieldParseType value);

  // optional bool is_std_stl = 35;
  bool has_is_std_stl() const;
  void clear_is_std_stl();
  static const int kIsStdStlFieldNumber = 35;
  bool is_std_stl() const;
  void set_is_std_stl(bool value);

  // optional bool is_c_std = 36 [default = false];
  bool has_is_c_std() const;
  void clear_is_c_std();
  static const int kIsCStdFieldNumber = 36;
  bool is_c_std() const;
  void set_is_c_std(bool value);

  // optional bool time_to_int = 40;
  bool has_time_to_int() const;
  void clear_time_to_int();
  static const int kTimeToIntFieldNumber = 40;
  bool time_to_int() const;
  void set_time_to_int(bool value);

  // optional bool time_to_str = 41;
  bool has_time_to_str() const;
  void clear_time_to_str();
  static const int kTimeToStrFieldNumber = 41;
  bool time_to_str() const;
  void set_time_to_str(bool value);

  // optional bool db_message_expand = 61 [default = false];
  bool has_db_message_expand() const;
  void clear_db_message_expand();
  static const int kDbMessageExpandFieldNumber = 61;
  bool db_message_expand() const;
  void set_db_message_expand(bool value);

  // optional int32 db_max_size = 51;
  bool has_db_max_size() const;
  void clear_db_max_size();
  static const int kDbMaxSizeFieldNumber = 51;
  ::google::protobuf::int32 db_max_size() const;
  void set_db_max_size(::google::protobuf::int32 value);

  // optional int32 db_max_count = 55;
  bool has_db_max_count() const;
  void clear_db_max_count();
  static const int kDbMaxCountFieldNumber = 55;
  ::google::protobuf::int32 db_max_count() const;
  void set_db_max_count(::google::protobuf::int32 value);

  // optional bool db_not_null = 53 [default = false];
  bool has_db_not_null() const;
  void clear_db_not_null();
  static const int kDbNotNullFieldNumber = 53;
  bool db_not_null() const;
  void set_db_not_null(bool value);

  // optional bool db_auto_increment = 54 [default = false];
  bool has_db_auto_increment() const;
  void clear_db_auto_increment();
  static const int kDbAutoIncrementFieldNumber = 54;
  bool db_auto_increment() const;
  void set_db_auto_increment(bool value);

  // optional bool db_no_field = 58 [default = false];
  bool has_db_no_field() const;
  void clear_db_no_field();
  static const int kDbNoFieldFieldNumber = 58;
  bool db_no_field() const;
  void set_db_no_field(bool value);

  // optional bool to_db_sql = 60 [default = false];
  bool has_to_db_sql() const;
  void clear_to_db_sql();
  static const int kToDbSqlFieldNumber = 60;
  bool to_db_sql() const;
  void set_to_db_sql(bool value);

  // optional int32 db_auto_increment_value = 57 [default = 0];
  bool has_db_auto_increment_value() const;
  void clear_db_auto_increment_value();
  static const int kDbAutoIncrementValueFieldNumber = 57;
  ::google::protobuf::int32 db_auto_increment_value() const;
  void set_db_auto_increment_value(::google::protobuf::int32 value);

  // optional .enum_field_type db_type = 50 [default = E_FIELD_TYPE_NORMAL];
  bool has_db_type() const;
  void clear_db_type();
  static const int kDbTypeFieldNumber = 50;
  ::enum_field_type db_type() const;
  void set_db_type(::enum_field_type value);

  // optional .enum_field_type res_type = 70 [default = E_FIELD_TYPE_NORMAL];
  bool has_res_type() const;
  void clear_res_type();
  static const int kResTypeFieldNumber = 70;
  ::enum_field_type res_type() const;
  void set_res_type(::enum_field_type value);

  // @@protoc_insertion_point(class_scope:NanoPBOptions)
 private:
  void set_has_max_size();
  void clear_has_max_size();
  void set_has_max_length();
  void clear_has_max_length();
  void set_has_max_count();
  void clear_has_max_count();
  void set_has_int_size();
  void clear_has_int_size();
  void set_has_type();
  void clear_has_type();
  void set_has_long_names();
  void clear_has_long_names();
  void set_has_packed_struct();
  void clear_has_packed_struct();
  void set_has_packed_enum();
  void clear_has_packed_enum();
  void set_has_skip_message();
  void clear_has_skip_message();
  void set_has_no_unions();
  void clear_has_no_unions();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_anonymous_oneof();
  void clear_has_anonymous_oneof();
  void set_has_proto3();
  void clear_has_proto3();
  void set_has_enum_to_string();
  void clear_has_enum_to_string();
  void set_has_enum_name();
  void clear_has_enum_name();
  void set_has_fixed_length();
  void clear_has_fixed_length();
  void set_has_fixed_count();
  void clear_has_fixed_count();
  void set_has_max_count_enum();
  void clear_has_max_count_enum();
  void set_has_max_size_enum();
  void clear_has_max_size_enum();
  void set_has_macro_type();
  void clear_has_macro_type();
  void set_has_macro_name();
  void clear_has_macro_name();
  void set_has_field_cname();
  void clear_has_field_cname();
  void set_has_include_files();
  void clear_has_include_files();
  void set_has_insert_msg_last();
  void clear_has_insert_msg_last();
  void set_has_use_stl();
  void clear_has_use_stl();
  void set_has_use_stl_enum();
  void clear_has_use_stl_enum();
  void set_has_use_stl_string();
  void clear_has_use_stl_string();
  void set_has_use_stl_key();
  void clear_has_use_stl_key();
  void set_has_is_stl_key();
  void clear_has_is_stl_key();
  void set_has_is_std_stl();
  void clear_has_is_std_stl();
  void set_has_is_c_std();
  void clear_has_is_c_std();
  void set_has_parse_type();
  void clear_has_parse_type();
  void set_has_time_to_int();
  void clear_has_time_to_int();
  void set_has_time_to_str();
  void clear_has_time_to_str();
  void set_has_db_type();
  void clear_has_db_type();
  void set_has_db_max_size();
  void clear_has_db_max_size();
  void set_has_db_max_size_enum();
  void clear_has_db_max_size_enum();
  void set_has_db_not_null();
  void clear_has_db_not_null();
  void set_has_db_auto_increment();
  void clear_has_db_auto_increment();
  void set_has_db_max_count();
  void clear_has_db_max_count();
  void set_has_db_max_count_enum();
  void clear_has_db_max_count_enum();
  void set_has_db_auto_increment_value();
  void clear_has_db_auto_increment_value();
  void set_has_db_no_field();
  void clear_has_db_no_field();
  void set_has_db_comment();
  void clear_has_db_comment();
  void set_has_to_db_sql();
  void clear_has_to_db_sql();
  void set_has_db_message_expand();
  void clear_has_db_message_expand();
  void set_has_res_type();
  void clear_has_res_type();
  void set_has_res_unique_ndex();
  void clear_has_res_unique_ndex();
  void set_has_res_multi_index();
  void clear_has_res_multi_index();
  void set_has_res_relation();
  void clear_has_res_relation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr max_count_enum_;
  ::google::protobuf::internal::ArenaStringPtr max_size_enum_;
  ::google::protobuf::internal::ArenaStringPtr macro_type_;
  ::google::protobuf::internal::ArenaStringPtr macro_name_;
  ::google::protobuf::internal::ArenaStringPtr include_files_;
  ::google::protobuf::internal::ArenaStringPtr insert_msg_last_;
  ::google::protobuf::internal::ArenaStringPtr enum_name_;
  ::google::protobuf::internal::ArenaStringPtr field_cname_;
  ::google::protobuf::internal::ArenaStringPtr use_stl_enum_;
  ::google::protobuf::internal::ArenaStringPtr use_stl_key_;
  ::google::protobuf::internal::ArenaStringPtr db_max_size_enum_;
  ::google::protobuf::internal::ArenaStringPtr db_max_count_enum_;
  ::google::protobuf::internal::ArenaStringPtr db_comment_;
  ::google::protobuf::internal::ArenaStringPtr res_unique_ndex_;
  ::google::protobuf::internal::ArenaStringPtr res_multi_index_;
  ::google::protobuf::internal::ArenaStringPtr res_relation_;
  ::google::protobuf::int32 max_size_;
  ::google::protobuf::int32 max_count_;
  int type_;
  bool long_names_;
  bool packed_struct_;
  bool packed_enum_;
  bool skip_message_;
  int int_size_;
  ::google::protobuf::uint32 msgid_;
  bool no_unions_;
  bool anonymous_oneof_;
  bool proto3_;
  bool enum_to_string_;
  ::google::protobuf::int32 max_length_;
  bool fixed_length_;
  bool fixed_count_;
  bool use_stl_string_;
  bool is_stl_key_;
  ::google::protobuf::int32 use_stl_;
  int parse_type_;
  bool is_std_stl_;
  bool is_c_std_;
  bool time_to_int_;
  bool time_to_str_;
  bool db_message_expand_;
  ::google::protobuf::int32 db_max_size_;
  ::google::protobuf::int32 db_max_count_;
  bool db_not_null_;
  bool db_auto_increment_;
  bool db_no_field_;
  bool to_db_sql_;
  ::google::protobuf::int32 db_auto_increment_value_;
  int db_type_;
  int res_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nanopb_2eproto::TableStruct;
};
// ===================================================================

static const int kNanopbFileoptFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_fileopt;
static const int kNanopbMsgoptFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_msgopt;
static const int kNanopbEnumoptFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_enumopt;
static const int kNanopbEnumvoptFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_enumvopt;
static const int kNanopbFieldNumber = 1010;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NanoPBOptions

// optional int32 max_size = 1;
inline bool NanoPBOptions::has_max_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NanoPBOptions::set_has_max_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NanoPBOptions::clear_has_max_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NanoPBOptions::clear_max_size() {
  max_size_ = 0;
  clear_has_max_size();
}
inline ::google::protobuf::int32 NanoPBOptions::max_size() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_size)
  return max_size_;
}
inline void NanoPBOptions::set_max_size(::google::protobuf::int32 value) {
  set_has_max_size();
  max_size_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_size)
}

// optional int32 max_length = 14;
inline bool NanoPBOptions::has_max_length() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void NanoPBOptions::set_has_max_length() {
  _has_bits_[0] |= 0x20000000u;
}
inline void NanoPBOptions::clear_has_max_length() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void NanoPBOptions::clear_max_length() {
  max_length_ = 0;
  clear_has_max_length();
}
inline ::google::protobuf::int32 NanoPBOptions::max_length() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_length)
  return max_length_;
}
inline void NanoPBOptions::set_max_length(::google::protobuf::int32 value) {
  set_has_max_length();
  max_length_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_length)
}

// optional int32 max_count = 2;
inline bool NanoPBOptions::has_max_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NanoPBOptions::set_has_max_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NanoPBOptions::clear_has_max_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NanoPBOptions::clear_max_count() {
  max_count_ = 0;
  clear_has_max_count();
}
inline ::google::protobuf::int32 NanoPBOptions::max_count() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_count)
  return max_count_;
}
inline void NanoPBOptions::set_max_count(::google::protobuf::int32 value) {
  set_has_max_count();
  max_count_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_count)
}

// optional .IntSize int_size = 7 [default = IS_DEFAULT];
inline bool NanoPBOptions::has_int_size() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void NanoPBOptions::set_has_int_size() {
  _has_bits_[0] |= 0x00800000u;
}
inline void NanoPBOptions::clear_has_int_size() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void NanoPBOptions::clear_int_size() {
  int_size_ = 0;
  clear_has_int_size();
}
inline ::IntSize NanoPBOptions::int_size() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.int_size)
  return static_cast< ::IntSize >(int_size_);
}
inline void NanoPBOptions::set_int_size(::IntSize value) {
  assert(::IntSize_IsValid(value));
  set_has_int_size();
  int_size_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.int_size)
}

// optional .FieldType type = 3 [default = FT_DEFAULT];
inline bool NanoPBOptions::has_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NanoPBOptions::set_has_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NanoPBOptions::clear_has_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NanoPBOptions::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::FieldType NanoPBOptions::type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.type)
  return static_cast< ::FieldType >(type_);
}
inline void NanoPBOptions::set_type(::FieldType value) {
  assert(::FieldType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.type)
}

// optional bool long_names = 4 [default = false];
inline bool NanoPBOptions::has_long_names() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NanoPBOptions::set_has_long_names() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NanoPBOptions::clear_has_long_names() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NanoPBOptions::clear_long_names() {
  long_names_ = false;
  clear_has_long_names();
}
inline bool NanoPBOptions::long_names() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.long_names)
  return long_names_;
}
inline void NanoPBOptions::set_long_names(bool value) {
  set_has_long_names();
  long_names_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.long_names)
}

// optional bool packed_struct = 5 [default = false];
inline bool NanoPBOptions::has_packed_struct() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NanoPBOptions::set_has_packed_struct() {
  _has_bits_[0] |= 0x00100000u;
}
inline void NanoPBOptions::clear_has_packed_struct() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void NanoPBOptions::clear_packed_struct() {
  packed_struct_ = false;
  clear_has_packed_struct();
}
inline bool NanoPBOptions::packed_struct() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.packed_struct)
  return packed_struct_;
}
inline void NanoPBOptions::set_packed_struct(bool value) {
  set_has_packed_struct();
  packed_struct_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.packed_struct)
}

// optional bool packed_enum = 10 [default = false];
inline bool NanoPBOptions::has_packed_enum() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void NanoPBOptions::set_has_packed_enum() {
  _has_bits_[0] |= 0x00200000u;
}
inline void NanoPBOptions::clear_has_packed_enum() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void NanoPBOptions::clear_packed_enum() {
  packed_enum_ = false;
  clear_has_packed_enum();
}
inline bool NanoPBOptions::packed_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.packed_enum)
  return packed_enum_;
}
inline void NanoPBOptions::set_packed_enum(bool value) {
  set_has_packed_enum();
  packed_enum_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.packed_enum)
}

// optional bool skip_message = 6 [default = false];
inline bool NanoPBOptions::has_skip_message() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void NanoPBOptions::set_has_skip_message() {
  _has_bits_[0] |= 0x00400000u;
}
inline void NanoPBOptions::clear_has_skip_message() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void NanoPBOptions::clear_skip_message() {
  skip_message_ = false;
  clear_has_skip_message();
}
inline bool NanoPBOptions::skip_message() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.skip_message)
  return skip_message_;
}
inline void NanoPBOptions::set_skip_message(bool value) {
  set_has_skip_message();
  skip_message_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.skip_message)
}

// optional bool no_unions = 8 [default = false];
inline bool NanoPBOptions::has_no_unions() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void NanoPBOptions::set_has_no_unions() {
  _has_bits_[0] |= 0x02000000u;
}
inline void NanoPBOptions::clear_has_no_unions() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void NanoPBOptions::clear_no_unions() {
  no_unions_ = false;
  clear_has_no_unions();
}
inline bool NanoPBOptions::no_unions() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.no_unions)
  return no_unions_;
}
inline void NanoPBOptions::set_no_unions(bool value) {
  set_has_no_unions();
  no_unions_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.no_unions)
}

// optional uint32 msgid = 9;
inline bool NanoPBOptions::has_msgid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void NanoPBOptions::set_has_msgid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void NanoPBOptions::clear_has_msgid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void NanoPBOptions::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 NanoPBOptions::msgid() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.msgid)
  return msgid_;
}
inline void NanoPBOptions::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.msgid)
}

// optional bool anonymous_oneof = 11 [default = false];
inline bool NanoPBOptions::has_anonymous_oneof() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void NanoPBOptions::set_has_anonymous_oneof() {
  _has_bits_[0] |= 0x04000000u;
}
inline void NanoPBOptions::clear_has_anonymous_oneof() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void NanoPBOptions::clear_anonymous_oneof() {
  anonymous_oneof_ = false;
  clear_has_anonymous_oneof();
}
inline bool NanoPBOptions::anonymous_oneof() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.anonymous_oneof)
  return anonymous_oneof_;
}
inline void NanoPBOptions::set_anonymous_oneof(bool value) {
  set_has_anonymous_oneof();
  anonymous_oneof_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.anonymous_oneof)
}

// optional bool proto3 = 12 [default = false];
inline bool NanoPBOptions::has_proto3() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void NanoPBOptions::set_has_proto3() {
  _has_bits_[0] |= 0x08000000u;
}
inline void NanoPBOptions::clear_has_proto3() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void NanoPBOptions::clear_proto3() {
  proto3_ = false;
  clear_has_proto3();
}
inline bool NanoPBOptions::proto3() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.proto3)
  return proto3_;
}
inline void NanoPBOptions::set_proto3(bool value) {
  set_has_proto3();
  proto3_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.proto3)
}

// optional bool enum_to_string = 13 [default = false];
inline bool NanoPBOptions::has_enum_to_string() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void NanoPBOptions::set_has_enum_to_string() {
  _has_bits_[0] |= 0x10000000u;
}
inline void NanoPBOptions::clear_has_enum_to_string() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void NanoPBOptions::clear_enum_to_string() {
  enum_to_string_ = false;
  clear_has_enum_to_string();
}
inline bool NanoPBOptions::enum_to_string() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.enum_to_string)
  return enum_to_string_;
}
inline void NanoPBOptions::set_enum_to_string(bool value) {
  set_has_enum_to_string();
  enum_to_string_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.enum_to_string)
}

// optional string enum_name = 23;
inline bool NanoPBOptions::has_enum_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NanoPBOptions::set_has_enum_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NanoPBOptions::clear_has_enum_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NanoPBOptions::clear_enum_name() {
  enum_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enum_name();
}
inline const ::std::string& NanoPBOptions::enum_name() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.enum_name)
  return enum_name_.GetNoArena();
}
inline void NanoPBOptions::set_enum_name(const ::std::string& value) {
  set_has_enum_name();
  enum_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.enum_name)
}
#if LANG_CXX11
inline void NanoPBOptions::set_enum_name(::std::string&& value) {
  set_has_enum_name();
  enum_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.enum_name)
}
#endif
inline void NanoPBOptions::set_enum_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enum_name();
  enum_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.enum_name)
}
inline void NanoPBOptions::set_enum_name(const char* value, size_t size) {
  set_has_enum_name();
  enum_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.enum_name)
}
inline ::std::string* NanoPBOptions::mutable_enum_name() {
  set_has_enum_name();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.enum_name)
  return enum_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_enum_name() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.enum_name)
  if (!has_enum_name()) {
    return NULL;
  }
  clear_has_enum_name();
  return enum_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_enum_name(::std::string* enum_name) {
  if (enum_name != NULL) {
    set_has_enum_name();
  } else {
    clear_has_enum_name();
  }
  enum_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enum_name);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.enum_name)
}

// optional bool fixed_length = 15 [default = false];
inline bool NanoPBOptions::has_fixed_length() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void NanoPBOptions::set_has_fixed_length() {
  _has_bits_[0] |= 0x40000000u;
}
inline void NanoPBOptions::clear_has_fixed_length() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void NanoPBOptions::clear_fixed_length() {
  fixed_length_ = false;
  clear_has_fixed_length();
}
inline bool NanoPBOptions::fixed_length() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.fixed_length)
  return fixed_length_;
}
inline void NanoPBOptions::set_fixed_length(bool value) {
  set_has_fixed_length();
  fixed_length_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.fixed_length)
}

// optional bool fixed_count = 16 [default = false];
inline bool NanoPBOptions::has_fixed_count() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void NanoPBOptions::set_has_fixed_count() {
  _has_bits_[0] |= 0x80000000u;
}
inline void NanoPBOptions::clear_has_fixed_count() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void NanoPBOptions::clear_fixed_count() {
  fixed_count_ = false;
  clear_has_fixed_count();
}
inline bool NanoPBOptions::fixed_count() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.fixed_count)
  return fixed_count_;
}
inline void NanoPBOptions::set_fixed_count(bool value) {
  set_has_fixed_count();
  fixed_count_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.fixed_count)
}

// optional string max_count_enum = 17;
inline bool NanoPBOptions::has_max_count_enum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NanoPBOptions::set_has_max_count_enum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NanoPBOptions::clear_has_max_count_enum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NanoPBOptions::clear_max_count_enum() {
  max_count_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_max_count_enum();
}
inline const ::std::string& NanoPBOptions::max_count_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_count_enum)
  return max_count_enum_.GetNoArena();
}
inline void NanoPBOptions::set_max_count_enum(const ::std::string& value) {
  set_has_max_count_enum();
  max_count_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_count_enum)
}
#if LANG_CXX11
inline void NanoPBOptions::set_max_count_enum(::std::string&& value) {
  set_has_max_count_enum();
  max_count_enum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.max_count_enum)
}
#endif
inline void NanoPBOptions::set_max_count_enum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_max_count_enum();
  max_count_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.max_count_enum)
}
inline void NanoPBOptions::set_max_count_enum(const char* value, size_t size) {
  set_has_max_count_enum();
  max_count_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.max_count_enum)
}
inline ::std::string* NanoPBOptions::mutable_max_count_enum() {
  set_has_max_count_enum();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.max_count_enum)
  return max_count_enum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_max_count_enum() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.max_count_enum)
  if (!has_max_count_enum()) {
    return NULL;
  }
  clear_has_max_count_enum();
  return max_count_enum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_max_count_enum(::std::string* max_count_enum) {
  if (max_count_enum != NULL) {
    set_has_max_count_enum();
  } else {
    clear_has_max_count_enum();
  }
  max_count_enum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_count_enum);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.max_count_enum)
}

// optional string max_size_enum = 18;
inline bool NanoPBOptions::has_max_size_enum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NanoPBOptions::set_has_max_size_enum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NanoPBOptions::clear_has_max_size_enum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NanoPBOptions::clear_max_size_enum() {
  max_size_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_max_size_enum();
}
inline const ::std::string& NanoPBOptions::max_size_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.max_size_enum)
  return max_size_enum_.GetNoArena();
}
inline void NanoPBOptions::set_max_size_enum(const ::std::string& value) {
  set_has_max_size_enum();
  max_size_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.max_size_enum)
}
#if LANG_CXX11
inline void NanoPBOptions::set_max_size_enum(::std::string&& value) {
  set_has_max_size_enum();
  max_size_enum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.max_size_enum)
}
#endif
inline void NanoPBOptions::set_max_size_enum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_max_size_enum();
  max_size_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.max_size_enum)
}
inline void NanoPBOptions::set_max_size_enum(const char* value, size_t size) {
  set_has_max_size_enum();
  max_size_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.max_size_enum)
}
inline ::std::string* NanoPBOptions::mutable_max_size_enum() {
  set_has_max_size_enum();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.max_size_enum)
  return max_size_enum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_max_size_enum() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.max_size_enum)
  if (!has_max_size_enum()) {
    return NULL;
  }
  clear_has_max_size_enum();
  return max_size_enum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_max_size_enum(::std::string* max_size_enum) {
  if (max_size_enum != NULL) {
    set_has_max_size_enum();
  } else {
    clear_has_max_size_enum();
  }
  max_size_enum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_size_enum);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.max_size_enum)
}

// optional string macro_type = 19;
inline bool NanoPBOptions::has_macro_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NanoPBOptions::set_has_macro_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NanoPBOptions::clear_has_macro_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NanoPBOptions::clear_macro_type() {
  macro_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macro_type();
}
inline const ::std::string& NanoPBOptions::macro_type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.macro_type)
  return macro_type_.GetNoArena();
}
inline void NanoPBOptions::set_macro_type(const ::std::string& value) {
  set_has_macro_type();
  macro_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.macro_type)
}
#if LANG_CXX11
inline void NanoPBOptions::set_macro_type(::std::string&& value) {
  set_has_macro_type();
  macro_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.macro_type)
}
#endif
inline void NanoPBOptions::set_macro_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macro_type();
  macro_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.macro_type)
}
inline void NanoPBOptions::set_macro_type(const char* value, size_t size) {
  set_has_macro_type();
  macro_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.macro_type)
}
inline ::std::string* NanoPBOptions::mutable_macro_type() {
  set_has_macro_type();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.macro_type)
  return macro_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_macro_type() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.macro_type)
  if (!has_macro_type()) {
    return NULL;
  }
  clear_has_macro_type();
  return macro_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_macro_type(::std::string* macro_type) {
  if (macro_type != NULL) {
    set_has_macro_type();
  } else {
    clear_has_macro_type();
  }
  macro_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macro_type);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.macro_type)
}

// optional string macro_name = 20;
inline bool NanoPBOptions::has_macro_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NanoPBOptions::set_has_macro_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NanoPBOptions::clear_has_macro_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NanoPBOptions::clear_macro_name() {
  macro_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macro_name();
}
inline const ::std::string& NanoPBOptions::macro_name() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.macro_name)
  return macro_name_.GetNoArena();
}
inline void NanoPBOptions::set_macro_name(const ::std::string& value) {
  set_has_macro_name();
  macro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.macro_name)
}
#if LANG_CXX11
inline void NanoPBOptions::set_macro_name(::std::string&& value) {
  set_has_macro_name();
  macro_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.macro_name)
}
#endif
inline void NanoPBOptions::set_macro_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_macro_name();
  macro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.macro_name)
}
inline void NanoPBOptions::set_macro_name(const char* value, size_t size) {
  set_has_macro_name();
  macro_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.macro_name)
}
inline ::std::string* NanoPBOptions::mutable_macro_name() {
  set_has_macro_name();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.macro_name)
  return macro_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_macro_name() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.macro_name)
  if (!has_macro_name()) {
    return NULL;
  }
  clear_has_macro_name();
  return macro_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_macro_name(::std::string* macro_name) {
  if (macro_name != NULL) {
    set_has_macro_name();
  } else {
    clear_has_macro_name();
  }
  macro_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macro_name);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.macro_name)
}

// optional string field_cname = 24;
inline bool NanoPBOptions::has_field_cname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NanoPBOptions::set_has_field_cname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NanoPBOptions::clear_has_field_cname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NanoPBOptions::clear_field_cname() {
  field_cname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field_cname();
}
inline const ::std::string& NanoPBOptions::field_cname() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.field_cname)
  return field_cname_.GetNoArena();
}
inline void NanoPBOptions::set_field_cname(const ::std::string& value) {
  set_has_field_cname();
  field_cname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.field_cname)
}
#if LANG_CXX11
inline void NanoPBOptions::set_field_cname(::std::string&& value) {
  set_has_field_cname();
  field_cname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.field_cname)
}
#endif
inline void NanoPBOptions::set_field_cname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field_cname();
  field_cname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.field_cname)
}
inline void NanoPBOptions::set_field_cname(const char* value, size_t size) {
  set_has_field_cname();
  field_cname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.field_cname)
}
inline ::std::string* NanoPBOptions::mutable_field_cname() {
  set_has_field_cname();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.field_cname)
  return field_cname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_field_cname() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.field_cname)
  if (!has_field_cname()) {
    return NULL;
  }
  clear_has_field_cname();
  return field_cname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_field_cname(::std::string* field_cname) {
  if (field_cname != NULL) {
    set_has_field_cname();
  } else {
    clear_has_field_cname();
  }
  field_cname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_cname);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.field_cname)
}

// optional string include_files = 21;
inline bool NanoPBOptions::has_include_files() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NanoPBOptions::set_has_include_files() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NanoPBOptions::clear_has_include_files() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NanoPBOptions::clear_include_files() {
  include_files_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_include_files();
}
inline const ::std::string& NanoPBOptions::include_files() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.include_files)
  return include_files_.GetNoArena();
}
inline void NanoPBOptions::set_include_files(const ::std::string& value) {
  set_has_include_files();
  include_files_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.include_files)
}
#if LANG_CXX11
inline void NanoPBOptions::set_include_files(::std::string&& value) {
  set_has_include_files();
  include_files_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.include_files)
}
#endif
inline void NanoPBOptions::set_include_files(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_include_files();
  include_files_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.include_files)
}
inline void NanoPBOptions::set_include_files(const char* value, size_t size) {
  set_has_include_files();
  include_files_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.include_files)
}
inline ::std::string* NanoPBOptions::mutable_include_files() {
  set_has_include_files();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.include_files)
  return include_files_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_include_files() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.include_files)
  if (!has_include_files()) {
    return NULL;
  }
  clear_has_include_files();
  return include_files_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_include_files(::std::string* include_files) {
  if (include_files != NULL) {
    set_has_include_files();
  } else {
    clear_has_include_files();
  }
  include_files_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), include_files);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.include_files)
}

// optional string insert_msg_last = 22;
inline bool NanoPBOptions::has_insert_msg_last() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NanoPBOptions::set_has_insert_msg_last() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NanoPBOptions::clear_has_insert_msg_last() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NanoPBOptions::clear_insert_msg_last() {
  insert_msg_last_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_insert_msg_last();
}
inline const ::std::string& NanoPBOptions::insert_msg_last() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.insert_msg_last)
  return insert_msg_last_.GetNoArena();
}
inline void NanoPBOptions::set_insert_msg_last(const ::std::string& value) {
  set_has_insert_msg_last();
  insert_msg_last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.insert_msg_last)
}
#if LANG_CXX11
inline void NanoPBOptions::set_insert_msg_last(::std::string&& value) {
  set_has_insert_msg_last();
  insert_msg_last_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.insert_msg_last)
}
#endif
inline void NanoPBOptions::set_insert_msg_last(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_insert_msg_last();
  insert_msg_last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.insert_msg_last)
}
inline void NanoPBOptions::set_insert_msg_last(const char* value, size_t size) {
  set_has_insert_msg_last();
  insert_msg_last_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.insert_msg_last)
}
inline ::std::string* NanoPBOptions::mutable_insert_msg_last() {
  set_has_insert_msg_last();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.insert_msg_last)
  return insert_msg_last_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_insert_msg_last() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.insert_msg_last)
  if (!has_insert_msg_last()) {
    return NULL;
  }
  clear_has_insert_msg_last();
  return insert_msg_last_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_insert_msg_last(::std::string* insert_msg_last) {
  if (insert_msg_last != NULL) {
    set_has_insert_msg_last();
  } else {
    clear_has_insert_msg_last();
  }
  insert_msg_last_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insert_msg_last);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.insert_msg_last)
}

// optional int32 use_stl = 30;
inline bool NanoPBOptions::has_use_stl() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void NanoPBOptions::set_has_use_stl() {
  _has_bits_[1] |= 0x00000004u;
}
inline void NanoPBOptions::clear_has_use_stl() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void NanoPBOptions::clear_use_stl() {
  use_stl_ = 0;
  clear_has_use_stl();
}
inline ::google::protobuf::int32 NanoPBOptions::use_stl() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.use_stl)
  return use_stl_;
}
inline void NanoPBOptions::set_use_stl(::google::protobuf::int32 value) {
  set_has_use_stl();
  use_stl_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.use_stl)
}

// optional string use_stl_enum = 31;
inline bool NanoPBOptions::has_use_stl_enum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NanoPBOptions::set_has_use_stl_enum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NanoPBOptions::clear_has_use_stl_enum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NanoPBOptions::clear_use_stl_enum() {
  use_stl_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_use_stl_enum();
}
inline const ::std::string& NanoPBOptions::use_stl_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.use_stl_enum)
  return use_stl_enum_.GetNoArena();
}
inline void NanoPBOptions::set_use_stl_enum(const ::std::string& value) {
  set_has_use_stl_enum();
  use_stl_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.use_stl_enum)
}
#if LANG_CXX11
inline void NanoPBOptions::set_use_stl_enum(::std::string&& value) {
  set_has_use_stl_enum();
  use_stl_enum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.use_stl_enum)
}
#endif
inline void NanoPBOptions::set_use_stl_enum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_use_stl_enum();
  use_stl_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.use_stl_enum)
}
inline void NanoPBOptions::set_use_stl_enum(const char* value, size_t size) {
  set_has_use_stl_enum();
  use_stl_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.use_stl_enum)
}
inline ::std::string* NanoPBOptions::mutable_use_stl_enum() {
  set_has_use_stl_enum();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.use_stl_enum)
  return use_stl_enum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_use_stl_enum() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.use_stl_enum)
  if (!has_use_stl_enum()) {
    return NULL;
  }
  clear_has_use_stl_enum();
  return use_stl_enum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_use_stl_enum(::std::string* use_stl_enum) {
  if (use_stl_enum != NULL) {
    set_has_use_stl_enum();
  } else {
    clear_has_use_stl_enum();
  }
  use_stl_enum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), use_stl_enum);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.use_stl_enum)
}

// optional bool use_stl_string = 32;
inline bool NanoPBOptions::has_use_stl_string() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void NanoPBOptions::set_has_use_stl_string() {
  _has_bits_[1] |= 0x00000001u;
}
inline void NanoPBOptions::clear_has_use_stl_string() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void NanoPBOptions::clear_use_stl_string() {
  use_stl_string_ = false;
  clear_has_use_stl_string();
}
inline bool NanoPBOptions::use_stl_string() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.use_stl_string)
  return use_stl_string_;
}
inline void NanoPBOptions::set_use_stl_string(bool value) {
  set_has_use_stl_string();
  use_stl_string_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.use_stl_string)
}

// optional string use_stl_key = 33;
inline bool NanoPBOptions::has_use_stl_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NanoPBOptions::set_has_use_stl_key() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NanoPBOptions::clear_has_use_stl_key() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NanoPBOptions::clear_use_stl_key() {
  use_stl_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_use_stl_key();
}
inline const ::std::string& NanoPBOptions::use_stl_key() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.use_stl_key)
  return use_stl_key_.GetNoArena();
}
inline void NanoPBOptions::set_use_stl_key(const ::std::string& value) {
  set_has_use_stl_key();
  use_stl_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.use_stl_key)
}
#if LANG_CXX11
inline void NanoPBOptions::set_use_stl_key(::std::string&& value) {
  set_has_use_stl_key();
  use_stl_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.use_stl_key)
}
#endif
inline void NanoPBOptions::set_use_stl_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_use_stl_key();
  use_stl_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.use_stl_key)
}
inline void NanoPBOptions::set_use_stl_key(const char* value, size_t size) {
  set_has_use_stl_key();
  use_stl_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.use_stl_key)
}
inline ::std::string* NanoPBOptions::mutable_use_stl_key() {
  set_has_use_stl_key();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.use_stl_key)
  return use_stl_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_use_stl_key() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.use_stl_key)
  if (!has_use_stl_key()) {
    return NULL;
  }
  clear_has_use_stl_key();
  return use_stl_key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_use_stl_key(::std::string* use_stl_key) {
  if (use_stl_key != NULL) {
    set_has_use_stl_key();
  } else {
    clear_has_use_stl_key();
  }
  use_stl_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), use_stl_key);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.use_stl_key)
}

// optional bool is_stl_key = 34 [default = false];
inline bool NanoPBOptions::has_is_stl_key() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void NanoPBOptions::set_has_is_stl_key() {
  _has_bits_[1] |= 0x00000002u;
}
inline void NanoPBOptions::clear_has_is_stl_key() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void NanoPBOptions::clear_is_stl_key() {
  is_stl_key_ = false;
  clear_has_is_stl_key();
}
inline bool NanoPBOptions::is_stl_key() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.is_stl_key)
  return is_stl_key_;
}
inline void NanoPBOptions::set_is_stl_key(bool value) {
  set_has_is_stl_key();
  is_stl_key_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.is_stl_key)
}

// optional bool is_std_stl = 35;
inline bool NanoPBOptions::has_is_std_stl() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void NanoPBOptions::set_has_is_std_stl() {
  _has_bits_[1] |= 0x00000010u;
}
inline void NanoPBOptions::clear_has_is_std_stl() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void NanoPBOptions::clear_is_std_stl() {
  is_std_stl_ = false;
  clear_has_is_std_stl();
}
inline bool NanoPBOptions::is_std_stl() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.is_std_stl)
  return is_std_stl_;
}
inline void NanoPBOptions::set_is_std_stl(bool value) {
  set_has_is_std_stl();
  is_std_stl_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.is_std_stl)
}

// optional bool is_c_std = 36 [default = false];
inline bool NanoPBOptions::has_is_c_std() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void NanoPBOptions::set_has_is_c_std() {
  _has_bits_[1] |= 0x00000020u;
}
inline void NanoPBOptions::clear_has_is_c_std() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void NanoPBOptions::clear_is_c_std() {
  is_c_std_ = false;
  clear_has_is_c_std();
}
inline bool NanoPBOptions::is_c_std() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.is_c_std)
  return is_c_std_;
}
inline void NanoPBOptions::set_is_c_std(bool value) {
  set_has_is_c_std();
  is_c_std_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.is_c_std)
}

// optional .FieldParseType parse_type = 37 [default = FPT_DEFAULT];
inline bool NanoPBOptions::has_parse_type() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void NanoPBOptions::set_has_parse_type() {
  _has_bits_[1] |= 0x00000008u;
}
inline void NanoPBOptions::clear_has_parse_type() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void NanoPBOptions::clear_parse_type() {
  parse_type_ = 0;
  clear_has_parse_type();
}
inline ::FieldParseType NanoPBOptions::parse_type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.parse_type)
  return static_cast< ::FieldParseType >(parse_type_);
}
inline void NanoPBOptions::set_parse_type(::FieldParseType value) {
  assert(::FieldParseType_IsValid(value));
  set_has_parse_type();
  parse_type_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.parse_type)
}

// optional bool time_to_int = 40;
inline bool NanoPBOptions::has_time_to_int() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void NanoPBOptions::set_has_time_to_int() {
  _has_bits_[1] |= 0x00000040u;
}
inline void NanoPBOptions::clear_has_time_to_int() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void NanoPBOptions::clear_time_to_int() {
  time_to_int_ = false;
  clear_has_time_to_int();
}
inline bool NanoPBOptions::time_to_int() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.time_to_int)
  return time_to_int_;
}
inline void NanoPBOptions::set_time_to_int(bool value) {
  set_has_time_to_int();
  time_to_int_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.time_to_int)
}

// optional bool time_to_str = 41;
inline bool NanoPBOptions::has_time_to_str() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void NanoPBOptions::set_has_time_to_str() {
  _has_bits_[1] |= 0x00000080u;
}
inline void NanoPBOptions::clear_has_time_to_str() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void NanoPBOptions::clear_time_to_str() {
  time_to_str_ = false;
  clear_has_time_to_str();
}
inline bool NanoPBOptions::time_to_str() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.time_to_str)
  return time_to_str_;
}
inline void NanoPBOptions::set_time_to_str(bool value) {
  set_has_time_to_str();
  time_to_str_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.time_to_str)
}

// optional .enum_field_type db_type = 50 [default = E_FIELD_TYPE_NORMAL];
inline bool NanoPBOptions::has_db_type() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void NanoPBOptions::set_has_db_type() {
  _has_bits_[1] |= 0x00010000u;
}
inline void NanoPBOptions::clear_has_db_type() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void NanoPBOptions::clear_db_type() {
  db_type_ = 1;
  clear_has_db_type();
}
inline ::enum_field_type NanoPBOptions::db_type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_type)
  return static_cast< ::enum_field_type >(db_type_);
}
inline void NanoPBOptions::set_db_type(::enum_field_type value) {
  assert(::enum_field_type_IsValid(value));
  set_has_db_type();
  db_type_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_type)
}

// optional int32 db_max_size = 51;
inline bool NanoPBOptions::has_db_max_size() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void NanoPBOptions::set_has_db_max_size() {
  _has_bits_[1] |= 0x00000200u;
}
inline void NanoPBOptions::clear_has_db_max_size() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void NanoPBOptions::clear_db_max_size() {
  db_max_size_ = 0;
  clear_has_db_max_size();
}
inline ::google::protobuf::int32 NanoPBOptions::db_max_size() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_max_size)
  return db_max_size_;
}
inline void NanoPBOptions::set_db_max_size(::google::protobuf::int32 value) {
  set_has_db_max_size();
  db_max_size_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_max_size)
}

// optional string db_max_size_enum = 52;
inline bool NanoPBOptions::has_db_max_size_enum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NanoPBOptions::set_has_db_max_size_enum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NanoPBOptions::clear_has_db_max_size_enum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NanoPBOptions::clear_db_max_size_enum() {
  db_max_size_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_max_size_enum();
}
inline const ::std::string& NanoPBOptions::db_max_size_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_max_size_enum)
  return db_max_size_enum_.GetNoArena();
}
inline void NanoPBOptions::set_db_max_size_enum(const ::std::string& value) {
  set_has_db_max_size_enum();
  db_max_size_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_max_size_enum)
}
#if LANG_CXX11
inline void NanoPBOptions::set_db_max_size_enum(::std::string&& value) {
  set_has_db_max_size_enum();
  db_max_size_enum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.db_max_size_enum)
}
#endif
inline void NanoPBOptions::set_db_max_size_enum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_max_size_enum();
  db_max_size_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.db_max_size_enum)
}
inline void NanoPBOptions::set_db_max_size_enum(const char* value, size_t size) {
  set_has_db_max_size_enum();
  db_max_size_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.db_max_size_enum)
}
inline ::std::string* NanoPBOptions::mutable_db_max_size_enum() {
  set_has_db_max_size_enum();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.db_max_size_enum)
  return db_max_size_enum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_db_max_size_enum() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.db_max_size_enum)
  if (!has_db_max_size_enum()) {
    return NULL;
  }
  clear_has_db_max_size_enum();
  return db_max_size_enum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_db_max_size_enum(::std::string* db_max_size_enum) {
  if (db_max_size_enum != NULL) {
    set_has_db_max_size_enum();
  } else {
    clear_has_db_max_size_enum();
  }
  db_max_size_enum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_max_size_enum);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.db_max_size_enum)
}

// optional bool db_not_null = 53 [default = false];
inline bool NanoPBOptions::has_db_not_null() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void NanoPBOptions::set_has_db_not_null() {
  _has_bits_[1] |= 0x00000800u;
}
inline void NanoPBOptions::clear_has_db_not_null() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void NanoPBOptions::clear_db_not_null() {
  db_not_null_ = false;
  clear_has_db_not_null();
}
inline bool NanoPBOptions::db_not_null() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_not_null)
  return db_not_null_;
}
inline void NanoPBOptions::set_db_not_null(bool value) {
  set_has_db_not_null();
  db_not_null_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_not_null)
}

// optional bool db_auto_increment = 54 [default = false];
inline bool NanoPBOptions::has_db_auto_increment() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void NanoPBOptions::set_has_db_auto_increment() {
  _has_bits_[1] |= 0x00001000u;
}
inline void NanoPBOptions::clear_has_db_auto_increment() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void NanoPBOptions::clear_db_auto_increment() {
  db_auto_increment_ = false;
  clear_has_db_auto_increment();
}
inline bool NanoPBOptions::db_auto_increment() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_auto_increment)
  return db_auto_increment_;
}
inline void NanoPBOptions::set_db_auto_increment(bool value) {
  set_has_db_auto_increment();
  db_auto_increment_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_auto_increment)
}

// optional int32 db_max_count = 55;
inline bool NanoPBOptions::has_db_max_count() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void NanoPBOptions::set_has_db_max_count() {
  _has_bits_[1] |= 0x00000400u;
}
inline void NanoPBOptions::clear_has_db_max_count() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void NanoPBOptions::clear_db_max_count() {
  db_max_count_ = 0;
  clear_has_db_max_count();
}
inline ::google::protobuf::int32 NanoPBOptions::db_max_count() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_max_count)
  return db_max_count_;
}
inline void NanoPBOptions::set_db_max_count(::google::protobuf::int32 value) {
  set_has_db_max_count();
  db_max_count_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_max_count)
}

// optional string db_max_count_enum = 56;
inline bool NanoPBOptions::has_db_max_count_enum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NanoPBOptions::set_has_db_max_count_enum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NanoPBOptions::clear_has_db_max_count_enum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NanoPBOptions::clear_db_max_count_enum() {
  db_max_count_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_max_count_enum();
}
inline const ::std::string& NanoPBOptions::db_max_count_enum() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_max_count_enum)
  return db_max_count_enum_.GetNoArena();
}
inline void NanoPBOptions::set_db_max_count_enum(const ::std::string& value) {
  set_has_db_max_count_enum();
  db_max_count_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_max_count_enum)
}
#if LANG_CXX11
inline void NanoPBOptions::set_db_max_count_enum(::std::string&& value) {
  set_has_db_max_count_enum();
  db_max_count_enum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.db_max_count_enum)
}
#endif
inline void NanoPBOptions::set_db_max_count_enum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_max_count_enum();
  db_max_count_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.db_max_count_enum)
}
inline void NanoPBOptions::set_db_max_count_enum(const char* value, size_t size) {
  set_has_db_max_count_enum();
  db_max_count_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.db_max_count_enum)
}
inline ::std::string* NanoPBOptions::mutable_db_max_count_enum() {
  set_has_db_max_count_enum();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.db_max_count_enum)
  return db_max_count_enum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_db_max_count_enum() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.db_max_count_enum)
  if (!has_db_max_count_enum()) {
    return NULL;
  }
  clear_has_db_max_count_enum();
  return db_max_count_enum_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_db_max_count_enum(::std::string* db_max_count_enum) {
  if (db_max_count_enum != NULL) {
    set_has_db_max_count_enum();
  } else {
    clear_has_db_max_count_enum();
  }
  db_max_count_enum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_max_count_enum);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.db_max_count_enum)
}

// optional int32 db_auto_increment_value = 57 [default = 0];
inline bool NanoPBOptions::has_db_auto_increment_value() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void NanoPBOptions::set_has_db_auto_increment_value() {
  _has_bits_[1] |= 0x00008000u;
}
inline void NanoPBOptions::clear_has_db_auto_increment_value() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void NanoPBOptions::clear_db_auto_increment_value() {
  db_auto_increment_value_ = 0;
  clear_has_db_auto_increment_value();
}
inline ::google::protobuf::int32 NanoPBOptions::db_auto_increment_value() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_auto_increment_value)
  return db_auto_increment_value_;
}
inline void NanoPBOptions::set_db_auto_increment_value(::google::protobuf::int32 value) {
  set_has_db_auto_increment_value();
  db_auto_increment_value_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_auto_increment_value)
}

// optional bool db_no_field = 58 [default = false];
inline bool NanoPBOptions::has_db_no_field() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void NanoPBOptions::set_has_db_no_field() {
  _has_bits_[1] |= 0x00002000u;
}
inline void NanoPBOptions::clear_has_db_no_field() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void NanoPBOptions::clear_db_no_field() {
  db_no_field_ = false;
  clear_has_db_no_field();
}
inline bool NanoPBOptions::db_no_field() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_no_field)
  return db_no_field_;
}
inline void NanoPBOptions::set_db_no_field(bool value) {
  set_has_db_no_field();
  db_no_field_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_no_field)
}

// optional string db_comment = 59;
inline bool NanoPBOptions::has_db_comment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NanoPBOptions::set_has_db_comment() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NanoPBOptions::clear_has_db_comment() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NanoPBOptions::clear_db_comment() {
  db_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_comment();
}
inline const ::std::string& NanoPBOptions::db_comment() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_comment)
  return db_comment_.GetNoArena();
}
inline void NanoPBOptions::set_db_comment(const ::std::string& value) {
  set_has_db_comment();
  db_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_comment)
}
#if LANG_CXX11
inline void NanoPBOptions::set_db_comment(::std::string&& value) {
  set_has_db_comment();
  db_comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.db_comment)
}
#endif
inline void NanoPBOptions::set_db_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_comment();
  db_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.db_comment)
}
inline void NanoPBOptions::set_db_comment(const char* value, size_t size) {
  set_has_db_comment();
  db_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.db_comment)
}
inline ::std::string* NanoPBOptions::mutable_db_comment() {
  set_has_db_comment();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.db_comment)
  return db_comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_db_comment() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.db_comment)
  if (!has_db_comment()) {
    return NULL;
  }
  clear_has_db_comment();
  return db_comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_db_comment(::std::string* db_comment) {
  if (db_comment != NULL) {
    set_has_db_comment();
  } else {
    clear_has_db_comment();
  }
  db_comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_comment);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.db_comment)
}

// optional bool to_db_sql = 60 [default = false];
inline bool NanoPBOptions::has_to_db_sql() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void NanoPBOptions::set_has_to_db_sql() {
  _has_bits_[1] |= 0x00004000u;
}
inline void NanoPBOptions::clear_has_to_db_sql() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void NanoPBOptions::clear_to_db_sql() {
  to_db_sql_ = false;
  clear_has_to_db_sql();
}
inline bool NanoPBOptions::to_db_sql() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.to_db_sql)
  return to_db_sql_;
}
inline void NanoPBOptions::set_to_db_sql(bool value) {
  set_has_to_db_sql();
  to_db_sql_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.to_db_sql)
}

// optional bool db_message_expand = 61 [default = false];
inline bool NanoPBOptions::has_db_message_expand() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void NanoPBOptions::set_has_db_message_expand() {
  _has_bits_[1] |= 0x00000100u;
}
inline void NanoPBOptions::clear_has_db_message_expand() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void NanoPBOptions::clear_db_message_expand() {
  db_message_expand_ = false;
  clear_has_db_message_expand();
}
inline bool NanoPBOptions::db_message_expand() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.db_message_expand)
  return db_message_expand_;
}
inline void NanoPBOptions::set_db_message_expand(bool value) {
  set_has_db_message_expand();
  db_message_expand_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.db_message_expand)
}

// optional .enum_field_type res_type = 70 [default = E_FIELD_TYPE_NORMAL];
inline bool NanoPBOptions::has_res_type() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void NanoPBOptions::set_has_res_type() {
  _has_bits_[1] |= 0x00020000u;
}
inline void NanoPBOptions::clear_has_res_type() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void NanoPBOptions::clear_res_type() {
  res_type_ = 1;
  clear_has_res_type();
}
inline ::enum_field_type NanoPBOptions::res_type() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.res_type)
  return static_cast< ::enum_field_type >(res_type_);
}
inline void NanoPBOptions::set_res_type(::enum_field_type value) {
  assert(::enum_field_type_IsValid(value));
  set_has_res_type();
  res_type_ = value;
  // @@protoc_insertion_point(field_set:NanoPBOptions.res_type)
}

// optional string res_unique_ndex = 71;
inline bool NanoPBOptions::has_res_unique_ndex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NanoPBOptions::set_has_res_unique_ndex() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NanoPBOptions::clear_has_res_unique_ndex() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NanoPBOptions::clear_res_unique_ndex() {
  res_unique_ndex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_res_unique_ndex();
}
inline const ::std::string& NanoPBOptions::res_unique_ndex() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.res_unique_ndex)
  return res_unique_ndex_.GetNoArena();
}
inline void NanoPBOptions::set_res_unique_ndex(const ::std::string& value) {
  set_has_res_unique_ndex();
  res_unique_ndex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.res_unique_ndex)
}
#if LANG_CXX11
inline void NanoPBOptions::set_res_unique_ndex(::std::string&& value) {
  set_has_res_unique_ndex();
  res_unique_ndex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.res_unique_ndex)
}
#endif
inline void NanoPBOptions::set_res_unique_ndex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_res_unique_ndex();
  res_unique_ndex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.res_unique_ndex)
}
inline void NanoPBOptions::set_res_unique_ndex(const char* value, size_t size) {
  set_has_res_unique_ndex();
  res_unique_ndex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.res_unique_ndex)
}
inline ::std::string* NanoPBOptions::mutable_res_unique_ndex() {
  set_has_res_unique_ndex();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.res_unique_ndex)
  return res_unique_ndex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_res_unique_ndex() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.res_unique_ndex)
  if (!has_res_unique_ndex()) {
    return NULL;
  }
  clear_has_res_unique_ndex();
  return res_unique_ndex_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_res_unique_ndex(::std::string* res_unique_ndex) {
  if (res_unique_ndex != NULL) {
    set_has_res_unique_ndex();
  } else {
    clear_has_res_unique_ndex();
  }
  res_unique_ndex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res_unique_ndex);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.res_unique_ndex)
}

// optional string res_multi_index = 72;
inline bool NanoPBOptions::has_res_multi_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NanoPBOptions::set_has_res_multi_index() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NanoPBOptions::clear_has_res_multi_index() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NanoPBOptions::clear_res_multi_index() {
  res_multi_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_res_multi_index();
}
inline const ::std::string& NanoPBOptions::res_multi_index() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.res_multi_index)
  return res_multi_index_.GetNoArena();
}
inline void NanoPBOptions::set_res_multi_index(const ::std::string& value) {
  set_has_res_multi_index();
  res_multi_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.res_multi_index)
}
#if LANG_CXX11
inline void NanoPBOptions::set_res_multi_index(::std::string&& value) {
  set_has_res_multi_index();
  res_multi_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.res_multi_index)
}
#endif
inline void NanoPBOptions::set_res_multi_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_res_multi_index();
  res_multi_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.res_multi_index)
}
inline void NanoPBOptions::set_res_multi_index(const char* value, size_t size) {
  set_has_res_multi_index();
  res_multi_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.res_multi_index)
}
inline ::std::string* NanoPBOptions::mutable_res_multi_index() {
  set_has_res_multi_index();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.res_multi_index)
  return res_multi_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_res_multi_index() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.res_multi_index)
  if (!has_res_multi_index()) {
    return NULL;
  }
  clear_has_res_multi_index();
  return res_multi_index_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_res_multi_index(::std::string* res_multi_index) {
  if (res_multi_index != NULL) {
    set_has_res_multi_index();
  } else {
    clear_has_res_multi_index();
  }
  res_multi_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res_multi_index);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.res_multi_index)
}

// optional string res_relation = 73;
inline bool NanoPBOptions::has_res_relation() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NanoPBOptions::set_has_res_relation() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NanoPBOptions::clear_has_res_relation() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NanoPBOptions::clear_res_relation() {
  res_relation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_res_relation();
}
inline const ::std::string& NanoPBOptions::res_relation() const {
  // @@protoc_insertion_point(field_get:NanoPBOptions.res_relation)
  return res_relation_.GetNoArena();
}
inline void NanoPBOptions::set_res_relation(const ::std::string& value) {
  set_has_res_relation();
  res_relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NanoPBOptions.res_relation)
}
#if LANG_CXX11
inline void NanoPBOptions::set_res_relation(::std::string&& value) {
  set_has_res_relation();
  res_relation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NanoPBOptions.res_relation)
}
#endif
inline void NanoPBOptions::set_res_relation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_res_relation();
  res_relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NanoPBOptions.res_relation)
}
inline void NanoPBOptions::set_res_relation(const char* value, size_t size) {
  set_has_res_relation();
  res_relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NanoPBOptions.res_relation)
}
inline ::std::string* NanoPBOptions::mutable_res_relation() {
  set_has_res_relation();
  // @@protoc_insertion_point(field_mutable:NanoPBOptions.res_relation)
  return res_relation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NanoPBOptions::release_res_relation() {
  // @@protoc_insertion_point(field_release:NanoPBOptions.res_relation)
  if (!has_res_relation()) {
    return NULL;
  }
  clear_has_res_relation();
  return res_relation_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NanoPBOptions::set_allocated_res_relation(::std::string* res_relation) {
  if (res_relation != NULL) {
    set_has_res_relation();
  } else {
    clear_has_res_relation();
  }
  res_relation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res_relation);
  // @@protoc_insertion_point(field_set_allocated:NanoPBOptions.res_relation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::FieldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FieldType>() {
  return ::FieldType_descriptor();
}
template <> struct is_proto_enum< ::IntSize> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IntSize>() {
  return ::IntSize_descriptor();
}
template <> struct is_proto_enum< ::StlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StlType>() {
  return ::StlType_descriptor();
}
template <> struct is_proto_enum< ::FrameEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FrameEnum>() {
  return ::FrameEnum_descriptor();
}
template <> struct is_proto_enum< ::FieldParseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FieldParseType>() {
  return ::FieldParseType_descriptor();
}
template <> struct is_proto_enum< ::enum_field_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enum_field_type>() {
  return ::enum_field_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nanopb_2eproto
