/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 */

#ifndef PB_NFRAME_FRAMESQLDATA_NANOPB_H_INCLUDED
#define PB_NFRAME_FRAMESQLDATA_NANOPB_H_INCLUDED
#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <NFComm/NFCore/NFHash.hpp>
#include <pb.h>

#include "FrameSqlData.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _storesvr_dbtype {
    E_DBTYPE_SQLITE = 0,
    E_DBTYPE_MYSQL = 1
} storesvr_dbtype;
#define _storesvr_dbtype_MIN E_DBTYPE_SQLITE
#define _storesvr_dbtype_MAX E_DBTYPE_MYSQL
#define _storesvr_dbtype_ARRAYSIZE ((storesvr_dbtype)(E_DBTYPE_MYSQL+1))
#define _storesvr_dbtype_ALLSIZE (2)

typedef enum _storesvr_logic_operator {
    E_LOGICOP_NONE = 0,
    E_LOGICOP_AND = 1,
    E_LOGICOP_OR = 2
} storesvr_logic_operator;
#define _storesvr_logic_operator_MIN E_LOGICOP_NONE
#define _storesvr_logic_operator_MAX E_LOGICOP_OR
#define _storesvr_logic_operator_ARRAYSIZE ((storesvr_logic_operator)(E_LOGICOP_OR+1))
#define _storesvr_logic_operator_ALLSIZE (3)

typedef enum _storesvr_cmp_operator {
    E_CMPOP_EQUAL = 0,
    E_CMPOP_GREATER = 1,
    E_CMPOP_LESS = 2,
    E_CMPOP_GREATEREQUAL = 3,
    E_CMPOP_LESSEQUAL = 4,
    E_CMPOP_NOTEQUAL = 5
} storesvr_cmp_operator;
#define _storesvr_cmp_operator_MIN E_CMPOP_EQUAL
#define _storesvr_cmp_operator_MAX E_CMPOP_NOTEQUAL
#define _storesvr_cmp_operator_ARRAYSIZE ((storesvr_cmp_operator)(E_CMPOP_NOTEQUAL+1))
#define _storesvr_cmp_operator_ALLSIZE (6)

typedef enum _storesvr_column_type {
    E_COLUMNTYPE_NUM = 0,
    E_COLUMNTYPE_STRING = 1
} storesvr_column_type;
#define _storesvr_column_type_MIN E_COLUMNTYPE_NUM
#define _storesvr_column_type_MAX E_COLUMNTYPE_STRING
#define _storesvr_column_type_ARRAYSIZE ((storesvr_column_type)(E_COLUMNTYPE_STRING+1))
#define _storesvr_column_type_ALLSIZE (2)

/* Struct definitions */
struct storesvr_baseinfo {
    std::string dbname;
    std::string tbname;
    std::string clname;
    std::vector<std::string> sel_fields;
    uint32_t max_records;
    std::string package_name;

	storesvr_baseinfo();
	~storesvr_baseinfo();
	storesvr_baseinfo(const storesvr_baseinfo& stArgsData);
	storesvr_baseinfo& operator=(const storesvr_baseinfo& stArgsData);
	void CopyData(const storesvr_baseinfo& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_baseinfo& cc);
    void ToPb(NFrame::storesvr_baseinfo* cc) const;
    NFrame::storesvr_baseinfo ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_baseinfo) */
};

struct storesvr_opres {
    uint64_t mod_key;
    int32_t err_code;
    std::string errmsg;

	storesvr_opres();
	~storesvr_opres();
	storesvr_opres(const storesvr_opres& stArgsData);
	storesvr_opres& operator=(const storesvr_opres& stArgsData);
	void CopyData(const storesvr_opres& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_opres& cc);
    void ToPb(NFrame::storesvr_opres* cc) const;
    NFrame::storesvr_opres ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_opres) */
};

struct storesvr_vk {
    std::string column_name;
    std::string column_value;
    storesvr_cmp_operator cmp_operator;
    storesvr_column_type column_type;
    storesvr_logic_operator logic_operator;

	storesvr_vk();
	~storesvr_vk();
	storesvr_vk(const storesvr_vk& stArgsData);
	storesvr_vk& operator=(const storesvr_vk& stArgsData);
	void CopyData(const storesvr_vk& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_vk& cc);
    void ToPb(NFrame::storesvr_vk* cc) const;
    NFrame::storesvr_vk ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_vk) */
};

struct storesvr_del_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_del_res();
	~storesvr_del_res();
	storesvr_del_res(const storesvr_del_res& stArgsData);
	storesvr_del_res& operator=(const storesvr_del_res& stArgsData);
	void CopyData(const storesvr_del_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_del_res& cc);
    void ToPb(NFrame::storesvr_del_res* cc) const;
    NFrame::storesvr_del_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_del_res) */
};

struct storesvr_delobj {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::string record;

	storesvr_delobj();
	~storesvr_delobj();
	storesvr_delobj(const storesvr_delobj& stArgsData);
	storesvr_delobj& operator=(const storesvr_delobj& stArgsData);
	void CopyData(const storesvr_delobj& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_delobj& cc);
    void ToPb(NFrame::storesvr_delobj* cc) const;
    NFrame::storesvr_delobj ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_delobj) */
};

struct storesvr_delobj_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_delobj_res();
	~storesvr_delobj_res();
	storesvr_delobj_res(const storesvr_delobj_res& stArgsData);
	storesvr_delobj_res& operator=(const storesvr_delobj_res& stArgsData);
	void CopyData(const storesvr_delobj_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_delobj_res& cc);
    void ToPb(NFrame::storesvr_delobj_res* cc) const;
    NFrame::storesvr_delobj_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_delobj_res) */
};

struct storesvr_execute {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::string record;

	storesvr_execute();
	~storesvr_execute();
	storesvr_execute(const storesvr_execute& stArgsData);
	storesvr_execute& operator=(const storesvr_execute& stArgsData);
	void CopyData(const storesvr_execute& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_execute& cc);
    void ToPb(NFrame::storesvr_execute* cc) const;
    NFrame::storesvr_execute ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_execute) */
};

struct storesvr_execute_more {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::string record;

	storesvr_execute_more();
	~storesvr_execute_more();
	storesvr_execute_more(const storesvr_execute_more& stArgsData);
	storesvr_execute_more& operator=(const storesvr_execute_more& stArgsData);
	void CopyData(const storesvr_execute_more& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_execute_more& cc);
    void ToPb(NFrame::storesvr_execute_more* cc) const;
    NFrame::storesvr_execute_more ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_execute_more) */
};

struct storesvr_execute_more_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;
    bool is_lastbatch;
    int32_t row_count;
    std::vector<std::string> record;

	storesvr_execute_more_res();
	~storesvr_execute_more_res();
	storesvr_execute_more_res(const storesvr_execute_more_res& stArgsData);
	storesvr_execute_more_res& operator=(const storesvr_execute_more_res& stArgsData);
	void CopyData(const storesvr_execute_more_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_execute_more_res& cc);
    void ToPb(NFrame::storesvr_execute_more_res* cc) const;
    NFrame::storesvr_execute_more_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_execute_more_res) */
};

struct storesvr_execute_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;
    std::string record;

	storesvr_execute_res();
	~storesvr_execute_res();
	storesvr_execute_res(const storesvr_execute_res& stArgsData);
	storesvr_execute_res& operator=(const storesvr_execute_res& stArgsData);
	void CopyData(const storesvr_execute_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_execute_res& cc);
    void ToPb(NFrame::storesvr_execute_res* cc) const;
    NFrame::storesvr_execute_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_execute_res) */
};

struct storesvr_insert {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::vector<std::string> record;

	storesvr_insert();
	~storesvr_insert();
	storesvr_insert(const storesvr_insert& stArgsData);
	storesvr_insert& operator=(const storesvr_insert& stArgsData);
	void CopyData(const storesvr_insert& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_insert& cc);
    void ToPb(NFrame::storesvr_insert* cc) const;
    NFrame::storesvr_insert ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_insert) */
};

struct storesvr_insert_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_insert_res();
	~storesvr_insert_res();
	storesvr_insert_res(const storesvr_insert_res& stArgsData);
	storesvr_insert_res& operator=(const storesvr_insert_res& stArgsData);
	void CopyData(const storesvr_insert_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_insert_res& cc);
    void ToPb(NFrame::storesvr_insert_res* cc) const;
    NFrame::storesvr_insert_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_insert_res) */
};

struct storesvr_insertobj {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::string record;

	storesvr_insertobj();
	~storesvr_insertobj();
	storesvr_insertobj(const storesvr_insertobj& stArgsData);
	storesvr_insertobj& operator=(const storesvr_insertobj& stArgsData);
	void CopyData(const storesvr_insertobj& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_insertobj& cc);
    void ToPb(NFrame::storesvr_insertobj* cc) const;
    NFrame::storesvr_insertobj ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_insertobj) */
};

struct storesvr_insertobj_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_insertobj_res();
	~storesvr_insertobj_res();
	storesvr_insertobj_res(const storesvr_insertobj_res& stArgsData);
	storesvr_insertobj_res& operator=(const storesvr_insertobj_res& stArgsData);
	void CopyData(const storesvr_insertobj_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_insertobj_res& cc);
    void ToPb(NFrame::storesvr_insertobj_res* cc) const;
    NFrame::storesvr_insertobj_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_insertobj_res) */
};

struct storesvr_mod_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_mod_res();
	~storesvr_mod_res();
	storesvr_mod_res(const storesvr_mod_res& stArgsData);
	storesvr_mod_res& operator=(const storesvr_mod_res& stArgsData);
	void CopyData(const storesvr_mod_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_mod_res& cc);
    void ToPb(NFrame::storesvr_mod_res* cc) const;
    NFrame::storesvr_mod_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_mod_res) */
};

struct storesvr_modobj {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::string record;

	storesvr_modobj();
	~storesvr_modobj();
	storesvr_modobj(const storesvr_modobj& stArgsData);
	storesvr_modobj& operator=(const storesvr_modobj& stArgsData);
	void CopyData(const storesvr_modobj& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_modobj& cc);
    void ToPb(NFrame::storesvr_modobj* cc) const;
    NFrame::storesvr_modobj ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_modobj) */
};

struct storesvr_modobj_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_modobj_res();
	~storesvr_modobj_res();
	storesvr_modobj_res(const storesvr_modobj_res& stArgsData);
	storesvr_modobj_res& operator=(const storesvr_modobj_res& stArgsData);
	void CopyData(const storesvr_modobj_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_modobj_res& cc);
    void ToPb(NFrame::storesvr_modobj_res* cc) const;
    NFrame::storesvr_modobj_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_modobj_res) */
};

struct storesvr_sel_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;
    bool is_lastbatch;
    int32_t row_count;
    std::vector<std::string> record;

	storesvr_sel_res();
	~storesvr_sel_res();
	storesvr_sel_res(const storesvr_sel_res& stArgsData);
	storesvr_sel_res& operator=(const storesvr_sel_res& stArgsData);
	void CopyData(const storesvr_sel_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_sel_res& cc);
    void ToPb(NFrame::storesvr_sel_res* cc) const;
    NFrame::storesvr_sel_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_sel_res) */
};

struct storesvr_selobj {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::string record;

	storesvr_selobj();
	~storesvr_selobj();
	storesvr_selobj(const storesvr_selobj& stArgsData);
	storesvr_selobj& operator=(const storesvr_selobj& stArgsData);
	void CopyData(const storesvr_selobj& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_selobj& cc);
    void ToPb(NFrame::storesvr_selobj* cc) const;
    NFrame::storesvr_selobj ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_selobj) */
};

struct storesvr_selobj_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;
    std::string record;

	storesvr_selobj_res();
	~storesvr_selobj_res();
	storesvr_selobj_res(const storesvr_selobj_res& stArgsData);
	storesvr_selobj_res& operator=(const storesvr_selobj_res& stArgsData);
	void CopyData(const storesvr_selobj_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_selobj_res& cc);
    void ToPb(NFrame::storesvr_selobj_res* cc) const;
    NFrame::storesvr_selobj_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_selobj_res) */
};

struct storesvr_update_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_update_res();
	~storesvr_update_res();
	storesvr_update_res(const storesvr_update_res& stArgsData);
	storesvr_update_res& operator=(const storesvr_update_res& stArgsData);
	void CopyData(const storesvr_update_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_update_res& cc);
    void ToPb(NFrame::storesvr_update_res* cc) const;
    NFrame::storesvr_update_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_update_res) */
};

struct storesvr_updateobj {
    storesvr_baseinfo baseinfo;
    uint64_t mod_key;
    std::string record;

	storesvr_updateobj();
	~storesvr_updateobj();
	storesvr_updateobj(const storesvr_updateobj& stArgsData);
	storesvr_updateobj& operator=(const storesvr_updateobj& stArgsData);
	void CopyData(const storesvr_updateobj& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_updateobj& cc);
    void ToPb(NFrame::storesvr_updateobj* cc) const;
    NFrame::storesvr_updateobj ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_updateobj) */
};

struct storesvr_updateobj_res {
    storesvr_baseinfo baseinfo;
    storesvr_opres opres;

	storesvr_updateobj_res();
	~storesvr_updateobj_res();
	storesvr_updateobj_res(const storesvr_updateobj_res& stArgsData);
	storesvr_updateobj_res& operator=(const storesvr_updateobj_res& stArgsData);
	void CopyData(const storesvr_updateobj_res& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_updateobj_res& cc);
    void ToPb(NFrame::storesvr_updateobj_res* cc) const;
    NFrame::storesvr_updateobj_res ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_updateobj_res) */
};

struct storesvr_wherecond {
    uint64_t mod_key;
    std::vector<storesvr_vk> where_conds;
    std::string where_additional_conds;
    std::vector<std::string> private_keys;

	storesvr_wherecond();
	~storesvr_wherecond();
	storesvr_wherecond(const storesvr_wherecond& stArgsData);
	storesvr_wherecond& operator=(const storesvr_wherecond& stArgsData);
	void CopyData(const storesvr_wherecond& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_wherecond& cc);
    void ToPb(NFrame::storesvr_wherecond* cc) const;
    NFrame::storesvr_wherecond ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_wherecond) */
};

struct storesvr_del {
    storesvr_baseinfo baseinfo;
    storesvr_wherecond cond;

	storesvr_del();
	~storesvr_del();
	storesvr_del(const storesvr_del& stArgsData);
	storesvr_del& operator=(const storesvr_del& stArgsData);
	void CopyData(const storesvr_del& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_del& cc);
    void ToPb(NFrame::storesvr_del* cc) const;
    NFrame::storesvr_del ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_del) */
};

struct storesvr_mod {
    storesvr_baseinfo baseinfo;
    storesvr_wherecond cond;
    std::string record;

	storesvr_mod();
	~storesvr_mod();
	storesvr_mod(const storesvr_mod& stArgsData);
	storesvr_mod& operator=(const storesvr_mod& stArgsData);
	void CopyData(const storesvr_mod& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_mod& cc);
    void ToPb(NFrame::storesvr_mod* cc) const;
    NFrame::storesvr_mod ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_mod) */
};

struct storesvr_sel {
    storesvr_baseinfo baseinfo;
    storesvr_wherecond cond;

	storesvr_sel();
	~storesvr_sel();
	storesvr_sel(const storesvr_sel& stArgsData);
	storesvr_sel& operator=(const storesvr_sel& stArgsData);
	void CopyData(const storesvr_sel& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_sel& cc);
    void ToPb(NFrame::storesvr_sel* cc) const;
    NFrame::storesvr_sel ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_sel) */
};

struct storesvr_update {
    storesvr_baseinfo baseinfo;
    storesvr_wherecond cond;
    std::string record;

	storesvr_update();
	~storesvr_update();
	storesvr_update(const storesvr_update& stArgsData);
	storesvr_update& operator=(const storesvr_update& stArgsData);
	void CopyData(const storesvr_update& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::storesvr_update& cc);
    void ToPb(NFrame::storesvr_update* cc) const;
    NFrame::storesvr_update ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:storesvr_update) */
};

/* Field tags (for use in manual encoding/decoding) */
#define storesvr_baseinfo_dbname_tag             1
#define storesvr_baseinfo_tbname_tag             2
#define storesvr_baseinfo_clname_tag             3
#define storesvr_baseinfo_sel_fields_tag         4
#define storesvr_baseinfo_max_records_tag        5
#define storesvr_baseinfo_package_name_tag       6
#define storesvr_opres_mod_key_tag               1
#define storesvr_opres_err_code_tag              2
#define storesvr_opres_errmsg_tag                3
#define storesvr_vk_column_name_tag              1
#define storesvr_vk_column_value_tag             2
#define storesvr_vk_cmp_operator_tag             3
#define storesvr_vk_column_type_tag              4
#define storesvr_vk_logic_operator_tag           5
#define storesvr_del_res_baseinfo_tag            1
#define storesvr_del_res_opres_tag               2
#define storesvr_delobj_baseinfo_tag             1
#define storesvr_delobj_mod_key_tag              2
#define storesvr_delobj_record_tag               3
#define storesvr_delobj_res_baseinfo_tag         1
#define storesvr_delobj_res_opres_tag            2
#define storesvr_execute_baseinfo_tag            1
#define storesvr_execute_mod_key_tag             2
#define storesvr_execute_record_tag              3
#define storesvr_execute_more_baseinfo_tag       1
#define storesvr_execute_more_mod_key_tag        2
#define storesvr_execute_more_record_tag         3
#define storesvr_execute_more_res_baseinfo_tag   1
#define storesvr_execute_more_res_opres_tag      2
#define storesvr_execute_more_res_is_lastbatch_tag 3
#define storesvr_execute_more_res_row_count_tag  4
#define storesvr_execute_more_res_record_tag     5
#define storesvr_execute_res_baseinfo_tag        1
#define storesvr_execute_res_opres_tag           2
#define storesvr_execute_res_record_tag          3
#define storesvr_insert_baseinfo_tag             1
#define storesvr_insert_mod_key_tag              2
#define storesvr_insert_record_tag               3
#define storesvr_insert_res_baseinfo_tag         1
#define storesvr_insert_res_opres_tag            2
#define storesvr_insertobj_baseinfo_tag          1
#define storesvr_insertobj_mod_key_tag           2
#define storesvr_insertobj_record_tag            3
#define storesvr_insertobj_res_baseinfo_tag      1
#define storesvr_insertobj_res_opres_tag         2
#define storesvr_mod_res_baseinfo_tag            1
#define storesvr_mod_res_opres_tag               2
#define storesvr_modobj_baseinfo_tag             1
#define storesvr_modobj_mod_key_tag              2
#define storesvr_modobj_record_tag               3
#define storesvr_modobj_res_baseinfo_tag         1
#define storesvr_modobj_res_opres_tag            2
#define storesvr_sel_res_baseinfo_tag            1
#define storesvr_sel_res_opres_tag               2
#define storesvr_sel_res_is_lastbatch_tag        3
#define storesvr_sel_res_row_count_tag           4
#define storesvr_sel_res_record_tag              5
#define storesvr_selobj_baseinfo_tag             1
#define storesvr_selobj_mod_key_tag              2
#define storesvr_selobj_record_tag               3
#define storesvr_selobj_res_baseinfo_tag         1
#define storesvr_selobj_res_opres_tag            2
#define storesvr_selobj_res_record_tag           3
#define storesvr_update_res_baseinfo_tag         1
#define storesvr_update_res_opres_tag            2
#define storesvr_updateobj_baseinfo_tag          1
#define storesvr_updateobj_mod_key_tag           2
#define storesvr_updateobj_record_tag            3
#define storesvr_updateobj_res_baseinfo_tag      1
#define storesvr_updateobj_res_opres_tag         2
#define storesvr_wherecond_mod_key_tag           1
#define storesvr_wherecond_where_conds_tag       2
#define storesvr_wherecond_where_additional_conds_tag 3
#define storesvr_wherecond_private_keys_tag      4
#define storesvr_del_baseinfo_tag                1
#define storesvr_del_cond_tag                    2
#define storesvr_mod_baseinfo_tag                1
#define storesvr_mod_cond_tag                    2
#define storesvr_mod_record_tag                  3
#define storesvr_sel_baseinfo_tag                1
#define storesvr_sel_cond_tag                    2
#define storesvr_update_baseinfo_tag             1
#define storesvr_update_cond_tag                 2
#define storesvr_update_record_tag               3

/* Struct field encoding specification for nanopb */

/* Maximum encoded size of messages (where known) */
#define storesvr_vk_size                         74
#define storesvr_wherecond_size                  157
#define storesvr_baseinfo_size                   177
#define storesvr_opres_size                      56
#define storesvr_sel_size                        340
#define storesvr_sel_res_size                    286
#define storesvr_selobj_size                     225
#define storesvr_selobj_res_size                 272
#define storesvr_insertobj_size                  225
#define storesvr_insertobj_res_size              238
#define storesvr_insert_size                     226
#define storesvr_insert_res_size                 238
#define storesvr_del_size                        340
#define storesvr_del_res_size                    238
#define storesvr_delobj_size                     225
#define storesvr_delobj_res_size                 238
#define storesvr_mod_size                        374
#define storesvr_mod_res_size                    238
#define storesvr_modobj_size                     225
#define storesvr_modobj_res_size                 238
#define storesvr_update_size                     374
#define storesvr_update_res_size                 238
#define storesvr_updateobj_size                  225
#define storesvr_updateobj_res_size              238
#define storesvr_execute_size                    225
#define storesvr_execute_res_size                272
#define storesvr_execute_more_size               225
#define storesvr_execute_more_res_size           286

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FRAMESQLDATA_MESSAGES \


#endif

/* @@protoc_insertion_point(eof) */

#endif
