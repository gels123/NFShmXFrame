// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nanopb.proto

#include "nanopb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_nanopb_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nanopb_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NanoPBOptions;
}  // namespace protobuf_nanopb_2eproto
class NanoPBOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NanoPBOptions>
      _instance;
} _NanoPBOptions_default_instance_;
namespace protobuf_nanopb_2eproto {
static void InitDefaultsNanoPBOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NanoPBOptions_default_instance_;
    new (ptr) ::NanoPBOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NanoPBOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NanoPBOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNanoPBOptions}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NanoPBOptions.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, max_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, int_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, long_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, packed_struct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, packed_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, skip_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, no_unions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, msgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, anonymous_oneof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, proto3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, enum_to_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, enum_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, fixed_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, fixed_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, max_count_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, max_size_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, macro_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, macro_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, field_cname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, include_files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, insert_msg_last_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, use_stl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, use_stl_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, use_stl_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, use_stl_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, is_stl_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, is_std_stl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, is_c_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, parse_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, time_to_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, time_to_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_max_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_max_size_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_not_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_auto_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_max_count_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_auto_increment_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_no_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, to_db_sql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, db_message_expand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, res_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, res_unique_ndex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, res_multi_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NanoPBOptions, res_relation_),
  16,
  29,
  17,
  23,
  18,
  19,
  20,
  21,
  22,
  25,
  24,
  26,
  27,
  28,
  6,
  30,
  31,
  0,
  1,
  2,
  3,
  7,
  4,
  5,
  34,
  8,
  32,
  9,
  33,
  36,
  37,
  35,
  38,
  39,
  48,
  41,
  10,
  43,
  44,
  42,
  11,
  47,
  45,
  12,
  46,
  40,
  49,
  13,
  14,
  15,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 55, sizeof(::NanoPBOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_NanoPBOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "nanopb.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014nanopb.proto\032 google/protobuf/descript"
      "or.proto\"\316\n\n\rNanoPBOptions\022\020\n\010max_size\030\001"
      " \001(\005\022\022\n\nmax_length\030\016 \001(\005\022\021\n\tmax_count\030\002 "
      "\001(\005\022&\n\010int_size\030\007 \001(\0162\010.IntSize:\nIS_DEFA"
      "ULT\022$\n\004type\030\003 \001(\0162\n.FieldType:\nFT_DEFAUL"
      "T\022\031\n\nlong_names\030\004 \001(\010:\005false\022\034\n\rpacked_s"
      "truct\030\005 \001(\010:\005false\022\032\n\013packed_enum\030\n \001(\010:"
      "\005false\022\033\n\014skip_message\030\006 \001(\010:\005false\022\030\n\tn"
      "o_unions\030\010 \001(\010:\005false\022\r\n\005msgid\030\t \001(\r\022\036\n\017"
      "anonymous_oneof\030\013 \001(\010:\005false\022\025\n\006proto3\030\014"
      " \001(\010:\005false\022\035\n\016enum_to_string\030\r \001(\010:\005fal"
      "se\022\021\n\tenum_name\030\027 \001(\t\022\033\n\014fixed_length\030\017 "
      "\001(\010:\005false\022\032\n\013fixed_count\030\020 \001(\010:\005false\022\026"
      "\n\016max_count_enum\030\021 \001(\t\022\025\n\rmax_size_enum\030"
      "\022 \001(\t\022\022\n\nmacro_type\030\023 \001(\t\022\022\n\nmacro_name\030"
      "\024 \001(\t\022\023\n\013field_cname\030\030 \001(\t\022\025\n\rinclude_fi"
      "les\030\025 \001(\t\022\027\n\017insert_msg_last\030\026 \001(\t\022\017\n\007us"
      "e_stl\030\036 \001(\005\022\024\n\014use_stl_enum\030\037 \001(\t\022\026\n\016use"
      "_stl_string\030  \001(\010\022\023\n\013use_stl_key\030! \001(\t\022\031"
      "\n\nis_stl_key\030\" \001(\010:\005false\022\022\n\nis_std_stl\030"
      "# \001(\010\022\027\n\010is_c_std\030$ \001(\010:\005false\0220\n\nparse_"
      "type\030% \001(\0162\017.FieldParseType:\013FPT_DEFAULT"
      "\022\023\n\013time_to_int\030( \001(\010\022\023\n\013time_to_str\030) \001"
      "(\010\0226\n\007db_type\0302 \001(\0162\020.enum_field_type:\023E"
      "_FIELD_TYPE_NORMAL\022\023\n\013db_max_size\0303 \001(\005\022"
      "\030\n\020db_max_size_enum\0304 \001(\t\022\032\n\013db_not_null"
      "\0305 \001(\010:\005false\022 \n\021db_auto_increment\0306 \001(\010"
      ":\005false\022\024\n\014db_max_count\0307 \001(\005\022\031\n\021db_max_"
      "count_enum\0308 \001(\t\022\"\n\027db_auto_increment_va"
      "lue\0309 \001(\005:\0010\022\032\n\013db_no_field\030: \001(\010:\005false"
      "\022\022\n\ndb_comment\030; \001(\t\022\030\n\tto_db_sql\030< \001(\010:"
      "\005false\022 \n\021db_message_expand\030= \001(\010:\005false"
      "\0227\n\010res_type\030F \001(\0162\020.enum_field_type:\023E_"
      "FIELD_TYPE_NORMAL\022\027\n\017res_unique_ndex\030G \001"
      "(\t\022\027\n\017res_multi_index\030H \001(\t\022\024\n\014res_relat"
      "ion\030I \001(\t*i\n\tFieldType\022\016\n\nFT_DEFAULT\020\000\022\017"
      "\n\013FT_CALLBACK\020\001\022\016\n\nFT_POINTER\020\004\022\r\n\tFT_ST"
      "ATIC\020\002\022\r\n\tFT_IGNORE\020\003\022\r\n\tFT_INLINE\020\005*D\n\007"
      "IntSize\022\016\n\nIS_DEFAULT\020\000\022\010\n\004IS_8\020\010\022\t\n\005IS_"
      "16\020\020\022\t\n\005IS_32\020 \022\t\n\005IS_64\020@*\313\002\n\007StlType\022\016"
      "\n\nSTL_VECTOR\020\000\022\014\n\010STL_LIST\020\001\022\025\n\021STL_UNOR"
      "DERED_MAP\020\002\022\033\n\027STL_MULTI_UNORDERED_MAP\020\003"
      "\022\032\n\026STL_UNORDERED_MAP_LIST\020\004\022 \n\034STL_MULT"
      "I_UNORDERED_MAP_LIST\020\005\022\025\n\021STL_UNORDERED_"
      "SET\020\006\022\033\n\027STL_MULTI_UNORDERED_SET\020\007\022\032\n\026ST"
      "L_UNORDERED_SET_LIST\020\010\022 \n\034STL_MULTI_UNOR"
      "DERED_SET_LIST\020\t\022\013\n\007STL_MAP\020\n\022\021\n\rSTL_MUL"
      "TI_MAP\020\013\022\013\n\007STL_SET\020\014\022\021\n\rSTL_MULTI_SET\020\r"
      "*\361\002\n\tFrameEnum\022\023\n\017FRAME_ENUM_NONE\020\000\022\025\n\021J"
      "SON_DESC_KEY_LEN\020@\022\032\n\025JSON_DESC_CONTENT_"
      "LEN\020\200\010\022\032\n\026MAX_STRING_LEN_DEFAULT\020 \022\025\n\021MA"
      "X_STRING_LEN_16\020\020\022\025\n\021MAX_STRING_LEN_32\020 "
      "\022\025\n\021MAX_STRING_LEN_64\020@\022\027\n\022MAX_STRING_LE"
      "N_128\020\200\001\022\027\n\022MAX_STRING_LEN_256\020\200\002\022\027\n\022MAX"
      "_STRING_LEN_512\020\200\004\022\030\n\023MAX_STRING_LEN_102"
      "4\020\200\010\022\030\n\023MAX_STRING_LEN_2048\020\200\020\022\030\n\023MAX_ST"
      "RING_LEN_4096\020\200 \022\036\n\032MAX_REPEATED_DEFAULT"
      "_COUNT\020\001\032\002\020\001*I\n\016FieldParseType\022\017\n\013FPT_DE"
      "FAULT\020\000\022\014\n\010FPT_JSON\020\001\022\013\n\007FPT_XML\020\002\022\013\n\007FP"
      "T_LUA\020\003*~\n\017enum_field_type\022\027\n\023E_FIELD_TY"
      "PE_NORMAL\020\001\022\033\n\027E_FIELD_TYPE_PRIMARYKEY\020\002"
      "\022\035\n\031E_FIELD_TYPE_UNIQUE_INDEX\020\003\022\026\n\022E_FIE"
      "LD_TYPE_INDEX\020\004:E\n\016nanopb_fileopt\022\034.goog"
      "le.protobuf.FileOptions\030\362\007 \001(\0132\016.NanoPBO"
      "ptions:G\n\rnanopb_msgopt\022\037.google.protobu"
      "f.MessageOptions\030\362\007 \001(\0132\016.NanoPBOptions:"
      "E\n\016nanopb_enumopt\022\034.google.protobuf.Enum"
      "Options\030\362\007 \001(\0132\016.NanoPBOptions:K\n\017nanopb"
      "_enumvopt\022!.google.protobuf.EnumValueOpt"
      "ions\030\362\007 \001(\0132\016.NanoPBOptions:>\n\006nanopb\022\035."
      "google.protobuf.FieldOptions\030\362\007 \001(\0132\016.Na"
      "noPBOptionsB\032\n\030fi.kapsi.koti.jpa.nanopb"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2879);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nanopb.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_nanopb_2eproto
const ::google::protobuf::EnumDescriptor* FieldType_descriptor() {
  protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nanopb_2eproto::file_level_enum_descriptors[0];
}
bool FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IntSize_descriptor() {
  protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nanopb_2eproto::file_level_enum_descriptors[1];
}
bool IntSize_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StlType_descriptor() {
  protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nanopb_2eproto::file_level_enum_descriptors[2];
}
bool StlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FrameEnum_descriptor() {
  protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nanopb_2eproto::file_level_enum_descriptors[3];
}
bool FrameEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FieldParseType_descriptor() {
  protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nanopb_2eproto::file_level_enum_descriptors[4];
}
bool FieldParseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enum_field_type_descriptor() {
  protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_nanopb_2eproto::file_level_enum_descriptors[5];
}
bool enum_field_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NanoPBOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NanoPBOptions::kMaxSizeFieldNumber;
const int NanoPBOptions::kMaxLengthFieldNumber;
const int NanoPBOptions::kMaxCountFieldNumber;
const int NanoPBOptions::kIntSizeFieldNumber;
const int NanoPBOptions::kTypeFieldNumber;
const int NanoPBOptions::kLongNamesFieldNumber;
const int NanoPBOptions::kPackedStructFieldNumber;
const int NanoPBOptions::kPackedEnumFieldNumber;
const int NanoPBOptions::kSkipMessageFieldNumber;
const int NanoPBOptions::kNoUnionsFieldNumber;
const int NanoPBOptions::kMsgidFieldNumber;
const int NanoPBOptions::kAnonymousOneofFieldNumber;
const int NanoPBOptions::kProto3FieldNumber;
const int NanoPBOptions::kEnumToStringFieldNumber;
const int NanoPBOptions::kEnumNameFieldNumber;
const int NanoPBOptions::kFixedLengthFieldNumber;
const int NanoPBOptions::kFixedCountFieldNumber;
const int NanoPBOptions::kMaxCountEnumFieldNumber;
const int NanoPBOptions::kMaxSizeEnumFieldNumber;
const int NanoPBOptions::kMacroTypeFieldNumber;
const int NanoPBOptions::kMacroNameFieldNumber;
const int NanoPBOptions::kFieldCnameFieldNumber;
const int NanoPBOptions::kIncludeFilesFieldNumber;
const int NanoPBOptions::kInsertMsgLastFieldNumber;
const int NanoPBOptions::kUseStlFieldNumber;
const int NanoPBOptions::kUseStlEnumFieldNumber;
const int NanoPBOptions::kUseStlStringFieldNumber;
const int NanoPBOptions::kUseStlKeyFieldNumber;
const int NanoPBOptions::kIsStlKeyFieldNumber;
const int NanoPBOptions::kIsStdStlFieldNumber;
const int NanoPBOptions::kIsCStdFieldNumber;
const int NanoPBOptions::kParseTypeFieldNumber;
const int NanoPBOptions::kTimeToIntFieldNumber;
const int NanoPBOptions::kTimeToStrFieldNumber;
const int NanoPBOptions::kDbTypeFieldNumber;
const int NanoPBOptions::kDbMaxSizeFieldNumber;
const int NanoPBOptions::kDbMaxSizeEnumFieldNumber;
const int NanoPBOptions::kDbNotNullFieldNumber;
const int NanoPBOptions::kDbAutoIncrementFieldNumber;
const int NanoPBOptions::kDbMaxCountFieldNumber;
const int NanoPBOptions::kDbMaxCountEnumFieldNumber;
const int NanoPBOptions::kDbAutoIncrementValueFieldNumber;
const int NanoPBOptions::kDbNoFieldFieldNumber;
const int NanoPBOptions::kDbCommentFieldNumber;
const int NanoPBOptions::kToDbSqlFieldNumber;
const int NanoPBOptions::kDbMessageExpandFieldNumber;
const int NanoPBOptions::kResTypeFieldNumber;
const int NanoPBOptions::kResUniqueNdexFieldNumber;
const int NanoPBOptions::kResMultiIndexFieldNumber;
const int NanoPBOptions::kResRelationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NanoPBOptions::NanoPBOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_nanopb_2eproto::scc_info_NanoPBOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NanoPBOptions)
}
NanoPBOptions::NanoPBOptions(const NanoPBOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_count_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_max_count_enum()) {
    max_count_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_count_enum_);
  }
  max_size_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_max_size_enum()) {
    max_size_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_size_enum_);
  }
  macro_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macro_type()) {
    macro_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macro_type_);
  }
  macro_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_macro_name()) {
    macro_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macro_name_);
  }
  include_files_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_include_files()) {
    include_files_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.include_files_);
  }
  insert_msg_last_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_insert_msg_last()) {
    insert_msg_last_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_msg_last_);
  }
  enum_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enum_name()) {
    enum_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enum_name_);
  }
  field_cname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field_cname()) {
    field_cname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_cname_);
  }
  use_stl_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_use_stl_enum()) {
    use_stl_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.use_stl_enum_);
  }
  use_stl_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_use_stl_key()) {
    use_stl_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.use_stl_key_);
  }
  db_max_size_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_max_size_enum()) {
    db_max_size_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_max_size_enum_);
  }
  db_max_count_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_max_count_enum()) {
    db_max_count_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_max_count_enum_);
  }
  db_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_comment()) {
    db_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_comment_);
  }
  res_unique_ndex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_res_unique_ndex()) {
    res_unique_ndex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_unique_ndex_);
  }
  res_multi_index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_res_multi_index()) {
    res_multi_index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_multi_index_);
  }
  res_relation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_res_relation()) {
    res_relation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_relation_);
  }
  ::memcpy(&max_size_, &from.max_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_type_) -
    reinterpret_cast<char*>(&max_size_)) + sizeof(res_type_));
  // @@protoc_insertion_point(copy_constructor:NanoPBOptions)
}

void NanoPBOptions::SharedCtor() {
  max_count_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macro_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macro_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  include_files_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_msg_last_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enum_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_cname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_stl_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_stl_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_max_size_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_max_count_enum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_unique_ndex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_multi_index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_relation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&db_auto_increment_value_) -
      reinterpret_cast<char*>(&max_size_)) + sizeof(db_auto_increment_value_));
  db_type_ = 1;
  res_type_ = 1;
}

NanoPBOptions::~NanoPBOptions() {
  // @@protoc_insertion_point(destructor:NanoPBOptions)
  SharedDtor();
}

void NanoPBOptions::SharedDtor() {
  max_count_enum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_size_enum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macro_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macro_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  include_files_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  insert_msg_last_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enum_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_cname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_stl_enum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_stl_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_max_size_enum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_max_count_enum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_unique_ndex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_multi_index_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  res_relation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NanoPBOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NanoPBOptions::descriptor() {
  ::protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nanopb_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NanoPBOptions& NanoPBOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_nanopb_2eproto::scc_info_NanoPBOptions.base);
  return *internal_default_instance();
}


void NanoPBOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:NanoPBOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_count_enum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      max_size_enum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      macro_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      macro_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      include_files_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      insert_msg_last_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      enum_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      field_cname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      use_stl_enum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      use_stl_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      db_max_size_enum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      db_max_count_enum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      db_comment_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      res_unique_ndex_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      res_multi_index_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00008000u) {
      res_relation_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&max_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int_size_) -
        reinterpret_cast<char*>(&max_size_)) + sizeof(int_size_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&msgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed_count_) -
        reinterpret_cast<char*>(&msgid_)) + sizeof(fixed_count_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&use_stl_string_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_to_str_) -
        reinterpret_cast<char*>(&use_stl_string_)) + sizeof(time_to_str_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&db_message_expand_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&db_auto_increment_value_) -
        reinterpret_cast<char*>(&db_message_expand_)) + sizeof(db_auto_increment_value_));
  }
  if (cached_has_bits & 196608u) {
    db_type_ = 1;
    res_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NanoPBOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NanoPBOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .FieldType type = 3 [default = FT_DEFAULT];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FieldType_IsValid(value)) {
            set_type(static_cast< ::FieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool long_names = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_long_names();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &long_names_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool packed_struct = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_packed_struct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &packed_struct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_message = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_skip_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .IntSize int_size = 7 [default = IS_DEFAULT];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IntSize_IsValid(value)) {
            set_int_size(static_cast< ::IntSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_unions = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_no_unions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_unions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msgid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_msgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool packed_enum = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_packed_enum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &packed_enum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool anonymous_oneof = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_anonymous_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &anonymous_oneof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool proto3 = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_proto3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proto3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enum_to_string = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_enum_to_string();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enum_to_string_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_length = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fixed_length = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_fixed_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixed_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fixed_count = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_fixed_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string max_count_enum = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_count_enum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_count_enum().data(), static_cast<int>(this->max_count_enum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.max_count_enum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string max_size_enum = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_size_enum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_size_enum().data(), static_cast<int>(this->max_size_enum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.max_size_enum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macro_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macro_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macro_type().data(), static_cast<int>(this->macro_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.macro_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string macro_name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macro_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macro_name().data(), static_cast<int>(this->macro_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.macro_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string include_files = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_include_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->include_files().data(), static_cast<int>(this->include_files().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.include_files");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string insert_msg_last = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insert_msg_last()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->insert_msg_last().data(), static_cast<int>(this->insert_msg_last().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.insert_msg_last");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string enum_name = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enum_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enum_name().data(), static_cast<int>(this->enum_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.enum_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string field_cname = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_cname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_cname().data(), static_cast<int>(this->field_cname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.field_cname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 use_stl = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_use_stl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_stl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string use_stl_enum = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_use_stl_enum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->use_stl_enum().data(), static_cast<int>(this->use_stl_enum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.use_stl_enum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_stl_string = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_use_stl_string();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_stl_string_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string use_stl_key = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_use_stl_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->use_stl_key().data(), static_cast<int>(this->use_stl_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.use_stl_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stl_key = 34 [default = false];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_is_stl_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stl_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_std_stl = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_is_std_stl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_std_stl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_c_std = 36 [default = false];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_is_c_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_c_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .FieldParseType parse_type = 37 [default = FPT_DEFAULT];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FieldParseType_IsValid(value)) {
            set_parse_type(static_cast< ::FieldParseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool time_to_int = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          set_has_time_to_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &time_to_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool time_to_str = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_time_to_str();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &time_to_str_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enum_field_type db_type = 50 [default = E_FIELD_TYPE_NORMAL];
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enum_field_type_IsValid(value)) {
            set_db_type(static_cast< ::enum_field_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                50, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 db_max_size = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_db_max_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_max_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_max_size_enum = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_max_size_enum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_max_size_enum().data(), static_cast<int>(this->db_max_size_enum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.db_max_size_enum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool db_not_null = 53 [default = false];
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_db_not_null();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &db_not_null_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool db_auto_increment = 54 [default = false];
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_db_auto_increment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &db_auto_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 db_max_count = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_db_max_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_max_count_enum = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_max_count_enum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_max_count_enum().data(), static_cast<int>(this->db_max_count_enum().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.db_max_count_enum");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 db_auto_increment_value = 57 [default = 0];
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_db_auto_increment_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_auto_increment_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool db_no_field = 58 [default = false];
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_db_no_field();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &db_no_field_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_comment = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_comment().data(), static_cast<int>(this->db_comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.db_comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool to_db_sql = 60 [default = false];
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_to_db_sql();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_db_sql_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool db_message_expand = 61 [default = false];
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_db_message_expand();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &db_message_expand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enum_field_type res_type = 70 [default = E_FIELD_TYPE_NORMAL];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enum_field_type_IsValid(value)) {
            set_res_type(static_cast< ::enum_field_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                70, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string res_unique_ndex = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_unique_ndex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_unique_ndex().data(), static_cast<int>(this->res_unique_ndex().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.res_unique_ndex");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string res_multi_index = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 578 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_multi_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_multi_index().data(), static_cast<int>(this->res_multi_index().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.res_multi_index");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string res_relation = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 586 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_relation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->res_relation().data(), static_cast<int>(this->res_relation().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NanoPBOptions.res_relation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NanoPBOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NanoPBOptions)
  return false;
#undef DO_
}

void NanoPBOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NanoPBOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_size = 1;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_size(), output);
  }

  // optional int32 max_count = 2;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_count(), output);
  }

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional bool long_names = 4 [default = false];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->long_names(), output);
  }

  // optional bool packed_struct = 5 [default = false];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->packed_struct(), output);
  }

  // optional bool skip_message = 6 [default = false];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->skip_message(), output);
  }

  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->int_size(), output);
  }

  // optional bool no_unions = 8 [default = false];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->no_unions(), output);
  }

  // optional uint32 msgid = 9;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->msgid(), output);
  }

  // optional bool packed_enum = 10 [default = false];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->packed_enum(), output);
  }

  // optional bool anonymous_oneof = 11 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->anonymous_oneof(), output);
  }

  // optional bool proto3 = 12 [default = false];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->proto3(), output);
  }

  // optional bool enum_to_string = 13 [default = false];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->enum_to_string(), output);
  }

  // optional int32 max_length = 14;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_length(), output);
  }

  // optional bool fixed_length = 15 [default = false];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fixed_length(), output);
  }

  // optional bool fixed_count = 16 [default = false];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->fixed_count(), output);
  }

  // optional string max_count_enum = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_count_enum().data(), static_cast<int>(this->max_count_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.max_count_enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->max_count_enum(), output);
  }

  // optional string max_size_enum = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_size_enum().data(), static_cast<int>(this->max_size_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.max_size_enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->max_size_enum(), output);
  }

  // optional string macro_type = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macro_type().data(), static_cast<int>(this->macro_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.macro_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->macro_type(), output);
  }

  // optional string macro_name = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macro_name().data(), static_cast<int>(this->macro_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.macro_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->macro_name(), output);
  }

  // optional string include_files = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->include_files().data(), static_cast<int>(this->include_files().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.include_files");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->include_files(), output);
  }

  // optional string insert_msg_last = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_msg_last().data(), static_cast<int>(this->insert_msg_last().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.insert_msg_last");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->insert_msg_last(), output);
  }

  // optional string enum_name = 23;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_name().data(), static_cast<int>(this->enum_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.enum_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->enum_name(), output);
  }

  // optional string field_cname = 24;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_cname().data(), static_cast<int>(this->field_cname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.field_cname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->field_cname(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 use_stl = 30;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->use_stl(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string use_stl_enum = 31;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->use_stl_enum().data(), static_cast<int>(this->use_stl_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.use_stl_enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->use_stl_enum(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_stl_string = 32;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->use_stl_string(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string use_stl_key = 33;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->use_stl_key().data(), static_cast<int>(this->use_stl_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.use_stl_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->use_stl_key(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_stl_key = 34 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->is_stl_key(), output);
  }

  // optional bool is_std_stl = 35;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->is_std_stl(), output);
  }

  // optional bool is_c_std = 36 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->is_c_std(), output);
  }

  // optional .FieldParseType parse_type = 37 [default = FPT_DEFAULT];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->parse_type(), output);
  }

  // optional bool time_to_int = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->time_to_int(), output);
  }

  // optional bool time_to_str = 41;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->time_to_str(), output);
  }

  // optional .enum_field_type db_type = 50 [default = E_FIELD_TYPE_NORMAL];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->db_type(), output);
  }

  // optional int32 db_max_size = 51;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->db_max_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string db_max_size_enum = 52;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_max_size_enum().data(), static_cast<int>(this->db_max_size_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.db_max_size_enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->db_max_size_enum(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool db_not_null = 53 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->db_not_null(), output);
  }

  // optional bool db_auto_increment = 54 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->db_auto_increment(), output);
  }

  // optional int32 db_max_count = 55;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->db_max_count(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string db_max_count_enum = 56;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_max_count_enum().data(), static_cast<int>(this->db_max_count_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.db_max_count_enum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      56, this->db_max_count_enum(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 db_auto_increment_value = 57 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->db_auto_increment_value(), output);
  }

  // optional bool db_no_field = 58 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->db_no_field(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string db_comment = 59;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_comment().data(), static_cast<int>(this->db_comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.db_comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->db_comment(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool to_db_sql = 60 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->to_db_sql(), output);
  }

  // optional bool db_message_expand = 61 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->db_message_expand(), output);
  }

  // optional .enum_field_type res_type = 70 [default = E_FIELD_TYPE_NORMAL];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      70, this->res_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string res_unique_ndex = 71;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_unique_ndex().data(), static_cast<int>(this->res_unique_ndex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.res_unique_ndex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      71, this->res_unique_ndex(), output);
  }

  // optional string res_multi_index = 72;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_multi_index().data(), static_cast<int>(this->res_multi_index().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.res_multi_index");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      72, this->res_multi_index(), output);
  }

  // optional string res_relation = 73;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_relation().data(), static_cast<int>(this->res_relation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.res_relation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      73, this->res_relation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NanoPBOptions)
}

::google::protobuf::uint8* NanoPBOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NanoPBOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_size = 1;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_size(), target);
  }

  // optional int32 max_count = 2;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_count(), target);
  }

  // optional .FieldType type = 3 [default = FT_DEFAULT];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional bool long_names = 4 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->long_names(), target);
  }

  // optional bool packed_struct = 5 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->packed_struct(), target);
  }

  // optional bool skip_message = 6 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->skip_message(), target);
  }

  // optional .IntSize int_size = 7 [default = IS_DEFAULT];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->int_size(), target);
  }

  // optional bool no_unions = 8 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->no_unions(), target);
  }

  // optional uint32 msgid = 9;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->msgid(), target);
  }

  // optional bool packed_enum = 10 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->packed_enum(), target);
  }

  // optional bool anonymous_oneof = 11 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->anonymous_oneof(), target);
  }

  // optional bool proto3 = 12 [default = false];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->proto3(), target);
  }

  // optional bool enum_to_string = 13 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->enum_to_string(), target);
  }

  // optional int32 max_length = 14;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_length(), target);
  }

  // optional bool fixed_length = 15 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fixed_length(), target);
  }

  // optional bool fixed_count = 16 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->fixed_count(), target);
  }

  // optional string max_count_enum = 17;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_count_enum().data(), static_cast<int>(this->max_count_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.max_count_enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->max_count_enum(), target);
  }

  // optional string max_size_enum = 18;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_size_enum().data(), static_cast<int>(this->max_size_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.max_size_enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->max_size_enum(), target);
  }

  // optional string macro_type = 19;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macro_type().data(), static_cast<int>(this->macro_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.macro_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->macro_type(), target);
  }

  // optional string macro_name = 20;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macro_name().data(), static_cast<int>(this->macro_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.macro_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->macro_name(), target);
  }

  // optional string include_files = 21;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->include_files().data(), static_cast<int>(this->include_files().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.include_files");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->include_files(), target);
  }

  // optional string insert_msg_last = 22;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->insert_msg_last().data(), static_cast<int>(this->insert_msg_last().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.insert_msg_last");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->insert_msg_last(), target);
  }

  // optional string enum_name = 23;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enum_name().data(), static_cast<int>(this->enum_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.enum_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->enum_name(), target);
  }

  // optional string field_cname = 24;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_cname().data(), static_cast<int>(this->field_cname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.field_cname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->field_cname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 use_stl = 30;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->use_stl(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string use_stl_enum = 31;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->use_stl_enum().data(), static_cast<int>(this->use_stl_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.use_stl_enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->use_stl_enum(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_stl_string = 32;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->use_stl_string(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string use_stl_key = 33;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->use_stl_key().data(), static_cast<int>(this->use_stl_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.use_stl_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->use_stl_key(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_stl_key = 34 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->is_stl_key(), target);
  }

  // optional bool is_std_stl = 35;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->is_std_stl(), target);
  }

  // optional bool is_c_std = 36 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->is_c_std(), target);
  }

  // optional .FieldParseType parse_type = 37 [default = FPT_DEFAULT];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->parse_type(), target);
  }

  // optional bool time_to_int = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->time_to_int(), target);
  }

  // optional bool time_to_str = 41;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->time_to_str(), target);
  }

  // optional .enum_field_type db_type = 50 [default = E_FIELD_TYPE_NORMAL];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->db_type(), target);
  }

  // optional int32 db_max_size = 51;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->db_max_size(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string db_max_size_enum = 52;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_max_size_enum().data(), static_cast<int>(this->db_max_size_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.db_max_size_enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->db_max_size_enum(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool db_not_null = 53 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->db_not_null(), target);
  }

  // optional bool db_auto_increment = 54 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->db_auto_increment(), target);
  }

  // optional int32 db_max_count = 55;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->db_max_count(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string db_max_count_enum = 56;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_max_count_enum().data(), static_cast<int>(this->db_max_count_enum().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.db_max_count_enum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->db_max_count_enum(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 db_auto_increment_value = 57 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->db_auto_increment_value(), target);
  }

  // optional bool db_no_field = 58 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->db_no_field(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string db_comment = 59;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_comment().data(), static_cast<int>(this->db_comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.db_comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->db_comment(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool to_db_sql = 60 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->to_db_sql(), target);
  }

  // optional bool db_message_expand = 61 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->db_message_expand(), target);
  }

  // optional .enum_field_type res_type = 70 [default = E_FIELD_TYPE_NORMAL];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      70, this->res_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string res_unique_ndex = 71;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_unique_ndex().data(), static_cast<int>(this->res_unique_ndex().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.res_unique_ndex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        71, this->res_unique_ndex(), target);
  }

  // optional string res_multi_index = 72;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_multi_index().data(), static_cast<int>(this->res_multi_index().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.res_multi_index");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        72, this->res_multi_index(), target);
  }

  // optional string res_relation = 73;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->res_relation().data(), static_cast<int>(this->res_relation().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NanoPBOptions.res_relation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        73, this->res_relation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NanoPBOptions)
  return target;
}

size_t NanoPBOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NanoPBOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string max_count_enum = 17;
    if (has_max_count_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_count_enum());
    }

    // optional string max_size_enum = 18;
    if (has_max_size_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_size_enum());
    }

    // optional string macro_type = 19;
    if (has_macro_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macro_type());
    }

    // optional string macro_name = 20;
    if (has_macro_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macro_name());
    }

    // optional string include_files = 21;
    if (has_include_files()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->include_files());
    }

    // optional string insert_msg_last = 22;
    if (has_insert_msg_last()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insert_msg_last());
    }

    // optional string enum_name = 23;
    if (has_enum_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enum_name());
    }

    // optional string field_cname = 24;
    if (has_field_cname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_cname());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string use_stl_enum = 31;
    if (has_use_stl_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->use_stl_enum());
    }

    // optional string use_stl_key = 33;
    if (has_use_stl_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->use_stl_key());
    }

    // optional string db_max_size_enum = 52;
    if (has_db_max_size_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_max_size_enum());
    }

    // optional string db_max_count_enum = 56;
    if (has_db_max_count_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_max_count_enum());
    }

    // optional string db_comment = 59;
    if (has_db_comment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_comment());
    }

    // optional string res_unique_ndex = 71;
    if (has_res_unique_ndex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_unique_ndex());
    }

    // optional string res_multi_index = 72;
    if (has_res_multi_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_multi_index());
    }

    // optional string res_relation = 73;
    if (has_res_relation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_relation());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 max_size = 1;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }

    // optional int32 max_count = 2;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

    // optional .FieldType type = 3 [default = FT_DEFAULT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool long_names = 4 [default = false];
    if (has_long_names()) {
      total_size += 1 + 1;
    }

    // optional bool packed_struct = 5 [default = false];
    if (has_packed_struct()) {
      total_size += 1 + 1;
    }

    // optional bool packed_enum = 10 [default = false];
    if (has_packed_enum()) {
      total_size += 1 + 1;
    }

    // optional bool skip_message = 6 [default = false];
    if (has_skip_message()) {
      total_size += 1 + 1;
    }

    // optional .IntSize int_size = 7 [default = IS_DEFAULT];
    if (has_int_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->int_size());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 msgid = 9;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional bool no_unions = 8 [default = false];
    if (has_no_unions()) {
      total_size += 1 + 1;
    }

    // optional bool anonymous_oneof = 11 [default = false];
    if (has_anonymous_oneof()) {
      total_size += 1 + 1;
    }

    // optional bool proto3 = 12 [default = false];
    if (has_proto3()) {
      total_size += 1 + 1;
    }

    // optional bool enum_to_string = 13 [default = false];
    if (has_enum_to_string()) {
      total_size += 1 + 1;
    }

    // optional int32 max_length = 14;
    if (has_max_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_length());
    }

    // optional bool fixed_length = 15 [default = false];
    if (has_fixed_length()) {
      total_size += 1 + 1;
    }

    // optional bool fixed_count = 16 [default = false];
    if (has_fixed_count()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool use_stl_string = 32;
    if (has_use_stl_string()) {
      total_size += 2 + 1;
    }

    // optional bool is_stl_key = 34 [default = false];
    if (has_is_stl_key()) {
      total_size += 2 + 1;
    }

    // optional int32 use_stl = 30;
    if (has_use_stl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_stl());
    }

    // optional .FieldParseType parse_type = 37 [default = FPT_DEFAULT];
    if (has_parse_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parse_type());
    }

    // optional bool is_std_stl = 35;
    if (has_is_std_stl()) {
      total_size += 2 + 1;
    }

    // optional bool is_c_std = 36 [default = false];
    if (has_is_c_std()) {
      total_size += 2 + 1;
    }

    // optional bool time_to_int = 40;
    if (has_time_to_int()) {
      total_size += 2 + 1;
    }

    // optional bool time_to_str = 41;
    if (has_time_to_str()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool db_message_expand = 61 [default = false];
    if (has_db_message_expand()) {
      total_size += 2 + 1;
    }

    // optional int32 db_max_size = 51;
    if (has_db_max_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_max_size());
    }

    // optional int32 db_max_count = 55;
    if (has_db_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_max_count());
    }

    // optional bool db_not_null = 53 [default = false];
    if (has_db_not_null()) {
      total_size += 2 + 1;
    }

    // optional bool db_auto_increment = 54 [default = false];
    if (has_db_auto_increment()) {
      total_size += 2 + 1;
    }

    // optional bool db_no_field = 58 [default = false];
    if (has_db_no_field()) {
      total_size += 2 + 1;
    }

    // optional bool to_db_sql = 60 [default = false];
    if (has_to_db_sql()) {
      total_size += 2 + 1;
    }

    // optional int32 db_auto_increment_value = 57 [default = 0];
    if (has_db_auto_increment_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_auto_increment_value());
    }

  }
  if (_has_bits_[48 / 32] & 196608u) {
    // optional .enum_field_type db_type = 50 [default = E_FIELD_TYPE_NORMAL];
    if (has_db_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->db_type());
    }

    // optional .enum_field_type res_type = 70 [default = E_FIELD_TYPE_NORMAL];
    if (has_res_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NanoPBOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NanoPBOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const NanoPBOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NanoPBOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NanoPBOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NanoPBOptions)
    MergeFrom(*source);
  }
}

void NanoPBOptions::MergeFrom(const NanoPBOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NanoPBOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_max_count_enum();
      max_count_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_count_enum_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_max_size_enum();
      max_size_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_size_enum_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_macro_type();
      macro_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macro_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_macro_name();
      macro_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macro_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_include_files();
      include_files_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.include_files_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_insert_msg_last();
      insert_msg_last_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.insert_msg_last_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_enum_name();
      enum_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enum_name_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_field_cname();
      field_cname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_cname_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_use_stl_enum();
      use_stl_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.use_stl_enum_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_use_stl_key();
      use_stl_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.use_stl_key_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_db_max_size_enum();
      db_max_size_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_max_size_enum_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_db_max_count_enum();
      db_max_count_enum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_max_count_enum_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_db_comment();
      db_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_comment_);
    }
    if (cached_has_bits & 0x00002000u) {
      set_has_res_unique_ndex();
      res_unique_ndex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_unique_ndex_);
    }
    if (cached_has_bits & 0x00004000u) {
      set_has_res_multi_index();
      res_multi_index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_multi_index_);
    }
    if (cached_has_bits & 0x00008000u) {
      set_has_res_relation();
      res_relation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.res_relation_);
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      max_size_ = from.max_size_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_count_ = from.max_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00080000u) {
      long_names_ = from.long_names_;
    }
    if (cached_has_bits & 0x00100000u) {
      packed_struct_ = from.packed_struct_;
    }
    if (cached_has_bits & 0x00200000u) {
      packed_enum_ = from.packed_enum_;
    }
    if (cached_has_bits & 0x00400000u) {
      skip_message_ = from.skip_message_;
    }
    if (cached_has_bits & 0x00800000u) {
      int_size_ = from.int_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x02000000u) {
      no_unions_ = from.no_unions_;
    }
    if (cached_has_bits & 0x04000000u) {
      anonymous_oneof_ = from.anonymous_oneof_;
    }
    if (cached_has_bits & 0x08000000u) {
      proto3_ = from.proto3_;
    }
    if (cached_has_bits & 0x10000000u) {
      enum_to_string_ = from.enum_to_string_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_length_ = from.max_length_;
    }
    if (cached_has_bits & 0x40000000u) {
      fixed_length_ = from.fixed_length_;
    }
    if (cached_has_bits & 0x80000000u) {
      fixed_count_ = from.fixed_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      use_stl_string_ = from.use_stl_string_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_stl_key_ = from.is_stl_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_stl_ = from.use_stl_;
    }
    if (cached_has_bits & 0x00000008u) {
      parse_type_ = from.parse_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_std_stl_ = from.is_std_stl_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_c_std_ = from.is_c_std_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_to_int_ = from.time_to_int_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_to_str_ = from.time_to_str_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      db_message_expand_ = from.db_message_expand_;
    }
    if (cached_has_bits & 0x00000200u) {
      db_max_size_ = from.db_max_size_;
    }
    if (cached_has_bits & 0x00000400u) {
      db_max_count_ = from.db_max_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      db_not_null_ = from.db_not_null_;
    }
    if (cached_has_bits & 0x00001000u) {
      db_auto_increment_ = from.db_auto_increment_;
    }
    if (cached_has_bits & 0x00002000u) {
      db_no_field_ = from.db_no_field_;
    }
    if (cached_has_bits & 0x00004000u) {
      to_db_sql_ = from.to_db_sql_;
    }
    if (cached_has_bits & 0x00008000u) {
      db_auto_increment_value_ = from.db_auto_increment_value_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      db_type_ = from.db_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      res_type_ = from.res_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void NanoPBOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NanoPBOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NanoPBOptions::CopyFrom(const NanoPBOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NanoPBOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NanoPBOptions::IsInitialized() const {
  return true;
}

void NanoPBOptions::Swap(NanoPBOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NanoPBOptions::InternalSwap(NanoPBOptions* other) {
  using std::swap;
  max_count_enum_.Swap(&other->max_count_enum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  max_size_enum_.Swap(&other->max_size_enum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  macro_type_.Swap(&other->macro_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  macro_name_.Swap(&other->macro_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  include_files_.Swap(&other->include_files_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  insert_msg_last_.Swap(&other->insert_msg_last_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  enum_name_.Swap(&other->enum_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  field_cname_.Swap(&other->field_cname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_stl_enum_.Swap(&other->use_stl_enum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  use_stl_key_.Swap(&other->use_stl_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_max_size_enum_.Swap(&other->db_max_size_enum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_max_count_enum_.Swap(&other->db_max_count_enum_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_comment_.Swap(&other->db_comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  res_unique_ndex_.Swap(&other->res_unique_ndex_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  res_multi_index_.Swap(&other->res_multi_index_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  res_relation_.Swap(&other->res_relation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_size_, other->max_size_);
  swap(max_count_, other->max_count_);
  swap(type_, other->type_);
  swap(long_names_, other->long_names_);
  swap(packed_struct_, other->packed_struct_);
  swap(packed_enum_, other->packed_enum_);
  swap(skip_message_, other->skip_message_);
  swap(int_size_, other->int_size_);
  swap(msgid_, other->msgid_);
  swap(no_unions_, other->no_unions_);
  swap(anonymous_oneof_, other->anonymous_oneof_);
  swap(proto3_, other->proto3_);
  swap(enum_to_string_, other->enum_to_string_);
  swap(max_length_, other->max_length_);
  swap(fixed_length_, other->fixed_length_);
  swap(fixed_count_, other->fixed_count_);
  swap(use_stl_string_, other->use_stl_string_);
  swap(is_stl_key_, other->is_stl_key_);
  swap(use_stl_, other->use_stl_);
  swap(parse_type_, other->parse_type_);
  swap(is_std_stl_, other->is_std_stl_);
  swap(is_c_std_, other->is_c_std_);
  swap(time_to_int_, other->time_to_int_);
  swap(time_to_str_, other->time_to_str_);
  swap(db_message_expand_, other->db_message_expand_);
  swap(db_max_size_, other->db_max_size_);
  swap(db_max_count_, other->db_max_count_);
  swap(db_not_null_, other->db_not_null_);
  swap(db_auto_increment_, other->db_auto_increment_);
  swap(db_no_field_, other->db_no_field_);
  swap(to_db_sql_, other->to_db_sql_);
  swap(db_auto_increment_value_, other->db_auto_increment_value_);
  swap(db_type_, other->db_type_);
  swap(res_type_, other->res_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NanoPBOptions::GetMetadata() const {
  protobuf_nanopb_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_nanopb_2eproto::file_level_metadata[kIndexInFileMessages];
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_fileopt(kNanopbFileoptFieldNumber, *::NanoPBOptions::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_msgopt(kNanopbMsgoptFieldNumber, *::NanoPBOptions::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_enumopt(kNanopbEnumoptFieldNumber, *::NanoPBOptions::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb_enumvopt(kNanopbEnumvoptFieldNumber, *::NanoPBOptions::internal_default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::MessageTypeTraits< ::NanoPBOptions >, 11, false >
  nanopb(kNanopbFieldNumber, *::NanoPBOptions::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NanoPBOptions* Arena::CreateMaybeMessage< ::NanoPBOptions >(Arena* arena) {
  return Arena::CreateInternal< ::NanoPBOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
