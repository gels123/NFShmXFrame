/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 */

#ifndef PB_NFRAME_FRAMETEST_NANOPB_H_INCLUDED
#define PB_NFRAME_FRAMETEST_NANOPB_H_INCLUDED
#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <NFComm/NFCore/NFHash.hpp>
#include "NFComm/NFShmStl/NFShmHashMap.h"
#include "NFComm/NFShmStl/NFShmHashMultiMap.h"
#include "NFComm/NFShmStl/NFShmHashMapWithList.h"
#include "NFComm/NFShmStl/NFShmHashSet.h"
#include "NFComm/NFShmStl/NFShmHashMultiSet.h"
#include "NFComm/NFShmStl/NFShmHashSetWithList.h"
#include <pb.h>

#include "FrameTest.pb.h"
#include "FrameTestEnum.nanopb.h"

#include "FrameTestComm.nanopb.h"


/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
struct wxWorkRobotTextMore {
    NFShmHashMap<uint32_t, wxWorkRobotTextTest,FRAME_ENUM_DEFAULT_REPEATED> test_map;
    NFShmHashSet<wxWorkRobotTextTest,FRAME_ENUM_DEFAULT_REPEATED> test_set;

	wxWorkRobotTextMore();
	~wxWorkRobotTextMore();
	wxWorkRobotTextMore(const wxWorkRobotTextMore& stArgsData);
	wxWorkRobotTextMore& operator=(const wxWorkRobotTextMore& stArgsData);
	void CopyData(const wxWorkRobotTextMore& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFrame::wxWorkRobotTextMore& cc);
    void ToPb(NFrame::wxWorkRobotTextMore* cc) const;
    NFrame::wxWorkRobotTextMore ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:wxWorkRobotTextMore) */
};

/* Field tags (for use in manual encoding/decoding) */
#define wxWorkRobotTextMore_test_map_tag         1
#define wxWorkRobotTextMore_test_set_tag         2

/* Struct field encoding specification for nanopb */

/* Maximum encoded size of messages (where known) */
#define wxWorkRobotTextMore_size                 7040

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FRAMETEST_MESSAGES \


#endif

/* @@protoc_insertion_point(eof) */

#endif
