/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9 */

#include <sstream>
#include "NFComm/NFObjCommon/NFShmMgr.h"
#include "FrameBehavior.nanopb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

BevLogBaseInfo::BevLogBaseInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

BevLogBaseInfo::~BevLogBaseInfo()
{
}

BevLogBaseInfo::BevLogBaseInfo(const BevLogBaseInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

BevLogBaseInfo& BevLogBaseInfo::operator=(const BevLogBaseInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void BevLogBaseInfo::CopyData(const BevLogBaseInfo& stArgsData)
{
    szGameSvrId = stArgsData.szGameSvrId;
    tDtEventTime = stArgsData.tDtEventTime;
    szVGameAppid = stArgsData.szVGameAppid;
    iPlatID = stArgsData.iPlatID;
    iIZoneAreaID = stArgsData.iIZoneAreaID;
    szVopenid = stArgsData.szVopenid;
}

int BevLogBaseInfo::CreateInit()
{
    tDtEventTime = 0;
    iPlatID = 0;
    iIZoneAreaID = 0;
	return 0;
}

int BevLogBaseInfo::ResumeInit()
{
	return 0;
}

void BevLogBaseInfo::Init()
{
    szGameSvrId.Init();
    tDtEventTime = 0;
    szVGameAppid.Init();
    iPlatID = 0;
    iIZoneAreaID = 0;
    szVopenid.Init();
}

bool BevLogBaseInfo::FromPb(const NFrame::BevLogBaseInfo& cc)
{
    if (cc.szgamesvrid().length() >= 32)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogBaseInfo, field:szGameSvrId, cur length:%d, max length:31", cc.szgamesvrid().length());
        return false;
    }
    szGameSvrId = cc.szgamesvrid();
    tDtEventTime = cc.tdteventtime();
    if (cc.szvgameappid().length() >= 32)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogBaseInfo, field:szVGameAppid, cur length:%d, max length:31", cc.szvgameappid().length());
        return false;
    }
    szVGameAppid = cc.szvgameappid();
    iPlatID = cc.iplatid();
    iIZoneAreaID = cc.iizoneareaid();
    if (cc.szvopenid().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogBaseInfo, field:szVopenid, cur length:%d, max length:63", cc.szvopenid().length());
        return false;
    }
    szVopenid = cc.szvopenid();
    return true;
}

void BevLogBaseInfo::ToPb(NFrame::BevLogBaseInfo* cc) const
{
    cc->set_szgamesvrid(szGameSvrId.data());
    cc->set_tdteventtime(tDtEventTime);
    cc->set_szvgameappid(szVGameAppid.data());
    cc->set_iplatid(iPlatID);
    cc->set_iizoneareaid(iIZoneAreaID);
    cc->set_szvopenid(szVopenid.data());
    return;
}

NFrame::BevLogBaseInfo BevLogBaseInfo::ToPb() const
{
    NFrame::BevLogBaseInfo cc;
    ToPb(&cc);
    return cc;
}

std::string BevLogBaseInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "szGameSvrId:" << "\"" << szGameSvrId.data() << "\"" << ", ";
    ss << "tDtEventTime:" << tDtEventTime << ", ";
    ss << "szVGameAppid:" << "\"" << szVGameAppid.data() << "\"" << ", ";
    ss << "iPlatID:" << iPlatID << ", ";
    ss << "iIZoneAreaID:" << iIZoneAreaID << ", ";
    ss << "szVopenid:" << "\"" << szVopenid.data() << "\"";
    ss << "}";
    return ss.str();
}

BevLogDeviceInfo::BevLogDeviceInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

BevLogDeviceInfo::~BevLogDeviceInfo()
{
}

BevLogDeviceInfo::BevLogDeviceInfo(const BevLogDeviceInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

BevLogDeviceInfo& BevLogDeviceInfo::operator=(const BevLogDeviceInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void BevLogDeviceInfo::CopyData(const BevLogDeviceInfo& stArgsData)
{
    szClientVersion = stArgsData.szClientVersion;
    szSystemSoftware = stArgsData.szSystemSoftware;
    szSystemHardware = stArgsData.szSystemHardware;
    szTelecomOper = stArgsData.szTelecomOper;
    szNetwork = stArgsData.szNetwork;
    iScreenWidth = stArgsData.iScreenWidth;
    iScreenHight = stArgsData.iScreenHight;
    fDensity = stArgsData.fDensity;
    szCpuHardware = stArgsData.szCpuHardware;
    iMemory = stArgsData.iMemory;
    szGLRender = stArgsData.szGLRender;
    szGLVersion = stArgsData.szGLVersion;
    szDeviceId = stArgsData.szDeviceId;
    iIsRoot = stArgsData.iIsRoot;
    szIPStr = stArgsData.szIPStr;
    iPort = stArgsData.iPort;
    szIPV6Str = stArgsData.szIPV6Str;
    szMacAddr = stArgsData.szMacAddr;
    szInstallPath = stArgsData.szInstallPath;
    iCountryCode = stArgsData.iCountryCode;
}

int BevLogDeviceInfo::CreateInit()
{
    iScreenWidth = 0;
    iScreenHight = 0;
    fDensity = 0;
    iMemory = 0;
    iIsRoot = 0;
    iPort = 0;
    iCountryCode = 0;
	return 0;
}

int BevLogDeviceInfo::ResumeInit()
{
	return 0;
}

void BevLogDeviceInfo::Init()
{
    szClientVersion.Init();
    szSystemSoftware.Init();
    szSystemHardware.Init();
    szTelecomOper.Init();
    szNetwork.Init();
    iScreenWidth = 0;
    iScreenHight = 0;
    fDensity = 0;
    szCpuHardware.Init();
    iMemory = 0;
    szGLRender.Init();
    szGLVersion.Init();
    szDeviceId.Init();
    iIsRoot = 0;
    szIPStr.Init();
    iPort = 0;
    szIPV6Str.Init();
    szMacAddr.Init();
    szInstallPath.Init();
    iCountryCode = 0;
}

bool BevLogDeviceInfo::FromPb(const NFrame::BevLogDeviceInfo& cc)
{
    if (cc.szclientversion().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szClientVersion, cur length:%d, max length:63", cc.szclientversion().length());
        return false;
    }
    szClientVersion = cc.szclientversion();
    if (cc.szsystemsoftware().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szSystemSoftware, cur length:%d, max length:63", cc.szsystemsoftware().length());
        return false;
    }
    szSystemSoftware = cc.szsystemsoftware();
    if (cc.szsystemhardware().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szSystemHardware, cur length:%d, max length:63", cc.szsystemhardware().length());
        return false;
    }
    szSystemHardware = cc.szsystemhardware();
    if (cc.sztelecomoper().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szTelecomOper, cur length:%d, max length:63", cc.sztelecomoper().length());
        return false;
    }
    szTelecomOper = cc.sztelecomoper();
    if (cc.sznetwork().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szNetwork, cur length:%d, max length:63", cc.sznetwork().length());
        return false;
    }
    szNetwork = cc.sznetwork();
    iScreenWidth = cc.iscreenwidth();
    iScreenHight = cc.iscreenhight();
    fDensity = cc.fdensity();
    if (cc.szcpuhardware().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szCpuHardware, cur length:%d, max length:63", cc.szcpuhardware().length());
        return false;
    }
    szCpuHardware = cc.szcpuhardware();
    iMemory = cc.imemory();
    if (cc.szglrender().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szGLRender, cur length:%d, max length:63", cc.szglrender().length());
        return false;
    }
    szGLRender = cc.szglrender();
    if (cc.szglversion().length() >= 128)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szGLVersion, cur length:%d, max length:127", cc.szglversion().length());
        return false;
    }
    szGLVersion = cc.szglversion();
    if (cc.szdeviceid().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szDeviceId, cur length:%d, max length:63", cc.szdeviceid().length());
        return false;
    }
    szDeviceId = cc.szdeviceid();
    iIsRoot = cc.iisroot();
    if (cc.szipstr().length() >= 16)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szIPStr, cur length:%d, max length:15", cc.szipstr().length());
        return false;
    }
    szIPStr = cc.szipstr();
    iPort = cc.iport();
    if (cc.szipv6str().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szIPV6Str, cur length:%d, max length:63", cc.szipv6str().length());
        return false;
    }
    szIPV6Str = cc.szipv6str();
    if (cc.szmacaddr().length() >= 32)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szMacAddr, cur length:%d, max length:31", cc.szmacaddr().length());
        return false;
    }
    szMacAddr = cc.szmacaddr();
    if (cc.szinstallpath().length() >= 256)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogDeviceInfo, field:szInstallPath, cur length:%d, max length:255", cc.szinstallpath().length());
        return false;
    }
    szInstallPath = cc.szinstallpath();
    iCountryCode = cc.icountrycode();
    return true;
}

void BevLogDeviceInfo::ToPb(NFrame::BevLogDeviceInfo* cc) const
{
    cc->set_szclientversion(szClientVersion.data());
    cc->set_szsystemsoftware(szSystemSoftware.data());
    cc->set_szsystemhardware(szSystemHardware.data());
    cc->set_sztelecomoper(szTelecomOper.data());
    cc->set_sznetwork(szNetwork.data());
    cc->set_iscreenwidth(iScreenWidth);
    cc->set_iscreenhight(iScreenHight);
    cc->set_fdensity(fDensity);
    cc->set_szcpuhardware(szCpuHardware.data());
    cc->set_imemory(iMemory);
    cc->set_szglrender(szGLRender.data());
    cc->set_szglversion(szGLVersion.data());
    cc->set_szdeviceid(szDeviceId.data());
    cc->set_iisroot(iIsRoot);
    cc->set_szipstr(szIPStr.data());
    cc->set_iport(iPort);
    cc->set_szipv6str(szIPV6Str.data());
    cc->set_szmacaddr(szMacAddr.data());
    cc->set_szinstallpath(szInstallPath.data());
    cc->set_icountrycode(iCountryCode);
    return;
}

NFrame::BevLogDeviceInfo BevLogDeviceInfo::ToPb() const
{
    NFrame::BevLogDeviceInfo cc;
    ToPb(&cc);
    return cc;
}

std::string BevLogDeviceInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "szClientVersion:" << "\"" << szClientVersion.data() << "\"" << ", ";
    ss << "szSystemSoftware:" << "\"" << szSystemSoftware.data() << "\"" << ", ";
    ss << "szSystemHardware:" << "\"" << szSystemHardware.data() << "\"" << ", ";
    ss << "szTelecomOper:" << "\"" << szTelecomOper.data() << "\"" << ", ";
    ss << "szNetwork:" << "\"" << szNetwork.data() << "\"" << ", ";
    ss << "iScreenWidth:" << iScreenWidth << ", ";
    ss << "iScreenHight:" << iScreenHight << ", ";
    ss << "fDensity:" << fDensity << ", ";
    ss << "szCpuHardware:" << "\"" << szCpuHardware.data() << "\"" << ", ";
    ss << "iMemory:" << iMemory << ", ";
    ss << "szGLRender:" << "\"" << szGLRender.data() << "\"" << ", ";
    ss << "szGLVersion:" << "\"" << szGLVersion.data() << "\"" << ", ";
    ss << "szDeviceId:" << "\"" << szDeviceId.data() << "\"" << ", ";
    ss << "iIsRoot:" << iIsRoot << ", ";
    ss << "szIPStr:" << "\"" << szIPStr.data() << "\"" << ", ";
    ss << "iPort:" << iPort << ", ";
    ss << "szIPV6Str:" << "\"" << szIPV6Str.data() << "\"" << ", ";
    ss << "szMacAddr:" << "\"" << szMacAddr.data() << "\"" << ", ";
    ss << "szInstallPath:" << "\"" << szInstallPath.data() << "\"" << ", ";
    ss << "iCountryCode:" << iCountryCode;
    ss << "}";
    return ss.str();
}

BevLogRoleBaseInfo::BevLogRoleBaseInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

BevLogRoleBaseInfo::~BevLogRoleBaseInfo()
{
}

BevLogRoleBaseInfo::BevLogRoleBaseInfo(const BevLogRoleBaseInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

BevLogRoleBaseInfo& BevLogRoleBaseInfo::operator=(const BevLogRoleBaseInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void BevLogRoleBaseInfo::CopyData(const BevLogRoleBaseInfo& stArgsData)
{
    szVRoleID = stArgsData.szVRoleID;
    szVRoleName = stArgsData.szVRoleName;
    iIHomeLevel = stArgsData.iIHomeLevel;
    iSurviveLevel = stArgsData.iSurviveLevel;
    iBattleLevel = stArgsData.iBattleLevel;
    llFamilyID = stArgsData.llFamilyID;
    iIVipLevel = stArgsData.iIVipLevel;
    iProfId = stArgsData.iProfId;
    iGender = stArgsData.iGender;
    iBattleForce = stArgsData.iBattleForce;
    iBirthTime = stArgsData.iBirthTime;
}

int BevLogRoleBaseInfo::CreateInit()
{
    iIHomeLevel = 0;
    iSurviveLevel = 0;
    iBattleLevel = 0;
    llFamilyID = 0;
    iIVipLevel = 0;
    iProfId = 0;
    iGender = 0;
    iBattleForce = 0;
    iBirthTime = 0;
	return 0;
}

int BevLogRoleBaseInfo::ResumeInit()
{
	return 0;
}

void BevLogRoleBaseInfo::Init()
{
    szVRoleID.Init();
    szVRoleName.Init();
    iIHomeLevel = 0;
    iSurviveLevel = 0;
    iBattleLevel = 0;
    llFamilyID = 0;
    iIVipLevel = 0;
    iProfId = 0;
    iGender = 0;
    iBattleForce = 0;
    iBirthTime = 0;
}

bool BevLogRoleBaseInfo::FromPb(const NFrame::BevLogRoleBaseInfo& cc)
{
    if (cc.szvroleid().length() >= 64)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogRoleBaseInfo, field:szVRoleID, cur length:%d, max length:63", cc.szvroleid().length());
        return false;
    }
    szVRoleID = cc.szvroleid();
    if (cc.szvrolename().length() >= 128)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogRoleBaseInfo, field:szVRoleName, cur length:%d, max length:127", cc.szvrolename().length());
        return false;
    }
    szVRoleName = cc.szvrolename();
    iIHomeLevel = cc.iihomelevel();
    iSurviveLevel = cc.isurvivelevel();
    iBattleLevel = cc.ibattlelevel();
    llFamilyID = cc.llfamilyid();
    iIVipLevel = cc.iiviplevel();
    iProfId = cc.iprofid();
    iGender = cc.igender();
    iBattleForce = cc.ibattleforce();
    iBirthTime = cc.ibirthtime();
    return true;
}

void BevLogRoleBaseInfo::ToPb(NFrame::BevLogRoleBaseInfo* cc) const
{
    cc->set_szvroleid(szVRoleID.data());
    cc->set_szvrolename(szVRoleName.data());
    cc->set_iihomelevel(iIHomeLevel);
    cc->set_isurvivelevel(iSurviveLevel);
    cc->set_ibattlelevel(iBattleLevel);
    cc->set_llfamilyid(llFamilyID);
    cc->set_iiviplevel(iIVipLevel);
    cc->set_iprofid(iProfId);
    cc->set_igender(iGender);
    cc->set_ibattleforce(iBattleForce);
    cc->set_ibirthtime(iBirthTime);
    return;
}

NFrame::BevLogRoleBaseInfo BevLogRoleBaseInfo::ToPb() const
{
    NFrame::BevLogRoleBaseInfo cc;
    ToPb(&cc);
    return cc;
}

std::string BevLogRoleBaseInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "szVRoleID:" << "\"" << szVRoleID.data() << "\"" << ", ";
    ss << "szVRoleName:" << "\"" << szVRoleName.data() << "\"" << ", ";
    ss << "iIHomeLevel:" << iIHomeLevel << ", ";
    ss << "iSurviveLevel:" << iSurviveLevel << ", ";
    ss << "iBattleLevel:" << iBattleLevel << ", ";
    ss << "llFamilyID:" << llFamilyID << ", ";
    ss << "iIVipLevel:" << iIVipLevel << ", ";
    ss << "iProfId:" << iProfId << ", ";
    ss << "iGender:" << iGender << ", ";
    ss << "iBattleForce:" << iBattleForce << ", ";
    ss << "iBirthTime:" << iBirthTime;
    ss << "}";
    return ss.str();
}

BevLogTransBaseInfo::BevLogTransBaseInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

BevLogTransBaseInfo::~BevLogTransBaseInfo()
{
}

BevLogTransBaseInfo::BevLogTransBaseInfo(const BevLogTransBaseInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

BevLogTransBaseInfo& BevLogTransBaseInfo::operator=(const BevLogTransBaseInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void BevLogTransBaseInfo::CopyData(const BevLogTransBaseInfo& stArgsData)
{
    iGlobalID = stArgsData.iGlobalID;
    iErrCode = stArgsData.iErrCode;
    iEotType = stArgsData.iEotType;
    ullTransStartTime = stArgsData.ullTransStartTime;
    ullTransStopTime = stArgsData.ullTransStopTime;
}

int BevLogTransBaseInfo::CreateInit()
{
    iGlobalID = 0;
    iErrCode = 0;
    iEotType = 0;
    ullTransStartTime = 0;
    ullTransStopTime = 0;
	return 0;
}

int BevLogTransBaseInfo::ResumeInit()
{
	return 0;
}

void BevLogTransBaseInfo::Init()
{
    iGlobalID = 0;
    iErrCode = 0;
    iEotType = 0;
    ullTransStartTime = 0;
    ullTransStopTime = 0;
}

bool BevLogTransBaseInfo::FromPb(const NFrame::BevLogTransBaseInfo& cc)
{
    iGlobalID = cc.iglobalid();
    iErrCode = cc.ierrcode();
    iEotType = cc.ieottype();
    ullTransStartTime = cc.ulltransstarttime();
    ullTransStopTime = cc.ulltransstoptime();
    return true;
}

void BevLogTransBaseInfo::ToPb(NFrame::BevLogTransBaseInfo* cc) const
{
    cc->set_iglobalid(iGlobalID);
    cc->set_ierrcode(iErrCode);
    cc->set_ieottype(iEotType);
    cc->set_ulltransstarttime(ullTransStartTime);
    cc->set_ulltransstoptime(ullTransStopTime);
    return;
}

NFrame::BevLogTransBaseInfo BevLogTransBaseInfo::ToPb() const
{
    NFrame::BevLogTransBaseInfo cc;
    ToPb(&cc);
    return cc;
}

std::string BevLogTransBaseInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "iGlobalID:" << iGlobalID << ", ";
    ss << "iErrCode:" << iErrCode << ", ";
    ss << "iEotType:" << iEotType << ", ";
    ss << "ullTransStartTime:" << ullTransStartTime << ", ";
    ss << "ullTransStopTime:" << ullTransStopTime;
    ss << "}";
    return ss.str();
}

ServerStateFlow::ServerStateFlow()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

ServerStateFlow::~ServerStateFlow()
{
}

ServerStateFlow::ServerStateFlow(const ServerStateFlow& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

ServerStateFlow& ServerStateFlow::operator=(const ServerStateFlow& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void ServerStateFlow::CopyData(const ServerStateFlow& stArgsData)
{
    tDtEventTime = stArgsData.tDtEventTime;
    szVGameIP = stArgsData.szVGameIP;
    iIZoneAreaID = stArgsData.iIZoneAreaID;
    iITimeShift = stArgsData.iITimeShift;
}

int ServerStateFlow::CreateInit()
{
    tDtEventTime = 0;
    iIZoneAreaID = 0;
    iITimeShift = 0;
	return 0;
}

int ServerStateFlow::ResumeInit()
{
	return 0;
}

void ServerStateFlow::Init()
{
    tDtEventTime = 0;
    szVGameIP.Init();
    iIZoneAreaID = 0;
    iITimeShift = 0;
}

bool ServerStateFlow::FromPb(const NFrame::ServerStateFlow& cc)
{
    tDtEventTime = cc.tdteventtime();
    if (cc.szvgameip().length() >= 32)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:ServerStateFlow, field:szVGameIP, cur length:%d, max length:31", cc.szvgameip().length());
        return false;
    }
    szVGameIP = cc.szvgameip();
    iIZoneAreaID = cc.iizoneareaid();
    iITimeShift = cc.iitimeshift();
    return true;
}

void ServerStateFlow::ToPb(NFrame::ServerStateFlow* cc) const
{
    cc->set_tdteventtime(tDtEventTime);
    cc->set_szvgameip(szVGameIP.data());
    cc->set_iizoneareaid(iIZoneAreaID);
    cc->set_iitimeshift(iITimeShift);
    return;
}

NFrame::ServerStateFlow ServerStateFlow::ToPb() const
{
    NFrame::ServerStateFlow cc;
    ToPb(&cc);
    return cc;
}

std::string ServerStateFlow::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "tDtEventTime:" << tDtEventTime << ", ";
    ss << "szVGameIP:" << "\"" << szVGameIP.data() << "\"" << ", ";
    ss << "iIZoneAreaID:" << iIZoneAreaID << ", ";
    ss << "iITimeShift:" << iITimeShift;
    ss << "}";
    return ss.str();
}




/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
#error Field descriptor for BevLogDeviceInfo.szInstallPath is too large. Define PB_FIELD_16BIT to fix this.
#endif


/* @@protoc_insertion_point(eof) */
