/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9 */

#include <sstream>
#include "NFComm/NFObjCommon/NFShmMgr.h"
#include "FrameMsg.nanopb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

Proto_DispInfo::Proto_DispInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_DispInfo::~Proto_DispInfo()
{
}

Proto_DispInfo::Proto_DispInfo(const Proto_DispInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_DispInfo& Proto_DispInfo::operator=(const Proto_DispInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_DispInfo::CopyData(const Proto_DispInfo& stArgsData)
{
    id = stArgsData.id;
    seq = stArgsData.seq;
    req_seq = stArgsData.req_seq;
    err_code = stArgsData.err_code;
    type = stArgsData.type;
}

int Proto_DispInfo::CreateInit()
{
    id = 0;
    seq = 0;
    req_seq = 0;
    err_code = 0;
    type = _PacketDispType_MIN;
	return 0;
}

int Proto_DispInfo::ResumeInit()
{
	return 0;
}

void Proto_DispInfo::Init()
{
    id = 0;
    seq = 0;
    req_seq = 0;
    err_code = 0;
    type = _PacketDispType_MIN;
}

bool Proto_DispInfo::FromPb(const NFrame::Proto_DispInfo& cc)
{
    id = cc.id();
    seq = cc.seq();
    req_seq = cc.req_seq();
    err_code = cc.err_code();
    type = static_cast<PacketDispType>(cc.type());
    return true;
}

void Proto_DispInfo::ToPb(NFrame::Proto_DispInfo* cc) const
{
    cc->set_id(id);
    cc->set_seq(seq);
    cc->set_req_seq(req_seq);
    cc->set_err_code(err_code);
    cc->set_type(static_cast<NFrame::PacketDispType>(type));
    return;
}

NFrame::Proto_DispInfo Proto_DispInfo::ToPb() const
{
    NFrame::Proto_DispInfo cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_DispInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "id:" << id << ", ";
    ss << "seq:" << seq << ", ";
    ss << "req_seq:" << req_seq << ", ";
    ss << "err_code:" << err_code << ", ";
    ss << "type:" << type;
    ss << "}";
    return ss.str();
}

Proto_TransInfo::Proto_TransInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_TransInfo::~Proto_TransInfo()
{
}

Proto_TransInfo::Proto_TransInfo(const Proto_TransInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_TransInfo& Proto_TransInfo::operator=(const Proto_TransInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_TransInfo::CopyData(const Proto_TransInfo& stArgsData)
{
    req_trans_id = stArgsData.req_trans_id;
    rsp_trans_id = stArgsData.rsp_trans_id;
}

int Proto_TransInfo::CreateInit()
{
    req_trans_id = 0;
    rsp_trans_id = 0;
	return 0;
}

int Proto_TransInfo::ResumeInit()
{
	return 0;
}

void Proto_TransInfo::Init()
{
    req_trans_id = 0;
    rsp_trans_id = 0;
}

bool Proto_TransInfo::FromPb(const NFrame::Proto_TransInfo& cc)
{
    req_trans_id = cc.req_trans_id();
    rsp_trans_id = cc.rsp_trans_id();
    return true;
}

void Proto_TransInfo::ToPb(NFrame::Proto_TransInfo* cc) const
{
    cc->set_req_trans_id(req_trans_id);
    cc->set_rsp_trans_id(rsp_trans_id);
    return;
}

NFrame::Proto_TransInfo Proto_TransInfo::ToPb() const
{
    NFrame::Proto_TransInfo cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_TransInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "req_trans_id:" << req_trans_id << ", ";
    ss << "rsp_trans_id:" << rsp_trans_id;
    ss << "}";
    return ss.str();
}

Proto_StoreInfo::Proto_StoreInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_StoreInfo::~Proto_StoreInfo()
{
}

Proto_StoreInfo::Proto_StoreInfo(const Proto_StoreInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_StoreInfo& Proto_StoreInfo::operator=(const Proto_StoreInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_StoreInfo::CopyData(const Proto_StoreInfo& stArgsData)
{
    id = stArgsData.id;
    table_id = stArgsData.table_id;
}

int Proto_StoreInfo::CreateInit()
{
    id = 0;
    table_id = 0;
	return 0;
}

int Proto_StoreInfo::ResumeInit()
{
	return 0;
}

void Proto_StoreInfo::Init()
{
    id = 0;
    table_id = 0;
}

bool Proto_StoreInfo::FromPb(const NFrame::Proto_StoreInfo& cc)
{
    id = cc.id();
    table_id = cc.table_id();
    return true;
}

void Proto_StoreInfo::ToPb(NFrame::Proto_StoreInfo* cc) const
{
    cc->set_id(id);
    cc->set_table_id(table_id);
    return;
}

NFrame::Proto_StoreInfo Proto_StoreInfo::ToPb() const
{
    NFrame::Proto_StoreInfo cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_StoreInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "id:" << id << ", ";
    ss << "table_id:" << table_id;
    ss << "}";
    return ss.str();
}

Proto_EventInfo::Proto_EventInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_EventInfo::~Proto_EventInfo()
{
}

Proto_EventInfo::Proto_EventInfo(const Proto_EventInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_EventInfo& Proto_EventInfo::operator=(const Proto_EventInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_EventInfo::CopyData(const Proto_EventInfo& stArgsData)
{
    server_type = stArgsData.server_type;
    event_id = stArgsData.event_id;
    src_type = stArgsData.src_type;
    src_id = stArgsData.src_id;
    full_message_name = stArgsData.full_message_name;
}

int Proto_EventInfo::CreateInit()
{
    server_type = 0;
    event_id = 0;
    src_type = 0;
    src_id = 0;
	return 0;
}

int Proto_EventInfo::ResumeInit()
{
	return 0;
}

void Proto_EventInfo::Init()
{
    server_type = 0;
    event_id = 0;
    src_type = 0;
    src_id = 0;
}

bool Proto_EventInfo::FromPb(const NFrame::Proto_EventInfo& cc)
{
    server_type = cc.server_type();
    event_id = cc.event_id();
    src_type = cc.src_type();
    src_id = cc.src_id();
    full_message_name = cc.full_message_name();
    return true;
}

void Proto_EventInfo::ToPb(NFrame::Proto_EventInfo* cc) const
{
    cc->set_server_type(server_type);
    cc->set_event_id(event_id);
    cc->set_src_type(src_type);
    cc->set_src_id(src_id);
    cc->set_full_message_name(full_message_name);
    return;
}

NFrame::Proto_EventInfo Proto_EventInfo::ToPb() const
{
    NFrame::Proto_EventInfo cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_EventInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_type:" << server_type << ", ";
    ss << "event_id:" << event_id << ", ";
    ss << "src_type:" << src_type << ", ";
    ss << "src_id:" << src_id << ", ";
    ss << "full_message_name:" << "\"" << full_message_name << "\"";
    ss << "}";
    return ss.str();
}

Proto_ScriptRpcResult::Proto_ScriptRpcResult()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_ScriptRpcResult::~Proto_ScriptRpcResult()
{
}

Proto_ScriptRpcResult::Proto_ScriptRpcResult(const Proto_ScriptRpcResult& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_ScriptRpcResult& Proto_ScriptRpcResult::operator=(const Proto_ScriptRpcResult& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_ScriptRpcResult::CopyData(const Proto_ScriptRpcResult& stArgsData)
{
    req_type = stArgsData.req_type;
    rsp_type = stArgsData.rsp_type;
    respone = stArgsData.respone;
}

int Proto_ScriptRpcResult::CreateInit()
{
	return 0;
}

int Proto_ScriptRpcResult::ResumeInit()
{
	return 0;
}

void Proto_ScriptRpcResult::Init()
{
}

bool Proto_ScriptRpcResult::FromPb(const NFrame::Proto_ScriptRpcResult& cc)
{
    req_type = cc.req_type();
    rsp_type = cc.rsp_type();
    respone = cc.respone();
    return true;
}

void Proto_ScriptRpcResult::ToPb(NFrame::Proto_ScriptRpcResult* cc) const
{
    cc->set_req_type(req_type);
    cc->set_rsp_type(rsp_type);
    cc->set_respone(respone);
    return;
}

NFrame::Proto_ScriptRpcResult Proto_ScriptRpcResult::ToPb() const
{
    NFrame::Proto_ScriptRpcResult cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_ScriptRpcResult::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "req_type:" << "\"" << req_type << "\"" << ", ";
    ss << "rsp_type:" << "\"" << rsp_type << "\"" << ", ";
    ss << "respone:" << "\"" << respone << "\"";
    ss << "}";
    return ss.str();
}

Proto_RpcInfo::Proto_RpcInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_RpcInfo::~Proto_RpcInfo()
{
}

Proto_RpcInfo::Proto_RpcInfo(const Proto_RpcInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_RpcInfo& Proto_RpcInfo::operator=(const Proto_RpcInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_RpcInfo::CopyData(const Proto_RpcInfo& stArgsData)
{
    req_rpc_id = stArgsData.req_rpc_id;
    rsp_rpc_id = stArgsData.rsp_rpc_id;
    rpc_ret_code = stArgsData.rpc_ret_code;
    req_rpc_hash = stArgsData.req_rpc_hash;
    rsp_rpc_hash = stArgsData.rsp_rpc_hash;
    req_bus_id = stArgsData.req_bus_id;
    req_server_type = stArgsData.req_server_type;
    is_script_rpc = stArgsData.is_script_rpc;
}

int Proto_RpcInfo::CreateInit()
{
    req_rpc_id = 0;
    rsp_rpc_id = 0;
    rpc_ret_code = 0;
    req_rpc_hash = 0;
    rsp_rpc_hash = 0;
    req_bus_id = 0;
    req_server_type = 0;
    is_script_rpc = 0;
	return 0;
}

int Proto_RpcInfo::ResumeInit()
{
	return 0;
}

void Proto_RpcInfo::Init()
{
    req_rpc_id = 0;
    rsp_rpc_id = 0;
    rpc_ret_code = 0;
    req_rpc_hash = 0;
    rsp_rpc_hash = 0;
    req_bus_id = 0;
    req_server_type = 0;
    is_script_rpc = 0;
}

bool Proto_RpcInfo::FromPb(const NFrame::Proto_RpcInfo& cc)
{
    req_rpc_id = cc.req_rpc_id();
    rsp_rpc_id = cc.rsp_rpc_id();
    rpc_ret_code = cc.rpc_ret_code();
    req_rpc_hash = cc.req_rpc_hash();
    rsp_rpc_hash = cc.rsp_rpc_hash();
    req_bus_id = cc.req_bus_id();
    req_server_type = cc.req_server_type();
    is_script_rpc = cc.is_script_rpc();
    return true;
}

void Proto_RpcInfo::ToPb(NFrame::Proto_RpcInfo* cc) const
{
    cc->set_req_rpc_id(req_rpc_id);
    cc->set_rsp_rpc_id(rsp_rpc_id);
    cc->set_rpc_ret_code(rpc_ret_code);
    cc->set_req_rpc_hash(req_rpc_hash);
    cc->set_rsp_rpc_hash(rsp_rpc_hash);
    cc->set_req_bus_id(req_bus_id);
    cc->set_req_server_type(req_server_type);
    cc->set_is_script_rpc(is_script_rpc);
    return;
}

NFrame::Proto_RpcInfo Proto_RpcInfo::ToPb() const
{
    NFrame::Proto_RpcInfo cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_RpcInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "req_rpc_id:" << req_rpc_id << ", ";
    ss << "rsp_rpc_id:" << rsp_rpc_id << ", ";
    ss << "rpc_ret_code:" << rpc_ret_code << ", ";
    ss << "req_rpc_hash:" << req_rpc_hash << ", ";
    ss << "rsp_rpc_hash:" << rsp_rpc_hash << ", ";
    ss << "req_bus_id:" << req_bus_id << ", ";
    ss << "req_server_type:" << req_server_type << ", ";
    ss << "is_script_rpc:" << is_script_rpc;
    ss << "}";
    return ss.str();
}

Proto_RedirectInfo::Proto_RedirectInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_RedirectInfo::~Proto_RedirectInfo()
{
}

Proto_RedirectInfo::Proto_RedirectInfo(const Proto_RedirectInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_RedirectInfo& Proto_RedirectInfo::operator=(const Proto_RedirectInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_RedirectInfo::CopyData(const Proto_RedirectInfo& stArgsData)
{
    id.clear();
    id = stArgsData.id;
    all = stArgsData.all;
}

int Proto_RedirectInfo::CreateInit()
{
    all = 0;
	return 0;
}

int Proto_RedirectInfo::ResumeInit()
{
	return 0;
}

void Proto_RedirectInfo::Init()
{
    all = 0;
}

bool Proto_RedirectInfo::FromPb(const NFrame::Proto_RedirectInfo& cc)
{
    id.clear();
    for (int i = 0; i < cc.id_size(); ++i)
    {
        id.push_back(cc.id(i));
    }
    all = cc.all();
    return true;
}

void Proto_RedirectInfo::ToPb(NFrame::Proto_RedirectInfo* cc) const
{
    cc->clear_id();
    for (auto iter = id.begin(); iter != id.end(); ++iter)
    {
        cc->add_id(*iter);
    }
    cc->set_all(all);
    return;
}

NFrame::Proto_RedirectInfo Proto_RedirectInfo::ToPb() const
{
    NFrame::Proto_RedirectInfo cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_RedirectInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "id(" << id.size()<< "):[";
    for (auto iter = id.begin(); iter != id.end(); ++iter)
    {
        ss << *iter;
    }
;
    ss << "all:" << all;
    ss << "}";
    return ss.str();
}

Proto_FramePkg::Proto_FramePkg()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_FramePkg::~Proto_FramePkg()
{
}

Proto_FramePkg::Proto_FramePkg(const Proto_FramePkg& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_FramePkg& Proto_FramePkg::operator=(const Proto_FramePkg& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_FramePkg::CopyData(const Proto_FramePkg& stArgsData)
{
    module_id = stArgsData.module_id;
    msg_id = stArgsData.msg_id;
    msg_data = stArgsData.msg_data;
    disp_info = stArgsData.disp_info;
    trans_info = stArgsData.trans_info;
    store_info = stArgsData.store_info;
    event_info = stArgsData.event_info;
    redirect_info = stArgsData.redirect_info;
    rpc_info = stArgsData.rpc_info;
}

int Proto_FramePkg::CreateInit()
{
    module_id = 0;
    msg_id = 0;
	return 0;
}

int Proto_FramePkg::ResumeInit()
{
	return 0;
}

void Proto_FramePkg::Init()
{
    module_id = 0;
    msg_id = 0;
    disp_info.Init();
    trans_info.Init();
    store_info.Init();
    event_info.Init();
    redirect_info.Init();
    rpc_info.Init();
}

bool Proto_FramePkg::FromPb(const NFrame::Proto_FramePkg& cc)
{
    module_id = cc.module_id();
    msg_id = cc.msg_id();
    msg_data = cc.msg_data();
    if (!disp_info.FromPb(cc.disp_info())) return false;
    if (!trans_info.FromPb(cc.trans_info())) return false;
    if (!store_info.FromPb(cc.store_info())) return false;
    if (!event_info.FromPb(cc.event_info())) return false;
    if (!redirect_info.FromPb(cc.redirect_info())) return false;
    if (!rpc_info.FromPb(cc.rpc_info())) return false;
    return true;
}

void Proto_FramePkg::ToPb(NFrame::Proto_FramePkg* cc) const
{
    cc->set_module_id(module_id);
    cc->set_msg_id(msg_id);
    cc->set_msg_data(msg_data);
    disp_info.ToPb(cc->mutable_disp_info());
    trans_info.ToPb(cc->mutable_trans_info());
    store_info.ToPb(cc->mutable_store_info());
    event_info.ToPb(cc->mutable_event_info());
    redirect_info.ToPb(cc->mutable_redirect_info());
    rpc_info.ToPb(cc->mutable_rpc_info());
    return;
}

NFrame::Proto_FramePkg Proto_FramePkg::ToPb() const
{
    NFrame::Proto_FramePkg cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_FramePkg::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "module_id:" << module_id << ", ";
    ss << "msg_id:" << msg_id << ", ";
    ss << "msg_data:" << "(skip print BYTES)" << ", ";
    ss << "disp_info:" << disp_info.ShortDebugString() << ", ";
    ss << "trans_info:" << trans_info.ShortDebugString() << ", ";
    ss << "store_info:" << store_info.ShortDebugString() << ", ";
    ss << "event_info:" << event_info.ShortDebugString() << ", ";
    ss << "redirect_info:" << redirect_info.ShortDebugString() << ", ";
    ss << "rpc_info:" << rpc_info.ShortDebugString();
    ss << "}";
    return ss.str();
}

ServerInfoReport::ServerInfoReport()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

ServerInfoReport::~ServerInfoReport()
{
}

ServerInfoReport::ServerInfoReport(const ServerInfoReport& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

ServerInfoReport& ServerInfoReport::operator=(const ServerInfoReport& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void ServerInfoReport::CopyData(const ServerInfoReport& stArgsData)
{
    bus_id = stArgsData.bus_id;
    server_id = stArgsData.server_id;
    server_type = stArgsData.server_type;
    server_name = stArgsData.server_name;
    url = stArgsData.url;
    link_mode = stArgsData.link_mode;
    bus_length = stArgsData.bus_length;
    server_ip = stArgsData.server_ip;
    server_port = stArgsData.server_port;
    server_http_port = stArgsData.server_http_port;
    external_server_ip = stArgsData.external_server_ip;
    external_server_port = stArgsData.external_server_port;
    is_cross_server = stArgsData.is_cross_server;
    route_svr = stArgsData.route_svr;
    server_max_online = stArgsData.server_max_online;
    server_cur_online = stArgsData.server_cur_online;
    server_state = stArgsData.server_state;
    system_info = stArgsData.system_info;
    total_mem = stArgsData.total_mem;
    free_mem = stArgsData.free_mem;
    used_mem = stArgsData.used_mem;
    proc_cpu = stArgsData.proc_cpu;
    proc_mem = stArgsData.proc_mem;
    proc_thread = stArgsData.proc_thread;
    proc_name = stArgsData.proc_name;
    proc_cwd = stArgsData.proc_cwd;
    proc_pid = stArgsData.proc_pid;
    last_date = stArgsData.last_date;
    last_time = stArgsData.last_time;
    contract_info = stArgsData.contract_info;
    machine_addr = stArgsData.machine_addr;
    db_name_list.clear();
    db_name_list = stArgsData.db_name_list;
    msg_id.clear();
    msg_id = stArgsData.msg_id;
    map_id_list.clear();
    map_id_list = stArgsData.map_id_list;
}

int ServerInfoReport::CreateInit()
{
    bus_id = 0;
    server_type = 0;
    bus_length = 0;
    server_port = 0;
    server_http_port = 0;
    external_server_port = 0;
    is_cross_server = 0;
    server_max_online = 0;
    server_cur_online = 0;
    server_state = 0;
    total_mem = 0;
    free_mem = 0;
    used_mem = 0;
    proc_cpu = 0;
    proc_mem = 0;
    proc_thread = 0;
    proc_pid = 0;
    last_time = 0;
	return 0;
}

int ServerInfoReport::ResumeInit()
{
	return 0;
}

void ServerInfoReport::Init()
{
    bus_id = 0;
    server_type = 0;
    bus_length = 0;
    server_port = 0;
    server_http_port = 0;
    external_server_port = 0;
    is_cross_server = 0;
    server_max_online = 0;
    server_cur_online = 0;
    server_state = 0;
    total_mem = 0;
    free_mem = 0;
    used_mem = 0;
    proc_cpu = 0;
    proc_mem = 0;
    proc_thread = 0;
    proc_pid = 0;
    last_time = 0;
}

bool ServerInfoReport::FromPb(const NFrame::ServerInfoReport& cc)
{
    bus_id = cc.bus_id();
    server_id = cc.server_id();
    server_type = cc.server_type();
    server_name = cc.server_name();
    url = cc.url();
    link_mode = cc.link_mode();
    bus_length = cc.bus_length();
    server_ip = cc.server_ip();
    server_port = cc.server_port();
    server_http_port = cc.server_http_port();
    external_server_ip = cc.external_server_ip();
    external_server_port = cc.external_server_port();
    is_cross_server = cc.is_cross_server();
    route_svr = cc.route_svr();
    server_max_online = cc.server_max_online();
    server_cur_online = cc.server_cur_online();
    server_state = cc.server_state();
    system_info = cc.system_info();
    total_mem = cc.total_mem();
    free_mem = cc.free_mem();
    used_mem = cc.used_mem();
    proc_cpu = cc.proc_cpu();
    proc_mem = cc.proc_mem();
    proc_thread = cc.proc_thread();
    proc_name = cc.proc_name();
    proc_cwd = cc.proc_cwd();
    proc_pid = cc.proc_pid();
    last_date = cc.last_date();
    last_time = cc.last_time();
    contract_info = cc.contract_info();
    machine_addr = cc.machine_addr();
    db_name_list.clear();
    for (int i = 0; i < cc.db_name_list_size(); ++i)
    {
        db_name_list.push_back(cc.db_name_list(i));
    }
    msg_id.clear();
    for (int i = 0; i < cc.msg_id_size(); ++i)
    {
        msg_id.push_back(cc.msg_id(i));
    }
    map_id_list.clear();
    for (int i = 0; i < cc.map_id_list_size(); ++i)
    {
        map_id_list.push_back(cc.map_id_list(i));
    }
    return true;
}

void ServerInfoReport::ToPb(NFrame::ServerInfoReport* cc) const
{
    cc->set_bus_id(bus_id);
    cc->set_server_id(server_id);
    cc->set_server_type(server_type);
    cc->set_server_name(server_name);
    cc->set_url(url);
    cc->set_link_mode(link_mode);
    cc->set_bus_length(bus_length);
    cc->set_server_ip(server_ip);
    cc->set_server_port(server_port);
    cc->set_server_http_port(server_http_port);
    cc->set_external_server_ip(external_server_ip);
    cc->set_external_server_port(external_server_port);
    cc->set_is_cross_server(is_cross_server);
    cc->set_route_svr(route_svr);
    cc->set_server_max_online(server_max_online);
    cc->set_server_cur_online(server_cur_online);
    cc->set_server_state(server_state);
    cc->set_system_info(system_info);
    cc->set_total_mem(total_mem);
    cc->set_free_mem(free_mem);
    cc->set_used_mem(used_mem);
    cc->set_proc_cpu(proc_cpu);
    cc->set_proc_mem(proc_mem);
    cc->set_proc_thread(proc_thread);
    cc->set_proc_name(proc_name);
    cc->set_proc_cwd(proc_cwd);
    cc->set_proc_pid(proc_pid);
    cc->set_last_date(last_date);
    cc->set_last_time(last_time);
    cc->set_contract_info(contract_info);
    cc->set_machine_addr(machine_addr);
    cc->clear_db_name_list();
    for (auto iter = db_name_list.begin(); iter != db_name_list.end(); ++iter)
    {
        cc->add_db_name_list(*iter);
    }
    cc->clear_msg_id();
    for (auto iter = msg_id.begin(); iter != msg_id.end(); ++iter)
    {
        cc->add_msg_id(*iter);
    }
    cc->clear_map_id_list();
    for (auto iter = map_id_list.begin(); iter != map_id_list.end(); ++iter)
    {
        cc->add_map_id_list(*iter);
    }
    return;
}

NFrame::ServerInfoReport ServerInfoReport::ToPb() const
{
    NFrame::ServerInfoReport cc;
    ToPb(&cc);
    return cc;
}

std::string ServerInfoReport::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "bus_id:" << bus_id << ", ";
    ss << "server_id:" << "\"" << server_id << "\"" << ", ";
    ss << "server_type:" << server_type << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "url:" << "\"" << url << "\"" << ", ";
    ss << "link_mode:" << "\"" << link_mode << "\"" << ", ";
    ss << "bus_length:" << bus_length << ", ";
    ss << "server_ip:" << "\"" << server_ip << "\"" << ", ";
    ss << "server_port:" << server_port << ", ";
    ss << "server_http_port:" << server_http_port << ", ";
    ss << "external_server_ip:" << "\"" << external_server_ip << "\"" << ", ";
    ss << "external_server_port:" << external_server_port << ", ";
    ss << "is_cross_server:" << is_cross_server << ", ";
    ss << "route_svr:" << "\"" << route_svr << "\"" << ", ";
    ss << "server_max_online:" << server_max_online << ", ";
    ss << "server_cur_online:" << server_cur_online << ", ";
    ss << "server_state:" << server_state << ", ";
    ss << "system_info:" << "\"" << system_info << "\"" << ", ";
    ss << "total_mem:" << total_mem << ", ";
    ss << "free_mem:" << free_mem << ", ";
    ss << "used_mem:" << used_mem << ", ";
    ss << "proc_cpu:" << proc_cpu << ", ";
    ss << "proc_mem:" << proc_mem << ", ";
    ss << "proc_thread:" << proc_thread << ", ";
    ss << "proc_name:" << "\"" << proc_name << "\"" << ", ";
    ss << "proc_cwd:" << "\"" << proc_cwd << "\"" << ", ";
    ss << "proc_pid:" << proc_pid << ", ";
    ss << "last_date:" << "\"" << last_date << "\"" << ", ";
    ss << "last_time:" << last_time << ", ";
    ss << "contract_info:" << "\"" << contract_info << "\"" << ", ";
    ss << "machine_addr:" << "\"" << machine_addr << "\"" << ", ";
    ss << "db_name_list(" << db_name_list.size()<< "):[";
    for (auto iter = db_name_list.begin(); iter != db_name_list.end(); ++iter)
    {
        ss << "\"" << *iter << "\"";
    }
;
    ss << "msg_id(" << msg_id.size()<< "):[";
    for (auto iter = msg_id.begin(); iter != msg_id.end(); ++iter)
    {
        ss << *iter;
    }
;
    ss << "map_id_list(" << map_id_list.size()<< "):[";
    for (auto iter = map_id_list.begin(); iter != map_id_list.end(); ++iter)
    {
        ss << *iter;
    }
;
    ss << "}";
    return ss.str();
}

ServerInfoReportList::ServerInfoReportList()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

ServerInfoReportList::~ServerInfoReportList()
{
}

ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

ServerInfoReportList& ServerInfoReportList::operator=(const ServerInfoReportList& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void ServerInfoReportList::CopyData(const ServerInfoReportList& stArgsData)
{
    server_list.clear();
    server_list = stArgsData.server_list;
}

int ServerInfoReportList::CreateInit()
{
	return 0;
}

int ServerInfoReportList::ResumeInit()
{
	return 0;
}

void ServerInfoReportList::Init()
{
}

bool ServerInfoReportList::FromPb(const NFrame::ServerInfoReportList& cc)
{
    server_list.clear();
    for (int i = 0; i < cc.server_list_size(); ++i)
    {
        ServerInfoReport temp;
        if (!temp.FromPb(cc.server_list(i)))
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("FromPb Failed, struct:ServerInfoReportList, field:server_list, cur count:%d", cc.server_list_size());
            return false;
        }
        server_list.push_back(temp);
    }
    return true;
}

void ServerInfoReportList::ToPb(NFrame::ServerInfoReportList* cc) const
{
    cc->clear_server_list();
    for (auto iter = server_list.begin(); iter != server_list.end(); ++iter)
    {
        iter->ToPb(cc->add_server_list());
    }
    return;
}

NFrame::ServerInfoReportList ServerInfoReportList::ToPb() const
{
    NFrame::ServerInfoReportList cc;
    ToPb(&cc);
    return cc;
}

std::string ServerInfoReportList::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_list(" << server_list.size()<< "):[";
    for (auto iter = server_list.begin(); iter != server_list.end(); ++iter)
    {
        ss << iter->ShortDebugString();
    }
;
    ss << "}";
    return ss.str();
}

ServerInfoReportListRespne::ServerInfoReportListRespne()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

ServerInfoReportListRespne::~ServerInfoReportListRespne()
{
}

ServerInfoReportListRespne::ServerInfoReportListRespne(const ServerInfoReportListRespne& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

ServerInfoReportListRespne& ServerInfoReportListRespne::operator=(const ServerInfoReportListRespne& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void ServerInfoReportListRespne::CopyData(const ServerInfoReportListRespne& stArgsData)
{
    ret_code = stArgsData.ret_code;
}

int ServerInfoReportListRespne::CreateInit()
{
    ret_code = 0;
	return 0;
}

int ServerInfoReportListRespne::ResumeInit()
{
	return 0;
}

void ServerInfoReportListRespne::Init()
{
    ret_code = 0;
}

bool ServerInfoReportListRespne::FromPb(const NFrame::ServerInfoReportListRespne& cc)
{
    ret_code = cc.ret_code();
    return true;
}

void ServerInfoReportListRespne::ToPb(NFrame::ServerInfoReportListRespne* cc) const
{
    cc->set_ret_code(ret_code);
    return;
}

NFrame::ServerInfoReportListRespne ServerInfoReportListRespne::ToPb() const
{
    NFrame::ServerInfoReportListRespne cc;
    ToPb(&cc);
    return cc;
}

std::string ServerInfoReportListRespne::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "ret_code:" << ret_code;
    ss << "}";
    return ss.str();
}

ZkServerInfo::ZkServerInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

ZkServerInfo::~ZkServerInfo()
{
}

ZkServerInfo::ZkServerInfo(const ZkServerInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

ZkServerInfo& ZkServerInfo::operator=(const ZkServerInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void ZkServerInfo::CopyData(const ZkServerInfo& stArgsData)
{
    bus_url = stArgsData.bus_url;
    tcp_url = stArgsData.tcp_url;
}

int ZkServerInfo::CreateInit()
{
	return 0;
}

int ZkServerInfo::ResumeInit()
{
	return 0;
}

void ZkServerInfo::Init()
{
}

bool ZkServerInfo::FromPb(const NFrame::ZkServerInfo& cc)
{
    bus_url = cc.bus_url();
    tcp_url = cc.tcp_url();
    return true;
}

void ZkServerInfo::ToPb(NFrame::ZkServerInfo* cc) const
{
    cc->set_bus_url(bus_url);
    cc->set_tcp_url(tcp_url);
    return;
}

NFrame::ZkServerInfo ZkServerInfo::ToPb() const
{
    NFrame::ZkServerInfo cc;
    ToPb(&cc);
    return cc;
}

std::string ZkServerInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "bus_url:" << "\"" << bus_url << "\"" << ", ";
    ss << "tcp_url:" << "\"" << tcp_url << "\"";
    ss << "}";
    return ss.str();
}

DynLibFileInfo::DynLibFileInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

DynLibFileInfo::~DynLibFileInfo()
{
}

DynLibFileInfo::DynLibFileInfo(const DynLibFileInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

DynLibFileInfo& DynLibFileInfo::operator=(const DynLibFileInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void DynLibFileInfo::CopyData(const DynLibFileInfo& stArgsData)
{
    file_md5 = stArgsData.file_md5;
    file_size = stArgsData.file_size;
}

int DynLibFileInfo::CreateInit()
{
    file_size = 0;
	return 0;
}

int DynLibFileInfo::ResumeInit()
{
	return 0;
}

void DynLibFileInfo::Init()
{
    file_size = 0;
}

bool DynLibFileInfo::FromPb(const NFrame::DynLibFileInfo& cc)
{
    file_md5 = cc.file_md5();
    file_size = cc.file_size();
    return true;
}

void DynLibFileInfo::ToPb(NFrame::DynLibFileInfo* cc) const
{
    cc->set_file_md5(file_md5);
    cc->set_file_size(file_size);
    return;
}

NFrame::DynLibFileInfo DynLibFileInfo::ToPb() const
{
    NFrame::DynLibFileInfo cc;
    ToPb(&cc);
    return cc;
}

std::string DynLibFileInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "file_md5:" << "\"" << file_md5 << "\"" << ", ";
    ss << "file_size:" << file_size;
    ss << "}";
    return ss.str();
}

DynLibFileInfoArray::DynLibFileInfoArray()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

DynLibFileInfoArray::~DynLibFileInfoArray()
{
}

DynLibFileInfoArray::DynLibFileInfoArray(const DynLibFileInfoArray& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

DynLibFileInfoArray& DynLibFileInfoArray::operator=(const DynLibFileInfoArray& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void DynLibFileInfoArray::CopyData(const DynLibFileInfoArray& stArgsData)
{
    file_list.clear();
    file_list = stArgsData.file_list;
}

int DynLibFileInfoArray::CreateInit()
{
	return 0;
}

int DynLibFileInfoArray::ResumeInit()
{
	return 0;
}

void DynLibFileInfoArray::Init()
{
}

bool DynLibFileInfoArray::FromPb(const NFrame::DynLibFileInfoArray& cc)
{
    file_list.clear();
    for (int i = 0; i < cc.file_list_size(); ++i)
    {
        DynLibFileInfo temp;
        if (!temp.FromPb(cc.file_list(i)))
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("FromPb Failed, struct:DynLibFileInfoArray, field:file_list, cur count:%d", cc.file_list_size());
            return false;
        }
        file_list.push_back(temp);
    }
    return true;
}

void DynLibFileInfoArray::ToPb(NFrame::DynLibFileInfoArray* cc) const
{
    cc->clear_file_list();
    for (auto iter = file_list.begin(); iter != file_list.end(); ++iter)
    {
        iter->ToPb(cc->add_file_list());
    }
    return;
}

NFrame::DynLibFileInfoArray DynLibFileInfoArray::ToPb() const
{
    NFrame::DynLibFileInfoArray cc;
    ToPb(&cc);
    return cc;
}

std::string DynLibFileInfoArray::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "file_list(" << file_list.size()<< "):[";
    for (auto iter = file_list.begin(); iter != file_list.end(); ++iter)
    {
        ss << iter->ShortDebugString();
    }
;
    ss << "}";
    return ss.str();
}

Proto_KillAllServerNtf::Proto_KillAllServerNtf()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_KillAllServerNtf::~Proto_KillAllServerNtf()
{
}

Proto_KillAllServerNtf::Proto_KillAllServerNtf(const Proto_KillAllServerNtf& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_KillAllServerNtf& Proto_KillAllServerNtf::operator=(const Proto_KillAllServerNtf& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_KillAllServerNtf::CopyData(const Proto_KillAllServerNtf& stArgsData)
{
}

int Proto_KillAllServerNtf::CreateInit()
{
	return 0;
}

int Proto_KillAllServerNtf::ResumeInit()
{
	return 0;
}

void Proto_KillAllServerNtf::Init()
{
}

bool Proto_KillAllServerNtf::FromPb(const NFrame::Proto_KillAllServerNtf& cc)
{
    return true;
}

void Proto_KillAllServerNtf::ToPb(NFrame::Proto_KillAllServerNtf* cc) const
{
    return;
}

NFrame::Proto_KillAllServerNtf Proto_KillAllServerNtf::ToPb() const
{
    NFrame::Proto_KillAllServerNtf cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_KillAllServerNtf::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "}";
    return ss.str();
}

Proto_KillAllServerRsp::Proto_KillAllServerRsp()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_KillAllServerRsp::~Proto_KillAllServerRsp()
{
}

Proto_KillAllServerRsp::Proto_KillAllServerRsp(const Proto_KillAllServerRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_KillAllServerRsp& Proto_KillAllServerRsp::operator=(const Proto_KillAllServerRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_KillAllServerRsp::CopyData(const Proto_KillAllServerRsp& stArgsData)
{
    result = stArgsData.result;
}

int Proto_KillAllServerRsp::CreateInit()
{
    result = 0;
	return 0;
}

int Proto_KillAllServerRsp::ResumeInit()
{
	return 0;
}

void Proto_KillAllServerRsp::Init()
{
    result = 0;
}

bool Proto_KillAllServerRsp::FromPb(const NFrame::Proto_KillAllServerRsp& cc)
{
    result = cc.result();
    return true;
}

void Proto_KillAllServerRsp::ToPb(NFrame::Proto_KillAllServerRsp* cc) const
{
    cc->set_result(result);
    return;
}

NFrame::Proto_KillAllServerRsp Proto_KillAllServerRsp::ToPb() const
{
    NFrame::Proto_KillAllServerRsp cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_KillAllServerRsp::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "result:" << result;
    ss << "}";
    return ss.str();
}

Proto_STSBroadPlayerMsgNotify::Proto_STSBroadPlayerMsgNotify()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_STSBroadPlayerMsgNotify::~Proto_STSBroadPlayerMsgNotify()
{
}

Proto_STSBroadPlayerMsgNotify::Proto_STSBroadPlayerMsgNotify(const Proto_STSBroadPlayerMsgNotify& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_STSBroadPlayerMsgNotify& Proto_STSBroadPlayerMsgNotify::operator=(const Proto_STSBroadPlayerMsgNotify& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_STSBroadPlayerMsgNotify::CopyData(const Proto_STSBroadPlayerMsgNotify& stArgsData)
{
    user_id.clear();
    user_id = stArgsData.user_id;
    msg_id = stArgsData.msg_id;
    msg_data = stArgsData.msg_data;
}

int Proto_STSBroadPlayerMsgNotify::CreateInit()
{
    msg_id = 0;
	return 0;
}

int Proto_STSBroadPlayerMsgNotify::ResumeInit()
{
	return 0;
}

void Proto_STSBroadPlayerMsgNotify::Init()
{
    msg_id = 0;
}

bool Proto_STSBroadPlayerMsgNotify::FromPb(const NFrame::Proto_STSBroadPlayerMsgNotify& cc)
{
    user_id.clear();
    for (int i = 0; i < cc.user_id_size(); ++i)
    {
        user_id.push_back(cc.user_id(i));
    }
    msg_id = cc.msg_id();
    msg_data = cc.msg_data();
    return true;
}

void Proto_STSBroadPlayerMsgNotify::ToPb(NFrame::Proto_STSBroadPlayerMsgNotify* cc) const
{
    cc->clear_user_id();
    for (auto iter = user_id.begin(); iter != user_id.end(); ++iter)
    {
        cc->add_user_id(*iter);
    }
    cc->set_msg_id(msg_id);
    cc->set_msg_data(msg_data);
    return;
}

NFrame::Proto_STSBroadPlayerMsgNotify Proto_STSBroadPlayerMsgNotify::ToPb() const
{
    NFrame::Proto_STSBroadPlayerMsgNotify cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_STSBroadPlayerMsgNotify::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "user_id(" << user_id.size()<< "):[";
    for (auto iter = user_id.begin(); iter != user_id.end(); ++iter)
    {
        ss << *iter;
    }
;
    ss << "msg_id:" << msg_id << ", ";
    ss << "msg_data:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

Proto_STWebMsgRspNotify::Proto_STWebMsgRspNotify()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_STWebMsgRspNotify::~Proto_STWebMsgRspNotify()
{
}

Proto_STWebMsgRspNotify::Proto_STWebMsgRspNotify(const Proto_STWebMsgRspNotify& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_STWebMsgRspNotify& Proto_STWebMsgRspNotify::operator=(const Proto_STWebMsgRspNotify& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_STWebMsgRspNotify::CopyData(const Proto_STWebMsgRspNotify& stArgsData)
{
    request_id = stArgsData.request_id;
    result = stArgsData.result;
    err_msg = stArgsData.err_msg;
}

int Proto_STWebMsgRspNotify::CreateInit()
{
    request_id = 0;
    result = 0;
	return 0;
}

int Proto_STWebMsgRspNotify::ResumeInit()
{
	return 0;
}

void Proto_STWebMsgRspNotify::Init()
{
    request_id = 0;
    result = 0;
}

bool Proto_STWebMsgRspNotify::FromPb(const NFrame::Proto_STWebMsgRspNotify& cc)
{
    request_id = cc.request_id();
    result = cc.result();
    err_msg = cc.err_msg();
    return true;
}

void Proto_STWebMsgRspNotify::ToPb(NFrame::Proto_STWebMsgRspNotify* cc) const
{
    cc->set_request_id(request_id);
    cc->set_result(result);
    cc->set_err_msg(err_msg);
    return;
}

NFrame::Proto_STWebMsgRspNotify Proto_STWebMsgRspNotify::ToPb() const
{
    NFrame::Proto_STWebMsgRspNotify cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_STWebMsgRspNotify::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "request_id:" << request_id << ", ";
    ss << "result:" << result << ", ";
    ss << "err_msg:" << "\"" << err_msg << "\"";
    ss << "}";
    return ss.str();
}

NFEventNoneData::NFEventNoneData()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

NFEventNoneData::~NFEventNoneData()
{
}

NFEventNoneData::NFEventNoneData(const NFEventNoneData& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

NFEventNoneData& NFEventNoneData::operator=(const NFEventNoneData& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void NFEventNoneData::CopyData(const NFEventNoneData& stArgsData)
{
    param1 = stArgsData.param1;
    param2 = stArgsData.param2;
    param3 = stArgsData.param3;
    param4 = stArgsData.param4;
    param5 = stArgsData.param5;
}

int NFEventNoneData::CreateInit()
{
    param1 = 0;
    param2 = 0;
    param3 = 0;
    param4 = 0;
    param5 = 0;
	return 0;
}

int NFEventNoneData::ResumeInit()
{
	return 0;
}

void NFEventNoneData::Init()
{
    param1 = 0;
    param2 = 0;
    param3 = 0;
    param4 = 0;
    param5 = 0;
}

bool NFEventNoneData::FromPb(const NFrame::NFEventNoneData& cc)
{
    param1 = cc.param1();
    param2 = cc.param2();
    param3 = cc.param3();
    param4 = cc.param4();
    param5 = cc.param5();
    return true;
}

void NFEventNoneData::ToPb(NFrame::NFEventNoneData* cc) const
{
    cc->set_param1(param1);
    cc->set_param2(param2);
    cc->set_param3(param3);
    cc->set_param4(param4);
    cc->set_param5(param5);
    return;
}

NFrame::NFEventNoneData NFEventNoneData::ToPb() const
{
    NFrame::NFEventNoneData cc;
    ToPb(&cc);
    return cc;
}

std::string NFEventNoneData::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "param1:" << param1 << ", ";
    ss << "param2:" << param2 << ", ";
    ss << "param3:" << param3 << ", ";
    ss << "param4:" << param4 << ", ";
    ss << "param5:" << param5;
    ss << "}";
    return ss.str();
}

NFEventScriptData::NFEventScriptData()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

NFEventScriptData::~NFEventScriptData()
{
}

NFEventScriptData::NFEventScriptData(const NFEventScriptData& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

NFEventScriptData& NFEventScriptData::operator=(const NFEventScriptData& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void NFEventScriptData::CopyData(const NFEventScriptData& stArgsData)
{
    event_type = stArgsData.event_type;
    event_data = stArgsData.event_data;
}

int NFEventScriptData::CreateInit()
{
	return 0;
}

int NFEventScriptData::ResumeInit()
{
	return 0;
}

void NFEventScriptData::Init()
{
}

bool NFEventScriptData::FromPb(const NFrame::NFEventScriptData& cc)
{
    event_type = cc.event_type();
    event_data = cc.event_data();
    return true;
}

void NFEventScriptData::ToPb(NFrame::NFEventScriptData* cc) const
{
    cc->set_event_type(event_type);
    cc->set_event_data(event_data);
    return;
}

NFrame::NFEventScriptData NFEventScriptData::ToPb() const
{
    NFrame::NFEventScriptData cc;
    ToPb(&cc);
    return cc;
}

std::string NFEventScriptData::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "event_type:" << "\"" << event_type << "\"" << ", ";
    ss << "event_data:" << "\"" << event_data << "\"";
    ss << "}";
    return ss.str();
}

Proto_ServerDumpInfoNtf::Proto_ServerDumpInfoNtf()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_ServerDumpInfoNtf::~Proto_ServerDumpInfoNtf()
{
}

Proto_ServerDumpInfoNtf::Proto_ServerDumpInfoNtf(const Proto_ServerDumpInfoNtf& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_ServerDumpInfoNtf& Proto_ServerDumpInfoNtf::operator=(const Proto_ServerDumpInfoNtf& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_ServerDumpInfoNtf::CopyData(const Proto_ServerDumpInfoNtf& stArgsData)
{
    dump_info = stArgsData.dump_info;
    bus_id = stArgsData.bus_id;
}

int Proto_ServerDumpInfoNtf::CreateInit()
{
    bus_id = 0;
	return 0;
}

int Proto_ServerDumpInfoNtf::ResumeInit()
{
	return 0;
}

void Proto_ServerDumpInfoNtf::Init()
{
    bus_id = 0;
}

bool Proto_ServerDumpInfoNtf::FromPb(const NFrame::Proto_ServerDumpInfoNtf& cc)
{
    dump_info = cc.dump_info();
    bus_id = cc.bus_id();
    return true;
}

void Proto_ServerDumpInfoNtf::ToPb(NFrame::Proto_ServerDumpInfoNtf* cc) const
{
    cc->set_dump_info(dump_info);
    cc->set_bus_id(bus_id);
    return;
}

NFrame::Proto_ServerDumpInfoNtf Proto_ServerDumpInfoNtf::ToPb() const
{
    NFrame::Proto_ServerDumpInfoNtf cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_ServerDumpInfoNtf::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "dump_info:" << "\"" << dump_info << "\"" << ", ";
    ss << "bus_id:" << bus_id;
    ss << "}";
    return ss.str();
}









/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(Proto_FramePkg, disp_info) < 65536 && pb_membersize(Proto_FramePkg, trans_info) < 65536 && pb_membersize(Proto_FramePkg, store_info) < 65536 && pb_membersize(Proto_FramePkg, event_info) < 65536 && pb_membersize(Proto_FramePkg, redirect_info) < 65536 && pb_membersize(Proto_FramePkg, rpc_info) < 65536 && pb_membersize(ServerInfoReportList, server_list[0]) < 65536 && pb_membersize(DynLibFileInfoArray, file_list[0]) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_Proto_DispInfo_Proto_TransInfo_Proto_StoreInfo_Proto_EventInfo_Proto_ScriptRpcResult_Proto_RpcInfo_Proto_RedirectInfo_Proto_FramePkg_ServerInfoReport_ServerInfoReportList_ServerInfoReportListRespne_ZkServerInfo_DynLibFileInfo_DynLibFileInfoArray_Proto_KillAllServerNtf_Proto_KillAllServerRsp_Proto_STSBroadPlayerMsgNotify_Proto_STWebMsgRspNotify_NFEventNoneData_NFEventScriptData_Proto_ServerDumpInfoNtf)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_16BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in the default
 * 8 bit descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(Proto_FramePkg, disp_info) < 256 && pb_membersize(Proto_FramePkg, trans_info) < 256 && pb_membersize(Proto_FramePkg, store_info) < 256 && pb_membersize(Proto_FramePkg, event_info) < 256 && pb_membersize(Proto_FramePkg, redirect_info) < 256 && pb_membersize(Proto_FramePkg, rpc_info) < 256 && pb_membersize(ServerInfoReportList, server_list[0]) < 256 && pb_membersize(DynLibFileInfoArray, file_list[0]) < 256), YOU_MUST_DEFINE_PB_FIELD_16BIT_FOR_MESSAGES_Proto_DispInfo_Proto_TransInfo_Proto_StoreInfo_Proto_EventInfo_Proto_ScriptRpcResult_Proto_RpcInfo_Proto_RedirectInfo_Proto_FramePkg_ServerInfoReport_ServerInfoReportList_ServerInfoReportListRespne_ZkServerInfo_DynLibFileInfo_DynLibFileInfoArray_Proto_KillAllServerNtf_Proto_KillAllServerRsp_Proto_STSBroadPlayerMsgNotify_Proto_STWebMsgRspNotify_NFEventNoneData_NFEventScriptData_Proto_ServerDumpInfoNtf)
#endif


/* On some platforms (such as AVR), double is really float.
 * These are not directly supported by nanopb, but see example_avr_double.
 * To get rid of this error, remove any double fields from your .proto.
 */
PB_STATIC_ASSERT(sizeof(double) == 8, DOUBLE_MUST_BE_8_BYTES)

/* @@protoc_insertion_point(eof) */
