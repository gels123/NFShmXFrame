// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameTestComm.proto

#ifndef PROTOBUF_INCLUDED_FrameTestComm_2eproto
#define PROTOBUF_INCLUDED_FrameTestComm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
#include "FrameTestEnum.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FrameTestComm_2eproto 

namespace protobuf_FrameTestComm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FrameTestComm_2eproto
namespace NFrameComm {
class BevLogTest;
class BevLogTestDefaultTypeInternal;
extern BevLogTestDefaultTypeInternal _BevLogTest_default_instance_;
class BevLogTestItem;
class BevLogTestItemDefaultTypeInternal;
extern BevLogTestItemDefaultTypeInternal _BevLogTestItem_default_instance_;
class WelfareNodeDBDataGetTaskManual;
class WelfareNodeDBDataGetTaskManualDefaultTypeInternal;
extern WelfareNodeDBDataGetTaskManualDefaultTypeInternal _WelfareNodeDBDataGetTaskManual_default_instance_;
class WelfareNodeDBDataPddBuy;
class WelfareNodeDBDataPddBuyDefaultTypeInternal;
extern WelfareNodeDBDataPddBuyDefaultTypeInternal _WelfareNodeDBDataPddBuy_default_instance_;
class WelfareNodeDBDataPddOpen;
class WelfareNodeDBDataPddOpenDefaultTypeInternal;
extern WelfareNodeDBDataPddOpenDefaultTypeInternal _WelfareNodeDBDataPddOpen_default_instance_;
class WelfareNodeDBDataUnion;
class WelfareNodeDBDataUnionDefaultTypeInternal;
extern WelfareNodeDBDataUnionDefaultTypeInternal _WelfareNodeDBDataUnion_default_instance_;
class wxWorkRobotTextTest;
class wxWorkRobotTextTestDefaultTypeInternal;
extern wxWorkRobotTextTestDefaultTypeInternal _wxWorkRobotTextTest_default_instance_;
}  // namespace NFrameComm
namespace google {
namespace protobuf {
template<> ::NFrameComm::BevLogTest* Arena::CreateMaybeMessage<::NFrameComm::BevLogTest>(Arena*);
template<> ::NFrameComm::BevLogTestItem* Arena::CreateMaybeMessage<::NFrameComm::BevLogTestItem>(Arena*);
template<> ::NFrameComm::WelfareNodeDBDataGetTaskManual* Arena::CreateMaybeMessage<::NFrameComm::WelfareNodeDBDataGetTaskManual>(Arena*);
template<> ::NFrameComm::WelfareNodeDBDataPddBuy* Arena::CreateMaybeMessage<::NFrameComm::WelfareNodeDBDataPddBuy>(Arena*);
template<> ::NFrameComm::WelfareNodeDBDataPddOpen* Arena::CreateMaybeMessage<::NFrameComm::WelfareNodeDBDataPddOpen>(Arena*);
template<> ::NFrameComm::WelfareNodeDBDataUnion* Arena::CreateMaybeMessage<::NFrameComm::WelfareNodeDBDataUnion>(Arena*);
template<> ::NFrameComm::wxWorkRobotTextTest* Arena::CreateMaybeMessage<::NFrameComm::wxWorkRobotTextTest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFrameComm {

// ===================================================================

class wxWorkRobotTextTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrameComm.wxWorkRobotTextTest) */ {
 public:
  wxWorkRobotTextTest();
  virtual ~wxWorkRobotTextTest();

  wxWorkRobotTextTest(const wxWorkRobotTextTest& from);

  inline wxWorkRobotTextTest& operator=(const wxWorkRobotTextTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  wxWorkRobotTextTest(wxWorkRobotTextTest&& from) noexcept
    : wxWorkRobotTextTest() {
    *this = ::std::move(from);
  }

  inline wxWorkRobotTextTest& operator=(wxWorkRobotTextTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const wxWorkRobotTextTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const wxWorkRobotTextTest* internal_default_instance() {
    return reinterpret_cast<const wxWorkRobotTextTest*>(
               &_wxWorkRobotTextTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(wxWorkRobotTextTest* other);
  friend void swap(wxWorkRobotTextTest& a, wxWorkRobotTextTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline wxWorkRobotTextTest* New() const final {
    return CreateMaybeMessage<wxWorkRobotTextTest>(NULL);
  }

  wxWorkRobotTextTest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<wxWorkRobotTextTest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const wxWorkRobotTextTest& from);
  void MergeFrom(const wxWorkRobotTextTest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(wxWorkRobotTextTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string test_string_repeated = 3 [(.nanopb) = {
  int test_string_repeated_size() const;
  void clear_test_string_repeated();
  static const int kTestStringRepeatedFieldNumber = 3;
  const ::std::string& test_string_repeated(int index) const;
  ::std::string* mutable_test_string_repeated(int index);
  void set_test_string_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_repeated(int index, ::std::string&& value);
  #endif
  void set_test_string_repeated(int index, const char* value);
  void set_test_string_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_string_repeated();
  void add_test_string_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_repeated(::std::string&& value);
  #endif
  void add_test_string_repeated(const char* value);
  void add_test_string_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_repeated();

  // repeated string test_string_stl_repeated = 4 [(.nanopb) = {
  int test_string_stl_repeated_size() const;
  void clear_test_string_stl_repeated();
  static const int kTestStringStlRepeatedFieldNumber = 4;
  const ::std::string& test_string_stl_repeated(int index) const;
  ::std::string* mutable_test_string_stl_repeated(int index);
  void set_test_string_stl_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_repeated(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_repeated(int index, const char* value);
  void set_test_string_stl_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_repeated();
  void add_test_string_stl_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_repeated(::std::string&& value);
  #endif
  void add_test_string_stl_repeated(const char* value);
  void add_test_string_stl_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_repeated();

  // repeated string test_string_stl_vector = 5 [(.nanopb) = {
  int test_string_stl_vector_size() const;
  void clear_test_string_stl_vector();
  static const int kTestStringStlVectorFieldNumber = 5;
  const ::std::string& test_string_stl_vector(int index) const;
  ::std::string* mutable_test_string_stl_vector(int index);
  void set_test_string_stl_vector(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_vector(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_vector(int index, const char* value);
  void set_test_string_stl_vector(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_vector();
  void add_test_string_stl_vector(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_vector(::std::string&& value);
  #endif
  void add_test_string_stl_vector(const char* value);
  void add_test_string_stl_vector(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_vector() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_vector();

  // repeated string test_string_stl_list = 6 [(.nanopb) = {
  int test_string_stl_list_size() const;
  void clear_test_string_stl_list();
  static const int kTestStringStlListFieldNumber = 6;
  const ::std::string& test_string_stl_list(int index) const;
  ::std::string* mutable_test_string_stl_list(int index);
  void set_test_string_stl_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_list(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_list(int index, const char* value);
  void set_test_string_stl_list(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_list();
  void add_test_string_stl_list(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_list(::std::string&& value);
  #endif
  void add_test_string_stl_list(const char* value);
  void add_test_string_stl_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_list();

  // repeated string test_string_stl_unordered_set = 7 [(.nanopb) = {
  int test_string_stl_unordered_set_size() const;
  void clear_test_string_stl_unordered_set();
  static const int kTestStringStlUnorderedSetFieldNumber = 7;
  const ::std::string& test_string_stl_unordered_set(int index) const;
  ::std::string* mutable_test_string_stl_unordered_set(int index);
  void set_test_string_stl_unordered_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_unordered_set(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_unordered_set(int index, const char* value);
  void set_test_string_stl_unordered_set(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_unordered_set();
  void add_test_string_stl_unordered_set(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_unordered_set(::std::string&& value);
  #endif
  void add_test_string_stl_unordered_set(const char* value);
  void add_test_string_stl_unordered_set(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_unordered_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_unordered_set();

  // repeated int32 test_int_vector = 8 [(.nanopb) = {
  int test_int_vector_size() const;
  void clear_test_int_vector();
  static const int kTestIntVectorFieldNumber = 8;
  ::google::protobuf::int32 test_int_vector(int index) const;
  void set_test_int_vector(int index, ::google::protobuf::int32 value);
  void add_test_int_vector(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int_vector() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int_vector();

  // repeated int32 test_int_list = 9 [(.nanopb) = {
  int test_int_list_size() const;
  void clear_test_int_list();
  static const int kTestIntListFieldNumber = 9;
  ::google::protobuf::int32 test_int_list(int index) const;
  void set_test_int_list(int index, ::google::protobuf::int32 value);
  void add_test_int_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int_list();

  // repeated int32 test_int_unordered_set = 10 [(.nanopb) = {
  int test_int_unordered_set_size() const;
  void clear_test_int_unordered_set();
  static const int kTestIntUnorderedSetFieldNumber = 10;
  ::google::protobuf::int32 test_int_unordered_set(int index) const;
  void set_test_int_unordered_set(int index, ::google::protobuf::int32 value);
  void add_test_int_unordered_set(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int_unordered_set() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int_unordered_set();

  // repeated string test_bytes_repeated = 13 [(.nanopb) = {
  int test_bytes_repeated_size() const;
  void clear_test_bytes_repeated();
  static const int kTestBytesRepeatedFieldNumber = 13;
  const ::std::string& test_bytes_repeated(int index) const;
  ::std::string* mutable_test_bytes_repeated(int index);
  void set_test_bytes_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_repeated(int index, ::std::string&& value);
  #endif
  void set_test_bytes_repeated(int index, const char* value);
  void set_test_bytes_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_repeated();
  void add_test_bytes_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_repeated(::std::string&& value);
  #endif
  void add_test_bytes_repeated(const char* value);
  void add_test_bytes_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_repeated();

  // repeated string test_bytes_stl_repeated = 14 [(.nanopb) = {
  int test_bytes_stl_repeated_size() const;
  void clear_test_bytes_stl_repeated();
  static const int kTestBytesStlRepeatedFieldNumber = 14;
  const ::std::string& test_bytes_stl_repeated(int index) const;
  ::std::string* mutable_test_bytes_stl_repeated(int index);
  void set_test_bytes_stl_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_repeated(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_repeated(int index, const char* value);
  void set_test_bytes_stl_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_repeated();
  void add_test_bytes_stl_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_repeated(::std::string&& value);
  #endif
  void add_test_bytes_stl_repeated(const char* value);
  void add_test_bytes_stl_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_repeated();

  // repeated string test_bytes_stl_vector = 15 [(.nanopb) = {
  int test_bytes_stl_vector_size() const;
  void clear_test_bytes_stl_vector();
  static const int kTestBytesStlVectorFieldNumber = 15;
  const ::std::string& test_bytes_stl_vector(int index) const;
  ::std::string* mutable_test_bytes_stl_vector(int index);
  void set_test_bytes_stl_vector(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_vector(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_vector(int index, const char* value);
  void set_test_bytes_stl_vector(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_vector();
  void add_test_bytes_stl_vector(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_vector(::std::string&& value);
  #endif
  void add_test_bytes_stl_vector(const char* value);
  void add_test_bytes_stl_vector(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_vector() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_vector();

  // repeated string test_bytes_stl_list = 16 [(.nanopb) = {
  int test_bytes_stl_list_size() const;
  void clear_test_bytes_stl_list();
  static const int kTestBytesStlListFieldNumber = 16;
  const ::std::string& test_bytes_stl_list(int index) const;
  ::std::string* mutable_test_bytes_stl_list(int index);
  void set_test_bytes_stl_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_list(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_list(int index, const char* value);
  void set_test_bytes_stl_list(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_list();
  void add_test_bytes_stl_list(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_list(::std::string&& value);
  #endif
  void add_test_bytes_stl_list(const char* value);
  void add_test_bytes_stl_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_list();

  // repeated string test_bytes_stl_unordered_set = 17 [(.nanopb) = {
  int test_bytes_stl_unordered_set_size() const;
  void clear_test_bytes_stl_unordered_set();
  static const int kTestBytesStlUnorderedSetFieldNumber = 17;
  const ::std::string& test_bytes_stl_unordered_set(int index) const;
  ::std::string* mutable_test_bytes_stl_unordered_set(int index);
  void set_test_bytes_stl_unordered_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_unordered_set(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_unordered_set(int index, const char* value);
  void set_test_bytes_stl_unordered_set(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_unordered_set();
  void add_test_bytes_stl_unordered_set(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_unordered_set(::std::string&& value);
  #endif
  void add_test_bytes_stl_unordered_set(const char* value);
  void add_test_bytes_stl_unordered_set(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_unordered_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_unordered_set();

  // string test_string = 1 [(.nanopb) = {
  void clear_test_string();
  static const int kTestStringFieldNumber = 1;
  const ::std::string& test_string() const;
  void set_test_string(const ::std::string& value);
  #if LANG_CXX11
  void set_test_string(::std::string&& value);
  #endif
  void set_test_string(const char* value);
  void set_test_string(const char* value, size_t size);
  ::std::string* mutable_test_string();
  ::std::string* release_test_string();
  void set_allocated_test_string(::std::string* test_string);

  // string test_string_stl = 2 [(.nanopb) = {
  void clear_test_string_stl();
  static const int kTestStringStlFieldNumber = 2;
  const ::std::string& test_string_stl() const;
  void set_test_string_stl(const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl(::std::string&& value);
  #endif
  void set_test_string_stl(const char* value);
  void set_test_string_stl(const char* value, size_t size);
  ::std::string* mutable_test_string_stl();
  ::std::string* release_test_string_stl();
  void set_allocated_test_string_stl(::std::string* test_string_stl);

  // string test_bytes = 11 [(.nanopb) = {
  void clear_test_bytes();
  static const int kTestBytesFieldNumber = 11;
  const ::std::string& test_bytes() const;
  void set_test_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes(::std::string&& value);
  #endif
  void set_test_bytes(const char* value);
  void set_test_bytes(const char* value, size_t size);
  ::std::string* mutable_test_bytes();
  ::std::string* release_test_bytes();
  void set_allocated_test_bytes(::std::string* test_bytes);

  // string test_bytes_stl = 12 [(.nanopb) = {
  void clear_test_bytes_stl();
  static const int kTestBytesStlFieldNumber = 12;
  const ::std::string& test_bytes_stl() const;
  void set_test_bytes_stl(const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl(::std::string&& value);
  #endif
  void set_test_bytes_stl(const char* value);
  void set_test_bytes_stl(const char* value, size_t size);
  ::std::string* mutable_test_bytes_stl();
  ::std::string* release_test_bytes_stl();
  void set_allocated_test_bytes_stl(::std::string* test_bytes_stl);

  // uint32 id = 100 [(.nanopb) = {
  void clear_id();
  static const int kIdFieldNumber = 100;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrameComm.wxWorkRobotTextTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_vector_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_unordered_set_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int_vector_;
  mutable int _test_int_vector_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int_list_;
  mutable int _test_int_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int_unordered_set_;
  mutable int _test_int_unordered_set_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_vector_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_unordered_set_;
  ::google::protobuf::internal::ArenaStringPtr test_string_;
  ::google::protobuf::internal::ArenaStringPtr test_string_stl_;
  ::google::protobuf::internal::ArenaStringPtr test_bytes_;
  ::google::protobuf::internal::ArenaStringPtr test_bytes_stl_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameTestComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WelfareNodeDBDataPddBuy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrameComm.WelfareNodeDBDataPddBuy) */ {
 public:
  WelfareNodeDBDataPddBuy();
  virtual ~WelfareNodeDBDataPddBuy();

  WelfareNodeDBDataPddBuy(const WelfareNodeDBDataPddBuy& from);

  inline WelfareNodeDBDataPddBuy& operator=(const WelfareNodeDBDataPddBuy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WelfareNodeDBDataPddBuy(WelfareNodeDBDataPddBuy&& from) noexcept
    : WelfareNodeDBDataPddBuy() {
    *this = ::std::move(from);
  }

  inline WelfareNodeDBDataPddBuy& operator=(WelfareNodeDBDataPddBuy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WelfareNodeDBDataPddBuy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WelfareNodeDBDataPddBuy* internal_default_instance() {
    return reinterpret_cast<const WelfareNodeDBDataPddBuy*>(
               &_WelfareNodeDBDataPddBuy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WelfareNodeDBDataPddBuy* other);
  friend void swap(WelfareNodeDBDataPddBuy& a, WelfareNodeDBDataPddBuy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WelfareNodeDBDataPddBuy* New() const final {
    return CreateMaybeMessage<WelfareNodeDBDataPddBuy>(NULL);
  }

  WelfareNodeDBDataPddBuy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WelfareNodeDBDataPddBuy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WelfareNodeDBDataPddBuy& from);
  void MergeFrom(const WelfareNodeDBDataPddBuy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WelfareNodeDBDataPddBuy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string test_string_repeated = 3 [(.nanopb) = {
  int test_string_repeated_size() const;
  void clear_test_string_repeated();
  static const int kTestStringRepeatedFieldNumber = 3;
  const ::std::string& test_string_repeated(int index) const;
  ::std::string* mutable_test_string_repeated(int index);
  void set_test_string_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_repeated(int index, ::std::string&& value);
  #endif
  void set_test_string_repeated(int index, const char* value);
  void set_test_string_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_string_repeated();
  void add_test_string_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_repeated(::std::string&& value);
  #endif
  void add_test_string_repeated(const char* value);
  void add_test_string_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_repeated();

  // repeated string test_string_stl_repeated = 4 [(.nanopb) = {
  int test_string_stl_repeated_size() const;
  void clear_test_string_stl_repeated();
  static const int kTestStringStlRepeatedFieldNumber = 4;
  const ::std::string& test_string_stl_repeated(int index) const;
  ::std::string* mutable_test_string_stl_repeated(int index);
  void set_test_string_stl_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_repeated(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_repeated(int index, const char* value);
  void set_test_string_stl_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_repeated();
  void add_test_string_stl_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_repeated(::std::string&& value);
  #endif
  void add_test_string_stl_repeated(const char* value);
  void add_test_string_stl_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_repeated();

  // repeated string test_string_stl_vector = 5 [(.nanopb) = {
  int test_string_stl_vector_size() const;
  void clear_test_string_stl_vector();
  static const int kTestStringStlVectorFieldNumber = 5;
  const ::std::string& test_string_stl_vector(int index) const;
  ::std::string* mutable_test_string_stl_vector(int index);
  void set_test_string_stl_vector(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_vector(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_vector(int index, const char* value);
  void set_test_string_stl_vector(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_vector();
  void add_test_string_stl_vector(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_vector(::std::string&& value);
  #endif
  void add_test_string_stl_vector(const char* value);
  void add_test_string_stl_vector(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_vector() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_vector();

  // repeated string test_string_stl_list = 6 [(.nanopb) = {
  int test_string_stl_list_size() const;
  void clear_test_string_stl_list();
  static const int kTestStringStlListFieldNumber = 6;
  const ::std::string& test_string_stl_list(int index) const;
  ::std::string* mutable_test_string_stl_list(int index);
  void set_test_string_stl_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_list(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_list(int index, const char* value);
  void set_test_string_stl_list(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_list();
  void add_test_string_stl_list(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_list(::std::string&& value);
  #endif
  void add_test_string_stl_list(const char* value);
  void add_test_string_stl_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_list();

  // repeated string test_string_stl_unordered_set = 7 [(.nanopb) = {
  int test_string_stl_unordered_set_size() const;
  void clear_test_string_stl_unordered_set();
  static const int kTestStringStlUnorderedSetFieldNumber = 7;
  const ::std::string& test_string_stl_unordered_set(int index) const;
  ::std::string* mutable_test_string_stl_unordered_set(int index);
  void set_test_string_stl_unordered_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl_unordered_set(int index, ::std::string&& value);
  #endif
  void set_test_string_stl_unordered_set(int index, const char* value);
  void set_test_string_stl_unordered_set(int index, const char* value, size_t size);
  ::std::string* add_test_string_stl_unordered_set();
  void add_test_string_stl_unordered_set(const ::std::string& value);
  #if LANG_CXX11
  void add_test_string_stl_unordered_set(::std::string&& value);
  #endif
  void add_test_string_stl_unordered_set(const char* value);
  void add_test_string_stl_unordered_set(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_string_stl_unordered_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_string_stl_unordered_set();

  // repeated int32 test_int_vector = 8 [(.nanopb) = {
  int test_int_vector_size() const;
  void clear_test_int_vector();
  static const int kTestIntVectorFieldNumber = 8;
  ::google::protobuf::int32 test_int_vector(int index) const;
  void set_test_int_vector(int index, ::google::protobuf::int32 value);
  void add_test_int_vector(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int_vector() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int_vector();

  // repeated int32 test_int_list = 9 [(.nanopb) = {
  int test_int_list_size() const;
  void clear_test_int_list();
  static const int kTestIntListFieldNumber = 9;
  ::google::protobuf::int32 test_int_list(int index) const;
  void set_test_int_list(int index, ::google::protobuf::int32 value);
  void add_test_int_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int_list();

  // repeated int32 test_int_unordered_set = 10 [(.nanopb) = {
  int test_int_unordered_set_size() const;
  void clear_test_int_unordered_set();
  static const int kTestIntUnorderedSetFieldNumber = 10;
  ::google::protobuf::int32 test_int_unordered_set(int index) const;
  void set_test_int_unordered_set(int index, ::google::protobuf::int32 value);
  void add_test_int_unordered_set(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_int_unordered_set() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_int_unordered_set();

  // repeated string test_bytes_repeated = 13 [(.nanopb) = {
  int test_bytes_repeated_size() const;
  void clear_test_bytes_repeated();
  static const int kTestBytesRepeatedFieldNumber = 13;
  const ::std::string& test_bytes_repeated(int index) const;
  ::std::string* mutable_test_bytes_repeated(int index);
  void set_test_bytes_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_repeated(int index, ::std::string&& value);
  #endif
  void set_test_bytes_repeated(int index, const char* value);
  void set_test_bytes_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_repeated();
  void add_test_bytes_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_repeated(::std::string&& value);
  #endif
  void add_test_bytes_repeated(const char* value);
  void add_test_bytes_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_repeated();

  // repeated string test_bytes_stl_repeated = 14 [(.nanopb) = {
  int test_bytes_stl_repeated_size() const;
  void clear_test_bytes_stl_repeated();
  static const int kTestBytesStlRepeatedFieldNumber = 14;
  const ::std::string& test_bytes_stl_repeated(int index) const;
  ::std::string* mutable_test_bytes_stl_repeated(int index);
  void set_test_bytes_stl_repeated(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_repeated(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_repeated(int index, const char* value);
  void set_test_bytes_stl_repeated(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_repeated();
  void add_test_bytes_stl_repeated(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_repeated(::std::string&& value);
  #endif
  void add_test_bytes_stl_repeated(const char* value);
  void add_test_bytes_stl_repeated(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_repeated() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_repeated();

  // repeated string test_bytes_stl_vector = 15 [(.nanopb) = {
  int test_bytes_stl_vector_size() const;
  void clear_test_bytes_stl_vector();
  static const int kTestBytesStlVectorFieldNumber = 15;
  const ::std::string& test_bytes_stl_vector(int index) const;
  ::std::string* mutable_test_bytes_stl_vector(int index);
  void set_test_bytes_stl_vector(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_vector(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_vector(int index, const char* value);
  void set_test_bytes_stl_vector(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_vector();
  void add_test_bytes_stl_vector(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_vector(::std::string&& value);
  #endif
  void add_test_bytes_stl_vector(const char* value);
  void add_test_bytes_stl_vector(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_vector() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_vector();

  // repeated string test_bytes_stl_list = 16 [(.nanopb) = {
  int test_bytes_stl_list_size() const;
  void clear_test_bytes_stl_list();
  static const int kTestBytesStlListFieldNumber = 16;
  const ::std::string& test_bytes_stl_list(int index) const;
  ::std::string* mutable_test_bytes_stl_list(int index);
  void set_test_bytes_stl_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_list(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_list(int index, const char* value);
  void set_test_bytes_stl_list(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_list();
  void add_test_bytes_stl_list(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_list(::std::string&& value);
  #endif
  void add_test_bytes_stl_list(const char* value);
  void add_test_bytes_stl_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_list();

  // repeated string test_bytes_stl_unordered_set = 17 [(.nanopb) = {
  int test_bytes_stl_unordered_set_size() const;
  void clear_test_bytes_stl_unordered_set();
  static const int kTestBytesStlUnorderedSetFieldNumber = 17;
  const ::std::string& test_bytes_stl_unordered_set(int index) const;
  ::std::string* mutable_test_bytes_stl_unordered_set(int index);
  void set_test_bytes_stl_unordered_set(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl_unordered_set(int index, ::std::string&& value);
  #endif
  void set_test_bytes_stl_unordered_set(int index, const char* value);
  void set_test_bytes_stl_unordered_set(int index, const char* value, size_t size);
  ::std::string* add_test_bytes_stl_unordered_set();
  void add_test_bytes_stl_unordered_set(const ::std::string& value);
  #if LANG_CXX11
  void add_test_bytes_stl_unordered_set(::std::string&& value);
  #endif
  void add_test_bytes_stl_unordered_set(const char* value);
  void add_test_bytes_stl_unordered_set(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_bytes_stl_unordered_set() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_bytes_stl_unordered_set();

  // string test_string = 1 [(.nanopb) = {
  void clear_test_string();
  static const int kTestStringFieldNumber = 1;
  const ::std::string& test_string() const;
  void set_test_string(const ::std::string& value);
  #if LANG_CXX11
  void set_test_string(::std::string&& value);
  #endif
  void set_test_string(const char* value);
  void set_test_string(const char* value, size_t size);
  ::std::string* mutable_test_string();
  ::std::string* release_test_string();
  void set_allocated_test_string(::std::string* test_string);

  // string test_string_stl = 2 [(.nanopb) = {
  void clear_test_string_stl();
  static const int kTestStringStlFieldNumber = 2;
  const ::std::string& test_string_stl() const;
  void set_test_string_stl(const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl(::std::string&& value);
  #endif
  void set_test_string_stl(const char* value);
  void set_test_string_stl(const char* value, size_t size);
  ::std::string* mutable_test_string_stl();
  ::std::string* release_test_string_stl();
  void set_allocated_test_string_stl(::std::string* test_string_stl);

  // bytes test_bytes = 11 [(.nanopb) = {
  void clear_test_bytes();
  static const int kTestBytesFieldNumber = 11;
  const ::std::string& test_bytes() const;
  void set_test_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes(::std::string&& value);
  #endif
  void set_test_bytes(const char* value);
  void set_test_bytes(const void* value, size_t size);
  ::std::string* mutable_test_bytes();
  ::std::string* release_test_bytes();
  void set_allocated_test_bytes(::std::string* test_bytes);

  // bytes test_bytes_stl = 12 [(.nanopb) = {
  void clear_test_bytes_stl();
  static const int kTestBytesStlFieldNumber = 12;
  const ::std::string& test_bytes_stl() const;
  void set_test_bytes_stl(const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl(::std::string&& value);
  #endif
  void set_test_bytes_stl(const char* value);
  void set_test_bytes_stl(const void* value, size_t size);
  ::std::string* mutable_test_bytes_stl();
  ::std::string* release_test_bytes_stl();
  void set_allocated_test_bytes_stl(::std::string* test_bytes_stl);

  // uint32 m_dwBuyCount = 100;
  void clear_m_dwbuycount();
  static const int kMDwBuyCountFieldNumber = 100;
  ::google::protobuf::uint32 m_dwbuycount() const;
  void set_m_dwbuycount(::google::protobuf::uint32 value);

  // uint32 m_dwLastBuyTime = 102;
  void clear_m_dwlastbuytime();
  static const int kMDwLastBuyTimeFieldNumber = 102;
  ::google::protobuf::uint32 m_dwlastbuytime() const;
  void set_m_dwlastbuytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrameComm.WelfareNodeDBDataPddBuy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_vector_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_string_stl_unordered_set_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int_vector_;
  mutable int _test_int_vector_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int_list_;
  mutable int _test_int_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_int_unordered_set_;
  mutable int _test_int_unordered_set_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_vector_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_bytes_stl_unordered_set_;
  ::google::protobuf::internal::ArenaStringPtr test_string_;
  ::google::protobuf::internal::ArenaStringPtr test_string_stl_;
  ::google::protobuf::internal::ArenaStringPtr test_bytes_;
  ::google::protobuf::internal::ArenaStringPtr test_bytes_stl_;
  ::google::protobuf::uint32 m_dwbuycount_;
  ::google::protobuf::uint32 m_dwlastbuytime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameTestComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WelfareNodeDBDataPddOpen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrameComm.WelfareNodeDBDataPddOpen) */ {
 public:
  WelfareNodeDBDataPddOpen();
  virtual ~WelfareNodeDBDataPddOpen();

  WelfareNodeDBDataPddOpen(const WelfareNodeDBDataPddOpen& from);

  inline WelfareNodeDBDataPddOpen& operator=(const WelfareNodeDBDataPddOpen& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WelfareNodeDBDataPddOpen(WelfareNodeDBDataPddOpen&& from) noexcept
    : WelfareNodeDBDataPddOpen() {
    *this = ::std::move(from);
  }

  inline WelfareNodeDBDataPddOpen& operator=(WelfareNodeDBDataPddOpen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WelfareNodeDBDataPddOpen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WelfareNodeDBDataPddOpen* internal_default_instance() {
    return reinterpret_cast<const WelfareNodeDBDataPddOpen*>(
               &_WelfareNodeDBDataPddOpen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(WelfareNodeDBDataPddOpen* other);
  friend void swap(WelfareNodeDBDataPddOpen& a, WelfareNodeDBDataPddOpen& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WelfareNodeDBDataPddOpen* New() const final {
    return CreateMaybeMessage<WelfareNodeDBDataPddOpen>(NULL);
  }

  WelfareNodeDBDataPddOpen* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WelfareNodeDBDataPddOpen>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WelfareNodeDBDataPddOpen& from);
  void MergeFrom(const WelfareNodeDBDataPddOpen& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WelfareNodeDBDataPddOpen* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 m_dwOpenCount = 1;
  void clear_m_dwopencount();
  static const int kMDwOpenCountFieldNumber = 1;
  ::google::protobuf::uint32 m_dwopencount() const;
  void set_m_dwopencount(::google::protobuf::uint32 value);

  // uint32 m_dwLastJoinTime = 2;
  void clear_m_dwlastjointime();
  static const int kMDwLastJoinTimeFieldNumber = 2;
  ::google::protobuf::uint32 m_dwlastjointime() const;
  void set_m_dwlastjointime(::google::protobuf::uint32 value);

  // uint64 m_ullTeamID = 3;
  void clear_m_ullteamid();
  static const int kMUllTeamIDFieldNumber = 3;
  ::google::protobuf::uint64 m_ullteamid() const;
  void set_m_ullteamid(::google::protobuf::uint64 value);

  // uint32 m_dwRwdCount = 4;
  void clear_m_dwrwdcount();
  static const int kMDwRwdCountFieldNumber = 4;
  ::google::protobuf::uint32 m_dwrwdcount() const;
  void set_m_dwrwdcount(::google::protobuf::uint32 value);

  // uint32 m_dwLastRwdTime = 5;
  void clear_m_dwlastrwdtime();
  static const int kMDwLastRwdTimeFieldNumber = 5;
  ::google::protobuf::uint32 m_dwlastrwdtime() const;
  void set_m_dwlastrwdtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrameComm.WelfareNodeDBDataPddOpen)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 m_dwopencount_;
  ::google::protobuf::uint32 m_dwlastjointime_;
  ::google::protobuf::uint64 m_ullteamid_;
  ::google::protobuf::uint32 m_dwrwdcount_;
  ::google::protobuf::uint32 m_dwlastrwdtime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameTestComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WelfareNodeDBDataGetTaskManual : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrameComm.WelfareNodeDBDataGetTaskManual) */ {
 public:
  WelfareNodeDBDataGetTaskManual();
  virtual ~WelfareNodeDBDataGetTaskManual();

  WelfareNodeDBDataGetTaskManual(const WelfareNodeDBDataGetTaskManual& from);

  inline WelfareNodeDBDataGetTaskManual& operator=(const WelfareNodeDBDataGetTaskManual& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WelfareNodeDBDataGetTaskManual(WelfareNodeDBDataGetTaskManual&& from) noexcept
    : WelfareNodeDBDataGetTaskManual() {
    *this = ::std::move(from);
  }

  inline WelfareNodeDBDataGetTaskManual& operator=(WelfareNodeDBDataGetTaskManual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WelfareNodeDBDataGetTaskManual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WelfareNodeDBDataGetTaskManual* internal_default_instance() {
    return reinterpret_cast<const WelfareNodeDBDataGetTaskManual*>(
               &_WelfareNodeDBDataGetTaskManual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(WelfareNodeDBDataGetTaskManual* other);
  friend void swap(WelfareNodeDBDataGetTaskManual& a, WelfareNodeDBDataGetTaskManual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WelfareNodeDBDataGetTaskManual* New() const final {
    return CreateMaybeMessage<WelfareNodeDBDataGetTaskManual>(NULL);
  }

  WelfareNodeDBDataGetTaskManual* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WelfareNodeDBDataGetTaskManual>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WelfareNodeDBDataGetTaskManual& from);
  void MergeFrom(const WelfareNodeDBDataGetTaskManual& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WelfareNodeDBDataGetTaskManual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 m_iState = 1;
  void clear_m_istate();
  static const int kMIStateFieldNumber = 1;
  ::google::protobuf::int32 m_istate() const;
  void set_m_istate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrameComm.WelfareNodeDBDataGetTaskManual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 m_istate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameTestComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WelfareNodeDBDataUnion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrameComm.WelfareNodeDBDataUnion) */ {
 public:
  WelfareNodeDBDataUnion();
  virtual ~WelfareNodeDBDataUnion();

  WelfareNodeDBDataUnion(const WelfareNodeDBDataUnion& from);

  inline WelfareNodeDBDataUnion& operator=(const WelfareNodeDBDataUnion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WelfareNodeDBDataUnion(WelfareNodeDBDataUnion&& from) noexcept
    : WelfareNodeDBDataUnion() {
    *this = ::std::move(from);
  }

  inline WelfareNodeDBDataUnion& operator=(WelfareNodeDBDataUnion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WelfareNodeDBDataUnion& default_instance();

  enum MStDataCase {
    kMStPddBuy = 10001,
    kMStPddOpen = 10002,
    kMStGetTaskManual = 10003,
    kMDwBuyCount = 100,
    kMDwLastBuyTime = 102,
    kTestString = 1,
    kTestStringStl = 2,
    kTestBytes = 11,
    kTestBytesStl = 12,
    kTestEnum = 13,
    M_STDATA_NOT_SET = 0,
  };

  enum MStData2Case {
    kMDwBuyCount2 = 1000,
    kMDwLastBuyTime2 = 1002,
    M_STDATA2_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WelfareNodeDBDataUnion* internal_default_instance() {
    return reinterpret_cast<const WelfareNodeDBDataUnion*>(
               &_WelfareNodeDBDataUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(WelfareNodeDBDataUnion* other);
  friend void swap(WelfareNodeDBDataUnion& a, WelfareNodeDBDataUnion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WelfareNodeDBDataUnion* New() const final {
    return CreateMaybeMessage<WelfareNodeDBDataUnion>(NULL);
  }

  WelfareNodeDBDataUnion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WelfareNodeDBDataUnion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WelfareNodeDBDataUnion& from);
  void MergeFrom(const WelfareNodeDBDataUnion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WelfareNodeDBDataUnion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrameComm.WelfareNodeDBDataPddBuy m_stPddBuy1 = 111;
  bool has_m_stpddbuy1() const;
  void clear_m_stpddbuy1();
  static const int kMStPddBuy1FieldNumber = 111;
  private:
  const ::NFrameComm::WelfareNodeDBDataPddBuy& _internal_m_stpddbuy1() const;
  public:
  const ::NFrameComm::WelfareNodeDBDataPddBuy& m_stpddbuy1() const;
  ::NFrameComm::WelfareNodeDBDataPddBuy* release_m_stpddbuy1();
  ::NFrameComm::WelfareNodeDBDataPddBuy* mutable_m_stpddbuy1();
  void set_allocated_m_stpddbuy1(::NFrameComm::WelfareNodeDBDataPddBuy* m_stpddbuy1);

  // .NFrameComm.WelfareNodeDBDataPddBuy m_stPddBuy = 10001;
  bool has_m_stpddbuy() const;
  void clear_m_stpddbuy();
  static const int kMStPddBuyFieldNumber = 10001;
  private:
  const ::NFrameComm::WelfareNodeDBDataPddBuy& _internal_m_stpddbuy() const;
  public:
  const ::NFrameComm::WelfareNodeDBDataPddBuy& m_stpddbuy() const;
  ::NFrameComm::WelfareNodeDBDataPddBuy* release_m_stpddbuy();
  ::NFrameComm::WelfareNodeDBDataPddBuy* mutable_m_stpddbuy();
  void set_allocated_m_stpddbuy(::NFrameComm::WelfareNodeDBDataPddBuy* m_stpddbuy);

  // .NFrameComm.WelfareNodeDBDataPddOpen m_stPddOpen = 10002;
  bool has_m_stpddopen() const;
  void clear_m_stpddopen();
  static const int kMStPddOpenFieldNumber = 10002;
  private:
  const ::NFrameComm::WelfareNodeDBDataPddOpen& _internal_m_stpddopen() const;
  public:
  const ::NFrameComm::WelfareNodeDBDataPddOpen& m_stpddopen() const;
  ::NFrameComm::WelfareNodeDBDataPddOpen* release_m_stpddopen();
  ::NFrameComm::WelfareNodeDBDataPddOpen* mutable_m_stpddopen();
  void set_allocated_m_stpddopen(::NFrameComm::WelfareNodeDBDataPddOpen* m_stpddopen);

  // .NFrameComm.WelfareNodeDBDataGetTaskManual m_stGetTaskManual = 10003;
  bool has_m_stgettaskmanual() const;
  void clear_m_stgettaskmanual();
  static const int kMStGetTaskManualFieldNumber = 10003;
  private:
  const ::NFrameComm::WelfareNodeDBDataGetTaskManual& _internal_m_stgettaskmanual() const;
  public:
  const ::NFrameComm::WelfareNodeDBDataGetTaskManual& m_stgettaskmanual() const;
  ::NFrameComm::WelfareNodeDBDataGetTaskManual* release_m_stgettaskmanual();
  ::NFrameComm::WelfareNodeDBDataGetTaskManual* mutable_m_stgettaskmanual();
  void set_allocated_m_stgettaskmanual(::NFrameComm::WelfareNodeDBDataGetTaskManual* m_stgettaskmanual);

  // uint32 m_dwBuyCount = 100;
  private:
  bool has_m_dwbuycount() const;
  public:
  void clear_m_dwbuycount();
  static const int kMDwBuyCountFieldNumber = 100;
  ::google::protobuf::uint32 m_dwbuycount() const;
  void set_m_dwbuycount(::google::protobuf::uint32 value);

  // uint32 m_dwLastBuyTime = 102;
  private:
  bool has_m_dwlastbuytime() const;
  public:
  void clear_m_dwlastbuytime();
  static const int kMDwLastBuyTimeFieldNumber = 102;
  ::google::protobuf::uint32 m_dwlastbuytime() const;
  void set_m_dwlastbuytime(::google::protobuf::uint32 value);

  // string test_string = 1 [(.nanopb) = {
  private:
  bool has_test_string() const;
  public:
  void clear_test_string();
  static const int kTestStringFieldNumber = 1;
  const ::std::string& test_string() const;
  void set_test_string(const ::std::string& value);
  #if LANG_CXX11
  void set_test_string(::std::string&& value);
  #endif
  void set_test_string(const char* value);
  void set_test_string(const char* value, size_t size);
  ::std::string* mutable_test_string();
  ::std::string* release_test_string();
  void set_allocated_test_string(::std::string* test_string);

  // string test_string_stl = 2 [(.nanopb) = {
  private:
  bool has_test_string_stl() const;
  public:
  void clear_test_string_stl();
  static const int kTestStringStlFieldNumber = 2;
  const ::std::string& test_string_stl() const;
  void set_test_string_stl(const ::std::string& value);
  #if LANG_CXX11
  void set_test_string_stl(::std::string&& value);
  #endif
  void set_test_string_stl(const char* value);
  void set_test_string_stl(const char* value, size_t size);
  ::std::string* mutable_test_string_stl();
  ::std::string* release_test_string_stl();
  void set_allocated_test_string_stl(::std::string* test_string_stl);

  // bytes test_bytes = 11 [(.nanopb) = {
  private:
  bool has_test_bytes() const;
  public:
  void clear_test_bytes();
  static const int kTestBytesFieldNumber = 11;
  const ::std::string& test_bytes() const;
  void set_test_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes(::std::string&& value);
  #endif
  void set_test_bytes(const char* value);
  void set_test_bytes(const void* value, size_t size);
  ::std::string* mutable_test_bytes();
  ::std::string* release_test_bytes();
  void set_allocated_test_bytes(::std::string* test_bytes);

  // bytes test_bytes_stl = 12 [(.nanopb) = {
  private:
  bool has_test_bytes_stl() const;
  public:
  void clear_test_bytes_stl();
  static const int kTestBytesStlFieldNumber = 12;
  const ::std::string& test_bytes_stl() const;
  void set_test_bytes_stl(const ::std::string& value);
  #if LANG_CXX11
  void set_test_bytes_stl(::std::string&& value);
  #endif
  void set_test_bytes_stl(const char* value);
  void set_test_bytes_stl(const void* value, size_t size);
  ::std::string* mutable_test_bytes_stl();
  ::std::string* release_test_bytes_stl();
  void set_allocated_test_bytes_stl(::std::string* test_bytes_stl);

  // .NFrameEnum.FrameGlobalTestEnum test_enum = 13;
  private:
  bool has_test_enum() const;
  public:
  void clear_test_enum();
  static const int kTestEnumFieldNumber = 13;
  ::NFrameEnum::FrameGlobalTestEnum test_enum() const;
  void set_test_enum(::NFrameEnum::FrameGlobalTestEnum value);

  // uint32 m_dwBuyCount2 = 1000;
  private:
  bool has_m_dwbuycount2() const;
  public:
  void clear_m_dwbuycount2();
  static const int kMDwBuyCount2FieldNumber = 1000;
  ::google::protobuf::uint32 m_dwbuycount2() const;
  void set_m_dwbuycount2(::google::protobuf::uint32 value);

  // uint32 m_dwLastBuyTime2 = 1002;
  private:
  bool has_m_dwlastbuytime2() const;
  public:
  void clear_m_dwlastbuytime2();
  static const int kMDwLastBuyTime2FieldNumber = 1002;
  ::google::protobuf::uint32 m_dwlastbuytime2() const;
  void set_m_dwlastbuytime2(::google::protobuf::uint32 value);

  void clear_m_stData();
  MStDataCase m_stData_case() const;
  void clear_m_stData2();
  MStData2Case m_stData2_case() const;
  // @@protoc_insertion_point(class_scope:NFrameComm.WelfareNodeDBDataUnion)
 private:
  void set_has_m_stpddbuy();
  void set_has_m_stpddopen();
  void set_has_m_stgettaskmanual();
  void set_has_m_dwbuycount();
  void set_has_m_dwlastbuytime();
  void set_has_test_string();
  void set_has_test_string_stl();
  void set_has_test_bytes();
  void set_has_test_bytes_stl();
  void set_has_test_enum();
  void set_has_m_dwbuycount2();
  void set_has_m_dwlastbuytime2();

  inline bool has_m_stData() const;
  inline void clear_has_m_stData();

  inline bool has_m_stData2() const;
  inline void clear_has_m_stData2();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrameComm::WelfareNodeDBDataPddBuy* m_stpddbuy1_;
  union MStDataUnion {
    MStDataUnion() {}
    ::NFrameComm::WelfareNodeDBDataPddBuy* m_stpddbuy_;
    ::NFrameComm::WelfareNodeDBDataPddOpen* m_stpddopen_;
    ::NFrameComm::WelfareNodeDBDataGetTaskManual* m_stgettaskmanual_;
    ::google::protobuf::uint32 m_dwbuycount_;
    ::google::protobuf::uint32 m_dwlastbuytime_;
    ::google::protobuf::internal::ArenaStringPtr test_string_;
    ::google::protobuf::internal::ArenaStringPtr test_string_stl_;
    ::google::protobuf::internal::ArenaStringPtr test_bytes_;
    ::google::protobuf::internal::ArenaStringPtr test_bytes_stl_;
    int test_enum_;
  } m_stData_;
  union MStData2Union {
    MStData2Union() {}
    ::google::protobuf::uint32 m_dwbuycount2_;
    ::google::protobuf::uint32 m_dwlastbuytime2_;
  } m_stData2_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend struct ::protobuf_FrameTestComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BevLogTestItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrameComm.BevLogTestItem) */ {
 public:
  BevLogTestItem();
  virtual ~BevLogTestItem();

  BevLogTestItem(const BevLogTestItem& from);

  inline BevLogTestItem& operator=(const BevLogTestItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BevLogTestItem(BevLogTestItem&& from) noexcept
    : BevLogTestItem() {
    *this = ::std::move(from);
  }

  inline BevLogTestItem& operator=(BevLogTestItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BevLogTestItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BevLogTestItem* internal_default_instance() {
    return reinterpret_cast<const BevLogTestItem*>(
               &_BevLogTestItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BevLogTestItem* other);
  friend void swap(BevLogTestItem& a, BevLogTestItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BevLogTestItem* New() const final {
    return CreateMaybeMessage<BevLogTestItem>(NULL);
  }

  BevLogTestItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BevLogTestItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BevLogTestItem& from);
  void MergeFrom(const BevLogTestItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BevLogTestItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 item_id = 1;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint32 item_id() const;
  void set_item_id(::google::protobuf::uint32 value);

  // uint32 item_num = 2;
  void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  ::google::protobuf::uint32 item_num() const;
  void set_item_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrameComm.BevLogTestItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameTestComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BevLogTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrameComm.BevLogTest) */ {
 public:
  BevLogTest();
  virtual ~BevLogTest();

  BevLogTest(const BevLogTest& from);

  inline BevLogTest& operator=(const BevLogTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BevLogTest(BevLogTest&& from) noexcept
    : BevLogTest() {
    *this = ::std::move(from);
  }

  inline BevLogTest& operator=(BevLogTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BevLogTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BevLogTest* internal_default_instance() {
    return reinterpret_cast<const BevLogTest*>(
               &_BevLogTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BevLogTest* other);
  friend void swap(BevLogTest& a, BevLogTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BevLogTest* New() const final {
    return CreateMaybeMessage<BevLogTest>(NULL);
  }

  BevLogTest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BevLogTest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BevLogTest& from);
  void MergeFrom(const BevLogTest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BevLogTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFrameComm.BevLogTestItem item_list = 6;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 6;
  ::NFrameComm::BevLogTestItem* mutable_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrameComm::BevLogTestItem >*
      mutable_item_list();
  const ::NFrameComm::BevLogTestItem& item_list(int index) const;
  ::NFrameComm::BevLogTestItem* add_item_list();
  const ::google::protobuf::RepeatedPtrField< ::NFrameComm::BevLogTestItem >&
      item_list() const;

  // repeated int32 id_list = 7;
  int id_list_size() const;
  void clear_id_list();
  static const int kIdListFieldNumber = 7;
  ::google::protobuf::int32 id_list(int index) const;
  void set_id_list(int index, ::google::protobuf::int32 value);
  void add_id_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_list();

  // string szVGameIP = 2 [(.nanopb) = {
  void clear_szvgameip();
  static const int kSzVGameIPFieldNumber = 2;
  const ::std::string& szvgameip() const;
  void set_szvgameip(const ::std::string& value);
  #if LANG_CXX11
  void set_szvgameip(::std::string&& value);
  #endif
  void set_szvgameip(const char* value);
  void set_szvgameip(const char* value, size_t size);
  ::std::string* mutable_szvgameip();
  ::std::string* release_szvgameip();
  void set_allocated_szvgameip(::std::string* szvgameip);

  // .NFrameComm.BevLogTestItem item = 5;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 5;
  private:
  const ::NFrameComm::BevLogTestItem& _internal_item() const;
  public:
  const ::NFrameComm::BevLogTestItem& item() const;
  ::NFrameComm::BevLogTestItem* release_item();
  ::NFrameComm::BevLogTestItem* mutable_item();
  void set_allocated_item(::NFrameComm::BevLogTestItem* item);

  // uint64 tDtEventTime = 1;
  void clear_tdteventtime();
  static const int kTDtEventTimeFieldNumber = 1;
  ::google::protobuf::uint64 tdteventtime() const;
  void set_tdteventtime(::google::protobuf::uint64 value);

  // int32 iIZoneAreaID = 3;
  void clear_iizoneareaid();
  static const int kIIZoneAreaIDFieldNumber = 3;
  ::google::protobuf::int32 iizoneareaid() const;
  void set_iizoneareaid(::google::protobuf::int32 value);

  // int32 iITimeShift = 4;
  void clear_iitimeshift();
  static const int kIITimeShiftFieldNumber = 4;
  ::google::protobuf::int32 iitimeshift() const;
  void set_iitimeshift(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrameComm.BevLogTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFrameComm::BevLogTestItem > item_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_list_;
  mutable int _id_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr szvgameip_;
  ::NFrameComm::BevLogTestItem* item_;
  ::google::protobuf::uint64 tdteventtime_;
  ::google::protobuf::int32 iizoneareaid_;
  ::google::protobuf::int32 iitimeshift_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameTestComm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// wxWorkRobotTextTest

// uint32 id = 100 [(.nanopb) = {
inline void wxWorkRobotTextTest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 wxWorkRobotTextTest::id() const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.id)
  return id_;
}
inline void wxWorkRobotTextTest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.id)
}

// string test_string = 1 [(.nanopb) = {
inline void wxWorkRobotTextTest::clear_test_string() {
  test_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& wxWorkRobotTextTest::test_string() const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_string)
  return test_string_.GetNoArena();
}
inline void wxWorkRobotTextTest::set_test_string(const ::std::string& value) {
  
  test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_string(::std::string&& value) {
  
  test_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.wxWorkRobotTextTest.test_string)
}
#endif
inline void wxWorkRobotTextTest::set_test_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_string)
}
inline void wxWorkRobotTextTest::set_test_string(const char* value, size_t size) {
  
  test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_string)
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_string() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_string)
  return test_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wxWorkRobotTextTest::release_test_string() {
  // @@protoc_insertion_point(field_release:NFrameComm.wxWorkRobotTextTest.test_string)
  
  return test_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wxWorkRobotTextTest::set_allocated_test_string(::std::string* test_string) {
  if (test_string != NULL) {
    
  } else {
    
  }
  test_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_string);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.wxWorkRobotTextTest.test_string)
}

// string test_string_stl = 2 [(.nanopb) = {
inline void wxWorkRobotTextTest::clear_test_string_stl() {
  test_string_stl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& wxWorkRobotTextTest::test_string_stl() const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_string_stl)
  return test_string_stl_.GetNoArena();
}
inline void wxWorkRobotTextTest::set_test_string_stl(const ::std::string& value) {
  
  test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_string_stl(::std::string&& value) {
  
  test_string_stl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.wxWorkRobotTextTest.test_string_stl)
}
#endif
inline void wxWorkRobotTextTest::set_test_string_stl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_string_stl)
}
inline void wxWorkRobotTextTest::set_test_string_stl(const char* value, size_t size) {
  
  test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl)
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_string_stl() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl)
  return test_string_stl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wxWorkRobotTextTest::release_test_string_stl() {
  // @@protoc_insertion_point(field_release:NFrameComm.wxWorkRobotTextTest.test_string_stl)
  
  return test_string_stl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wxWorkRobotTextTest::set_allocated_test_string_stl(::std::string* test_string_stl) {
  if (test_string_stl != NULL) {
    
  } else {
    
  }
  test_string_stl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_string_stl);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.wxWorkRobotTextTest.test_string_stl)
}

// repeated string test_string_repeated = 3 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_string_repeated_size() const {
  return test_string_repeated_.size();
}
inline void wxWorkRobotTextTest::clear_test_string_repeated() {
  test_string_repeated_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_string_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
  return test_string_repeated_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_string_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
  return test_string_repeated_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_string_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
  test_string_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_string_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
  test_string_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_string_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
}
inline void wxWorkRobotTextTest::set_test_string_repeated(int index, const char* value, size_t size) {
  test_string_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
}
inline ::std::string* wxWorkRobotTextTest::add_test_string_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
  return test_string_repeated_.Add();
}
inline void wxWorkRobotTextTest::add_test_string_repeated(const ::std::string& value) {
  test_string_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_string_repeated(::std::string&& value) {
  test_string_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
}
#endif
inline void wxWorkRobotTextTest::add_test_string_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
}
inline void wxWorkRobotTextTest::add_test_string_repeated(const char* value, size_t size) {
  test_string_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_string_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
  return test_string_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_string_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_string_repeated)
  return &test_string_repeated_;
}

// repeated string test_string_stl_repeated = 4 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_string_stl_repeated_size() const {
  return test_string_stl_repeated_.size();
}
inline void wxWorkRobotTextTest::clear_test_string_stl_repeated() {
  test_string_stl_repeated_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_string_stl_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
  return test_string_stl_repeated_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_string_stl_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
  return test_string_stl_repeated_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_string_stl_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
  test_string_stl_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_string_stl_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
  test_string_stl_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_string_stl_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
}
inline void wxWorkRobotTextTest::set_test_string_stl_repeated(int index, const char* value, size_t size) {
  test_string_stl_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
}
inline ::std::string* wxWorkRobotTextTest::add_test_string_stl_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
  return test_string_stl_repeated_.Add();
}
inline void wxWorkRobotTextTest::add_test_string_stl_repeated(const ::std::string& value) {
  test_string_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_string_stl_repeated(::std::string&& value) {
  test_string_stl_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
}
#endif
inline void wxWorkRobotTextTest::add_test_string_stl_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
}
inline void wxWorkRobotTextTest::add_test_string_stl_repeated(const char* value, size_t size) {
  test_string_stl_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_string_stl_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
  return test_string_stl_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_string_stl_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_repeated)
  return &test_string_stl_repeated_;
}

// repeated string test_string_stl_vector = 5 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_string_stl_vector_size() const {
  return test_string_stl_vector_.size();
}
inline void wxWorkRobotTextTest::clear_test_string_stl_vector() {
  test_string_stl_vector_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_string_stl_vector(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
  return test_string_stl_vector_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_string_stl_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
  return test_string_stl_vector_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_string_stl_vector(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
  test_string_stl_vector_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_string_stl_vector(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
  test_string_stl_vector_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_string_stl_vector(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_vector_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
}
inline void wxWorkRobotTextTest::set_test_string_stl_vector(int index, const char* value, size_t size) {
  test_string_stl_vector_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
}
inline ::std::string* wxWorkRobotTextTest::add_test_string_stl_vector() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
  return test_string_stl_vector_.Add();
}
inline void wxWorkRobotTextTest::add_test_string_stl_vector(const ::std::string& value) {
  test_string_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_string_stl_vector(::std::string&& value) {
  test_string_stl_vector_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
}
#endif
inline void wxWorkRobotTextTest::add_test_string_stl_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
}
inline void wxWorkRobotTextTest::add_test_string_stl_vector(const char* value, size_t size) {
  test_string_stl_vector_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_string_stl_vector() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
  return test_string_stl_vector_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_string_stl_vector() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_vector)
  return &test_string_stl_vector_;
}

// repeated string test_string_stl_list = 6 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_string_stl_list_size() const {
  return test_string_stl_list_.size();
}
inline void wxWorkRobotTextTest::clear_test_string_stl_list() {
  test_string_stl_list_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_string_stl_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
  return test_string_stl_list_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_string_stl_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
  return test_string_stl_list_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_string_stl_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
  test_string_stl_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_string_stl_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
  test_string_stl_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_string_stl_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
}
inline void wxWorkRobotTextTest::set_test_string_stl_list(int index, const char* value, size_t size) {
  test_string_stl_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
}
inline ::std::string* wxWorkRobotTextTest::add_test_string_stl_list() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
  return test_string_stl_list_.Add();
}
inline void wxWorkRobotTextTest::add_test_string_stl_list(const ::std::string& value) {
  test_string_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_string_stl_list(::std::string&& value) {
  test_string_stl_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
}
#endif
inline void wxWorkRobotTextTest::add_test_string_stl_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
}
inline void wxWorkRobotTextTest::add_test_string_stl_list(const char* value, size_t size) {
  test_string_stl_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_string_stl_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
  return test_string_stl_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_string_stl_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_list)
  return &test_string_stl_list_;
}

// repeated string test_string_stl_unordered_set = 7 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_string_stl_unordered_set_size() const {
  return test_string_stl_unordered_set_.size();
}
inline void wxWorkRobotTextTest::clear_test_string_stl_unordered_set() {
  test_string_stl_unordered_set_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_string_stl_unordered_set(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_string_stl_unordered_set(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_string_stl_unordered_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
  test_string_stl_unordered_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_string_stl_unordered_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
  test_string_stl_unordered_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_string_stl_unordered_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_unordered_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
}
inline void wxWorkRobotTextTest::set_test_string_stl_unordered_set(int index, const char* value, size_t size) {
  test_string_stl_unordered_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
}
inline ::std::string* wxWorkRobotTextTest::add_test_string_stl_unordered_set() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_.Add();
}
inline void wxWorkRobotTextTest::add_test_string_stl_unordered_set(const ::std::string& value) {
  test_string_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_string_stl_unordered_set(::std::string&& value) {
  test_string_stl_unordered_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
}
#endif
inline void wxWorkRobotTextTest::add_test_string_stl_unordered_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
}
inline void wxWorkRobotTextTest::add_test_string_stl_unordered_set(const char* value, size_t size) {
  test_string_stl_unordered_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_string_stl_unordered_set() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_string_stl_unordered_set() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_string_stl_unordered_set)
  return &test_string_stl_unordered_set_;
}

// repeated int32 test_int_vector = 8 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_int_vector_size() const {
  return test_int_vector_.size();
}
inline void wxWorkRobotTextTest::clear_test_int_vector() {
  test_int_vector_.Clear();
}
inline ::google::protobuf::int32 wxWorkRobotTextTest::test_int_vector(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_int_vector)
  return test_int_vector_.Get(index);
}
inline void wxWorkRobotTextTest::set_test_int_vector(int index, ::google::protobuf::int32 value) {
  test_int_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_int_vector)
}
inline void wxWorkRobotTextTest::add_test_int_vector(::google::protobuf::int32 value) {
  test_int_vector_.Add(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_int_vector)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
wxWorkRobotTextTest::test_int_vector() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_int_vector)
  return test_int_vector_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
wxWorkRobotTextTest::mutable_test_int_vector() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_int_vector)
  return &test_int_vector_;
}

// repeated int32 test_int_list = 9 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_int_list_size() const {
  return test_int_list_.size();
}
inline void wxWorkRobotTextTest::clear_test_int_list() {
  test_int_list_.Clear();
}
inline ::google::protobuf::int32 wxWorkRobotTextTest::test_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_int_list)
  return test_int_list_.Get(index);
}
inline void wxWorkRobotTextTest::set_test_int_list(int index, ::google::protobuf::int32 value) {
  test_int_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_int_list)
}
inline void wxWorkRobotTextTest::add_test_int_list(::google::protobuf::int32 value) {
  test_int_list_.Add(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_int_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
wxWorkRobotTextTest::test_int_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_int_list)
  return test_int_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
wxWorkRobotTextTest::mutable_test_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_int_list)
  return &test_int_list_;
}

// repeated int32 test_int_unordered_set = 10 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_int_unordered_set_size() const {
  return test_int_unordered_set_.size();
}
inline void wxWorkRobotTextTest::clear_test_int_unordered_set() {
  test_int_unordered_set_.Clear();
}
inline ::google::protobuf::int32 wxWorkRobotTextTest::test_int_unordered_set(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_int_unordered_set)
  return test_int_unordered_set_.Get(index);
}
inline void wxWorkRobotTextTest::set_test_int_unordered_set(int index, ::google::protobuf::int32 value) {
  test_int_unordered_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_int_unordered_set)
}
inline void wxWorkRobotTextTest::add_test_int_unordered_set(::google::protobuf::int32 value) {
  test_int_unordered_set_.Add(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_int_unordered_set)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
wxWorkRobotTextTest::test_int_unordered_set() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_int_unordered_set)
  return test_int_unordered_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
wxWorkRobotTextTest::mutable_test_int_unordered_set() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_int_unordered_set)
  return &test_int_unordered_set_;
}

// string test_bytes = 11 [(.nanopb) = {
inline void wxWorkRobotTextTest::clear_test_bytes() {
  test_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& wxWorkRobotTextTest::test_bytes() const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_bytes)
  return test_bytes_.GetNoArena();
}
inline void wxWorkRobotTextTest::set_test_bytes(const ::std::string& value) {
  
  test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_bytes(::std::string&& value) {
  
  test_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.wxWorkRobotTextTest.test_bytes)
}
#endif
inline void wxWorkRobotTextTest::set_test_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_bytes)
}
inline void wxWorkRobotTextTest::set_test_bytes(const char* value, size_t size) {
  
  test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes)
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_bytes() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes)
  return test_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wxWorkRobotTextTest::release_test_bytes() {
  // @@protoc_insertion_point(field_release:NFrameComm.wxWorkRobotTextTest.test_bytes)
  
  return test_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wxWorkRobotTextTest::set_allocated_test_bytes(::std::string* test_bytes) {
  if (test_bytes != NULL) {
    
  } else {
    
  }
  test_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_bytes);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.wxWorkRobotTextTest.test_bytes)
}

// string test_bytes_stl = 12 [(.nanopb) = {
inline void wxWorkRobotTextTest::clear_test_bytes_stl() {
  test_bytes_stl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& wxWorkRobotTextTest::test_bytes_stl() const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
  return test_bytes_stl_.GetNoArena();
}
inline void wxWorkRobotTextTest::set_test_bytes_stl(const ::std::string& value) {
  
  test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_bytes_stl(::std::string&& value) {
  
  test_bytes_stl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
}
#endif
inline void wxWorkRobotTextTest::set_test_bytes_stl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
}
inline void wxWorkRobotTextTest::set_test_bytes_stl(const char* value, size_t size) {
  
  test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_bytes_stl() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
  return test_bytes_stl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wxWorkRobotTextTest::release_test_bytes_stl() {
  // @@protoc_insertion_point(field_release:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
  
  return test_bytes_stl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wxWorkRobotTextTest::set_allocated_test_bytes_stl(::std::string* test_bytes_stl) {
  if (test_bytes_stl != NULL) {
    
  } else {
    
  }
  test_bytes_stl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_bytes_stl);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.wxWorkRobotTextTest.test_bytes_stl)
}

// repeated string test_bytes_repeated = 13 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_bytes_repeated_size() const {
  return test_bytes_repeated_.size();
}
inline void wxWorkRobotTextTest::clear_test_bytes_repeated() {
  test_bytes_repeated_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_bytes_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
  return test_bytes_repeated_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_bytes_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
  return test_bytes_repeated_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_bytes_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
  test_bytes_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_bytes_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
  test_bytes_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_bytes_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
}
inline void wxWorkRobotTextTest::set_test_bytes_repeated(int index, const char* value, size_t size) {
  test_bytes_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
}
inline ::std::string* wxWorkRobotTextTest::add_test_bytes_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
  return test_bytes_repeated_.Add();
}
inline void wxWorkRobotTextTest::add_test_bytes_repeated(const ::std::string& value) {
  test_bytes_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_bytes_repeated(::std::string&& value) {
  test_bytes_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
}
#endif
inline void wxWorkRobotTextTest::add_test_bytes_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
}
inline void wxWorkRobotTextTest::add_test_bytes_repeated(const char* value, size_t size) {
  test_bytes_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_bytes_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
  return test_bytes_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_bytes_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_bytes_repeated)
  return &test_bytes_repeated_;
}

// repeated string test_bytes_stl_repeated = 14 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_bytes_stl_repeated_size() const {
  return test_bytes_stl_repeated_.size();
}
inline void wxWorkRobotTextTest::clear_test_bytes_stl_repeated() {
  test_bytes_stl_repeated_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_bytes_stl_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_bytes_stl_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
  test_bytes_stl_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_bytes_stl_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
  test_bytes_stl_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_bytes_stl_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_repeated(int index, const char* value, size_t size) {
  test_bytes_stl_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
}
inline ::std::string* wxWorkRobotTextTest::add_test_bytes_stl_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_.Add();
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_repeated(const ::std::string& value) {
  test_bytes_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_bytes_stl_repeated(::std::string&& value) {
  test_bytes_stl_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
}
#endif
inline void wxWorkRobotTextTest::add_test_bytes_stl_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_repeated(const char* value, size_t size) {
  test_bytes_stl_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_bytes_stl_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_bytes_stl_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_repeated)
  return &test_bytes_stl_repeated_;
}

// repeated string test_bytes_stl_vector = 15 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_bytes_stl_vector_size() const {
  return test_bytes_stl_vector_.size();
}
inline void wxWorkRobotTextTest::clear_test_bytes_stl_vector() {
  test_bytes_stl_vector_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_bytes_stl_vector(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
  return test_bytes_stl_vector_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_bytes_stl_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
  return test_bytes_stl_vector_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_vector(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
  test_bytes_stl_vector_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_bytes_stl_vector(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
  test_bytes_stl_vector_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_bytes_stl_vector(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_vector_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_vector(int index, const char* value, size_t size) {
  test_bytes_stl_vector_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
}
inline ::std::string* wxWorkRobotTextTest::add_test_bytes_stl_vector() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
  return test_bytes_stl_vector_.Add();
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_vector(const ::std::string& value) {
  test_bytes_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_bytes_stl_vector(::std::string&& value) {
  test_bytes_stl_vector_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
}
#endif
inline void wxWorkRobotTextTest::add_test_bytes_stl_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_vector(const char* value, size_t size) {
  test_bytes_stl_vector_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_bytes_stl_vector() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
  return test_bytes_stl_vector_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_bytes_stl_vector() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_vector)
  return &test_bytes_stl_vector_;
}

// repeated string test_bytes_stl_list = 16 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_bytes_stl_list_size() const {
  return test_bytes_stl_list_.size();
}
inline void wxWorkRobotTextTest::clear_test_bytes_stl_list() {
  test_bytes_stl_list_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_bytes_stl_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
  return test_bytes_stl_list_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_bytes_stl_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
  return test_bytes_stl_list_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
  test_bytes_stl_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_bytes_stl_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
  test_bytes_stl_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_bytes_stl_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_list(int index, const char* value, size_t size) {
  test_bytes_stl_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
}
inline ::std::string* wxWorkRobotTextTest::add_test_bytes_stl_list() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
  return test_bytes_stl_list_.Add();
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_list(const ::std::string& value) {
  test_bytes_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_bytes_stl_list(::std::string&& value) {
  test_bytes_stl_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
}
#endif
inline void wxWorkRobotTextTest::add_test_bytes_stl_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_list(const char* value, size_t size) {
  test_bytes_stl_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_bytes_stl_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
  return test_bytes_stl_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_bytes_stl_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_list)
  return &test_bytes_stl_list_;
}

// repeated string test_bytes_stl_unordered_set = 17 [(.nanopb) = {
inline int wxWorkRobotTextTest::test_bytes_stl_unordered_set_size() const {
  return test_bytes_stl_unordered_set_.size();
}
inline void wxWorkRobotTextTest::clear_test_bytes_stl_unordered_set() {
  test_bytes_stl_unordered_set_.Clear();
}
inline const ::std::string& wxWorkRobotTextTest::test_bytes_stl_unordered_set(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_.Get(index);
}
inline ::std::string* wxWorkRobotTextTest::mutable_test_bytes_stl_unordered_set(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_.Mutable(index);
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_unordered_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
  test_bytes_stl_unordered_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::set_test_bytes_stl_unordered_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
  test_bytes_stl_unordered_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotTextTest::set_test_bytes_stl_unordered_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_unordered_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
}
inline void wxWorkRobotTextTest::set_test_bytes_stl_unordered_set(int index, const char* value, size_t size) {
  test_bytes_stl_unordered_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
}
inline ::std::string* wxWorkRobotTextTest::add_test_bytes_stl_unordered_set() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_.Add();
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_unordered_set(const ::std::string& value) {
  test_bytes_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
}
#if LANG_CXX11
inline void wxWorkRobotTextTest::add_test_bytes_stl_unordered_set(::std::string&& value) {
  test_bytes_stl_unordered_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
}
#endif
inline void wxWorkRobotTextTest::add_test_bytes_stl_unordered_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
}
inline void wxWorkRobotTextTest::add_test_bytes_stl_unordered_set(const char* value, size_t size) {
  test_bytes_stl_unordered_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotTextTest::test_bytes_stl_unordered_set() const {
  // @@protoc_insertion_point(field_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotTextTest::mutable_test_bytes_stl_unordered_set() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.wxWorkRobotTextTest.test_bytes_stl_unordered_set)
  return &test_bytes_stl_unordered_set_;
}

// -------------------------------------------------------------------

// WelfareNodeDBDataPddBuy

// uint32 m_dwBuyCount = 100;
inline void WelfareNodeDBDataPddBuy::clear_m_dwbuycount() {
  m_dwbuycount_ = 0u;
}
inline ::google::protobuf::uint32 WelfareNodeDBDataPddBuy::m_dwbuycount() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.m_dwBuyCount)
  return m_dwbuycount_;
}
inline void WelfareNodeDBDataPddBuy::set_m_dwbuycount(::google::protobuf::uint32 value) {
  
  m_dwbuycount_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.m_dwBuyCount)
}

// uint32 m_dwLastBuyTime = 102;
inline void WelfareNodeDBDataPddBuy::clear_m_dwlastbuytime() {
  m_dwlastbuytime_ = 0u;
}
inline ::google::protobuf::uint32 WelfareNodeDBDataPddBuy::m_dwlastbuytime() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.m_dwLastBuyTime)
  return m_dwlastbuytime_;
}
inline void WelfareNodeDBDataPddBuy::set_m_dwlastbuytime(::google::protobuf::uint32 value) {
  
  m_dwlastbuytime_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.m_dwLastBuyTime)
}

// string test_string = 1 [(.nanopb) = {
inline void WelfareNodeDBDataPddBuy::clear_test_string() {
  test_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_string() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
  return test_string_.GetNoArena();
}
inline void WelfareNodeDBDataPddBuy::set_test_string(const ::std::string& value) {
  
  test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_string(::std::string&& value) {
  
  test_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
}
inline void WelfareNodeDBDataPddBuy::set_test_string(const char* value, size_t size) {
  
  test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_string() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
  return test_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataPddBuy::release_test_string() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
  
  return test_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WelfareNodeDBDataPddBuy::set_allocated_test_string(::std::string* test_string) {
  if (test_string != NULL) {
    
  } else {
    
  }
  test_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_string);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataPddBuy.test_string)
}

// string test_string_stl = 2 [(.nanopb) = {
inline void WelfareNodeDBDataPddBuy::clear_test_string_stl() {
  test_string_stl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_string_stl() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
  return test_string_stl_.GetNoArena();
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl(const ::std::string& value) {
  
  test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_string_stl(::std::string&& value) {
  
  test_string_stl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_string_stl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl(const char* value, size_t size) {
  
  test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_string_stl() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
  return test_string_stl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataPddBuy::release_test_string_stl() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
  
  return test_string_stl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WelfareNodeDBDataPddBuy::set_allocated_test_string_stl(::std::string* test_string_stl) {
  if (test_string_stl != NULL) {
    
  } else {
    
  }
  test_string_stl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_string_stl);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl)
}

// repeated string test_string_repeated = 3 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_string_repeated_size() const {
  return test_string_repeated_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_string_repeated() {
  test_string_repeated_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_string_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
  return test_string_repeated_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_string_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
  return test_string_repeated_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_string_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
  test_string_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_string_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
  test_string_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_string_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
}
inline void WelfareNodeDBDataPddBuy::set_test_string_repeated(int index, const char* value, size_t size) {
  test_string_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_string_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
  return test_string_repeated_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_string_repeated(const ::std::string& value) {
  test_string_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_string_repeated(::std::string&& value) {
  test_string_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_string_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
}
inline void WelfareNodeDBDataPddBuy::add_test_string_repeated(const char* value, size_t size) {
  test_string_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_string_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
  return test_string_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_string_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_repeated)
  return &test_string_repeated_;
}

// repeated string test_string_stl_repeated = 4 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_string_stl_repeated_size() const {
  return test_string_stl_repeated_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_string_stl_repeated() {
  test_string_stl_repeated_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_string_stl_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
  return test_string_stl_repeated_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_string_stl_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
  return test_string_stl_repeated_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
  test_string_stl_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
  test_string_stl_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_repeated(int index, const char* value, size_t size) {
  test_string_stl_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_string_stl_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
  return test_string_stl_repeated_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_repeated(const ::std::string& value) {
  test_string_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_repeated(::std::string&& value) {
  test_string_stl_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_repeated(const char* value, size_t size) {
  test_string_stl_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_string_stl_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
  return test_string_stl_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_string_stl_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_repeated)
  return &test_string_stl_repeated_;
}

// repeated string test_string_stl_vector = 5 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_string_stl_vector_size() const {
  return test_string_stl_vector_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_string_stl_vector() {
  test_string_stl_vector_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_string_stl_vector(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
  return test_string_stl_vector_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_string_stl_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
  return test_string_stl_vector_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_vector(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
  test_string_stl_vector_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_vector(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
  test_string_stl_vector_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_vector(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_vector_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_vector(int index, const char* value, size_t size) {
  test_string_stl_vector_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_string_stl_vector() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
  return test_string_stl_vector_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_vector(const ::std::string& value) {
  test_string_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_vector(::std::string&& value) {
  test_string_stl_vector_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_vector(const char* value, size_t size) {
  test_string_stl_vector_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_string_stl_vector() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
  return test_string_stl_vector_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_string_stl_vector() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_vector)
  return &test_string_stl_vector_;
}

// repeated string test_string_stl_list = 6 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_string_stl_list_size() const {
  return test_string_stl_list_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_string_stl_list() {
  test_string_stl_list_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_string_stl_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
  return test_string_stl_list_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_string_stl_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
  return test_string_stl_list_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
  test_string_stl_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
  test_string_stl_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_list(int index, const char* value, size_t size) {
  test_string_stl_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_string_stl_list() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
  return test_string_stl_list_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_list(const ::std::string& value) {
  test_string_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_list(::std::string&& value) {
  test_string_stl_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_list(const char* value, size_t size) {
  test_string_stl_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_string_stl_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
  return test_string_stl_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_string_stl_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_list)
  return &test_string_stl_list_;
}

// repeated string test_string_stl_unordered_set = 7 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_string_stl_unordered_set_size() const {
  return test_string_stl_unordered_set_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_string_stl_unordered_set() {
  test_string_stl_unordered_set_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_string_stl_unordered_set(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_string_stl_unordered_set(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_unordered_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
  test_string_stl_unordered_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_unordered_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
  test_string_stl_unordered_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_unordered_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_unordered_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
}
inline void WelfareNodeDBDataPddBuy::set_test_string_stl_unordered_set(int index, const char* value, size_t size) {
  test_string_stl_unordered_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_string_stl_unordered_set() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_unordered_set(const ::std::string& value) {
  test_string_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_unordered_set(::std::string&& value) {
  test_string_stl_unordered_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_unordered_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_string_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
}
inline void WelfareNodeDBDataPddBuy::add_test_string_stl_unordered_set(const char* value, size_t size) {
  test_string_stl_unordered_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_string_stl_unordered_set() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
  return test_string_stl_unordered_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_string_stl_unordered_set() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_string_stl_unordered_set)
  return &test_string_stl_unordered_set_;
}

// repeated int32 test_int_vector = 8 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_int_vector_size() const {
  return test_int_vector_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_int_vector() {
  test_int_vector_.Clear();
}
inline ::google::protobuf::int32 WelfareNodeDBDataPddBuy::test_int_vector(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_int_vector)
  return test_int_vector_.Get(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_int_vector(int index, ::google::protobuf::int32 value) {
  test_int_vector_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_int_vector)
}
inline void WelfareNodeDBDataPddBuy::add_test_int_vector(::google::protobuf::int32 value) {
  test_int_vector_.Add(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_int_vector)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WelfareNodeDBDataPddBuy::test_int_vector() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_int_vector)
  return test_int_vector_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WelfareNodeDBDataPddBuy::mutable_test_int_vector() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_int_vector)
  return &test_int_vector_;
}

// repeated int32 test_int_list = 9 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_int_list_size() const {
  return test_int_list_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_int_list() {
  test_int_list_.Clear();
}
inline ::google::protobuf::int32 WelfareNodeDBDataPddBuy::test_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_int_list)
  return test_int_list_.Get(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_int_list(int index, ::google::protobuf::int32 value) {
  test_int_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_int_list)
}
inline void WelfareNodeDBDataPddBuy::add_test_int_list(::google::protobuf::int32 value) {
  test_int_list_.Add(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_int_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WelfareNodeDBDataPddBuy::test_int_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_int_list)
  return test_int_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WelfareNodeDBDataPddBuy::mutable_test_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_int_list)
  return &test_int_list_;
}

// repeated int32 test_int_unordered_set = 10 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_int_unordered_set_size() const {
  return test_int_unordered_set_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_int_unordered_set() {
  test_int_unordered_set_.Clear();
}
inline ::google::protobuf::int32 WelfareNodeDBDataPddBuy::test_int_unordered_set(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_int_unordered_set)
  return test_int_unordered_set_.Get(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_int_unordered_set(int index, ::google::protobuf::int32 value) {
  test_int_unordered_set_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_int_unordered_set)
}
inline void WelfareNodeDBDataPddBuy::add_test_int_unordered_set(::google::protobuf::int32 value) {
  test_int_unordered_set_.Add(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_int_unordered_set)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WelfareNodeDBDataPddBuy::test_int_unordered_set() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_int_unordered_set)
  return test_int_unordered_set_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WelfareNodeDBDataPddBuy::mutable_test_int_unordered_set() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_int_unordered_set)
  return &test_int_unordered_set_;
}

// bytes test_bytes = 11 [(.nanopb) = {
inline void WelfareNodeDBDataPddBuy::clear_test_bytes() {
  test_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_bytes() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
  return test_bytes_.GetNoArena();
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes(const ::std::string& value) {
  
  test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_bytes(::std::string&& value) {
  
  test_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes(const void* value, size_t size) {
  
  test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_bytes() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
  return test_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataPddBuy::release_test_bytes() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
  
  return test_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WelfareNodeDBDataPddBuy::set_allocated_test_bytes(::std::string* test_bytes) {
  if (test_bytes != NULL) {
    
  } else {
    
  }
  test_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_bytes);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes)
}

// bytes test_bytes_stl = 12 [(.nanopb) = {
inline void WelfareNodeDBDataPddBuy::clear_test_bytes_stl() {
  test_bytes_stl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_bytes_stl() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
  return test_bytes_stl_.GetNoArena();
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl(const ::std::string& value) {
  
  test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl(::std::string&& value) {
  
  test_bytes_stl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl(const void* value, size_t size) {
  
  test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_bytes_stl() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
  return test_bytes_stl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataPddBuy::release_test_bytes_stl() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
  
  return test_bytes_stl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WelfareNodeDBDataPddBuy::set_allocated_test_bytes_stl(::std::string* test_bytes_stl) {
  if (test_bytes_stl != NULL) {
    
  } else {
    
  }
  test_bytes_stl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_bytes_stl);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl)
}

// repeated string test_bytes_repeated = 13 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_bytes_repeated_size() const {
  return test_bytes_repeated_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_bytes_repeated() {
  test_bytes_repeated_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_bytes_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
  return test_bytes_repeated_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_bytes_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
  return test_bytes_repeated_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
  test_bytes_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_bytes_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
  test_bytes_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_bytes_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_repeated(int index, const char* value, size_t size) {
  test_bytes_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_bytes_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
  return test_bytes_repeated_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_repeated(const ::std::string& value) {
  test_bytes_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_bytes_repeated(::std::string&& value) {
  test_bytes_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_bytes_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_repeated(const char* value, size_t size) {
  test_bytes_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_bytes_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
  return test_bytes_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_bytes_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_repeated)
  return &test_bytes_repeated_;
}

// repeated string test_bytes_stl_repeated = 14 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_bytes_stl_repeated_size() const {
  return test_bytes_stl_repeated_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_bytes_stl_repeated() {
  test_bytes_stl_repeated_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_bytes_stl_repeated(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_repeated(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_repeated(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
  test_bytes_stl_repeated_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_repeated(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
  test_bytes_stl_repeated_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_repeated(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_repeated_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_repeated(int index, const char* value, size_t size) {
  test_bytes_stl_repeated_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_bytes_stl_repeated() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_repeated(const ::std::string& value) {
  test_bytes_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_repeated(::std::string&& value) {
  test_bytes_stl_repeated_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_repeated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_repeated_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_repeated(const char* value, size_t size) {
  test_bytes_stl_repeated_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_bytes_stl_repeated() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
  return test_bytes_stl_repeated_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_repeated() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_repeated)
  return &test_bytes_stl_repeated_;
}

// repeated string test_bytes_stl_vector = 15 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_bytes_stl_vector_size() const {
  return test_bytes_stl_vector_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_bytes_stl_vector() {
  test_bytes_stl_vector_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_bytes_stl_vector(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
  return test_bytes_stl_vector_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_vector(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
  return test_bytes_stl_vector_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_vector(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
  test_bytes_stl_vector_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_vector(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
  test_bytes_stl_vector_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_vector(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_vector_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_vector(int index, const char* value, size_t size) {
  test_bytes_stl_vector_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_bytes_stl_vector() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
  return test_bytes_stl_vector_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_vector(const ::std::string& value) {
  test_bytes_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_vector(::std::string&& value) {
  test_bytes_stl_vector_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_vector(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_vector_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_vector(const char* value, size_t size) {
  test_bytes_stl_vector_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_bytes_stl_vector() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
  return test_bytes_stl_vector_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_vector() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_vector)
  return &test_bytes_stl_vector_;
}

// repeated string test_bytes_stl_list = 16 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_bytes_stl_list_size() const {
  return test_bytes_stl_list_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_bytes_stl_list() {
  test_bytes_stl_list_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_bytes_stl_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
  return test_bytes_stl_list_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
  return test_bytes_stl_list_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
  test_bytes_stl_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
  test_bytes_stl_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_list(int index, const char* value, size_t size) {
  test_bytes_stl_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_bytes_stl_list() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
  return test_bytes_stl_list_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_list(const ::std::string& value) {
  test_bytes_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_list(::std::string&& value) {
  test_bytes_stl_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_list(const char* value, size_t size) {
  test_bytes_stl_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_bytes_stl_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
  return test_bytes_stl_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_list)
  return &test_bytes_stl_list_;
}

// repeated string test_bytes_stl_unordered_set = 17 [(.nanopb) = {
inline int WelfareNodeDBDataPddBuy::test_bytes_stl_unordered_set_size() const {
  return test_bytes_stl_unordered_set_.size();
}
inline void WelfareNodeDBDataPddBuy::clear_test_bytes_stl_unordered_set() {
  test_bytes_stl_unordered_set_.Clear();
}
inline const ::std::string& WelfareNodeDBDataPddBuy::test_bytes_stl_unordered_set(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_.Get(index);
}
inline ::std::string* WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_unordered_set(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_.Mutable(index);
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_unordered_set(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
  test_bytes_stl_unordered_set_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_unordered_set(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
  test_bytes_stl_unordered_set_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_unordered_set(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_unordered_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
}
inline void WelfareNodeDBDataPddBuy::set_test_bytes_stl_unordered_set(int index, const char* value, size_t size) {
  test_bytes_stl_unordered_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
}
inline ::std::string* WelfareNodeDBDataPddBuy::add_test_bytes_stl_unordered_set() {
  // @@protoc_insertion_point(field_add_mutable:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_.Add();
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_unordered_set(const ::std::string& value) {
  test_bytes_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
}
#if LANG_CXX11
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_unordered_set(::std::string&& value) {
  test_bytes_stl_unordered_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
}
#endif
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_unordered_set(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  test_bytes_stl_unordered_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
}
inline void WelfareNodeDBDataPddBuy::add_test_bytes_stl_unordered_set(const char* value, size_t size) {
  test_bytes_stl_unordered_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WelfareNodeDBDataPddBuy::test_bytes_stl_unordered_set() const {
  // @@protoc_insertion_point(field_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
  return test_bytes_stl_unordered_set_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WelfareNodeDBDataPddBuy::mutable_test_bytes_stl_unordered_set() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.WelfareNodeDBDataPddBuy.test_bytes_stl_unordered_set)
  return &test_bytes_stl_unordered_set_;
}

// -------------------------------------------------------------------

// WelfareNodeDBDataPddOpen

// uint32 m_dwOpenCount = 1;
inline void WelfareNodeDBDataPddOpen::clear_m_dwopencount() {
  m_dwopencount_ = 0u;
}
inline ::google::protobuf::uint32 WelfareNodeDBDataPddOpen::m_dwopencount() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddOpen.m_dwOpenCount)
  return m_dwopencount_;
}
inline void WelfareNodeDBDataPddOpen::set_m_dwopencount(::google::protobuf::uint32 value) {
  
  m_dwopencount_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddOpen.m_dwOpenCount)
}

// uint32 m_dwLastJoinTime = 2;
inline void WelfareNodeDBDataPddOpen::clear_m_dwlastjointime() {
  m_dwlastjointime_ = 0u;
}
inline ::google::protobuf::uint32 WelfareNodeDBDataPddOpen::m_dwlastjointime() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddOpen.m_dwLastJoinTime)
  return m_dwlastjointime_;
}
inline void WelfareNodeDBDataPddOpen::set_m_dwlastjointime(::google::protobuf::uint32 value) {
  
  m_dwlastjointime_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddOpen.m_dwLastJoinTime)
}

// uint64 m_ullTeamID = 3;
inline void WelfareNodeDBDataPddOpen::clear_m_ullteamid() {
  m_ullteamid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 WelfareNodeDBDataPddOpen::m_ullteamid() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddOpen.m_ullTeamID)
  return m_ullteamid_;
}
inline void WelfareNodeDBDataPddOpen::set_m_ullteamid(::google::protobuf::uint64 value) {
  
  m_ullteamid_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddOpen.m_ullTeamID)
}

// uint32 m_dwRwdCount = 4;
inline void WelfareNodeDBDataPddOpen::clear_m_dwrwdcount() {
  m_dwrwdcount_ = 0u;
}
inline ::google::protobuf::uint32 WelfareNodeDBDataPddOpen::m_dwrwdcount() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddOpen.m_dwRwdCount)
  return m_dwrwdcount_;
}
inline void WelfareNodeDBDataPddOpen::set_m_dwrwdcount(::google::protobuf::uint32 value) {
  
  m_dwrwdcount_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddOpen.m_dwRwdCount)
}

// uint32 m_dwLastRwdTime = 5;
inline void WelfareNodeDBDataPddOpen::clear_m_dwlastrwdtime() {
  m_dwlastrwdtime_ = 0u;
}
inline ::google::protobuf::uint32 WelfareNodeDBDataPddOpen::m_dwlastrwdtime() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataPddOpen.m_dwLastRwdTime)
  return m_dwlastrwdtime_;
}
inline void WelfareNodeDBDataPddOpen::set_m_dwlastrwdtime(::google::protobuf::uint32 value) {
  
  m_dwlastrwdtime_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataPddOpen.m_dwLastRwdTime)
}

// -------------------------------------------------------------------

// WelfareNodeDBDataGetTaskManual

// int32 m_iState = 1;
inline void WelfareNodeDBDataGetTaskManual::clear_m_istate() {
  m_istate_ = 0;
}
inline ::google::protobuf::int32 WelfareNodeDBDataGetTaskManual::m_istate() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataGetTaskManual.m_iState)
  return m_istate_;
}
inline void WelfareNodeDBDataGetTaskManual::set_m_istate(::google::protobuf::int32 value) {
  
  m_istate_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataGetTaskManual.m_iState)
}

// -------------------------------------------------------------------

// WelfareNodeDBDataUnion

// .NFrameComm.WelfareNodeDBDataPddBuy m_stPddBuy = 10001;
inline bool WelfareNodeDBDataUnion::has_m_stpddbuy() const {
  return m_stData_case() == kMStPddBuy;
}
inline void WelfareNodeDBDataUnion::set_has_m_stpddbuy() {
  _oneof_case_[0] = kMStPddBuy;
}
inline void WelfareNodeDBDataUnion::clear_m_stpddbuy() {
  if (has_m_stpddbuy()) {
    delete m_stData_.m_stpddbuy_;
    clear_has_m_stData();
  }
}
inline const ::NFrameComm::WelfareNodeDBDataPddBuy& WelfareNodeDBDataUnion::_internal_m_stpddbuy() const {
  return *m_stData_.m_stpddbuy_;
}
inline ::NFrameComm::WelfareNodeDBDataPddBuy* WelfareNodeDBDataUnion::release_m_stpddbuy() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.m_stPddBuy)
  if (has_m_stpddbuy()) {
    clear_has_m_stData();
      ::NFrameComm::WelfareNodeDBDataPddBuy* temp = m_stData_.m_stpddbuy_;
    m_stData_.m_stpddbuy_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::NFrameComm::WelfareNodeDBDataPddBuy& WelfareNodeDBDataUnion::m_stpddbuy() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_stPddBuy)
  return has_m_stpddbuy()
      ? *m_stData_.m_stpddbuy_
      : *reinterpret_cast< ::NFrameComm::WelfareNodeDBDataPddBuy*>(&::NFrameComm::_WelfareNodeDBDataPddBuy_default_instance_);
}
inline ::NFrameComm::WelfareNodeDBDataPddBuy* WelfareNodeDBDataUnion::mutable_m_stpddbuy() {
  if (!has_m_stpddbuy()) {
    clear_m_stData();
    set_has_m_stpddbuy();
    m_stData_.m_stpddbuy_ = CreateMaybeMessage< ::NFrameComm::WelfareNodeDBDataPddBuy >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.m_stPddBuy)
  return m_stData_.m_stpddbuy_;
}

// .NFrameComm.WelfareNodeDBDataPddOpen m_stPddOpen = 10002;
inline bool WelfareNodeDBDataUnion::has_m_stpddopen() const {
  return m_stData_case() == kMStPddOpen;
}
inline void WelfareNodeDBDataUnion::set_has_m_stpddopen() {
  _oneof_case_[0] = kMStPddOpen;
}
inline void WelfareNodeDBDataUnion::clear_m_stpddopen() {
  if (has_m_stpddopen()) {
    delete m_stData_.m_stpddopen_;
    clear_has_m_stData();
  }
}
inline const ::NFrameComm::WelfareNodeDBDataPddOpen& WelfareNodeDBDataUnion::_internal_m_stpddopen() const {
  return *m_stData_.m_stpddopen_;
}
inline ::NFrameComm::WelfareNodeDBDataPddOpen* WelfareNodeDBDataUnion::release_m_stpddopen() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.m_stPddOpen)
  if (has_m_stpddopen()) {
    clear_has_m_stData();
      ::NFrameComm::WelfareNodeDBDataPddOpen* temp = m_stData_.m_stpddopen_;
    m_stData_.m_stpddopen_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::NFrameComm::WelfareNodeDBDataPddOpen& WelfareNodeDBDataUnion::m_stpddopen() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_stPddOpen)
  return has_m_stpddopen()
      ? *m_stData_.m_stpddopen_
      : *reinterpret_cast< ::NFrameComm::WelfareNodeDBDataPddOpen*>(&::NFrameComm::_WelfareNodeDBDataPddOpen_default_instance_);
}
inline ::NFrameComm::WelfareNodeDBDataPddOpen* WelfareNodeDBDataUnion::mutable_m_stpddopen() {
  if (!has_m_stpddopen()) {
    clear_m_stData();
    set_has_m_stpddopen();
    m_stData_.m_stpddopen_ = CreateMaybeMessage< ::NFrameComm::WelfareNodeDBDataPddOpen >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.m_stPddOpen)
  return m_stData_.m_stpddopen_;
}

// .NFrameComm.WelfareNodeDBDataGetTaskManual m_stGetTaskManual = 10003;
inline bool WelfareNodeDBDataUnion::has_m_stgettaskmanual() const {
  return m_stData_case() == kMStGetTaskManual;
}
inline void WelfareNodeDBDataUnion::set_has_m_stgettaskmanual() {
  _oneof_case_[0] = kMStGetTaskManual;
}
inline void WelfareNodeDBDataUnion::clear_m_stgettaskmanual() {
  if (has_m_stgettaskmanual()) {
    delete m_stData_.m_stgettaskmanual_;
    clear_has_m_stData();
  }
}
inline const ::NFrameComm::WelfareNodeDBDataGetTaskManual& WelfareNodeDBDataUnion::_internal_m_stgettaskmanual() const {
  return *m_stData_.m_stgettaskmanual_;
}
inline ::NFrameComm::WelfareNodeDBDataGetTaskManual* WelfareNodeDBDataUnion::release_m_stgettaskmanual() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.m_stGetTaskManual)
  if (has_m_stgettaskmanual()) {
    clear_has_m_stData();
      ::NFrameComm::WelfareNodeDBDataGetTaskManual* temp = m_stData_.m_stgettaskmanual_;
    m_stData_.m_stgettaskmanual_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::NFrameComm::WelfareNodeDBDataGetTaskManual& WelfareNodeDBDataUnion::m_stgettaskmanual() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_stGetTaskManual)
  return has_m_stgettaskmanual()
      ? *m_stData_.m_stgettaskmanual_
      : *reinterpret_cast< ::NFrameComm::WelfareNodeDBDataGetTaskManual*>(&::NFrameComm::_WelfareNodeDBDataGetTaskManual_default_instance_);
}
inline ::NFrameComm::WelfareNodeDBDataGetTaskManual* WelfareNodeDBDataUnion::mutable_m_stgettaskmanual() {
  if (!has_m_stgettaskmanual()) {
    clear_m_stData();
    set_has_m_stgettaskmanual();
    m_stData_.m_stgettaskmanual_ = CreateMaybeMessage< ::NFrameComm::WelfareNodeDBDataGetTaskManual >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.m_stGetTaskManual)
  return m_stData_.m_stgettaskmanual_;
}

// uint32 m_dwBuyCount = 100;
inline bool WelfareNodeDBDataUnion::has_m_dwbuycount() const {
  return m_stData_case() == kMDwBuyCount;
}
inline void WelfareNodeDBDataUnion::set_has_m_dwbuycount() {
  _oneof_case_[0] = kMDwBuyCount;
}
inline void WelfareNodeDBDataUnion::clear_m_dwbuycount() {
  if (has_m_dwbuycount()) {
    m_stData_.m_dwbuycount_ = 0u;
    clear_has_m_stData();
  }
}
inline ::google::protobuf::uint32 WelfareNodeDBDataUnion::m_dwbuycount() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_dwBuyCount)
  if (has_m_dwbuycount()) {
    return m_stData_.m_dwbuycount_;
  }
  return 0u;
}
inline void WelfareNodeDBDataUnion::set_m_dwbuycount(::google::protobuf::uint32 value) {
  if (!has_m_dwbuycount()) {
    clear_m_stData();
    set_has_m_dwbuycount();
  }
  m_stData_.m_dwbuycount_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.m_dwBuyCount)
}

// uint32 m_dwLastBuyTime = 102;
inline bool WelfareNodeDBDataUnion::has_m_dwlastbuytime() const {
  return m_stData_case() == kMDwLastBuyTime;
}
inline void WelfareNodeDBDataUnion::set_has_m_dwlastbuytime() {
  _oneof_case_[0] = kMDwLastBuyTime;
}
inline void WelfareNodeDBDataUnion::clear_m_dwlastbuytime() {
  if (has_m_dwlastbuytime()) {
    m_stData_.m_dwlastbuytime_ = 0u;
    clear_has_m_stData();
  }
}
inline ::google::protobuf::uint32 WelfareNodeDBDataUnion::m_dwlastbuytime() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_dwLastBuyTime)
  if (has_m_dwlastbuytime()) {
    return m_stData_.m_dwlastbuytime_;
  }
  return 0u;
}
inline void WelfareNodeDBDataUnion::set_m_dwlastbuytime(::google::protobuf::uint32 value) {
  if (!has_m_dwlastbuytime()) {
    clear_m_stData();
    set_has_m_dwlastbuytime();
  }
  m_stData_.m_dwlastbuytime_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.m_dwLastBuyTime)
}

// string test_string = 1 [(.nanopb) = {
inline bool WelfareNodeDBDataUnion::has_test_string() const {
  return m_stData_case() == kTestString;
}
inline void WelfareNodeDBDataUnion::set_has_test_string() {
  _oneof_case_[0] = kTestString;
}
inline void WelfareNodeDBDataUnion::clear_test_string() {
  if (has_test_string()) {
    m_stData_.test_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_m_stData();
  }
}
inline const ::std::string& WelfareNodeDBDataUnion::test_string() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.test_string)
  if (has_test_string()) {
    return m_stData_.test_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void WelfareNodeDBDataUnion::set_test_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_string)
  if (!has_test_string()) {
    clear_m_stData();
    set_has_test_string();
    m_stData_.test_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_string)
}
#if LANG_CXX11
inline void WelfareNodeDBDataUnion::set_test_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_string)
  if (!has_test_string()) {
    clear_m_stData();
    set_has_test_string();
    m_stData_.test_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataUnion.test_string)
}
#endif
inline void WelfareNodeDBDataUnion::set_test_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_test_string()) {
    clear_m_stData();
    set_has_test_string();
    m_stData_.test_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataUnion.test_string)
}
inline void WelfareNodeDBDataUnion::set_test_string(const char* value, size_t size) {
  if (!has_test_string()) {
    clear_m_stData();
    set_has_test_string();
    m_stData_.test_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataUnion.test_string)
}
inline ::std::string* WelfareNodeDBDataUnion::mutable_test_string() {
  if (!has_test_string()) {
    clear_m_stData();
    set_has_test_string();
    m_stData_.test_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.test_string)
  return m_stData_.test_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataUnion::release_test_string() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.test_string)
  if (has_test_string()) {
    clear_has_m_stData();
    return m_stData_.test_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void WelfareNodeDBDataUnion::set_allocated_test_string(::std::string* test_string) {
  if (!has_test_string()) {
    m_stData_.test_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_m_stData();
  if (test_string != NULL) {
    set_has_test_string();
    m_stData_.test_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_string);
  }
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataUnion.test_string)
}

// string test_string_stl = 2 [(.nanopb) = {
inline bool WelfareNodeDBDataUnion::has_test_string_stl() const {
  return m_stData_case() == kTestStringStl;
}
inline void WelfareNodeDBDataUnion::set_has_test_string_stl() {
  _oneof_case_[0] = kTestStringStl;
}
inline void WelfareNodeDBDataUnion::clear_test_string_stl() {
  if (has_test_string_stl()) {
    m_stData_.test_string_stl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_m_stData();
  }
}
inline const ::std::string& WelfareNodeDBDataUnion::test_string_stl() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
  if (has_test_string_stl()) {
    return m_stData_.test_string_stl_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void WelfareNodeDBDataUnion::set_test_string_stl(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
  if (!has_test_string_stl()) {
    clear_m_stData();
    set_has_test_string_stl();
    m_stData_.test_string_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
}
#if LANG_CXX11
inline void WelfareNodeDBDataUnion::set_test_string_stl(::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
  if (!has_test_string_stl()) {
    clear_m_stData();
    set_has_test_string_stl();
    m_stData_.test_string_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
}
#endif
inline void WelfareNodeDBDataUnion::set_test_string_stl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_test_string_stl()) {
    clear_m_stData();
    set_has_test_string_stl();
    m_stData_.test_string_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
}
inline void WelfareNodeDBDataUnion::set_test_string_stl(const char* value, size_t size) {
  if (!has_test_string_stl()) {
    clear_m_stData();
    set_has_test_string_stl();
    m_stData_.test_string_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_string_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
}
inline ::std::string* WelfareNodeDBDataUnion::mutable_test_string_stl() {
  if (!has_test_string_stl()) {
    clear_m_stData();
    set_has_test_string_stl();
    m_stData_.test_string_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
  return m_stData_.test_string_stl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataUnion::release_test_string_stl() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
  if (has_test_string_stl()) {
    clear_has_m_stData();
    return m_stData_.test_string_stl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void WelfareNodeDBDataUnion::set_allocated_test_string_stl(::std::string* test_string_stl) {
  if (!has_test_string_stl()) {
    m_stData_.test_string_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_m_stData();
  if (test_string_stl != NULL) {
    set_has_test_string_stl();
    m_stData_.test_string_stl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_string_stl);
  }
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataUnion.test_string_stl)
}

// bytes test_bytes = 11 [(.nanopb) = {
inline bool WelfareNodeDBDataUnion::has_test_bytes() const {
  return m_stData_case() == kTestBytes;
}
inline void WelfareNodeDBDataUnion::set_has_test_bytes() {
  _oneof_case_[0] = kTestBytes;
}
inline void WelfareNodeDBDataUnion::clear_test_bytes() {
  if (has_test_bytes()) {
    m_stData_.test_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_m_stData();
  }
}
inline const ::std::string& WelfareNodeDBDataUnion::test_bytes() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
  if (has_test_bytes()) {
    return m_stData_.test_bytes_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void WelfareNodeDBDataUnion::set_test_bytes(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
  if (!has_test_bytes()) {
    clear_m_stData();
    set_has_test_bytes();
    m_stData_.test_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
}
#if LANG_CXX11
inline void WelfareNodeDBDataUnion::set_test_bytes(::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
  if (!has_test_bytes()) {
    clear_m_stData();
    set_has_test_bytes();
    m_stData_.test_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
}
#endif
inline void WelfareNodeDBDataUnion::set_test_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_test_bytes()) {
    clear_m_stData();
    set_has_test_bytes();
    m_stData_.test_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
}
inline void WelfareNodeDBDataUnion::set_test_bytes(const void* value, size_t size) {
  if (!has_test_bytes()) {
    clear_m_stData();
    set_has_test_bytes();
    m_stData_.test_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
}
inline ::std::string* WelfareNodeDBDataUnion::mutable_test_bytes() {
  if (!has_test_bytes()) {
    clear_m_stData();
    set_has_test_bytes();
    m_stData_.test_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
  return m_stData_.test_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataUnion::release_test_bytes() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
  if (has_test_bytes()) {
    clear_has_m_stData();
    return m_stData_.test_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void WelfareNodeDBDataUnion::set_allocated_test_bytes(::std::string* test_bytes) {
  if (!has_test_bytes()) {
    m_stData_.test_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_m_stData();
  if (test_bytes != NULL) {
    set_has_test_bytes();
    m_stData_.test_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataUnion.test_bytes)
}

// bytes test_bytes_stl = 12 [(.nanopb) = {
inline bool WelfareNodeDBDataUnion::has_test_bytes_stl() const {
  return m_stData_case() == kTestBytesStl;
}
inline void WelfareNodeDBDataUnion::set_has_test_bytes_stl() {
  _oneof_case_[0] = kTestBytesStl;
}
inline void WelfareNodeDBDataUnion::clear_test_bytes_stl() {
  if (has_test_bytes_stl()) {
    m_stData_.test_bytes_stl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_m_stData();
  }
}
inline const ::std::string& WelfareNodeDBDataUnion::test_bytes_stl() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
  if (has_test_bytes_stl()) {
    return m_stData_.test_bytes_stl_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void WelfareNodeDBDataUnion::set_test_bytes_stl(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
  if (!has_test_bytes_stl()) {
    clear_m_stData();
    set_has_test_bytes_stl();
    m_stData_.test_bytes_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
}
#if LANG_CXX11
inline void WelfareNodeDBDataUnion::set_test_bytes_stl(::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
  if (!has_test_bytes_stl()) {
    clear_m_stData();
    set_has_test_bytes_stl();
    m_stData_.test_bytes_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
}
#endif
inline void WelfareNodeDBDataUnion::set_test_bytes_stl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_test_bytes_stl()) {
    clear_m_stData();
    set_has_test_bytes_stl();
    m_stData_.test_bytes_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
}
inline void WelfareNodeDBDataUnion::set_test_bytes_stl(const void* value, size_t size) {
  if (!has_test_bytes_stl()) {
    clear_m_stData();
    set_has_test_bytes_stl();
    m_stData_.test_bytes_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  m_stData_.test_bytes_stl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
}
inline ::std::string* WelfareNodeDBDataUnion::mutable_test_bytes_stl() {
  if (!has_test_bytes_stl()) {
    clear_m_stData();
    set_has_test_bytes_stl();
    m_stData_.test_bytes_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
  return m_stData_.test_bytes_stl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WelfareNodeDBDataUnion::release_test_bytes_stl() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
  if (has_test_bytes_stl()) {
    clear_has_m_stData();
    return m_stData_.test_bytes_stl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void WelfareNodeDBDataUnion::set_allocated_test_bytes_stl(::std::string* test_bytes_stl) {
  if (!has_test_bytes_stl()) {
    m_stData_.test_bytes_stl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_m_stData();
  if (test_bytes_stl != NULL) {
    set_has_test_bytes_stl();
    m_stData_.test_bytes_stl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), test_bytes_stl);
  }
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataUnion.test_bytes_stl)
}

// .NFrameEnum.FrameGlobalTestEnum test_enum = 13;
inline bool WelfareNodeDBDataUnion::has_test_enum() const {
  return m_stData_case() == kTestEnum;
}
inline void WelfareNodeDBDataUnion::set_has_test_enum() {
  _oneof_case_[0] = kTestEnum;
}
inline void WelfareNodeDBDataUnion::clear_test_enum() {
  if (has_test_enum()) {
    m_stData_.test_enum_ = 0;
    clear_has_m_stData();
  }
}
inline ::NFrameEnum::FrameGlobalTestEnum WelfareNodeDBDataUnion::test_enum() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.test_enum)
  if (has_test_enum()) {
    return static_cast< ::NFrameEnum::FrameGlobalTestEnum >(m_stData_.test_enum_);
  }
  return static_cast< ::NFrameEnum::FrameGlobalTestEnum >(0);
}
inline void WelfareNodeDBDataUnion::set_test_enum(::NFrameEnum::FrameGlobalTestEnum value) {
  if (!has_test_enum()) {
    clear_m_stData();
    set_has_test_enum();
  }
  m_stData_.test_enum_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.test_enum)
}

// uint32 m_dwBuyCount2 = 1000;
inline bool WelfareNodeDBDataUnion::has_m_dwbuycount2() const {
  return m_stData2_case() == kMDwBuyCount2;
}
inline void WelfareNodeDBDataUnion::set_has_m_dwbuycount2() {
  _oneof_case_[1] = kMDwBuyCount2;
}
inline void WelfareNodeDBDataUnion::clear_m_dwbuycount2() {
  if (has_m_dwbuycount2()) {
    m_stData2_.m_dwbuycount2_ = 0u;
    clear_has_m_stData2();
  }
}
inline ::google::protobuf::uint32 WelfareNodeDBDataUnion::m_dwbuycount2() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_dwBuyCount2)
  if (has_m_dwbuycount2()) {
    return m_stData2_.m_dwbuycount2_;
  }
  return 0u;
}
inline void WelfareNodeDBDataUnion::set_m_dwbuycount2(::google::protobuf::uint32 value) {
  if (!has_m_dwbuycount2()) {
    clear_m_stData2();
    set_has_m_dwbuycount2();
  }
  m_stData2_.m_dwbuycount2_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.m_dwBuyCount2)
}

// uint32 m_dwLastBuyTime2 = 1002;
inline bool WelfareNodeDBDataUnion::has_m_dwlastbuytime2() const {
  return m_stData2_case() == kMDwLastBuyTime2;
}
inline void WelfareNodeDBDataUnion::set_has_m_dwlastbuytime2() {
  _oneof_case_[1] = kMDwLastBuyTime2;
}
inline void WelfareNodeDBDataUnion::clear_m_dwlastbuytime2() {
  if (has_m_dwlastbuytime2()) {
    m_stData2_.m_dwlastbuytime2_ = 0u;
    clear_has_m_stData2();
  }
}
inline ::google::protobuf::uint32 WelfareNodeDBDataUnion::m_dwlastbuytime2() const {
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_dwLastBuyTime2)
  if (has_m_dwlastbuytime2()) {
    return m_stData2_.m_dwlastbuytime2_;
  }
  return 0u;
}
inline void WelfareNodeDBDataUnion::set_m_dwlastbuytime2(::google::protobuf::uint32 value) {
  if (!has_m_dwlastbuytime2()) {
    clear_m_stData2();
    set_has_m_dwlastbuytime2();
  }
  m_stData2_.m_dwlastbuytime2_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.WelfareNodeDBDataUnion.m_dwLastBuyTime2)
}

// .NFrameComm.WelfareNodeDBDataPddBuy m_stPddBuy1 = 111;
inline bool WelfareNodeDBDataUnion::has_m_stpddbuy1() const {
  return this != internal_default_instance() && m_stpddbuy1_ != NULL;
}
inline void WelfareNodeDBDataUnion::clear_m_stpddbuy1() {
  if (GetArenaNoVirtual() == NULL && m_stpddbuy1_ != NULL) {
    delete m_stpddbuy1_;
  }
  m_stpddbuy1_ = NULL;
}
inline const ::NFrameComm::WelfareNodeDBDataPddBuy& WelfareNodeDBDataUnion::_internal_m_stpddbuy1() const {
  return *m_stpddbuy1_;
}
inline const ::NFrameComm::WelfareNodeDBDataPddBuy& WelfareNodeDBDataUnion::m_stpddbuy1() const {
  const ::NFrameComm::WelfareNodeDBDataPddBuy* p = m_stpddbuy1_;
  // @@protoc_insertion_point(field_get:NFrameComm.WelfareNodeDBDataUnion.m_stPddBuy1)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrameComm::WelfareNodeDBDataPddBuy*>(
      &::NFrameComm::_WelfareNodeDBDataPddBuy_default_instance_);
}
inline ::NFrameComm::WelfareNodeDBDataPddBuy* WelfareNodeDBDataUnion::release_m_stpddbuy1() {
  // @@protoc_insertion_point(field_release:NFrameComm.WelfareNodeDBDataUnion.m_stPddBuy1)
  
  ::NFrameComm::WelfareNodeDBDataPddBuy* temp = m_stpddbuy1_;
  m_stpddbuy1_ = NULL;
  return temp;
}
inline ::NFrameComm::WelfareNodeDBDataPddBuy* WelfareNodeDBDataUnion::mutable_m_stpddbuy1() {
  
  if (m_stpddbuy1_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrameComm::WelfareNodeDBDataPddBuy>(GetArenaNoVirtual());
    m_stpddbuy1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.WelfareNodeDBDataUnion.m_stPddBuy1)
  return m_stpddbuy1_;
}
inline void WelfareNodeDBDataUnion::set_allocated_m_stpddbuy1(::NFrameComm::WelfareNodeDBDataPddBuy* m_stpddbuy1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete m_stpddbuy1_;
  }
  if (m_stpddbuy1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      m_stpddbuy1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, m_stpddbuy1, submessage_arena);
    }
    
  } else {
    
  }
  m_stpddbuy1_ = m_stpddbuy1;
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.WelfareNodeDBDataUnion.m_stPddBuy1)
}

inline bool WelfareNodeDBDataUnion::has_m_stData() const {
  return m_stData_case() != M_STDATA_NOT_SET;
}
inline void WelfareNodeDBDataUnion::clear_has_m_stData() {
  _oneof_case_[0] = M_STDATA_NOT_SET;
}
inline bool WelfareNodeDBDataUnion::has_m_stData2() const {
  return m_stData2_case() != M_STDATA2_NOT_SET;
}
inline void WelfareNodeDBDataUnion::clear_has_m_stData2() {
  _oneof_case_[1] = M_STDATA2_NOT_SET;
}
inline WelfareNodeDBDataUnion::MStDataCase WelfareNodeDBDataUnion::m_stData_case() const {
  return WelfareNodeDBDataUnion::MStDataCase(_oneof_case_[0]);
}
inline WelfareNodeDBDataUnion::MStData2Case WelfareNodeDBDataUnion::m_stData2_case() const {
  return WelfareNodeDBDataUnion::MStData2Case(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// BevLogTestItem

// uint32 item_id = 1;
inline void BevLogTestItem::clear_item_id() {
  item_id_ = 0u;
}
inline ::google::protobuf::uint32 BevLogTestItem::item_id() const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTestItem.item_id)
  return item_id_;
}
inline void BevLogTestItem::set_item_id(::google::protobuf::uint32 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.BevLogTestItem.item_id)
}

// uint32 item_num = 2;
inline void BevLogTestItem::clear_item_num() {
  item_num_ = 0u;
}
inline ::google::protobuf::uint32 BevLogTestItem::item_num() const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTestItem.item_num)
  return item_num_;
}
inline void BevLogTestItem::set_item_num(::google::protobuf::uint32 value) {
  
  item_num_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.BevLogTestItem.item_num)
}

// -------------------------------------------------------------------

// BevLogTest

// uint64 tDtEventTime = 1;
inline void BevLogTest::clear_tdteventtime() {
  tdteventtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BevLogTest::tdteventtime() const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTest.tDtEventTime)
  return tdteventtime_;
}
inline void BevLogTest::set_tdteventtime(::google::protobuf::uint64 value) {
  
  tdteventtime_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.BevLogTest.tDtEventTime)
}

// string szVGameIP = 2 [(.nanopb) = {
inline void BevLogTest::clear_szvgameip() {
  szvgameip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BevLogTest::szvgameip() const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTest.szVGameIP)
  return szvgameip_.GetNoArena();
}
inline void BevLogTest::set_szvgameip(const ::std::string& value) {
  
  szvgameip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrameComm.BevLogTest.szVGameIP)
}
#if LANG_CXX11
inline void BevLogTest::set_szvgameip(::std::string&& value) {
  
  szvgameip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrameComm.BevLogTest.szVGameIP)
}
#endif
inline void BevLogTest::set_szvgameip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  szvgameip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrameComm.BevLogTest.szVGameIP)
}
inline void BevLogTest::set_szvgameip(const char* value, size_t size) {
  
  szvgameip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrameComm.BevLogTest.szVGameIP)
}
inline ::std::string* BevLogTest::mutable_szvgameip() {
  
  // @@protoc_insertion_point(field_mutable:NFrameComm.BevLogTest.szVGameIP)
  return szvgameip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BevLogTest::release_szvgameip() {
  // @@protoc_insertion_point(field_release:NFrameComm.BevLogTest.szVGameIP)
  
  return szvgameip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BevLogTest::set_allocated_szvgameip(::std::string* szvgameip) {
  if (szvgameip != NULL) {
    
  } else {
    
  }
  szvgameip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szvgameip);
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.BevLogTest.szVGameIP)
}

// int32 iIZoneAreaID = 3;
inline void BevLogTest::clear_iizoneareaid() {
  iizoneareaid_ = 0;
}
inline ::google::protobuf::int32 BevLogTest::iizoneareaid() const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTest.iIZoneAreaID)
  return iizoneareaid_;
}
inline void BevLogTest::set_iizoneareaid(::google::protobuf::int32 value) {
  
  iizoneareaid_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.BevLogTest.iIZoneAreaID)
}

// int32 iITimeShift = 4;
inline void BevLogTest::clear_iitimeshift() {
  iitimeshift_ = 0;
}
inline ::google::protobuf::int32 BevLogTest::iitimeshift() const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTest.iITimeShift)
  return iitimeshift_;
}
inline void BevLogTest::set_iitimeshift(::google::protobuf::int32 value) {
  
  iitimeshift_ = value;
  // @@protoc_insertion_point(field_set:NFrameComm.BevLogTest.iITimeShift)
}

// .NFrameComm.BevLogTestItem item = 5;
inline bool BevLogTest::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void BevLogTest::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::NFrameComm::BevLogTestItem& BevLogTest::_internal_item() const {
  return *item_;
}
inline const ::NFrameComm::BevLogTestItem& BevLogTest::item() const {
  const ::NFrameComm::BevLogTestItem* p = item_;
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTest.item)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrameComm::BevLogTestItem*>(
      &::NFrameComm::_BevLogTestItem_default_instance_);
}
inline ::NFrameComm::BevLogTestItem* BevLogTest::release_item() {
  // @@protoc_insertion_point(field_release:NFrameComm.BevLogTest.item)
  
  ::NFrameComm::BevLogTestItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::NFrameComm::BevLogTestItem* BevLogTest::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrameComm::BevLogTestItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrameComm.BevLogTest.item)
  return item_;
}
inline void BevLogTest::set_allocated_item(::NFrameComm::BevLogTestItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:NFrameComm.BevLogTest.item)
}

// repeated .NFrameComm.BevLogTestItem item_list = 6;
inline int BevLogTest::item_list_size() const {
  return item_list_.size();
}
inline void BevLogTest::clear_item_list() {
  item_list_.Clear();
}
inline ::NFrameComm::BevLogTestItem* BevLogTest::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrameComm.BevLogTest.item_list)
  return item_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrameComm::BevLogTestItem >*
BevLogTest::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.BevLogTest.item_list)
  return &item_list_;
}
inline const ::NFrameComm::BevLogTestItem& BevLogTest::item_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTest.item_list)
  return item_list_.Get(index);
}
inline ::NFrameComm::BevLogTestItem* BevLogTest::add_item_list() {
  // @@protoc_insertion_point(field_add:NFrameComm.BevLogTest.item_list)
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrameComm::BevLogTestItem >&
BevLogTest::item_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.BevLogTest.item_list)
  return item_list_;
}

// repeated int32 id_list = 7;
inline int BevLogTest::id_list_size() const {
  return id_list_.size();
}
inline void BevLogTest::clear_id_list() {
  id_list_.Clear();
}
inline ::google::protobuf::int32 BevLogTest::id_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrameComm.BevLogTest.id_list)
  return id_list_.Get(index);
}
inline void BevLogTest::set_id_list(int index, ::google::protobuf::int32 value) {
  id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrameComm.BevLogTest.id_list)
}
inline void BevLogTest::add_id_list(::google::protobuf::int32 value) {
  id_list_.Add(value);
  // @@protoc_insertion_point(field_add:NFrameComm.BevLogTest.id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BevLogTest::id_list() const {
  // @@protoc_insertion_point(field_list:NFrameComm.BevLogTest.id_list)
  return id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BevLogTest::mutable_id_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrameComm.BevLogTest.id_list)
  return &id_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFrameComm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FrameTestComm_2eproto
