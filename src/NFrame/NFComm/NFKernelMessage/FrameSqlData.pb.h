// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameSqlData.proto

#ifndef PROTOBUF_INCLUDED_FrameSqlData_2eproto
#define PROTOBUF_INCLUDED_FrameSqlData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FrameSqlData_2eproto 

namespace protobuf_FrameSqlData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[28];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FrameSqlData_2eproto
namespace NFrame {
class storesvr_baseinfo;
class storesvr_baseinfoDefaultTypeInternal;
extern storesvr_baseinfoDefaultTypeInternal _storesvr_baseinfo_default_instance_;
class storesvr_del;
class storesvr_delDefaultTypeInternal;
extern storesvr_delDefaultTypeInternal _storesvr_del_default_instance_;
class storesvr_del_res;
class storesvr_del_resDefaultTypeInternal;
extern storesvr_del_resDefaultTypeInternal _storesvr_del_res_default_instance_;
class storesvr_delobj;
class storesvr_delobjDefaultTypeInternal;
extern storesvr_delobjDefaultTypeInternal _storesvr_delobj_default_instance_;
class storesvr_delobj_res;
class storesvr_delobj_resDefaultTypeInternal;
extern storesvr_delobj_resDefaultTypeInternal _storesvr_delobj_res_default_instance_;
class storesvr_execute;
class storesvr_executeDefaultTypeInternal;
extern storesvr_executeDefaultTypeInternal _storesvr_execute_default_instance_;
class storesvr_execute_more;
class storesvr_execute_moreDefaultTypeInternal;
extern storesvr_execute_moreDefaultTypeInternal _storesvr_execute_more_default_instance_;
class storesvr_execute_more_res;
class storesvr_execute_more_resDefaultTypeInternal;
extern storesvr_execute_more_resDefaultTypeInternal _storesvr_execute_more_res_default_instance_;
class storesvr_execute_res;
class storesvr_execute_resDefaultTypeInternal;
extern storesvr_execute_resDefaultTypeInternal _storesvr_execute_res_default_instance_;
class storesvr_insert;
class storesvr_insertDefaultTypeInternal;
extern storesvr_insertDefaultTypeInternal _storesvr_insert_default_instance_;
class storesvr_insert_res;
class storesvr_insert_resDefaultTypeInternal;
extern storesvr_insert_resDefaultTypeInternal _storesvr_insert_res_default_instance_;
class storesvr_insertobj;
class storesvr_insertobjDefaultTypeInternal;
extern storesvr_insertobjDefaultTypeInternal _storesvr_insertobj_default_instance_;
class storesvr_insertobj_res;
class storesvr_insertobj_resDefaultTypeInternal;
extern storesvr_insertobj_resDefaultTypeInternal _storesvr_insertobj_res_default_instance_;
class storesvr_mod;
class storesvr_modDefaultTypeInternal;
extern storesvr_modDefaultTypeInternal _storesvr_mod_default_instance_;
class storesvr_mod_res;
class storesvr_mod_resDefaultTypeInternal;
extern storesvr_mod_resDefaultTypeInternal _storesvr_mod_res_default_instance_;
class storesvr_modobj;
class storesvr_modobjDefaultTypeInternal;
extern storesvr_modobjDefaultTypeInternal _storesvr_modobj_default_instance_;
class storesvr_modobj_res;
class storesvr_modobj_resDefaultTypeInternal;
extern storesvr_modobj_resDefaultTypeInternal _storesvr_modobj_res_default_instance_;
class storesvr_opres;
class storesvr_opresDefaultTypeInternal;
extern storesvr_opresDefaultTypeInternal _storesvr_opres_default_instance_;
class storesvr_sel;
class storesvr_selDefaultTypeInternal;
extern storesvr_selDefaultTypeInternal _storesvr_sel_default_instance_;
class storesvr_sel_res;
class storesvr_sel_resDefaultTypeInternal;
extern storesvr_sel_resDefaultTypeInternal _storesvr_sel_res_default_instance_;
class storesvr_selobj;
class storesvr_selobjDefaultTypeInternal;
extern storesvr_selobjDefaultTypeInternal _storesvr_selobj_default_instance_;
class storesvr_selobj_res;
class storesvr_selobj_resDefaultTypeInternal;
extern storesvr_selobj_resDefaultTypeInternal _storesvr_selobj_res_default_instance_;
class storesvr_update;
class storesvr_updateDefaultTypeInternal;
extern storesvr_updateDefaultTypeInternal _storesvr_update_default_instance_;
class storesvr_update_res;
class storesvr_update_resDefaultTypeInternal;
extern storesvr_update_resDefaultTypeInternal _storesvr_update_res_default_instance_;
class storesvr_updateobj;
class storesvr_updateobjDefaultTypeInternal;
extern storesvr_updateobjDefaultTypeInternal _storesvr_updateobj_default_instance_;
class storesvr_updateobj_res;
class storesvr_updateobj_resDefaultTypeInternal;
extern storesvr_updateobj_resDefaultTypeInternal _storesvr_updateobj_res_default_instance_;
class storesvr_vk;
class storesvr_vkDefaultTypeInternal;
extern storesvr_vkDefaultTypeInternal _storesvr_vk_default_instance_;
class storesvr_wherecond;
class storesvr_wherecondDefaultTypeInternal;
extern storesvr_wherecondDefaultTypeInternal _storesvr_wherecond_default_instance_;
}  // namespace NFrame
namespace google {
namespace protobuf {
template<> ::NFrame::storesvr_baseinfo* Arena::CreateMaybeMessage<::NFrame::storesvr_baseinfo>(Arena*);
template<> ::NFrame::storesvr_del* Arena::CreateMaybeMessage<::NFrame::storesvr_del>(Arena*);
template<> ::NFrame::storesvr_del_res* Arena::CreateMaybeMessage<::NFrame::storesvr_del_res>(Arena*);
template<> ::NFrame::storesvr_delobj* Arena::CreateMaybeMessage<::NFrame::storesvr_delobj>(Arena*);
template<> ::NFrame::storesvr_delobj_res* Arena::CreateMaybeMessage<::NFrame::storesvr_delobj_res>(Arena*);
template<> ::NFrame::storesvr_execute* Arena::CreateMaybeMessage<::NFrame::storesvr_execute>(Arena*);
template<> ::NFrame::storesvr_execute_more* Arena::CreateMaybeMessage<::NFrame::storesvr_execute_more>(Arena*);
template<> ::NFrame::storesvr_execute_more_res* Arena::CreateMaybeMessage<::NFrame::storesvr_execute_more_res>(Arena*);
template<> ::NFrame::storesvr_execute_res* Arena::CreateMaybeMessage<::NFrame::storesvr_execute_res>(Arena*);
template<> ::NFrame::storesvr_insert* Arena::CreateMaybeMessage<::NFrame::storesvr_insert>(Arena*);
template<> ::NFrame::storesvr_insert_res* Arena::CreateMaybeMessage<::NFrame::storesvr_insert_res>(Arena*);
template<> ::NFrame::storesvr_insertobj* Arena::CreateMaybeMessage<::NFrame::storesvr_insertobj>(Arena*);
template<> ::NFrame::storesvr_insertobj_res* Arena::CreateMaybeMessage<::NFrame::storesvr_insertobj_res>(Arena*);
template<> ::NFrame::storesvr_mod* Arena::CreateMaybeMessage<::NFrame::storesvr_mod>(Arena*);
template<> ::NFrame::storesvr_mod_res* Arena::CreateMaybeMessage<::NFrame::storesvr_mod_res>(Arena*);
template<> ::NFrame::storesvr_modobj* Arena::CreateMaybeMessage<::NFrame::storesvr_modobj>(Arena*);
template<> ::NFrame::storesvr_modobj_res* Arena::CreateMaybeMessage<::NFrame::storesvr_modobj_res>(Arena*);
template<> ::NFrame::storesvr_opres* Arena::CreateMaybeMessage<::NFrame::storesvr_opres>(Arena*);
template<> ::NFrame::storesvr_sel* Arena::CreateMaybeMessage<::NFrame::storesvr_sel>(Arena*);
template<> ::NFrame::storesvr_sel_res* Arena::CreateMaybeMessage<::NFrame::storesvr_sel_res>(Arena*);
template<> ::NFrame::storesvr_selobj* Arena::CreateMaybeMessage<::NFrame::storesvr_selobj>(Arena*);
template<> ::NFrame::storesvr_selobj_res* Arena::CreateMaybeMessage<::NFrame::storesvr_selobj_res>(Arena*);
template<> ::NFrame::storesvr_update* Arena::CreateMaybeMessage<::NFrame::storesvr_update>(Arena*);
template<> ::NFrame::storesvr_update_res* Arena::CreateMaybeMessage<::NFrame::storesvr_update_res>(Arena*);
template<> ::NFrame::storesvr_updateobj* Arena::CreateMaybeMessage<::NFrame::storesvr_updateobj>(Arena*);
template<> ::NFrame::storesvr_updateobj_res* Arena::CreateMaybeMessage<::NFrame::storesvr_updateobj_res>(Arena*);
template<> ::NFrame::storesvr_vk* Arena::CreateMaybeMessage<::NFrame::storesvr_vk>(Arena*);
template<> ::NFrame::storesvr_wherecond* Arena::CreateMaybeMessage<::NFrame::storesvr_wherecond>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFrame {

enum storesvr_dbtype {
  E_DBTYPE_SQLITE = 0,
  E_DBTYPE_MYSQL = 1,
  storesvr_dbtype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  storesvr_dbtype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool storesvr_dbtype_IsValid(int value);
const storesvr_dbtype storesvr_dbtype_MIN = E_DBTYPE_SQLITE;
const storesvr_dbtype storesvr_dbtype_MAX = E_DBTYPE_MYSQL;
const int storesvr_dbtype_ARRAYSIZE = storesvr_dbtype_MAX + 1;

const ::google::protobuf::EnumDescriptor* storesvr_dbtype_descriptor();
inline const ::std::string& storesvr_dbtype_Name(storesvr_dbtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    storesvr_dbtype_descriptor(), value);
}
inline bool storesvr_dbtype_Parse(
    const ::std::string& name, storesvr_dbtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<storesvr_dbtype>(
    storesvr_dbtype_descriptor(), name, value);
}
enum storesvr_logic_operator {
  E_LOGICOP_NONE = 0,
  E_LOGICOP_AND = 1,
  E_LOGICOP_OR = 2,
  storesvr_logic_operator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  storesvr_logic_operator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool storesvr_logic_operator_IsValid(int value);
const storesvr_logic_operator storesvr_logic_operator_MIN = E_LOGICOP_NONE;
const storesvr_logic_operator storesvr_logic_operator_MAX = E_LOGICOP_OR;
const int storesvr_logic_operator_ARRAYSIZE = storesvr_logic_operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* storesvr_logic_operator_descriptor();
inline const ::std::string& storesvr_logic_operator_Name(storesvr_logic_operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    storesvr_logic_operator_descriptor(), value);
}
inline bool storesvr_logic_operator_Parse(
    const ::std::string& name, storesvr_logic_operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<storesvr_logic_operator>(
    storesvr_logic_operator_descriptor(), name, value);
}
enum storesvr_cmp_operator {
  E_CMPOP_EQUAL = 0,
  E_CMPOP_GREATER = 1,
  E_CMPOP_LESS = 2,
  E_CMPOP_GREATEREQUAL = 3,
  E_CMPOP_LESSEQUAL = 4,
  E_CMPOP_NOTEQUAL = 5,
  storesvr_cmp_operator_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  storesvr_cmp_operator_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool storesvr_cmp_operator_IsValid(int value);
const storesvr_cmp_operator storesvr_cmp_operator_MIN = E_CMPOP_EQUAL;
const storesvr_cmp_operator storesvr_cmp_operator_MAX = E_CMPOP_NOTEQUAL;
const int storesvr_cmp_operator_ARRAYSIZE = storesvr_cmp_operator_MAX + 1;

const ::google::protobuf::EnumDescriptor* storesvr_cmp_operator_descriptor();
inline const ::std::string& storesvr_cmp_operator_Name(storesvr_cmp_operator value) {
  return ::google::protobuf::internal::NameOfEnum(
    storesvr_cmp_operator_descriptor(), value);
}
inline bool storesvr_cmp_operator_Parse(
    const ::std::string& name, storesvr_cmp_operator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<storesvr_cmp_operator>(
    storesvr_cmp_operator_descriptor(), name, value);
}
enum storesvr_column_type {
  E_COLUMNTYPE_NUM = 0,
  E_COLUMNTYPE_STRING = 1,
  storesvr_column_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  storesvr_column_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool storesvr_column_type_IsValid(int value);
const storesvr_column_type storesvr_column_type_MIN = E_COLUMNTYPE_NUM;
const storesvr_column_type storesvr_column_type_MAX = E_COLUMNTYPE_STRING;
const int storesvr_column_type_ARRAYSIZE = storesvr_column_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* storesvr_column_type_descriptor();
inline const ::std::string& storesvr_column_type_Name(storesvr_column_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    storesvr_column_type_descriptor(), value);
}
inline bool storesvr_column_type_Parse(
    const ::std::string& name, storesvr_column_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<storesvr_column_type>(
    storesvr_column_type_descriptor(), name, value);
}
// ===================================================================

class storesvr_vk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_vk) */ {
 public:
  storesvr_vk();
  virtual ~storesvr_vk();

  storesvr_vk(const storesvr_vk& from);

  inline storesvr_vk& operator=(const storesvr_vk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_vk(storesvr_vk&& from) noexcept
    : storesvr_vk() {
    *this = ::std::move(from);
  }

  inline storesvr_vk& operator=(storesvr_vk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_vk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_vk* internal_default_instance() {
    return reinterpret_cast<const storesvr_vk*>(
               &_storesvr_vk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(storesvr_vk* other);
  friend void swap(storesvr_vk& a, storesvr_vk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_vk* New() const final {
    return CreateMaybeMessage<storesvr_vk>(NULL);
  }

  storesvr_vk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_vk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_vk& from);
  void MergeFrom(const storesvr_vk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_vk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string column_name = 1;
  void clear_column_name();
  static const int kColumnNameFieldNumber = 1;
  const ::std::string& column_name() const;
  void set_column_name(const ::std::string& value);
  #if LANG_CXX11
  void set_column_name(::std::string&& value);
  #endif
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  ::std::string* mutable_column_name();
  ::std::string* release_column_name();
  void set_allocated_column_name(::std::string* column_name);

  // string column_value = 2;
  void clear_column_value();
  static const int kColumnValueFieldNumber = 2;
  const ::std::string& column_value() const;
  void set_column_value(const ::std::string& value);
  #if LANG_CXX11
  void set_column_value(::std::string&& value);
  #endif
  void set_column_value(const char* value);
  void set_column_value(const char* value, size_t size);
  ::std::string* mutable_column_value();
  ::std::string* release_column_value();
  void set_allocated_column_value(::std::string* column_value);

  // .NFrame.storesvr_cmp_operator cmp_operator = 3;
  void clear_cmp_operator();
  static const int kCmpOperatorFieldNumber = 3;
  ::NFrame::storesvr_cmp_operator cmp_operator() const;
  void set_cmp_operator(::NFrame::storesvr_cmp_operator value);

  // .NFrame.storesvr_column_type column_type = 4;
  void clear_column_type();
  static const int kColumnTypeFieldNumber = 4;
  ::NFrame::storesvr_column_type column_type() const;
  void set_column_type(::NFrame::storesvr_column_type value);

  // .NFrame.storesvr_logic_operator logic_operator = 5;
  void clear_logic_operator();
  static const int kLogicOperatorFieldNumber = 5;
  ::NFrame::storesvr_logic_operator logic_operator() const;
  void set_logic_operator(::NFrame::storesvr_logic_operator value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_vk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr column_name_;
  ::google::protobuf::internal::ArenaStringPtr column_value_;
  int cmp_operator_;
  int column_type_;
  int logic_operator_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_wherecond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_wherecond) */ {
 public:
  storesvr_wherecond();
  virtual ~storesvr_wherecond();

  storesvr_wherecond(const storesvr_wherecond& from);

  inline storesvr_wherecond& operator=(const storesvr_wherecond& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_wherecond(storesvr_wherecond&& from) noexcept
    : storesvr_wherecond() {
    *this = ::std::move(from);
  }

  inline storesvr_wherecond& operator=(storesvr_wherecond&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_wherecond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_wherecond* internal_default_instance() {
    return reinterpret_cast<const storesvr_wherecond*>(
               &_storesvr_wherecond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(storesvr_wherecond* other);
  friend void swap(storesvr_wherecond& a, storesvr_wherecond& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_wherecond* New() const final {
    return CreateMaybeMessage<storesvr_wherecond>(NULL);
  }

  storesvr_wherecond* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_wherecond>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_wherecond& from);
  void MergeFrom(const storesvr_wherecond& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_wherecond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFrame.storesvr_vk where_conds = 2;
  int where_conds_size() const;
  void clear_where_conds();
  static const int kWhereCondsFieldNumber = 2;
  ::NFrame::storesvr_vk* mutable_where_conds(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrame::storesvr_vk >*
      mutable_where_conds();
  const ::NFrame::storesvr_vk& where_conds(int index) const;
  ::NFrame::storesvr_vk* add_where_conds();
  const ::google::protobuf::RepeatedPtrField< ::NFrame::storesvr_vk >&
      where_conds() const;

  // repeated string private_keys = 4;
  int private_keys_size() const;
  void clear_private_keys();
  static const int kPrivateKeysFieldNumber = 4;
  const ::std::string& private_keys(int index) const;
  ::std::string* mutable_private_keys(int index);
  void set_private_keys(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_private_keys(int index, ::std::string&& value);
  #endif
  void set_private_keys(int index, const char* value);
  void set_private_keys(int index, const char* value, size_t size);
  ::std::string* add_private_keys();
  void add_private_keys(const ::std::string& value);
  #if LANG_CXX11
  void add_private_keys(::std::string&& value);
  #endif
  void add_private_keys(const char* value);
  void add_private_keys(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& private_keys() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_private_keys();

  // string where_additional_conds = 3;
  void clear_where_additional_conds();
  static const int kWhereAdditionalCondsFieldNumber = 3;
  const ::std::string& where_additional_conds() const;
  void set_where_additional_conds(const ::std::string& value);
  #if LANG_CXX11
  void set_where_additional_conds(::std::string&& value);
  #endif
  void set_where_additional_conds(const char* value);
  void set_where_additional_conds(const char* value, size_t size);
  ::std::string* mutable_where_additional_conds();
  ::std::string* release_where_additional_conds();
  void set_allocated_where_additional_conds(::std::string* where_additional_conds);

  // uint64 mod_key = 1;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 1;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_wherecond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFrame::storesvr_vk > where_conds_;
  ::google::protobuf::RepeatedPtrField< ::std::string> private_keys_;
  ::google::protobuf::internal::ArenaStringPtr where_additional_conds_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_baseinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_baseinfo) */ {
 public:
  storesvr_baseinfo();
  virtual ~storesvr_baseinfo();

  storesvr_baseinfo(const storesvr_baseinfo& from);

  inline storesvr_baseinfo& operator=(const storesvr_baseinfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_baseinfo(storesvr_baseinfo&& from) noexcept
    : storesvr_baseinfo() {
    *this = ::std::move(from);
  }

  inline storesvr_baseinfo& operator=(storesvr_baseinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_baseinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_baseinfo* internal_default_instance() {
    return reinterpret_cast<const storesvr_baseinfo*>(
               &_storesvr_baseinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(storesvr_baseinfo* other);
  friend void swap(storesvr_baseinfo& a, storesvr_baseinfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_baseinfo* New() const final {
    return CreateMaybeMessage<storesvr_baseinfo>(NULL);
  }

  storesvr_baseinfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_baseinfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_baseinfo& from);
  void MergeFrom(const storesvr_baseinfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_baseinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sel_fields = 4;
  int sel_fields_size() const;
  void clear_sel_fields();
  static const int kSelFieldsFieldNumber = 4;
  const ::std::string& sel_fields(int index) const;
  ::std::string* mutable_sel_fields(int index);
  void set_sel_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sel_fields(int index, ::std::string&& value);
  #endif
  void set_sel_fields(int index, const char* value);
  void set_sel_fields(int index, const char* value, size_t size);
  ::std::string* add_sel_fields();
  void add_sel_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_sel_fields(::std::string&& value);
  #endif
  void add_sel_fields(const char* value);
  void add_sel_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sel_fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sel_fields();

  // string dbname = 1;
  void clear_dbname();
  static const int kDbnameFieldNumber = 1;
  const ::std::string& dbname() const;
  void set_dbname(const ::std::string& value);
  #if LANG_CXX11
  void set_dbname(::std::string&& value);
  #endif
  void set_dbname(const char* value);
  void set_dbname(const char* value, size_t size);
  ::std::string* mutable_dbname();
  ::std::string* release_dbname();
  void set_allocated_dbname(::std::string* dbname);

  // string tbname = 2;
  void clear_tbname();
  static const int kTbnameFieldNumber = 2;
  const ::std::string& tbname() const;
  void set_tbname(const ::std::string& value);
  #if LANG_CXX11
  void set_tbname(::std::string&& value);
  #endif
  void set_tbname(const char* value);
  void set_tbname(const char* value, size_t size);
  ::std::string* mutable_tbname();
  ::std::string* release_tbname();
  void set_allocated_tbname(::std::string* tbname);

  // string clname = 3;
  void clear_clname();
  static const int kClnameFieldNumber = 3;
  const ::std::string& clname() const;
  void set_clname(const ::std::string& value);
  #if LANG_CXX11
  void set_clname(::std::string&& value);
  #endif
  void set_clname(const char* value);
  void set_clname(const char* value, size_t size);
  ::std::string* mutable_clname();
  ::std::string* release_clname();
  void set_allocated_clname(::std::string* clname);

  // string package_name = 6;
  void clear_package_name();
  static const int kPackageNameFieldNumber = 6;
  const ::std::string& package_name() const;
  void set_package_name(const ::std::string& value);
  #if LANG_CXX11
  void set_package_name(::std::string&& value);
  #endif
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  ::std::string* mutable_package_name();
  ::std::string* release_package_name();
  void set_allocated_package_name(::std::string* package_name);

  // uint32 max_records = 5;
  void clear_max_records();
  static const int kMaxRecordsFieldNumber = 5;
  ::google::protobuf::uint32 max_records() const;
  void set_max_records(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_baseinfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sel_fields_;
  ::google::protobuf::internal::ArenaStringPtr dbname_;
  ::google::protobuf::internal::ArenaStringPtr tbname_;
  ::google::protobuf::internal::ArenaStringPtr clname_;
  ::google::protobuf::internal::ArenaStringPtr package_name_;
  ::google::protobuf::uint32 max_records_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_opres : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_opres) */ {
 public:
  storesvr_opres();
  virtual ~storesvr_opres();

  storesvr_opres(const storesvr_opres& from);

  inline storesvr_opres& operator=(const storesvr_opres& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_opres(storesvr_opres&& from) noexcept
    : storesvr_opres() {
    *this = ::std::move(from);
  }

  inline storesvr_opres& operator=(storesvr_opres&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_opres& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_opres* internal_default_instance() {
    return reinterpret_cast<const storesvr_opres*>(
               &_storesvr_opres_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(storesvr_opres* other);
  friend void swap(storesvr_opres& a, storesvr_opres& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_opres* New() const final {
    return CreateMaybeMessage<storesvr_opres>(NULL);
  }

  storesvr_opres* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_opres>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_opres& from);
  void MergeFrom(const storesvr_opres& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_opres* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 3;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // uint64 mod_key = 1;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 1;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // int32 err_code = 2;
  void clear_err_code();
  static const int kErrCodeFieldNumber = 2;
  ::google::protobuf::int32 err_code() const;
  void set_err_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_opres)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::uint64 mod_key_;
  ::google::protobuf::int32 err_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_sel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_sel) */ {
 public:
  storesvr_sel();
  virtual ~storesvr_sel();

  storesvr_sel(const storesvr_sel& from);

  inline storesvr_sel& operator=(const storesvr_sel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_sel(storesvr_sel&& from) noexcept
    : storesvr_sel() {
    *this = ::std::move(from);
  }

  inline storesvr_sel& operator=(storesvr_sel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_sel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_sel* internal_default_instance() {
    return reinterpret_cast<const storesvr_sel*>(
               &_storesvr_sel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(storesvr_sel* other);
  friend void swap(storesvr_sel& a, storesvr_sel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_sel* New() const final {
    return CreateMaybeMessage<storesvr_sel>(NULL);
  }

  storesvr_sel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_sel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_sel& from);
  void MergeFrom(const storesvr_sel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_sel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_wherecond cond = 2;
  bool has_cond() const;
  void clear_cond();
  static const int kCondFieldNumber = 2;
  private:
  const ::NFrame::storesvr_wherecond& _internal_cond() const;
  public:
  const ::NFrame::storesvr_wherecond& cond() const;
  ::NFrame::storesvr_wherecond* release_cond();
  ::NFrame::storesvr_wherecond* mutable_cond();
  void set_allocated_cond(::NFrame::storesvr_wherecond* cond);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_sel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_wherecond* cond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_sel_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_sel_res) */ {
 public:
  storesvr_sel_res();
  virtual ~storesvr_sel_res();

  storesvr_sel_res(const storesvr_sel_res& from);

  inline storesvr_sel_res& operator=(const storesvr_sel_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_sel_res(storesvr_sel_res&& from) noexcept
    : storesvr_sel_res() {
    *this = ::std::move(from);
  }

  inline storesvr_sel_res& operator=(storesvr_sel_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_sel_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_sel_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_sel_res*>(
               &_storesvr_sel_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(storesvr_sel_res* other);
  friend void swap(storesvr_sel_res& a, storesvr_sel_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_sel_res* New() const final {
    return CreateMaybeMessage<storesvr_sel_res>(NULL);
  }

  storesvr_sel_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_sel_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_sel_res& from);
  void MergeFrom(const storesvr_sel_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_sel_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes record = 5;
  int record_size() const;
  void clear_record();
  static const int kRecordFieldNumber = 5;
  const ::std::string& record(int index) const;
  ::std::string* mutable_record(int index);
  void set_record(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_record(int index, ::std::string&& value);
  #endif
  void set_record(int index, const char* value);
  void set_record(int index, const void* value, size_t size);
  ::std::string* add_record();
  void add_record(const ::std::string& value);
  #if LANG_CXX11
  void add_record(::std::string&& value);
  #endif
  void add_record(const char* value);
  void add_record(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& record() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_record();

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // bool is_lastbatch = 3;
  void clear_is_lastbatch();
  static const int kIsLastbatchFieldNumber = 3;
  bool is_lastbatch() const;
  void set_is_lastbatch(bool value);

  // int32 row_count = 4;
  void clear_row_count();
  static const int kRowCountFieldNumber = 4;
  ::google::protobuf::int32 row_count() const;
  void set_row_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_sel_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  bool is_lastbatch_;
  ::google::protobuf::int32 row_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_selobj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_selobj) */ {
 public:
  storesvr_selobj();
  virtual ~storesvr_selobj();

  storesvr_selobj(const storesvr_selobj& from);

  inline storesvr_selobj& operator=(const storesvr_selobj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_selobj(storesvr_selobj&& from) noexcept
    : storesvr_selobj() {
    *this = ::std::move(from);
  }

  inline storesvr_selobj& operator=(storesvr_selobj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_selobj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_selobj* internal_default_instance() {
    return reinterpret_cast<const storesvr_selobj*>(
               &_storesvr_selobj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(storesvr_selobj* other);
  friend void swap(storesvr_selobj& a, storesvr_selobj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_selobj* New() const final {
    return CreateMaybeMessage<storesvr_selobj>(NULL);
  }

  storesvr_selobj* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_selobj>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_selobj& from);
  void MergeFrom(const storesvr_selobj& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_selobj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_selobj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_selobj_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_selobj_res) */ {
 public:
  storesvr_selobj_res();
  virtual ~storesvr_selobj_res();

  storesvr_selobj_res(const storesvr_selobj_res& from);

  inline storesvr_selobj_res& operator=(const storesvr_selobj_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_selobj_res(storesvr_selobj_res&& from) noexcept
    : storesvr_selobj_res() {
    *this = ::std::move(from);
  }

  inline storesvr_selobj_res& operator=(storesvr_selobj_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_selobj_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_selobj_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_selobj_res*>(
               &_storesvr_selobj_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(storesvr_selobj_res* other);
  friend void swap(storesvr_selobj_res& a, storesvr_selobj_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_selobj_res* New() const final {
    return CreateMaybeMessage<storesvr_selobj_res>(NULL);
  }

  storesvr_selobj_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_selobj_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_selobj_res& from);
  void MergeFrom(const storesvr_selobj_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_selobj_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_selobj_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_insertobj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_insertobj) */ {
 public:
  storesvr_insertobj();
  virtual ~storesvr_insertobj();

  storesvr_insertobj(const storesvr_insertobj& from);

  inline storesvr_insertobj& operator=(const storesvr_insertobj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_insertobj(storesvr_insertobj&& from) noexcept
    : storesvr_insertobj() {
    *this = ::std::move(from);
  }

  inline storesvr_insertobj& operator=(storesvr_insertobj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_insertobj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_insertobj* internal_default_instance() {
    return reinterpret_cast<const storesvr_insertobj*>(
               &_storesvr_insertobj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(storesvr_insertobj* other);
  friend void swap(storesvr_insertobj& a, storesvr_insertobj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_insertobj* New() const final {
    return CreateMaybeMessage<storesvr_insertobj>(NULL);
  }

  storesvr_insertobj* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_insertobj>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_insertobj& from);
  void MergeFrom(const storesvr_insertobj& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_insertobj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_insertobj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_insertobj_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_insertobj_res) */ {
 public:
  storesvr_insertobj_res();
  virtual ~storesvr_insertobj_res();

  storesvr_insertobj_res(const storesvr_insertobj_res& from);

  inline storesvr_insertobj_res& operator=(const storesvr_insertobj_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_insertobj_res(storesvr_insertobj_res&& from) noexcept
    : storesvr_insertobj_res() {
    *this = ::std::move(from);
  }

  inline storesvr_insertobj_res& operator=(storesvr_insertobj_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_insertobj_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_insertobj_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_insertobj_res*>(
               &_storesvr_insertobj_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(storesvr_insertobj_res* other);
  friend void swap(storesvr_insertobj_res& a, storesvr_insertobj_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_insertobj_res* New() const final {
    return CreateMaybeMessage<storesvr_insertobj_res>(NULL);
  }

  storesvr_insertobj_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_insertobj_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_insertobj_res& from);
  void MergeFrom(const storesvr_insertobj_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_insertobj_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_insertobj_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_insert : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_insert) */ {
 public:
  storesvr_insert();
  virtual ~storesvr_insert();

  storesvr_insert(const storesvr_insert& from);

  inline storesvr_insert& operator=(const storesvr_insert& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_insert(storesvr_insert&& from) noexcept
    : storesvr_insert() {
    *this = ::std::move(from);
  }

  inline storesvr_insert& operator=(storesvr_insert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_insert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_insert* internal_default_instance() {
    return reinterpret_cast<const storesvr_insert*>(
               &_storesvr_insert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(storesvr_insert* other);
  friend void swap(storesvr_insert& a, storesvr_insert& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_insert* New() const final {
    return CreateMaybeMessage<storesvr_insert>(NULL);
  }

  storesvr_insert* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_insert>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_insert& from);
  void MergeFrom(const storesvr_insert& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_insert* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes record = 3;
  int record_size() const;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record(int index) const;
  ::std::string* mutable_record(int index);
  void set_record(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_record(int index, ::std::string&& value);
  #endif
  void set_record(int index, const char* value);
  void set_record(int index, const void* value, size_t size);
  ::std::string* add_record();
  void add_record(const ::std::string& value);
  #if LANG_CXX11
  void add_record(::std::string&& value);
  #endif
  void add_record(const char* value);
  void add_record(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& record() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_record();

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_insert)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_insert_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_insert_res) */ {
 public:
  storesvr_insert_res();
  virtual ~storesvr_insert_res();

  storesvr_insert_res(const storesvr_insert_res& from);

  inline storesvr_insert_res& operator=(const storesvr_insert_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_insert_res(storesvr_insert_res&& from) noexcept
    : storesvr_insert_res() {
    *this = ::std::move(from);
  }

  inline storesvr_insert_res& operator=(storesvr_insert_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_insert_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_insert_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_insert_res*>(
               &_storesvr_insert_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(storesvr_insert_res* other);
  friend void swap(storesvr_insert_res& a, storesvr_insert_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_insert_res* New() const final {
    return CreateMaybeMessage<storesvr_insert_res>(NULL);
  }

  storesvr_insert_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_insert_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_insert_res& from);
  void MergeFrom(const storesvr_insert_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_insert_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_insert_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_del : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_del) */ {
 public:
  storesvr_del();
  virtual ~storesvr_del();

  storesvr_del(const storesvr_del& from);

  inline storesvr_del& operator=(const storesvr_del& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_del(storesvr_del&& from) noexcept
    : storesvr_del() {
    *this = ::std::move(from);
  }

  inline storesvr_del& operator=(storesvr_del&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_del& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_del* internal_default_instance() {
    return reinterpret_cast<const storesvr_del*>(
               &_storesvr_del_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(storesvr_del* other);
  friend void swap(storesvr_del& a, storesvr_del& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_del* New() const final {
    return CreateMaybeMessage<storesvr_del>(NULL);
  }

  storesvr_del* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_del>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_del& from);
  void MergeFrom(const storesvr_del& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_del* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_wherecond cond = 2;
  bool has_cond() const;
  void clear_cond();
  static const int kCondFieldNumber = 2;
  private:
  const ::NFrame::storesvr_wherecond& _internal_cond() const;
  public:
  const ::NFrame::storesvr_wherecond& cond() const;
  ::NFrame::storesvr_wherecond* release_cond();
  ::NFrame::storesvr_wherecond* mutable_cond();
  void set_allocated_cond(::NFrame::storesvr_wherecond* cond);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_del)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_wherecond* cond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_del_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_del_res) */ {
 public:
  storesvr_del_res();
  virtual ~storesvr_del_res();

  storesvr_del_res(const storesvr_del_res& from);

  inline storesvr_del_res& operator=(const storesvr_del_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_del_res(storesvr_del_res&& from) noexcept
    : storesvr_del_res() {
    *this = ::std::move(from);
  }

  inline storesvr_del_res& operator=(storesvr_del_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_del_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_del_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_del_res*>(
               &_storesvr_del_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(storesvr_del_res* other);
  friend void swap(storesvr_del_res& a, storesvr_del_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_del_res* New() const final {
    return CreateMaybeMessage<storesvr_del_res>(NULL);
  }

  storesvr_del_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_del_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_del_res& from);
  void MergeFrom(const storesvr_del_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_del_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_del_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_delobj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_delobj) */ {
 public:
  storesvr_delobj();
  virtual ~storesvr_delobj();

  storesvr_delobj(const storesvr_delobj& from);

  inline storesvr_delobj& operator=(const storesvr_delobj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_delobj(storesvr_delobj&& from) noexcept
    : storesvr_delobj() {
    *this = ::std::move(from);
  }

  inline storesvr_delobj& operator=(storesvr_delobj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_delobj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_delobj* internal_default_instance() {
    return reinterpret_cast<const storesvr_delobj*>(
               &_storesvr_delobj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(storesvr_delobj* other);
  friend void swap(storesvr_delobj& a, storesvr_delobj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_delobj* New() const final {
    return CreateMaybeMessage<storesvr_delobj>(NULL);
  }

  storesvr_delobj* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_delobj>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_delobj& from);
  void MergeFrom(const storesvr_delobj& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_delobj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_delobj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_delobj_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_delobj_res) */ {
 public:
  storesvr_delobj_res();
  virtual ~storesvr_delobj_res();

  storesvr_delobj_res(const storesvr_delobj_res& from);

  inline storesvr_delobj_res& operator=(const storesvr_delobj_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_delobj_res(storesvr_delobj_res&& from) noexcept
    : storesvr_delobj_res() {
    *this = ::std::move(from);
  }

  inline storesvr_delobj_res& operator=(storesvr_delobj_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_delobj_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_delobj_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_delobj_res*>(
               &_storesvr_delobj_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(storesvr_delobj_res* other);
  friend void swap(storesvr_delobj_res& a, storesvr_delobj_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_delobj_res* New() const final {
    return CreateMaybeMessage<storesvr_delobj_res>(NULL);
  }

  storesvr_delobj_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_delobj_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_delobj_res& from);
  void MergeFrom(const storesvr_delobj_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_delobj_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_delobj_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_mod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_mod) */ {
 public:
  storesvr_mod();
  virtual ~storesvr_mod();

  storesvr_mod(const storesvr_mod& from);

  inline storesvr_mod& operator=(const storesvr_mod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_mod(storesvr_mod&& from) noexcept
    : storesvr_mod() {
    *this = ::std::move(from);
  }

  inline storesvr_mod& operator=(storesvr_mod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_mod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_mod* internal_default_instance() {
    return reinterpret_cast<const storesvr_mod*>(
               &_storesvr_mod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(storesvr_mod* other);
  friend void swap(storesvr_mod& a, storesvr_mod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_mod* New() const final {
    return CreateMaybeMessage<storesvr_mod>(NULL);
  }

  storesvr_mod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_mod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_mod& from);
  void MergeFrom(const storesvr_mod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_mod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_wherecond cond = 2;
  bool has_cond() const;
  void clear_cond();
  static const int kCondFieldNumber = 2;
  private:
  const ::NFrame::storesvr_wherecond& _internal_cond() const;
  public:
  const ::NFrame::storesvr_wherecond& cond() const;
  ::NFrame::storesvr_wherecond* release_cond();
  ::NFrame::storesvr_wherecond* mutable_cond();
  void set_allocated_cond(::NFrame::storesvr_wherecond* cond);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_mod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_wherecond* cond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_mod_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_mod_res) */ {
 public:
  storesvr_mod_res();
  virtual ~storesvr_mod_res();

  storesvr_mod_res(const storesvr_mod_res& from);

  inline storesvr_mod_res& operator=(const storesvr_mod_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_mod_res(storesvr_mod_res&& from) noexcept
    : storesvr_mod_res() {
    *this = ::std::move(from);
  }

  inline storesvr_mod_res& operator=(storesvr_mod_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_mod_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_mod_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_mod_res*>(
               &_storesvr_mod_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(storesvr_mod_res* other);
  friend void swap(storesvr_mod_res& a, storesvr_mod_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_mod_res* New() const final {
    return CreateMaybeMessage<storesvr_mod_res>(NULL);
  }

  storesvr_mod_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_mod_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_mod_res& from);
  void MergeFrom(const storesvr_mod_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_mod_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_mod_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_modobj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_modobj) */ {
 public:
  storesvr_modobj();
  virtual ~storesvr_modobj();

  storesvr_modobj(const storesvr_modobj& from);

  inline storesvr_modobj& operator=(const storesvr_modobj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_modobj(storesvr_modobj&& from) noexcept
    : storesvr_modobj() {
    *this = ::std::move(from);
  }

  inline storesvr_modobj& operator=(storesvr_modobj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_modobj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_modobj* internal_default_instance() {
    return reinterpret_cast<const storesvr_modobj*>(
               &_storesvr_modobj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(storesvr_modobj* other);
  friend void swap(storesvr_modobj& a, storesvr_modobj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_modobj* New() const final {
    return CreateMaybeMessage<storesvr_modobj>(NULL);
  }

  storesvr_modobj* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_modobj>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_modobj& from);
  void MergeFrom(const storesvr_modobj& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_modobj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_modobj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_modobj_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_modobj_res) */ {
 public:
  storesvr_modobj_res();
  virtual ~storesvr_modobj_res();

  storesvr_modobj_res(const storesvr_modobj_res& from);

  inline storesvr_modobj_res& operator=(const storesvr_modobj_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_modobj_res(storesvr_modobj_res&& from) noexcept
    : storesvr_modobj_res() {
    *this = ::std::move(from);
  }

  inline storesvr_modobj_res& operator=(storesvr_modobj_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_modobj_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_modobj_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_modobj_res*>(
               &_storesvr_modobj_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(storesvr_modobj_res* other);
  friend void swap(storesvr_modobj_res& a, storesvr_modobj_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_modobj_res* New() const final {
    return CreateMaybeMessage<storesvr_modobj_res>(NULL);
  }

  storesvr_modobj_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_modobj_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_modobj_res& from);
  void MergeFrom(const storesvr_modobj_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_modobj_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_modobj_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_update : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_update) */ {
 public:
  storesvr_update();
  virtual ~storesvr_update();

  storesvr_update(const storesvr_update& from);

  inline storesvr_update& operator=(const storesvr_update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_update(storesvr_update&& from) noexcept
    : storesvr_update() {
    *this = ::std::move(from);
  }

  inline storesvr_update& operator=(storesvr_update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_update* internal_default_instance() {
    return reinterpret_cast<const storesvr_update*>(
               &_storesvr_update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(storesvr_update* other);
  friend void swap(storesvr_update& a, storesvr_update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_update* New() const final {
    return CreateMaybeMessage<storesvr_update>(NULL);
  }

  storesvr_update* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_update>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_update& from);
  void MergeFrom(const storesvr_update& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_wherecond cond = 2;
  bool has_cond() const;
  void clear_cond();
  static const int kCondFieldNumber = 2;
  private:
  const ::NFrame::storesvr_wherecond& _internal_cond() const;
  public:
  const ::NFrame::storesvr_wherecond& cond() const;
  ::NFrame::storesvr_wherecond* release_cond();
  ::NFrame::storesvr_wherecond* mutable_cond();
  void set_allocated_cond(::NFrame::storesvr_wherecond* cond);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_update)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_wherecond* cond_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_update_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_update_res) */ {
 public:
  storesvr_update_res();
  virtual ~storesvr_update_res();

  storesvr_update_res(const storesvr_update_res& from);

  inline storesvr_update_res& operator=(const storesvr_update_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_update_res(storesvr_update_res&& from) noexcept
    : storesvr_update_res() {
    *this = ::std::move(from);
  }

  inline storesvr_update_res& operator=(storesvr_update_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_update_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_update_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_update_res*>(
               &_storesvr_update_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(storesvr_update_res* other);
  friend void swap(storesvr_update_res& a, storesvr_update_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_update_res* New() const final {
    return CreateMaybeMessage<storesvr_update_res>(NULL);
  }

  storesvr_update_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_update_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_update_res& from);
  void MergeFrom(const storesvr_update_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_update_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_update_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_updateobj : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_updateobj) */ {
 public:
  storesvr_updateobj();
  virtual ~storesvr_updateobj();

  storesvr_updateobj(const storesvr_updateobj& from);

  inline storesvr_updateobj& operator=(const storesvr_updateobj& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_updateobj(storesvr_updateobj&& from) noexcept
    : storesvr_updateobj() {
    *this = ::std::move(from);
  }

  inline storesvr_updateobj& operator=(storesvr_updateobj&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_updateobj& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_updateobj* internal_default_instance() {
    return reinterpret_cast<const storesvr_updateobj*>(
               &_storesvr_updateobj_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(storesvr_updateobj* other);
  friend void swap(storesvr_updateobj& a, storesvr_updateobj& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_updateobj* New() const final {
    return CreateMaybeMessage<storesvr_updateobj>(NULL);
  }

  storesvr_updateobj* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_updateobj>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_updateobj& from);
  void MergeFrom(const storesvr_updateobj& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_updateobj* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_updateobj)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_updateobj_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_updateobj_res) */ {
 public:
  storesvr_updateobj_res();
  virtual ~storesvr_updateobj_res();

  storesvr_updateobj_res(const storesvr_updateobj_res& from);

  inline storesvr_updateobj_res& operator=(const storesvr_updateobj_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_updateobj_res(storesvr_updateobj_res&& from) noexcept
    : storesvr_updateobj_res() {
    *this = ::std::move(from);
  }

  inline storesvr_updateobj_res& operator=(storesvr_updateobj_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_updateobj_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_updateobj_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_updateobj_res*>(
               &_storesvr_updateobj_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(storesvr_updateobj_res* other);
  friend void swap(storesvr_updateobj_res& a, storesvr_updateobj_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_updateobj_res* New() const final {
    return CreateMaybeMessage<storesvr_updateobj_res>(NULL);
  }

  storesvr_updateobj_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_updateobj_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_updateobj_res& from);
  void MergeFrom(const storesvr_updateobj_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_updateobj_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_updateobj_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_execute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_execute) */ {
 public:
  storesvr_execute();
  virtual ~storesvr_execute();

  storesvr_execute(const storesvr_execute& from);

  inline storesvr_execute& operator=(const storesvr_execute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_execute(storesvr_execute&& from) noexcept
    : storesvr_execute() {
    *this = ::std::move(from);
  }

  inline storesvr_execute& operator=(storesvr_execute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_execute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_execute* internal_default_instance() {
    return reinterpret_cast<const storesvr_execute*>(
               &_storesvr_execute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(storesvr_execute* other);
  friend void swap(storesvr_execute& a, storesvr_execute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_execute* New() const final {
    return CreateMaybeMessage<storesvr_execute>(NULL);
  }

  storesvr_execute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_execute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_execute& from);
  void MergeFrom(const storesvr_execute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_execute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_execute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_execute_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_execute_res) */ {
 public:
  storesvr_execute_res();
  virtual ~storesvr_execute_res();

  storesvr_execute_res(const storesvr_execute_res& from);

  inline storesvr_execute_res& operator=(const storesvr_execute_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_execute_res(storesvr_execute_res&& from) noexcept
    : storesvr_execute_res() {
    *this = ::std::move(from);
  }

  inline storesvr_execute_res& operator=(storesvr_execute_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_execute_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_execute_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_execute_res*>(
               &_storesvr_execute_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(storesvr_execute_res* other);
  friend void swap(storesvr_execute_res& a, storesvr_execute_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_execute_res* New() const final {
    return CreateMaybeMessage<storesvr_execute_res>(NULL);
  }

  storesvr_execute_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_execute_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_execute_res& from);
  void MergeFrom(const storesvr_execute_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_execute_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_execute_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_execute_more : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_execute_more) */ {
 public:
  storesvr_execute_more();
  virtual ~storesvr_execute_more();

  storesvr_execute_more(const storesvr_execute_more& from);

  inline storesvr_execute_more& operator=(const storesvr_execute_more& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_execute_more(storesvr_execute_more&& from) noexcept
    : storesvr_execute_more() {
    *this = ::std::move(from);
  }

  inline storesvr_execute_more& operator=(storesvr_execute_more&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_execute_more& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_execute_more* internal_default_instance() {
    return reinterpret_cast<const storesvr_execute_more*>(
               &_storesvr_execute_more_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(storesvr_execute_more* other);
  friend void swap(storesvr_execute_more& a, storesvr_execute_more& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_execute_more* New() const final {
    return CreateMaybeMessage<storesvr_execute_more>(NULL);
  }

  storesvr_execute_more* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_execute_more>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_execute_more& from);
  void MergeFrom(const storesvr_execute_more& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_execute_more* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes record = 3;
  void clear_record();
  static const int kRecordFieldNumber = 3;
  const ::std::string& record() const;
  void set_record(const ::std::string& value);
  #if LANG_CXX11
  void set_record(::std::string&& value);
  #endif
  void set_record(const char* value);
  void set_record(const void* value, size_t size);
  ::std::string* mutable_record();
  ::std::string* release_record();
  void set_allocated_record(::std::string* record);

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // uint64 mod_key = 2;
  void clear_mod_key();
  static const int kModKeyFieldNumber = 2;
  ::google::protobuf::uint64 mod_key() const;
  void set_mod_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_execute_more)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::google::protobuf::uint64 mod_key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class storesvr_execute_more_res : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.storesvr_execute_more_res) */ {
 public:
  storesvr_execute_more_res();
  virtual ~storesvr_execute_more_res();

  storesvr_execute_more_res(const storesvr_execute_more_res& from);

  inline storesvr_execute_more_res& operator=(const storesvr_execute_more_res& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  storesvr_execute_more_res(storesvr_execute_more_res&& from) noexcept
    : storesvr_execute_more_res() {
    *this = ::std::move(from);
  }

  inline storesvr_execute_more_res& operator=(storesvr_execute_more_res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const storesvr_execute_more_res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const storesvr_execute_more_res* internal_default_instance() {
    return reinterpret_cast<const storesvr_execute_more_res*>(
               &_storesvr_execute_more_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(storesvr_execute_more_res* other);
  friend void swap(storesvr_execute_more_res& a, storesvr_execute_more_res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline storesvr_execute_more_res* New() const final {
    return CreateMaybeMessage<storesvr_execute_more_res>(NULL);
  }

  storesvr_execute_more_res* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<storesvr_execute_more_res>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const storesvr_execute_more_res& from);
  void MergeFrom(const storesvr_execute_more_res& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(storesvr_execute_more_res* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes record = 5;
  int record_size() const;
  void clear_record();
  static const int kRecordFieldNumber = 5;
  const ::std::string& record(int index) const;
  ::std::string* mutable_record(int index);
  void set_record(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_record(int index, ::std::string&& value);
  #endif
  void set_record(int index, const char* value);
  void set_record(int index, const void* value, size_t size);
  ::std::string* add_record();
  void add_record(const ::std::string& value);
  #if LANG_CXX11
  void add_record(::std::string&& value);
  #endif
  void add_record(const char* value);
  void add_record(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& record() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_record();

  // .NFrame.storesvr_baseinfo baseinfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 1;
  private:
  const ::NFrame::storesvr_baseinfo& _internal_baseinfo() const;
  public:
  const ::NFrame::storesvr_baseinfo& baseinfo() const;
  ::NFrame::storesvr_baseinfo* release_baseinfo();
  ::NFrame::storesvr_baseinfo* mutable_baseinfo();
  void set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo);

  // .NFrame.storesvr_opres opres = 2;
  bool has_opres() const;
  void clear_opres();
  static const int kOpresFieldNumber = 2;
  private:
  const ::NFrame::storesvr_opres& _internal_opres() const;
  public:
  const ::NFrame::storesvr_opres& opres() const;
  ::NFrame::storesvr_opres* release_opres();
  ::NFrame::storesvr_opres* mutable_opres();
  void set_allocated_opres(::NFrame::storesvr_opres* opres);

  // bool is_lastbatch = 3;
  void clear_is_lastbatch();
  static const int kIsLastbatchFieldNumber = 3;
  bool is_lastbatch() const;
  void set_is_lastbatch(bool value);

  // int32 row_count = 4;
  void clear_row_count();
  static const int kRowCountFieldNumber = 4;
  ::google::protobuf::int32 row_count() const;
  void set_row_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.storesvr_execute_more_res)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> record_;
  ::NFrame::storesvr_baseinfo* baseinfo_;
  ::NFrame::storesvr_opres* opres_;
  bool is_lastbatch_;
  ::google::protobuf::int32 row_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameSqlData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// storesvr_vk

// string column_name = 1;
inline void storesvr_vk::clear_column_name() {
  column_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_vk::column_name() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_vk.column_name)
  return column_name_.GetNoArena();
}
inline void storesvr_vk::set_column_name(const ::std::string& value) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_vk.column_name)
}
#if LANG_CXX11
inline void storesvr_vk::set_column_name(::std::string&& value) {
  
  column_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_vk.column_name)
}
#endif
inline void storesvr_vk::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_vk.column_name)
}
inline void storesvr_vk::set_column_name(const char* value, size_t size) {
  
  column_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_vk.column_name)
}
inline ::std::string* storesvr_vk::mutable_column_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_vk.column_name)
  return column_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_vk::release_column_name() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_vk.column_name)
  
  return column_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_vk::set_allocated_column_name(::std::string* column_name) {
  if (column_name != NULL) {
    
  } else {
    
  }
  column_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_vk.column_name)
}

// string column_value = 2;
inline void storesvr_vk::clear_column_value() {
  column_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_vk::column_value() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_vk.column_value)
  return column_value_.GetNoArena();
}
inline void storesvr_vk::set_column_value(const ::std::string& value) {
  
  column_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_vk.column_value)
}
#if LANG_CXX11
inline void storesvr_vk::set_column_value(::std::string&& value) {
  
  column_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_vk.column_value)
}
#endif
inline void storesvr_vk::set_column_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  column_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_vk.column_value)
}
inline void storesvr_vk::set_column_value(const char* value, size_t size) {
  
  column_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_vk.column_value)
}
inline ::std::string* storesvr_vk::mutable_column_value() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_vk.column_value)
  return column_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_vk::release_column_value() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_vk.column_value)
  
  return column_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_vk::set_allocated_column_value(::std::string* column_value) {
  if (column_value != NULL) {
    
  } else {
    
  }
  column_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column_value);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_vk.column_value)
}

// .NFrame.storesvr_cmp_operator cmp_operator = 3;
inline void storesvr_vk::clear_cmp_operator() {
  cmp_operator_ = 0;
}
inline ::NFrame::storesvr_cmp_operator storesvr_vk::cmp_operator() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_vk.cmp_operator)
  return static_cast< ::NFrame::storesvr_cmp_operator >(cmp_operator_);
}
inline void storesvr_vk::set_cmp_operator(::NFrame::storesvr_cmp_operator value) {
  
  cmp_operator_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_vk.cmp_operator)
}

// .NFrame.storesvr_column_type column_type = 4;
inline void storesvr_vk::clear_column_type() {
  column_type_ = 0;
}
inline ::NFrame::storesvr_column_type storesvr_vk::column_type() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_vk.column_type)
  return static_cast< ::NFrame::storesvr_column_type >(column_type_);
}
inline void storesvr_vk::set_column_type(::NFrame::storesvr_column_type value) {
  
  column_type_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_vk.column_type)
}

// .NFrame.storesvr_logic_operator logic_operator = 5;
inline void storesvr_vk::clear_logic_operator() {
  logic_operator_ = 0;
}
inline ::NFrame::storesvr_logic_operator storesvr_vk::logic_operator() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_vk.logic_operator)
  return static_cast< ::NFrame::storesvr_logic_operator >(logic_operator_);
}
inline void storesvr_vk::set_logic_operator(::NFrame::storesvr_logic_operator value) {
  
  logic_operator_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_vk.logic_operator)
}

// -------------------------------------------------------------------

// storesvr_wherecond

// uint64 mod_key = 1;
inline void storesvr_wherecond::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_wherecond::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_wherecond.mod_key)
  return mod_key_;
}
inline void storesvr_wherecond::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_wherecond.mod_key)
}

// repeated .NFrame.storesvr_vk where_conds = 2;
inline int storesvr_wherecond::where_conds_size() const {
  return where_conds_.size();
}
inline void storesvr_wherecond::clear_where_conds() {
  where_conds_.Clear();
}
inline ::NFrame::storesvr_vk* storesvr_wherecond::mutable_where_conds(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_wherecond.where_conds)
  return where_conds_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrame::storesvr_vk >*
storesvr_wherecond::mutable_where_conds() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.storesvr_wherecond.where_conds)
  return &where_conds_;
}
inline const ::NFrame::storesvr_vk& storesvr_wherecond::where_conds(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_wherecond.where_conds)
  return where_conds_.Get(index);
}
inline ::NFrame::storesvr_vk* storesvr_wherecond::add_where_conds() {
  // @@protoc_insertion_point(field_add:NFrame.storesvr_wherecond.where_conds)
  return where_conds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrame::storesvr_vk >&
storesvr_wherecond::where_conds() const {
  // @@protoc_insertion_point(field_list:NFrame.storesvr_wherecond.where_conds)
  return where_conds_;
}

// string where_additional_conds = 3;
inline void storesvr_wherecond::clear_where_additional_conds() {
  where_additional_conds_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_wherecond::where_additional_conds() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_wherecond.where_additional_conds)
  return where_additional_conds_.GetNoArena();
}
inline void storesvr_wherecond::set_where_additional_conds(const ::std::string& value) {
  
  where_additional_conds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_wherecond.where_additional_conds)
}
#if LANG_CXX11
inline void storesvr_wherecond::set_where_additional_conds(::std::string&& value) {
  
  where_additional_conds_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_wherecond.where_additional_conds)
}
#endif
inline void storesvr_wherecond::set_where_additional_conds(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  where_additional_conds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_wherecond.where_additional_conds)
}
inline void storesvr_wherecond::set_where_additional_conds(const char* value, size_t size) {
  
  where_additional_conds_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_wherecond.where_additional_conds)
}
inline ::std::string* storesvr_wherecond::mutable_where_additional_conds() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_wherecond.where_additional_conds)
  return where_additional_conds_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_wherecond::release_where_additional_conds() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_wherecond.where_additional_conds)
  
  return where_additional_conds_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_wherecond::set_allocated_where_additional_conds(::std::string* where_additional_conds) {
  if (where_additional_conds != NULL) {
    
  } else {
    
  }
  where_additional_conds_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), where_additional_conds);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_wherecond.where_additional_conds)
}

// repeated string private_keys = 4;
inline int storesvr_wherecond::private_keys_size() const {
  return private_keys_.size();
}
inline void storesvr_wherecond::clear_private_keys() {
  private_keys_.Clear();
}
inline const ::std::string& storesvr_wherecond::private_keys(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_wherecond.private_keys)
  return private_keys_.Get(index);
}
inline ::std::string* storesvr_wherecond::mutable_private_keys(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_wherecond.private_keys)
  return private_keys_.Mutable(index);
}
inline void storesvr_wherecond::set_private_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_wherecond.private_keys)
  private_keys_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void storesvr_wherecond::set_private_keys(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_wherecond.private_keys)
  private_keys_.Mutable(index)->assign(std::move(value));
}
#endif
inline void storesvr_wherecond::set_private_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  private_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_wherecond.private_keys)
}
inline void storesvr_wherecond::set_private_keys(int index, const char* value, size_t size) {
  private_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_wherecond.private_keys)
}
inline ::std::string* storesvr_wherecond::add_private_keys() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.storesvr_wherecond.private_keys)
  return private_keys_.Add();
}
inline void storesvr_wherecond::add_private_keys(const ::std::string& value) {
  private_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.storesvr_wherecond.private_keys)
}
#if LANG_CXX11
inline void storesvr_wherecond::add_private_keys(::std::string&& value) {
  private_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.storesvr_wherecond.private_keys)
}
#endif
inline void storesvr_wherecond::add_private_keys(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  private_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.storesvr_wherecond.private_keys)
}
inline void storesvr_wherecond::add_private_keys(const char* value, size_t size) {
  private_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.storesvr_wherecond.private_keys)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
storesvr_wherecond::private_keys() const {
  // @@protoc_insertion_point(field_list:NFrame.storesvr_wherecond.private_keys)
  return private_keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
storesvr_wherecond::mutable_private_keys() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.storesvr_wherecond.private_keys)
  return &private_keys_;
}

// -------------------------------------------------------------------

// storesvr_baseinfo

// string dbname = 1;
inline void storesvr_baseinfo::clear_dbname() {
  dbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_baseinfo::dbname() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_baseinfo.dbname)
  return dbname_.GetNoArena();
}
inline void storesvr_baseinfo::set_dbname(const ::std::string& value) {
  
  dbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_baseinfo.dbname)
}
#if LANG_CXX11
inline void storesvr_baseinfo::set_dbname(::std::string&& value) {
  
  dbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_baseinfo.dbname)
}
#endif
inline void storesvr_baseinfo::set_dbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_baseinfo.dbname)
}
inline void storesvr_baseinfo::set_dbname(const char* value, size_t size) {
  
  dbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_baseinfo.dbname)
}
inline ::std::string* storesvr_baseinfo::mutable_dbname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_baseinfo.dbname)
  return dbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_baseinfo::release_dbname() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_baseinfo.dbname)
  
  return dbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_baseinfo::set_allocated_dbname(::std::string* dbname) {
  if (dbname != NULL) {
    
  } else {
    
  }
  dbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dbname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_baseinfo.dbname)
}

// string tbname = 2;
inline void storesvr_baseinfo::clear_tbname() {
  tbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_baseinfo::tbname() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_baseinfo.tbname)
  return tbname_.GetNoArena();
}
inline void storesvr_baseinfo::set_tbname(const ::std::string& value) {
  
  tbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_baseinfo.tbname)
}
#if LANG_CXX11
inline void storesvr_baseinfo::set_tbname(::std::string&& value) {
  
  tbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_baseinfo.tbname)
}
#endif
inline void storesvr_baseinfo::set_tbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_baseinfo.tbname)
}
inline void storesvr_baseinfo::set_tbname(const char* value, size_t size) {
  
  tbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_baseinfo.tbname)
}
inline ::std::string* storesvr_baseinfo::mutable_tbname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_baseinfo.tbname)
  return tbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_baseinfo::release_tbname() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_baseinfo.tbname)
  
  return tbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_baseinfo::set_allocated_tbname(::std::string* tbname) {
  if (tbname != NULL) {
    
  } else {
    
  }
  tbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tbname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_baseinfo.tbname)
}

// string clname = 3;
inline void storesvr_baseinfo::clear_clname() {
  clname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_baseinfo::clname() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_baseinfo.clname)
  return clname_.GetNoArena();
}
inline void storesvr_baseinfo::set_clname(const ::std::string& value) {
  
  clname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_baseinfo.clname)
}
#if LANG_CXX11
inline void storesvr_baseinfo::set_clname(::std::string&& value) {
  
  clname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_baseinfo.clname)
}
#endif
inline void storesvr_baseinfo::set_clname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_baseinfo.clname)
}
inline void storesvr_baseinfo::set_clname(const char* value, size_t size) {
  
  clname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_baseinfo.clname)
}
inline ::std::string* storesvr_baseinfo::mutable_clname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_baseinfo.clname)
  return clname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_baseinfo::release_clname() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_baseinfo.clname)
  
  return clname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_baseinfo::set_allocated_clname(::std::string* clname) {
  if (clname != NULL) {
    
  } else {
    
  }
  clname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_baseinfo.clname)
}

// repeated string sel_fields = 4;
inline int storesvr_baseinfo::sel_fields_size() const {
  return sel_fields_.size();
}
inline void storesvr_baseinfo::clear_sel_fields() {
  sel_fields_.Clear();
}
inline const ::std::string& storesvr_baseinfo::sel_fields(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_baseinfo.sel_fields)
  return sel_fields_.Get(index);
}
inline ::std::string* storesvr_baseinfo::mutable_sel_fields(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_baseinfo.sel_fields)
  return sel_fields_.Mutable(index);
}
inline void storesvr_baseinfo::set_sel_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_baseinfo.sel_fields)
  sel_fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void storesvr_baseinfo::set_sel_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_baseinfo.sel_fields)
  sel_fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void storesvr_baseinfo::set_sel_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sel_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_baseinfo.sel_fields)
}
inline void storesvr_baseinfo::set_sel_fields(int index, const char* value, size_t size) {
  sel_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_baseinfo.sel_fields)
}
inline ::std::string* storesvr_baseinfo::add_sel_fields() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.storesvr_baseinfo.sel_fields)
  return sel_fields_.Add();
}
inline void storesvr_baseinfo::add_sel_fields(const ::std::string& value) {
  sel_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.storesvr_baseinfo.sel_fields)
}
#if LANG_CXX11
inline void storesvr_baseinfo::add_sel_fields(::std::string&& value) {
  sel_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.storesvr_baseinfo.sel_fields)
}
#endif
inline void storesvr_baseinfo::add_sel_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sel_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.storesvr_baseinfo.sel_fields)
}
inline void storesvr_baseinfo::add_sel_fields(const char* value, size_t size) {
  sel_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.storesvr_baseinfo.sel_fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
storesvr_baseinfo::sel_fields() const {
  // @@protoc_insertion_point(field_list:NFrame.storesvr_baseinfo.sel_fields)
  return sel_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
storesvr_baseinfo::mutable_sel_fields() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.storesvr_baseinfo.sel_fields)
  return &sel_fields_;
}

// uint32 max_records = 5;
inline void storesvr_baseinfo::clear_max_records() {
  max_records_ = 0u;
}
inline ::google::protobuf::uint32 storesvr_baseinfo::max_records() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_baseinfo.max_records)
  return max_records_;
}
inline void storesvr_baseinfo::set_max_records(::google::protobuf::uint32 value) {
  
  max_records_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_baseinfo.max_records)
}

// string package_name = 6;
inline void storesvr_baseinfo::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_baseinfo::package_name() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_baseinfo.package_name)
  return package_name_.GetNoArena();
}
inline void storesvr_baseinfo::set_package_name(const ::std::string& value) {
  
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_baseinfo.package_name)
}
#if LANG_CXX11
inline void storesvr_baseinfo::set_package_name(::std::string&& value) {
  
  package_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_baseinfo.package_name)
}
#endif
inline void storesvr_baseinfo::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_baseinfo.package_name)
}
inline void storesvr_baseinfo::set_package_name(const char* value, size_t size) {
  
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_baseinfo.package_name)
}
inline ::std::string* storesvr_baseinfo::mutable_package_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_baseinfo.package_name)
  return package_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_baseinfo::release_package_name() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_baseinfo.package_name)
  
  return package_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_baseinfo::set_allocated_package_name(::std::string* package_name) {
  if (package_name != NULL) {
    
  } else {
    
  }
  package_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_baseinfo.package_name)
}

// -------------------------------------------------------------------

// storesvr_opres

// uint64 mod_key = 1;
inline void storesvr_opres::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_opres::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_opres.mod_key)
  return mod_key_;
}
inline void storesvr_opres::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_opres.mod_key)
}

// int32 err_code = 2;
inline void storesvr_opres::clear_err_code() {
  err_code_ = 0;
}
inline ::google::protobuf::int32 storesvr_opres::err_code() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_opres.err_code)
  return err_code_;
}
inline void storesvr_opres::set_err_code(::google::protobuf::int32 value) {
  
  err_code_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_opres.err_code)
}

// string errmsg = 3;
inline void storesvr_opres::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_opres::errmsg() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_opres.errmsg)
  return errmsg_.GetNoArena();
}
inline void storesvr_opres::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_opres.errmsg)
}
#if LANG_CXX11
inline void storesvr_opres::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_opres.errmsg)
}
#endif
inline void storesvr_opres::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_opres.errmsg)
}
inline void storesvr_opres::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_opres.errmsg)
}
inline ::std::string* storesvr_opres::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_opres.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_opres::release_errmsg() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_opres.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_opres::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_opres.errmsg)
}

// -------------------------------------------------------------------

// storesvr_sel

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_sel::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_sel::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_sel::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_sel::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_sel.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_sel::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_sel.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_sel::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_sel.baseinfo)
  return baseinfo_;
}
inline void storesvr_sel::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_sel.baseinfo)
}

// .NFrame.storesvr_wherecond cond = 2;
inline bool storesvr_sel::has_cond() const {
  return this != internal_default_instance() && cond_ != NULL;
}
inline void storesvr_sel::clear_cond() {
  if (GetArenaNoVirtual() == NULL && cond_ != NULL) {
    delete cond_;
  }
  cond_ = NULL;
}
inline const ::NFrame::storesvr_wherecond& storesvr_sel::_internal_cond() const {
  return *cond_;
}
inline const ::NFrame::storesvr_wherecond& storesvr_sel::cond() const {
  const ::NFrame::storesvr_wherecond* p = cond_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_sel.cond)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_wherecond*>(
      &::NFrame::_storesvr_wherecond_default_instance_);
}
inline ::NFrame::storesvr_wherecond* storesvr_sel::release_cond() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_sel.cond)
  
  ::NFrame::storesvr_wherecond* temp = cond_;
  cond_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_wherecond* storesvr_sel::mutable_cond() {
  
  if (cond_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_wherecond>(GetArenaNoVirtual());
    cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_sel.cond)
  return cond_;
}
inline void storesvr_sel::set_allocated_cond(::NFrame::storesvr_wherecond* cond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cond_;
  }
  if (cond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cond, submessage_arena);
    }
    
  } else {
    
  }
  cond_ = cond;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_sel.cond)
}

// -------------------------------------------------------------------

// storesvr_sel_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_sel_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_sel_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_sel_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_sel_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_sel_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_sel_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_sel_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_sel_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_sel_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_sel_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_sel_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_sel_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_sel_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_sel_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_sel_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_sel_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_sel_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_sel_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_sel_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_sel_res.opres)
  return opres_;
}
inline void storesvr_sel_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_sel_res.opres)
}

// bool is_lastbatch = 3;
inline void storesvr_sel_res::clear_is_lastbatch() {
  is_lastbatch_ = false;
}
inline bool storesvr_sel_res::is_lastbatch() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_sel_res.is_lastbatch)
  return is_lastbatch_;
}
inline void storesvr_sel_res::set_is_lastbatch(bool value) {
  
  is_lastbatch_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_sel_res.is_lastbatch)
}

// int32 row_count = 4;
inline void storesvr_sel_res::clear_row_count() {
  row_count_ = 0;
}
inline ::google::protobuf::int32 storesvr_sel_res::row_count() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_sel_res.row_count)
  return row_count_;
}
inline void storesvr_sel_res::set_row_count(::google::protobuf::int32 value) {
  
  row_count_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_sel_res.row_count)
}

// repeated bytes record = 5;
inline int storesvr_sel_res::record_size() const {
  return record_.size();
}
inline void storesvr_sel_res::clear_record() {
  record_.Clear();
}
inline const ::std::string& storesvr_sel_res::record(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_sel_res.record)
  return record_.Get(index);
}
inline ::std::string* storesvr_sel_res::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_sel_res.record)
  return record_.Mutable(index);
}
inline void storesvr_sel_res::set_record(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_sel_res.record)
  record_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void storesvr_sel_res::set_record(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_sel_res.record)
  record_.Mutable(index)->assign(std::move(value));
}
#endif
inline void storesvr_sel_res::set_record(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_sel_res.record)
}
inline void storesvr_sel_res::set_record(int index, const void* value, size_t size) {
  record_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_sel_res.record)
}
inline ::std::string* storesvr_sel_res::add_record() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.storesvr_sel_res.record)
  return record_.Add();
}
inline void storesvr_sel_res::add_record(const ::std::string& value) {
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.storesvr_sel_res.record)
}
#if LANG_CXX11
inline void storesvr_sel_res::add_record(::std::string&& value) {
  record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.storesvr_sel_res.record)
}
#endif
inline void storesvr_sel_res::add_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.storesvr_sel_res.record)
}
inline void storesvr_sel_res::add_record(const void* value, size_t size) {
  record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.storesvr_sel_res.record)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
storesvr_sel_res::record() const {
  // @@protoc_insertion_point(field_list:NFrame.storesvr_sel_res.record)
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
storesvr_sel_res::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.storesvr_sel_res.record)
  return &record_;
}

// -------------------------------------------------------------------

// storesvr_selobj

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_selobj::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_selobj::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_selobj::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_selobj::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_selobj.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_selobj::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_selobj.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_selobj::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_selobj.baseinfo)
  return baseinfo_;
}
inline void storesvr_selobj::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_selobj.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_selobj::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_selobj::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_selobj.mod_key)
  return mod_key_;
}
inline void storesvr_selobj::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_selobj.mod_key)
}

// bytes record = 3;
inline void storesvr_selobj::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_selobj::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_selobj.record)
  return record_.GetNoArena();
}
inline void storesvr_selobj::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_selobj.record)
}
#if LANG_CXX11
inline void storesvr_selobj::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_selobj.record)
}
#endif
inline void storesvr_selobj::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_selobj.record)
}
inline void storesvr_selobj::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_selobj.record)
}
inline ::std::string* storesvr_selobj::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_selobj.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_selobj::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_selobj.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_selobj::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_selobj.record)
}

// -------------------------------------------------------------------

// storesvr_selobj_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_selobj_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_selobj_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_selobj_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_selobj_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_selobj_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_selobj_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_selobj_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_selobj_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_selobj_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_selobj_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_selobj_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_selobj_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_selobj_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_selobj_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_selobj_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_selobj_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_selobj_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_selobj_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_selobj_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_selobj_res.opres)
  return opres_;
}
inline void storesvr_selobj_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_selobj_res.opres)
}

// bytes record = 3;
inline void storesvr_selobj_res::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_selobj_res::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_selobj_res.record)
  return record_.GetNoArena();
}
inline void storesvr_selobj_res::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_selobj_res.record)
}
#if LANG_CXX11
inline void storesvr_selobj_res::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_selobj_res.record)
}
#endif
inline void storesvr_selobj_res::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_selobj_res.record)
}
inline void storesvr_selobj_res::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_selobj_res.record)
}
inline ::std::string* storesvr_selobj_res::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_selobj_res.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_selobj_res::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_selobj_res.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_selobj_res::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_selobj_res.record)
}

// -------------------------------------------------------------------

// storesvr_insertobj

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_insertobj::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_insertobj::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insertobj::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insertobj::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insertobj.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_insertobj::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_insertobj.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_insertobj::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insertobj.baseinfo)
  return baseinfo_;
}
inline void storesvr_insertobj::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_insertobj.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_insertobj::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_insertobj::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insertobj.mod_key)
  return mod_key_;
}
inline void storesvr_insertobj::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_insertobj.mod_key)
}

// bytes record = 3;
inline void storesvr_insertobj::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_insertobj::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insertobj.record)
  return record_.GetNoArena();
}
inline void storesvr_insertobj::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_insertobj.record)
}
#if LANG_CXX11
inline void storesvr_insertobj::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_insertobj.record)
}
#endif
inline void storesvr_insertobj::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_insertobj.record)
}
inline void storesvr_insertobj::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_insertobj.record)
}
inline ::std::string* storesvr_insertobj::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insertobj.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_insertobj::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_insertobj.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_insertobj::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_insertobj.record)
}

// -------------------------------------------------------------------

// storesvr_insertobj_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_insertobj_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_insertobj_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insertobj_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insertobj_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insertobj_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_insertobj_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_insertobj_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_insertobj_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insertobj_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_insertobj_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_insertobj_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_insertobj_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_insertobj_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_insertobj_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_insertobj_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insertobj_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_insertobj_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_insertobj_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_insertobj_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insertobj_res.opres)
  return opres_;
}
inline void storesvr_insertobj_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_insertobj_res.opres)
}

// -------------------------------------------------------------------

// storesvr_insert

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_insert::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_insert::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insert::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insert::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insert.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_insert::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_insert.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_insert::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insert.baseinfo)
  return baseinfo_;
}
inline void storesvr_insert::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_insert.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_insert::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_insert::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insert.mod_key)
  return mod_key_;
}
inline void storesvr_insert::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_insert.mod_key)
}

// repeated bytes record = 3;
inline int storesvr_insert::record_size() const {
  return record_.size();
}
inline void storesvr_insert::clear_record() {
  record_.Clear();
}
inline const ::std::string& storesvr_insert::record(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insert.record)
  return record_.Get(index);
}
inline ::std::string* storesvr_insert::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insert.record)
  return record_.Mutable(index);
}
inline void storesvr_insert::set_record(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_insert.record)
  record_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void storesvr_insert::set_record(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_insert.record)
  record_.Mutable(index)->assign(std::move(value));
}
#endif
inline void storesvr_insert::set_record(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_insert.record)
}
inline void storesvr_insert::set_record(int index, const void* value, size_t size) {
  record_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_insert.record)
}
inline ::std::string* storesvr_insert::add_record() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.storesvr_insert.record)
  return record_.Add();
}
inline void storesvr_insert::add_record(const ::std::string& value) {
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.storesvr_insert.record)
}
#if LANG_CXX11
inline void storesvr_insert::add_record(::std::string&& value) {
  record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.storesvr_insert.record)
}
#endif
inline void storesvr_insert::add_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.storesvr_insert.record)
}
inline void storesvr_insert::add_record(const void* value, size_t size) {
  record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.storesvr_insert.record)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
storesvr_insert::record() const {
  // @@protoc_insertion_point(field_list:NFrame.storesvr_insert.record)
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
storesvr_insert::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.storesvr_insert.record)
  return &record_;
}

// -------------------------------------------------------------------

// storesvr_insert_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_insert_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_insert_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insert_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_insert_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insert_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_insert_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_insert_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_insert_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insert_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_insert_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_insert_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_insert_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_insert_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_insert_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_insert_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_insert_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_insert_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_insert_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_insert_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_insert_res.opres)
  return opres_;
}
inline void storesvr_insert_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_insert_res.opres)
}

// -------------------------------------------------------------------

// storesvr_del

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_del::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_del::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_del::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_del::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_del.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_del::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_del.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_del::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_del.baseinfo)
  return baseinfo_;
}
inline void storesvr_del::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_del.baseinfo)
}

// .NFrame.storesvr_wherecond cond = 2;
inline bool storesvr_del::has_cond() const {
  return this != internal_default_instance() && cond_ != NULL;
}
inline void storesvr_del::clear_cond() {
  if (GetArenaNoVirtual() == NULL && cond_ != NULL) {
    delete cond_;
  }
  cond_ = NULL;
}
inline const ::NFrame::storesvr_wherecond& storesvr_del::_internal_cond() const {
  return *cond_;
}
inline const ::NFrame::storesvr_wherecond& storesvr_del::cond() const {
  const ::NFrame::storesvr_wherecond* p = cond_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_del.cond)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_wherecond*>(
      &::NFrame::_storesvr_wherecond_default_instance_);
}
inline ::NFrame::storesvr_wherecond* storesvr_del::release_cond() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_del.cond)
  
  ::NFrame::storesvr_wherecond* temp = cond_;
  cond_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_wherecond* storesvr_del::mutable_cond() {
  
  if (cond_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_wherecond>(GetArenaNoVirtual());
    cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_del.cond)
  return cond_;
}
inline void storesvr_del::set_allocated_cond(::NFrame::storesvr_wherecond* cond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cond_;
  }
  if (cond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cond, submessage_arena);
    }
    
  } else {
    
  }
  cond_ = cond;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_del.cond)
}

// -------------------------------------------------------------------

// storesvr_del_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_del_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_del_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_del_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_del_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_del_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_del_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_del_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_del_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_del_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_del_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_del_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_del_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_del_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_del_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_del_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_del_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_del_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_del_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_del_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_del_res.opres)
  return opres_;
}
inline void storesvr_del_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_del_res.opres)
}

// -------------------------------------------------------------------

// storesvr_delobj

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_delobj::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_delobj::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_delobj::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_delobj::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_delobj.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_delobj::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_delobj.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_delobj::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_delobj.baseinfo)
  return baseinfo_;
}
inline void storesvr_delobj::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_delobj.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_delobj::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_delobj::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_delobj.mod_key)
  return mod_key_;
}
inline void storesvr_delobj::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_delobj.mod_key)
}

// bytes record = 3;
inline void storesvr_delobj::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_delobj::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_delobj.record)
  return record_.GetNoArena();
}
inline void storesvr_delobj::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_delobj.record)
}
#if LANG_CXX11
inline void storesvr_delobj::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_delobj.record)
}
#endif
inline void storesvr_delobj::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_delobj.record)
}
inline void storesvr_delobj::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_delobj.record)
}
inline ::std::string* storesvr_delobj::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_delobj.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_delobj::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_delobj.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_delobj::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_delobj.record)
}

// -------------------------------------------------------------------

// storesvr_delobj_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_delobj_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_delobj_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_delobj_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_delobj_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_delobj_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_delobj_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_delobj_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_delobj_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_delobj_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_delobj_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_delobj_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_delobj_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_delobj_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_delobj_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_delobj_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_delobj_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_delobj_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_delobj_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_delobj_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_delobj_res.opres)
  return opres_;
}
inline void storesvr_delobj_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_delobj_res.opres)
}

// -------------------------------------------------------------------

// storesvr_mod

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_mod::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_mod::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_mod::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_mod::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_mod.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_mod::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_mod.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_mod::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_mod.baseinfo)
  return baseinfo_;
}
inline void storesvr_mod::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_mod.baseinfo)
}

// .NFrame.storesvr_wherecond cond = 2;
inline bool storesvr_mod::has_cond() const {
  return this != internal_default_instance() && cond_ != NULL;
}
inline void storesvr_mod::clear_cond() {
  if (GetArenaNoVirtual() == NULL && cond_ != NULL) {
    delete cond_;
  }
  cond_ = NULL;
}
inline const ::NFrame::storesvr_wherecond& storesvr_mod::_internal_cond() const {
  return *cond_;
}
inline const ::NFrame::storesvr_wherecond& storesvr_mod::cond() const {
  const ::NFrame::storesvr_wherecond* p = cond_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_mod.cond)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_wherecond*>(
      &::NFrame::_storesvr_wherecond_default_instance_);
}
inline ::NFrame::storesvr_wherecond* storesvr_mod::release_cond() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_mod.cond)
  
  ::NFrame::storesvr_wherecond* temp = cond_;
  cond_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_wherecond* storesvr_mod::mutable_cond() {
  
  if (cond_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_wherecond>(GetArenaNoVirtual());
    cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_mod.cond)
  return cond_;
}
inline void storesvr_mod::set_allocated_cond(::NFrame::storesvr_wherecond* cond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cond_;
  }
  if (cond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cond, submessage_arena);
    }
    
  } else {
    
  }
  cond_ = cond;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_mod.cond)
}

// bytes record = 3;
inline void storesvr_mod::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_mod::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_mod.record)
  return record_.GetNoArena();
}
inline void storesvr_mod::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_mod.record)
}
#if LANG_CXX11
inline void storesvr_mod::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_mod.record)
}
#endif
inline void storesvr_mod::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_mod.record)
}
inline void storesvr_mod::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_mod.record)
}
inline ::std::string* storesvr_mod::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_mod.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_mod::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_mod.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_mod::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_mod.record)
}

// -------------------------------------------------------------------

// storesvr_mod_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_mod_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_mod_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_mod_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_mod_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_mod_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_mod_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_mod_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_mod_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_mod_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_mod_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_mod_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_mod_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_mod_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_mod_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_mod_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_mod_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_mod_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_mod_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_mod_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_mod_res.opres)
  return opres_;
}
inline void storesvr_mod_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_mod_res.opres)
}

// -------------------------------------------------------------------

// storesvr_modobj

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_modobj::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_modobj::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_modobj::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_modobj::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_modobj.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_modobj::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_modobj.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_modobj::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_modobj.baseinfo)
  return baseinfo_;
}
inline void storesvr_modobj::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_modobj.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_modobj::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_modobj::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_modobj.mod_key)
  return mod_key_;
}
inline void storesvr_modobj::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_modobj.mod_key)
}

// bytes record = 3;
inline void storesvr_modobj::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_modobj::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_modobj.record)
  return record_.GetNoArena();
}
inline void storesvr_modobj::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_modobj.record)
}
#if LANG_CXX11
inline void storesvr_modobj::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_modobj.record)
}
#endif
inline void storesvr_modobj::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_modobj.record)
}
inline void storesvr_modobj::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_modobj.record)
}
inline ::std::string* storesvr_modobj::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_modobj.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_modobj::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_modobj.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_modobj::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_modobj.record)
}

// -------------------------------------------------------------------

// storesvr_modobj_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_modobj_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_modobj_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_modobj_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_modobj_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_modobj_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_modobj_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_modobj_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_modobj_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_modobj_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_modobj_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_modobj_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_modobj_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_modobj_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_modobj_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_modobj_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_modobj_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_modobj_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_modobj_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_modobj_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_modobj_res.opres)
  return opres_;
}
inline void storesvr_modobj_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_modobj_res.opres)
}

// -------------------------------------------------------------------

// storesvr_update

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_update::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_update::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_update::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_update::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_update.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_update::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_update.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_update::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_update.baseinfo)
  return baseinfo_;
}
inline void storesvr_update::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_update.baseinfo)
}

// .NFrame.storesvr_wherecond cond = 2;
inline bool storesvr_update::has_cond() const {
  return this != internal_default_instance() && cond_ != NULL;
}
inline void storesvr_update::clear_cond() {
  if (GetArenaNoVirtual() == NULL && cond_ != NULL) {
    delete cond_;
  }
  cond_ = NULL;
}
inline const ::NFrame::storesvr_wherecond& storesvr_update::_internal_cond() const {
  return *cond_;
}
inline const ::NFrame::storesvr_wherecond& storesvr_update::cond() const {
  const ::NFrame::storesvr_wherecond* p = cond_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_update.cond)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_wherecond*>(
      &::NFrame::_storesvr_wherecond_default_instance_);
}
inline ::NFrame::storesvr_wherecond* storesvr_update::release_cond() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_update.cond)
  
  ::NFrame::storesvr_wherecond* temp = cond_;
  cond_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_wherecond* storesvr_update::mutable_cond() {
  
  if (cond_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_wherecond>(GetArenaNoVirtual());
    cond_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_update.cond)
  return cond_;
}
inline void storesvr_update::set_allocated_cond(::NFrame::storesvr_wherecond* cond) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cond_;
  }
  if (cond) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cond = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cond, submessage_arena);
    }
    
  } else {
    
  }
  cond_ = cond;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_update.cond)
}

// bytes record = 3;
inline void storesvr_update::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_update::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_update.record)
  return record_.GetNoArena();
}
inline void storesvr_update::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_update.record)
}
#if LANG_CXX11
inline void storesvr_update::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_update.record)
}
#endif
inline void storesvr_update::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_update.record)
}
inline void storesvr_update::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_update.record)
}
inline ::std::string* storesvr_update::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_update.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_update::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_update.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_update::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_update.record)
}

// -------------------------------------------------------------------

// storesvr_update_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_update_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_update_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_update_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_update_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_update_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_update_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_update_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_update_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_update_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_update_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_update_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_update_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_update_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_update_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_update_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_update_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_update_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_update_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_update_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_update_res.opres)
  return opres_;
}
inline void storesvr_update_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_update_res.opres)
}

// -------------------------------------------------------------------

// storesvr_updateobj

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_updateobj::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_updateobj::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_updateobj::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_updateobj::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_updateobj.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_updateobj::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_updateobj.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_updateobj::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_updateobj.baseinfo)
  return baseinfo_;
}
inline void storesvr_updateobj::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_updateobj.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_updateobj::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_updateobj::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_updateobj.mod_key)
  return mod_key_;
}
inline void storesvr_updateobj::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_updateobj.mod_key)
}

// bytes record = 3;
inline void storesvr_updateobj::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_updateobj::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_updateobj.record)
  return record_.GetNoArena();
}
inline void storesvr_updateobj::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_updateobj.record)
}
#if LANG_CXX11
inline void storesvr_updateobj::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_updateobj.record)
}
#endif
inline void storesvr_updateobj::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_updateobj.record)
}
inline void storesvr_updateobj::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_updateobj.record)
}
inline ::std::string* storesvr_updateobj::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_updateobj.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_updateobj::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_updateobj.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_updateobj::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_updateobj.record)
}

// -------------------------------------------------------------------

// storesvr_updateobj_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_updateobj_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_updateobj_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_updateobj_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_updateobj_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_updateobj_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_updateobj_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_updateobj_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_updateobj_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_updateobj_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_updateobj_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_updateobj_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_updateobj_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_updateobj_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_updateobj_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_updateobj_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_updateobj_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_updateobj_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_updateobj_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_updateobj_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_updateobj_res.opres)
  return opres_;
}
inline void storesvr_updateobj_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_updateobj_res.opres)
}

// -------------------------------------------------------------------

// storesvr_execute

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_execute::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_execute::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute.baseinfo)
  return baseinfo_;
}
inline void storesvr_execute::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_execute::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_execute::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute.mod_key)
  return mod_key_;
}
inline void storesvr_execute::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute.mod_key)
}

// bytes record = 3;
inline void storesvr_execute::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_execute::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute.record)
  return record_.GetNoArena();
}
inline void storesvr_execute::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute.record)
}
#if LANG_CXX11
inline void storesvr_execute::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_execute.record)
}
#endif
inline void storesvr_execute::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_execute.record)
}
inline void storesvr_execute::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_execute.record)
}
inline ::std::string* storesvr_execute::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_execute::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_execute::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute.record)
}

// -------------------------------------------------------------------

// storesvr_execute_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_execute_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_execute_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_execute_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_execute_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_execute_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_execute_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_execute_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_execute_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_execute_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_res.opres)
  return opres_;
}
inline void storesvr_execute_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute_res.opres)
}

// bytes record = 3;
inline void storesvr_execute_res::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_execute_res::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_res.record)
  return record_.GetNoArena();
}
inline void storesvr_execute_res::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute_res.record)
}
#if LANG_CXX11
inline void storesvr_execute_res::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_execute_res.record)
}
#endif
inline void storesvr_execute_res::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_execute_res.record)
}
inline void storesvr_execute_res::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_execute_res.record)
}
inline ::std::string* storesvr_execute_res::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_res.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_execute_res::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute_res.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_execute_res::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute_res.record)
}

// -------------------------------------------------------------------

// storesvr_execute_more

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_execute_more::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_execute_more::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute_more::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute_more::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute_more::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute_more.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute_more::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_more.baseinfo)
  return baseinfo_;
}
inline void storesvr_execute_more::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute_more.baseinfo)
}

// uint64 mod_key = 2;
inline void storesvr_execute_more::clear_mod_key() {
  mod_key_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 storesvr_execute_more::mod_key() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more.mod_key)
  return mod_key_;
}
inline void storesvr_execute_more::set_mod_key(::google::protobuf::uint64 value) {
  
  mod_key_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute_more.mod_key)
}

// bytes record = 3;
inline void storesvr_execute_more::clear_record() {
  record_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& storesvr_execute_more::record() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more.record)
  return record_.GetNoArena();
}
inline void storesvr_execute_more::set_record(const ::std::string& value) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute_more.record)
}
#if LANG_CXX11
inline void storesvr_execute_more::set_record(::std::string&& value) {
  
  record_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.storesvr_execute_more.record)
}
#endif
inline void storesvr_execute_more::set_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_execute_more.record)
}
inline void storesvr_execute_more::set_record(const void* value, size_t size) {
  
  record_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_execute_more.record)
}
inline ::std::string* storesvr_execute_more::mutable_record() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_more.record)
  return record_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* storesvr_execute_more::release_record() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute_more.record)
  
  return record_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void storesvr_execute_more::set_allocated_record(::std::string* record) {
  if (record != NULL) {
    
  } else {
    
  }
  record_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record);
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute_more.record)
}

// -------------------------------------------------------------------

// storesvr_execute_more_res

// .NFrame.storesvr_baseinfo baseinfo = 1;
inline bool storesvr_execute_more_res::has_baseinfo() const {
  return this != internal_default_instance() && baseinfo_ != NULL;
}
inline void storesvr_execute_more_res::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) {
    delete baseinfo_;
  }
  baseinfo_ = NULL;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute_more_res::_internal_baseinfo() const {
  return *baseinfo_;
}
inline const ::NFrame::storesvr_baseinfo& storesvr_execute_more_res::baseinfo() const {
  const ::NFrame::storesvr_baseinfo* p = baseinfo_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more_res.baseinfo)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_baseinfo*>(
      &::NFrame::_storesvr_baseinfo_default_instance_);
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute_more_res::release_baseinfo() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute_more_res.baseinfo)
  
  ::NFrame::storesvr_baseinfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_baseinfo* storesvr_execute_more_res::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_baseinfo>(GetArenaNoVirtual());
    baseinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_more_res.baseinfo)
  return baseinfo_;
}
inline void storesvr_execute_more_res::set_allocated_baseinfo(::NFrame::storesvr_baseinfo* baseinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete baseinfo_;
  }
  if (baseinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      baseinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute_more_res.baseinfo)
}

// .NFrame.storesvr_opres opres = 2;
inline bool storesvr_execute_more_res::has_opres() const {
  return this != internal_default_instance() && opres_ != NULL;
}
inline void storesvr_execute_more_res::clear_opres() {
  if (GetArenaNoVirtual() == NULL && opres_ != NULL) {
    delete opres_;
  }
  opres_ = NULL;
}
inline const ::NFrame::storesvr_opres& storesvr_execute_more_res::_internal_opres() const {
  return *opres_;
}
inline const ::NFrame::storesvr_opres& storesvr_execute_more_res::opres() const {
  const ::NFrame::storesvr_opres* p = opres_;
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more_res.opres)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::storesvr_opres*>(
      &::NFrame::_storesvr_opres_default_instance_);
}
inline ::NFrame::storesvr_opres* storesvr_execute_more_res::release_opres() {
  // @@protoc_insertion_point(field_release:NFrame.storesvr_execute_more_res.opres)
  
  ::NFrame::storesvr_opres* temp = opres_;
  opres_ = NULL;
  return temp;
}
inline ::NFrame::storesvr_opres* storesvr_execute_more_res::mutable_opres() {
  
  if (opres_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::storesvr_opres>(GetArenaNoVirtual());
    opres_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_more_res.opres)
  return opres_;
}
inline void storesvr_execute_more_res::set_allocated_opres(::NFrame::storesvr_opres* opres) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete opres_;
  }
  if (opres) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      opres = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, opres, submessage_arena);
    }
    
  } else {
    
  }
  opres_ = opres;
  // @@protoc_insertion_point(field_set_allocated:NFrame.storesvr_execute_more_res.opres)
}

// bool is_lastbatch = 3;
inline void storesvr_execute_more_res::clear_is_lastbatch() {
  is_lastbatch_ = false;
}
inline bool storesvr_execute_more_res::is_lastbatch() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more_res.is_lastbatch)
  return is_lastbatch_;
}
inline void storesvr_execute_more_res::set_is_lastbatch(bool value) {
  
  is_lastbatch_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute_more_res.is_lastbatch)
}

// int32 row_count = 4;
inline void storesvr_execute_more_res::clear_row_count() {
  row_count_ = 0;
}
inline ::google::protobuf::int32 storesvr_execute_more_res::row_count() const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more_res.row_count)
  return row_count_;
}
inline void storesvr_execute_more_res::set_row_count(::google::protobuf::int32 value) {
  
  row_count_ = value;
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute_more_res.row_count)
}

// repeated bytes record = 5;
inline int storesvr_execute_more_res::record_size() const {
  return record_.size();
}
inline void storesvr_execute_more_res::clear_record() {
  record_.Clear();
}
inline const ::std::string& storesvr_execute_more_res::record(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.storesvr_execute_more_res.record)
  return record_.Get(index);
}
inline ::std::string* storesvr_execute_more_res::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.storesvr_execute_more_res.record)
  return record_.Mutable(index);
}
inline void storesvr_execute_more_res::set_record(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute_more_res.record)
  record_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void storesvr_execute_more_res::set_record(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.storesvr_execute_more_res.record)
  record_.Mutable(index)->assign(std::move(value));
}
#endif
inline void storesvr_execute_more_res::set_record(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.storesvr_execute_more_res.record)
}
inline void storesvr_execute_more_res::set_record(int index, const void* value, size_t size) {
  record_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.storesvr_execute_more_res.record)
}
inline ::std::string* storesvr_execute_more_res::add_record() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.storesvr_execute_more_res.record)
  return record_.Add();
}
inline void storesvr_execute_more_res::add_record(const ::std::string& value) {
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.storesvr_execute_more_res.record)
}
#if LANG_CXX11
inline void storesvr_execute_more_res::add_record(::std::string&& value) {
  record_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.storesvr_execute_more_res.record)
}
#endif
inline void storesvr_execute_more_res::add_record(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  record_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.storesvr_execute_more_res.record)
}
inline void storesvr_execute_more_res::add_record(const void* value, size_t size) {
  record_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.storesvr_execute_more_res.record)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
storesvr_execute_more_res::record() const {
  // @@protoc_insertion_point(field_list:NFrame.storesvr_execute_more_res.record)
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
storesvr_execute_more_res::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.storesvr_execute_more_res.record)
  return &record_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFrame

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFrame::storesvr_dbtype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::storesvr_dbtype>() {
  return ::NFrame::storesvr_dbtype_descriptor();
}
template <> struct is_proto_enum< ::NFrame::storesvr_logic_operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::storesvr_logic_operator>() {
  return ::NFrame::storesvr_logic_operator_descriptor();
}
template <> struct is_proto_enum< ::NFrame::storesvr_cmp_operator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::storesvr_cmp_operator>() {
  return ::NFrame::storesvr_cmp_operator_descriptor();
}
template <> struct is_proto_enum< ::NFrame::storesvr_column_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::storesvr_column_type>() {
  return ::NFrame::storesvr_column_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FrameSqlData_2eproto
