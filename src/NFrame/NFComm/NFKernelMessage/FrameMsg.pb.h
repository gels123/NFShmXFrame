// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameMsg.proto

#ifndef PROTOBUF_INCLUDED_FrameMsg_2eproto
#define PROTOBUF_INCLUDED_FrameMsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FrameMsg_2eproto 

namespace protobuf_FrameMsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FrameMsg_2eproto
namespace NFrame {
class DynLibFileInfo;
class DynLibFileInfoDefaultTypeInternal;
extern DynLibFileInfoDefaultTypeInternal _DynLibFileInfo_default_instance_;
class DynLibFileInfoArray;
class DynLibFileInfoArrayDefaultTypeInternal;
extern DynLibFileInfoArrayDefaultTypeInternal _DynLibFileInfoArray_default_instance_;
class NFEventNoneData;
class NFEventNoneDataDefaultTypeInternal;
extern NFEventNoneDataDefaultTypeInternal _NFEventNoneData_default_instance_;
class NFEventScriptData;
class NFEventScriptDataDefaultTypeInternal;
extern NFEventScriptDataDefaultTypeInternal _NFEventScriptData_default_instance_;
class Proto_DispInfo;
class Proto_DispInfoDefaultTypeInternal;
extern Proto_DispInfoDefaultTypeInternal _Proto_DispInfo_default_instance_;
class Proto_EventInfo;
class Proto_EventInfoDefaultTypeInternal;
extern Proto_EventInfoDefaultTypeInternal _Proto_EventInfo_default_instance_;
class Proto_FramePkg;
class Proto_FramePkgDefaultTypeInternal;
extern Proto_FramePkgDefaultTypeInternal _Proto_FramePkg_default_instance_;
class Proto_KillAllServerNtf;
class Proto_KillAllServerNtfDefaultTypeInternal;
extern Proto_KillAllServerNtfDefaultTypeInternal _Proto_KillAllServerNtf_default_instance_;
class Proto_KillAllServerRsp;
class Proto_KillAllServerRspDefaultTypeInternal;
extern Proto_KillAllServerRspDefaultTypeInternal _Proto_KillAllServerRsp_default_instance_;
class Proto_RedirectInfo;
class Proto_RedirectInfoDefaultTypeInternal;
extern Proto_RedirectInfoDefaultTypeInternal _Proto_RedirectInfo_default_instance_;
class Proto_RpcInfo;
class Proto_RpcInfoDefaultTypeInternal;
extern Proto_RpcInfoDefaultTypeInternal _Proto_RpcInfo_default_instance_;
class Proto_STSBroadPlayerMsgNotify;
class Proto_STSBroadPlayerMsgNotifyDefaultTypeInternal;
extern Proto_STSBroadPlayerMsgNotifyDefaultTypeInternal _Proto_STSBroadPlayerMsgNotify_default_instance_;
class Proto_STWebMsgRspNotify;
class Proto_STWebMsgRspNotifyDefaultTypeInternal;
extern Proto_STWebMsgRspNotifyDefaultTypeInternal _Proto_STWebMsgRspNotify_default_instance_;
class Proto_ScriptRpcResult;
class Proto_ScriptRpcResultDefaultTypeInternal;
extern Proto_ScriptRpcResultDefaultTypeInternal _Proto_ScriptRpcResult_default_instance_;
class Proto_ServerDumpInfoNtf;
class Proto_ServerDumpInfoNtfDefaultTypeInternal;
extern Proto_ServerDumpInfoNtfDefaultTypeInternal _Proto_ServerDumpInfoNtf_default_instance_;
class Proto_StoreInfo;
class Proto_StoreInfoDefaultTypeInternal;
extern Proto_StoreInfoDefaultTypeInternal _Proto_StoreInfo_default_instance_;
class Proto_TransInfo;
class Proto_TransInfoDefaultTypeInternal;
extern Proto_TransInfoDefaultTypeInternal _Proto_TransInfo_default_instance_;
class ServerInfoReport;
class ServerInfoReportDefaultTypeInternal;
extern ServerInfoReportDefaultTypeInternal _ServerInfoReport_default_instance_;
class ServerInfoReportList;
class ServerInfoReportListDefaultTypeInternal;
extern ServerInfoReportListDefaultTypeInternal _ServerInfoReportList_default_instance_;
class ServerInfoReportListRespne;
class ServerInfoReportListRespneDefaultTypeInternal;
extern ServerInfoReportListRespneDefaultTypeInternal _ServerInfoReportListRespne_default_instance_;
class ZkServerInfo;
class ZkServerInfoDefaultTypeInternal;
extern ZkServerInfoDefaultTypeInternal _ZkServerInfo_default_instance_;
}  // namespace NFrame
namespace google {
namespace protobuf {
template<> ::NFrame::DynLibFileInfo* Arena::CreateMaybeMessage<::NFrame::DynLibFileInfo>(Arena*);
template<> ::NFrame::DynLibFileInfoArray* Arena::CreateMaybeMessage<::NFrame::DynLibFileInfoArray>(Arena*);
template<> ::NFrame::NFEventNoneData* Arena::CreateMaybeMessage<::NFrame::NFEventNoneData>(Arena*);
template<> ::NFrame::NFEventScriptData* Arena::CreateMaybeMessage<::NFrame::NFEventScriptData>(Arena*);
template<> ::NFrame::Proto_DispInfo* Arena::CreateMaybeMessage<::NFrame::Proto_DispInfo>(Arena*);
template<> ::NFrame::Proto_EventInfo* Arena::CreateMaybeMessage<::NFrame::Proto_EventInfo>(Arena*);
template<> ::NFrame::Proto_FramePkg* Arena::CreateMaybeMessage<::NFrame::Proto_FramePkg>(Arena*);
template<> ::NFrame::Proto_KillAllServerNtf* Arena::CreateMaybeMessage<::NFrame::Proto_KillAllServerNtf>(Arena*);
template<> ::NFrame::Proto_KillAllServerRsp* Arena::CreateMaybeMessage<::NFrame::Proto_KillAllServerRsp>(Arena*);
template<> ::NFrame::Proto_RedirectInfo* Arena::CreateMaybeMessage<::NFrame::Proto_RedirectInfo>(Arena*);
template<> ::NFrame::Proto_RpcInfo* Arena::CreateMaybeMessage<::NFrame::Proto_RpcInfo>(Arena*);
template<> ::NFrame::Proto_STSBroadPlayerMsgNotify* Arena::CreateMaybeMessage<::NFrame::Proto_STSBroadPlayerMsgNotify>(Arena*);
template<> ::NFrame::Proto_STWebMsgRspNotify* Arena::CreateMaybeMessage<::NFrame::Proto_STWebMsgRspNotify>(Arena*);
template<> ::NFrame::Proto_ScriptRpcResult* Arena::CreateMaybeMessage<::NFrame::Proto_ScriptRpcResult>(Arena*);
template<> ::NFrame::Proto_ServerDumpInfoNtf* Arena::CreateMaybeMessage<::NFrame::Proto_ServerDumpInfoNtf>(Arena*);
template<> ::NFrame::Proto_StoreInfo* Arena::CreateMaybeMessage<::NFrame::Proto_StoreInfo>(Arena*);
template<> ::NFrame::Proto_TransInfo* Arena::CreateMaybeMessage<::NFrame::Proto_TransInfo>(Arena*);
template<> ::NFrame::ServerInfoReport* Arena::CreateMaybeMessage<::NFrame::ServerInfoReport>(Arena*);
template<> ::NFrame::ServerInfoReportList* Arena::CreateMaybeMessage<::NFrame::ServerInfoReportList>(Arena*);
template<> ::NFrame::ServerInfoReportListRespne* Arena::CreateMaybeMessage<::NFrame::ServerInfoReportListRespne>(Arena*);
template<> ::NFrame::ZkServerInfo* Arena::CreateMaybeMessage<::NFrame::ZkServerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFrame {

enum FrameServerMsg {
  NF_FRAME_MSG_NONE = 0,
  NF_SERVER_TO_SERVER_HEART_BEAT = 1,
  NF_SERVER_TO_SERVER_HEART_BEAT_RSP = 2,
  NF_SERVER_TO_SERVER_BUS_CONNECT_REQ = 3,
  NF_SERVER_TO_SERVER_BUS_CONNECT_RSP = 4,
  NF_GTM_KILL_ALL_SERVER_NTF = 50,
  NF_STS_KILL_ALL_SERVER_NTF = 51,
  NF_STS_SEND_DUMP_INFO_NTF = 52,
  NF_MasterTMonitor_RELOAD_CMD_REQ = 80,
  NF_MasterTMonitor_RESTART_CMD_REQ = 81,
  NF_MasterTMonitor_START_CMD_REQ = 82,
  NF_MasterTMonitor_STOP_CMD_REQ = 83,
  NF_MasterTMonitor_STOP_ALL_CMD_REQ = 84,
  NF_MasterTMonitor_RELOAD_ALL_CMD_REQ = 85,
  NF_MasterTMonitor_RESTART_ALL_CMD_REQ = 86,
  NF_MasterTMonitor_START_ALL_CMD_REQ = 87,
  NF_MonitorTMaster_RELOAD_CMD_RSP = 90,
  NF_MonitorTMaster_RESTART_CMD_RSP = 91,
  NF_MonitorTMaster_START_CMD_RSP = 92,
  NF_MonitorTMaster_STOP_CMD_RSP = 93,
  NF_MonitorTMaster_STOP_ALL_CMD_RSP = 94,
  NF_MonitorTMaster_RELOAD_ALL_CMD_RSP = 95,
  NF_MonitorTMaster_RESTART_ALL_CMD_RSP = 96,
  NF_MonitorTMaster_START_ALL_CMD_RSP = 97,
  NF_SERVER_TO_SERVER_REGISTER = 100,
  NF_SERVER_TO_SERVER_REGISTER_RSP = 101,
  NF_MASTER_SERVER_SEND_OTHERS_TO_SERVER = 102,
  NF_SERVER_TO_MASTER_SERVER_REPORT = 103,
  NF_ROUTER_CMD_INTERNAL_C2R_REGISTER = 104,
  NF_ROUTER_CMD_INTERNAL_R2C_REGISTER = 105,
  NF_ROUTER_CMD_INTERNAL_C2R_HEARTBEAT = 106,
  NF_ROUTER_CMD_INTERNAL_R2C_HEARTBEAT = 107,
  NF_ROUTER_CMD_DISPATCH_MOD = 108,
  NF_ROUTER_CMD_DISPATCH_ROUNDROBIN = 109,
  NF_ROUTER_CMD_DISPATCH_BROADCAST = 110,
  NF_ROUTER_CMD_DISPATCH_BROADCAST_AND_MASTER = 111,
  NF_ROUTER_CMD_DISPATCH_BORADCAST_MASTER = 112,
  NF_ROUTER_CMD_DISPATCH_BORADCAST_SLAVE = 113,
  NF_ROUTER_CMD_DISPATCH_DIRECT = 114,
  NF_ROUTER_CMD_INTERNAL_R2C_DISPATCHFAILED = 115,
  NF_ROUTER_CMD_INTERNAL_C2R_REG_RAASSOCAPPSVS = 116,
  NF_SERVER_TO_SERVER_RPC_CMD = 119,
  NF_SERVER_TO_SERVER_TRANS_CMD = 120,
  NF_SERVER_TO_STORE_SERVER_DB_CMD = 121,
  NF_STORE_SERVER_TO_SERVER_DB_CMD = 122,
  NF_WORLD_ROUTER_CMD_TO_SUIT_LOGIC = 123,
  NF_SNS_ROUTER_CMD_TO_SUIT_LOGIC = 124,
  NF_STS_BROAD_PLAYER_MSG_NOTIFY = 125,
  NF_SEVER_TO_WEB_SERVER_RSP_NOTIFY = 126,
  NF_SERVER_BROAD_EVENT_TO_SERVER_CMD = 127,
  NF_SERVER_REDIRECT_MSG_TO_PROXY_SERVER_CMD = 128,
  NF_SERVER_TO_SERVER_REGISTER_ROOM_INFO_RPC = 129,
  NF_STORESVR_C2S_SELECT = 200,
  NF_STORESVR_S2C_SELECT = 201,
  NF_STORESVR_C2S_SELECTOBJ = 202,
  NF_STORESVR_S2C_SELECTOBJ = 203,
  NF_STORESVR_C2S_INSERT = 204,
  NF_STORESVR_S2C_INSERT = 205,
  NF_STORESVR_C2S_INSERTOBJ = 206,
  NF_STORESVR_S2C_INSERTOBJ = 207,
  NF_STORESVR_C2S_DELETE = 208,
  NF_STORESVR_S2C_DELETE = 209,
  NF_STORESVR_C2S_DELETEOBJ = 210,
  NF_STORESVR_S2C_DELETEOBJ = 211,
  NF_STORESVR_C2S_MODIFY = 212,
  NF_STORESVR_S2C_MODIFY = 213,
  NF_STORESVR_C2S_MODIFYOBJ = 214,
  NF_STORESVR_S2C_MODIFYOBJ = 215,
  NF_STORESVR_C2S_UPDATE = 216,
  NF_STORESVR_S2C_UPDATE = 217,
  NF_STORESVR_C2S_UPDATEOBJ = 218,
  NF_STORESVR_S2C_UPDATEOBJ = 219,
  NF_STORESVR_C2S_DESCSTORE = 220,
  NF_STORESVR_S2C_DESCSTORE = 221,
  NF_STORESVR_C2S_EXECUTE = 222,
  NF_STORESVR_S2C_EXECUTE = 223,
  NF_STORESVR_C2S_EXECUTE_MORE = 224,
  NF_STORESVR_S2C_EXECUTE_MORE = 225,
  FrameServerMsg_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FrameServerMsg_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FrameServerMsg_IsValid(int value);
const FrameServerMsg FrameServerMsg_MIN = NF_FRAME_MSG_NONE;
const FrameServerMsg FrameServerMsg_MAX = NF_STORESVR_S2C_EXECUTE_MORE;
const int FrameServerMsg_ARRAYSIZE = FrameServerMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameServerMsg_descriptor();
inline const ::std::string& FrameServerMsg_Name(FrameServerMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameServerMsg_descriptor(), value);
}
inline bool FrameServerMsg_Parse(
    const ::std::string& name, FrameServerMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameServerMsg>(
    FrameServerMsg_descriptor(), name, value);
}
enum PacketDispType {
  E_DISP_TYPE_NONE = 0,
  E_DISP_TYPE_BY_TRANSACTION = 1,
  E_DISP_TYPE_BY_ROLEID = 2,
  E_DISP_TYPE_BY_MSGID = 3,
  E_DISP_TYPE_BY_RPC = 4,
  PacketDispType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PacketDispType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PacketDispType_IsValid(int value);
const PacketDispType PacketDispType_MIN = E_DISP_TYPE_NONE;
const PacketDispType PacketDispType_MAX = E_DISP_TYPE_BY_RPC;
const int PacketDispType_ARRAYSIZE = PacketDispType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketDispType_descriptor();
inline const ::std::string& PacketDispType_Name(PacketDispType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketDispType_descriptor(), value);
}
inline bool PacketDispType_Parse(
    const ::std::string& name, PacketDispType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketDispType>(
    PacketDispType_descriptor(), name, value);
}
enum EServerState {
  EST_INIT = 0,
  EST_NARMAL = 1,
  EST_BUSY = 2,
  EST_CRASH = 3,
  EServerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EServerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EServerState_IsValid(int value);
const EServerState EServerState_MIN = EST_INIT;
const EServerState EServerState_MAX = EST_CRASH;
const int EServerState_ARRAYSIZE = EServerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EServerState_descriptor();
inline const ::std::string& EServerState_Name(EServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EServerState_descriptor(), value);
}
inline bool EServerState_Parse(
    const ::std::string& name, EServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EServerState>(
    EServerState_descriptor(), name, value);
}
enum NFEventSrcType {
  NF_EVENT_NONE_TYPE = 0,
  NF_EVENT_SERVER_TYPE = 1,
  NF_EVENT_GM_TYPE = 2,
  NF_EVENT_PLAYER_TYPE = 4,
  NFEventSrcType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NFEventSrcType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NFEventSrcType_IsValid(int value);
const NFEventSrcType NFEventSrcType_MIN = NF_EVENT_NONE_TYPE;
const NFEventSrcType NFEventSrcType_MAX = NF_EVENT_PLAYER_TYPE;
const int NFEventSrcType_ARRAYSIZE = NFEventSrcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NFEventSrcType_descriptor();
inline const ::std::string& NFEventSrcType_Name(NFEventSrcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NFEventSrcType_descriptor(), value);
}
inline bool NFEventSrcType_Parse(
    const ::std::string& name, NFEventSrcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NFEventSrcType>(
    NFEventSrcType_descriptor(), name, value);
}
enum NFEventIdType {
  NF_EVENT_NONE = 0,
  NF_EVENT_SERVER_TYPE_BEGIN = 1,
  NF_EVENT_SERVER_TASK_GROUP_FINISH = 2,
  NF_EVENT_SERVER_APP_FINISH_INITED = 5,
  NF_EVENT_SERVER_DEAD_EVENT = 6,
  NF_EVENT_GAME_SERVER_DUMP_EVENT = 8,
  NF_EVENT_LOGIC_SERVER_DUMP_EVENT = 9,
  NF_EVENT_WORLD_SERVER_DUMP_EVENT = 10,
  NF_EVENT_CENTER_SERVER_DUMP_VENT = 11,
  NF_EVENT_PROXY_SERVER_DUMP_EVENT = 12,
  NF_EVENT_PROXY_AGENT_SERVER_DUMP_EVENT = 13,
  NF_EVENT_STORE_SERVER_DMP_EVENT = 14,
  NF_EVENT_LOGIN_SERVER_DUMP_EVENT = 15,
  NF_EVENT_ROUTE_AGENT_SERVER_DUMP_EVENT = 16,
  NF_EVENT_ROUTE_SERVER_DUMP_EVENT = 17,
  NF_EVENT_MASTER_SERVER_DUMP_EVENT = 18,
  NF_EVENT_SERVER_REPORT_EVENT = 30,
  NF_EVENT_SERVER_SET_TIME_EVENT = 31,
  NF_EVENT_SERVER_TYPE_END = 99,
  NFEventIdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NFEventIdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NFEventIdType_IsValid(int value);
const NFEventIdType NFEventIdType_MIN = NF_EVENT_NONE;
const NFEventIdType NFEventIdType_MAX = NF_EVENT_SERVER_TYPE_END;
const int NFEventIdType_ARRAYSIZE = NFEventIdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NFEventIdType_descriptor();
inline const ::std::string& NFEventIdType_Name(NFEventIdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NFEventIdType_descriptor(), value);
}
inline bool NFEventIdType_Parse(
    const ::std::string& name, NFEventIdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NFEventIdType>(
    NFEventIdType_descriptor(), name, value);
}
// ===================================================================

class Proto_DispInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_DispInfo) */ {
 public:
  Proto_DispInfo();
  virtual ~Proto_DispInfo();

  Proto_DispInfo(const Proto_DispInfo& from);

  inline Proto_DispInfo& operator=(const Proto_DispInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_DispInfo(Proto_DispInfo&& from) noexcept
    : Proto_DispInfo() {
    *this = ::std::move(from);
  }

  inline Proto_DispInfo& operator=(Proto_DispInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_DispInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_DispInfo* internal_default_instance() {
    return reinterpret_cast<const Proto_DispInfo*>(
               &_Proto_DispInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Proto_DispInfo* other);
  friend void swap(Proto_DispInfo& a, Proto_DispInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_DispInfo* New() const final {
    return CreateMaybeMessage<Proto_DispInfo>(NULL);
  }

  Proto_DispInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_DispInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_DispInfo& from);
  void MergeFrom(const Proto_DispInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_DispInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // int32 seq = 4;
  void clear_seq();
  static const int kSeqFieldNumber = 4;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // int32 req_seq = 5;
  void clear_req_seq();
  static const int kReqSeqFieldNumber = 5;
  ::google::protobuf::int32 req_seq() const;
  void set_req_seq(::google::protobuf::int32 value);

  // int32 err_code = 6;
  void clear_err_code();
  static const int kErrCodeFieldNumber = 6;
  ::google::protobuf::int32 err_code() const;
  void set_err_code(::google::protobuf::int32 value);

  // .NFrame.PacketDispType type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::NFrame::PacketDispType type() const;
  void set_type(::NFrame::PacketDispType value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_DispInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 seq_;
  ::google::protobuf::int32 req_seq_;
  ::google::protobuf::int32 err_code_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_TransInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_TransInfo) */ {
 public:
  Proto_TransInfo();
  virtual ~Proto_TransInfo();

  Proto_TransInfo(const Proto_TransInfo& from);

  inline Proto_TransInfo& operator=(const Proto_TransInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_TransInfo(Proto_TransInfo&& from) noexcept
    : Proto_TransInfo() {
    *this = ::std::move(from);
  }

  inline Proto_TransInfo& operator=(Proto_TransInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_TransInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_TransInfo* internal_default_instance() {
    return reinterpret_cast<const Proto_TransInfo*>(
               &_Proto_TransInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Proto_TransInfo* other);
  friend void swap(Proto_TransInfo& a, Proto_TransInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_TransInfo* New() const final {
    return CreateMaybeMessage<Proto_TransInfo>(NULL);
  }

  Proto_TransInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_TransInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_TransInfo& from);
  void MergeFrom(const Proto_TransInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_TransInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 req_trans_id = 1;
  void clear_req_trans_id();
  static const int kReqTransIdFieldNumber = 1;
  ::google::protobuf::int32 req_trans_id() const;
  void set_req_trans_id(::google::protobuf::int32 value);

  // int32 rsp_trans_id = 2;
  void clear_rsp_trans_id();
  static const int kRspTransIdFieldNumber = 2;
  ::google::protobuf::int32 rsp_trans_id() const;
  void set_rsp_trans_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_TransInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 req_trans_id_;
  ::google::protobuf::int32 rsp_trans_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_StoreInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_StoreInfo) */ {
 public:
  Proto_StoreInfo();
  virtual ~Proto_StoreInfo();

  Proto_StoreInfo(const Proto_StoreInfo& from);

  inline Proto_StoreInfo& operator=(const Proto_StoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_StoreInfo(Proto_StoreInfo&& from) noexcept
    : Proto_StoreInfo() {
    *this = ::std::move(from);
  }

  inline Proto_StoreInfo& operator=(Proto_StoreInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_StoreInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_StoreInfo* internal_default_instance() {
    return reinterpret_cast<const Proto_StoreInfo*>(
               &_Proto_StoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Proto_StoreInfo* other);
  friend void swap(Proto_StoreInfo& a, Proto_StoreInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_StoreInfo* New() const final {
    return CreateMaybeMessage<Proto_StoreInfo>(NULL);
  }

  Proto_StoreInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_StoreInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_StoreInfo& from);
  void MergeFrom(const Proto_StoreInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_StoreInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 table_id = 2;
  void clear_table_id();
  static const int kTableIdFieldNumber = 2;
  ::google::protobuf::uint32 table_id() const;
  void set_table_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_StoreInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 table_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_EventInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_EventInfo) */ {
 public:
  Proto_EventInfo();
  virtual ~Proto_EventInfo();

  Proto_EventInfo(const Proto_EventInfo& from);

  inline Proto_EventInfo& operator=(const Proto_EventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_EventInfo(Proto_EventInfo&& from) noexcept
    : Proto_EventInfo() {
    *this = ::std::move(from);
  }

  inline Proto_EventInfo& operator=(Proto_EventInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_EventInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_EventInfo* internal_default_instance() {
    return reinterpret_cast<const Proto_EventInfo*>(
               &_Proto_EventInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Proto_EventInfo* other);
  friend void swap(Proto_EventInfo& a, Proto_EventInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_EventInfo* New() const final {
    return CreateMaybeMessage<Proto_EventInfo>(NULL);
  }

  Proto_EventInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_EventInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_EventInfo& from);
  void MergeFrom(const Proto_EventInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_EventInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string full_message_name = 5;
  void clear_full_message_name();
  static const int kFullMessageNameFieldNumber = 5;
  const ::std::string& full_message_name() const;
  void set_full_message_name(const ::std::string& value);
  #if LANG_CXX11
  void set_full_message_name(::std::string&& value);
  #endif
  void set_full_message_name(const char* value);
  void set_full_message_name(const char* value, size_t size);
  ::std::string* mutable_full_message_name();
  ::std::string* release_full_message_name();
  void set_allocated_full_message_name(::std::string* full_message_name);

  // uint64 event_id = 2;
  void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  ::google::protobuf::uint64 event_id() const;
  void set_event_id(::google::protobuf::uint64 value);

  // uint64 src_type = 3;
  void clear_src_type();
  static const int kSrcTypeFieldNumber = 3;
  ::google::protobuf::uint64 src_type() const;
  void set_src_type(::google::protobuf::uint64 value);

  // uint64 src_id = 4;
  void clear_src_id();
  static const int kSrcIdFieldNumber = 4;
  ::google::protobuf::uint64 src_id() const;
  void set_src_id(::google::protobuf::uint64 value);

  // uint32 server_type = 1;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 1;
  ::google::protobuf::uint32 server_type() const;
  void set_server_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_EventInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr full_message_name_;
  ::google::protobuf::uint64 event_id_;
  ::google::protobuf::uint64 src_type_;
  ::google::protobuf::uint64 src_id_;
  ::google::protobuf::uint32 server_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_ScriptRpcResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_ScriptRpcResult) */ {
 public:
  Proto_ScriptRpcResult();
  virtual ~Proto_ScriptRpcResult();

  Proto_ScriptRpcResult(const Proto_ScriptRpcResult& from);

  inline Proto_ScriptRpcResult& operator=(const Proto_ScriptRpcResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_ScriptRpcResult(Proto_ScriptRpcResult&& from) noexcept
    : Proto_ScriptRpcResult() {
    *this = ::std::move(from);
  }

  inline Proto_ScriptRpcResult& operator=(Proto_ScriptRpcResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_ScriptRpcResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_ScriptRpcResult* internal_default_instance() {
    return reinterpret_cast<const Proto_ScriptRpcResult*>(
               &_Proto_ScriptRpcResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Proto_ScriptRpcResult* other);
  friend void swap(Proto_ScriptRpcResult& a, Proto_ScriptRpcResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_ScriptRpcResult* New() const final {
    return CreateMaybeMessage<Proto_ScriptRpcResult>(NULL);
  }

  Proto_ScriptRpcResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_ScriptRpcResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_ScriptRpcResult& from);
  void MergeFrom(const Proto_ScriptRpcResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_ScriptRpcResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string req_type = 1;
  void clear_req_type();
  static const int kReqTypeFieldNumber = 1;
  const ::std::string& req_type() const;
  void set_req_type(const ::std::string& value);
  #if LANG_CXX11
  void set_req_type(::std::string&& value);
  #endif
  void set_req_type(const char* value);
  void set_req_type(const char* value, size_t size);
  ::std::string* mutable_req_type();
  ::std::string* release_req_type();
  void set_allocated_req_type(::std::string* req_type);

  // string rsp_type = 2;
  void clear_rsp_type();
  static const int kRspTypeFieldNumber = 2;
  const ::std::string& rsp_type() const;
  void set_rsp_type(const ::std::string& value);
  #if LANG_CXX11
  void set_rsp_type(::std::string&& value);
  #endif
  void set_rsp_type(const char* value);
  void set_rsp_type(const char* value, size_t size);
  ::std::string* mutable_rsp_type();
  ::std::string* release_rsp_type();
  void set_allocated_rsp_type(::std::string* rsp_type);

  // string respone = 3;
  void clear_respone();
  static const int kResponeFieldNumber = 3;
  const ::std::string& respone() const;
  void set_respone(const ::std::string& value);
  #if LANG_CXX11
  void set_respone(::std::string&& value);
  #endif
  void set_respone(const char* value);
  void set_respone(const char* value, size_t size);
  ::std::string* mutable_respone();
  ::std::string* release_respone();
  void set_allocated_respone(::std::string* respone);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_ScriptRpcResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr req_type_;
  ::google::protobuf::internal::ArenaStringPtr rsp_type_;
  ::google::protobuf::internal::ArenaStringPtr respone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_RpcInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_RpcInfo) */ {
 public:
  Proto_RpcInfo();
  virtual ~Proto_RpcInfo();

  Proto_RpcInfo(const Proto_RpcInfo& from);

  inline Proto_RpcInfo& operator=(const Proto_RpcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_RpcInfo(Proto_RpcInfo&& from) noexcept
    : Proto_RpcInfo() {
    *this = ::std::move(from);
  }

  inline Proto_RpcInfo& operator=(Proto_RpcInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_RpcInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_RpcInfo* internal_default_instance() {
    return reinterpret_cast<const Proto_RpcInfo*>(
               &_Proto_RpcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Proto_RpcInfo* other);
  friend void swap(Proto_RpcInfo& a, Proto_RpcInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_RpcInfo* New() const final {
    return CreateMaybeMessage<Proto_RpcInfo>(NULL);
  }

  Proto_RpcInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_RpcInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_RpcInfo& from);
  void MergeFrom(const Proto_RpcInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_RpcInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 req_rpc_id = 1;
  void clear_req_rpc_id();
  static const int kReqRpcIdFieldNumber = 1;
  ::google::protobuf::int64 req_rpc_id() const;
  void set_req_rpc_id(::google::protobuf::int64 value);

  // int64 rsp_rpc_id = 2;
  void clear_rsp_rpc_id();
  static const int kRspRpcIdFieldNumber = 2;
  ::google::protobuf::int64 rsp_rpc_id() const;
  void set_rsp_rpc_id(::google::protobuf::int64 value);

  // uint64 req_rpc_hash = 4;
  void clear_req_rpc_hash();
  static const int kReqRpcHashFieldNumber = 4;
  ::google::protobuf::uint64 req_rpc_hash() const;
  void set_req_rpc_hash(::google::protobuf::uint64 value);

  // int32 rpc_ret_code = 3;
  void clear_rpc_ret_code();
  static const int kRpcRetCodeFieldNumber = 3;
  ::google::protobuf::int32 rpc_ret_code() const;
  void set_rpc_ret_code(::google::protobuf::int32 value);

  // uint32 req_bus_id = 6;
  void clear_req_bus_id();
  static const int kReqBusIdFieldNumber = 6;
  ::google::protobuf::uint32 req_bus_id() const;
  void set_req_bus_id(::google::protobuf::uint32 value);

  // uint64 rsp_rpc_hash = 5;
  void clear_rsp_rpc_hash();
  static const int kRspRpcHashFieldNumber = 5;
  ::google::protobuf::uint64 rsp_rpc_hash() const;
  void set_rsp_rpc_hash(::google::protobuf::uint64 value);

  // uint64 req_server_type = 7;
  void clear_req_server_type();
  static const int kReqServerTypeFieldNumber = 7;
  ::google::protobuf::uint64 req_server_type() const;
  void set_req_server_type(::google::protobuf::uint64 value);

  // bool is_script_rpc = 8;
  void clear_is_script_rpc();
  static const int kIsScriptRpcFieldNumber = 8;
  bool is_script_rpc() const;
  void set_is_script_rpc(bool value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_RpcInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 req_rpc_id_;
  ::google::protobuf::int64 rsp_rpc_id_;
  ::google::protobuf::uint64 req_rpc_hash_;
  ::google::protobuf::int32 rpc_ret_code_;
  ::google::protobuf::uint32 req_bus_id_;
  ::google::protobuf::uint64 rsp_rpc_hash_;
  ::google::protobuf::uint64 req_server_type_;
  bool is_script_rpc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_RedirectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_RedirectInfo) */ {
 public:
  Proto_RedirectInfo();
  virtual ~Proto_RedirectInfo();

  Proto_RedirectInfo(const Proto_RedirectInfo& from);

  inline Proto_RedirectInfo& operator=(const Proto_RedirectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_RedirectInfo(Proto_RedirectInfo&& from) noexcept
    : Proto_RedirectInfo() {
    *this = ::std::move(from);
  }

  inline Proto_RedirectInfo& operator=(Proto_RedirectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_RedirectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_RedirectInfo* internal_default_instance() {
    return reinterpret_cast<const Proto_RedirectInfo*>(
               &_Proto_RedirectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Proto_RedirectInfo* other);
  friend void swap(Proto_RedirectInfo& a, Proto_RedirectInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_RedirectInfo* New() const final {
    return CreateMaybeMessage<Proto_RedirectInfo>(NULL);
  }

  Proto_RedirectInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_RedirectInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_RedirectInfo& from);
  void MergeFrom(const Proto_RedirectInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_RedirectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 id = 1;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id(int index) const;
  void set_id(int index, ::google::protobuf::uint64 value);
  void add_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_id();

  // bool all = 2;
  void clear_all();
  static const int kAllFieldNumber = 2;
  bool all() const;
  void set_all(bool value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_RedirectInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > id_;
  mutable int _id_cached_byte_size_;
  bool all_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_FramePkg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_FramePkg) */ {
 public:
  Proto_FramePkg();
  virtual ~Proto_FramePkg();

  Proto_FramePkg(const Proto_FramePkg& from);

  inline Proto_FramePkg& operator=(const Proto_FramePkg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_FramePkg(Proto_FramePkg&& from) noexcept
    : Proto_FramePkg() {
    *this = ::std::move(from);
  }

  inline Proto_FramePkg& operator=(Proto_FramePkg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_FramePkg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_FramePkg* internal_default_instance() {
    return reinterpret_cast<const Proto_FramePkg*>(
               &_Proto_FramePkg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Proto_FramePkg* other);
  friend void swap(Proto_FramePkg& a, Proto_FramePkg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_FramePkg* New() const final {
    return CreateMaybeMessage<Proto_FramePkg>(NULL);
  }

  Proto_FramePkg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_FramePkg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_FramePkg& from);
  void MergeFrom(const Proto_FramePkg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_FramePkg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg_data = 3;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 3;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_data(::std::string&& value);
  #endif
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // .NFrame.Proto_DispInfo disp_info = 4;
  bool has_disp_info() const;
  void clear_disp_info();
  static const int kDispInfoFieldNumber = 4;
  private:
  const ::NFrame::Proto_DispInfo& _internal_disp_info() const;
  public:
  const ::NFrame::Proto_DispInfo& disp_info() const;
  ::NFrame::Proto_DispInfo* release_disp_info();
  ::NFrame::Proto_DispInfo* mutable_disp_info();
  void set_allocated_disp_info(::NFrame::Proto_DispInfo* disp_info);

  // .NFrame.Proto_TransInfo trans_info = 5;
  bool has_trans_info() const;
  void clear_trans_info();
  static const int kTransInfoFieldNumber = 5;
  private:
  const ::NFrame::Proto_TransInfo& _internal_trans_info() const;
  public:
  const ::NFrame::Proto_TransInfo& trans_info() const;
  ::NFrame::Proto_TransInfo* release_trans_info();
  ::NFrame::Proto_TransInfo* mutable_trans_info();
  void set_allocated_trans_info(::NFrame::Proto_TransInfo* trans_info);

  // .NFrame.Proto_StoreInfo store_info = 6;
  bool has_store_info() const;
  void clear_store_info();
  static const int kStoreInfoFieldNumber = 6;
  private:
  const ::NFrame::Proto_StoreInfo& _internal_store_info() const;
  public:
  const ::NFrame::Proto_StoreInfo& store_info() const;
  ::NFrame::Proto_StoreInfo* release_store_info();
  ::NFrame::Proto_StoreInfo* mutable_store_info();
  void set_allocated_store_info(::NFrame::Proto_StoreInfo* store_info);

  // .NFrame.Proto_EventInfo event_info = 7;
  bool has_event_info() const;
  void clear_event_info();
  static const int kEventInfoFieldNumber = 7;
  private:
  const ::NFrame::Proto_EventInfo& _internal_event_info() const;
  public:
  const ::NFrame::Proto_EventInfo& event_info() const;
  ::NFrame::Proto_EventInfo* release_event_info();
  ::NFrame::Proto_EventInfo* mutable_event_info();
  void set_allocated_event_info(::NFrame::Proto_EventInfo* event_info);

  // .NFrame.Proto_RedirectInfo redirect_info = 8;
  bool has_redirect_info() const;
  void clear_redirect_info();
  static const int kRedirectInfoFieldNumber = 8;
  private:
  const ::NFrame::Proto_RedirectInfo& _internal_redirect_info() const;
  public:
  const ::NFrame::Proto_RedirectInfo& redirect_info() const;
  ::NFrame::Proto_RedirectInfo* release_redirect_info();
  ::NFrame::Proto_RedirectInfo* mutable_redirect_info();
  void set_allocated_redirect_info(::NFrame::Proto_RedirectInfo* redirect_info);

  // .NFrame.Proto_RpcInfo rpc_info = 9;
  bool has_rpc_info() const;
  void clear_rpc_info();
  static const int kRpcInfoFieldNumber = 9;
  private:
  const ::NFrame::Proto_RpcInfo& _internal_rpc_info() const;
  public:
  const ::NFrame::Proto_RpcInfo& rpc_info() const;
  ::NFrame::Proto_RpcInfo* release_rpc_info();
  ::NFrame::Proto_RpcInfo* mutable_rpc_info();
  void set_allocated_rpc_info(::NFrame::Proto_RpcInfo* rpc_info);

  // int32 module_id = 1;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 1;
  ::google::protobuf::int32 module_id() const;
  void set_module_id(::google::protobuf::int32 value);

  // int32 msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::int32 msg_id() const;
  void set_msg_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_FramePkg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  ::NFrame::Proto_DispInfo* disp_info_;
  ::NFrame::Proto_TransInfo* trans_info_;
  ::NFrame::Proto_StoreInfo* store_info_;
  ::NFrame::Proto_EventInfo* event_info_;
  ::NFrame::Proto_RedirectInfo* redirect_info_;
  ::NFrame::Proto_RpcInfo* rpc_info_;
  ::google::protobuf::int32 module_id_;
  ::google::protobuf::int32 msg_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoReport : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ServerInfoReport) */ {
 public:
  ServerInfoReport();
  virtual ~ServerInfoReport();

  ServerInfoReport(const ServerInfoReport& from);

  inline ServerInfoReport& operator=(const ServerInfoReport& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReport(ServerInfoReport&& from) noexcept
    : ServerInfoReport() {
    *this = ::std::move(from);
  }

  inline ServerInfoReport& operator=(ServerInfoReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReport* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReport*>(
               &_ServerInfoReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ServerInfoReport* other);
  friend void swap(ServerInfoReport& a, ServerInfoReport& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReport* New() const final {
    return CreateMaybeMessage<ServerInfoReport>(NULL);
  }

  ServerInfoReport* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReport>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReport& from);
  void MergeFrom(const ServerInfoReport& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string db_name_list = 47;
  int db_name_list_size() const;
  void clear_db_name_list();
  static const int kDbNameListFieldNumber = 47;
  const ::std::string& db_name_list(int index) const;
  ::std::string* mutable_db_name_list(int index);
  void set_db_name_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_db_name_list(int index, ::std::string&& value);
  #endif
  void set_db_name_list(int index, const char* value);
  void set_db_name_list(int index, const char* value, size_t size);
  ::std::string* add_db_name_list();
  void add_db_name_list(const ::std::string& value);
  #if LANG_CXX11
  void add_db_name_list(::std::string&& value);
  #endif
  void add_db_name_list(const char* value);
  void add_db_name_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& db_name_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_db_name_list();

  // repeated uint32 msg_id = 48;
  int msg_id_size() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 48;
  ::google::protobuf::uint32 msg_id(int index) const;
  void set_msg_id(int index, ::google::protobuf::uint32 value);
  void add_msg_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      msg_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_msg_id();

  // repeated uint64 map_id_list = 49;
  int map_id_list_size() const;
  void clear_map_id_list();
  static const int kMapIdListFieldNumber = 49;
  ::google::protobuf::uint64 map_id_list(int index) const;
  void set_map_id_list(int index, ::google::protobuf::uint64 value);
  void add_map_id_list(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      map_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_map_id_list();

  // string server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // string server_name = 4;
  void clear_server_name();
  static const int kServerNameFieldNumber = 4;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string url = 5;
  void clear_url();
  static const int kUrlFieldNumber = 5;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string link_mode = 6;
  void clear_link_mode();
  static const int kLinkModeFieldNumber = 6;
  const ::std::string& link_mode() const;
  void set_link_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_link_mode(::std::string&& value);
  #endif
  void set_link_mode(const char* value);
  void set_link_mode(const char* value, size_t size);
  ::std::string* mutable_link_mode();
  ::std::string* release_link_mode();
  void set_allocated_link_mode(::std::string* link_mode);

  // string server_ip = 9;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 9;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // string external_server_ip = 12;
  void clear_external_server_ip();
  static const int kExternalServerIpFieldNumber = 12;
  const ::std::string& external_server_ip() const;
  void set_external_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_external_server_ip(::std::string&& value);
  #endif
  void set_external_server_ip(const char* value);
  void set_external_server_ip(const char* value, size_t size);
  ::std::string* mutable_external_server_ip();
  ::std::string* release_external_server_ip();
  void set_allocated_external_server_ip(::std::string* external_server_ip);

  // string route_svr = 15;
  void clear_route_svr();
  static const int kRouteSvrFieldNumber = 15;
  const ::std::string& route_svr() const;
  void set_route_svr(const ::std::string& value);
  #if LANG_CXX11
  void set_route_svr(::std::string&& value);
  #endif
  void set_route_svr(const char* value);
  void set_route_svr(const char* value, size_t size);
  ::std::string* mutable_route_svr();
  ::std::string* release_route_svr();
  void set_allocated_route_svr(::std::string* route_svr);

  // string system_info = 33;
  void clear_system_info();
  static const int kSystemInfoFieldNumber = 33;
  const ::std::string& system_info() const;
  void set_system_info(const ::std::string& value);
  #if LANG_CXX11
  void set_system_info(::std::string&& value);
  #endif
  void set_system_info(const char* value);
  void set_system_info(const char* value, size_t size);
  ::std::string* mutable_system_info();
  ::std::string* release_system_info();
  void set_allocated_system_info(::std::string* system_info);

  // string proc_name = 40;
  void clear_proc_name();
  static const int kProcNameFieldNumber = 40;
  const ::std::string& proc_name() const;
  void set_proc_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proc_name(::std::string&& value);
  #endif
  void set_proc_name(const char* value);
  void set_proc_name(const char* value, size_t size);
  ::std::string* mutable_proc_name();
  ::std::string* release_proc_name();
  void set_allocated_proc_name(::std::string* proc_name);

  // string proc_cwd = 41;
  void clear_proc_cwd();
  static const int kProcCwdFieldNumber = 41;
  const ::std::string& proc_cwd() const;
  void set_proc_cwd(const ::std::string& value);
  #if LANG_CXX11
  void set_proc_cwd(::std::string&& value);
  #endif
  void set_proc_cwd(const char* value);
  void set_proc_cwd(const char* value, size_t size);
  ::std::string* mutable_proc_cwd();
  ::std::string* release_proc_cwd();
  void set_allocated_proc_cwd(::std::string* proc_cwd);

  // string last_date = 43;
  void clear_last_date();
  static const int kLastDateFieldNumber = 43;
  const ::std::string& last_date() const;
  void set_last_date(const ::std::string& value);
  #if LANG_CXX11
  void set_last_date(::std::string&& value);
  #endif
  void set_last_date(const char* value);
  void set_last_date(const char* value, size_t size);
  ::std::string* mutable_last_date();
  ::std::string* release_last_date();
  void set_allocated_last_date(::std::string* last_date);

  // string contract_info = 45;
  void clear_contract_info();
  static const int kContractInfoFieldNumber = 45;
  const ::std::string& contract_info() const;
  void set_contract_info(const ::std::string& value);
  #if LANG_CXX11
  void set_contract_info(::std::string&& value);
  #endif
  void set_contract_info(const char* value);
  void set_contract_info(const char* value, size_t size);
  ::std::string* mutable_contract_info();
  ::std::string* release_contract_info();
  void set_allocated_contract_info(::std::string* contract_info);

  // string machine_addr = 46;
  void clear_machine_addr();
  static const int kMachineAddrFieldNumber = 46;
  const ::std::string& machine_addr() const;
  void set_machine_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_addr(::std::string&& value);
  #endif
  void set_machine_addr(const char* value);
  void set_machine_addr(const char* value, size_t size);
  ::std::string* mutable_machine_addr();
  ::std::string* release_machine_addr();
  void set_allocated_machine_addr(::std::string* machine_addr);

  // uint32 bus_id = 1;
  void clear_bus_id();
  static const int kBusIdFieldNumber = 1;
  ::google::protobuf::uint32 bus_id() const;
  void set_bus_id(::google::protobuf::uint32 value);

  // uint32 server_type = 3;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 3;
  ::google::protobuf::uint32 server_type() const;
  void set_server_type(::google::protobuf::uint32 value);

  // uint32 bus_length = 7;
  void clear_bus_length();
  static const int kBusLengthFieldNumber = 7;
  ::google::protobuf::uint32 bus_length() const;
  void set_bus_length(::google::protobuf::uint32 value);

  // uint32 server_port = 10;
  void clear_server_port();
  static const int kServerPortFieldNumber = 10;
  ::google::protobuf::uint32 server_port() const;
  void set_server_port(::google::protobuf::uint32 value);

  // uint32 server_http_port = 11;
  void clear_server_http_port();
  static const int kServerHttpPortFieldNumber = 11;
  ::google::protobuf::uint32 server_http_port() const;
  void set_server_http_port(::google::protobuf::uint32 value);

  // uint32 external_server_port = 13;
  void clear_external_server_port();
  static const int kExternalServerPortFieldNumber = 13;
  ::google::protobuf::uint32 external_server_port() const;
  void set_external_server_port(::google::protobuf::uint32 value);

  // bool is_cross_server = 14;
  void clear_is_cross_server();
  static const int kIsCrossServerFieldNumber = 14;
  bool is_cross_server() const;
  void set_is_cross_server(bool value);

  // uint32 server_max_online = 30;
  void clear_server_max_online();
  static const int kServerMaxOnlineFieldNumber = 30;
  ::google::protobuf::uint32 server_max_online() const;
  void set_server_max_online(::google::protobuf::uint32 value);

  // uint32 server_cur_online = 31;
  void clear_server_cur_online();
  static const int kServerCurOnlineFieldNumber = 31;
  ::google::protobuf::uint32 server_cur_online() const;
  void set_server_cur_online(::google::protobuf::uint32 value);

  // uint32 server_state = 32;
  void clear_server_state();
  static const int kServerStateFieldNumber = 32;
  ::google::protobuf::uint32 server_state() const;
  void set_server_state(::google::protobuf::uint32 value);

  // uint64 total_mem = 34;
  void clear_total_mem();
  static const int kTotalMemFieldNumber = 34;
  ::google::protobuf::uint64 total_mem() const;
  void set_total_mem(::google::protobuf::uint64 value);

  // uint64 free_mem = 35;
  void clear_free_mem();
  static const int kFreeMemFieldNumber = 35;
  ::google::protobuf::uint64 free_mem() const;
  void set_free_mem(::google::protobuf::uint64 value);

  // uint64 used_mem = 36;
  void clear_used_mem();
  static const int kUsedMemFieldNumber = 36;
  ::google::protobuf::uint64 used_mem() const;
  void set_used_mem(::google::protobuf::uint64 value);

  // double proc_cpu = 37;
  void clear_proc_cpu();
  static const int kProcCpuFieldNumber = 37;
  double proc_cpu() const;
  void set_proc_cpu(double value);

  // uint64 proc_mem = 38;
  void clear_proc_mem();
  static const int kProcMemFieldNumber = 38;
  ::google::protobuf::uint64 proc_mem() const;
  void set_proc_mem(::google::protobuf::uint64 value);

  // uint32 proc_thread = 39;
  void clear_proc_thread();
  static const int kProcThreadFieldNumber = 39;
  ::google::protobuf::uint32 proc_thread() const;
  void set_proc_thread(::google::protobuf::uint32 value);

  // uint32 proc_pid = 42;
  void clear_proc_pid();
  static const int kProcPidFieldNumber = 42;
  ::google::protobuf::uint32 proc_pid() const;
  void set_proc_pid(::google::protobuf::uint32 value);

  // uint64 last_time = 44;
  void clear_last_time();
  static const int kLastTimeFieldNumber = 44;
  ::google::protobuf::uint64 last_time() const;
  void set_last_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:NFrame.ServerInfoReport)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> db_name_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > msg_id_;
  mutable int _msg_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > map_id_list_;
  mutable int _map_id_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr link_mode_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::internal::ArenaStringPtr external_server_ip_;
  ::google::protobuf::internal::ArenaStringPtr route_svr_;
  ::google::protobuf::internal::ArenaStringPtr system_info_;
  ::google::protobuf::internal::ArenaStringPtr proc_name_;
  ::google::protobuf::internal::ArenaStringPtr proc_cwd_;
  ::google::protobuf::internal::ArenaStringPtr last_date_;
  ::google::protobuf::internal::ArenaStringPtr contract_info_;
  ::google::protobuf::internal::ArenaStringPtr machine_addr_;
  ::google::protobuf::uint32 bus_id_;
  ::google::protobuf::uint32 server_type_;
  ::google::protobuf::uint32 bus_length_;
  ::google::protobuf::uint32 server_port_;
  ::google::protobuf::uint32 server_http_port_;
  ::google::protobuf::uint32 external_server_port_;
  bool is_cross_server_;
  ::google::protobuf::uint32 server_max_online_;
  ::google::protobuf::uint32 server_cur_online_;
  ::google::protobuf::uint32 server_state_;
  ::google::protobuf::uint64 total_mem_;
  ::google::protobuf::uint64 free_mem_;
  ::google::protobuf::uint64 used_mem_;
  double proc_cpu_;
  ::google::protobuf::uint64 proc_mem_;
  ::google::protobuf::uint32 proc_thread_;
  ::google::protobuf::uint32 proc_pid_;
  ::google::protobuf::uint64 last_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoReportList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ServerInfoReportList) */ {
 public:
  ServerInfoReportList();
  virtual ~ServerInfoReportList();

  ServerInfoReportList(const ServerInfoReportList& from);

  inline ServerInfoReportList& operator=(const ServerInfoReportList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReportList(ServerInfoReportList&& from) noexcept
    : ServerInfoReportList() {
    *this = ::std::move(from);
  }

  inline ServerInfoReportList& operator=(ServerInfoReportList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReportList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReportList* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReportList*>(
               &_ServerInfoReportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ServerInfoReportList* other);
  friend void swap(ServerInfoReportList& a, ServerInfoReportList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReportList* New() const final {
    return CreateMaybeMessage<ServerInfoReportList>(NULL);
  }

  ServerInfoReportList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReportList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReportList& from);
  void MergeFrom(const ServerInfoReportList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReportList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFrame.ServerInfoReport server_list = 1;
  int server_list_size() const;
  void clear_server_list();
  static const int kServerListFieldNumber = 1;
  ::NFrame::ServerInfoReport* mutable_server_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrame::ServerInfoReport >*
      mutable_server_list();
  const ::NFrame::ServerInfoReport& server_list(int index) const;
  ::NFrame::ServerInfoReport* add_server_list();
  const ::google::protobuf::RepeatedPtrField< ::NFrame::ServerInfoReport >&
      server_list() const;

  // @@protoc_insertion_point(class_scope:NFrame.ServerInfoReportList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFrame::ServerInfoReport > server_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerInfoReportListRespne : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ServerInfoReportListRespne) */ {
 public:
  ServerInfoReportListRespne();
  virtual ~ServerInfoReportListRespne();

  ServerInfoReportListRespne(const ServerInfoReportListRespne& from);

  inline ServerInfoReportListRespne& operator=(const ServerInfoReportListRespne& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerInfoReportListRespne(ServerInfoReportListRespne&& from) noexcept
    : ServerInfoReportListRespne() {
    *this = ::std::move(from);
  }

  inline ServerInfoReportListRespne& operator=(ServerInfoReportListRespne&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfoReportListRespne& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerInfoReportListRespne* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReportListRespne*>(
               &_ServerInfoReportListRespne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ServerInfoReportListRespne* other);
  friend void swap(ServerInfoReportListRespne& a, ServerInfoReportListRespne& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReportListRespne* New() const final {
    return CreateMaybeMessage<ServerInfoReportListRespne>(NULL);
  }

  ServerInfoReportListRespne* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReportListRespne>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerInfoReportListRespne& from);
  void MergeFrom(const ServerInfoReportListRespne& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReportListRespne* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ret_code = 1;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.ServerInfoReportListRespne)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ret_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ZkServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ZkServerInfo) */ {
 public:
  ZkServerInfo();
  virtual ~ZkServerInfo();

  ZkServerInfo(const ZkServerInfo& from);

  inline ZkServerInfo& operator=(const ZkServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZkServerInfo(ZkServerInfo&& from) noexcept
    : ZkServerInfo() {
    *this = ::std::move(from);
  }

  inline ZkServerInfo& operator=(ZkServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZkServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZkServerInfo* internal_default_instance() {
    return reinterpret_cast<const ZkServerInfo*>(
               &_ZkServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ZkServerInfo* other);
  friend void swap(ZkServerInfo& a, ZkServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZkServerInfo* New() const final {
    return CreateMaybeMessage<ZkServerInfo>(NULL);
  }

  ZkServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZkServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZkServerInfo& from);
  void MergeFrom(const ZkServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZkServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bus_url = 1;
  void clear_bus_url();
  static const int kBusUrlFieldNumber = 1;
  const ::std::string& bus_url() const;
  void set_bus_url(const ::std::string& value);
  #if LANG_CXX11
  void set_bus_url(::std::string&& value);
  #endif
  void set_bus_url(const char* value);
  void set_bus_url(const char* value, size_t size);
  ::std::string* mutable_bus_url();
  ::std::string* release_bus_url();
  void set_allocated_bus_url(::std::string* bus_url);

  // string tcp_url = 2;
  void clear_tcp_url();
  static const int kTcpUrlFieldNumber = 2;
  const ::std::string& tcp_url() const;
  void set_tcp_url(const ::std::string& value);
  #if LANG_CXX11
  void set_tcp_url(::std::string&& value);
  #endif
  void set_tcp_url(const char* value);
  void set_tcp_url(const char* value, size_t size);
  ::std::string* mutable_tcp_url();
  ::std::string* release_tcp_url();
  void set_allocated_tcp_url(::std::string* tcp_url);

  // @@protoc_insertion_point(class_scope:NFrame.ZkServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bus_url_;
  ::google::protobuf::internal::ArenaStringPtr tcp_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DynLibFileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.DynLibFileInfo) */ {
 public:
  DynLibFileInfo();
  virtual ~DynLibFileInfo();

  DynLibFileInfo(const DynLibFileInfo& from);

  inline DynLibFileInfo& operator=(const DynLibFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DynLibFileInfo(DynLibFileInfo&& from) noexcept
    : DynLibFileInfo() {
    *this = ::std::move(from);
  }

  inline DynLibFileInfo& operator=(DynLibFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynLibFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynLibFileInfo* internal_default_instance() {
    return reinterpret_cast<const DynLibFileInfo*>(
               &_DynLibFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(DynLibFileInfo* other);
  friend void swap(DynLibFileInfo& a, DynLibFileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynLibFileInfo* New() const final {
    return CreateMaybeMessage<DynLibFileInfo>(NULL);
  }

  DynLibFileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DynLibFileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DynLibFileInfo& from);
  void MergeFrom(const DynLibFileInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynLibFileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_md5 = 1;
  void clear_file_md5();
  static const int kFileMd5FieldNumber = 1;
  const ::std::string& file_md5() const;
  void set_file_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_file_md5(::std::string&& value);
  #endif
  void set_file_md5(const char* value);
  void set_file_md5(const char* value, size_t size);
  ::std::string* mutable_file_md5();
  ::std::string* release_file_md5();
  void set_allocated_file_md5(::std::string* file_md5);

  // int32 file_size = 2;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::int32 file_size() const;
  void set_file_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.DynLibFileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_md5_;
  ::google::protobuf::int32 file_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DynLibFileInfoArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.DynLibFileInfoArray) */ {
 public:
  DynLibFileInfoArray();
  virtual ~DynLibFileInfoArray();

  DynLibFileInfoArray(const DynLibFileInfoArray& from);

  inline DynLibFileInfoArray& operator=(const DynLibFileInfoArray& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DynLibFileInfoArray(DynLibFileInfoArray&& from) noexcept
    : DynLibFileInfoArray() {
    *this = ::std::move(from);
  }

  inline DynLibFileInfoArray& operator=(DynLibFileInfoArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DynLibFileInfoArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynLibFileInfoArray* internal_default_instance() {
    return reinterpret_cast<const DynLibFileInfoArray*>(
               &_DynLibFileInfoArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(DynLibFileInfoArray* other);
  friend void swap(DynLibFileInfoArray& a, DynLibFileInfoArray& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DynLibFileInfoArray* New() const final {
    return CreateMaybeMessage<DynLibFileInfoArray>(NULL);
  }

  DynLibFileInfoArray* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DynLibFileInfoArray>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DynLibFileInfoArray& from);
  void MergeFrom(const DynLibFileInfoArray& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynLibFileInfoArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFrame.DynLibFileInfo file_list = 1;
  int file_list_size() const;
  void clear_file_list();
  static const int kFileListFieldNumber = 1;
  ::NFrame::DynLibFileInfo* mutable_file_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrame::DynLibFileInfo >*
      mutable_file_list();
  const ::NFrame::DynLibFileInfo& file_list(int index) const;
  ::NFrame::DynLibFileInfo* add_file_list();
  const ::google::protobuf::RepeatedPtrField< ::NFrame::DynLibFileInfo >&
      file_list() const;

  // @@protoc_insertion_point(class_scope:NFrame.DynLibFileInfoArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFrame::DynLibFileInfo > file_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_KillAllServerNtf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_KillAllServerNtf) */ {
 public:
  Proto_KillAllServerNtf();
  virtual ~Proto_KillAllServerNtf();

  Proto_KillAllServerNtf(const Proto_KillAllServerNtf& from);

  inline Proto_KillAllServerNtf& operator=(const Proto_KillAllServerNtf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_KillAllServerNtf(Proto_KillAllServerNtf&& from) noexcept
    : Proto_KillAllServerNtf() {
    *this = ::std::move(from);
  }

  inline Proto_KillAllServerNtf& operator=(Proto_KillAllServerNtf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_KillAllServerNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_KillAllServerNtf* internal_default_instance() {
    return reinterpret_cast<const Proto_KillAllServerNtf*>(
               &_Proto_KillAllServerNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Proto_KillAllServerNtf* other);
  friend void swap(Proto_KillAllServerNtf& a, Proto_KillAllServerNtf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_KillAllServerNtf* New() const final {
    return CreateMaybeMessage<Proto_KillAllServerNtf>(NULL);
  }

  Proto_KillAllServerNtf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_KillAllServerNtf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_KillAllServerNtf& from);
  void MergeFrom(const Proto_KillAllServerNtf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_KillAllServerNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NFrame.Proto_KillAllServerNtf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_KillAllServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_KillAllServerRsp) */ {
 public:
  Proto_KillAllServerRsp();
  virtual ~Proto_KillAllServerRsp();

  Proto_KillAllServerRsp(const Proto_KillAllServerRsp& from);

  inline Proto_KillAllServerRsp& operator=(const Proto_KillAllServerRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_KillAllServerRsp(Proto_KillAllServerRsp&& from) noexcept
    : Proto_KillAllServerRsp() {
    *this = ::std::move(from);
  }

  inline Proto_KillAllServerRsp& operator=(Proto_KillAllServerRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_KillAllServerRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_KillAllServerRsp* internal_default_instance() {
    return reinterpret_cast<const Proto_KillAllServerRsp*>(
               &_Proto_KillAllServerRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Proto_KillAllServerRsp* other);
  friend void swap(Proto_KillAllServerRsp& a, Proto_KillAllServerRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_KillAllServerRsp* New() const final {
    return CreateMaybeMessage<Proto_KillAllServerRsp>(NULL);
  }

  Proto_KillAllServerRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_KillAllServerRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_KillAllServerRsp& from);
  void MergeFrom(const Proto_KillAllServerRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_KillAllServerRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_KillAllServerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_STSBroadPlayerMsgNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_STSBroadPlayerMsgNotify) */ {
 public:
  Proto_STSBroadPlayerMsgNotify();
  virtual ~Proto_STSBroadPlayerMsgNotify();

  Proto_STSBroadPlayerMsgNotify(const Proto_STSBroadPlayerMsgNotify& from);

  inline Proto_STSBroadPlayerMsgNotify& operator=(const Proto_STSBroadPlayerMsgNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_STSBroadPlayerMsgNotify(Proto_STSBroadPlayerMsgNotify&& from) noexcept
    : Proto_STSBroadPlayerMsgNotify() {
    *this = ::std::move(from);
  }

  inline Proto_STSBroadPlayerMsgNotify& operator=(Proto_STSBroadPlayerMsgNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_STSBroadPlayerMsgNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_STSBroadPlayerMsgNotify* internal_default_instance() {
    return reinterpret_cast<const Proto_STSBroadPlayerMsgNotify*>(
               &_Proto_STSBroadPlayerMsgNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Proto_STSBroadPlayerMsgNotify* other);
  friend void swap(Proto_STSBroadPlayerMsgNotify& a, Proto_STSBroadPlayerMsgNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_STSBroadPlayerMsgNotify* New() const final {
    return CreateMaybeMessage<Proto_STSBroadPlayerMsgNotify>(NULL);
  }

  Proto_STSBroadPlayerMsgNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_STSBroadPlayerMsgNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_STSBroadPlayerMsgNotify& from);
  void MergeFrom(const Proto_STSBroadPlayerMsgNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_STSBroadPlayerMsgNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 user_id = 1;
  int user_id_size() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id(int index) const;
  void set_user_id(int index, ::google::protobuf::uint64 value);
  void add_user_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      user_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_user_id();

  // bytes msg_data = 3;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 3;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_data(::std::string&& value);
  #endif
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // uint32 msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_STSBroadPlayerMsgNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > user_id_;
  mutable int _user_id_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  ::google::protobuf::uint32 msg_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_STWebMsgRspNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_STWebMsgRspNotify) */ {
 public:
  Proto_STWebMsgRspNotify();
  virtual ~Proto_STWebMsgRspNotify();

  Proto_STWebMsgRspNotify(const Proto_STWebMsgRspNotify& from);

  inline Proto_STWebMsgRspNotify& operator=(const Proto_STWebMsgRspNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_STWebMsgRspNotify(Proto_STWebMsgRspNotify&& from) noexcept
    : Proto_STWebMsgRspNotify() {
    *this = ::std::move(from);
  }

  inline Proto_STWebMsgRspNotify& operator=(Proto_STWebMsgRspNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_STWebMsgRspNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_STWebMsgRspNotify* internal_default_instance() {
    return reinterpret_cast<const Proto_STWebMsgRspNotify*>(
               &_Proto_STWebMsgRspNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Proto_STWebMsgRspNotify* other);
  friend void swap(Proto_STWebMsgRspNotify& a, Proto_STWebMsgRspNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_STWebMsgRspNotify* New() const final {
    return CreateMaybeMessage<Proto_STWebMsgRspNotify>(NULL);
  }

  Proto_STWebMsgRspNotify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_STWebMsgRspNotify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_STWebMsgRspNotify& from);
  void MergeFrom(const Proto_STWebMsgRspNotify& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_STWebMsgRspNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err_msg = 3;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // uint64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::uint64 request_id() const;
  void set_request_id(::google::protobuf::uint64 value);

  // int32 result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_STWebMsgRspNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::uint64 request_id_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NFEventNoneData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.NFEventNoneData) */ {
 public:
  NFEventNoneData();
  virtual ~NFEventNoneData();

  NFEventNoneData(const NFEventNoneData& from);

  inline NFEventNoneData& operator=(const NFEventNoneData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NFEventNoneData(NFEventNoneData&& from) noexcept
    : NFEventNoneData() {
    *this = ::std::move(from);
  }

  inline NFEventNoneData& operator=(NFEventNoneData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NFEventNoneData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NFEventNoneData* internal_default_instance() {
    return reinterpret_cast<const NFEventNoneData*>(
               &_NFEventNoneData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(NFEventNoneData* other);
  friend void swap(NFEventNoneData& a, NFEventNoneData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NFEventNoneData* New() const final {
    return CreateMaybeMessage<NFEventNoneData>(NULL);
  }

  NFEventNoneData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NFEventNoneData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NFEventNoneData& from);
  void MergeFrom(const NFEventNoneData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NFEventNoneData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 param1 = 1;
  void clear_param1();
  static const int kParam1FieldNumber = 1;
  ::google::protobuf::int64 param1() const;
  void set_param1(::google::protobuf::int64 value);

  // int64 param2 = 2;
  void clear_param2();
  static const int kParam2FieldNumber = 2;
  ::google::protobuf::int64 param2() const;
  void set_param2(::google::protobuf::int64 value);

  // int64 param3 = 3;
  void clear_param3();
  static const int kParam3FieldNumber = 3;
  ::google::protobuf::int64 param3() const;
  void set_param3(::google::protobuf::int64 value);

  // int64 param4 = 4;
  void clear_param4();
  static const int kParam4FieldNumber = 4;
  ::google::protobuf::int64 param4() const;
  void set_param4(::google::protobuf::int64 value);

  // int64 param5 = 5;
  void clear_param5();
  static const int kParam5FieldNumber = 5;
  ::google::protobuf::int64 param5() const;
  void set_param5(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFrame.NFEventNoneData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;
  ::google::protobuf::int64 param3_;
  ::google::protobuf::int64 param4_;
  ::google::protobuf::int64 param5_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NFEventScriptData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.NFEventScriptData) */ {
 public:
  NFEventScriptData();
  virtual ~NFEventScriptData();

  NFEventScriptData(const NFEventScriptData& from);

  inline NFEventScriptData& operator=(const NFEventScriptData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NFEventScriptData(NFEventScriptData&& from) noexcept
    : NFEventScriptData() {
    *this = ::std::move(from);
  }

  inline NFEventScriptData& operator=(NFEventScriptData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NFEventScriptData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NFEventScriptData* internal_default_instance() {
    return reinterpret_cast<const NFEventScriptData*>(
               &_NFEventScriptData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(NFEventScriptData* other);
  friend void swap(NFEventScriptData& a, NFEventScriptData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NFEventScriptData* New() const final {
    return CreateMaybeMessage<NFEventScriptData>(NULL);
  }

  NFEventScriptData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NFEventScriptData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NFEventScriptData& from);
  void MergeFrom(const NFEventScriptData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NFEventScriptData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  #if LANG_CXX11
  void set_event_type(::std::string&& value);
  #endif
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // string event_data = 2;
  void clear_event_data();
  static const int kEventDataFieldNumber = 2;
  const ::std::string& event_data() const;
  void set_event_data(const ::std::string& value);
  #if LANG_CXX11
  void set_event_data(::std::string&& value);
  #endif
  void set_event_data(const char* value);
  void set_event_data(const char* value, size_t size);
  ::std::string* mutable_event_data();
  ::std::string* release_event_data();
  void set_allocated_event_data(::std::string* event_data);

  // @@protoc_insertion_point(class_scope:NFrame.NFEventScriptData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  ::google::protobuf::internal::ArenaStringPtr event_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_ServerDumpInfoNtf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.Proto_ServerDumpInfoNtf) */ {
 public:
  Proto_ServerDumpInfoNtf();
  virtual ~Proto_ServerDumpInfoNtf();

  Proto_ServerDumpInfoNtf(const Proto_ServerDumpInfoNtf& from);

  inline Proto_ServerDumpInfoNtf& operator=(const Proto_ServerDumpInfoNtf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_ServerDumpInfoNtf(Proto_ServerDumpInfoNtf&& from) noexcept
    : Proto_ServerDumpInfoNtf() {
    *this = ::std::move(from);
  }

  inline Proto_ServerDumpInfoNtf& operator=(Proto_ServerDumpInfoNtf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_ServerDumpInfoNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_ServerDumpInfoNtf* internal_default_instance() {
    return reinterpret_cast<const Proto_ServerDumpInfoNtf*>(
               &_Proto_ServerDumpInfoNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Proto_ServerDumpInfoNtf* other);
  friend void swap(Proto_ServerDumpInfoNtf& a, Proto_ServerDumpInfoNtf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_ServerDumpInfoNtf* New() const final {
    return CreateMaybeMessage<Proto_ServerDumpInfoNtf>(NULL);
  }

  Proto_ServerDumpInfoNtf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_ServerDumpInfoNtf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_ServerDumpInfoNtf& from);
  void MergeFrom(const Proto_ServerDumpInfoNtf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_ServerDumpInfoNtf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dump_info = 1;
  void clear_dump_info();
  static const int kDumpInfoFieldNumber = 1;
  const ::std::string& dump_info() const;
  void set_dump_info(const ::std::string& value);
  #if LANG_CXX11
  void set_dump_info(::std::string&& value);
  #endif
  void set_dump_info(const char* value);
  void set_dump_info(const char* value, size_t size);
  ::std::string* mutable_dump_info();
  ::std::string* release_dump_info();
  void set_allocated_dump_info(::std::string* dump_info);

  // uint32 bus_id = 2;
  void clear_bus_id();
  static const int kBusIdFieldNumber = 2;
  ::google::protobuf::uint32 bus_id() const;
  void set_bus_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.Proto_ServerDumpInfoNtf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dump_info_;
  ::google::protobuf::uint32 bus_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameMsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Proto_DispInfo

// uint64 id = 1;
inline void Proto_DispInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_DispInfo::id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_DispInfo.id)
  return id_;
}
inline void Proto_DispInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_DispInfo.id)
}

// int32 seq = 4;
inline void Proto_DispInfo::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 Proto_DispInfo::seq() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_DispInfo.seq)
  return seq_;
}
inline void Proto_DispInfo::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_DispInfo.seq)
}

// int32 req_seq = 5;
inline void Proto_DispInfo::clear_req_seq() {
  req_seq_ = 0;
}
inline ::google::protobuf::int32 Proto_DispInfo::req_seq() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_DispInfo.req_seq)
  return req_seq_;
}
inline void Proto_DispInfo::set_req_seq(::google::protobuf::int32 value) {
  
  req_seq_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_DispInfo.req_seq)
}

// int32 err_code = 6;
inline void Proto_DispInfo::clear_err_code() {
  err_code_ = 0;
}
inline ::google::protobuf::int32 Proto_DispInfo::err_code() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_DispInfo.err_code)
  return err_code_;
}
inline void Proto_DispInfo::set_err_code(::google::protobuf::int32 value) {
  
  err_code_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_DispInfo.err_code)
}

// .NFrame.PacketDispType type = 7;
inline void Proto_DispInfo::clear_type() {
  type_ = 0;
}
inline ::NFrame::PacketDispType Proto_DispInfo::type() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_DispInfo.type)
  return static_cast< ::NFrame::PacketDispType >(type_);
}
inline void Proto_DispInfo::set_type(::NFrame::PacketDispType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_DispInfo.type)
}

// -------------------------------------------------------------------

// Proto_TransInfo

// int32 req_trans_id = 1;
inline void Proto_TransInfo::clear_req_trans_id() {
  req_trans_id_ = 0;
}
inline ::google::protobuf::int32 Proto_TransInfo::req_trans_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_TransInfo.req_trans_id)
  return req_trans_id_;
}
inline void Proto_TransInfo::set_req_trans_id(::google::protobuf::int32 value) {
  
  req_trans_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_TransInfo.req_trans_id)
}

// int32 rsp_trans_id = 2;
inline void Proto_TransInfo::clear_rsp_trans_id() {
  rsp_trans_id_ = 0;
}
inline ::google::protobuf::int32 Proto_TransInfo::rsp_trans_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_TransInfo.rsp_trans_id)
  return rsp_trans_id_;
}
inline void Proto_TransInfo::set_rsp_trans_id(::google::protobuf::int32 value) {
  
  rsp_trans_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_TransInfo.rsp_trans_id)
}

// -------------------------------------------------------------------

// Proto_StoreInfo

// uint64 id = 1;
inline void Proto_StoreInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_StoreInfo::id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_StoreInfo.id)
  return id_;
}
inline void Proto_StoreInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_StoreInfo.id)
}

// uint32 table_id = 2;
inline void Proto_StoreInfo::clear_table_id() {
  table_id_ = 0u;
}
inline ::google::protobuf::uint32 Proto_StoreInfo::table_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_StoreInfo.table_id)
  return table_id_;
}
inline void Proto_StoreInfo::set_table_id(::google::protobuf::uint32 value) {
  
  table_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_StoreInfo.table_id)
}

// -------------------------------------------------------------------

// Proto_EventInfo

// uint32 server_type = 1;
inline void Proto_EventInfo::clear_server_type() {
  server_type_ = 0u;
}
inline ::google::protobuf::uint32 Proto_EventInfo::server_type() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_EventInfo.server_type)
  return server_type_;
}
inline void Proto_EventInfo::set_server_type(::google::protobuf::uint32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_EventInfo.server_type)
}

// uint64 event_id = 2;
inline void Proto_EventInfo::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_EventInfo::event_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_EventInfo.event_id)
  return event_id_;
}
inline void Proto_EventInfo::set_event_id(::google::protobuf::uint64 value) {
  
  event_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_EventInfo.event_id)
}

// uint64 src_type = 3;
inline void Proto_EventInfo::clear_src_type() {
  src_type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_EventInfo::src_type() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_EventInfo.src_type)
  return src_type_;
}
inline void Proto_EventInfo::set_src_type(::google::protobuf::uint64 value) {
  
  src_type_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_EventInfo.src_type)
}

// uint64 src_id = 4;
inline void Proto_EventInfo::clear_src_id() {
  src_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_EventInfo::src_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_EventInfo.src_id)
  return src_id_;
}
inline void Proto_EventInfo::set_src_id(::google::protobuf::uint64 value) {
  
  src_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_EventInfo.src_id)
}

// string full_message_name = 5;
inline void Proto_EventInfo::clear_full_message_name() {
  full_message_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_EventInfo::full_message_name() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_EventInfo.full_message_name)
  return full_message_name_.GetNoArena();
}
inline void Proto_EventInfo::set_full_message_name(const ::std::string& value) {
  
  full_message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_EventInfo.full_message_name)
}
#if LANG_CXX11
inline void Proto_EventInfo::set_full_message_name(::std::string&& value) {
  
  full_message_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_EventInfo.full_message_name)
}
#endif
inline void Proto_EventInfo::set_full_message_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  full_message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_EventInfo.full_message_name)
}
inline void Proto_EventInfo::set_full_message_name(const char* value, size_t size) {
  
  full_message_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_EventInfo.full_message_name)
}
inline ::std::string* Proto_EventInfo::mutable_full_message_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_EventInfo.full_message_name)
  return full_message_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_EventInfo::release_full_message_name() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_EventInfo.full_message_name)
  
  return full_message_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_EventInfo::set_allocated_full_message_name(::std::string* full_message_name) {
  if (full_message_name != NULL) {
    
  } else {
    
  }
  full_message_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_message_name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_EventInfo.full_message_name)
}

// -------------------------------------------------------------------

// Proto_ScriptRpcResult

// string req_type = 1;
inline void Proto_ScriptRpcResult::clear_req_type() {
  req_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_ScriptRpcResult::req_type() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_ScriptRpcResult.req_type)
  return req_type_.GetNoArena();
}
inline void Proto_ScriptRpcResult::set_req_type(const ::std::string& value) {
  
  req_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_ScriptRpcResult.req_type)
}
#if LANG_CXX11
inline void Proto_ScriptRpcResult::set_req_type(::std::string&& value) {
  
  req_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_ScriptRpcResult.req_type)
}
#endif
inline void Proto_ScriptRpcResult::set_req_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  req_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_ScriptRpcResult.req_type)
}
inline void Proto_ScriptRpcResult::set_req_type(const char* value, size_t size) {
  
  req_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_ScriptRpcResult.req_type)
}
inline ::std::string* Proto_ScriptRpcResult::mutable_req_type() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_ScriptRpcResult.req_type)
  return req_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_ScriptRpcResult::release_req_type() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_ScriptRpcResult.req_type)
  
  return req_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_ScriptRpcResult::set_allocated_req_type(::std::string* req_type) {
  if (req_type != NULL) {
    
  } else {
    
  }
  req_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_type);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_ScriptRpcResult.req_type)
}

// string rsp_type = 2;
inline void Proto_ScriptRpcResult::clear_rsp_type() {
  rsp_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_ScriptRpcResult::rsp_type() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_ScriptRpcResult.rsp_type)
  return rsp_type_.GetNoArena();
}
inline void Proto_ScriptRpcResult::set_rsp_type(const ::std::string& value) {
  
  rsp_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_ScriptRpcResult.rsp_type)
}
#if LANG_CXX11
inline void Proto_ScriptRpcResult::set_rsp_type(::std::string&& value) {
  
  rsp_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_ScriptRpcResult.rsp_type)
}
#endif
inline void Proto_ScriptRpcResult::set_rsp_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rsp_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_ScriptRpcResult.rsp_type)
}
inline void Proto_ScriptRpcResult::set_rsp_type(const char* value, size_t size) {
  
  rsp_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_ScriptRpcResult.rsp_type)
}
inline ::std::string* Proto_ScriptRpcResult::mutable_rsp_type() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_ScriptRpcResult.rsp_type)
  return rsp_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_ScriptRpcResult::release_rsp_type() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_ScriptRpcResult.rsp_type)
  
  return rsp_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_ScriptRpcResult::set_allocated_rsp_type(::std::string* rsp_type) {
  if (rsp_type != NULL) {
    
  } else {
    
  }
  rsp_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp_type);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_ScriptRpcResult.rsp_type)
}

// string respone = 3;
inline void Proto_ScriptRpcResult::clear_respone() {
  respone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_ScriptRpcResult::respone() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_ScriptRpcResult.respone)
  return respone_.GetNoArena();
}
inline void Proto_ScriptRpcResult::set_respone(const ::std::string& value) {
  
  respone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_ScriptRpcResult.respone)
}
#if LANG_CXX11
inline void Proto_ScriptRpcResult::set_respone(::std::string&& value) {
  
  respone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_ScriptRpcResult.respone)
}
#endif
inline void Proto_ScriptRpcResult::set_respone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  respone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_ScriptRpcResult.respone)
}
inline void Proto_ScriptRpcResult::set_respone(const char* value, size_t size) {
  
  respone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_ScriptRpcResult.respone)
}
inline ::std::string* Proto_ScriptRpcResult::mutable_respone() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_ScriptRpcResult.respone)
  return respone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_ScriptRpcResult::release_respone() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_ScriptRpcResult.respone)
  
  return respone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_ScriptRpcResult::set_allocated_respone(::std::string* respone) {
  if (respone != NULL) {
    
  } else {
    
  }
  respone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), respone);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_ScriptRpcResult.respone)
}

// -------------------------------------------------------------------

// Proto_RpcInfo

// int64 req_rpc_id = 1;
inline void Proto_RpcInfo::clear_req_rpc_id() {
  req_rpc_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Proto_RpcInfo::req_rpc_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.req_rpc_id)
  return req_rpc_id_;
}
inline void Proto_RpcInfo::set_req_rpc_id(::google::protobuf::int64 value) {
  
  req_rpc_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.req_rpc_id)
}

// int64 rsp_rpc_id = 2;
inline void Proto_RpcInfo::clear_rsp_rpc_id() {
  rsp_rpc_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Proto_RpcInfo::rsp_rpc_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.rsp_rpc_id)
  return rsp_rpc_id_;
}
inline void Proto_RpcInfo::set_rsp_rpc_id(::google::protobuf::int64 value) {
  
  rsp_rpc_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.rsp_rpc_id)
}

// int32 rpc_ret_code = 3;
inline void Proto_RpcInfo::clear_rpc_ret_code() {
  rpc_ret_code_ = 0;
}
inline ::google::protobuf::int32 Proto_RpcInfo::rpc_ret_code() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.rpc_ret_code)
  return rpc_ret_code_;
}
inline void Proto_RpcInfo::set_rpc_ret_code(::google::protobuf::int32 value) {
  
  rpc_ret_code_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.rpc_ret_code)
}

// uint64 req_rpc_hash = 4;
inline void Proto_RpcInfo::clear_req_rpc_hash() {
  req_rpc_hash_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_RpcInfo::req_rpc_hash() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.req_rpc_hash)
  return req_rpc_hash_;
}
inline void Proto_RpcInfo::set_req_rpc_hash(::google::protobuf::uint64 value) {
  
  req_rpc_hash_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.req_rpc_hash)
}

// uint64 rsp_rpc_hash = 5;
inline void Proto_RpcInfo::clear_rsp_rpc_hash() {
  rsp_rpc_hash_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_RpcInfo::rsp_rpc_hash() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.rsp_rpc_hash)
  return rsp_rpc_hash_;
}
inline void Proto_RpcInfo::set_rsp_rpc_hash(::google::protobuf::uint64 value) {
  
  rsp_rpc_hash_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.rsp_rpc_hash)
}

// uint32 req_bus_id = 6;
inline void Proto_RpcInfo::clear_req_bus_id() {
  req_bus_id_ = 0u;
}
inline ::google::protobuf::uint32 Proto_RpcInfo::req_bus_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.req_bus_id)
  return req_bus_id_;
}
inline void Proto_RpcInfo::set_req_bus_id(::google::protobuf::uint32 value) {
  
  req_bus_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.req_bus_id)
}

// uint64 req_server_type = 7;
inline void Proto_RpcInfo::clear_req_server_type() {
  req_server_type_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_RpcInfo::req_server_type() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.req_server_type)
  return req_server_type_;
}
inline void Proto_RpcInfo::set_req_server_type(::google::protobuf::uint64 value) {
  
  req_server_type_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.req_server_type)
}

// bool is_script_rpc = 8;
inline void Proto_RpcInfo::clear_is_script_rpc() {
  is_script_rpc_ = false;
}
inline bool Proto_RpcInfo::is_script_rpc() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RpcInfo.is_script_rpc)
  return is_script_rpc_;
}
inline void Proto_RpcInfo::set_is_script_rpc(bool value) {
  
  is_script_rpc_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RpcInfo.is_script_rpc)
}

// -------------------------------------------------------------------

// Proto_RedirectInfo

// repeated uint64 id = 1;
inline int Proto_RedirectInfo::id_size() const {
  return id_.size();
}
inline void Proto_RedirectInfo::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint64 Proto_RedirectInfo::id(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RedirectInfo.id)
  return id_.Get(index);
}
inline void Proto_RedirectInfo::set_id(int index, ::google::protobuf::uint64 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_RedirectInfo.id)
}
inline void Proto_RedirectInfo::add_id(::google::protobuf::uint64 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:NFrame.Proto_RedirectInfo.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Proto_RedirectInfo::id() const {
  // @@protoc_insertion_point(field_list:NFrame.Proto_RedirectInfo.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Proto_RedirectInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.Proto_RedirectInfo.id)
  return &id_;
}

// bool all = 2;
inline void Proto_RedirectInfo::clear_all() {
  all_ = false;
}
inline bool Proto_RedirectInfo::all() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_RedirectInfo.all)
  return all_;
}
inline void Proto_RedirectInfo::set_all(bool value) {
  
  all_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_RedirectInfo.all)
}

// -------------------------------------------------------------------

// Proto_FramePkg

// int32 module_id = 1;
inline void Proto_FramePkg::clear_module_id() {
  module_id_ = 0;
}
inline ::google::protobuf::int32 Proto_FramePkg::module_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.module_id)
  return module_id_;
}
inline void Proto_FramePkg::set_module_id(::google::protobuf::int32 value) {
  
  module_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_FramePkg.module_id)
}

// int32 msg_id = 2;
inline void Proto_FramePkg::clear_msg_id() {
  msg_id_ = 0;
}
inline ::google::protobuf::int32 Proto_FramePkg::msg_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.msg_id)
  return msg_id_;
}
inline void Proto_FramePkg::set_msg_id(::google::protobuf::int32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_FramePkg.msg_id)
}

// bytes msg_data = 3;
inline void Proto_FramePkg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_FramePkg::msg_data() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.msg_data)
  return msg_data_.GetNoArena();
}
inline void Proto_FramePkg::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_FramePkg.msg_data)
}
#if LANG_CXX11
inline void Proto_FramePkg::set_msg_data(::std::string&& value) {
  
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_FramePkg.msg_data)
}
#endif
inline void Proto_FramePkg::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_FramePkg.msg_data)
}
inline void Proto_FramePkg::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_FramePkg.msg_data)
}
inline ::std::string* Proto_FramePkg::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_FramePkg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_FramePkg::release_msg_data() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_FramePkg.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_FramePkg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_FramePkg.msg_data)
}

// .NFrame.Proto_DispInfo disp_info = 4;
inline bool Proto_FramePkg::has_disp_info() const {
  return this != internal_default_instance() && disp_info_ != NULL;
}
inline void Proto_FramePkg::clear_disp_info() {
  if (GetArenaNoVirtual() == NULL && disp_info_ != NULL) {
    delete disp_info_;
  }
  disp_info_ = NULL;
}
inline const ::NFrame::Proto_DispInfo& Proto_FramePkg::_internal_disp_info() const {
  return *disp_info_;
}
inline const ::NFrame::Proto_DispInfo& Proto_FramePkg::disp_info() const {
  const ::NFrame::Proto_DispInfo* p = disp_info_;
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.disp_info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::Proto_DispInfo*>(
      &::NFrame::_Proto_DispInfo_default_instance_);
}
inline ::NFrame::Proto_DispInfo* Proto_FramePkg::release_disp_info() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_FramePkg.disp_info)
  
  ::NFrame::Proto_DispInfo* temp = disp_info_;
  disp_info_ = NULL;
  return temp;
}
inline ::NFrame::Proto_DispInfo* Proto_FramePkg::mutable_disp_info() {
  
  if (disp_info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::Proto_DispInfo>(GetArenaNoVirtual());
    disp_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_FramePkg.disp_info)
  return disp_info_;
}
inline void Proto_FramePkg::set_allocated_disp_info(::NFrame::Proto_DispInfo* disp_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete disp_info_;
  }
  if (disp_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      disp_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disp_info, submessage_arena);
    }
    
  } else {
    
  }
  disp_info_ = disp_info;
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_FramePkg.disp_info)
}

// .NFrame.Proto_TransInfo trans_info = 5;
inline bool Proto_FramePkg::has_trans_info() const {
  return this != internal_default_instance() && trans_info_ != NULL;
}
inline void Proto_FramePkg::clear_trans_info() {
  if (GetArenaNoVirtual() == NULL && trans_info_ != NULL) {
    delete trans_info_;
  }
  trans_info_ = NULL;
}
inline const ::NFrame::Proto_TransInfo& Proto_FramePkg::_internal_trans_info() const {
  return *trans_info_;
}
inline const ::NFrame::Proto_TransInfo& Proto_FramePkg::trans_info() const {
  const ::NFrame::Proto_TransInfo* p = trans_info_;
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.trans_info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::Proto_TransInfo*>(
      &::NFrame::_Proto_TransInfo_default_instance_);
}
inline ::NFrame::Proto_TransInfo* Proto_FramePkg::release_trans_info() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_FramePkg.trans_info)
  
  ::NFrame::Proto_TransInfo* temp = trans_info_;
  trans_info_ = NULL;
  return temp;
}
inline ::NFrame::Proto_TransInfo* Proto_FramePkg::mutable_trans_info() {
  
  if (trans_info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::Proto_TransInfo>(GetArenaNoVirtual());
    trans_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_FramePkg.trans_info)
  return trans_info_;
}
inline void Proto_FramePkg::set_allocated_trans_info(::NFrame::Proto_TransInfo* trans_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trans_info_;
  }
  if (trans_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trans_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trans_info, submessage_arena);
    }
    
  } else {
    
  }
  trans_info_ = trans_info;
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_FramePkg.trans_info)
}

// .NFrame.Proto_StoreInfo store_info = 6;
inline bool Proto_FramePkg::has_store_info() const {
  return this != internal_default_instance() && store_info_ != NULL;
}
inline void Proto_FramePkg::clear_store_info() {
  if (GetArenaNoVirtual() == NULL && store_info_ != NULL) {
    delete store_info_;
  }
  store_info_ = NULL;
}
inline const ::NFrame::Proto_StoreInfo& Proto_FramePkg::_internal_store_info() const {
  return *store_info_;
}
inline const ::NFrame::Proto_StoreInfo& Proto_FramePkg::store_info() const {
  const ::NFrame::Proto_StoreInfo* p = store_info_;
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.store_info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::Proto_StoreInfo*>(
      &::NFrame::_Proto_StoreInfo_default_instance_);
}
inline ::NFrame::Proto_StoreInfo* Proto_FramePkg::release_store_info() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_FramePkg.store_info)
  
  ::NFrame::Proto_StoreInfo* temp = store_info_;
  store_info_ = NULL;
  return temp;
}
inline ::NFrame::Proto_StoreInfo* Proto_FramePkg::mutable_store_info() {
  
  if (store_info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::Proto_StoreInfo>(GetArenaNoVirtual());
    store_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_FramePkg.store_info)
  return store_info_;
}
inline void Proto_FramePkg::set_allocated_store_info(::NFrame::Proto_StoreInfo* store_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete store_info_;
  }
  if (store_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      store_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, store_info, submessage_arena);
    }
    
  } else {
    
  }
  store_info_ = store_info;
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_FramePkg.store_info)
}

// .NFrame.Proto_EventInfo event_info = 7;
inline bool Proto_FramePkg::has_event_info() const {
  return this != internal_default_instance() && event_info_ != NULL;
}
inline void Proto_FramePkg::clear_event_info() {
  if (GetArenaNoVirtual() == NULL && event_info_ != NULL) {
    delete event_info_;
  }
  event_info_ = NULL;
}
inline const ::NFrame::Proto_EventInfo& Proto_FramePkg::_internal_event_info() const {
  return *event_info_;
}
inline const ::NFrame::Proto_EventInfo& Proto_FramePkg::event_info() const {
  const ::NFrame::Proto_EventInfo* p = event_info_;
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.event_info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::Proto_EventInfo*>(
      &::NFrame::_Proto_EventInfo_default_instance_);
}
inline ::NFrame::Proto_EventInfo* Proto_FramePkg::release_event_info() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_FramePkg.event_info)
  
  ::NFrame::Proto_EventInfo* temp = event_info_;
  event_info_ = NULL;
  return temp;
}
inline ::NFrame::Proto_EventInfo* Proto_FramePkg::mutable_event_info() {
  
  if (event_info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::Proto_EventInfo>(GetArenaNoVirtual());
    event_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_FramePkg.event_info)
  return event_info_;
}
inline void Proto_FramePkg::set_allocated_event_info(::NFrame::Proto_EventInfo* event_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_info_;
  }
  if (event_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_info, submessage_arena);
    }
    
  } else {
    
  }
  event_info_ = event_info;
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_FramePkg.event_info)
}

// .NFrame.Proto_RedirectInfo redirect_info = 8;
inline bool Proto_FramePkg::has_redirect_info() const {
  return this != internal_default_instance() && redirect_info_ != NULL;
}
inline void Proto_FramePkg::clear_redirect_info() {
  if (GetArenaNoVirtual() == NULL && redirect_info_ != NULL) {
    delete redirect_info_;
  }
  redirect_info_ = NULL;
}
inline const ::NFrame::Proto_RedirectInfo& Proto_FramePkg::_internal_redirect_info() const {
  return *redirect_info_;
}
inline const ::NFrame::Proto_RedirectInfo& Proto_FramePkg::redirect_info() const {
  const ::NFrame::Proto_RedirectInfo* p = redirect_info_;
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.redirect_info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::Proto_RedirectInfo*>(
      &::NFrame::_Proto_RedirectInfo_default_instance_);
}
inline ::NFrame::Proto_RedirectInfo* Proto_FramePkg::release_redirect_info() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_FramePkg.redirect_info)
  
  ::NFrame::Proto_RedirectInfo* temp = redirect_info_;
  redirect_info_ = NULL;
  return temp;
}
inline ::NFrame::Proto_RedirectInfo* Proto_FramePkg::mutable_redirect_info() {
  
  if (redirect_info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::Proto_RedirectInfo>(GetArenaNoVirtual());
    redirect_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_FramePkg.redirect_info)
  return redirect_info_;
}
inline void Proto_FramePkg::set_allocated_redirect_info(::NFrame::Proto_RedirectInfo* redirect_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete redirect_info_;
  }
  if (redirect_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redirect_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redirect_info, submessage_arena);
    }
    
  } else {
    
  }
  redirect_info_ = redirect_info;
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_FramePkg.redirect_info)
}

// .NFrame.Proto_RpcInfo rpc_info = 9;
inline bool Proto_FramePkg::has_rpc_info() const {
  return this != internal_default_instance() && rpc_info_ != NULL;
}
inline void Proto_FramePkg::clear_rpc_info() {
  if (GetArenaNoVirtual() == NULL && rpc_info_ != NULL) {
    delete rpc_info_;
  }
  rpc_info_ = NULL;
}
inline const ::NFrame::Proto_RpcInfo& Proto_FramePkg::_internal_rpc_info() const {
  return *rpc_info_;
}
inline const ::NFrame::Proto_RpcInfo& Proto_FramePkg::rpc_info() const {
  const ::NFrame::Proto_RpcInfo* p = rpc_info_;
  // @@protoc_insertion_point(field_get:NFrame.Proto_FramePkg.rpc_info)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::Proto_RpcInfo*>(
      &::NFrame::_Proto_RpcInfo_default_instance_);
}
inline ::NFrame::Proto_RpcInfo* Proto_FramePkg::release_rpc_info() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_FramePkg.rpc_info)
  
  ::NFrame::Proto_RpcInfo* temp = rpc_info_;
  rpc_info_ = NULL;
  return temp;
}
inline ::NFrame::Proto_RpcInfo* Proto_FramePkg::mutable_rpc_info() {
  
  if (rpc_info_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::Proto_RpcInfo>(GetArenaNoVirtual());
    rpc_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_FramePkg.rpc_info)
  return rpc_info_;
}
inline void Proto_FramePkg::set_allocated_rpc_info(::NFrame::Proto_RpcInfo* rpc_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpc_info_;
  }
  if (rpc_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rpc_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpc_info, submessage_arena);
    }
    
  } else {
    
  }
  rpc_info_ = rpc_info;
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_FramePkg.rpc_info)
}

// -------------------------------------------------------------------

// ServerInfoReport

// uint32 bus_id = 1;
inline void ServerInfoReport::clear_bus_id() {
  bus_id_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::bus_id() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.bus_id)
  return bus_id_;
}
inline void ServerInfoReport::set_bus_id(::google::protobuf::uint32 value) {
  
  bus_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.bus_id)
}

// string server_id = 2;
inline void ServerInfoReport::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::server_id() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_id)
  return server_id_.GetNoArena();
}
inline void ServerInfoReport::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_id)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.server_id)
}
#endif
inline void ServerInfoReport::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.server_id)
}
inline void ServerInfoReport::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.server_id)
}
inline ::std::string* ServerInfoReport::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_id() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.server_id)
}

// uint32 server_type = 3;
inline void ServerInfoReport::clear_server_type() {
  server_type_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::server_type() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_type)
  return server_type_;
}
inline void ServerInfoReport::set_server_type(::google::protobuf::uint32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_type)
}

// string server_name = 4;
inline void ServerInfoReport::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::server_name() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_name)
  return server_name_.GetNoArena();
}
inline void ServerInfoReport::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_name)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.server_name)
}
#endif
inline void ServerInfoReport::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.server_name)
}
inline void ServerInfoReport::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.server_name)
}
inline ::std::string* ServerInfoReport::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_name() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.server_name)
}

// string url = 5;
inline void ServerInfoReport::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::url() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.url)
  return url_.GetNoArena();
}
inline void ServerInfoReport::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.url)
}
#if LANG_CXX11
inline void ServerInfoReport::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.url)
}
#endif
inline void ServerInfoReport::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.url)
}
inline void ServerInfoReport::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.url)
}
inline ::std::string* ServerInfoReport::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_url() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.url)
}

// string link_mode = 6;
inline void ServerInfoReport::clear_link_mode() {
  link_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::link_mode() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.link_mode)
  return link_mode_.GetNoArena();
}
inline void ServerInfoReport::set_link_mode(const ::std::string& value) {
  
  link_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.link_mode)
}
#if LANG_CXX11
inline void ServerInfoReport::set_link_mode(::std::string&& value) {
  
  link_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.link_mode)
}
#endif
inline void ServerInfoReport::set_link_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  link_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.link_mode)
}
inline void ServerInfoReport::set_link_mode(const char* value, size_t size) {
  
  link_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.link_mode)
}
inline ::std::string* ServerInfoReport::mutable_link_mode() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.link_mode)
  return link_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_link_mode() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.link_mode)
  
  return link_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_link_mode(::std::string* link_mode) {
  if (link_mode != NULL) {
    
  } else {
    
  }
  link_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_mode);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.link_mode)
}

// uint32 bus_length = 7;
inline void ServerInfoReport::clear_bus_length() {
  bus_length_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::bus_length() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.bus_length)
  return bus_length_;
}
inline void ServerInfoReport::set_bus_length(::google::protobuf::uint32 value) {
  
  bus_length_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.bus_length)
}

// string server_ip = 9;
inline void ServerInfoReport::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::server_ip() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_ip)
  return server_ip_.GetNoArena();
}
inline void ServerInfoReport::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_ip)
}
#if LANG_CXX11
inline void ServerInfoReport::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.server_ip)
}
#endif
inline void ServerInfoReport::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.server_ip)
}
inline void ServerInfoReport::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.server_ip)
}
inline ::std::string* ServerInfoReport::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_server_ip() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.server_ip)
}

// uint32 server_port = 10;
inline void ServerInfoReport::clear_server_port() {
  server_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::server_port() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_port)
  return server_port_;
}
inline void ServerInfoReport::set_server_port(::google::protobuf::uint32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_port)
}

// uint32 server_http_port = 11;
inline void ServerInfoReport::clear_server_http_port() {
  server_http_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::server_http_port() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_http_port)
  return server_http_port_;
}
inline void ServerInfoReport::set_server_http_port(::google::protobuf::uint32 value) {
  
  server_http_port_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_http_port)
}

// string external_server_ip = 12;
inline void ServerInfoReport::clear_external_server_ip() {
  external_server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::external_server_ip() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.external_server_ip)
  return external_server_ip_.GetNoArena();
}
inline void ServerInfoReport::set_external_server_ip(const ::std::string& value) {
  
  external_server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.external_server_ip)
}
#if LANG_CXX11
inline void ServerInfoReport::set_external_server_ip(::std::string&& value) {
  
  external_server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.external_server_ip)
}
#endif
inline void ServerInfoReport::set_external_server_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  external_server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.external_server_ip)
}
inline void ServerInfoReport::set_external_server_ip(const char* value, size_t size) {
  
  external_server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.external_server_ip)
}
inline ::std::string* ServerInfoReport::mutable_external_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.external_server_ip)
  return external_server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_external_server_ip() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.external_server_ip)
  
  return external_server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_external_server_ip(::std::string* external_server_ip) {
  if (external_server_ip != NULL) {
    
  } else {
    
  }
  external_server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_server_ip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.external_server_ip)
}

// uint32 external_server_port = 13;
inline void ServerInfoReport::clear_external_server_port() {
  external_server_port_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::external_server_port() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.external_server_port)
  return external_server_port_;
}
inline void ServerInfoReport::set_external_server_port(::google::protobuf::uint32 value) {
  
  external_server_port_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.external_server_port)
}

// bool is_cross_server = 14;
inline void ServerInfoReport::clear_is_cross_server() {
  is_cross_server_ = false;
}
inline bool ServerInfoReport::is_cross_server() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.is_cross_server)
  return is_cross_server_;
}
inline void ServerInfoReport::set_is_cross_server(bool value) {
  
  is_cross_server_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.is_cross_server)
}

// string route_svr = 15;
inline void ServerInfoReport::clear_route_svr() {
  route_svr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::route_svr() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.route_svr)
  return route_svr_.GetNoArena();
}
inline void ServerInfoReport::set_route_svr(const ::std::string& value) {
  
  route_svr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.route_svr)
}
#if LANG_CXX11
inline void ServerInfoReport::set_route_svr(::std::string&& value) {
  
  route_svr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.route_svr)
}
#endif
inline void ServerInfoReport::set_route_svr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  route_svr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.route_svr)
}
inline void ServerInfoReport::set_route_svr(const char* value, size_t size) {
  
  route_svr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.route_svr)
}
inline ::std::string* ServerInfoReport::mutable_route_svr() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.route_svr)
  return route_svr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_route_svr() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.route_svr)
  
  return route_svr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_route_svr(::std::string* route_svr) {
  if (route_svr != NULL) {
    
  } else {
    
  }
  route_svr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_svr);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.route_svr)
}

// uint32 server_max_online = 30;
inline void ServerInfoReport::clear_server_max_online() {
  server_max_online_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::server_max_online() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_max_online)
  return server_max_online_;
}
inline void ServerInfoReport::set_server_max_online(::google::protobuf::uint32 value) {
  
  server_max_online_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_max_online)
}

// uint32 server_cur_online = 31;
inline void ServerInfoReport::clear_server_cur_online() {
  server_cur_online_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::server_cur_online() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_cur_online)
  return server_cur_online_;
}
inline void ServerInfoReport::set_server_cur_online(::google::protobuf::uint32 value) {
  
  server_cur_online_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_cur_online)
}

// uint32 server_state = 32;
inline void ServerInfoReport::clear_server_state() {
  server_state_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::server_state() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.server_state)
  return server_state_;
}
inline void ServerInfoReport::set_server_state(::google::protobuf::uint32 value) {
  
  server_state_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.server_state)
}

// string system_info = 33;
inline void ServerInfoReport::clear_system_info() {
  system_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::system_info() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.system_info)
  return system_info_.GetNoArena();
}
inline void ServerInfoReport::set_system_info(const ::std::string& value) {
  
  system_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.system_info)
}
#if LANG_CXX11
inline void ServerInfoReport::set_system_info(::std::string&& value) {
  
  system_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.system_info)
}
#endif
inline void ServerInfoReport::set_system_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.system_info)
}
inline void ServerInfoReport::set_system_info(const char* value, size_t size) {
  
  system_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.system_info)
}
inline ::std::string* ServerInfoReport::mutable_system_info() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.system_info)
  return system_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_system_info() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.system_info)
  
  return system_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_system_info(::std::string* system_info) {
  if (system_info != NULL) {
    
  } else {
    
  }
  system_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system_info);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.system_info)
}

// uint64 total_mem = 34;
inline void ServerInfoReport::clear_total_mem() {
  total_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::total_mem() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.total_mem)
  return total_mem_;
}
inline void ServerInfoReport::set_total_mem(::google::protobuf::uint64 value) {
  
  total_mem_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.total_mem)
}

// uint64 free_mem = 35;
inline void ServerInfoReport::clear_free_mem() {
  free_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::free_mem() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.free_mem)
  return free_mem_;
}
inline void ServerInfoReport::set_free_mem(::google::protobuf::uint64 value) {
  
  free_mem_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.free_mem)
}

// uint64 used_mem = 36;
inline void ServerInfoReport::clear_used_mem() {
  used_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::used_mem() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.used_mem)
  return used_mem_;
}
inline void ServerInfoReport::set_used_mem(::google::protobuf::uint64 value) {
  
  used_mem_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.used_mem)
}

// double proc_cpu = 37;
inline void ServerInfoReport::clear_proc_cpu() {
  proc_cpu_ = 0;
}
inline double ServerInfoReport::proc_cpu() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.proc_cpu)
  return proc_cpu_;
}
inline void ServerInfoReport::set_proc_cpu(double value) {
  
  proc_cpu_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.proc_cpu)
}

// uint64 proc_mem = 38;
inline void ServerInfoReport::clear_proc_mem() {
  proc_mem_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::proc_mem() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.proc_mem)
  return proc_mem_;
}
inline void ServerInfoReport::set_proc_mem(::google::protobuf::uint64 value) {
  
  proc_mem_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.proc_mem)
}

// uint32 proc_thread = 39;
inline void ServerInfoReport::clear_proc_thread() {
  proc_thread_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::proc_thread() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.proc_thread)
  return proc_thread_;
}
inline void ServerInfoReport::set_proc_thread(::google::protobuf::uint32 value) {
  
  proc_thread_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.proc_thread)
}

// string proc_name = 40;
inline void ServerInfoReport::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::proc_name() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.proc_name)
  return proc_name_.GetNoArena();
}
inline void ServerInfoReport::set_proc_name(const ::std::string& value) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.proc_name)
}
#if LANG_CXX11
inline void ServerInfoReport::set_proc_name(::std::string&& value) {
  
  proc_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.proc_name)
}
#endif
inline void ServerInfoReport::set_proc_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.proc_name)
}
inline void ServerInfoReport::set_proc_name(const char* value, size_t size) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.proc_name)
}
inline ::std::string* ServerInfoReport::mutable_proc_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.proc_name)
  return proc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_proc_name() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.proc_name)
  
  return proc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_proc_name(::std::string* proc_name) {
  if (proc_name != NULL) {
    
  } else {
    
  }
  proc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.proc_name)
}

// string proc_cwd = 41;
inline void ServerInfoReport::clear_proc_cwd() {
  proc_cwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::proc_cwd() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.proc_cwd)
  return proc_cwd_.GetNoArena();
}
inline void ServerInfoReport::set_proc_cwd(const ::std::string& value) {
  
  proc_cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.proc_cwd)
}
#if LANG_CXX11
inline void ServerInfoReport::set_proc_cwd(::std::string&& value) {
  
  proc_cwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.proc_cwd)
}
#endif
inline void ServerInfoReport::set_proc_cwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proc_cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.proc_cwd)
}
inline void ServerInfoReport::set_proc_cwd(const char* value, size_t size) {
  
  proc_cwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.proc_cwd)
}
inline ::std::string* ServerInfoReport::mutable_proc_cwd() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.proc_cwd)
  return proc_cwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_proc_cwd() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.proc_cwd)
  
  return proc_cwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_proc_cwd(::std::string* proc_cwd) {
  if (proc_cwd != NULL) {
    
  } else {
    
  }
  proc_cwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_cwd);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.proc_cwd)
}

// uint32 proc_pid = 42;
inline void ServerInfoReport::clear_proc_pid() {
  proc_pid_ = 0u;
}
inline ::google::protobuf::uint32 ServerInfoReport::proc_pid() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.proc_pid)
  return proc_pid_;
}
inline void ServerInfoReport::set_proc_pid(::google::protobuf::uint32 value) {
  
  proc_pid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.proc_pid)
}

// string last_date = 43;
inline void ServerInfoReport::clear_last_date() {
  last_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::last_date() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.last_date)
  return last_date_.GetNoArena();
}
inline void ServerInfoReport::set_last_date(const ::std::string& value) {
  
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.last_date)
}
#if LANG_CXX11
inline void ServerInfoReport::set_last_date(::std::string&& value) {
  
  last_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.last_date)
}
#endif
inline void ServerInfoReport::set_last_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.last_date)
}
inline void ServerInfoReport::set_last_date(const char* value, size_t size) {
  
  last_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.last_date)
}
inline ::std::string* ServerInfoReport::mutable_last_date() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.last_date)
  return last_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_last_date() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.last_date)
  
  return last_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_last_date(::std::string* last_date) {
  if (last_date != NULL) {
    
  } else {
    
  }
  last_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_date);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.last_date)
}

// uint64 last_time = 44;
inline void ServerInfoReport::clear_last_time() {
  last_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ServerInfoReport::last_time() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.last_time)
  return last_time_;
}
inline void ServerInfoReport::set_last_time(::google::protobuf::uint64 value) {
  
  last_time_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.last_time)
}

// string contract_info = 45;
inline void ServerInfoReport::clear_contract_info() {
  contract_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::contract_info() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.contract_info)
  return contract_info_.GetNoArena();
}
inline void ServerInfoReport::set_contract_info(const ::std::string& value) {
  
  contract_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.contract_info)
}
#if LANG_CXX11
inline void ServerInfoReport::set_contract_info(::std::string&& value) {
  
  contract_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.contract_info)
}
#endif
inline void ServerInfoReport::set_contract_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contract_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.contract_info)
}
inline void ServerInfoReport::set_contract_info(const char* value, size_t size) {
  
  contract_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.contract_info)
}
inline ::std::string* ServerInfoReport::mutable_contract_info() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.contract_info)
  return contract_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_contract_info() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.contract_info)
  
  return contract_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_contract_info(::std::string* contract_info) {
  if (contract_info != NULL) {
    
  } else {
    
  }
  contract_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract_info);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.contract_info)
}

// string machine_addr = 46;
inline void ServerInfoReport::clear_machine_addr() {
  machine_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerInfoReport::machine_addr() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.machine_addr)
  return machine_addr_.GetNoArena();
}
inline void ServerInfoReport::set_machine_addr(const ::std::string& value) {
  
  machine_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.machine_addr)
}
#if LANG_CXX11
inline void ServerInfoReport::set_machine_addr(::std::string&& value) {
  
  machine_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ServerInfoReport.machine_addr)
}
#endif
inline void ServerInfoReport::set_machine_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.machine_addr)
}
inline void ServerInfoReport::set_machine_addr(const char* value, size_t size) {
  
  machine_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.machine_addr)
}
inline ::std::string* ServerInfoReport::mutable_machine_addr() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.machine_addr)
  return machine_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfoReport::release_machine_addr() {
  // @@protoc_insertion_point(field_release:NFrame.ServerInfoReport.machine_addr)
  
  return machine_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfoReport::set_allocated_machine_addr(::std::string* machine_addr) {
  if (machine_addr != NULL) {
    
  } else {
    
  }
  machine_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_addr);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ServerInfoReport.machine_addr)
}

// repeated string db_name_list = 47;
inline int ServerInfoReport::db_name_list_size() const {
  return db_name_list_.size();
}
inline void ServerInfoReport::clear_db_name_list() {
  db_name_list_.Clear();
}
inline const ::std::string& ServerInfoReport::db_name_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.db_name_list)
  return db_name_list_.Get(index);
}
inline ::std::string* ServerInfoReport::mutable_db_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReport.db_name_list)
  return db_name_list_.Mutable(index);
}
inline void ServerInfoReport::set_db_name_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.db_name_list)
  db_name_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerInfoReport::set_db_name_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.db_name_list)
  db_name_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerInfoReport::set_db_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  db_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.ServerInfoReport.db_name_list)
}
inline void ServerInfoReport::set_db_name_list(int index, const char* value, size_t size) {
  db_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.ServerInfoReport.db_name_list)
}
inline ::std::string* ServerInfoReport::add_db_name_list() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.ServerInfoReport.db_name_list)
  return db_name_list_.Add();
}
inline void ServerInfoReport::add_db_name_list(const ::std::string& value) {
  db_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.ServerInfoReport.db_name_list)
}
#if LANG_CXX11
inline void ServerInfoReport::add_db_name_list(::std::string&& value) {
  db_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.ServerInfoReport.db_name_list)
}
#endif
inline void ServerInfoReport::add_db_name_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  db_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.ServerInfoReport.db_name_list)
}
inline void ServerInfoReport::add_db_name_list(const char* value, size_t size) {
  db_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.ServerInfoReport.db_name_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerInfoReport::db_name_list() const {
  // @@protoc_insertion_point(field_list:NFrame.ServerInfoReport.db_name_list)
  return db_name_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerInfoReport::mutable_db_name_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.ServerInfoReport.db_name_list)
  return &db_name_list_;
}

// repeated uint32 msg_id = 48;
inline int ServerInfoReport::msg_id_size() const {
  return msg_id_.size();
}
inline void ServerInfoReport::clear_msg_id() {
  msg_id_.Clear();
}
inline ::google::protobuf::uint32 ServerInfoReport::msg_id(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.msg_id)
  return msg_id_.Get(index);
}
inline void ServerInfoReport::set_msg_id(int index, ::google::protobuf::uint32 value) {
  msg_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.msg_id)
}
inline void ServerInfoReport::add_msg_id(::google::protobuf::uint32 value) {
  msg_id_.Add(value);
  // @@protoc_insertion_point(field_add:NFrame.ServerInfoReport.msg_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServerInfoReport::msg_id() const {
  // @@protoc_insertion_point(field_list:NFrame.ServerInfoReport.msg_id)
  return msg_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServerInfoReport::mutable_msg_id() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.ServerInfoReport.msg_id)
  return &msg_id_;
}

// repeated uint64 map_id_list = 49;
inline int ServerInfoReport::map_id_list_size() const {
  return map_id_list_.size();
}
inline void ServerInfoReport::clear_map_id_list() {
  map_id_list_.Clear();
}
inline ::google::protobuf::uint64 ServerInfoReport::map_id_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReport.map_id_list)
  return map_id_list_.Get(index);
}
inline void ServerInfoReport::set_map_id_list(int index, ::google::protobuf::uint64 value) {
  map_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReport.map_id_list)
}
inline void ServerInfoReport::add_map_id_list(::google::protobuf::uint64 value) {
  map_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:NFrame.ServerInfoReport.map_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ServerInfoReport::map_id_list() const {
  // @@protoc_insertion_point(field_list:NFrame.ServerInfoReport.map_id_list)
  return map_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ServerInfoReport::mutable_map_id_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.ServerInfoReport.map_id_list)
  return &map_id_list_;
}

// -------------------------------------------------------------------

// ServerInfoReportList

// repeated .NFrame.ServerInfoReport server_list = 1;
inline int ServerInfoReportList::server_list_size() const {
  return server_list_.size();
}
inline void ServerInfoReportList::clear_server_list() {
  server_list_.Clear();
}
inline ::NFrame::ServerInfoReport* ServerInfoReportList::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.ServerInfoReportList.server_list)
  return server_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrame::ServerInfoReport >*
ServerInfoReportList::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.ServerInfoReportList.server_list)
  return &server_list_;
}
inline const ::NFrame::ServerInfoReport& ServerInfoReportList::server_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReportList.server_list)
  return server_list_.Get(index);
}
inline ::NFrame::ServerInfoReport* ServerInfoReportList::add_server_list() {
  // @@protoc_insertion_point(field_add:NFrame.ServerInfoReportList.server_list)
  return server_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrame::ServerInfoReport >&
ServerInfoReportList::server_list() const {
  // @@protoc_insertion_point(field_list:NFrame.ServerInfoReportList.server_list)
  return server_list_;
}

// -------------------------------------------------------------------

// ServerInfoReportListRespne

// int32 ret_code = 1;
inline void ServerInfoReportListRespne::clear_ret_code() {
  ret_code_ = 0;
}
inline ::google::protobuf::int32 ServerInfoReportListRespne::ret_code() const {
  // @@protoc_insertion_point(field_get:NFrame.ServerInfoReportListRespne.ret_code)
  return ret_code_;
}
inline void ServerInfoReportListRespne::set_ret_code(::google::protobuf::int32 value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ServerInfoReportListRespne.ret_code)
}

// -------------------------------------------------------------------

// ZkServerInfo

// string bus_url = 1;
inline void ZkServerInfo::clear_bus_url() {
  bus_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZkServerInfo::bus_url() const {
  // @@protoc_insertion_point(field_get:NFrame.ZkServerInfo.bus_url)
  return bus_url_.GetNoArena();
}
inline void ZkServerInfo::set_bus_url(const ::std::string& value) {
  
  bus_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ZkServerInfo.bus_url)
}
#if LANG_CXX11
inline void ZkServerInfo::set_bus_url(::std::string&& value) {
  
  bus_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ZkServerInfo.bus_url)
}
#endif
inline void ZkServerInfo::set_bus_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bus_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ZkServerInfo.bus_url)
}
inline void ZkServerInfo::set_bus_url(const char* value, size_t size) {
  
  bus_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ZkServerInfo.bus_url)
}
inline ::std::string* ZkServerInfo::mutable_bus_url() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ZkServerInfo.bus_url)
  return bus_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZkServerInfo::release_bus_url() {
  // @@protoc_insertion_point(field_release:NFrame.ZkServerInfo.bus_url)
  
  return bus_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZkServerInfo::set_allocated_bus_url(::std::string* bus_url) {
  if (bus_url != NULL) {
    
  } else {
    
  }
  bus_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bus_url);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ZkServerInfo.bus_url)
}

// string tcp_url = 2;
inline void ZkServerInfo::clear_tcp_url() {
  tcp_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZkServerInfo::tcp_url() const {
  // @@protoc_insertion_point(field_get:NFrame.ZkServerInfo.tcp_url)
  return tcp_url_.GetNoArena();
}
inline void ZkServerInfo::set_tcp_url(const ::std::string& value) {
  
  tcp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ZkServerInfo.tcp_url)
}
#if LANG_CXX11
inline void ZkServerInfo::set_tcp_url(::std::string&& value) {
  
  tcp_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ZkServerInfo.tcp_url)
}
#endif
inline void ZkServerInfo::set_tcp_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tcp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ZkServerInfo.tcp_url)
}
inline void ZkServerInfo::set_tcp_url(const char* value, size_t size) {
  
  tcp_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ZkServerInfo.tcp_url)
}
inline ::std::string* ZkServerInfo::mutable_tcp_url() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ZkServerInfo.tcp_url)
  return tcp_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZkServerInfo::release_tcp_url() {
  // @@protoc_insertion_point(field_release:NFrame.ZkServerInfo.tcp_url)
  
  return tcp_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZkServerInfo::set_allocated_tcp_url(::std::string* tcp_url) {
  if (tcp_url != NULL) {
    
  } else {
    
  }
  tcp_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tcp_url);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ZkServerInfo.tcp_url)
}

// -------------------------------------------------------------------

// DynLibFileInfo

// string file_md5 = 1;
inline void DynLibFileInfo::clear_file_md5() {
  file_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DynLibFileInfo::file_md5() const {
  // @@protoc_insertion_point(field_get:NFrame.DynLibFileInfo.file_md5)
  return file_md5_.GetNoArena();
}
inline void DynLibFileInfo::set_file_md5(const ::std::string& value) {
  
  file_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.DynLibFileInfo.file_md5)
}
#if LANG_CXX11
inline void DynLibFileInfo::set_file_md5(::std::string&& value) {
  
  file_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.DynLibFileInfo.file_md5)
}
#endif
inline void DynLibFileInfo::set_file_md5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.DynLibFileInfo.file_md5)
}
inline void DynLibFileInfo::set_file_md5(const char* value, size_t size) {
  
  file_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.DynLibFileInfo.file_md5)
}
inline ::std::string* DynLibFileInfo::mutable_file_md5() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.DynLibFileInfo.file_md5)
  return file_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DynLibFileInfo::release_file_md5() {
  // @@protoc_insertion_point(field_release:NFrame.DynLibFileInfo.file_md5)
  
  return file_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DynLibFileInfo::set_allocated_file_md5(::std::string* file_md5) {
  if (file_md5 != NULL) {
    
  } else {
    
  }
  file_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_md5);
  // @@protoc_insertion_point(field_set_allocated:NFrame.DynLibFileInfo.file_md5)
}

// int32 file_size = 2;
inline void DynLibFileInfo::clear_file_size() {
  file_size_ = 0;
}
inline ::google::protobuf::int32 DynLibFileInfo::file_size() const {
  // @@protoc_insertion_point(field_get:NFrame.DynLibFileInfo.file_size)
  return file_size_;
}
inline void DynLibFileInfo::set_file_size(::google::protobuf::int32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:NFrame.DynLibFileInfo.file_size)
}

// -------------------------------------------------------------------

// DynLibFileInfoArray

// repeated .NFrame.DynLibFileInfo file_list = 1;
inline int DynLibFileInfoArray::file_list_size() const {
  return file_list_.size();
}
inline void DynLibFileInfoArray::clear_file_list() {
  file_list_.Clear();
}
inline ::NFrame::DynLibFileInfo* DynLibFileInfoArray::mutable_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.DynLibFileInfoArray.file_list)
  return file_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrame::DynLibFileInfo >*
DynLibFileInfoArray::mutable_file_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.DynLibFileInfoArray.file_list)
  return &file_list_;
}
inline const ::NFrame::DynLibFileInfo& DynLibFileInfoArray::file_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.DynLibFileInfoArray.file_list)
  return file_list_.Get(index);
}
inline ::NFrame::DynLibFileInfo* DynLibFileInfoArray::add_file_list() {
  // @@protoc_insertion_point(field_add:NFrame.DynLibFileInfoArray.file_list)
  return file_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrame::DynLibFileInfo >&
DynLibFileInfoArray::file_list() const {
  // @@protoc_insertion_point(field_list:NFrame.DynLibFileInfoArray.file_list)
  return file_list_;
}

// -------------------------------------------------------------------

// Proto_KillAllServerNtf

// -------------------------------------------------------------------

// Proto_KillAllServerRsp

// int32 result = 1;
inline void Proto_KillAllServerRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Proto_KillAllServerRsp::result() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_KillAllServerRsp.result)
  return result_;
}
inline void Proto_KillAllServerRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_KillAllServerRsp.result)
}

// -------------------------------------------------------------------

// Proto_STSBroadPlayerMsgNotify

// repeated uint64 user_id = 1;
inline int Proto_STSBroadPlayerMsgNotify::user_id_size() const {
  return user_id_.size();
}
inline void Proto_STSBroadPlayerMsgNotify::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint64 Proto_STSBroadPlayerMsgNotify::user_id(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_STSBroadPlayerMsgNotify.user_id)
  return user_id_.Get(index);
}
inline void Proto_STSBroadPlayerMsgNotify::set_user_id(int index, ::google::protobuf::uint64 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_STSBroadPlayerMsgNotify.user_id)
}
inline void Proto_STSBroadPlayerMsgNotify::add_user_id(::google::protobuf::uint64 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:NFrame.Proto_STSBroadPlayerMsgNotify.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Proto_STSBroadPlayerMsgNotify::user_id() const {
  // @@protoc_insertion_point(field_list:NFrame.Proto_STSBroadPlayerMsgNotify.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Proto_STSBroadPlayerMsgNotify::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.Proto_STSBroadPlayerMsgNotify.user_id)
  return &user_id_;
}

// uint32 msg_id = 2;
inline void Proto_STSBroadPlayerMsgNotify::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 Proto_STSBroadPlayerMsgNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_STSBroadPlayerMsgNotify.msg_id)
  return msg_id_;
}
inline void Proto_STSBroadPlayerMsgNotify::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_STSBroadPlayerMsgNotify.msg_id)
}

// bytes msg_data = 3;
inline void Proto_STSBroadPlayerMsgNotify::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_STSBroadPlayerMsgNotify::msg_data() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
  return msg_data_.GetNoArena();
}
inline void Proto_STSBroadPlayerMsgNotify::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
}
#if LANG_CXX11
inline void Proto_STSBroadPlayerMsgNotify::set_msg_data(::std::string&& value) {
  
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
}
#endif
inline void Proto_STSBroadPlayerMsgNotify::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
}
inline void Proto_STSBroadPlayerMsgNotify::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
}
inline ::std::string* Proto_STSBroadPlayerMsgNotify::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_STSBroadPlayerMsgNotify::release_msg_data() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_STSBroadPlayerMsgNotify::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_STSBroadPlayerMsgNotify.msg_data)
}

// -------------------------------------------------------------------

// Proto_STWebMsgRspNotify

// uint64 request_id = 1;
inline void Proto_STWebMsgRspNotify::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Proto_STWebMsgRspNotify::request_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_STWebMsgRspNotify.request_id)
  return request_id_;
}
inline void Proto_STWebMsgRspNotify::set_request_id(::google::protobuf::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_STWebMsgRspNotify.request_id)
}

// int32 result = 2;
inline void Proto_STWebMsgRspNotify::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Proto_STWebMsgRspNotify::result() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_STWebMsgRspNotify.result)
  return result_;
}
inline void Proto_STWebMsgRspNotify::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_STWebMsgRspNotify.result)
}

// string err_msg = 3;
inline void Proto_STWebMsgRspNotify::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_STWebMsgRspNotify::err_msg() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_STWebMsgRspNotify.err_msg)
  return err_msg_.GetNoArena();
}
inline void Proto_STWebMsgRspNotify::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_STWebMsgRspNotify.err_msg)
}
#if LANG_CXX11
inline void Proto_STWebMsgRspNotify::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_STWebMsgRspNotify.err_msg)
}
#endif
inline void Proto_STWebMsgRspNotify::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_STWebMsgRspNotify.err_msg)
}
inline void Proto_STWebMsgRspNotify::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_STWebMsgRspNotify.err_msg)
}
inline ::std::string* Proto_STWebMsgRspNotify::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_STWebMsgRspNotify.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_STWebMsgRspNotify::release_err_msg() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_STWebMsgRspNotify.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_STWebMsgRspNotify::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_STWebMsgRspNotify.err_msg)
}

// -------------------------------------------------------------------

// NFEventNoneData

// int64 param1 = 1;
inline void NFEventNoneData::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NFEventNoneData::param1() const {
  // @@protoc_insertion_point(field_get:NFrame.NFEventNoneData.param1)
  return param1_;
}
inline void NFEventNoneData::set_param1(::google::protobuf::int64 value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:NFrame.NFEventNoneData.param1)
}

// int64 param2 = 2;
inline void NFEventNoneData::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NFEventNoneData::param2() const {
  // @@protoc_insertion_point(field_get:NFrame.NFEventNoneData.param2)
  return param2_;
}
inline void NFEventNoneData::set_param2(::google::protobuf::int64 value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:NFrame.NFEventNoneData.param2)
}

// int64 param3 = 3;
inline void NFEventNoneData::clear_param3() {
  param3_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NFEventNoneData::param3() const {
  // @@protoc_insertion_point(field_get:NFrame.NFEventNoneData.param3)
  return param3_;
}
inline void NFEventNoneData::set_param3(::google::protobuf::int64 value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:NFrame.NFEventNoneData.param3)
}

// int64 param4 = 4;
inline void NFEventNoneData::clear_param4() {
  param4_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NFEventNoneData::param4() const {
  // @@protoc_insertion_point(field_get:NFrame.NFEventNoneData.param4)
  return param4_;
}
inline void NFEventNoneData::set_param4(::google::protobuf::int64 value) {
  
  param4_ = value;
  // @@protoc_insertion_point(field_set:NFrame.NFEventNoneData.param4)
}

// int64 param5 = 5;
inline void NFEventNoneData::clear_param5() {
  param5_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NFEventNoneData::param5() const {
  // @@protoc_insertion_point(field_get:NFrame.NFEventNoneData.param5)
  return param5_;
}
inline void NFEventNoneData::set_param5(::google::protobuf::int64 value) {
  
  param5_ = value;
  // @@protoc_insertion_point(field_set:NFrame.NFEventNoneData.param5)
}

// -------------------------------------------------------------------

// NFEventScriptData

// string event_type = 1;
inline void NFEventScriptData::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NFEventScriptData::event_type() const {
  // @@protoc_insertion_point(field_get:NFrame.NFEventScriptData.event_type)
  return event_type_.GetNoArena();
}
inline void NFEventScriptData::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.NFEventScriptData.event_type)
}
#if LANG_CXX11
inline void NFEventScriptData::set_event_type(::std::string&& value) {
  
  event_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.NFEventScriptData.event_type)
}
#endif
inline void NFEventScriptData::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.NFEventScriptData.event_type)
}
inline void NFEventScriptData::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.NFEventScriptData.event_type)
}
inline ::std::string* NFEventScriptData::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.NFEventScriptData.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NFEventScriptData::release_event_type() {
  // @@protoc_insertion_point(field_release:NFrame.NFEventScriptData.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NFEventScriptData::set_allocated_event_type(::std::string* event_type) {
  if (event_type != NULL) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:NFrame.NFEventScriptData.event_type)
}

// string event_data = 2;
inline void NFEventScriptData::clear_event_data() {
  event_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NFEventScriptData::event_data() const {
  // @@protoc_insertion_point(field_get:NFrame.NFEventScriptData.event_data)
  return event_data_.GetNoArena();
}
inline void NFEventScriptData::set_event_data(const ::std::string& value) {
  
  event_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.NFEventScriptData.event_data)
}
#if LANG_CXX11
inline void NFEventScriptData::set_event_data(::std::string&& value) {
  
  event_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.NFEventScriptData.event_data)
}
#endif
inline void NFEventScriptData::set_event_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.NFEventScriptData.event_data)
}
inline void NFEventScriptData::set_event_data(const char* value, size_t size) {
  
  event_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.NFEventScriptData.event_data)
}
inline ::std::string* NFEventScriptData::mutable_event_data() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.NFEventScriptData.event_data)
  return event_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NFEventScriptData::release_event_data() {
  // @@protoc_insertion_point(field_release:NFrame.NFEventScriptData.event_data)
  
  return event_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NFEventScriptData::set_allocated_event_data(::std::string* event_data) {
  if (event_data != NULL) {
    
  } else {
    
  }
  event_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_data);
  // @@protoc_insertion_point(field_set_allocated:NFrame.NFEventScriptData.event_data)
}

// -------------------------------------------------------------------

// Proto_ServerDumpInfoNtf

// string dump_info = 1;
inline void Proto_ServerDumpInfoNtf::clear_dump_info() {
  dump_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_ServerDumpInfoNtf::dump_info() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_ServerDumpInfoNtf.dump_info)
  return dump_info_.GetNoArena();
}
inline void Proto_ServerDumpInfoNtf::set_dump_info(const ::std::string& value) {
  
  dump_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.Proto_ServerDumpInfoNtf.dump_info)
}
#if LANG_CXX11
inline void Proto_ServerDumpInfoNtf::set_dump_info(::std::string&& value) {
  
  dump_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.Proto_ServerDumpInfoNtf.dump_info)
}
#endif
inline void Proto_ServerDumpInfoNtf::set_dump_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dump_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.Proto_ServerDumpInfoNtf.dump_info)
}
inline void Proto_ServerDumpInfoNtf::set_dump_info(const char* value, size_t size) {
  
  dump_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.Proto_ServerDumpInfoNtf.dump_info)
}
inline ::std::string* Proto_ServerDumpInfoNtf::mutable_dump_info() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.Proto_ServerDumpInfoNtf.dump_info)
  return dump_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_ServerDumpInfoNtf::release_dump_info() {
  // @@protoc_insertion_point(field_release:NFrame.Proto_ServerDumpInfoNtf.dump_info)
  
  return dump_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_ServerDumpInfoNtf::set_allocated_dump_info(::std::string* dump_info) {
  if (dump_info != NULL) {
    
  } else {
    
  }
  dump_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dump_info);
  // @@protoc_insertion_point(field_set_allocated:NFrame.Proto_ServerDumpInfoNtf.dump_info)
}

// uint32 bus_id = 2;
inline void Proto_ServerDumpInfoNtf::clear_bus_id() {
  bus_id_ = 0u;
}
inline ::google::protobuf::uint32 Proto_ServerDumpInfoNtf::bus_id() const {
  // @@protoc_insertion_point(field_get:NFrame.Proto_ServerDumpInfoNtf.bus_id)
  return bus_id_;
}
inline void Proto_ServerDumpInfoNtf::set_bus_id(::google::protobuf::uint32 value) {
  
  bus_id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.Proto_ServerDumpInfoNtf.bus_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFrame

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFrame::FrameServerMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::FrameServerMsg>() {
  return ::NFrame::FrameServerMsg_descriptor();
}
template <> struct is_proto_enum< ::NFrame::PacketDispType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::PacketDispType>() {
  return ::NFrame::PacketDispType_descriptor();
}
template <> struct is_proto_enum< ::NFrame::EServerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::EServerState>() {
  return ::NFrame::EServerState_descriptor();
}
template <> struct is_proto_enum< ::NFrame::NFEventSrcType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::NFEventSrcType>() {
  return ::NFrame::NFEventSrcType_descriptor();
}
template <> struct is_proto_enum< ::NFrame::NFEventIdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::NFEventIdType>() {
  return ::NFrame::NFEventIdType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FrameMsg_2eproto
