/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9 */

#include <sstream>
#include "NFComm/NFObjCommon/NFShmMgr.h"
#include "FrameSqlData.nanopb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

storesvr_vk::storesvr_vk()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_vk::~storesvr_vk()
{
}

storesvr_vk::storesvr_vk(const storesvr_vk& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_vk& storesvr_vk::operator=(const storesvr_vk& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_vk::CopyData(const storesvr_vk& stArgsData)
{
    column_name = stArgsData.column_name;
    column_value = stArgsData.column_value;
    cmp_operator = stArgsData.cmp_operator;
    column_type = stArgsData.column_type;
    logic_operator = stArgsData.logic_operator;
}

int storesvr_vk::CreateInit()
{
    cmp_operator = _storesvr_cmp_operator_MIN;
    column_type = _storesvr_column_type_MIN;
    logic_operator = _storesvr_logic_operator_MIN;
	return 0;
}

int storesvr_vk::ResumeInit()
{
	return 0;
}

void storesvr_vk::Init()
{
    cmp_operator = _storesvr_cmp_operator_MIN;
    column_type = _storesvr_column_type_MIN;
    logic_operator = _storesvr_logic_operator_MIN;
}

bool storesvr_vk::FromPb(const NFrame::storesvr_vk& cc)
{
    column_name = cc.column_name();
    column_value = cc.column_value();
    cmp_operator = static_cast<storesvr_cmp_operator>(cc.cmp_operator());
    column_type = static_cast<storesvr_column_type>(cc.column_type());
    logic_operator = static_cast<storesvr_logic_operator>(cc.logic_operator());
    return true;
}

void storesvr_vk::ToPb(NFrame::storesvr_vk* cc) const
{
    cc->set_column_name(column_name);
    cc->set_column_value(column_value);
    cc->set_cmp_operator(static_cast<NFrame::storesvr_cmp_operator>(cmp_operator));
    cc->set_column_type(static_cast<NFrame::storesvr_column_type>(column_type));
    cc->set_logic_operator(static_cast<NFrame::storesvr_logic_operator>(logic_operator));
    return;
}

NFrame::storesvr_vk storesvr_vk::ToPb() const
{
    NFrame::storesvr_vk cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_vk::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "column_name:" << "\"" << column_name << "\"" << ", ";
    ss << "column_value:" << "\"" << column_value << "\"" << ", ";
    ss << "cmp_operator:" << cmp_operator << ", ";
    ss << "column_type:" << column_type << ", ";
    ss << "logic_operator:" << logic_operator;
    ss << "}";
    return ss.str();
}

storesvr_wherecond::storesvr_wherecond()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_wherecond::~storesvr_wherecond()
{
}

storesvr_wherecond::storesvr_wherecond(const storesvr_wherecond& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_wherecond& storesvr_wherecond::operator=(const storesvr_wherecond& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_wherecond::CopyData(const storesvr_wherecond& stArgsData)
{
    mod_key = stArgsData.mod_key;
    where_conds.clear();
    where_conds = stArgsData.where_conds;
    where_additional_conds = stArgsData.where_additional_conds;
    private_keys.clear();
    private_keys = stArgsData.private_keys;
}

int storesvr_wherecond::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_wherecond::ResumeInit()
{
	return 0;
}

void storesvr_wherecond::Init()
{
    mod_key = 0;
}

bool storesvr_wherecond::FromPb(const NFrame::storesvr_wherecond& cc)
{
    mod_key = cc.mod_key();
    where_conds.clear();
    for (int i = 0; i < cc.where_conds_size(); ++i)
    {
        storesvr_vk temp;
        if (!temp.FromPb(cc.where_conds(i)))
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("FromPb Failed, struct:storesvr_wherecond, field:where_conds, cur count:%d", cc.where_conds_size());
            return false;
        }
        where_conds.push_back(temp);
    }
    where_additional_conds = cc.where_additional_conds();
    private_keys.clear();
    for (int i = 0; i < cc.private_keys_size(); ++i)
    {
        private_keys.push_back(cc.private_keys(i));
    }
    return true;
}

void storesvr_wherecond::ToPb(NFrame::storesvr_wherecond* cc) const
{
    cc->set_mod_key(mod_key);
    cc->clear_where_conds();
    for (auto iter = where_conds.begin(); iter != where_conds.end(); ++iter)
    {
        iter->ToPb(cc->add_where_conds());
    }
    cc->set_where_additional_conds(where_additional_conds);
    cc->clear_private_keys();
    for (auto iter = private_keys.begin(); iter != private_keys.end(); ++iter)
    {
        cc->add_private_keys(*iter);
    }
    return;
}

NFrame::storesvr_wherecond storesvr_wherecond::ToPb() const
{
    NFrame::storesvr_wherecond cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_wherecond::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "mod_key:" << mod_key << ", ";
    ss << "where_conds(" << where_conds.size()<< "):[";
    for (auto iter = where_conds.begin(); iter != where_conds.end(); ++iter)
    {
        ss << iter->ShortDebugString();
    }
;
    ss << "where_additional_conds:" << "\"" << where_additional_conds << "\"" << ", ";
    ss << "private_keys(" << private_keys.size()<< "):[";
    for (auto iter = private_keys.begin(); iter != private_keys.end(); ++iter)
    {
        ss << "\"" << *iter << "\"";
    }
;
    ss << "}";
    return ss.str();
}

storesvr_baseinfo::storesvr_baseinfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_baseinfo::~storesvr_baseinfo()
{
}

storesvr_baseinfo::storesvr_baseinfo(const storesvr_baseinfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_baseinfo& storesvr_baseinfo::operator=(const storesvr_baseinfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_baseinfo::CopyData(const storesvr_baseinfo& stArgsData)
{
    dbname = stArgsData.dbname;
    tbname = stArgsData.tbname;
    clname = stArgsData.clname;
    sel_fields.clear();
    sel_fields = stArgsData.sel_fields;
    max_records = stArgsData.max_records;
    package_name = stArgsData.package_name;
}

int storesvr_baseinfo::CreateInit()
{
    max_records = 0;
	return 0;
}

int storesvr_baseinfo::ResumeInit()
{
	return 0;
}

void storesvr_baseinfo::Init()
{
    max_records = 0;
}

bool storesvr_baseinfo::FromPb(const NFrame::storesvr_baseinfo& cc)
{
    dbname = cc.dbname();
    tbname = cc.tbname();
    clname = cc.clname();
    sel_fields.clear();
    for (int i = 0; i < cc.sel_fields_size(); ++i)
    {
        sel_fields.push_back(cc.sel_fields(i));
    }
    max_records = cc.max_records();
    package_name = cc.package_name();
    return true;
}

void storesvr_baseinfo::ToPb(NFrame::storesvr_baseinfo* cc) const
{
    cc->set_dbname(dbname);
    cc->set_tbname(tbname);
    cc->set_clname(clname);
    cc->clear_sel_fields();
    for (auto iter = sel_fields.begin(); iter != sel_fields.end(); ++iter)
    {
        cc->add_sel_fields(*iter);
    }
    cc->set_max_records(max_records);
    cc->set_package_name(package_name);
    return;
}

NFrame::storesvr_baseinfo storesvr_baseinfo::ToPb() const
{
    NFrame::storesvr_baseinfo cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_baseinfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "dbname:" << "\"" << dbname << "\"" << ", ";
    ss << "tbname:" << "\"" << tbname << "\"" << ", ";
    ss << "clname:" << "\"" << clname << "\"" << ", ";
    ss << "sel_fields(" << sel_fields.size()<< "):[";
    for (auto iter = sel_fields.begin(); iter != sel_fields.end(); ++iter)
    {
        ss << "\"" << *iter << "\"";
    }
;
    ss << "max_records:" << max_records << ", ";
    ss << "package_name:" << "\"" << package_name << "\"";
    ss << "}";
    return ss.str();
}

storesvr_opres::storesvr_opres()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_opres::~storesvr_opres()
{
}

storesvr_opres::storesvr_opres(const storesvr_opres& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_opres& storesvr_opres::operator=(const storesvr_opres& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_opres::CopyData(const storesvr_opres& stArgsData)
{
    mod_key = stArgsData.mod_key;
    err_code = stArgsData.err_code;
    errmsg = stArgsData.errmsg;
}

int storesvr_opres::CreateInit()
{
    mod_key = 0;
    err_code = 0;
	return 0;
}

int storesvr_opres::ResumeInit()
{
	return 0;
}

void storesvr_opres::Init()
{
    mod_key = 0;
    err_code = 0;
}

bool storesvr_opres::FromPb(const NFrame::storesvr_opres& cc)
{
    mod_key = cc.mod_key();
    err_code = cc.err_code();
    errmsg = cc.errmsg();
    return true;
}

void storesvr_opres::ToPb(NFrame::storesvr_opres* cc) const
{
    cc->set_mod_key(mod_key);
    cc->set_err_code(err_code);
    cc->set_errmsg(errmsg);
    return;
}

NFrame::storesvr_opres storesvr_opres::ToPb() const
{
    NFrame::storesvr_opres cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_opres::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "mod_key:" << mod_key << ", ";
    ss << "err_code:" << err_code << ", ";
    ss << "errmsg:" << "\"" << errmsg << "\"";
    ss << "}";
    return ss.str();
}

storesvr_sel::storesvr_sel()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_sel::~storesvr_sel()
{
}

storesvr_sel::storesvr_sel(const storesvr_sel& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_sel& storesvr_sel::operator=(const storesvr_sel& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_sel::CopyData(const storesvr_sel& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    cond = stArgsData.cond;
}

int storesvr_sel::CreateInit()
{
	return 0;
}

int storesvr_sel::ResumeInit()
{
	return 0;
}

void storesvr_sel::Init()
{
    baseinfo.Init();
    cond.Init();
}

bool storesvr_sel::FromPb(const NFrame::storesvr_sel& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!cond.FromPb(cc.cond())) return false;
    return true;
}

void storesvr_sel::ToPb(NFrame::storesvr_sel* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cond.ToPb(cc->mutable_cond());
    return;
}

NFrame::storesvr_sel storesvr_sel::ToPb() const
{
    NFrame::storesvr_sel cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_sel::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "cond:" << cond.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_sel_res::storesvr_sel_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_sel_res::~storesvr_sel_res()
{
}

storesvr_sel_res::storesvr_sel_res(const storesvr_sel_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_sel_res& storesvr_sel_res::operator=(const storesvr_sel_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_sel_res::CopyData(const storesvr_sel_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
    is_lastbatch = stArgsData.is_lastbatch;
    row_count = stArgsData.row_count;
    record.clear();
    record = stArgsData.record;
}

int storesvr_sel_res::CreateInit()
{
    is_lastbatch = 0;
    row_count = 0;
	return 0;
}

int storesvr_sel_res::ResumeInit()
{
	return 0;
}

void storesvr_sel_res::Init()
{
    baseinfo.Init();
    opres.Init();
    is_lastbatch = 0;
    row_count = 0;
}

bool storesvr_sel_res::FromPb(const NFrame::storesvr_sel_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    is_lastbatch = cc.is_lastbatch();
    row_count = cc.row_count();
    record.clear();
    for (int i = 0; i < cc.record_size(); ++i)
    {
        record.push_back(cc.record(i));
    }
    return true;
}

void storesvr_sel_res::ToPb(NFrame::storesvr_sel_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    cc->set_is_lastbatch(is_lastbatch);
    cc->set_row_count(row_count);
    cc->clear_record();
    for (auto iter = record.begin(); iter != record.end(); ++iter)
    {
        cc->add_record(*iter);
    }
    return;
}

NFrame::storesvr_sel_res storesvr_sel_res::ToPb() const
{
    NFrame::storesvr_sel_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_sel_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString() << ", ";
    ss << "is_lastbatch:" << is_lastbatch << ", ";
    ss << "row_count:" << row_count << ", ";
    ss << "record(" << record.size()<< "):[";
    for (auto iter = record.begin(); iter != record.end(); ++iter)
    {
        ss << "(skip print BYTES)";
        break;
    }
;
    ss << "}";
    return ss.str();
}

storesvr_selobj::storesvr_selobj()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_selobj::~storesvr_selobj()
{
}

storesvr_selobj::storesvr_selobj(const storesvr_selobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_selobj& storesvr_selobj::operator=(const storesvr_selobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_selobj::CopyData(const storesvr_selobj& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record = stArgsData.record;
}

int storesvr_selobj::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_selobj::ResumeInit()
{
	return 0;
}

void storesvr_selobj::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_selobj::FromPb(const NFrame::storesvr_selobj& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record = cc.record();
    return true;
}

void storesvr_selobj::ToPb(NFrame::storesvr_selobj* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->set_record(record);
    return;
}

NFrame::storesvr_selobj storesvr_selobj::ToPb() const
{
    NFrame::storesvr_selobj cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_selobj::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_selobj_res::storesvr_selobj_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_selobj_res::~storesvr_selobj_res()
{
}

storesvr_selobj_res::storesvr_selobj_res(const storesvr_selobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_selobj_res& storesvr_selobj_res::operator=(const storesvr_selobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_selobj_res::CopyData(const storesvr_selobj_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
    record = stArgsData.record;
}

int storesvr_selobj_res::CreateInit()
{
	return 0;
}

int storesvr_selobj_res::ResumeInit()
{
	return 0;
}

void storesvr_selobj_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_selobj_res::FromPb(const NFrame::storesvr_selobj_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    record = cc.record();
    return true;
}

void storesvr_selobj_res::ToPb(NFrame::storesvr_selobj_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    cc->set_record(record);
    return;
}

NFrame::storesvr_selobj_res storesvr_selobj_res::ToPb() const
{
    NFrame::storesvr_selobj_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_selobj_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString() << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_insertobj::storesvr_insertobj()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_insertobj::~storesvr_insertobj()
{
}

storesvr_insertobj::storesvr_insertobj(const storesvr_insertobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_insertobj& storesvr_insertobj::operator=(const storesvr_insertobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_insertobj::CopyData(const storesvr_insertobj& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record = stArgsData.record;
}

int storesvr_insertobj::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_insertobj::ResumeInit()
{
	return 0;
}

void storesvr_insertobj::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_insertobj::FromPb(const NFrame::storesvr_insertobj& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record = cc.record();
    return true;
}

void storesvr_insertobj::ToPb(NFrame::storesvr_insertobj* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->set_record(record);
    return;
}

NFrame::storesvr_insertobj storesvr_insertobj::ToPb() const
{
    NFrame::storesvr_insertobj cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_insertobj::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_insertobj_res::storesvr_insertobj_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_insertobj_res::~storesvr_insertobj_res()
{
}

storesvr_insertobj_res::storesvr_insertobj_res(const storesvr_insertobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_insertobj_res& storesvr_insertobj_res::operator=(const storesvr_insertobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_insertobj_res::CopyData(const storesvr_insertobj_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_insertobj_res::CreateInit()
{
	return 0;
}

int storesvr_insertobj_res::ResumeInit()
{
	return 0;
}

void storesvr_insertobj_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_insertobj_res::FromPb(const NFrame::storesvr_insertobj_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_insertobj_res::ToPb(NFrame::storesvr_insertobj_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_insertobj_res storesvr_insertobj_res::ToPb() const
{
    NFrame::storesvr_insertobj_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_insertobj_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_insert::storesvr_insert()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_insert::~storesvr_insert()
{
}

storesvr_insert::storesvr_insert(const storesvr_insert& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_insert& storesvr_insert::operator=(const storesvr_insert& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_insert::CopyData(const storesvr_insert& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record.clear();
    record = stArgsData.record;
}

int storesvr_insert::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_insert::ResumeInit()
{
	return 0;
}

void storesvr_insert::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_insert::FromPb(const NFrame::storesvr_insert& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record.clear();
    for (int i = 0; i < cc.record_size(); ++i)
    {
        record.push_back(cc.record(i));
    }
    return true;
}

void storesvr_insert::ToPb(NFrame::storesvr_insert* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->clear_record();
    for (auto iter = record.begin(); iter != record.end(); ++iter)
    {
        cc->add_record(*iter);
    }
    return;
}

NFrame::storesvr_insert storesvr_insert::ToPb() const
{
    NFrame::storesvr_insert cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_insert::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record(" << record.size()<< "):[";
    for (auto iter = record.begin(); iter != record.end(); ++iter)
    {
        ss << "(skip print BYTES)";
        break;
    }
;
    ss << "}";
    return ss.str();
}

storesvr_insert_res::storesvr_insert_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_insert_res::~storesvr_insert_res()
{
}

storesvr_insert_res::storesvr_insert_res(const storesvr_insert_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_insert_res& storesvr_insert_res::operator=(const storesvr_insert_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_insert_res::CopyData(const storesvr_insert_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_insert_res::CreateInit()
{
	return 0;
}

int storesvr_insert_res::ResumeInit()
{
	return 0;
}

void storesvr_insert_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_insert_res::FromPb(const NFrame::storesvr_insert_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_insert_res::ToPb(NFrame::storesvr_insert_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_insert_res storesvr_insert_res::ToPb() const
{
    NFrame::storesvr_insert_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_insert_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_del::storesvr_del()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_del::~storesvr_del()
{
}

storesvr_del::storesvr_del(const storesvr_del& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_del& storesvr_del::operator=(const storesvr_del& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_del::CopyData(const storesvr_del& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    cond = stArgsData.cond;
}

int storesvr_del::CreateInit()
{
	return 0;
}

int storesvr_del::ResumeInit()
{
	return 0;
}

void storesvr_del::Init()
{
    baseinfo.Init();
    cond.Init();
}

bool storesvr_del::FromPb(const NFrame::storesvr_del& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!cond.FromPb(cc.cond())) return false;
    return true;
}

void storesvr_del::ToPb(NFrame::storesvr_del* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cond.ToPb(cc->mutable_cond());
    return;
}

NFrame::storesvr_del storesvr_del::ToPb() const
{
    NFrame::storesvr_del cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_del::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "cond:" << cond.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_del_res::storesvr_del_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_del_res::~storesvr_del_res()
{
}

storesvr_del_res::storesvr_del_res(const storesvr_del_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_del_res& storesvr_del_res::operator=(const storesvr_del_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_del_res::CopyData(const storesvr_del_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_del_res::CreateInit()
{
	return 0;
}

int storesvr_del_res::ResumeInit()
{
	return 0;
}

void storesvr_del_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_del_res::FromPb(const NFrame::storesvr_del_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_del_res::ToPb(NFrame::storesvr_del_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_del_res storesvr_del_res::ToPb() const
{
    NFrame::storesvr_del_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_del_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_delobj::storesvr_delobj()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_delobj::~storesvr_delobj()
{
}

storesvr_delobj::storesvr_delobj(const storesvr_delobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_delobj& storesvr_delobj::operator=(const storesvr_delobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_delobj::CopyData(const storesvr_delobj& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record = stArgsData.record;
}

int storesvr_delobj::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_delobj::ResumeInit()
{
	return 0;
}

void storesvr_delobj::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_delobj::FromPb(const NFrame::storesvr_delobj& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record = cc.record();
    return true;
}

void storesvr_delobj::ToPb(NFrame::storesvr_delobj* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->set_record(record);
    return;
}

NFrame::storesvr_delobj storesvr_delobj::ToPb() const
{
    NFrame::storesvr_delobj cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_delobj::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_delobj_res::storesvr_delobj_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_delobj_res::~storesvr_delobj_res()
{
}

storesvr_delobj_res::storesvr_delobj_res(const storesvr_delobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_delobj_res& storesvr_delobj_res::operator=(const storesvr_delobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_delobj_res::CopyData(const storesvr_delobj_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_delobj_res::CreateInit()
{
	return 0;
}

int storesvr_delobj_res::ResumeInit()
{
	return 0;
}

void storesvr_delobj_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_delobj_res::FromPb(const NFrame::storesvr_delobj_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_delobj_res::ToPb(NFrame::storesvr_delobj_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_delobj_res storesvr_delobj_res::ToPb() const
{
    NFrame::storesvr_delobj_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_delobj_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_mod::storesvr_mod()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_mod::~storesvr_mod()
{
}

storesvr_mod::storesvr_mod(const storesvr_mod& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_mod& storesvr_mod::operator=(const storesvr_mod& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_mod::CopyData(const storesvr_mod& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    cond = stArgsData.cond;
    record = stArgsData.record;
}

int storesvr_mod::CreateInit()
{
	return 0;
}

int storesvr_mod::ResumeInit()
{
	return 0;
}

void storesvr_mod::Init()
{
    baseinfo.Init();
    cond.Init();
}

bool storesvr_mod::FromPb(const NFrame::storesvr_mod& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!cond.FromPb(cc.cond())) return false;
    record = cc.record();
    return true;
}

void storesvr_mod::ToPb(NFrame::storesvr_mod* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cond.ToPb(cc->mutable_cond());
    cc->set_record(record);
    return;
}

NFrame::storesvr_mod storesvr_mod::ToPb() const
{
    NFrame::storesvr_mod cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_mod::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "cond:" << cond.ShortDebugString() << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_mod_res::storesvr_mod_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_mod_res::~storesvr_mod_res()
{
}

storesvr_mod_res::storesvr_mod_res(const storesvr_mod_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_mod_res& storesvr_mod_res::operator=(const storesvr_mod_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_mod_res::CopyData(const storesvr_mod_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_mod_res::CreateInit()
{
	return 0;
}

int storesvr_mod_res::ResumeInit()
{
	return 0;
}

void storesvr_mod_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_mod_res::FromPb(const NFrame::storesvr_mod_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_mod_res::ToPb(NFrame::storesvr_mod_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_mod_res storesvr_mod_res::ToPb() const
{
    NFrame::storesvr_mod_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_mod_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_modobj::storesvr_modobj()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_modobj::~storesvr_modobj()
{
}

storesvr_modobj::storesvr_modobj(const storesvr_modobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_modobj& storesvr_modobj::operator=(const storesvr_modobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_modobj::CopyData(const storesvr_modobj& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record = stArgsData.record;
}

int storesvr_modobj::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_modobj::ResumeInit()
{
	return 0;
}

void storesvr_modobj::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_modobj::FromPb(const NFrame::storesvr_modobj& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record = cc.record();
    return true;
}

void storesvr_modobj::ToPb(NFrame::storesvr_modobj* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->set_record(record);
    return;
}

NFrame::storesvr_modobj storesvr_modobj::ToPb() const
{
    NFrame::storesvr_modobj cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_modobj::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_modobj_res::storesvr_modobj_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_modobj_res::~storesvr_modobj_res()
{
}

storesvr_modobj_res::storesvr_modobj_res(const storesvr_modobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_modobj_res& storesvr_modobj_res::operator=(const storesvr_modobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_modobj_res::CopyData(const storesvr_modobj_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_modobj_res::CreateInit()
{
	return 0;
}

int storesvr_modobj_res::ResumeInit()
{
	return 0;
}

void storesvr_modobj_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_modobj_res::FromPb(const NFrame::storesvr_modobj_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_modobj_res::ToPb(NFrame::storesvr_modobj_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_modobj_res storesvr_modobj_res::ToPb() const
{
    NFrame::storesvr_modobj_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_modobj_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_update::storesvr_update()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_update::~storesvr_update()
{
}

storesvr_update::storesvr_update(const storesvr_update& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_update& storesvr_update::operator=(const storesvr_update& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_update::CopyData(const storesvr_update& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    cond = stArgsData.cond;
    record = stArgsData.record;
}

int storesvr_update::CreateInit()
{
	return 0;
}

int storesvr_update::ResumeInit()
{
	return 0;
}

void storesvr_update::Init()
{
    baseinfo.Init();
    cond.Init();
}

bool storesvr_update::FromPb(const NFrame::storesvr_update& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!cond.FromPb(cc.cond())) return false;
    record = cc.record();
    return true;
}

void storesvr_update::ToPb(NFrame::storesvr_update* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cond.ToPb(cc->mutable_cond());
    cc->set_record(record);
    return;
}

NFrame::storesvr_update storesvr_update::ToPb() const
{
    NFrame::storesvr_update cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_update::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "cond:" << cond.ShortDebugString() << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_update_res::storesvr_update_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_update_res::~storesvr_update_res()
{
}

storesvr_update_res::storesvr_update_res(const storesvr_update_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_update_res& storesvr_update_res::operator=(const storesvr_update_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_update_res::CopyData(const storesvr_update_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_update_res::CreateInit()
{
	return 0;
}

int storesvr_update_res::ResumeInit()
{
	return 0;
}

void storesvr_update_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_update_res::FromPb(const NFrame::storesvr_update_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_update_res::ToPb(NFrame::storesvr_update_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_update_res storesvr_update_res::ToPb() const
{
    NFrame::storesvr_update_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_update_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_updateobj::storesvr_updateobj()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_updateobj::~storesvr_updateobj()
{
}

storesvr_updateobj::storesvr_updateobj(const storesvr_updateobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_updateobj& storesvr_updateobj::operator=(const storesvr_updateobj& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_updateobj::CopyData(const storesvr_updateobj& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record = stArgsData.record;
}

int storesvr_updateobj::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_updateobj::ResumeInit()
{
	return 0;
}

void storesvr_updateobj::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_updateobj::FromPb(const NFrame::storesvr_updateobj& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record = cc.record();
    return true;
}

void storesvr_updateobj::ToPb(NFrame::storesvr_updateobj* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->set_record(record);
    return;
}

NFrame::storesvr_updateobj storesvr_updateobj::ToPb() const
{
    NFrame::storesvr_updateobj cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_updateobj::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_updateobj_res::storesvr_updateobj_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_updateobj_res::~storesvr_updateobj_res()
{
}

storesvr_updateobj_res::storesvr_updateobj_res(const storesvr_updateobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_updateobj_res& storesvr_updateobj_res::operator=(const storesvr_updateobj_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_updateobj_res::CopyData(const storesvr_updateobj_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
}

int storesvr_updateobj_res::CreateInit()
{
	return 0;
}

int storesvr_updateobj_res::ResumeInit()
{
	return 0;
}

void storesvr_updateobj_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_updateobj_res::FromPb(const NFrame::storesvr_updateobj_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    return true;
}

void storesvr_updateobj_res::ToPb(NFrame::storesvr_updateobj_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    return;
}

NFrame::storesvr_updateobj_res storesvr_updateobj_res::ToPb() const
{
    NFrame::storesvr_updateobj_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_updateobj_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString();
    ss << "}";
    return ss.str();
}

storesvr_execute::storesvr_execute()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_execute::~storesvr_execute()
{
}

storesvr_execute::storesvr_execute(const storesvr_execute& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_execute& storesvr_execute::operator=(const storesvr_execute& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_execute::CopyData(const storesvr_execute& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record = stArgsData.record;
}

int storesvr_execute::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_execute::ResumeInit()
{
	return 0;
}

void storesvr_execute::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_execute::FromPb(const NFrame::storesvr_execute& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record = cc.record();
    return true;
}

void storesvr_execute::ToPb(NFrame::storesvr_execute* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->set_record(record);
    return;
}

NFrame::storesvr_execute storesvr_execute::ToPb() const
{
    NFrame::storesvr_execute cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_execute::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_execute_res::storesvr_execute_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_execute_res::~storesvr_execute_res()
{
}

storesvr_execute_res::storesvr_execute_res(const storesvr_execute_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_execute_res& storesvr_execute_res::operator=(const storesvr_execute_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_execute_res::CopyData(const storesvr_execute_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
    record = stArgsData.record;
}

int storesvr_execute_res::CreateInit()
{
	return 0;
}

int storesvr_execute_res::ResumeInit()
{
	return 0;
}

void storesvr_execute_res::Init()
{
    baseinfo.Init();
    opres.Init();
}

bool storesvr_execute_res::FromPb(const NFrame::storesvr_execute_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    record = cc.record();
    return true;
}

void storesvr_execute_res::ToPb(NFrame::storesvr_execute_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    cc->set_record(record);
    return;
}

NFrame::storesvr_execute_res storesvr_execute_res::ToPb() const
{
    NFrame::storesvr_execute_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_execute_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString() << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_execute_more::storesvr_execute_more()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_execute_more::~storesvr_execute_more()
{
}

storesvr_execute_more::storesvr_execute_more(const storesvr_execute_more& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_execute_more& storesvr_execute_more::operator=(const storesvr_execute_more& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_execute_more::CopyData(const storesvr_execute_more& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    mod_key = stArgsData.mod_key;
    record = stArgsData.record;
}

int storesvr_execute_more::CreateInit()
{
    mod_key = 0;
	return 0;
}

int storesvr_execute_more::ResumeInit()
{
	return 0;
}

void storesvr_execute_more::Init()
{
    baseinfo.Init();
    mod_key = 0;
}

bool storesvr_execute_more::FromPb(const NFrame::storesvr_execute_more& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    mod_key = cc.mod_key();
    record = cc.record();
    return true;
}

void storesvr_execute_more::ToPb(NFrame::storesvr_execute_more* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    cc->set_mod_key(mod_key);
    cc->set_record(record);
    return;
}

NFrame::storesvr_execute_more storesvr_execute_more::ToPb() const
{
    NFrame::storesvr_execute_more cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_execute_more::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "mod_key:" << mod_key << ", ";
    ss << "record:" << "(skip print BYTES)";
    ss << "}";
    return ss.str();
}

storesvr_execute_more_res::storesvr_execute_more_res()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

storesvr_execute_more_res::~storesvr_execute_more_res()
{
}

storesvr_execute_more_res::storesvr_execute_more_res(const storesvr_execute_more_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

storesvr_execute_more_res& storesvr_execute_more_res::operator=(const storesvr_execute_more_res& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void storesvr_execute_more_res::CopyData(const storesvr_execute_more_res& stArgsData)
{
    baseinfo = stArgsData.baseinfo;
    opres = stArgsData.opres;
    is_lastbatch = stArgsData.is_lastbatch;
    row_count = stArgsData.row_count;
    record.clear();
    record = stArgsData.record;
}

int storesvr_execute_more_res::CreateInit()
{
    is_lastbatch = 0;
    row_count = 0;
	return 0;
}

int storesvr_execute_more_res::ResumeInit()
{
	return 0;
}

void storesvr_execute_more_res::Init()
{
    baseinfo.Init();
    opres.Init();
    is_lastbatch = 0;
    row_count = 0;
}

bool storesvr_execute_more_res::FromPb(const NFrame::storesvr_execute_more_res& cc)
{
    if (!baseinfo.FromPb(cc.baseinfo())) return false;
    if (!opres.FromPb(cc.opres())) return false;
    is_lastbatch = cc.is_lastbatch();
    row_count = cc.row_count();
    record.clear();
    for (int i = 0; i < cc.record_size(); ++i)
    {
        record.push_back(cc.record(i));
    }
    return true;
}

void storesvr_execute_more_res::ToPb(NFrame::storesvr_execute_more_res* cc) const
{
    baseinfo.ToPb(cc->mutable_baseinfo());
    opres.ToPb(cc->mutable_opres());
    cc->set_is_lastbatch(is_lastbatch);
    cc->set_row_count(row_count);
    cc->clear_record();
    for (auto iter = record.begin(); iter != record.end(); ++iter)
    {
        cc->add_record(*iter);
    }
    return;
}

NFrame::storesvr_execute_more_res storesvr_execute_more_res::ToPb() const
{
    NFrame::storesvr_execute_more_res cc;
    ToPb(&cc);
    return cc;
}

std::string storesvr_execute_more_res::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "baseinfo:" << baseinfo.ShortDebugString() << ", ";
    ss << "opres:" << opres.ShortDebugString() << ", ";
    ss << "is_lastbatch:" << is_lastbatch << ", ";
    ss << "row_count:" << row_count << ", ";
    ss << "record(" << record.size()<< "):[";
    for (auto iter = record.begin(); iter != record.end(); ++iter)
    {
        ss << "(skip print BYTES)";
        break;
    }
;
    ss << "}";
    return ss.str();
}








/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(storesvr_wherecond, where_conds[0]) < 65536 && pb_membersize(storesvr_sel, baseinfo) < 65536 && pb_membersize(storesvr_sel, cond) < 65536 && pb_membersize(storesvr_sel_res, baseinfo) < 65536 && pb_membersize(storesvr_sel_res, opres) < 65536 && pb_membersize(storesvr_selobj, baseinfo) < 65536 && pb_membersize(storesvr_selobj_res, baseinfo) < 65536 && pb_membersize(storesvr_selobj_res, opres) < 65536 && pb_membersize(storesvr_insertobj, baseinfo) < 65536 && pb_membersize(storesvr_insertobj_res, baseinfo) < 65536 && pb_membersize(storesvr_insertobj_res, opres) < 65536 && pb_membersize(storesvr_insert, baseinfo) < 65536 && pb_membersize(storesvr_insert_res, baseinfo) < 65536 && pb_membersize(storesvr_insert_res, opres) < 65536 && pb_membersize(storesvr_del, baseinfo) < 65536 && pb_membersize(storesvr_del, cond) < 65536 && pb_membersize(storesvr_del_res, baseinfo) < 65536 && pb_membersize(storesvr_del_res, opres) < 65536 && pb_membersize(storesvr_delobj, baseinfo) < 65536 && pb_membersize(storesvr_delobj_res, baseinfo) < 65536 && pb_membersize(storesvr_delobj_res, opres) < 65536 && pb_membersize(storesvr_mod, baseinfo) < 65536 && pb_membersize(storesvr_mod, cond) < 65536 && pb_membersize(storesvr_mod_res, baseinfo) < 65536 && pb_membersize(storesvr_mod_res, opres) < 65536 && pb_membersize(storesvr_modobj, baseinfo) < 65536 && pb_membersize(storesvr_modobj_res, baseinfo) < 65536 && pb_membersize(storesvr_modobj_res, opres) < 65536 && pb_membersize(storesvr_update, baseinfo) < 65536 && pb_membersize(storesvr_update, cond) < 65536 && pb_membersize(storesvr_update_res, baseinfo) < 65536 && pb_membersize(storesvr_update_res, opres) < 65536 && pb_membersize(storesvr_updateobj, baseinfo) < 65536 && pb_membersize(storesvr_updateobj_res, baseinfo) < 65536 && pb_membersize(storesvr_updateobj_res, opres) < 65536 && pb_membersize(storesvr_execute, baseinfo) < 65536 && pb_membersize(storesvr_execute_res, baseinfo) < 65536 && pb_membersize(storesvr_execute_res, opres) < 65536 && pb_membersize(storesvr_execute_more, baseinfo) < 65536 && pb_membersize(storesvr_execute_more_res, baseinfo) < 65536 && pb_membersize(storesvr_execute_more_res, opres) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_storesvr_vk_storesvr_wherecond_storesvr_baseinfo_storesvr_opres_storesvr_sel_storesvr_sel_res_storesvr_selobj_storesvr_selobj_res_storesvr_insertobj_storesvr_insertobj_res_storesvr_insert_storesvr_insert_res_storesvr_del_storesvr_del_res_storesvr_delobj_storesvr_delobj_res_storesvr_mod_storesvr_mod_res_storesvr_modobj_storesvr_modobj_res_storesvr_update_storesvr_update_res_storesvr_updateobj_storesvr_updateobj_res_storesvr_execute_storesvr_execute_res_storesvr_execute_more_storesvr_execute_more_res)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_16BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in the default
 * 8 bit descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(storesvr_wherecond, where_conds[0]) < 256 && pb_membersize(storesvr_sel, baseinfo) < 256 && pb_membersize(storesvr_sel, cond) < 256 && pb_membersize(storesvr_sel_res, baseinfo) < 256 && pb_membersize(storesvr_sel_res, opres) < 256 && pb_membersize(storesvr_selobj, baseinfo) < 256 && pb_membersize(storesvr_selobj_res, baseinfo) < 256 && pb_membersize(storesvr_selobj_res, opres) < 256 && pb_membersize(storesvr_insertobj, baseinfo) < 256 && pb_membersize(storesvr_insertobj_res, baseinfo) < 256 && pb_membersize(storesvr_insertobj_res, opres) < 256 && pb_membersize(storesvr_insert, baseinfo) < 256 && pb_membersize(storesvr_insert_res, baseinfo) < 256 && pb_membersize(storesvr_insert_res, opres) < 256 && pb_membersize(storesvr_del, baseinfo) < 256 && pb_membersize(storesvr_del, cond) < 256 && pb_membersize(storesvr_del_res, baseinfo) < 256 && pb_membersize(storesvr_del_res, opres) < 256 && pb_membersize(storesvr_delobj, baseinfo) < 256 && pb_membersize(storesvr_delobj_res, baseinfo) < 256 && pb_membersize(storesvr_delobj_res, opres) < 256 && pb_membersize(storesvr_mod, baseinfo) < 256 && pb_membersize(storesvr_mod, cond) < 256 && pb_membersize(storesvr_mod_res, baseinfo) < 256 && pb_membersize(storesvr_mod_res, opres) < 256 && pb_membersize(storesvr_modobj, baseinfo) < 256 && pb_membersize(storesvr_modobj_res, baseinfo) < 256 && pb_membersize(storesvr_modobj_res, opres) < 256 && pb_membersize(storesvr_update, baseinfo) < 256 && pb_membersize(storesvr_update, cond) < 256 && pb_membersize(storesvr_update_res, baseinfo) < 256 && pb_membersize(storesvr_update_res, opres) < 256 && pb_membersize(storesvr_updateobj, baseinfo) < 256 && pb_membersize(storesvr_updateobj_res, baseinfo) < 256 && pb_membersize(storesvr_updateobj_res, opres) < 256 && pb_membersize(storesvr_execute, baseinfo) < 256 && pb_membersize(storesvr_execute_res, baseinfo) < 256 && pb_membersize(storesvr_execute_res, opres) < 256 && pb_membersize(storesvr_execute_more, baseinfo) < 256 && pb_membersize(storesvr_execute_more_res, baseinfo) < 256 && pb_membersize(storesvr_execute_more_res, opres) < 256), YOU_MUST_DEFINE_PB_FIELD_16BIT_FOR_MESSAGES_storesvr_vk_storesvr_wherecond_storesvr_baseinfo_storesvr_opres_storesvr_sel_storesvr_sel_res_storesvr_selobj_storesvr_selobj_res_storesvr_insertobj_storesvr_insertobj_res_storesvr_insert_storesvr_insert_res_storesvr_del_storesvr_del_res_storesvr_delobj_storesvr_delobj_res_storesvr_mod_storesvr_mod_res_storesvr_modobj_storesvr_modobj_res_storesvr_update_storesvr_update_res_storesvr_updateobj_storesvr_updateobj_res_storesvr_execute_storesvr_execute_res_storesvr_execute_more_storesvr_execute_more_res)
#endif


/* @@protoc_insertion_point(eof) */
