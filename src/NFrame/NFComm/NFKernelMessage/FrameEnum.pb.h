// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameEnum.proto

#ifndef PROTOBUF_INCLUDED_FrameEnum_2eproto
#define PROTOBUF_INCLUDED_FrameEnum_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FrameEnum_2eproto 

namespace protobuf_FrameEnum_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FrameEnum_2eproto
namespace NFrame {
}  // namespace NFrame
namespace NFrame {

enum NF_SERVER_TYPE {
  NF_ST_NONE = 0,
  NF_ST_MASTER_SERVER = 1,
  NF_ST_ROUTE_SERVER = 2,
  NF_ST_ROUTE_AGENT_SERVER = 3,
  NF_ST_PROXY_SERVER = 4,
  NF_ST_PROXY_AGENT_SERVER = 5,
  NF_ST_STORE_SERVER = 6,
  NF_ST_LOGIN_SERVER = 7,
  NF_ST_WORLD_SERVER = 8,
  NF_ST_LOGIC_SERVER = 9,
  NF_ST_GAME_SERVER = 10,
  NF_ST_SNS_SERVER = 11,
  NF_ST_WEB_SERVER = 12,
  NF_ST_ONLINE_SERVER = 13,
  NF_ST_CENTER_SERVER = 14,
  NF_ST_MATCH_SERVER = 15,
  NF_ST_CITY_SERVER = 16,
  NF_ST_CHECK_SERVER = 17,
  NF_ST_NAVMESH_SERVER = 18,
  NF_ST_MAX = 19,
  NF_SERVER_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NF_SERVER_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NF_SERVER_TYPE_IsValid(int value);
const NF_SERVER_TYPE NF_SERVER_TYPE_MIN = NF_ST_NONE;
const NF_SERVER_TYPE NF_SERVER_TYPE_MAX = NF_ST_MAX;
const int NF_SERVER_TYPE_ARRAYSIZE = NF_SERVER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* NF_SERVER_TYPE_descriptor();
inline const ::std::string& NF_SERVER_TYPE_Name(NF_SERVER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    NF_SERVER_TYPE_descriptor(), value);
}
inline bool NF_SERVER_TYPE_Parse(
    const ::std::string& name, NF_SERVER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NF_SERVER_TYPE>(
    NF_SERVER_TYPE_descriptor(), name, value);
}
enum NF_SNS_SERVER_TYPE {
  NF_SNS_TYPE_NONE = 0,
  NF_SNS_TYPE_SNS = 1,
  NF_SNS_TYPE_FRIEND = 1,
  NF_SNS_TYPE_GUILD = 1,
  NF_SNS_TYPE_FAMILY = 1,
  NF_SNS_TYPE_GROUP = 1,
  NF_SNS_SERVER_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NF_SNS_SERVER_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NF_SNS_SERVER_TYPE_IsValid(int value);
const NF_SNS_SERVER_TYPE NF_SNS_SERVER_TYPE_MIN = NF_SNS_TYPE_NONE;
const NF_SNS_SERVER_TYPE NF_SNS_SERVER_TYPE_MAX = NF_SNS_TYPE_SNS;
const int NF_SNS_SERVER_TYPE_ARRAYSIZE = NF_SNS_SERVER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* NF_SNS_SERVER_TYPE_descriptor();
inline const ::std::string& NF_SNS_SERVER_TYPE_Name(NF_SNS_SERVER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    NF_SNS_SERVER_TYPE_descriptor(), value);
}
inline bool NF_SNS_SERVER_TYPE_Parse(
    const ::std::string& name, NF_SNS_SERVER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NF_SNS_SERVER_TYPE>(
    NF_SNS_SERVER_TYPE_descriptor(), name, value);
}
enum FrameGlobalEnum {
  SERVER_ENUM_NONE = 0,
  MAX_SQL_TABLE_NUM = 100,
  MAX_SERVER_PLUGINS_NUM = 20,
  FrameGlobalEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FrameGlobalEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FrameGlobalEnum_IsValid(int value);
const FrameGlobalEnum FrameGlobalEnum_MIN = SERVER_ENUM_NONE;
const FrameGlobalEnum FrameGlobalEnum_MAX = MAX_SQL_TABLE_NUM;
const int FrameGlobalEnum_ARRAYSIZE = FrameGlobalEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameGlobalEnum_descriptor();
inline const ::std::string& FrameGlobalEnum_Name(FrameGlobalEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameGlobalEnum_descriptor(), value);
}
inline bool FrameGlobalEnum_Parse(
    const ::std::string& name, FrameGlobalEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameGlobalEnum>(
    FrameGlobalEnum_descriptor(), name, value);
}
enum NF_LOG_LEVEL {
  NLL_TRACE_NORMAL = 0,
  NLL_DEBUG_NORMAL = 1,
  NLL_INFO_NORMAL = 2,
  NLL_WARING_NORMAL = 3,
  NLL_ERROR_NORMAL = 4,
  NLL_CRITICAL_NORMAL = 5,
  NLL_OFF_NORMAL = 6,
  NF_LOG_LEVEL_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NF_LOG_LEVEL_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NF_LOG_LEVEL_IsValid(int value);
const NF_LOG_LEVEL NF_LOG_LEVEL_MIN = NLL_TRACE_NORMAL;
const NF_LOG_LEVEL NF_LOG_LEVEL_MAX = NLL_OFF_NORMAL;
const int NF_LOG_LEVEL_ARRAYSIZE = NF_LOG_LEVEL_MAX + 1;

const ::google::protobuf::EnumDescriptor* NF_LOG_LEVEL_descriptor();
inline const ::std::string& NF_LOG_LEVEL_Name(NF_LOG_LEVEL value) {
  return ::google::protobuf::internal::NameOfEnum(
    NF_LOG_LEVEL_descriptor(), value);
}
inline bool NF_LOG_LEVEL_Parse(
    const ::std::string& name, NF_LOG_LEVEL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NF_LOG_LEVEL>(
    NF_LOG_LEVEL_descriptor(), name, value);
}
enum NF_LOG_ID {
  NF_LOG_DEFAULT = 0,
  NF_LOG_STATISTIC = 1,
  NF_LOG_BEHAVIOUR = 2,
  NF_LOG_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NF_LOG_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NF_LOG_ID_IsValid(int value);
const NF_LOG_ID NF_LOG_ID_MIN = NF_LOG_DEFAULT;
const NF_LOG_ID NF_LOG_ID_MAX = NF_LOG_BEHAVIOUR;
const int NF_LOG_ID_ARRAYSIZE = NF_LOG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NF_LOG_ID_descriptor();
inline const ::std::string& NF_LOG_ID_Name(NF_LOG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NF_LOG_ID_descriptor(), value);
}
inline bool NF_LOG_ID_Parse(
    const ::std::string& name, NF_LOG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NF_LOG_ID>(
    NF_LOG_ID_descriptor(), name, value);
}
enum FrameErrorCode {
  ERR_CODE_SVR_OK = 0,
  ERR_CODE_SVR_SYSTEM_ERROR = -1,
  ERR_CODE_SVR_SYSTEM_TIMEOUT = -2,
  ERR_CODE_SVR_SYSTEM_DATABASE_ERROR = -3,
  ERR_VALUE_CHECK_INVALID = -4,
  ERR_LOG_SYSTEM_SERVER_OBJ_NULL = -5,
  ERR_CODE_MSG_RPC_BASE = -100,
  ERR_CODE_RPC_INVALID_PARAM = -101,
  ERR_CODE_RPC_ENCODE_FAILED = -102,
  ERR_CODE_RPC_DECODE_FAILED = -103,
  ERR_CODE_RPC_RECV_EXCEPTION_MSG = -104,
  ERR_CODE_RPC_UNKNOWN_TYPE = -105,
  ERR_CODE_RPC_UNSUPPORT_FUNCTION_NAME = -106,
  ERR_CODE_RPC_SESSION_NOT_FOUND = -107,
  ERR_CODE_RPC_SEND_FAILED = -108,
  ERR_CODE_RPC_REQUEST_TIMEOUT = -109,
  ERR_CODE_RPC_FUNCTION_NAME_EXISTED = -110,
  ERR_CODE_RPC_SYSTEM_ERROR = -111,
  ERR_CODE_RPC_PROCESS_TIMEOUT = -112,
  ERR_CODE_RPC_MSG_FUNCTION_UNEXISTED = -113,
  ERR_CODE_RPC_SYSTEM_OVERLOAD_BASE = -114,
  ERR_CODE_RPC_MESSAGE_EXPIRED = -115,
  ERR_CODE_RPC_TASK_OVERLOAD = -116,
  ERR_CODE_RPC_CO_USED = -117,
  ERR_CODE_ZK_SYSTEMERROR = -200,
  ERR_CODE_ZK_RUNTIMEINCONSISTENCY = -201,
  ERR_CODE_ZK_DATAINCONSISTENCY = -203,
  ERR_CODE_ZK_CONNECTIONLOSS = -204,
  ERR_CODE_ZK_MARSHALLINGERROR = -205,
  ERR_CODE_ZK_UNIMPLEMENTED = -206,
  ERR_CODE_ZK_OPERATIONTIMEOUT = -207,
  ERR_CODE_ZK_BADARGUMENTS = -208,
  ERR_CODE_ZK_INVALIDSTATE = -209,
  ERR_CODE_kSM_DNSFAILURE = -210,
  ERR_CODE_ZK_APIERROR = -211,
  ERR_CODE_ZK_NONODE = -212,
  ERR_CODE_ZK_NOAUTH = -213,
  ERR_CODE_ZK_BADVERSION = -214,
  ERR_CODE_ZK_NOCHILDRENFOREPHEMERALS = -215,
  ERR_CODE_ZK_NODEEXISTS = -216,
  ERR_CODE_ZK_NOTEMPTY = -217,
  ERR_CODE_ZK_SESSIONEXPIRED = -218,
  ERR_CODE_ZK_INVALIDCALLBACK = -219,
  ERR_CODE_ZK_INVALIDACL = -220,
  ERR_CODE_ZK_AUTHFAILED = -221,
  ERR_CODE_ZK_CLOSING = -222,
  ERR_CODE_ZK_NOTHING = -223,
  ERR_CODE_ZK_SESSIONMOVED = -224,
  ERR_CODE_ZK_NOQUOTA = -225,
  ERR_CODE_ZK_SERVEROVERLOAD = -226,
  ERR_CODE_ZK_NOT_SET_APPKEY = -227,
  ERR_CODE_MESSAGE_BASE = -300,
  ERR_CODE_NAMING_BASE = -400,
  ERR_CODE_NAMING_NOT_SUPPORTTED = -401,
  ERR_CODE_NAMING_INVAILD_PARAM = -402,
  ERR_CODE_NAMING_URL_REGISTERED = -403,
  ERR_CODE_NAMING_URL_NOT_BINDED = -404,
  ERR_CODE_NAMING_REGISTER_FAILED = -405,
  ERR_CODE_NAMING_FACTORY_MAP_NULL = -406,
  ERR_CODE_NAMING_FACTORY_EXISTED = -407,
  ERR_CODE_ROUTER_BASE = -500,
  ERR_CODE_ROUTER_NOT_SUPPORTTED = -501,
  ERR_CODE_ROUTER_INVAILD_PARAM = -502,
  ERR_CODE_ROUTER_NONE_VALID_HANDLE = -503,
  ERR_CODE_ROUTER_FACTORY_MAP_NULL = -504,
  ERR_CODE_ROUTER_FACTORY_EXISTED = -505,
  ERR_CODE_ROUTER_DISPATCHFAILD_DESTSVR_NOTEXIST = -506,
  ERR_CODE_TIMER_BASE = -600,
  ERR_CODE_STORESVR_ERRCODE_BUSY = -701,
  ERR_CODE_STORESVR_ERRCODE_EINVAL = -702,
  ERR_CODE_STORESVR_ERRCODE_PARSEFROMSTRINGFAILED = -703,
  ERR_CODE_STORESVR_ERRCODE_DBNAME_OR_MODKEY_INVALID = -704,
  ERR_CODE_STORESVR_ERRCODE_TBNAME_INVALID = -705,
  ERR_CODE_STORESVR_ERRCODE_SELECT_EMPTY = -706,
  ERR_CODE_STORESVR_ERRCODE_SELECT_FILLMESSAGEBYRESULTFAILED = -707,
  ERR_CODE_STORESVR_ERRCODE_SELECTFAILED = -708,
  ERR_CODE_STORESVR_ERRCODE_INSERTFAILED = -711,
  ERR_CODE_STORESVR_ERRCODE_DELETEFAILED = -712,
  ERR_CODE_STORESVR_ERRCODE_DELETERECORDISNOTEXIST = -713,
  ERR_CODE_STORESVR_ERRCODE_UPDATERECORDISNOTEXIST = -714,
  ERR_CODE_STORESVR_ERRCODE_UPDATENOROWAFFECTED = -715,
  ERR_CODE_STORESVR_ERRCODE_UPDATEFAILED = -716,
  ERR_CODE_STORESVR_ERRCODE_UPDATEINSERTFAILED = -717,
  ERR_CODE_STORESVR_ERRCODE_UNKNOWN = -718,
  ERR_CODE_CO_INVALID_PARAM = -801,
  ERR_CODE_CO_NOT_IN_COROUTINE = -802,
  ERR_CODE_CO_NOT_RUNNING = -803,
  ERR_CODE_CO_START_TIMER_FAILED = -804,
  ERR_CODE_CO_TIMEOUT = -805,
  ERR_CODE_CO_CANNOT_RESUME_IN_COROUTINE = -806,
  ERR_CODE_CO_COROUTINE_UNEXIST = -807,
  ERR_CODE_CO_COROUTINE_STATUS_ERROR = -809,
  ERR_CODE_NFBUS_ERR_PARAMS = -901,
  ERR_CODE_NFBUS_ERR_INNER = -902,
  ERR_CODE_NFBUS_ERR_NO_DATA = -903,
  ERR_CODE_NFBUS_ERR_BUFF_LIMIT = -904,
  ERR_CODE_NFBUS_ERR_MALLOC = -905,
  ERR_CODE_NFBUS_ERR_SCHEME = -906,
  ERR_CODE_NFBUS_ERR_BAD_DATA = -907,
  ERR_CODE_NFBUS_ERR_INVALID_SIZE = -908,
  ERR_CODE_NFBUS_ERR_NOT_INITED = -909,
  ERR_CODE_NFBUS_ERR_ALREADY_INITED = -910,
  ERR_CODE_NFBUS_ERR_ACCESS_DENY = -911,
  ERR_CODE_NFBUS_ERR_UNPACK = -912,
  ERR_CODE_NFBUS_ERR_PACK = -913,
  ERR_CODE_NFBUS_ERR_NFNODE_NOT_FOUND = -920,
  ERR_CODE_NFBUS_ERR_NFNODE_INVALID_ID = -901,
  ERR_CODE_NFBUS_ERR_NFNODE_NO_CONNECTION = -903,
  ERR_CODE_NFBUS_ERR_NFNODE_FAULT_TOLERANT = -904,
  ERR_CODE_NFBUS_ERR_NFNODE_INVALID_MSG = -905,
  ERR_CODE_NFBUS_ERR_NFNODE_BUS_ID_NOT_MNFCH = -906,
  ERR_CODE_NFBUS_ERR_NFNODE_TTL = -907,
  ERR_CODE_NFBUS_ERR_NFNODE_MASK_CONFLICT = -908,
  ERR_CODE_NFBUS_ERR_NFNODE_ID_CONFLICT = -909,
  ERR_CODE_NFBUS_ERR_NFNODE_SRC_DST_IS_SAME = -910,
  ERR_CODE_NFBUS_ERR_CHANNEL_SIZE_TOO_SMALL = -911,
  ERR_CODE_NFBUS_ERR_CHANNEL_BUFFER_INVALID = -912,
  ERR_CODE_NFBUS_ERR_CHANNEL_ADDR_INVALID = -913,
  ERR_CODE_NFBUS_ERR_CHANNEL_CLOSING = -914,
  ERR_CODE_NFBUS_ERR_CHANNEL_NOT_SUPPORT = -915,
  ERR_CODE_NFBUS_ERR_CHANNEL_UNSUPPORTED_VERSION = -916,
  ERR_CODE_NFBUS_ERR_CHANNEL_ALIGN_SIZE_MISMATCH = -917,
  ERR_CODE_NFBUS_ERR_CHANNEL_ARCH_SIZE_T_MISMATCH = -918,
  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_NODE_NUM = -930,
  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_BUFF_SIZE = -940,
  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_WSEQ_ID = -950,
  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_CSEQ_ID = -960,
  ERR_CODE_NFBUS_ERR_NODE_TIMEOUT = -970,
  ERR_CODE_NFBUS_ERR_SHM_GET_FAILED = -980,
  ERR_CODE_NFBUS_ERR_SHM_NOT_FOUND = -981,
  ERR_CODE_NFBUS_ERR_SHM_CLOSE_FAILED = -982,
  ERR_CODE_NFBUS_ERR_SHM_PATH_INVALID = -983,
  ERR_CODE_NFBUS_ERR_SHM_MAP_FAILED = -984,
  ERR_CODE_NFBUS_ERR_SOCK_BIND_FAILED = -990,
  ERR_CODE_NFBUS_ERR_SOCK_LISTEN_FAILED = -991,
  ERR_CODE_NFBUS_ERR_SOCK_CONNECT_FAILED = -992,
  ERR_CODE_NFBUS_ERR_PIPE_BIND_FAILED = -1000,
  ERR_CODE_NFBUS_ERR_PIPE_LISTEN_FAILED = -1001,
  ERR_CODE_NFBUS_ERR_PIPE_CONNECT_FAILED = -1002,
  ERR_CODE_NFBUS_ERR_PIPE_ADDR_TOO_LONG = -1003,
  ERR_CODE_NFBUS_ERR_PIPE_REMOVE_FAILED = -1004,
  ERR_CODE_NFBUS_ERR_DNS_GETADDR_FAILED = -1010,
  ERR_CODE_NFBUS_ERR_CONNECTION_NOT_FOUND = -1011,
  ERR_CODE_NFBUS_ERR_WRITE_FAILED = -1012,
  ERR_CODE_NFBUS_ERR_READ_FAILED = -1013,
  ERR_CODE_NFBUS_ERR_EV_RUN = -1015,
  ERR_CODE_NFBUS_ERR_NO_LISTEN = -1015,
  ERR_CODE_NFBUS_ERR_CLOSING = -1016,
  FrameErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FrameErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FrameErrorCode_IsValid(int value);
const FrameErrorCode FrameErrorCode_MIN = ERR_CODE_NFBUS_ERR_CLOSING;
const FrameErrorCode FrameErrorCode_MAX = ERR_CODE_SVR_OK;
const int FrameErrorCode_ARRAYSIZE = FrameErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameErrorCode_descriptor();
inline const ::std::string& FrameErrorCode_Name(FrameErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameErrorCode_descriptor(), value);
}
inline bool FrameErrorCode_Parse(
    const ::std::string& name, FrameErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameErrorCode>(
    FrameErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace NFrame

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFrame::NF_SERVER_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::NF_SERVER_TYPE>() {
  return ::NFrame::NF_SERVER_TYPE_descriptor();
}
template <> struct is_proto_enum< ::NFrame::NF_SNS_SERVER_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::NF_SNS_SERVER_TYPE>() {
  return ::NFrame::NF_SNS_SERVER_TYPE_descriptor();
}
template <> struct is_proto_enum< ::NFrame::FrameGlobalEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::FrameGlobalEnum>() {
  return ::NFrame::FrameGlobalEnum_descriptor();
}
template <> struct is_proto_enum< ::NFrame::NF_LOG_LEVEL> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::NF_LOG_LEVEL>() {
  return ::NFrame::NF_LOG_LEVEL_descriptor();
}
template <> struct is_proto_enum< ::NFrame::NF_LOG_ID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::NF_LOG_ID>() {
  return ::NFrame::NF_LOG_ID_descriptor();
}
template <> struct is_proto_enum< ::NFrame::FrameErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFrame::FrameErrorCode>() {
  return ::NFrame::FrameErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FrameEnum_2eproto
