// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FrameComm.proto

#ifndef PROTOBUF_INCLUDED_FrameComm_2eproto
#define PROTOBUF_INCLUDED_FrameComm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
#include "FrameEnum.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_FrameComm_2eproto 

namespace protobuf_FrameComm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_FrameComm_2eproto
namespace NFrame {
class ExcelParseInfo;
class ExcelParseInfoDefaultTypeInternal;
extern ExcelParseInfoDefaultTypeInternal _ExcelParseInfo_default_instance_;
class ExcelPbInfo;
class ExcelPbInfoDefaultTypeInternal;
extern ExcelPbInfoDefaultTypeInternal _ExcelPbInfo_default_instance_;
class ExcelSheetInfo;
class ExcelSheetInfoDefaultTypeInternal;
extern ExcelSheetInfoDefaultTypeInternal _ExcelSheetInfo_default_instance_;
class pbAllServerConfig;
class pbAllServerConfigDefaultTypeInternal;
extern pbAllServerConfigDefaultTypeInternal _pbAllServerConfig_default_instance_;
class pbEncryptConfig;
class pbEncryptConfigDefaultTypeInternal;
extern pbEncryptConfigDefaultTypeInternal _pbEncryptConfig_default_instance_;
class pbMysqlConfig;
class pbMysqlConfigDefaultTypeInternal;
extern pbMysqlConfigDefaultTypeInternal _pbMysqlConfig_default_instance_;
class pbNFServerConfig;
class pbNFServerConfigDefaultTypeInternal;
extern pbNFServerConfigDefaultTypeInternal _pbNFServerConfig_default_instance_;
class pbPluginConfig;
class pbPluginConfigDefaultTypeInternal;
extern pbPluginConfigDefaultTypeInternal _pbPluginConfig_default_instance_;
class pbRedisConfig;
class pbRedisConfigDefaultTypeInternal;
extern pbRedisConfigDefaultTypeInternal _pbRedisConfig_default_instance_;
class pbRouteConfig;
class pbRouteConfigDefaultTypeInternal;
extern pbRouteConfigDefaultTypeInternal _pbRouteConfig_default_instance_;
class pbTableConfig;
class pbTableConfigDefaultTypeInternal;
extern pbTableConfigDefaultTypeInternal _pbTableConfig_default_instance_;
class tbServerMgr;
class tbServerMgrDefaultTypeInternal;
extern tbServerMgrDefaultTypeInternal _tbServerMgr_default_instance_;
class wxWorkRobotHttpPost;
class wxWorkRobotHttpPostDefaultTypeInternal;
extern wxWorkRobotHttpPostDefaultTypeInternal _wxWorkRobotHttpPost_default_instance_;
class wxWorkRobotText;
class wxWorkRobotTextDefaultTypeInternal;
extern wxWorkRobotTextDefaultTypeInternal _wxWorkRobotText_default_instance_;
}  // namespace NFrame
namespace google {
namespace protobuf {
template<> ::NFrame::ExcelParseInfo* Arena::CreateMaybeMessage<::NFrame::ExcelParseInfo>(Arena*);
template<> ::NFrame::ExcelPbInfo* Arena::CreateMaybeMessage<::NFrame::ExcelPbInfo>(Arena*);
template<> ::NFrame::ExcelSheetInfo* Arena::CreateMaybeMessage<::NFrame::ExcelSheetInfo>(Arena*);
template<> ::NFrame::pbAllServerConfig* Arena::CreateMaybeMessage<::NFrame::pbAllServerConfig>(Arena*);
template<> ::NFrame::pbEncryptConfig* Arena::CreateMaybeMessage<::NFrame::pbEncryptConfig>(Arena*);
template<> ::NFrame::pbMysqlConfig* Arena::CreateMaybeMessage<::NFrame::pbMysqlConfig>(Arena*);
template<> ::NFrame::pbNFServerConfig* Arena::CreateMaybeMessage<::NFrame::pbNFServerConfig>(Arena*);
template<> ::NFrame::pbPluginConfig* Arena::CreateMaybeMessage<::NFrame::pbPluginConfig>(Arena*);
template<> ::NFrame::pbRedisConfig* Arena::CreateMaybeMessage<::NFrame::pbRedisConfig>(Arena*);
template<> ::NFrame::pbRouteConfig* Arena::CreateMaybeMessage<::NFrame::pbRouteConfig>(Arena*);
template<> ::NFrame::pbTableConfig* Arena::CreateMaybeMessage<::NFrame::pbTableConfig>(Arena*);
template<> ::NFrame::tbServerMgr* Arena::CreateMaybeMessage<::NFrame::tbServerMgr>(Arena*);
template<> ::NFrame::wxWorkRobotHttpPost* Arena::CreateMaybeMessage<::NFrame::wxWorkRobotHttpPost>(Arena*);
template<> ::NFrame::wxWorkRobotText* Arena::CreateMaybeMessage<::NFrame::wxWorkRobotText>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFrame {

// ===================================================================

class tbServerMgr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.tbServerMgr) */ {
 public:
  tbServerMgr();
  virtual ~tbServerMgr();

  tbServerMgr(const tbServerMgr& from);

  inline tbServerMgr& operator=(const tbServerMgr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tbServerMgr(tbServerMgr&& from) noexcept
    : tbServerMgr() {
    *this = ::std::move(from);
  }

  inline tbServerMgr& operator=(tbServerMgr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tbServerMgr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tbServerMgr* internal_default_instance() {
    return reinterpret_cast<const tbServerMgr*>(
               &_tbServerMgr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(tbServerMgr* other);
  friend void swap(tbServerMgr& a, tbServerMgr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tbServerMgr* New() const final {
    return CreateMaybeMessage<tbServerMgr>(NULL);
  }

  tbServerMgr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<tbServerMgr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const tbServerMgr& from);
  void MergeFrom(const tbServerMgr& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(tbServerMgr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string contract = 2;
  void clear_contract();
  static const int kContractFieldNumber = 2;
  const ::std::string& contract() const;
  void set_contract(const ::std::string& value);
  #if LANG_CXX11
  void set_contract(::std::string&& value);
  #endif
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  ::std::string* mutable_contract();
  ::std::string* release_contract();
  void set_allocated_contract(::std::string* contract);

  // string machine_addr = 3;
  void clear_machine_addr();
  static const int kMachineAddrFieldNumber = 3;
  const ::std::string& machine_addr() const;
  void set_machine_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_addr(::std::string&& value);
  #endif
  void set_machine_addr(const char* value);
  void set_machine_addr(const char* value, size_t size);
  ::std::string* mutable_machine_addr();
  ::std::string* release_machine_addr();
  void set_allocated_machine_addr(::std::string* machine_addr);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string bus_name = 5;
  void clear_bus_name();
  static const int kBusNameFieldNumber = 5;
  const ::std::string& bus_name() const;
  void set_bus_name(const ::std::string& value);
  #if LANG_CXX11
  void set_bus_name(::std::string&& value);
  #endif
  void set_bus_name(const char* value);
  void set_bus_name(const char* value, size_t size);
  ::std::string* mutable_bus_name();
  ::std::string* release_bus_name();
  void set_allocated_bus_name(::std::string* bus_name);

  // string server_desc = 6;
  void clear_server_desc();
  static const int kServerDescFieldNumber = 6;
  const ::std::string& server_desc() const;
  void set_server_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_server_desc(::std::string&& value);
  #endif
  void set_server_desc(const char* value);
  void set_server_desc(const char* value, size_t size);
  ::std::string* mutable_server_desc();
  ::std::string* release_server_desc();
  void set_allocated_server_desc(::std::string* server_desc);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 last_login_time = 8;
  void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 8;
  ::google::protobuf::uint64 last_login_time() const;
  void set_last_login_time(::google::protobuf::uint64 value);

  // uint64 last_logout_time = 9;
  void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 9;
  ::google::protobuf::uint64 last_logout_time() const;
  void set_last_logout_time(::google::protobuf::uint64 value);

  // uint64 create_time = 10;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  ::google::protobuf::uint64 create_time() const;
  void set_create_time(::google::protobuf::uint64 value);

  // uint32 cur_count = 7;
  void clear_cur_count();
  static const int kCurCountFieldNumber = 7;
  ::google::protobuf::uint32 cur_count() const;
  void set_cur_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.tbServerMgr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr contract_;
  ::google::protobuf::internal::ArenaStringPtr machine_addr_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr bus_name_;
  ::google::protobuf::internal::ArenaStringPtr server_desc_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint64 last_logout_time_;
  ::google::protobuf::uint64 create_time_;
  ::google::protobuf::uint32 cur_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbMysqlConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbMysqlConfig) */ {
 public:
  pbMysqlConfig();
  virtual ~pbMysqlConfig();

  pbMysqlConfig(const pbMysqlConfig& from);

  inline pbMysqlConfig& operator=(const pbMysqlConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbMysqlConfig(pbMysqlConfig&& from) noexcept
    : pbMysqlConfig() {
    *this = ::std::move(from);
  }

  inline pbMysqlConfig& operator=(pbMysqlConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbMysqlConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbMysqlConfig* internal_default_instance() {
    return reinterpret_cast<const pbMysqlConfig*>(
               &_pbMysqlConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(pbMysqlConfig* other);
  friend void swap(pbMysqlConfig& a, pbMysqlConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbMysqlConfig* New() const final {
    return CreateMaybeMessage<pbMysqlConfig>(NULL);
  }

  pbMysqlConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbMysqlConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbMysqlConfig& from);
  void MergeFrom(const pbMysqlConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbMysqlConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFrame.pbTableConfig TBConfList = 6;
  int tbconflist_size() const;
  void clear_tbconflist();
  static const int kTBConfListFieldNumber = 6;
  ::NFrame::pbTableConfig* mutable_tbconflist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrame::pbTableConfig >*
      mutable_tbconflist();
  const ::NFrame::pbTableConfig& tbconflist(int index) const;
  ::NFrame::pbTableConfig* add_tbconflist();
  const ::google::protobuf::RepeatedPtrField< ::NFrame::pbTableConfig >&
      tbconflist() const;

  // string MysqlIp = 1;
  void clear_mysqlip();
  static const int kMysqlIpFieldNumber = 1;
  const ::std::string& mysqlip() const;
  void set_mysqlip(const ::std::string& value);
  #if LANG_CXX11
  void set_mysqlip(::std::string&& value);
  #endif
  void set_mysqlip(const char* value);
  void set_mysqlip(const char* value, size_t size);
  ::std::string* mutable_mysqlip();
  ::std::string* release_mysqlip();
  void set_allocated_mysqlip(::std::string* mysqlip);

  // string MysqlDbName = 3;
  void clear_mysqldbname();
  static const int kMysqlDbNameFieldNumber = 3;
  const ::std::string& mysqldbname() const;
  void set_mysqldbname(const ::std::string& value);
  #if LANG_CXX11
  void set_mysqldbname(::std::string&& value);
  #endif
  void set_mysqldbname(const char* value);
  void set_mysqldbname(const char* value, size_t size);
  ::std::string* mutable_mysqldbname();
  ::std::string* release_mysqldbname();
  void set_allocated_mysqldbname(::std::string* mysqldbname);

  // string MysqlUser = 4;
  void clear_mysqluser();
  static const int kMysqlUserFieldNumber = 4;
  const ::std::string& mysqluser() const;
  void set_mysqluser(const ::std::string& value);
  #if LANG_CXX11
  void set_mysqluser(::std::string&& value);
  #endif
  void set_mysqluser(const char* value);
  void set_mysqluser(const char* value, size_t size);
  ::std::string* mutable_mysqluser();
  ::std::string* release_mysqluser();
  void set_allocated_mysqluser(::std::string* mysqluser);

  // string MysqlPassword = 5;
  void clear_mysqlpassword();
  static const int kMysqlPasswordFieldNumber = 5;
  const ::std::string& mysqlpassword() const;
  void set_mysqlpassword(const ::std::string& value);
  #if LANG_CXX11
  void set_mysqlpassword(::std::string&& value);
  #endif
  void set_mysqlpassword(const char* value);
  void set_mysqlpassword(const char* value, size_t size);
  ::std::string* mutable_mysqlpassword();
  ::std::string* release_mysqlpassword();
  void set_allocated_mysqlpassword(::std::string* mysqlpassword);

  // uint32 MysqlPort = 2;
  void clear_mysqlport();
  static const int kMysqlPortFieldNumber = 2;
  ::google::protobuf::uint32 mysqlport() const;
  void set_mysqlport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.pbMysqlConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFrame::pbTableConfig > tbconflist_;
  ::google::protobuf::internal::ArenaStringPtr mysqlip_;
  ::google::protobuf::internal::ArenaStringPtr mysqldbname_;
  ::google::protobuf::internal::ArenaStringPtr mysqluser_;
  ::google::protobuf::internal::ArenaStringPtr mysqlpassword_;
  ::google::protobuf::uint32 mysqlport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbRedisConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbRedisConfig) */ {
 public:
  pbRedisConfig();
  virtual ~pbRedisConfig();

  pbRedisConfig(const pbRedisConfig& from);

  inline pbRedisConfig& operator=(const pbRedisConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbRedisConfig(pbRedisConfig&& from) noexcept
    : pbRedisConfig() {
    *this = ::std::move(from);
  }

  inline pbRedisConfig& operator=(pbRedisConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbRedisConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbRedisConfig* internal_default_instance() {
    return reinterpret_cast<const pbRedisConfig*>(
               &_pbRedisConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(pbRedisConfig* other);
  friend void swap(pbRedisConfig& a, pbRedisConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbRedisConfig* New() const final {
    return CreateMaybeMessage<pbRedisConfig>(NULL);
  }

  pbRedisConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbRedisConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbRedisConfig& from);
  void MergeFrom(const pbRedisConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbRedisConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string RedisIp = 1;
  void clear_redisip();
  static const int kRedisIpFieldNumber = 1;
  const ::std::string& redisip() const;
  void set_redisip(const ::std::string& value);
  #if LANG_CXX11
  void set_redisip(::std::string&& value);
  #endif
  void set_redisip(const char* value);
  void set_redisip(const char* value, size_t size);
  ::std::string* mutable_redisip();
  ::std::string* release_redisip();
  void set_allocated_redisip(::std::string* redisip);

  // string RedisPass = 3;
  void clear_redispass();
  static const int kRedisPassFieldNumber = 3;
  const ::std::string& redispass() const;
  void set_redispass(const ::std::string& value);
  #if LANG_CXX11
  void set_redispass(::std::string&& value);
  #endif
  void set_redispass(const char* value);
  void set_redispass(const char* value, size_t size);
  ::std::string* mutable_redispass();
  ::std::string* release_redispass();
  void set_allocated_redispass(::std::string* redispass);

  // uint32 RedisPort = 2;
  void clear_redisport();
  static const int kRedisPortFieldNumber = 2;
  ::google::protobuf::uint32 redisport() const;
  void set_redisport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.pbRedisConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr redisip_;
  ::google::protobuf::internal::ArenaStringPtr redispass_;
  ::google::protobuf::uint32 redisport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbRouteConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbRouteConfig) */ {
 public:
  pbRouteConfig();
  virtual ~pbRouteConfig();

  pbRouteConfig(const pbRouteConfig& from);

  inline pbRouteConfig& operator=(const pbRouteConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbRouteConfig(pbRouteConfig&& from) noexcept
    : pbRouteConfig() {
    *this = ::std::move(from);
  }

  inline pbRouteConfig& operator=(pbRouteConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbRouteConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbRouteConfig* internal_default_instance() {
    return reinterpret_cast<const pbRouteConfig*>(
               &_pbRouteConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(pbRouteConfig* other);
  friend void swap(pbRouteConfig& a, pbRouteConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbRouteConfig* New() const final {
    return CreateMaybeMessage<pbRouteConfig>(NULL);
  }

  pbRouteConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbRouteConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbRouteConfig& from);
  void MergeFrom(const pbRouteConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbRouteConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string MasterIp = 1;
  void clear_masterip();
  static const int kMasterIpFieldNumber = 1;
  const ::std::string& masterip() const;
  void set_masterip(const ::std::string& value);
  #if LANG_CXX11
  void set_masterip(::std::string&& value);
  #endif
  void set_masterip(const char* value);
  void set_masterip(const char* value, size_t size);
  ::std::string* mutable_masterip();
  ::std::string* release_masterip();
  void set_allocated_masterip(::std::string* masterip);

  // string NamingHost = 3;
  void clear_naminghost();
  static const int kNamingHostFieldNumber = 3;
  const ::std::string& naminghost() const;
  void set_naminghost(const ::std::string& value);
  #if LANG_CXX11
  void set_naminghost(::std::string&& value);
  #endif
  void set_naminghost(const char* value);
  void set_naminghost(const char* value, size_t size);
  ::std::string* mutable_naminghost();
  ::std::string* release_naminghost();
  void set_allocated_naminghost(::std::string* naminghost);

  // string NamingPath = 4;
  void clear_namingpath();
  static const int kNamingPathFieldNumber = 4;
  const ::std::string& namingpath() const;
  void set_namingpath(const ::std::string& value);
  #if LANG_CXX11
  void set_namingpath(::std::string&& value);
  #endif
  void set_namingpath(const char* value);
  void set_namingpath(const char* value, size_t size);
  ::std::string* mutable_namingpath();
  ::std::string* release_namingpath();
  void set_allocated_namingpath(::std::string* namingpath);

  // string RouteAgent = 5;
  void clear_routeagent();
  static const int kRouteAgentFieldNumber = 5;
  const ::std::string& routeagent() const;
  void set_routeagent(const ::std::string& value);
  #if LANG_CXX11
  void set_routeagent(::std::string&& value);
  #endif
  void set_routeagent(const char* value);
  void set_routeagent(const char* value, size_t size);
  ::std::string* mutable_routeagent();
  ::std::string* release_routeagent();
  void set_allocated_routeagent(::std::string* routeagent);

  // uint32 MasterPort = 2;
  void clear_masterport();
  static const int kMasterPortFieldNumber = 2;
  ::google::protobuf::uint32 masterport() const;
  void set_masterport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.pbRouteConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr masterip_;
  ::google::protobuf::internal::ArenaStringPtr naminghost_;
  ::google::protobuf::internal::ArenaStringPtr namingpath_;
  ::google::protobuf::internal::ArenaStringPtr routeagent_;
  ::google::protobuf::uint32 masterport_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbPluginConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbPluginConfig) */ {
 public:
  pbPluginConfig();
  virtual ~pbPluginConfig();

  pbPluginConfig(const pbPluginConfig& from);

  inline pbPluginConfig& operator=(const pbPluginConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbPluginConfig(pbPluginConfig&& from) noexcept
    : pbPluginConfig() {
    *this = ::std::move(from);
  }

  inline pbPluginConfig& operator=(pbPluginConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbPluginConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbPluginConfig* internal_default_instance() {
    return reinterpret_cast<const pbPluginConfig*>(
               &_pbPluginConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(pbPluginConfig* other);
  friend void swap(pbPluginConfig& a, pbPluginConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbPluginConfig* New() const final {
    return CreateMaybeMessage<pbPluginConfig>(NULL);
  }

  pbPluginConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbPluginConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbPluginConfig& from);
  void MergeFrom(const pbPluginConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbPluginConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string FramePlugins = 2;
  int frameplugins_size() const;
  void clear_frameplugins();
  static const int kFramePluginsFieldNumber = 2;
  const ::std::string& frameplugins(int index) const;
  ::std::string* mutable_frameplugins(int index);
  void set_frameplugins(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_frameplugins(int index, ::std::string&& value);
  #endif
  void set_frameplugins(int index, const char* value);
  void set_frameplugins(int index, const char* value, size_t size);
  ::std::string* add_frameplugins();
  void add_frameplugins(const ::std::string& value);
  #if LANG_CXX11
  void add_frameplugins(::std::string&& value);
  #endif
  void add_frameplugins(const char* value);
  void add_frameplugins(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& frameplugins() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_frameplugins();

  // repeated string ServerPlugins = 3;
  int serverplugins_size() const;
  void clear_serverplugins();
  static const int kServerPluginsFieldNumber = 3;
  const ::std::string& serverplugins(int index) const;
  ::std::string* mutable_serverplugins(int index);
  void set_serverplugins(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_serverplugins(int index, ::std::string&& value);
  #endif
  void set_serverplugins(int index, const char* value);
  void set_serverplugins(int index, const char* value, size_t size);
  ::std::string* add_serverplugins();
  void add_serverplugins(const ::std::string& value);
  #if LANG_CXX11
  void add_serverplugins(::std::string&& value);
  #endif
  void add_serverplugins(const char* value);
  void add_serverplugins(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& serverplugins() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serverplugins();

  // repeated string WorkPlugins = 4;
  int workplugins_size() const;
  void clear_workplugins();
  static const int kWorkPluginsFieldNumber = 4;
  const ::std::string& workplugins(int index) const;
  ::std::string* mutable_workplugins(int index);
  void set_workplugins(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_workplugins(int index, ::std::string&& value);
  #endif
  void set_workplugins(int index, const char* value);
  void set_workplugins(int index, const char* value, size_t size);
  ::std::string* add_workplugins();
  void add_workplugins(const ::std::string& value);
  #if LANG_CXX11
  void add_workplugins(::std::string&& value);
  #endif
  void add_workplugins(const char* value);
  void add_workplugins(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& workplugins() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_workplugins();

  // repeated .NFrame.pbAllServerConfig ServerList = 5;
  int serverlist_size() const;
  void clear_serverlist();
  static const int kServerListFieldNumber = 5;
  ::NFrame::pbAllServerConfig* mutable_serverlist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrame::pbAllServerConfig >*
      mutable_serverlist();
  const ::NFrame::pbAllServerConfig& serverlist(int index) const;
  ::NFrame::pbAllServerConfig* add_serverlist();
  const ::google::protobuf::RepeatedPtrField< ::NFrame::pbAllServerConfig >&
      serverlist() const;

  // uint32 ServerType = 1;
  void clear_servertype();
  static const int kServerTypeFieldNumber = 1;
  ::google::protobuf::uint32 servertype() const;
  void set_servertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.pbPluginConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> frameplugins_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serverplugins_;
  ::google::protobuf::RepeatedPtrField< ::std::string> workplugins_;
  ::google::protobuf::RepeatedPtrField< ::NFrame::pbAllServerConfig > serverlist_;
  ::google::protobuf::uint32 servertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbAllServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbAllServerConfig) */ {
 public:
  pbAllServerConfig();
  virtual ~pbAllServerConfig();

  pbAllServerConfig(const pbAllServerConfig& from);

  inline pbAllServerConfig& operator=(const pbAllServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbAllServerConfig(pbAllServerConfig&& from) noexcept
    : pbAllServerConfig() {
    *this = ::std::move(from);
  }

  inline pbAllServerConfig& operator=(pbAllServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbAllServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbAllServerConfig* internal_default_instance() {
    return reinterpret_cast<const pbAllServerConfig*>(
               &_pbAllServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(pbAllServerConfig* other);
  friend void swap(pbAllServerConfig& a, pbAllServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbAllServerConfig* New() const final {
    return CreateMaybeMessage<pbAllServerConfig>(NULL);
  }

  pbAllServerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbAllServerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbAllServerConfig& from);
  void MergeFrom(const pbAllServerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbAllServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Server = 1;
  void clear_server();
  static const int kServerFieldNumber = 1;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // uint32 ServerType = 3;
  void clear_servertype();
  static const int kServerTypeFieldNumber = 3;
  ::google::protobuf::uint32 servertype() const;
  void set_servertype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.pbAllServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::uint32 servertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbTableConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbTableConfig) */ {
 public:
  pbTableConfig();
  virtual ~pbTableConfig();

  pbTableConfig(const pbTableConfig& from);

  inline pbTableConfig& operator=(const pbTableConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbTableConfig(pbTableConfig&& from) noexcept
    : pbTableConfig() {
    *this = ::std::move(from);
  }

  inline pbTableConfig& operator=(pbTableConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbTableConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbTableConfig* internal_default_instance() {
    return reinterpret_cast<const pbTableConfig*>(
               &_pbTableConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(pbTableConfig* other);
  friend void swap(pbTableConfig& a, pbTableConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbTableConfig* New() const final {
    return CreateMaybeMessage<pbTableConfig>(NULL);
  }

  pbTableConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbTableConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbTableConfig& from);
  void MergeFrom(const pbTableConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbTableConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string TableName = 1;
  void clear_tablename();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& tablename() const;
  void set_tablename(const ::std::string& value);
  #if LANG_CXX11
  void set_tablename(::std::string&& value);
  #endif
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  ::std::string* mutable_tablename();
  ::std::string* release_tablename();
  void set_allocated_tablename(::std::string* tablename);

  // uint32 TableCount = 2;
  void clear_tablecount();
  static const int kTableCountFieldNumber = 2;
  ::google::protobuf::uint32 tablecount() const;
  void set_tablecount(::google::protobuf::uint32 value);

  // bool Cache = 3;
  void clear_cache();
  static const int kCacheFieldNumber = 3;
  bool cache() const;
  void set_cache(bool value);

  // @@protoc_insertion_point(class_scope:NFrame.pbTableConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tablename_;
  ::google::protobuf::uint32 tablecount_;
  bool cache_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbEncryptConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbEncryptConfig) */ {
 public:
  pbEncryptConfig();
  virtual ~pbEncryptConfig();

  pbEncryptConfig(const pbEncryptConfig& from);

  inline pbEncryptConfig& operator=(const pbEncryptConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbEncryptConfig(pbEncryptConfig&& from) noexcept
    : pbEncryptConfig() {
    *this = ::std::move(from);
  }

  inline pbEncryptConfig& operator=(pbEncryptConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbEncryptConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbEncryptConfig* internal_default_instance() {
    return reinterpret_cast<const pbEncryptConfig*>(
               &_pbEncryptConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(pbEncryptConfig* other);
  friend void swap(pbEncryptConfig& a, pbEncryptConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbEncryptConfig* New() const final {
    return CreateMaybeMessage<pbEncryptConfig>(NULL);
  }

  pbEncryptConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbEncryptConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbEncryptConfig& from);
  void MergeFrom(const pbEncryptConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbEncryptConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PublicAuthEncryptkey = 1;
  void clear_publicauthencryptkey();
  static const int kPublicAuthEncryptkeyFieldNumber = 1;
  const ::std::string& publicauthencryptkey() const;
  void set_publicauthencryptkey(const ::std::string& value);
  #if LANG_CXX11
  void set_publicauthencryptkey(::std::string&& value);
  #endif
  void set_publicauthencryptkey(const char* value);
  void set_publicauthencryptkey(const char* value, size_t size);
  ::std::string* mutable_publicauthencryptkey();
  ::std::string* release_publicauthencryptkey();
  void set_allocated_publicauthencryptkey(::std::string* publicauthencryptkey);

  // string EncrypyKey = 12;
  void clear_encrypykey();
  static const int kEncrypyKeyFieldNumber = 12;
  const ::std::string& encrypykey() const;
  void set_encrypykey(const ::std::string& value);
  #if LANG_CXX11
  void set_encrypykey(::std::string&& value);
  #endif
  void set_encrypykey(const char* value);
  void set_encrypykey(const char* value, size_t size);
  ::std::string* mutable_encrypykey();
  ::std::string* release_encrypykey();
  void set_allocated_encrypykey(::std::string* encrypykey);

  // uint32 EncryptPolicy = 10;
  void clear_encryptpolicy();
  static const int kEncryptPolicyFieldNumber = 10;
  ::google::protobuf::uint32 encryptpolicy() const;
  void set_encryptpolicy(::google::protobuf::uint32 value);

  // uint32 CompressPolicy = 11;
  void clear_compresspolicy();
  static const int kCompressPolicyFieldNumber = 11;
  ::google::protobuf::uint32 compresspolicy() const;
  void set_compresspolicy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.pbEncryptConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr publicauthencryptkey_;
  ::google::protobuf::internal::ArenaStringPtr encrypykey_;
  ::google::protobuf::uint32 encryptpolicy_;
  ::google::protobuf::uint32 compresspolicy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class pbNFServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.pbNFServerConfig) */ {
 public:
  pbNFServerConfig();
  virtual ~pbNFServerConfig();

  pbNFServerConfig(const pbNFServerConfig& from);

  inline pbNFServerConfig& operator=(const pbNFServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbNFServerConfig(pbNFServerConfig&& from) noexcept
    : pbNFServerConfig() {
    *this = ::std::move(from);
  }

  inline pbNFServerConfig& operator=(pbNFServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const pbNFServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbNFServerConfig* internal_default_instance() {
    return reinterpret_cast<const pbNFServerConfig*>(
               &_pbNFServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(pbNFServerConfig* other);
  friend void swap(pbNFServerConfig& a, pbNFServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbNFServerConfig* New() const final {
    return CreateMaybeMessage<pbNFServerConfig>(NULL);
  }

  pbNFServerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbNFServerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbNFServerConfig& from);
  void MergeFrom(const pbNFServerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbNFServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ServerId = 1;
  void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  const ::std::string& serverid() const;
  void set_serverid(const ::std::string& value);
  #if LANG_CXX11
  void set_serverid(::std::string&& value);
  #endif
  void set_serverid(const char* value);
  void set_serverid(const char* value, size_t size);
  ::std::string* mutable_serverid();
  ::std::string* release_serverid();
  void set_allocated_serverid(::std::string* serverid);

  // string ServerName = 3;
  void clear_servername();
  static const int kServerNameFieldNumber = 3;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // string LinkMode = 7;
  void clear_linkmode();
  static const int kLinkModeFieldNumber = 7;
  const ::std::string& linkmode() const;
  void set_linkmode(const ::std::string& value);
  #if LANG_CXX11
  void set_linkmode(::std::string&& value);
  #endif
  void set_linkmode(const char* value);
  void set_linkmode(const char* value, size_t size);
  ::std::string* mutable_linkmode();
  ::std::string* release_linkmode();
  void set_allocated_linkmode(::std::string* linkmode);

  // string Url = 8;
  void clear_url();
  static const int kUrlFieldNumber = 8;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string LoadProtoDs = 12;
  void clear_loadprotods();
  static const int kLoadProtoDsFieldNumber = 12;
  const ::std::string& loadprotods() const;
  void set_loadprotods(const ::std::string& value);
  #if LANG_CXX11
  void set_loadprotods(::std::string&& value);
  #endif
  void set_loadprotods(const char* value);
  void set_loadprotods(const char* value, size_t size);
  ::std::string* mutable_loadprotods();
  ::std::string* release_loadprotods();
  void set_allocated_loadprotods(::std::string* loadprotods);

  // string ServerIp = 20;
  void clear_serverip();
  static const int kServerIpFieldNumber = 20;
  const ::std::string& serverip() const;
  void set_serverip(const ::std::string& value);
  #if LANG_CXX11
  void set_serverip(::std::string&& value);
  #endif
  void set_serverip(const char* value);
  void set_serverip(const char* value, size_t size);
  ::std::string* mutable_serverip();
  ::std::string* release_serverip();
  void set_allocated_serverip(::std::string* serverip);

  // string ExternalServerIp = 22;
  void clear_externalserverip();
  static const int kExternalServerIpFieldNumber = 22;
  const ::std::string& externalserverip() const;
  void set_externalserverip(const ::std::string& value);
  #if LANG_CXX11
  void set_externalserverip(::std::string&& value);
  #endif
  void set_externalserverip(const char* value);
  void set_externalserverip(const char* value, size_t size);
  ::std::string* mutable_externalserverip();
  ::std::string* release_externalserverip();
  void set_allocated_externalserverip(::std::string* externalserverip);

  // string DefaultDBName = 75;
  void clear_defaultdbname();
  static const int kDefaultDBNameFieldNumber = 75;
  const ::std::string& defaultdbname() const;
  void set_defaultdbname(const ::std::string& value);
  #if LANG_CXX11
  void set_defaultdbname(::std::string&& value);
  #endif
  void set_defaultdbname(const char* value);
  void set_defaultdbname(const char* value, size_t size);
  ::std::string* mutable_defaultdbname();
  ::std::string* release_defaultdbname();
  void set_allocated_defaultdbname(::std::string* defaultdbname);

  // string CrossDBName = 76;
  void clear_crossdbname();
  static const int kCrossDBNameFieldNumber = 76;
  const ::std::string& crossdbname() const;
  void set_crossdbname(const ::std::string& value);
  #if LANG_CXX11
  void set_crossdbname(::std::string&& value);
  #endif
  void set_crossdbname(const char* value);
  void set_crossdbname(const char* value, size_t size);
  ::std::string* mutable_crossdbname();
  ::std::string* release_crossdbname();
  void set_allocated_crossdbname(::std::string* crossdbname);

  // string sendEmail = 91;
  void clear_sendemail();
  static const int kSendEmailFieldNumber = 91;
  const ::std::string& sendemail() const;
  void set_sendemail(const ::std::string& value);
  #if LANG_CXX11
  void set_sendemail(::std::string&& value);
  #endif
  void set_sendemail(const char* value);
  void set_sendemail(const char* value, size_t size);
  ::std::string* mutable_sendemail();
  ::std::string* release_sendemail();
  void set_allocated_sendemail(::std::string* sendemail);

  // string sendEmailPass = 92;
  void clear_sendemailpass();
  static const int kSendEmailPassFieldNumber = 92;
  const ::std::string& sendemailpass() const;
  void set_sendemailpass(const ::std::string& value);
  #if LANG_CXX11
  void set_sendemailpass(::std::string&& value);
  #endif
  void set_sendemailpass(const char* value);
  void set_sendemailpass(const char* value, size_t size);
  ::std::string* mutable_sendemailpass();
  ::std::string* release_sendemailpass();
  void set_allocated_sendemailpass(::std::string* sendemailpass);

  // string sendEmailUrl = 93;
  void clear_sendemailurl();
  static const int kSendEmailUrlFieldNumber = 93;
  const ::std::string& sendemailurl() const;
  void set_sendemailurl(const ::std::string& value);
  #if LANG_CXX11
  void set_sendemailurl(::std::string&& value);
  #endif
  void set_sendemailurl(const char* value);
  void set_sendemailurl(const char* value, size_t size);
  ::std::string* mutable_sendemailurl();
  ::std::string* release_sendemailurl();
  void set_allocated_sendemailurl(::std::string* sendemailurl);

  // string sendEmailPort = 94;
  void clear_sendemailport();
  static const int kSendEmailPortFieldNumber = 94;
  const ::std::string& sendemailport() const;
  void set_sendemailport(const ::std::string& value);
  #if LANG_CXX11
  void set_sendemailport(::std::string&& value);
  #endif
  void set_sendemailport(const char* value);
  void set_sendemailport(const char* value, size_t size);
  ::std::string* mutable_sendemailport();
  ::std::string* release_sendemailport();
  void set_allocated_sendemailport(::std::string* sendemailport);

  // string recvEmail = 95;
  void clear_recvemail();
  static const int kRecvEmailFieldNumber = 95;
  const ::std::string& recvemail() const;
  void set_recvemail(const ::std::string& value);
  #if LANG_CXX11
  void set_recvemail(::std::string&& value);
  #endif
  void set_recvemail(const char* value);
  void set_recvemail(const char* value, size_t size);
  ::std::string* mutable_recvemail();
  ::std::string* release_recvemail();
  void set_allocated_recvemail(::std::string* recvemail);

  // string wxWorkdRobot = 96;
  void clear_wxworkdrobot();
  static const int kWxWorkdRobotFieldNumber = 96;
  const ::std::string& wxworkdrobot() const;
  void set_wxworkdrobot(const ::std::string& value);
  #if LANG_CXX11
  void set_wxworkdrobot(::std::string&& value);
  #endif
  void set_wxworkdrobot(const char* value);
  void set_wxworkdrobot(const char* value, size_t size);
  ::std::string* mutable_wxworkdrobot();
  ::std::string* release_wxworkdrobot();
  void set_allocated_wxworkdrobot(::std::string* wxworkdrobot);

  // .NFrame.pbRouteConfig RouteConfig = 50;
  bool has_routeconfig() const;
  void clear_routeconfig();
  static const int kRouteConfigFieldNumber = 50;
  private:
  const ::NFrame::pbRouteConfig& _internal_routeconfig() const;
  public:
  const ::NFrame::pbRouteConfig& routeconfig() const;
  ::NFrame::pbRouteConfig* release_routeconfig();
  ::NFrame::pbRouteConfig* mutable_routeconfig();
  void set_allocated_routeconfig(::NFrame::pbRouteConfig* routeconfig);

  // .NFrame.pbMysqlConfig MysqlConfig = 70;
  bool has_mysqlconfig() const;
  void clear_mysqlconfig();
  static const int kMysqlConfigFieldNumber = 70;
  private:
  const ::NFrame::pbMysqlConfig& _internal_mysqlconfig() const;
  public:
  const ::NFrame::pbMysqlConfig& mysqlconfig() const;
  ::NFrame::pbMysqlConfig* release_mysqlconfig();
  ::NFrame::pbMysqlConfig* mutable_mysqlconfig();
  void set_allocated_mysqlconfig(::NFrame::pbMysqlConfig* mysqlconfig);

  // .NFrame.pbRedisConfig RedisConfig = 80;
  bool has_redisconfig() const;
  void clear_redisconfig();
  static const int kRedisConfigFieldNumber = 80;
  private:
  const ::NFrame::pbRedisConfig& _internal_redisconfig() const;
  public:
  const ::NFrame::pbRedisConfig& redisconfig() const;
  ::NFrame::pbRedisConfig* release_redisconfig();
  ::NFrame::pbRedisConfig* mutable_redisconfig();
  void set_allocated_redisconfig(::NFrame::pbRedisConfig* redisconfig);

  // .NFrame.pbEncryptConfig EncryptConfig = 110;
  bool has_encryptconfig() const;
  void clear_encryptconfig();
  static const int kEncryptConfigFieldNumber = 110;
  private:
  const ::NFrame::pbEncryptConfig& _internal_encryptconfig() const;
  public:
  const ::NFrame::pbEncryptConfig& encryptconfig() const;
  ::NFrame::pbEncryptConfig* release_encryptconfig();
  ::NFrame::pbEncryptConfig* mutable_encryptconfig();
  void set_allocated_encryptconfig(::NFrame::pbEncryptConfig* encryptconfig);

  // uint32 ServerType = 2;
  void clear_servertype();
  static const int kServerTypeFieldNumber = 2;
  ::google::protobuf::uint32 servertype() const;
  void set_servertype(::google::protobuf::uint32 value);

  // uint32 BusId = 4;
  void clear_busid();
  static const int kBusIdFieldNumber = 4;
  ::google::protobuf::uint32 busid() const;
  void set_busid(::google::protobuf::uint32 value);

  // uint32 BusLength = 5;
  void clear_buslength();
  static const int kBusLengthFieldNumber = 5;
  ::google::protobuf::uint32 buslength() const;
  void set_buslength(::google::protobuf::uint32 value);

  // uint32 IdleSleepUS = 9;
  void clear_idlesleepus();
  static const int kIdleSleepUSFieldNumber = 9;
  ::google::protobuf::uint32 idlesleepus() const;
  void set_idlesleepus(::google::protobuf::uint32 value);

  // uint64 ServerOpenTime = 11;
  void clear_serveropentime();
  static const int kServerOpenTimeFieldNumber = 11;
  ::google::protobuf::uint64 serveropentime() const;
  void set_serveropentime(::google::protobuf::uint64 value);

  // uint32 HandleMsgNumPerFrame = 10;
  void clear_handlemsgnumperframe();
  static const int kHandleMsgNumPerFrameFieldNumber = 10;
  ::google::protobuf::uint32 handlemsgnumperframe() const;
  void set_handlemsgnumperframe(::google::protobuf::uint32 value);

  // uint32 ServerPort = 21;
  void clear_serverport();
  static const int kServerPortFieldNumber = 21;
  ::google::protobuf::uint32 serverport() const;
  void set_serverport(::google::protobuf::uint32 value);

  // uint32 ExternalServerPort = 23;
  void clear_externalserverport();
  static const int kExternalServerPortFieldNumber = 23;
  ::google::protobuf::uint32 externalserverport() const;
  void set_externalserverport(::google::protobuf::uint32 value);

  // uint32 HttpPort = 24;
  void clear_httpport();
  static const int kHttpPortFieldNumber = 24;
  ::google::protobuf::uint32 httpport() const;
  void set_httpport(::google::protobuf::uint32 value);

  // uint32 MaxConnectNum = 25;
  void clear_maxconnectnum();
  static const int kMaxConnectNumFieldNumber = 25;
  ::google::protobuf::uint32 maxconnectnum() const;
  void set_maxconnectnum(::google::protobuf::uint32 value);

  // uint32 WorkThreadNum = 26;
  void clear_workthreadnum();
  static const int kWorkThreadNumFieldNumber = 26;
  ::google::protobuf::uint32 workthreadnum() const;
  void set_workthreadnum(::google::protobuf::uint32 value);

  // uint32 NetThreadNum = 27;
  void clear_netthreadnum();
  static const int kNetThreadNumFieldNumber = 27;
  ::google::protobuf::uint32 netthreadnum() const;
  void set_netthreadnum(::google::protobuf::uint32 value);

  // uint32 ParseType = 30;
  void clear_parsetype();
  static const int kParseTypeFieldNumber = 30;
  ::google::protobuf::uint32 parsetype() const;
  void set_parsetype(::google::protobuf::uint32 value);

  // uint32 ClientVersion = 103;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 103;
  ::google::protobuf::uint32 clientversion() const;
  void set_clientversion(::google::protobuf::uint32 value);

  // bool CrossServer = 13;
  void clear_crossserver();
  static const int kCrossServerFieldNumber = 13;
  bool crossserver() const;
  void set_crossserver(bool value);

  // bool Security = 28;
  void clear_security();
  static const int kSecurityFieldNumber = 28;
  bool security() const;
  void set_security(bool value);

  // bool WebSocket = 29;
  void clear_websocket();
  static const int kWebSocketFieldNumber = 29;
  bool websocket() const;
  void set_websocket(bool value);

  // bool IsNoToken = 104;
  void clear_isnotoken();
  static const int kIsNoTokenFieldNumber = 104;
  bool isnotoken() const;
  void set_isnotoken(bool value);

  // uint32 MaxOnlinePlayerNum = 100;
  void clear_maxonlineplayernum();
  static const int kMaxOnlinePlayerNumFieldNumber = 100;
  ::google::protobuf::uint32 maxonlineplayernum() const;
  void set_maxonlineplayernum(::google::protobuf::uint32 value);

  // uint32 HeartBeatTimeout = 101;
  void clear_heartbeattimeout();
  static const int kHeartBeatTimeoutFieldNumber = 101;
  ::google::protobuf::uint32 heartbeattimeout() const;
  void set_heartbeattimeout(::google::protobuf::uint32 value);

  // uint32 ClientKeepAliveTimeout = 102;
  void clear_clientkeepalivetimeout();
  static const int kClientKeepAliveTimeoutFieldNumber = 102;
  ::google::protobuf::uint32 clientkeepalivetimeout() const;
  void set_clientkeepalivetimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFrame.pbNFServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serverid_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::internal::ArenaStringPtr linkmode_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr loadprotods_;
  ::google::protobuf::internal::ArenaStringPtr serverip_;
  ::google::protobuf::internal::ArenaStringPtr externalserverip_;
  ::google::protobuf::internal::ArenaStringPtr defaultdbname_;
  ::google::protobuf::internal::ArenaStringPtr crossdbname_;
  ::google::protobuf::internal::ArenaStringPtr sendemail_;
  ::google::protobuf::internal::ArenaStringPtr sendemailpass_;
  ::google::protobuf::internal::ArenaStringPtr sendemailurl_;
  ::google::protobuf::internal::ArenaStringPtr sendemailport_;
  ::google::protobuf::internal::ArenaStringPtr recvemail_;
  ::google::protobuf::internal::ArenaStringPtr wxworkdrobot_;
  ::NFrame::pbRouteConfig* routeconfig_;
  ::NFrame::pbMysqlConfig* mysqlconfig_;
  ::NFrame::pbRedisConfig* redisconfig_;
  ::NFrame::pbEncryptConfig* encryptconfig_;
  ::google::protobuf::uint32 servertype_;
  ::google::protobuf::uint32 busid_;
  ::google::protobuf::uint32 buslength_;
  ::google::protobuf::uint32 idlesleepus_;
  ::google::protobuf::uint64 serveropentime_;
  ::google::protobuf::uint32 handlemsgnumperframe_;
  ::google::protobuf::uint32 serverport_;
  ::google::protobuf::uint32 externalserverport_;
  ::google::protobuf::uint32 httpport_;
  ::google::protobuf::uint32 maxconnectnum_;
  ::google::protobuf::uint32 workthreadnum_;
  ::google::protobuf::uint32 netthreadnum_;
  ::google::protobuf::uint32 parsetype_;
  ::google::protobuf::uint32 clientversion_;
  bool crossserver_;
  bool security_;
  bool websocket_;
  bool isnotoken_;
  ::google::protobuf::uint32 maxonlineplayernum_;
  ::google::protobuf::uint32 heartbeattimeout_;
  ::google::protobuf::uint32 clientkeepalivetimeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class wxWorkRobotText : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.wxWorkRobotText) */ {
 public:
  wxWorkRobotText();
  virtual ~wxWorkRobotText();

  wxWorkRobotText(const wxWorkRobotText& from);

  inline wxWorkRobotText& operator=(const wxWorkRobotText& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  wxWorkRobotText(wxWorkRobotText&& from) noexcept
    : wxWorkRobotText() {
    *this = ::std::move(from);
  }

  inline wxWorkRobotText& operator=(wxWorkRobotText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const wxWorkRobotText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const wxWorkRobotText* internal_default_instance() {
    return reinterpret_cast<const wxWorkRobotText*>(
               &_wxWorkRobotText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(wxWorkRobotText* other);
  friend void swap(wxWorkRobotText& a, wxWorkRobotText& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline wxWorkRobotText* New() const final {
    return CreateMaybeMessage<wxWorkRobotText>(NULL);
  }

  wxWorkRobotText* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<wxWorkRobotText>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const wxWorkRobotText& from);
  void MergeFrom(const wxWorkRobotText& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(wxWorkRobotText* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mentioned_list = 2;
  int mentioned_list_size() const;
  void clear_mentioned_list();
  static const int kMentionedListFieldNumber = 2;
  const ::std::string& mentioned_list(int index) const;
  ::std::string* mutable_mentioned_list(int index);
  void set_mentioned_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mentioned_list(int index, ::std::string&& value);
  #endif
  void set_mentioned_list(int index, const char* value);
  void set_mentioned_list(int index, const char* value, size_t size);
  ::std::string* add_mentioned_list();
  void add_mentioned_list(const ::std::string& value);
  #if LANG_CXX11
  void add_mentioned_list(::std::string&& value);
  #endif
  void add_mentioned_list(const char* value);
  void add_mentioned_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mentioned_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mentioned_list();

  // repeated string mentioned_mobile_list = 3;
  int mentioned_mobile_list_size() const;
  void clear_mentioned_mobile_list();
  static const int kMentionedMobileListFieldNumber = 3;
  const ::std::string& mentioned_mobile_list(int index) const;
  ::std::string* mutable_mentioned_mobile_list(int index);
  void set_mentioned_mobile_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mentioned_mobile_list(int index, ::std::string&& value);
  #endif
  void set_mentioned_mobile_list(int index, const char* value);
  void set_mentioned_mobile_list(int index, const char* value, size_t size);
  ::std::string* add_mentioned_mobile_list();
  void add_mentioned_mobile_list(const ::std::string& value);
  #if LANG_CXX11
  void add_mentioned_mobile_list(::std::string&& value);
  #endif
  void add_mentioned_mobile_list(const char* value);
  void add_mentioned_mobile_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mentioned_mobile_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mentioned_mobile_list();

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:NFrame.wxWorkRobotText)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mentioned_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mentioned_mobile_list_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class wxWorkRobotHttpPost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.wxWorkRobotHttpPost) */ {
 public:
  wxWorkRobotHttpPost();
  virtual ~wxWorkRobotHttpPost();

  wxWorkRobotHttpPost(const wxWorkRobotHttpPost& from);

  inline wxWorkRobotHttpPost& operator=(const wxWorkRobotHttpPost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  wxWorkRobotHttpPost(wxWorkRobotHttpPost&& from) noexcept
    : wxWorkRobotHttpPost() {
    *this = ::std::move(from);
  }

  inline wxWorkRobotHttpPost& operator=(wxWorkRobotHttpPost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const wxWorkRobotHttpPost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const wxWorkRobotHttpPost* internal_default_instance() {
    return reinterpret_cast<const wxWorkRobotHttpPost*>(
               &_wxWorkRobotHttpPost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(wxWorkRobotHttpPost* other);
  friend void swap(wxWorkRobotHttpPost& a, wxWorkRobotHttpPost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline wxWorkRobotHttpPost* New() const final {
    return CreateMaybeMessage<wxWorkRobotHttpPost>(NULL);
  }

  wxWorkRobotHttpPost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<wxWorkRobotHttpPost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const wxWorkRobotHttpPost& from);
  void MergeFrom(const wxWorkRobotHttpPost& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(wxWorkRobotHttpPost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msgtype = 1;
  void clear_msgtype();
  static const int kMsgtypeFieldNumber = 1;
  const ::std::string& msgtype() const;
  void set_msgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_msgtype(::std::string&& value);
  #endif
  void set_msgtype(const char* value);
  void set_msgtype(const char* value, size_t size);
  ::std::string* mutable_msgtype();
  ::std::string* release_msgtype();
  void set_allocated_msgtype(::std::string* msgtype);

  // .NFrame.wxWorkRobotText text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  private:
  const ::NFrame::wxWorkRobotText& _internal_text() const;
  public:
  const ::NFrame::wxWorkRobotText& text() const;
  ::NFrame::wxWorkRobotText* release_text();
  ::NFrame::wxWorkRobotText* mutable_text();
  void set_allocated_text(::NFrame::wxWorkRobotText* text);

  // @@protoc_insertion_point(class_scope:NFrame.wxWorkRobotHttpPost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgtype_;
  ::NFrame::wxWorkRobotText* text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExcelSheetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ExcelSheetInfo) */ {
 public:
  ExcelSheetInfo();
  virtual ~ExcelSheetInfo();

  ExcelSheetInfo(const ExcelSheetInfo& from);

  inline ExcelSheetInfo& operator=(const ExcelSheetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExcelSheetInfo(ExcelSheetInfo&& from) noexcept
    : ExcelSheetInfo() {
    *this = ::std::move(from);
  }

  inline ExcelSheetInfo& operator=(ExcelSheetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExcelSheetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExcelSheetInfo* internal_default_instance() {
    return reinterpret_cast<const ExcelSheetInfo*>(
               &_ExcelSheetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ExcelSheetInfo* other);
  friend void swap(ExcelSheetInfo& a, ExcelSheetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExcelSheetInfo* New() const final {
    return CreateMaybeMessage<ExcelSheetInfo>(NULL);
  }

  ExcelSheetInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExcelSheetInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExcelSheetInfo& from);
  void MergeFrom(const ExcelSheetInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelSheetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string unique_index = 2;
  void clear_unique_index();
  static const int kUniqueIndexFieldNumber = 2;
  const ::std::string& unique_index() const;
  void set_unique_index(const ::std::string& value);
  #if LANG_CXX11
  void set_unique_index(::std::string&& value);
  #endif
  void set_unique_index(const char* value);
  void set_unique_index(const char* value, size_t size);
  ::std::string* mutable_unique_index();
  ::std::string* release_unique_index();
  void set_allocated_unique_index(::std::string* unique_index);

  // string multi_index = 3;
  void clear_multi_index();
  static const int kMultiIndexFieldNumber = 3;
  const ::std::string& multi_index() const;
  void set_multi_index(const ::std::string& value);
  #if LANG_CXX11
  void set_multi_index(::std::string&& value);
  #endif
  void set_multi_index(const char* value);
  void set_multi_index(const char* value, size_t size);
  ::std::string* mutable_multi_index();
  ::std::string* release_multi_index();
  void set_allocated_multi_index(::std::string* multi_index);

  // string relation = 4;
  void clear_relation();
  static const int kRelationFieldNumber = 4;
  const ::std::string& relation() const;
  void set_relation(const ::std::string& value);
  #if LANG_CXX11
  void set_relation(::std::string&& value);
  #endif
  void set_relation(const char* value);
  void set_relation(const char* value, size_t size);
  ::std::string* mutable_relation();
  ::std::string* release_relation();
  void set_allocated_relation(::std::string* relation);

  // string field_enum = 6;
  void clear_field_enum();
  static const int kFieldEnumFieldNumber = 6;
  const ::std::string& field_enum() const;
  void set_field_enum(const ::std::string& value);
  #if LANG_CXX11
  void set_field_enum(::std::string&& value);
  #endif
  void set_field_enum(const char* value);
  void set_field_enum(const char* value, size_t size);
  ::std::string* mutable_field_enum();
  ::std::string* release_field_enum();
  void set_allocated_field_enum(::std::string* field_enum);

  // string import_proto = 7;
  void clear_import_proto();
  static const int kImportProtoFieldNumber = 7;
  const ::std::string& import_proto() const;
  void set_import_proto(const ::std::string& value);
  #if LANG_CXX11
  void set_import_proto(::std::string&& value);
  #endif
  void set_import_proto(const char* value);
  void set_import_proto(const char* value, size_t size);
  ::std::string* mutable_import_proto();
  ::std::string* release_import_proto();
  void set_allocated_import_proto(::std::string* import_proto);

  // string colMessageType = 8;
  void clear_colmessagetype();
  static const int kColMessageTypeFieldNumber = 8;
  const ::std::string& colmessagetype() const;
  void set_colmessagetype(const ::std::string& value);
  #if LANG_CXX11
  void set_colmessagetype(::std::string&& value);
  #endif
  void set_colmessagetype(const char* value);
  void set_colmessagetype(const char* value, size_t size);
  ::std::string* mutable_colmessagetype();
  ::std::string* release_colmessagetype();
  void set_allocated_colmessagetype(::std::string* colmessagetype);

  // string add_field = 9;
  void clear_add_field();
  static const int kAddFieldFieldNumber = 9;
  const ::std::string& add_field() const;
  void set_add_field(const ::std::string& value);
  #if LANG_CXX11
  void set_add_field(::std::string&& value);
  #endif
  void set_add_field(const char* value);
  void set_add_field(const char* value, size_t size);
  ::std::string* mutable_add_field();
  ::std::string* release_add_field();
  void set_allocated_add_field(::std::string* add_field);

  // string otherName = 10;
  void clear_othername();
  static const int kOtherNameFieldNumber = 10;
  const ::std::string& othername() const;
  void set_othername(const ::std::string& value);
  #if LANG_CXX11
  void set_othername(::std::string&& value);
  #endif
  void set_othername(const char* value);
  void set_othername(const char* value, size_t size);
  ::std::string* mutable_othername();
  ::std::string* release_othername();
  void set_allocated_othername(::std::string* othername);

  // string sheetMsgName = 11;
  void clear_sheetmsgname();
  static const int kSheetMsgNameFieldNumber = 11;
  const ::std::string& sheetmsgname() const;
  void set_sheetmsgname(const ::std::string& value);
  #if LANG_CXX11
  void set_sheetmsgname(::std::string&& value);
  #endif
  void set_sheetmsgname(const char* value);
  void set_sheetmsgname(const char* value, size_t size);
  ::std::string* mutable_sheetmsgname();
  ::std::string* release_sheetmsgname();
  void set_allocated_sheetmsgname(::std::string* sheetmsgname);

  // string protoMsgName = 12;
  void clear_protomsgname();
  static const int kProtoMsgNameFieldNumber = 12;
  const ::std::string& protomsgname() const;
  void set_protomsgname(const ::std::string& value);
  #if LANG_CXX11
  void set_protomsgname(::std::string&& value);
  #endif
  void set_protomsgname(const char* value);
  void set_protomsgname(const char* value, size_t size);
  ::std::string* mutable_protomsgname();
  ::std::string* release_protomsgname();
  void set_allocated_protomsgname(::std::string* protomsgname);

  // bool createSql = 5;
  void clear_createsql();
  static const int kCreateSqlFieldNumber = 5;
  bool createsql() const;
  void set_createsql(bool value);

  // @@protoc_insertion_point(class_scope:NFrame.ExcelSheetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr unique_index_;
  ::google::protobuf::internal::ArenaStringPtr multi_index_;
  ::google::protobuf::internal::ArenaStringPtr relation_;
  ::google::protobuf::internal::ArenaStringPtr field_enum_;
  ::google::protobuf::internal::ArenaStringPtr import_proto_;
  ::google::protobuf::internal::ArenaStringPtr colmessagetype_;
  ::google::protobuf::internal::ArenaStringPtr add_field_;
  ::google::protobuf::internal::ArenaStringPtr othername_;
  ::google::protobuf::internal::ArenaStringPtr sheetmsgname_;
  ::google::protobuf::internal::ArenaStringPtr protomsgname_;
  bool createsql_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExcelPbInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ExcelPbInfo) */ {
 public:
  ExcelPbInfo();
  virtual ~ExcelPbInfo();

  ExcelPbInfo(const ExcelPbInfo& from);

  inline ExcelPbInfo& operator=(const ExcelPbInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExcelPbInfo(ExcelPbInfo&& from) noexcept
    : ExcelPbInfo() {
    *this = ::std::move(from);
  }

  inline ExcelPbInfo& operator=(ExcelPbInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExcelPbInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExcelPbInfo* internal_default_instance() {
    return reinterpret_cast<const ExcelPbInfo*>(
               &_ExcelPbInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ExcelPbInfo* other);
  friend void swap(ExcelPbInfo& a, ExcelPbInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExcelPbInfo* New() const final {
    return CreateMaybeMessage<ExcelPbInfo>(NULL);
  }

  ExcelPbInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExcelPbInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExcelPbInfo& from);
  void MergeFrom(const ExcelPbInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelPbInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFrame.ExcelSheetInfo sheet = 2 [(.nanopb) = {
  int sheet_size() const;
  void clear_sheet();
  static const int kSheetFieldNumber = 2;
  ::NFrame::ExcelSheetInfo* mutable_sheet(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelSheetInfo >*
      mutable_sheet();
  const ::NFrame::ExcelSheetInfo& sheet(int index) const;
  ::NFrame::ExcelSheetInfo* add_sheet();
  const ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelSheetInfo >&
      sheet() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:NFrame.ExcelPbInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelSheetInfo > sheet_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExcelParseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFrame.ExcelParseInfo) */ {
 public:
  ExcelParseInfo();
  virtual ~ExcelParseInfo();

  ExcelParseInfo(const ExcelParseInfo& from);

  inline ExcelParseInfo& operator=(const ExcelParseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExcelParseInfo(ExcelParseInfo&& from) noexcept
    : ExcelParseInfo() {
    *this = ::std::move(from);
  }

  inline ExcelParseInfo& operator=(ExcelParseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExcelParseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExcelParseInfo* internal_default_instance() {
    return reinterpret_cast<const ExcelParseInfo*>(
               &_ExcelParseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ExcelParseInfo* other);
  friend void swap(ExcelParseInfo& a, ExcelParseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExcelParseInfo* New() const final {
    return CreateMaybeMessage<ExcelParseInfo>(NULL);
  }

  ExcelParseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExcelParseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExcelParseInfo& from);
  void MergeFrom(const ExcelParseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelParseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFrame.ExcelPbInfo excel = 1 [(.nanopb) = {
  int excel_size() const;
  void clear_excel();
  static const int kExcelFieldNumber = 1;
  ::NFrame::ExcelPbInfo* mutable_excel(int index);
  ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelPbInfo >*
      mutable_excel();
  const ::NFrame::ExcelPbInfo& excel(int index) const;
  ::NFrame::ExcelPbInfo* add_excel();
  const ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelPbInfo >&
      excel() const;

  // @@protoc_insertion_point(class_scope:NFrame.ExcelParseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelPbInfo > excel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_FrameComm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tbServerMgr

// uint64 id = 1;
inline void tbServerMgr::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tbServerMgr::id() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.id)
  return id_;
}
inline void tbServerMgr::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.id)
}

// string contract = 2;
inline void tbServerMgr::clear_contract() {
  contract_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tbServerMgr::contract() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.contract)
  return contract_.GetNoArena();
}
inline void tbServerMgr::set_contract(const ::std::string& value) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.contract)
}
#if LANG_CXX11
inline void tbServerMgr::set_contract(::std::string&& value) {
  
  contract_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.tbServerMgr.contract)
}
#endif
inline void tbServerMgr::set_contract(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.tbServerMgr.contract)
}
inline void tbServerMgr::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.tbServerMgr.contract)
}
inline ::std::string* tbServerMgr::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.tbServerMgr.contract)
  return contract_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tbServerMgr::release_contract() {
  // @@protoc_insertion_point(field_release:NFrame.tbServerMgr.contract)
  
  return contract_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tbServerMgr::set_allocated_contract(::std::string* contract) {
  if (contract != NULL) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:NFrame.tbServerMgr.contract)
}

// string machine_addr = 3;
inline void tbServerMgr::clear_machine_addr() {
  machine_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tbServerMgr::machine_addr() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.machine_addr)
  return machine_addr_.GetNoArena();
}
inline void tbServerMgr::set_machine_addr(const ::std::string& value) {
  
  machine_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.machine_addr)
}
#if LANG_CXX11
inline void tbServerMgr::set_machine_addr(::std::string&& value) {
  
  machine_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.tbServerMgr.machine_addr)
}
#endif
inline void tbServerMgr::set_machine_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.tbServerMgr.machine_addr)
}
inline void tbServerMgr::set_machine_addr(const char* value, size_t size) {
  
  machine_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.tbServerMgr.machine_addr)
}
inline ::std::string* tbServerMgr::mutable_machine_addr() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.tbServerMgr.machine_addr)
  return machine_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tbServerMgr::release_machine_addr() {
  // @@protoc_insertion_point(field_release:NFrame.tbServerMgr.machine_addr)
  
  return machine_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tbServerMgr::set_allocated_machine_addr(::std::string* machine_addr) {
  if (machine_addr != NULL) {
    
  } else {
    
  }
  machine_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_addr);
  // @@protoc_insertion_point(field_set_allocated:NFrame.tbServerMgr.machine_addr)
}

// string ip = 4;
inline void tbServerMgr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tbServerMgr::ip() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.ip)
  return ip_.GetNoArena();
}
inline void tbServerMgr::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.ip)
}
#if LANG_CXX11
inline void tbServerMgr::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.tbServerMgr.ip)
}
#endif
inline void tbServerMgr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.tbServerMgr.ip)
}
inline void tbServerMgr::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.tbServerMgr.ip)
}
inline ::std::string* tbServerMgr::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.tbServerMgr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tbServerMgr::release_ip() {
  // @@protoc_insertion_point(field_release:NFrame.tbServerMgr.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tbServerMgr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.tbServerMgr.ip)
}

// string bus_name = 5;
inline void tbServerMgr::clear_bus_name() {
  bus_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tbServerMgr::bus_name() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.bus_name)
  return bus_name_.GetNoArena();
}
inline void tbServerMgr::set_bus_name(const ::std::string& value) {
  
  bus_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.bus_name)
}
#if LANG_CXX11
inline void tbServerMgr::set_bus_name(::std::string&& value) {
  
  bus_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.tbServerMgr.bus_name)
}
#endif
inline void tbServerMgr::set_bus_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bus_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.tbServerMgr.bus_name)
}
inline void tbServerMgr::set_bus_name(const char* value, size_t size) {
  
  bus_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.tbServerMgr.bus_name)
}
inline ::std::string* tbServerMgr::mutable_bus_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.tbServerMgr.bus_name)
  return bus_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tbServerMgr::release_bus_name() {
  // @@protoc_insertion_point(field_release:NFrame.tbServerMgr.bus_name)
  
  return bus_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tbServerMgr::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name != NULL) {
    
  } else {
    
  }
  bus_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bus_name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.tbServerMgr.bus_name)
}

// string server_desc = 6;
inline void tbServerMgr::clear_server_desc() {
  server_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tbServerMgr::server_desc() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.server_desc)
  return server_desc_.GetNoArena();
}
inline void tbServerMgr::set_server_desc(const ::std::string& value) {
  
  server_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.server_desc)
}
#if LANG_CXX11
inline void tbServerMgr::set_server_desc(::std::string&& value) {
  
  server_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.tbServerMgr.server_desc)
}
#endif
inline void tbServerMgr::set_server_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.tbServerMgr.server_desc)
}
inline void tbServerMgr::set_server_desc(const char* value, size_t size) {
  
  server_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.tbServerMgr.server_desc)
}
inline ::std::string* tbServerMgr::mutable_server_desc() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.tbServerMgr.server_desc)
  return server_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tbServerMgr::release_server_desc() {
  // @@protoc_insertion_point(field_release:NFrame.tbServerMgr.server_desc)
  
  return server_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tbServerMgr::set_allocated_server_desc(::std::string* server_desc) {
  if (server_desc != NULL) {
    
  } else {
    
  }
  server_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_desc);
  // @@protoc_insertion_point(field_set_allocated:NFrame.tbServerMgr.server_desc)
}

// uint32 cur_count = 7;
inline void tbServerMgr::clear_cur_count() {
  cur_count_ = 0u;
}
inline ::google::protobuf::uint32 tbServerMgr::cur_count() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.cur_count)
  return cur_count_;
}
inline void tbServerMgr::set_cur_count(::google::protobuf::uint32 value) {
  
  cur_count_ = value;
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.cur_count)
}

// uint64 last_login_time = 8;
inline void tbServerMgr::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tbServerMgr::last_login_time() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.last_login_time)
  return last_login_time_;
}
inline void tbServerMgr::set_last_login_time(::google::protobuf::uint64 value) {
  
  last_login_time_ = value;
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.last_login_time)
}

// uint64 last_logout_time = 9;
inline void tbServerMgr::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tbServerMgr::last_logout_time() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.last_logout_time)
  return last_logout_time_;
}
inline void tbServerMgr::set_last_logout_time(::google::protobuf::uint64 value) {
  
  last_logout_time_ = value;
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.last_logout_time)
}

// uint64 create_time = 10;
inline void tbServerMgr::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 tbServerMgr::create_time() const {
  // @@protoc_insertion_point(field_get:NFrame.tbServerMgr.create_time)
  return create_time_;
}
inline void tbServerMgr::set_create_time(::google::protobuf::uint64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:NFrame.tbServerMgr.create_time)
}

// -------------------------------------------------------------------

// pbMysqlConfig

// string MysqlIp = 1;
inline void pbMysqlConfig::clear_mysqlip() {
  mysqlip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbMysqlConfig::mysqlip() const {
  // @@protoc_insertion_point(field_get:NFrame.pbMysqlConfig.MysqlIp)
  return mysqlip_.GetNoArena();
}
inline void pbMysqlConfig::set_mysqlip(const ::std::string& value) {
  
  mysqlip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbMysqlConfig.MysqlIp)
}
#if LANG_CXX11
inline void pbMysqlConfig::set_mysqlip(::std::string&& value) {
  
  mysqlip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbMysqlConfig.MysqlIp)
}
#endif
inline void pbMysqlConfig::set_mysqlip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mysqlip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbMysqlConfig.MysqlIp)
}
inline void pbMysqlConfig::set_mysqlip(const char* value, size_t size) {
  
  mysqlip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbMysqlConfig.MysqlIp)
}
inline ::std::string* pbMysqlConfig::mutable_mysqlip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbMysqlConfig.MysqlIp)
  return mysqlip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbMysqlConfig::release_mysqlip() {
  // @@protoc_insertion_point(field_release:NFrame.pbMysqlConfig.MysqlIp)
  
  return mysqlip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbMysqlConfig::set_allocated_mysqlip(::std::string* mysqlip) {
  if (mysqlip != NULL) {
    
  } else {
    
  }
  mysqlip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysqlip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbMysqlConfig.MysqlIp)
}

// uint32 MysqlPort = 2;
inline void pbMysqlConfig::clear_mysqlport() {
  mysqlport_ = 0u;
}
inline ::google::protobuf::uint32 pbMysqlConfig::mysqlport() const {
  // @@protoc_insertion_point(field_get:NFrame.pbMysqlConfig.MysqlPort)
  return mysqlport_;
}
inline void pbMysqlConfig::set_mysqlport(::google::protobuf::uint32 value) {
  
  mysqlport_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbMysqlConfig.MysqlPort)
}

// string MysqlDbName = 3;
inline void pbMysqlConfig::clear_mysqldbname() {
  mysqldbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbMysqlConfig::mysqldbname() const {
  // @@protoc_insertion_point(field_get:NFrame.pbMysqlConfig.MysqlDbName)
  return mysqldbname_.GetNoArena();
}
inline void pbMysqlConfig::set_mysqldbname(const ::std::string& value) {
  
  mysqldbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbMysqlConfig.MysqlDbName)
}
#if LANG_CXX11
inline void pbMysqlConfig::set_mysqldbname(::std::string&& value) {
  
  mysqldbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbMysqlConfig.MysqlDbName)
}
#endif
inline void pbMysqlConfig::set_mysqldbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mysqldbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbMysqlConfig.MysqlDbName)
}
inline void pbMysqlConfig::set_mysqldbname(const char* value, size_t size) {
  
  mysqldbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbMysqlConfig.MysqlDbName)
}
inline ::std::string* pbMysqlConfig::mutable_mysqldbname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbMysqlConfig.MysqlDbName)
  return mysqldbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbMysqlConfig::release_mysqldbname() {
  // @@protoc_insertion_point(field_release:NFrame.pbMysqlConfig.MysqlDbName)
  
  return mysqldbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbMysqlConfig::set_allocated_mysqldbname(::std::string* mysqldbname) {
  if (mysqldbname != NULL) {
    
  } else {
    
  }
  mysqldbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysqldbname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbMysqlConfig.MysqlDbName)
}

// string MysqlUser = 4;
inline void pbMysqlConfig::clear_mysqluser() {
  mysqluser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbMysqlConfig::mysqluser() const {
  // @@protoc_insertion_point(field_get:NFrame.pbMysqlConfig.MysqlUser)
  return mysqluser_.GetNoArena();
}
inline void pbMysqlConfig::set_mysqluser(const ::std::string& value) {
  
  mysqluser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbMysqlConfig.MysqlUser)
}
#if LANG_CXX11
inline void pbMysqlConfig::set_mysqluser(::std::string&& value) {
  
  mysqluser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbMysqlConfig.MysqlUser)
}
#endif
inline void pbMysqlConfig::set_mysqluser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mysqluser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbMysqlConfig.MysqlUser)
}
inline void pbMysqlConfig::set_mysqluser(const char* value, size_t size) {
  
  mysqluser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbMysqlConfig.MysqlUser)
}
inline ::std::string* pbMysqlConfig::mutable_mysqluser() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbMysqlConfig.MysqlUser)
  return mysqluser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbMysqlConfig::release_mysqluser() {
  // @@protoc_insertion_point(field_release:NFrame.pbMysqlConfig.MysqlUser)
  
  return mysqluser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbMysqlConfig::set_allocated_mysqluser(::std::string* mysqluser) {
  if (mysqluser != NULL) {
    
  } else {
    
  }
  mysqluser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysqluser);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbMysqlConfig.MysqlUser)
}

// string MysqlPassword = 5;
inline void pbMysqlConfig::clear_mysqlpassword() {
  mysqlpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbMysqlConfig::mysqlpassword() const {
  // @@protoc_insertion_point(field_get:NFrame.pbMysqlConfig.MysqlPassword)
  return mysqlpassword_.GetNoArena();
}
inline void pbMysqlConfig::set_mysqlpassword(const ::std::string& value) {
  
  mysqlpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbMysqlConfig.MysqlPassword)
}
#if LANG_CXX11
inline void pbMysqlConfig::set_mysqlpassword(::std::string&& value) {
  
  mysqlpassword_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbMysqlConfig.MysqlPassword)
}
#endif
inline void pbMysqlConfig::set_mysqlpassword(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mysqlpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbMysqlConfig.MysqlPassword)
}
inline void pbMysqlConfig::set_mysqlpassword(const char* value, size_t size) {
  
  mysqlpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbMysqlConfig.MysqlPassword)
}
inline ::std::string* pbMysqlConfig::mutable_mysqlpassword() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbMysqlConfig.MysqlPassword)
  return mysqlpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbMysqlConfig::release_mysqlpassword() {
  // @@protoc_insertion_point(field_release:NFrame.pbMysqlConfig.MysqlPassword)
  
  return mysqlpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbMysqlConfig::set_allocated_mysqlpassword(::std::string* mysqlpassword) {
  if (mysqlpassword != NULL) {
    
  } else {
    
  }
  mysqlpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mysqlpassword);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbMysqlConfig.MysqlPassword)
}

// repeated .NFrame.pbTableConfig TBConfList = 6;
inline int pbMysqlConfig::tbconflist_size() const {
  return tbconflist_.size();
}
inline void pbMysqlConfig::clear_tbconflist() {
  tbconflist_.Clear();
}
inline ::NFrame::pbTableConfig* pbMysqlConfig::mutable_tbconflist(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.pbMysqlConfig.TBConfList)
  return tbconflist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrame::pbTableConfig >*
pbMysqlConfig::mutable_tbconflist() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.pbMysqlConfig.TBConfList)
  return &tbconflist_;
}
inline const ::NFrame::pbTableConfig& pbMysqlConfig::tbconflist(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.pbMysqlConfig.TBConfList)
  return tbconflist_.Get(index);
}
inline ::NFrame::pbTableConfig* pbMysqlConfig::add_tbconflist() {
  // @@protoc_insertion_point(field_add:NFrame.pbMysqlConfig.TBConfList)
  return tbconflist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrame::pbTableConfig >&
pbMysqlConfig::tbconflist() const {
  // @@protoc_insertion_point(field_list:NFrame.pbMysqlConfig.TBConfList)
  return tbconflist_;
}

// -------------------------------------------------------------------

// pbRedisConfig

// string RedisIp = 1;
inline void pbRedisConfig::clear_redisip() {
  redisip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbRedisConfig::redisip() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRedisConfig.RedisIp)
  return redisip_.GetNoArena();
}
inline void pbRedisConfig::set_redisip(const ::std::string& value) {
  
  redisip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbRedisConfig.RedisIp)
}
#if LANG_CXX11
inline void pbRedisConfig::set_redisip(::std::string&& value) {
  
  redisip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbRedisConfig.RedisIp)
}
#endif
inline void pbRedisConfig::set_redisip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redisip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbRedisConfig.RedisIp)
}
inline void pbRedisConfig::set_redisip(const char* value, size_t size) {
  
  redisip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbRedisConfig.RedisIp)
}
inline ::std::string* pbRedisConfig::mutable_redisip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbRedisConfig.RedisIp)
  return redisip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbRedisConfig::release_redisip() {
  // @@protoc_insertion_point(field_release:NFrame.pbRedisConfig.RedisIp)
  
  return redisip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbRedisConfig::set_allocated_redisip(::std::string* redisip) {
  if (redisip != NULL) {
    
  } else {
    
  }
  redisip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redisip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbRedisConfig.RedisIp)
}

// uint32 RedisPort = 2;
inline void pbRedisConfig::clear_redisport() {
  redisport_ = 0u;
}
inline ::google::protobuf::uint32 pbRedisConfig::redisport() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRedisConfig.RedisPort)
  return redisport_;
}
inline void pbRedisConfig::set_redisport(::google::protobuf::uint32 value) {
  
  redisport_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbRedisConfig.RedisPort)
}

// string RedisPass = 3;
inline void pbRedisConfig::clear_redispass() {
  redispass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbRedisConfig::redispass() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRedisConfig.RedisPass)
  return redispass_.GetNoArena();
}
inline void pbRedisConfig::set_redispass(const ::std::string& value) {
  
  redispass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbRedisConfig.RedisPass)
}
#if LANG_CXX11
inline void pbRedisConfig::set_redispass(::std::string&& value) {
  
  redispass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbRedisConfig.RedisPass)
}
#endif
inline void pbRedisConfig::set_redispass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redispass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbRedisConfig.RedisPass)
}
inline void pbRedisConfig::set_redispass(const char* value, size_t size) {
  
  redispass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbRedisConfig.RedisPass)
}
inline ::std::string* pbRedisConfig::mutable_redispass() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbRedisConfig.RedisPass)
  return redispass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbRedisConfig::release_redispass() {
  // @@protoc_insertion_point(field_release:NFrame.pbRedisConfig.RedisPass)
  
  return redispass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbRedisConfig::set_allocated_redispass(::std::string* redispass) {
  if (redispass != NULL) {
    
  } else {
    
  }
  redispass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redispass);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbRedisConfig.RedisPass)
}

// -------------------------------------------------------------------

// pbRouteConfig

// string MasterIp = 1;
inline void pbRouteConfig::clear_masterip() {
  masterip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbRouteConfig::masterip() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRouteConfig.MasterIp)
  return masterip_.GetNoArena();
}
inline void pbRouteConfig::set_masterip(const ::std::string& value) {
  
  masterip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbRouteConfig.MasterIp)
}
#if LANG_CXX11
inline void pbRouteConfig::set_masterip(::std::string&& value) {
  
  masterip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbRouteConfig.MasterIp)
}
#endif
inline void pbRouteConfig::set_masterip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  masterip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbRouteConfig.MasterIp)
}
inline void pbRouteConfig::set_masterip(const char* value, size_t size) {
  
  masterip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbRouteConfig.MasterIp)
}
inline ::std::string* pbRouteConfig::mutable_masterip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbRouteConfig.MasterIp)
  return masterip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbRouteConfig::release_masterip() {
  // @@protoc_insertion_point(field_release:NFrame.pbRouteConfig.MasterIp)
  
  return masterip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbRouteConfig::set_allocated_masterip(::std::string* masterip) {
  if (masterip != NULL) {
    
  } else {
    
  }
  masterip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), masterip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbRouteConfig.MasterIp)
}

// uint32 MasterPort = 2;
inline void pbRouteConfig::clear_masterport() {
  masterport_ = 0u;
}
inline ::google::protobuf::uint32 pbRouteConfig::masterport() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRouteConfig.MasterPort)
  return masterport_;
}
inline void pbRouteConfig::set_masterport(::google::protobuf::uint32 value) {
  
  masterport_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbRouteConfig.MasterPort)
}

// string NamingHost = 3;
inline void pbRouteConfig::clear_naminghost() {
  naminghost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbRouteConfig::naminghost() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRouteConfig.NamingHost)
  return naminghost_.GetNoArena();
}
inline void pbRouteConfig::set_naminghost(const ::std::string& value) {
  
  naminghost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbRouteConfig.NamingHost)
}
#if LANG_CXX11
inline void pbRouteConfig::set_naminghost(::std::string&& value) {
  
  naminghost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbRouteConfig.NamingHost)
}
#endif
inline void pbRouteConfig::set_naminghost(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  naminghost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbRouteConfig.NamingHost)
}
inline void pbRouteConfig::set_naminghost(const char* value, size_t size) {
  
  naminghost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbRouteConfig.NamingHost)
}
inline ::std::string* pbRouteConfig::mutable_naminghost() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbRouteConfig.NamingHost)
  return naminghost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbRouteConfig::release_naminghost() {
  // @@protoc_insertion_point(field_release:NFrame.pbRouteConfig.NamingHost)
  
  return naminghost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbRouteConfig::set_allocated_naminghost(::std::string* naminghost) {
  if (naminghost != NULL) {
    
  } else {
    
  }
  naminghost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), naminghost);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbRouteConfig.NamingHost)
}

// string NamingPath = 4;
inline void pbRouteConfig::clear_namingpath() {
  namingpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbRouteConfig::namingpath() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRouteConfig.NamingPath)
  return namingpath_.GetNoArena();
}
inline void pbRouteConfig::set_namingpath(const ::std::string& value) {
  
  namingpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbRouteConfig.NamingPath)
}
#if LANG_CXX11
inline void pbRouteConfig::set_namingpath(::std::string&& value) {
  
  namingpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbRouteConfig.NamingPath)
}
#endif
inline void pbRouteConfig::set_namingpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  namingpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbRouteConfig.NamingPath)
}
inline void pbRouteConfig::set_namingpath(const char* value, size_t size) {
  
  namingpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbRouteConfig.NamingPath)
}
inline ::std::string* pbRouteConfig::mutable_namingpath() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbRouteConfig.NamingPath)
  return namingpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbRouteConfig::release_namingpath() {
  // @@protoc_insertion_point(field_release:NFrame.pbRouteConfig.NamingPath)
  
  return namingpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbRouteConfig::set_allocated_namingpath(::std::string* namingpath) {
  if (namingpath != NULL) {
    
  } else {
    
  }
  namingpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namingpath);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbRouteConfig.NamingPath)
}

// string RouteAgent = 5;
inline void pbRouteConfig::clear_routeagent() {
  routeagent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbRouteConfig::routeagent() const {
  // @@protoc_insertion_point(field_get:NFrame.pbRouteConfig.RouteAgent)
  return routeagent_.GetNoArena();
}
inline void pbRouteConfig::set_routeagent(const ::std::string& value) {
  
  routeagent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbRouteConfig.RouteAgent)
}
#if LANG_CXX11
inline void pbRouteConfig::set_routeagent(::std::string&& value) {
  
  routeagent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbRouteConfig.RouteAgent)
}
#endif
inline void pbRouteConfig::set_routeagent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  routeagent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbRouteConfig.RouteAgent)
}
inline void pbRouteConfig::set_routeagent(const char* value, size_t size) {
  
  routeagent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbRouteConfig.RouteAgent)
}
inline ::std::string* pbRouteConfig::mutable_routeagent() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbRouteConfig.RouteAgent)
  return routeagent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbRouteConfig::release_routeagent() {
  // @@protoc_insertion_point(field_release:NFrame.pbRouteConfig.RouteAgent)
  
  return routeagent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbRouteConfig::set_allocated_routeagent(::std::string* routeagent) {
  if (routeagent != NULL) {
    
  } else {
    
  }
  routeagent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routeagent);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbRouteConfig.RouteAgent)
}

// -------------------------------------------------------------------

// pbPluginConfig

// uint32 ServerType = 1;
inline void pbPluginConfig::clear_servertype() {
  servertype_ = 0u;
}
inline ::google::protobuf::uint32 pbPluginConfig::servertype() const {
  // @@protoc_insertion_point(field_get:NFrame.pbPluginConfig.ServerType)
  return servertype_;
}
inline void pbPluginConfig::set_servertype(::google::protobuf::uint32 value) {
  
  servertype_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbPluginConfig.ServerType)
}

// repeated string FramePlugins = 2;
inline int pbPluginConfig::frameplugins_size() const {
  return frameplugins_.size();
}
inline void pbPluginConfig::clear_frameplugins() {
  frameplugins_.Clear();
}
inline const ::std::string& pbPluginConfig::frameplugins(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.pbPluginConfig.FramePlugins)
  return frameplugins_.Get(index);
}
inline ::std::string* pbPluginConfig::mutable_frameplugins(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.pbPluginConfig.FramePlugins)
  return frameplugins_.Mutable(index);
}
inline void pbPluginConfig::set_frameplugins(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.pbPluginConfig.FramePlugins)
  frameplugins_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void pbPluginConfig::set_frameplugins(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.pbPluginConfig.FramePlugins)
  frameplugins_.Mutable(index)->assign(std::move(value));
}
#endif
inline void pbPluginConfig::set_frameplugins(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  frameplugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.pbPluginConfig.FramePlugins)
}
inline void pbPluginConfig::set_frameplugins(int index, const char* value, size_t size) {
  frameplugins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbPluginConfig.FramePlugins)
}
inline ::std::string* pbPluginConfig::add_frameplugins() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.pbPluginConfig.FramePlugins)
  return frameplugins_.Add();
}
inline void pbPluginConfig::add_frameplugins(const ::std::string& value) {
  frameplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.pbPluginConfig.FramePlugins)
}
#if LANG_CXX11
inline void pbPluginConfig::add_frameplugins(::std::string&& value) {
  frameplugins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.pbPluginConfig.FramePlugins)
}
#endif
inline void pbPluginConfig::add_frameplugins(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  frameplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.pbPluginConfig.FramePlugins)
}
inline void pbPluginConfig::add_frameplugins(const char* value, size_t size) {
  frameplugins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.pbPluginConfig.FramePlugins)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pbPluginConfig::frameplugins() const {
  // @@protoc_insertion_point(field_list:NFrame.pbPluginConfig.FramePlugins)
  return frameplugins_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pbPluginConfig::mutable_frameplugins() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.pbPluginConfig.FramePlugins)
  return &frameplugins_;
}

// repeated string ServerPlugins = 3;
inline int pbPluginConfig::serverplugins_size() const {
  return serverplugins_.size();
}
inline void pbPluginConfig::clear_serverplugins() {
  serverplugins_.Clear();
}
inline const ::std::string& pbPluginConfig::serverplugins(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.pbPluginConfig.ServerPlugins)
  return serverplugins_.Get(index);
}
inline ::std::string* pbPluginConfig::mutable_serverplugins(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.pbPluginConfig.ServerPlugins)
  return serverplugins_.Mutable(index);
}
inline void pbPluginConfig::set_serverplugins(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.pbPluginConfig.ServerPlugins)
  serverplugins_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void pbPluginConfig::set_serverplugins(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.pbPluginConfig.ServerPlugins)
  serverplugins_.Mutable(index)->assign(std::move(value));
}
#endif
inline void pbPluginConfig::set_serverplugins(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  serverplugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.pbPluginConfig.ServerPlugins)
}
inline void pbPluginConfig::set_serverplugins(int index, const char* value, size_t size) {
  serverplugins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbPluginConfig.ServerPlugins)
}
inline ::std::string* pbPluginConfig::add_serverplugins() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.pbPluginConfig.ServerPlugins)
  return serverplugins_.Add();
}
inline void pbPluginConfig::add_serverplugins(const ::std::string& value) {
  serverplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.pbPluginConfig.ServerPlugins)
}
#if LANG_CXX11
inline void pbPluginConfig::add_serverplugins(::std::string&& value) {
  serverplugins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.pbPluginConfig.ServerPlugins)
}
#endif
inline void pbPluginConfig::add_serverplugins(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  serverplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.pbPluginConfig.ServerPlugins)
}
inline void pbPluginConfig::add_serverplugins(const char* value, size_t size) {
  serverplugins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.pbPluginConfig.ServerPlugins)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pbPluginConfig::serverplugins() const {
  // @@protoc_insertion_point(field_list:NFrame.pbPluginConfig.ServerPlugins)
  return serverplugins_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pbPluginConfig::mutable_serverplugins() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.pbPluginConfig.ServerPlugins)
  return &serverplugins_;
}

// repeated string WorkPlugins = 4;
inline int pbPluginConfig::workplugins_size() const {
  return workplugins_.size();
}
inline void pbPluginConfig::clear_workplugins() {
  workplugins_.Clear();
}
inline const ::std::string& pbPluginConfig::workplugins(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.pbPluginConfig.WorkPlugins)
  return workplugins_.Get(index);
}
inline ::std::string* pbPluginConfig::mutable_workplugins(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.pbPluginConfig.WorkPlugins)
  return workplugins_.Mutable(index);
}
inline void pbPluginConfig::set_workplugins(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.pbPluginConfig.WorkPlugins)
  workplugins_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void pbPluginConfig::set_workplugins(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.pbPluginConfig.WorkPlugins)
  workplugins_.Mutable(index)->assign(std::move(value));
}
#endif
inline void pbPluginConfig::set_workplugins(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  workplugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.pbPluginConfig.WorkPlugins)
}
inline void pbPluginConfig::set_workplugins(int index, const char* value, size_t size) {
  workplugins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbPluginConfig.WorkPlugins)
}
inline ::std::string* pbPluginConfig::add_workplugins() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.pbPluginConfig.WorkPlugins)
  return workplugins_.Add();
}
inline void pbPluginConfig::add_workplugins(const ::std::string& value) {
  workplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.pbPluginConfig.WorkPlugins)
}
#if LANG_CXX11
inline void pbPluginConfig::add_workplugins(::std::string&& value) {
  workplugins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.pbPluginConfig.WorkPlugins)
}
#endif
inline void pbPluginConfig::add_workplugins(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  workplugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.pbPluginConfig.WorkPlugins)
}
inline void pbPluginConfig::add_workplugins(const char* value, size_t size) {
  workplugins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.pbPluginConfig.WorkPlugins)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pbPluginConfig::workplugins() const {
  // @@protoc_insertion_point(field_list:NFrame.pbPluginConfig.WorkPlugins)
  return workplugins_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pbPluginConfig::mutable_workplugins() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.pbPluginConfig.WorkPlugins)
  return &workplugins_;
}

// repeated .NFrame.pbAllServerConfig ServerList = 5;
inline int pbPluginConfig::serverlist_size() const {
  return serverlist_.size();
}
inline void pbPluginConfig::clear_serverlist() {
  serverlist_.Clear();
}
inline ::NFrame::pbAllServerConfig* pbPluginConfig::mutable_serverlist(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.pbPluginConfig.ServerList)
  return serverlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrame::pbAllServerConfig >*
pbPluginConfig::mutable_serverlist() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.pbPluginConfig.ServerList)
  return &serverlist_;
}
inline const ::NFrame::pbAllServerConfig& pbPluginConfig::serverlist(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.pbPluginConfig.ServerList)
  return serverlist_.Get(index);
}
inline ::NFrame::pbAllServerConfig* pbPluginConfig::add_serverlist() {
  // @@protoc_insertion_point(field_add:NFrame.pbPluginConfig.ServerList)
  return serverlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrame::pbAllServerConfig >&
pbPluginConfig::serverlist() const {
  // @@protoc_insertion_point(field_list:NFrame.pbPluginConfig.ServerList)
  return serverlist_;
}

// -------------------------------------------------------------------

// pbAllServerConfig

// string Server = 1;
inline void pbAllServerConfig::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbAllServerConfig::server() const {
  // @@protoc_insertion_point(field_get:NFrame.pbAllServerConfig.Server)
  return server_.GetNoArena();
}
inline void pbAllServerConfig::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbAllServerConfig.Server)
}
#if LANG_CXX11
inline void pbAllServerConfig::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbAllServerConfig.Server)
}
#endif
inline void pbAllServerConfig::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbAllServerConfig.Server)
}
inline void pbAllServerConfig::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbAllServerConfig.Server)
}
inline ::std::string* pbAllServerConfig::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbAllServerConfig.Server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbAllServerConfig::release_server() {
  // @@protoc_insertion_point(field_release:NFrame.pbAllServerConfig.Server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbAllServerConfig::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbAllServerConfig.Server)
}

// string ID = 2;
inline void pbAllServerConfig::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbAllServerConfig::id() const {
  // @@protoc_insertion_point(field_get:NFrame.pbAllServerConfig.ID)
  return id_.GetNoArena();
}
inline void pbAllServerConfig::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbAllServerConfig.ID)
}
#if LANG_CXX11
inline void pbAllServerConfig::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbAllServerConfig.ID)
}
#endif
inline void pbAllServerConfig::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbAllServerConfig.ID)
}
inline void pbAllServerConfig::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbAllServerConfig.ID)
}
inline ::std::string* pbAllServerConfig::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbAllServerConfig.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbAllServerConfig::release_id() {
  // @@protoc_insertion_point(field_release:NFrame.pbAllServerConfig.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbAllServerConfig::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbAllServerConfig.ID)
}

// uint32 ServerType = 3;
inline void pbAllServerConfig::clear_servertype() {
  servertype_ = 0u;
}
inline ::google::protobuf::uint32 pbAllServerConfig::servertype() const {
  // @@protoc_insertion_point(field_get:NFrame.pbAllServerConfig.ServerType)
  return servertype_;
}
inline void pbAllServerConfig::set_servertype(::google::protobuf::uint32 value) {
  
  servertype_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbAllServerConfig.ServerType)
}

// -------------------------------------------------------------------

// pbTableConfig

// string TableName = 1;
inline void pbTableConfig::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbTableConfig::tablename() const {
  // @@protoc_insertion_point(field_get:NFrame.pbTableConfig.TableName)
  return tablename_.GetNoArena();
}
inline void pbTableConfig::set_tablename(const ::std::string& value) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbTableConfig.TableName)
}
#if LANG_CXX11
inline void pbTableConfig::set_tablename(::std::string&& value) {
  
  tablename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbTableConfig.TableName)
}
#endif
inline void pbTableConfig::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbTableConfig.TableName)
}
inline void pbTableConfig::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbTableConfig.TableName)
}
inline ::std::string* pbTableConfig::mutable_tablename() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbTableConfig.TableName)
  return tablename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTableConfig::release_tablename() {
  // @@protoc_insertion_point(field_release:NFrame.pbTableConfig.TableName)
  
  return tablename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTableConfig::set_allocated_tablename(::std::string* tablename) {
  if (tablename != NULL) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbTableConfig.TableName)
}

// uint32 TableCount = 2;
inline void pbTableConfig::clear_tablecount() {
  tablecount_ = 0u;
}
inline ::google::protobuf::uint32 pbTableConfig::tablecount() const {
  // @@protoc_insertion_point(field_get:NFrame.pbTableConfig.TableCount)
  return tablecount_;
}
inline void pbTableConfig::set_tablecount(::google::protobuf::uint32 value) {
  
  tablecount_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbTableConfig.TableCount)
}

// bool Cache = 3;
inline void pbTableConfig::clear_cache() {
  cache_ = false;
}
inline bool pbTableConfig::cache() const {
  // @@protoc_insertion_point(field_get:NFrame.pbTableConfig.Cache)
  return cache_;
}
inline void pbTableConfig::set_cache(bool value) {
  
  cache_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbTableConfig.Cache)
}

// -------------------------------------------------------------------

// pbEncryptConfig

// string PublicAuthEncryptkey = 1;
inline void pbEncryptConfig::clear_publicauthencryptkey() {
  publicauthencryptkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbEncryptConfig::publicauthencryptkey() const {
  // @@protoc_insertion_point(field_get:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
  return publicauthencryptkey_.GetNoArena();
}
inline void pbEncryptConfig::set_publicauthencryptkey(const ::std::string& value) {
  
  publicauthencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
}
#if LANG_CXX11
inline void pbEncryptConfig::set_publicauthencryptkey(::std::string&& value) {
  
  publicauthencryptkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
}
#endif
inline void pbEncryptConfig::set_publicauthencryptkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publicauthencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
}
inline void pbEncryptConfig::set_publicauthencryptkey(const char* value, size_t size) {
  
  publicauthencryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
}
inline ::std::string* pbEncryptConfig::mutable_publicauthencryptkey() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
  return publicauthencryptkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbEncryptConfig::release_publicauthencryptkey() {
  // @@protoc_insertion_point(field_release:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
  
  return publicauthencryptkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbEncryptConfig::set_allocated_publicauthencryptkey(::std::string* publicauthencryptkey) {
  if (publicauthencryptkey != NULL) {
    
  } else {
    
  }
  publicauthencryptkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publicauthencryptkey);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbEncryptConfig.PublicAuthEncryptkey)
}

// uint32 EncryptPolicy = 10;
inline void pbEncryptConfig::clear_encryptpolicy() {
  encryptpolicy_ = 0u;
}
inline ::google::protobuf::uint32 pbEncryptConfig::encryptpolicy() const {
  // @@protoc_insertion_point(field_get:NFrame.pbEncryptConfig.EncryptPolicy)
  return encryptpolicy_;
}
inline void pbEncryptConfig::set_encryptpolicy(::google::protobuf::uint32 value) {
  
  encryptpolicy_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbEncryptConfig.EncryptPolicy)
}

// uint32 CompressPolicy = 11;
inline void pbEncryptConfig::clear_compresspolicy() {
  compresspolicy_ = 0u;
}
inline ::google::protobuf::uint32 pbEncryptConfig::compresspolicy() const {
  // @@protoc_insertion_point(field_get:NFrame.pbEncryptConfig.CompressPolicy)
  return compresspolicy_;
}
inline void pbEncryptConfig::set_compresspolicy(::google::protobuf::uint32 value) {
  
  compresspolicy_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbEncryptConfig.CompressPolicy)
}

// string EncrypyKey = 12;
inline void pbEncryptConfig::clear_encrypykey() {
  encrypykey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbEncryptConfig::encrypykey() const {
  // @@protoc_insertion_point(field_get:NFrame.pbEncryptConfig.EncrypyKey)
  return encrypykey_.GetNoArena();
}
inline void pbEncryptConfig::set_encrypykey(const ::std::string& value) {
  
  encrypykey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbEncryptConfig.EncrypyKey)
}
#if LANG_CXX11
inline void pbEncryptConfig::set_encrypykey(::std::string&& value) {
  
  encrypykey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbEncryptConfig.EncrypyKey)
}
#endif
inline void pbEncryptConfig::set_encrypykey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  encrypykey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbEncryptConfig.EncrypyKey)
}
inline void pbEncryptConfig::set_encrypykey(const char* value, size_t size) {
  
  encrypykey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbEncryptConfig.EncrypyKey)
}
inline ::std::string* pbEncryptConfig::mutable_encrypykey() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbEncryptConfig.EncrypyKey)
  return encrypykey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbEncryptConfig::release_encrypykey() {
  // @@protoc_insertion_point(field_release:NFrame.pbEncryptConfig.EncrypyKey)
  
  return encrypykey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbEncryptConfig::set_allocated_encrypykey(::std::string* encrypykey) {
  if (encrypykey != NULL) {
    
  } else {
    
  }
  encrypykey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypykey);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbEncryptConfig.EncrypyKey)
}

// -------------------------------------------------------------------

// pbNFServerConfig

// string ServerId = 1;
inline void pbNFServerConfig::clear_serverid() {
  serverid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::serverid() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ServerId)
  return serverid_.GetNoArena();
}
inline void pbNFServerConfig::set_serverid(const ::std::string& value) {
  
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ServerId)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_serverid(::std::string&& value) {
  
  serverid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.ServerId)
}
#endif
inline void pbNFServerConfig::set_serverid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.ServerId)
}
inline void pbNFServerConfig::set_serverid(const char* value, size_t size) {
  
  serverid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.ServerId)
}
inline ::std::string* pbNFServerConfig::mutable_serverid() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.ServerId)
  return serverid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_serverid() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.ServerId)
  
  return serverid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_serverid(::std::string* serverid) {
  if (serverid != NULL) {
    
  } else {
    
  }
  serverid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverid);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.ServerId)
}

// uint32 ServerType = 2;
inline void pbNFServerConfig::clear_servertype() {
  servertype_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::servertype() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ServerType)
  return servertype_;
}
inline void pbNFServerConfig::set_servertype(::google::protobuf::uint32 value) {
  
  servertype_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ServerType)
}

// string ServerName = 3;
inline void pbNFServerConfig::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::servername() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ServerName)
  return servername_.GetNoArena();
}
inline void pbNFServerConfig::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ServerName)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.ServerName)
}
#endif
inline void pbNFServerConfig::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.ServerName)
}
inline void pbNFServerConfig::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.ServerName)
}
inline ::std::string* pbNFServerConfig::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_servername() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.ServerName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.ServerName)
}

// uint32 BusId = 4;
inline void pbNFServerConfig::clear_busid() {
  busid_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::busid() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.BusId)
  return busid_;
}
inline void pbNFServerConfig::set_busid(::google::protobuf::uint32 value) {
  
  busid_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.BusId)
}

// uint32 BusLength = 5;
inline void pbNFServerConfig::clear_buslength() {
  buslength_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::buslength() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.BusLength)
  return buslength_;
}
inline void pbNFServerConfig::set_buslength(::google::protobuf::uint32 value) {
  
  buslength_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.BusLength)
}

// string LinkMode = 7;
inline void pbNFServerConfig::clear_linkmode() {
  linkmode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::linkmode() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.LinkMode)
  return linkmode_.GetNoArena();
}
inline void pbNFServerConfig::set_linkmode(const ::std::string& value) {
  
  linkmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.LinkMode)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_linkmode(::std::string&& value) {
  
  linkmode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.LinkMode)
}
#endif
inline void pbNFServerConfig::set_linkmode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  linkmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.LinkMode)
}
inline void pbNFServerConfig::set_linkmode(const char* value, size_t size) {
  
  linkmode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.LinkMode)
}
inline ::std::string* pbNFServerConfig::mutable_linkmode() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.LinkMode)
  return linkmode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_linkmode() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.LinkMode)
  
  return linkmode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_linkmode(::std::string* linkmode) {
  if (linkmode != NULL) {
    
  } else {
    
  }
  linkmode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkmode);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.LinkMode)
}

// string Url = 8;
inline void pbNFServerConfig::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::url() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.Url)
  return url_.GetNoArena();
}
inline void pbNFServerConfig::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.Url)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.Url)
}
#endif
inline void pbNFServerConfig::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.Url)
}
inline void pbNFServerConfig::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.Url)
}
inline ::std::string* pbNFServerConfig::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_url() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.Url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.Url)
}

// uint32 IdleSleepUS = 9;
inline void pbNFServerConfig::clear_idlesleepus() {
  idlesleepus_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::idlesleepus() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.IdleSleepUS)
  return idlesleepus_;
}
inline void pbNFServerConfig::set_idlesleepus(::google::protobuf::uint32 value) {
  
  idlesleepus_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.IdleSleepUS)
}

// uint32 HandleMsgNumPerFrame = 10;
inline void pbNFServerConfig::clear_handlemsgnumperframe() {
  handlemsgnumperframe_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::handlemsgnumperframe() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.HandleMsgNumPerFrame)
  return handlemsgnumperframe_;
}
inline void pbNFServerConfig::set_handlemsgnumperframe(::google::protobuf::uint32 value) {
  
  handlemsgnumperframe_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.HandleMsgNumPerFrame)
}

// uint64 ServerOpenTime = 11;
inline void pbNFServerConfig::clear_serveropentime() {
  serveropentime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 pbNFServerConfig::serveropentime() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ServerOpenTime)
  return serveropentime_;
}
inline void pbNFServerConfig::set_serveropentime(::google::protobuf::uint64 value) {
  
  serveropentime_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ServerOpenTime)
}

// string LoadProtoDs = 12;
inline void pbNFServerConfig::clear_loadprotods() {
  loadprotods_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::loadprotods() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.LoadProtoDs)
  return loadprotods_.GetNoArena();
}
inline void pbNFServerConfig::set_loadprotods(const ::std::string& value) {
  
  loadprotods_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.LoadProtoDs)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_loadprotods(::std::string&& value) {
  
  loadprotods_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.LoadProtoDs)
}
#endif
inline void pbNFServerConfig::set_loadprotods(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loadprotods_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.LoadProtoDs)
}
inline void pbNFServerConfig::set_loadprotods(const char* value, size_t size) {
  
  loadprotods_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.LoadProtoDs)
}
inline ::std::string* pbNFServerConfig::mutable_loadprotods() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.LoadProtoDs)
  return loadprotods_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_loadprotods() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.LoadProtoDs)
  
  return loadprotods_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_loadprotods(::std::string* loadprotods) {
  if (loadprotods != NULL) {
    
  } else {
    
  }
  loadprotods_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loadprotods);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.LoadProtoDs)
}

// bool CrossServer = 13;
inline void pbNFServerConfig::clear_crossserver() {
  crossserver_ = false;
}
inline bool pbNFServerConfig::crossserver() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.CrossServer)
  return crossserver_;
}
inline void pbNFServerConfig::set_crossserver(bool value) {
  
  crossserver_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.CrossServer)
}

// string ServerIp = 20;
inline void pbNFServerConfig::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::serverip() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ServerIp)
  return serverip_.GetNoArena();
}
inline void pbNFServerConfig::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ServerIp)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_serverip(::std::string&& value) {
  
  serverip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.ServerIp)
}
#endif
inline void pbNFServerConfig::set_serverip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.ServerIp)
}
inline void pbNFServerConfig::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.ServerIp)
}
inline ::std::string* pbNFServerConfig::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.ServerIp)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_serverip() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.ServerIp)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.ServerIp)
}

// uint32 ServerPort = 21;
inline void pbNFServerConfig::clear_serverport() {
  serverport_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::serverport() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ServerPort)
  return serverport_;
}
inline void pbNFServerConfig::set_serverport(::google::protobuf::uint32 value) {
  
  serverport_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ServerPort)
}

// string ExternalServerIp = 22;
inline void pbNFServerConfig::clear_externalserverip() {
  externalserverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::externalserverip() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ExternalServerIp)
  return externalserverip_.GetNoArena();
}
inline void pbNFServerConfig::set_externalserverip(const ::std::string& value) {
  
  externalserverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ExternalServerIp)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_externalserverip(::std::string&& value) {
  
  externalserverip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.ExternalServerIp)
}
#endif
inline void pbNFServerConfig::set_externalserverip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  externalserverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.ExternalServerIp)
}
inline void pbNFServerConfig::set_externalserverip(const char* value, size_t size) {
  
  externalserverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.ExternalServerIp)
}
inline ::std::string* pbNFServerConfig::mutable_externalserverip() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.ExternalServerIp)
  return externalserverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_externalserverip() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.ExternalServerIp)
  
  return externalserverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_externalserverip(::std::string* externalserverip) {
  if (externalserverip != NULL) {
    
  } else {
    
  }
  externalserverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), externalserverip);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.ExternalServerIp)
}

// uint32 ExternalServerPort = 23;
inline void pbNFServerConfig::clear_externalserverport() {
  externalserverport_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::externalserverport() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ExternalServerPort)
  return externalserverport_;
}
inline void pbNFServerConfig::set_externalserverport(::google::protobuf::uint32 value) {
  
  externalserverport_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ExternalServerPort)
}

// uint32 HttpPort = 24;
inline void pbNFServerConfig::clear_httpport() {
  httpport_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::httpport() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.HttpPort)
  return httpport_;
}
inline void pbNFServerConfig::set_httpport(::google::protobuf::uint32 value) {
  
  httpport_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.HttpPort)
}

// uint32 MaxConnectNum = 25;
inline void pbNFServerConfig::clear_maxconnectnum() {
  maxconnectnum_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::maxconnectnum() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.MaxConnectNum)
  return maxconnectnum_;
}
inline void pbNFServerConfig::set_maxconnectnum(::google::protobuf::uint32 value) {
  
  maxconnectnum_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.MaxConnectNum)
}

// uint32 WorkThreadNum = 26;
inline void pbNFServerConfig::clear_workthreadnum() {
  workthreadnum_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::workthreadnum() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.WorkThreadNum)
  return workthreadnum_;
}
inline void pbNFServerConfig::set_workthreadnum(::google::protobuf::uint32 value) {
  
  workthreadnum_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.WorkThreadNum)
}

// uint32 NetThreadNum = 27;
inline void pbNFServerConfig::clear_netthreadnum() {
  netthreadnum_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::netthreadnum() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.NetThreadNum)
  return netthreadnum_;
}
inline void pbNFServerConfig::set_netthreadnum(::google::protobuf::uint32 value) {
  
  netthreadnum_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.NetThreadNum)
}

// bool Security = 28;
inline void pbNFServerConfig::clear_security() {
  security_ = false;
}
inline bool pbNFServerConfig::security() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.Security)
  return security_;
}
inline void pbNFServerConfig::set_security(bool value) {
  
  security_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.Security)
}

// bool WebSocket = 29;
inline void pbNFServerConfig::clear_websocket() {
  websocket_ = false;
}
inline bool pbNFServerConfig::websocket() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.WebSocket)
  return websocket_;
}
inline void pbNFServerConfig::set_websocket(bool value) {
  
  websocket_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.WebSocket)
}

// uint32 ParseType = 30;
inline void pbNFServerConfig::clear_parsetype() {
  parsetype_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::parsetype() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ParseType)
  return parsetype_;
}
inline void pbNFServerConfig::set_parsetype(::google::protobuf::uint32 value) {
  
  parsetype_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ParseType)
}

// .NFrame.pbRouteConfig RouteConfig = 50;
inline bool pbNFServerConfig::has_routeconfig() const {
  return this != internal_default_instance() && routeconfig_ != NULL;
}
inline void pbNFServerConfig::clear_routeconfig() {
  if (GetArenaNoVirtual() == NULL && routeconfig_ != NULL) {
    delete routeconfig_;
  }
  routeconfig_ = NULL;
}
inline const ::NFrame::pbRouteConfig& pbNFServerConfig::_internal_routeconfig() const {
  return *routeconfig_;
}
inline const ::NFrame::pbRouteConfig& pbNFServerConfig::routeconfig() const {
  const ::NFrame::pbRouteConfig* p = routeconfig_;
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.RouteConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::pbRouteConfig*>(
      &::NFrame::_pbRouteConfig_default_instance_);
}
inline ::NFrame::pbRouteConfig* pbNFServerConfig::release_routeconfig() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.RouteConfig)
  
  ::NFrame::pbRouteConfig* temp = routeconfig_;
  routeconfig_ = NULL;
  return temp;
}
inline ::NFrame::pbRouteConfig* pbNFServerConfig::mutable_routeconfig() {
  
  if (routeconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::pbRouteConfig>(GetArenaNoVirtual());
    routeconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.RouteConfig)
  return routeconfig_;
}
inline void pbNFServerConfig::set_allocated_routeconfig(::NFrame::pbRouteConfig* routeconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete routeconfig_;
  }
  if (routeconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      routeconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, routeconfig, submessage_arena);
    }
    
  } else {
    
  }
  routeconfig_ = routeconfig;
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.RouteConfig)
}

// .NFrame.pbMysqlConfig MysqlConfig = 70;
inline bool pbNFServerConfig::has_mysqlconfig() const {
  return this != internal_default_instance() && mysqlconfig_ != NULL;
}
inline void pbNFServerConfig::clear_mysqlconfig() {
  if (GetArenaNoVirtual() == NULL && mysqlconfig_ != NULL) {
    delete mysqlconfig_;
  }
  mysqlconfig_ = NULL;
}
inline const ::NFrame::pbMysqlConfig& pbNFServerConfig::_internal_mysqlconfig() const {
  return *mysqlconfig_;
}
inline const ::NFrame::pbMysqlConfig& pbNFServerConfig::mysqlconfig() const {
  const ::NFrame::pbMysqlConfig* p = mysqlconfig_;
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.MysqlConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::pbMysqlConfig*>(
      &::NFrame::_pbMysqlConfig_default_instance_);
}
inline ::NFrame::pbMysqlConfig* pbNFServerConfig::release_mysqlconfig() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.MysqlConfig)
  
  ::NFrame::pbMysqlConfig* temp = mysqlconfig_;
  mysqlconfig_ = NULL;
  return temp;
}
inline ::NFrame::pbMysqlConfig* pbNFServerConfig::mutable_mysqlconfig() {
  
  if (mysqlconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::pbMysqlConfig>(GetArenaNoVirtual());
    mysqlconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.MysqlConfig)
  return mysqlconfig_;
}
inline void pbNFServerConfig::set_allocated_mysqlconfig(::NFrame::pbMysqlConfig* mysqlconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mysqlconfig_;
  }
  if (mysqlconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mysqlconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mysqlconfig, submessage_arena);
    }
    
  } else {
    
  }
  mysqlconfig_ = mysqlconfig;
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.MysqlConfig)
}

// string DefaultDBName = 75;
inline void pbNFServerConfig::clear_defaultdbname() {
  defaultdbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::defaultdbname() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.DefaultDBName)
  return defaultdbname_.GetNoArena();
}
inline void pbNFServerConfig::set_defaultdbname(const ::std::string& value) {
  
  defaultdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.DefaultDBName)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_defaultdbname(::std::string&& value) {
  
  defaultdbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.DefaultDBName)
}
#endif
inline void pbNFServerConfig::set_defaultdbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  defaultdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.DefaultDBName)
}
inline void pbNFServerConfig::set_defaultdbname(const char* value, size_t size) {
  
  defaultdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.DefaultDBName)
}
inline ::std::string* pbNFServerConfig::mutable_defaultdbname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.DefaultDBName)
  return defaultdbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_defaultdbname() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.DefaultDBName)
  
  return defaultdbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_defaultdbname(::std::string* defaultdbname) {
  if (defaultdbname != NULL) {
    
  } else {
    
  }
  defaultdbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), defaultdbname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.DefaultDBName)
}

// string CrossDBName = 76;
inline void pbNFServerConfig::clear_crossdbname() {
  crossdbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::crossdbname() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.CrossDBName)
  return crossdbname_.GetNoArena();
}
inline void pbNFServerConfig::set_crossdbname(const ::std::string& value) {
  
  crossdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.CrossDBName)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_crossdbname(::std::string&& value) {
  
  crossdbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.CrossDBName)
}
#endif
inline void pbNFServerConfig::set_crossdbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  crossdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.CrossDBName)
}
inline void pbNFServerConfig::set_crossdbname(const char* value, size_t size) {
  
  crossdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.CrossDBName)
}
inline ::std::string* pbNFServerConfig::mutable_crossdbname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.CrossDBName)
  return crossdbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_crossdbname() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.CrossDBName)
  
  return crossdbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_crossdbname(::std::string* crossdbname) {
  if (crossdbname != NULL) {
    
  } else {
    
  }
  crossdbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crossdbname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.CrossDBName)
}

// .NFrame.pbRedisConfig RedisConfig = 80;
inline bool pbNFServerConfig::has_redisconfig() const {
  return this != internal_default_instance() && redisconfig_ != NULL;
}
inline void pbNFServerConfig::clear_redisconfig() {
  if (GetArenaNoVirtual() == NULL && redisconfig_ != NULL) {
    delete redisconfig_;
  }
  redisconfig_ = NULL;
}
inline const ::NFrame::pbRedisConfig& pbNFServerConfig::_internal_redisconfig() const {
  return *redisconfig_;
}
inline const ::NFrame::pbRedisConfig& pbNFServerConfig::redisconfig() const {
  const ::NFrame::pbRedisConfig* p = redisconfig_;
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.RedisConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::pbRedisConfig*>(
      &::NFrame::_pbRedisConfig_default_instance_);
}
inline ::NFrame::pbRedisConfig* pbNFServerConfig::release_redisconfig() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.RedisConfig)
  
  ::NFrame::pbRedisConfig* temp = redisconfig_;
  redisconfig_ = NULL;
  return temp;
}
inline ::NFrame::pbRedisConfig* pbNFServerConfig::mutable_redisconfig() {
  
  if (redisconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::pbRedisConfig>(GetArenaNoVirtual());
    redisconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.RedisConfig)
  return redisconfig_;
}
inline void pbNFServerConfig::set_allocated_redisconfig(::NFrame::pbRedisConfig* redisconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete redisconfig_;
  }
  if (redisconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      redisconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, redisconfig, submessage_arena);
    }
    
  } else {
    
  }
  redisconfig_ = redisconfig;
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.RedisConfig)
}

// string sendEmail = 91;
inline void pbNFServerConfig::clear_sendemail() {
  sendemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::sendemail() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.sendEmail)
  return sendemail_.GetNoArena();
}
inline void pbNFServerConfig::set_sendemail(const ::std::string& value) {
  
  sendemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.sendEmail)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_sendemail(::std::string&& value) {
  
  sendemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.sendEmail)
}
#endif
inline void pbNFServerConfig::set_sendemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.sendEmail)
}
inline void pbNFServerConfig::set_sendemail(const char* value, size_t size) {
  
  sendemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.sendEmail)
}
inline ::std::string* pbNFServerConfig::mutable_sendemail() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.sendEmail)
  return sendemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_sendemail() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.sendEmail)
  
  return sendemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_sendemail(::std::string* sendemail) {
  if (sendemail != NULL) {
    
  } else {
    
  }
  sendemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendemail);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.sendEmail)
}

// string sendEmailPass = 92;
inline void pbNFServerConfig::clear_sendemailpass() {
  sendemailpass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::sendemailpass() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.sendEmailPass)
  return sendemailpass_.GetNoArena();
}
inline void pbNFServerConfig::set_sendemailpass(const ::std::string& value) {
  
  sendemailpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.sendEmailPass)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_sendemailpass(::std::string&& value) {
  
  sendemailpass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.sendEmailPass)
}
#endif
inline void pbNFServerConfig::set_sendemailpass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendemailpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.sendEmailPass)
}
inline void pbNFServerConfig::set_sendemailpass(const char* value, size_t size) {
  
  sendemailpass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.sendEmailPass)
}
inline ::std::string* pbNFServerConfig::mutable_sendemailpass() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.sendEmailPass)
  return sendemailpass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_sendemailpass() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.sendEmailPass)
  
  return sendemailpass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_sendemailpass(::std::string* sendemailpass) {
  if (sendemailpass != NULL) {
    
  } else {
    
  }
  sendemailpass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendemailpass);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.sendEmailPass)
}

// string sendEmailUrl = 93;
inline void pbNFServerConfig::clear_sendemailurl() {
  sendemailurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::sendemailurl() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.sendEmailUrl)
  return sendemailurl_.GetNoArena();
}
inline void pbNFServerConfig::set_sendemailurl(const ::std::string& value) {
  
  sendemailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.sendEmailUrl)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_sendemailurl(::std::string&& value) {
  
  sendemailurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.sendEmailUrl)
}
#endif
inline void pbNFServerConfig::set_sendemailurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendemailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.sendEmailUrl)
}
inline void pbNFServerConfig::set_sendemailurl(const char* value, size_t size) {
  
  sendemailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.sendEmailUrl)
}
inline ::std::string* pbNFServerConfig::mutable_sendemailurl() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.sendEmailUrl)
  return sendemailurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_sendemailurl() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.sendEmailUrl)
  
  return sendemailurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_sendemailurl(::std::string* sendemailurl) {
  if (sendemailurl != NULL) {
    
  } else {
    
  }
  sendemailurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendemailurl);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.sendEmailUrl)
}

// string sendEmailPort = 94;
inline void pbNFServerConfig::clear_sendemailport() {
  sendemailport_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::sendemailport() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.sendEmailPort)
  return sendemailport_.GetNoArena();
}
inline void pbNFServerConfig::set_sendemailport(const ::std::string& value) {
  
  sendemailport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.sendEmailPort)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_sendemailport(::std::string&& value) {
  
  sendemailport_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.sendEmailPort)
}
#endif
inline void pbNFServerConfig::set_sendemailport(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendemailport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.sendEmailPort)
}
inline void pbNFServerConfig::set_sendemailport(const char* value, size_t size) {
  
  sendemailport_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.sendEmailPort)
}
inline ::std::string* pbNFServerConfig::mutable_sendemailport() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.sendEmailPort)
  return sendemailport_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_sendemailport() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.sendEmailPort)
  
  return sendemailport_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_sendemailport(::std::string* sendemailport) {
  if (sendemailport != NULL) {
    
  } else {
    
  }
  sendemailport_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendemailport);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.sendEmailPort)
}

// string recvEmail = 95;
inline void pbNFServerConfig::clear_recvemail() {
  recvemail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::recvemail() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.recvEmail)
  return recvemail_.GetNoArena();
}
inline void pbNFServerConfig::set_recvemail(const ::std::string& value) {
  
  recvemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.recvEmail)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_recvemail(::std::string&& value) {
  
  recvemail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.recvEmail)
}
#endif
inline void pbNFServerConfig::set_recvemail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recvemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.recvEmail)
}
inline void pbNFServerConfig::set_recvemail(const char* value, size_t size) {
  
  recvemail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.recvEmail)
}
inline ::std::string* pbNFServerConfig::mutable_recvemail() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.recvEmail)
  return recvemail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_recvemail() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.recvEmail)
  
  return recvemail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_recvemail(::std::string* recvemail) {
  if (recvemail != NULL) {
    
  } else {
    
  }
  recvemail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recvemail);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.recvEmail)
}

// string wxWorkdRobot = 96;
inline void pbNFServerConfig::clear_wxworkdrobot() {
  wxworkdrobot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& pbNFServerConfig::wxworkdrobot() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.wxWorkdRobot)
  return wxworkdrobot_.GetNoArena();
}
inline void pbNFServerConfig::set_wxworkdrobot(const ::std::string& value) {
  
  wxworkdrobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.wxWorkdRobot)
}
#if LANG_CXX11
inline void pbNFServerConfig::set_wxworkdrobot(::std::string&& value) {
  
  wxworkdrobot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.pbNFServerConfig.wxWorkdRobot)
}
#endif
inline void pbNFServerConfig::set_wxworkdrobot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wxworkdrobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.pbNFServerConfig.wxWorkdRobot)
}
inline void pbNFServerConfig::set_wxworkdrobot(const char* value, size_t size) {
  
  wxworkdrobot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.pbNFServerConfig.wxWorkdRobot)
}
inline ::std::string* pbNFServerConfig::mutable_wxworkdrobot() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.wxWorkdRobot)
  return wxworkdrobot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbNFServerConfig::release_wxworkdrobot() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.wxWorkdRobot)
  
  return wxworkdrobot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbNFServerConfig::set_allocated_wxworkdrobot(::std::string* wxworkdrobot) {
  if (wxworkdrobot != NULL) {
    
  } else {
    
  }
  wxworkdrobot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxworkdrobot);
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.wxWorkdRobot)
}

// uint32 MaxOnlinePlayerNum = 100;
inline void pbNFServerConfig::clear_maxonlineplayernum() {
  maxonlineplayernum_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::maxonlineplayernum() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.MaxOnlinePlayerNum)
  return maxonlineplayernum_;
}
inline void pbNFServerConfig::set_maxonlineplayernum(::google::protobuf::uint32 value) {
  
  maxonlineplayernum_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.MaxOnlinePlayerNum)
}

// uint32 HeartBeatTimeout = 101;
inline void pbNFServerConfig::clear_heartbeattimeout() {
  heartbeattimeout_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::heartbeattimeout() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.HeartBeatTimeout)
  return heartbeattimeout_;
}
inline void pbNFServerConfig::set_heartbeattimeout(::google::protobuf::uint32 value) {
  
  heartbeattimeout_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.HeartBeatTimeout)
}

// uint32 ClientKeepAliveTimeout = 102;
inline void pbNFServerConfig::clear_clientkeepalivetimeout() {
  clientkeepalivetimeout_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::clientkeepalivetimeout() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ClientKeepAliveTimeout)
  return clientkeepalivetimeout_;
}
inline void pbNFServerConfig::set_clientkeepalivetimeout(::google::protobuf::uint32 value) {
  
  clientkeepalivetimeout_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ClientKeepAliveTimeout)
}

// uint32 ClientVersion = 103;
inline void pbNFServerConfig::clear_clientversion() {
  clientversion_ = 0u;
}
inline ::google::protobuf::uint32 pbNFServerConfig::clientversion() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.ClientVersion)
  return clientversion_;
}
inline void pbNFServerConfig::set_clientversion(::google::protobuf::uint32 value) {
  
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.ClientVersion)
}

// bool IsNoToken = 104;
inline void pbNFServerConfig::clear_isnotoken() {
  isnotoken_ = false;
}
inline bool pbNFServerConfig::isnotoken() const {
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.IsNoToken)
  return isnotoken_;
}
inline void pbNFServerConfig::set_isnotoken(bool value) {
  
  isnotoken_ = value;
  // @@protoc_insertion_point(field_set:NFrame.pbNFServerConfig.IsNoToken)
}

// .NFrame.pbEncryptConfig EncryptConfig = 110;
inline bool pbNFServerConfig::has_encryptconfig() const {
  return this != internal_default_instance() && encryptconfig_ != NULL;
}
inline void pbNFServerConfig::clear_encryptconfig() {
  if (GetArenaNoVirtual() == NULL && encryptconfig_ != NULL) {
    delete encryptconfig_;
  }
  encryptconfig_ = NULL;
}
inline const ::NFrame::pbEncryptConfig& pbNFServerConfig::_internal_encryptconfig() const {
  return *encryptconfig_;
}
inline const ::NFrame::pbEncryptConfig& pbNFServerConfig::encryptconfig() const {
  const ::NFrame::pbEncryptConfig* p = encryptconfig_;
  // @@protoc_insertion_point(field_get:NFrame.pbNFServerConfig.EncryptConfig)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::pbEncryptConfig*>(
      &::NFrame::_pbEncryptConfig_default_instance_);
}
inline ::NFrame::pbEncryptConfig* pbNFServerConfig::release_encryptconfig() {
  // @@protoc_insertion_point(field_release:NFrame.pbNFServerConfig.EncryptConfig)
  
  ::NFrame::pbEncryptConfig* temp = encryptconfig_;
  encryptconfig_ = NULL;
  return temp;
}
inline ::NFrame::pbEncryptConfig* pbNFServerConfig::mutable_encryptconfig() {
  
  if (encryptconfig_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::pbEncryptConfig>(GetArenaNoVirtual());
    encryptconfig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.pbNFServerConfig.EncryptConfig)
  return encryptconfig_;
}
inline void pbNFServerConfig::set_allocated_encryptconfig(::NFrame::pbEncryptConfig* encryptconfig) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete encryptconfig_;
  }
  if (encryptconfig) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      encryptconfig = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, encryptconfig, submessage_arena);
    }
    
  } else {
    
  }
  encryptconfig_ = encryptconfig;
  // @@protoc_insertion_point(field_set_allocated:NFrame.pbNFServerConfig.EncryptConfig)
}

// -------------------------------------------------------------------

// wxWorkRobotText

// string content = 1;
inline void wxWorkRobotText::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& wxWorkRobotText::content() const {
  // @@protoc_insertion_point(field_get:NFrame.wxWorkRobotText.content)
  return content_.GetNoArena();
}
inline void wxWorkRobotText::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.wxWorkRobotText.content)
}
#if LANG_CXX11
inline void wxWorkRobotText::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.wxWorkRobotText.content)
}
#endif
inline void wxWorkRobotText::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.wxWorkRobotText.content)
}
inline void wxWorkRobotText::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.wxWorkRobotText.content)
}
inline ::std::string* wxWorkRobotText::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.wxWorkRobotText.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wxWorkRobotText::release_content() {
  // @@protoc_insertion_point(field_release:NFrame.wxWorkRobotText.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wxWorkRobotText::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:NFrame.wxWorkRobotText.content)
}

// repeated string mentioned_list = 2;
inline int wxWorkRobotText::mentioned_list_size() const {
  return mentioned_list_.size();
}
inline void wxWorkRobotText::clear_mentioned_list() {
  mentioned_list_.Clear();
}
inline const ::std::string& wxWorkRobotText::mentioned_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.wxWorkRobotText.mentioned_list)
  return mentioned_list_.Get(index);
}
inline ::std::string* wxWorkRobotText::mutable_mentioned_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.wxWorkRobotText.mentioned_list)
  return mentioned_list_.Mutable(index);
}
inline void wxWorkRobotText::set_mentioned_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.wxWorkRobotText.mentioned_list)
  mentioned_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotText::set_mentioned_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.wxWorkRobotText.mentioned_list)
  mentioned_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotText::set_mentioned_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mentioned_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.wxWorkRobotText.mentioned_list)
}
inline void wxWorkRobotText::set_mentioned_list(int index, const char* value, size_t size) {
  mentioned_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.wxWorkRobotText.mentioned_list)
}
inline ::std::string* wxWorkRobotText::add_mentioned_list() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.wxWorkRobotText.mentioned_list)
  return mentioned_list_.Add();
}
inline void wxWorkRobotText::add_mentioned_list(const ::std::string& value) {
  mentioned_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.wxWorkRobotText.mentioned_list)
}
#if LANG_CXX11
inline void wxWorkRobotText::add_mentioned_list(::std::string&& value) {
  mentioned_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.wxWorkRobotText.mentioned_list)
}
#endif
inline void wxWorkRobotText::add_mentioned_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mentioned_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.wxWorkRobotText.mentioned_list)
}
inline void wxWorkRobotText::add_mentioned_list(const char* value, size_t size) {
  mentioned_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.wxWorkRobotText.mentioned_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotText::mentioned_list() const {
  // @@protoc_insertion_point(field_list:NFrame.wxWorkRobotText.mentioned_list)
  return mentioned_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotText::mutable_mentioned_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.wxWorkRobotText.mentioned_list)
  return &mentioned_list_;
}

// repeated string mentioned_mobile_list = 3;
inline int wxWorkRobotText::mentioned_mobile_list_size() const {
  return mentioned_mobile_list_.size();
}
inline void wxWorkRobotText::clear_mentioned_mobile_list() {
  mentioned_mobile_list_.Clear();
}
inline const ::std::string& wxWorkRobotText::mentioned_mobile_list(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.wxWorkRobotText.mentioned_mobile_list)
  return mentioned_mobile_list_.Get(index);
}
inline ::std::string* wxWorkRobotText::mutable_mentioned_mobile_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.wxWorkRobotText.mentioned_mobile_list)
  return mentioned_mobile_list_.Mutable(index);
}
inline void wxWorkRobotText::set_mentioned_mobile_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFrame.wxWorkRobotText.mentioned_mobile_list)
  mentioned_mobile_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void wxWorkRobotText::set_mentioned_mobile_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFrame.wxWorkRobotText.mentioned_mobile_list)
  mentioned_mobile_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void wxWorkRobotText::set_mentioned_mobile_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mentioned_mobile_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFrame.wxWorkRobotText.mentioned_mobile_list)
}
inline void wxWorkRobotText::set_mentioned_mobile_list(int index, const char* value, size_t size) {
  mentioned_mobile_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFrame.wxWorkRobotText.mentioned_mobile_list)
}
inline ::std::string* wxWorkRobotText::add_mentioned_mobile_list() {
  // @@protoc_insertion_point(field_add_mutable:NFrame.wxWorkRobotText.mentioned_mobile_list)
  return mentioned_mobile_list_.Add();
}
inline void wxWorkRobotText::add_mentioned_mobile_list(const ::std::string& value) {
  mentioned_mobile_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFrame.wxWorkRobotText.mentioned_mobile_list)
}
#if LANG_CXX11
inline void wxWorkRobotText::add_mentioned_mobile_list(::std::string&& value) {
  mentioned_mobile_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFrame.wxWorkRobotText.mentioned_mobile_list)
}
#endif
inline void wxWorkRobotText::add_mentioned_mobile_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mentioned_mobile_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFrame.wxWorkRobotText.mentioned_mobile_list)
}
inline void wxWorkRobotText::add_mentioned_mobile_list(const char* value, size_t size) {
  mentioned_mobile_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFrame.wxWorkRobotText.mentioned_mobile_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
wxWorkRobotText::mentioned_mobile_list() const {
  // @@protoc_insertion_point(field_list:NFrame.wxWorkRobotText.mentioned_mobile_list)
  return mentioned_mobile_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
wxWorkRobotText::mutable_mentioned_mobile_list() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.wxWorkRobotText.mentioned_mobile_list)
  return &mentioned_mobile_list_;
}

// -------------------------------------------------------------------

// wxWorkRobotHttpPost

// string msgtype = 1;
inline void wxWorkRobotHttpPost::clear_msgtype() {
  msgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& wxWorkRobotHttpPost::msgtype() const {
  // @@protoc_insertion_point(field_get:NFrame.wxWorkRobotHttpPost.msgtype)
  return msgtype_.GetNoArena();
}
inline void wxWorkRobotHttpPost::set_msgtype(const ::std::string& value) {
  
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.wxWorkRobotHttpPost.msgtype)
}
#if LANG_CXX11
inline void wxWorkRobotHttpPost::set_msgtype(::std::string&& value) {
  
  msgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.wxWorkRobotHttpPost.msgtype)
}
#endif
inline void wxWorkRobotHttpPost::set_msgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.wxWorkRobotHttpPost.msgtype)
}
inline void wxWorkRobotHttpPost::set_msgtype(const char* value, size_t size) {
  
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.wxWorkRobotHttpPost.msgtype)
}
inline ::std::string* wxWorkRobotHttpPost::mutable_msgtype() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.wxWorkRobotHttpPost.msgtype)
  return msgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* wxWorkRobotHttpPost::release_msgtype() {
  // @@protoc_insertion_point(field_release:NFrame.wxWorkRobotHttpPost.msgtype)
  
  return msgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void wxWorkRobotHttpPost::set_allocated_msgtype(::std::string* msgtype) {
  if (msgtype != NULL) {
    
  } else {
    
  }
  msgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgtype);
  // @@protoc_insertion_point(field_set_allocated:NFrame.wxWorkRobotHttpPost.msgtype)
}

// .NFrame.wxWorkRobotText text = 2;
inline bool wxWorkRobotHttpPost::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void wxWorkRobotHttpPost::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
inline const ::NFrame::wxWorkRobotText& wxWorkRobotHttpPost::_internal_text() const {
  return *text_;
}
inline const ::NFrame::wxWorkRobotText& wxWorkRobotHttpPost::text() const {
  const ::NFrame::wxWorkRobotText* p = text_;
  // @@protoc_insertion_point(field_get:NFrame.wxWorkRobotHttpPost.text)
  return p != NULL ? *p : *reinterpret_cast<const ::NFrame::wxWorkRobotText*>(
      &::NFrame::_wxWorkRobotText_default_instance_);
}
inline ::NFrame::wxWorkRobotText* wxWorkRobotHttpPost::release_text() {
  // @@protoc_insertion_point(field_release:NFrame.wxWorkRobotHttpPost.text)
  
  ::NFrame::wxWorkRobotText* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::NFrame::wxWorkRobotText* wxWorkRobotHttpPost::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::NFrame::wxWorkRobotText>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFrame.wxWorkRobotHttpPost.text)
  return text_;
}
inline void wxWorkRobotHttpPost::set_allocated_text(::NFrame::wxWorkRobotText* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:NFrame.wxWorkRobotHttpPost.text)
}

// -------------------------------------------------------------------

// ExcelSheetInfo

// string name = 1;
inline void ExcelSheetInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::name() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.name)
  return name_.GetNoArena();
}
inline void ExcelSheetInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.name)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.name)
}
#endif
inline void ExcelSheetInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.name)
}
inline void ExcelSheetInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.name)
}
inline ::std::string* ExcelSheetInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_name() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.name)
}

// string unique_index = 2;
inline void ExcelSheetInfo::clear_unique_index() {
  unique_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::unique_index() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.unique_index)
  return unique_index_.GetNoArena();
}
inline void ExcelSheetInfo::set_unique_index(const ::std::string& value) {
  
  unique_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.unique_index)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_unique_index(::std::string&& value) {
  
  unique_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.unique_index)
}
#endif
inline void ExcelSheetInfo::set_unique_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unique_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.unique_index)
}
inline void ExcelSheetInfo::set_unique_index(const char* value, size_t size) {
  
  unique_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.unique_index)
}
inline ::std::string* ExcelSheetInfo::mutable_unique_index() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.unique_index)
  return unique_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_unique_index() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.unique_index)
  
  return unique_index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_unique_index(::std::string* unique_index) {
  if (unique_index != NULL) {
    
  } else {
    
  }
  unique_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unique_index);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.unique_index)
}

// string multi_index = 3;
inline void ExcelSheetInfo::clear_multi_index() {
  multi_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::multi_index() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.multi_index)
  return multi_index_.GetNoArena();
}
inline void ExcelSheetInfo::set_multi_index(const ::std::string& value) {
  
  multi_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.multi_index)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_multi_index(::std::string&& value) {
  
  multi_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.multi_index)
}
#endif
inline void ExcelSheetInfo::set_multi_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  multi_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.multi_index)
}
inline void ExcelSheetInfo::set_multi_index(const char* value, size_t size) {
  
  multi_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.multi_index)
}
inline ::std::string* ExcelSheetInfo::mutable_multi_index() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.multi_index)
  return multi_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_multi_index() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.multi_index)
  
  return multi_index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_multi_index(::std::string* multi_index) {
  if (multi_index != NULL) {
    
  } else {
    
  }
  multi_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), multi_index);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.multi_index)
}

// string relation = 4;
inline void ExcelSheetInfo::clear_relation() {
  relation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::relation() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.relation)
  return relation_.GetNoArena();
}
inline void ExcelSheetInfo::set_relation(const ::std::string& value) {
  
  relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.relation)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_relation(::std::string&& value) {
  
  relation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.relation)
}
#endif
inline void ExcelSheetInfo::set_relation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.relation)
}
inline void ExcelSheetInfo::set_relation(const char* value, size_t size) {
  
  relation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.relation)
}
inline ::std::string* ExcelSheetInfo::mutable_relation() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.relation)
  return relation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_relation() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.relation)
  
  return relation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_relation(::std::string* relation) {
  if (relation != NULL) {
    
  } else {
    
  }
  relation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relation);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.relation)
}

// bool createSql = 5;
inline void ExcelSheetInfo::clear_createsql() {
  createsql_ = false;
}
inline bool ExcelSheetInfo::createsql() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.createSql)
  return createsql_;
}
inline void ExcelSheetInfo::set_createsql(bool value) {
  
  createsql_ = value;
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.createSql)
}

// string field_enum = 6;
inline void ExcelSheetInfo::clear_field_enum() {
  field_enum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::field_enum() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.field_enum)
  return field_enum_.GetNoArena();
}
inline void ExcelSheetInfo::set_field_enum(const ::std::string& value) {
  
  field_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.field_enum)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_field_enum(::std::string&& value) {
  
  field_enum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.field_enum)
}
#endif
inline void ExcelSheetInfo::set_field_enum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.field_enum)
}
inline void ExcelSheetInfo::set_field_enum(const char* value, size_t size) {
  
  field_enum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.field_enum)
}
inline ::std::string* ExcelSheetInfo::mutable_field_enum() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.field_enum)
  return field_enum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_field_enum() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.field_enum)
  
  return field_enum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_field_enum(::std::string* field_enum) {
  if (field_enum != NULL) {
    
  } else {
    
  }
  field_enum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_enum);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.field_enum)
}

// string import_proto = 7;
inline void ExcelSheetInfo::clear_import_proto() {
  import_proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::import_proto() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.import_proto)
  return import_proto_.GetNoArena();
}
inline void ExcelSheetInfo::set_import_proto(const ::std::string& value) {
  
  import_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.import_proto)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_import_proto(::std::string&& value) {
  
  import_proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.import_proto)
}
#endif
inline void ExcelSheetInfo::set_import_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  import_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.import_proto)
}
inline void ExcelSheetInfo::set_import_proto(const char* value, size_t size) {
  
  import_proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.import_proto)
}
inline ::std::string* ExcelSheetInfo::mutable_import_proto() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.import_proto)
  return import_proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_import_proto() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.import_proto)
  
  return import_proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_import_proto(::std::string* import_proto) {
  if (import_proto != NULL) {
    
  } else {
    
  }
  import_proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), import_proto);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.import_proto)
}

// string colMessageType = 8;
inline void ExcelSheetInfo::clear_colmessagetype() {
  colmessagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::colmessagetype() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.colMessageType)
  return colmessagetype_.GetNoArena();
}
inline void ExcelSheetInfo::set_colmessagetype(const ::std::string& value) {
  
  colmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.colMessageType)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_colmessagetype(::std::string&& value) {
  
  colmessagetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.colMessageType)
}
#endif
inline void ExcelSheetInfo::set_colmessagetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  colmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.colMessageType)
}
inline void ExcelSheetInfo::set_colmessagetype(const char* value, size_t size) {
  
  colmessagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.colMessageType)
}
inline ::std::string* ExcelSheetInfo::mutable_colmessagetype() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.colMessageType)
  return colmessagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_colmessagetype() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.colMessageType)
  
  return colmessagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_colmessagetype(::std::string* colmessagetype) {
  if (colmessagetype != NULL) {
    
  } else {
    
  }
  colmessagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), colmessagetype);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.colMessageType)
}

// string add_field = 9;
inline void ExcelSheetInfo::clear_add_field() {
  add_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::add_field() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.add_field)
  return add_field_.GetNoArena();
}
inline void ExcelSheetInfo::set_add_field(const ::std::string& value) {
  
  add_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.add_field)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_add_field(::std::string&& value) {
  
  add_field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.add_field)
}
#endif
inline void ExcelSheetInfo::set_add_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  add_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.add_field)
}
inline void ExcelSheetInfo::set_add_field(const char* value, size_t size) {
  
  add_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.add_field)
}
inline ::std::string* ExcelSheetInfo::mutable_add_field() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.add_field)
  return add_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_add_field() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.add_field)
  
  return add_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_add_field(::std::string* add_field) {
  if (add_field != NULL) {
    
  } else {
    
  }
  add_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_field);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.add_field)
}

// string otherName = 10;
inline void ExcelSheetInfo::clear_othername() {
  othername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::othername() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.otherName)
  return othername_.GetNoArena();
}
inline void ExcelSheetInfo::set_othername(const ::std::string& value) {
  
  othername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.otherName)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_othername(::std::string&& value) {
  
  othername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.otherName)
}
#endif
inline void ExcelSheetInfo::set_othername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  othername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.otherName)
}
inline void ExcelSheetInfo::set_othername(const char* value, size_t size) {
  
  othername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.otherName)
}
inline ::std::string* ExcelSheetInfo::mutable_othername() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.otherName)
  return othername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_othername() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.otherName)
  
  return othername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_othername(::std::string* othername) {
  if (othername != NULL) {
    
  } else {
    
  }
  othername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), othername);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.otherName)
}

// string sheetMsgName = 11;
inline void ExcelSheetInfo::clear_sheetmsgname() {
  sheetmsgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::sheetmsgname() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.sheetMsgName)
  return sheetmsgname_.GetNoArena();
}
inline void ExcelSheetInfo::set_sheetmsgname(const ::std::string& value) {
  
  sheetmsgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.sheetMsgName)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_sheetmsgname(::std::string&& value) {
  
  sheetmsgname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.sheetMsgName)
}
#endif
inline void ExcelSheetInfo::set_sheetmsgname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sheetmsgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.sheetMsgName)
}
inline void ExcelSheetInfo::set_sheetmsgname(const char* value, size_t size) {
  
  sheetmsgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.sheetMsgName)
}
inline ::std::string* ExcelSheetInfo::mutable_sheetmsgname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.sheetMsgName)
  return sheetmsgname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_sheetmsgname() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.sheetMsgName)
  
  return sheetmsgname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_sheetmsgname(::std::string* sheetmsgname) {
  if (sheetmsgname != NULL) {
    
  } else {
    
  }
  sheetmsgname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sheetmsgname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.sheetMsgName)
}

// string protoMsgName = 12;
inline void ExcelSheetInfo::clear_protomsgname() {
  protomsgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelSheetInfo::protomsgname() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelSheetInfo.protoMsgName)
  return protomsgname_.GetNoArena();
}
inline void ExcelSheetInfo::set_protomsgname(const ::std::string& value) {
  
  protomsgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelSheetInfo.protoMsgName)
}
#if LANG_CXX11
inline void ExcelSheetInfo::set_protomsgname(::std::string&& value) {
  
  protomsgname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelSheetInfo.protoMsgName)
}
#endif
inline void ExcelSheetInfo::set_protomsgname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  protomsgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelSheetInfo.protoMsgName)
}
inline void ExcelSheetInfo::set_protomsgname(const char* value, size_t size) {
  
  protomsgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelSheetInfo.protoMsgName)
}
inline ::std::string* ExcelSheetInfo::mutable_protomsgname() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelSheetInfo.protoMsgName)
  return protomsgname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelSheetInfo::release_protomsgname() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelSheetInfo.protoMsgName)
  
  return protomsgname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelSheetInfo::set_allocated_protomsgname(::std::string* protomsgname) {
  if (protomsgname != NULL) {
    
  } else {
    
  }
  protomsgname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protomsgname);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelSheetInfo.protoMsgName)
}

// -------------------------------------------------------------------

// ExcelPbInfo

// string name = 1;
inline void ExcelPbInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExcelPbInfo::name() const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelPbInfo.name)
  return name_.GetNoArena();
}
inline void ExcelPbInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFrame.ExcelPbInfo.name)
}
#if LANG_CXX11
inline void ExcelPbInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFrame.ExcelPbInfo.name)
}
#endif
inline void ExcelPbInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFrame.ExcelPbInfo.name)
}
inline void ExcelPbInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFrame.ExcelPbInfo.name)
}
inline ::std::string* ExcelPbInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelPbInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExcelPbInfo::release_name() {
  // @@protoc_insertion_point(field_release:NFrame.ExcelPbInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExcelPbInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFrame.ExcelPbInfo.name)
}

// repeated .NFrame.ExcelSheetInfo sheet = 2 [(.nanopb) = {
inline int ExcelPbInfo::sheet_size() const {
  return sheet_.size();
}
inline void ExcelPbInfo::clear_sheet() {
  sheet_.Clear();
}
inline ::NFrame::ExcelSheetInfo* ExcelPbInfo::mutable_sheet(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelPbInfo.sheet)
  return sheet_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelSheetInfo >*
ExcelPbInfo::mutable_sheet() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.ExcelPbInfo.sheet)
  return &sheet_;
}
inline const ::NFrame::ExcelSheetInfo& ExcelPbInfo::sheet(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelPbInfo.sheet)
  return sheet_.Get(index);
}
inline ::NFrame::ExcelSheetInfo* ExcelPbInfo::add_sheet() {
  // @@protoc_insertion_point(field_add:NFrame.ExcelPbInfo.sheet)
  return sheet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelSheetInfo >&
ExcelPbInfo::sheet() const {
  // @@protoc_insertion_point(field_list:NFrame.ExcelPbInfo.sheet)
  return sheet_;
}

// -------------------------------------------------------------------

// ExcelParseInfo

// repeated .NFrame.ExcelPbInfo excel = 1 [(.nanopb) = {
inline int ExcelParseInfo::excel_size() const {
  return excel_.size();
}
inline void ExcelParseInfo::clear_excel() {
  excel_.Clear();
}
inline ::NFrame::ExcelPbInfo* ExcelParseInfo::mutable_excel(int index) {
  // @@protoc_insertion_point(field_mutable:NFrame.ExcelParseInfo.excel)
  return excel_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelPbInfo >*
ExcelParseInfo::mutable_excel() {
  // @@protoc_insertion_point(field_mutable_list:NFrame.ExcelParseInfo.excel)
  return &excel_;
}
inline const ::NFrame::ExcelPbInfo& ExcelParseInfo::excel(int index) const {
  // @@protoc_insertion_point(field_get:NFrame.ExcelParseInfo.excel)
  return excel_.Get(index);
}
inline ::NFrame::ExcelPbInfo* ExcelParseInfo::add_excel() {
  // @@protoc_insertion_point(field_add:NFrame.ExcelParseInfo.excel)
  return excel_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFrame::ExcelPbInfo >&
ExcelParseInfo::excel() const {
  // @@protoc_insertion_point(field_list:NFrame.ExcelParseInfo.excel)
  return excel_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFrame

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_FrameComm_2eproto
