/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9 */

#include <sstream>
#include "NFComm/NFObjCommon/NFShmMgr.h"
#include "FrameTestComm.nanopb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

wxWorkRobotTextTest::wxWorkRobotTextTest()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

wxWorkRobotTextTest::~wxWorkRobotTextTest()
{
}

wxWorkRobotTextTest::wxWorkRobotTextTest(const wxWorkRobotTextTest& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

wxWorkRobotTextTest& wxWorkRobotTextTest::operator=(const wxWorkRobotTextTest& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void wxWorkRobotTextTest::CopyData(const wxWorkRobotTextTest& stArgsData)
{
    test_string = stArgsData.test_string;
    test_string_stl = stArgsData.test_string_stl;
    test_string_repeated = stArgsData.test_string_repeated;
    test_string_stl_repeated = stArgsData.test_string_stl_repeated;
    test_string_stl_vector = stArgsData.test_string_stl_vector;
    test_string_stl_list = stArgsData.test_string_stl_list;
    test_string_stl_unordered_set = stArgsData.test_string_stl_unordered_set;
    test_int_vector = stArgsData.test_int_vector;
    test_int_list = stArgsData.test_int_list;
    test_int_unordered_set = stArgsData.test_int_unordered_set;
    test_bytes = stArgsData.test_bytes;
    test_bytes_stl = stArgsData.test_bytes_stl;
    test_bytes_repeated = stArgsData.test_bytes_repeated;
    test_bytes_stl_repeated = stArgsData.test_bytes_stl_repeated;
    test_bytes_stl_vector = stArgsData.test_bytes_stl_vector;
    test_bytes_stl_list = stArgsData.test_bytes_stl_list;
    test_bytes_stl_unordered_set = stArgsData.test_bytes_stl_unordered_set;
    id = stArgsData.id;
}

int wxWorkRobotTextTest::CreateInit()
{
    id = 0;
	return 0;
}

int wxWorkRobotTextTest::ResumeInit()
{
	return 0;
}

void wxWorkRobotTextTest::Init()
{
    test_string.Init();
    test_string_stl.Init();
    test_string_repeated.Init();
    test_string_stl_repeated.Init();
    test_string_stl_vector.Init();
    test_string_stl_list.Init();
    test_string_stl_unordered_set.Init();
    test_int_vector.Init();
    test_int_list.Init();
    test_int_unordered_set.Init();
    test_bytes.Init();
    test_bytes_stl.Init();
    test_bytes_repeated.Init();
    test_bytes_stl_repeated.Init();
    test_bytes_stl_vector.Init();
    test_bytes_stl_list.Init();
    test_bytes_stl_unordered_set.Init();
    id = 0;
}

bool wxWorkRobotTextTest::FromPb(const NFrameComm::wxWorkRobotTextTest& cc)
{
    if (cc.test_string().length() >= 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string, cur length:%d, max length:67", cc.test_string().length());
        return false;
    }
    test_string = cc.test_string();
    if (cc.test_string_stl().length() >= 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl, cur length:%d, max length:67", cc.test_string_stl().length());
        return false;
    }
    test_string_stl = cc.test_string_stl();
    test_string_repeated.clear();
    if (cc.test_string_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_repeated, cur count:%d, max count:%d", cc.test_string_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_repeated_size(); ++i)
    {
        if (test_string_repeated.size() >= test_string_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_repeated, cur count:%d, max count:%d", cc.test_string_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_repeated, cur length:%d, max length:%d", cc.test_string_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_repeated.push_back(cc.test_string_repeated(i));
    }
    test_string_stl_repeated.clear();
    if (cc.test_string_stl_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_repeated, cur count:%d, max count:%d", cc.test_string_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_repeated_size(); ++i)
    {
        if (test_string_stl_repeated.size() >= test_string_stl_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_repeated, cur count:%d, max count:%d", cc.test_string_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_repeated, cur length:%d, max length:%d", cc.test_string_stl_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_repeated.push_back(cc.test_string_stl_repeated(i));
    }
    test_string_stl_vector.clear();
    if (cc.test_string_stl_vector_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_vector, cur count:%d, max count:%d", cc.test_string_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_vector_size(); ++i)
    {
        if (test_string_stl_vector.size() >= test_string_stl_vector.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_vector, cur count:%d, max count:%d", cc.test_string_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_vector(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_vector, cur length:%d, max length:%d", cc.test_string_stl_vector(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_vector.push_back(cc.test_string_stl_vector(i));
    }
    test_string_stl_list.clear();
    if (cc.test_string_stl_list_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_list, cur count:%d, max count:%d", cc.test_string_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_list_size(); ++i)
    {
        if (test_string_stl_list.size() >= test_string_stl_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_list, cur count:%d, max count:%d", cc.test_string_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_list(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_list, cur length:%d, max length:%d", cc.test_string_stl_list(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_list.push_back(cc.test_string_stl_list(i));
    }
    test_string_stl_unordered_set.clear();
    if (cc.test_string_stl_unordered_set_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_unordered_set, cur count:%d, max count:%d", cc.test_string_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_unordered_set_size(); ++i)
    {
        if (test_string_stl_unordered_set.size() >= test_string_stl_unordered_set.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_unordered_set, cur count:%d, max count:%d", cc.test_string_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_unordered_set(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_string_stl_unordered_set, cur length:%d, max length:%d", cc.test_string_stl_unordered_set(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_unordered_set.insert(cc.test_string_stl_unordered_set(i));
    }
    test_int_vector.clear();
    if (cc.test_int_vector_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_int_vector, cur count:%d, max count:%d", cc.test_int_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_int_vector_size(); ++i)
    {
        if (test_int_vector.size() >= test_int_vector.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_int_vector, cur count:%d, max count:%d", cc.test_int_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        test_int_vector.push_back(cc.test_int_vector(i));
    }
    test_int_list.clear();
    if (cc.test_int_list_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_int_list, cur count:%d, max count:%d", cc.test_int_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_int_list_size(); ++i)
    {
        if (test_int_list.size() >= test_int_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_int_list, cur count:%d, max count:%d", cc.test_int_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        test_int_list.push_back(cc.test_int_list(i));
    }
    test_int_unordered_set.clear();
    if (cc.test_int_unordered_set_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_int_unordered_set, cur count:%d, max count:%d", cc.test_int_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_int_unordered_set_size(); ++i)
    {
        if (test_int_unordered_set.size() >= test_int_unordered_set.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_int_unordered_set, cur count:%d, max count:%d", cc.test_int_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        test_int_unordered_set.insert(cc.test_int_unordered_set(i));
    }
    if (cc.test_bytes().length() >= 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes, cur length:%d, max length:67", cc.test_bytes().length());
        return false;
    }
    test_bytes = cc.test_bytes();
    if (cc.test_bytes_stl().length() >= 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl, cur length:%d, max length:67", cc.test_bytes_stl().length());
        return false;
    }
    test_bytes_stl = cc.test_bytes_stl();
    test_bytes_repeated.clear();
    if (cc.test_bytes_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_repeated, cur count:%d, max count:%d", cc.test_bytes_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_repeated_size(); ++i)
    {
        if (test_bytes_repeated.size() >= test_bytes_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_repeated, cur count:%d, max count:%d", cc.test_bytes_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_repeated, cur length:%d, max length:%d", cc.test_bytes_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_repeated.push_back(cc.test_bytes_repeated(i));
    }
    test_bytes_stl_repeated.clear();
    if (cc.test_bytes_stl_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_repeated, cur count:%d, max count:%d", cc.test_bytes_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_repeated_size(); ++i)
    {
        if (test_bytes_stl_repeated.size() >= test_bytes_stl_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_repeated, cur count:%d, max count:%d", cc.test_bytes_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_repeated, cur length:%d, max length:%d", cc.test_bytes_stl_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_repeated.push_back(cc.test_bytes_stl_repeated(i));
    }
    test_bytes_stl_vector.clear();
    if (cc.test_bytes_stl_vector_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_vector, cur count:%d, max count:%d", cc.test_bytes_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_vector_size(); ++i)
    {
        if (test_bytes_stl_vector.size() >= test_bytes_stl_vector.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_vector, cur count:%d, max count:%d", cc.test_bytes_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_vector(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_vector, cur length:%d, max length:%d", cc.test_bytes_stl_vector(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_vector.push_back(cc.test_bytes_stl_vector(i));
    }
    test_bytes_stl_list.clear();
    if (cc.test_bytes_stl_list_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_list, cur count:%d, max count:%d", cc.test_bytes_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_list_size(); ++i)
    {
        if (test_bytes_stl_list.size() >= test_bytes_stl_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_list, cur count:%d, max count:%d", cc.test_bytes_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_list(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_list, cur length:%d, max length:%d", cc.test_bytes_stl_list(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_list.push_back(cc.test_bytes_stl_list(i));
    }
    test_bytes_stl_unordered_set.clear();
    if (cc.test_bytes_stl_unordered_set_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_unordered_set, cur count:%d, max count:%d", cc.test_bytes_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_unordered_set_size(); ++i)
    {
        if (test_bytes_stl_unordered_set.size() >= test_bytes_stl_unordered_set.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_unordered_set, cur count:%d, max count:%d", cc.test_bytes_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_unordered_set(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:wxWorkRobotTextTest, field:test_bytes_stl_unordered_set, cur length:%d, max length:%d", cc.test_bytes_stl_unordered_set(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_unordered_set.insert(cc.test_bytes_stl_unordered_set(i));
    }
    id = cc.id();
    return true;
}

void wxWorkRobotTextTest::ToPb(NFrameComm::wxWorkRobotTextTest* cc) const
{
    cc->set_test_string(test_string.data());
    cc->set_test_string_stl(test_string_stl.data());
    cc->clear_test_string_repeated();
    for (auto iter = test_string_repeated.begin(); iter != test_string_repeated.end(); ++iter)
    {
        cc->add_test_string_repeated(iter->data());
    }
    cc->clear_test_string_stl_repeated();
    for (auto iter = test_string_stl_repeated.begin(); iter != test_string_stl_repeated.end(); ++iter)
    {
        cc->add_test_string_stl_repeated(iter->data());
    }
    cc->clear_test_string_stl_vector();
    for (auto iter = test_string_stl_vector.begin(); iter != test_string_stl_vector.end(); ++iter)
    {
        cc->add_test_string_stl_vector(iter->data());
    }
    cc->clear_test_string_stl_list();
    for (auto iter = test_string_stl_list.begin(); iter != test_string_stl_list.end(); ++iter)
    {
        cc->add_test_string_stl_list(iter->data());
    }
    cc->clear_test_string_stl_unordered_set();
    for (auto iter = test_string_stl_unordered_set.begin(); iter != test_string_stl_unordered_set.end(); ++iter)
    {
        cc->add_test_string_stl_unordered_set(iter->data());
    }
    cc->clear_test_int_vector();
    for (auto iter = test_int_vector.begin(); iter != test_int_vector.end(); ++iter)
    {
        cc->add_test_int_vector(*iter);
    }
    cc->clear_test_int_list();
    for (auto iter = test_int_list.begin(); iter != test_int_list.end(); ++iter)
    {
        cc->add_test_int_list(*iter);
    }
    cc->clear_test_int_unordered_set();
    for (auto iter = test_int_unordered_set.begin(); iter != test_int_unordered_set.end(); ++iter)
    {
        cc->add_test_int_unordered_set(*iter);
    }
    cc->set_test_bytes(test_bytes.data());
    cc->set_test_bytes_stl(test_bytes_stl.data());
    cc->clear_test_bytes_repeated();
    for (auto iter = test_bytes_repeated.begin(); iter != test_bytes_repeated.end(); ++iter)
    {
        cc->add_test_bytes_repeated(iter->data());
    }
    cc->clear_test_bytes_stl_repeated();
    for (auto iter = test_bytes_stl_repeated.begin(); iter != test_bytes_stl_repeated.end(); ++iter)
    {
        cc->add_test_bytes_stl_repeated(iter->data());
    }
    cc->clear_test_bytes_stl_vector();
    for (auto iter = test_bytes_stl_vector.begin(); iter != test_bytes_stl_vector.end(); ++iter)
    {
        cc->add_test_bytes_stl_vector(iter->data());
    }
    cc->clear_test_bytes_stl_list();
    for (auto iter = test_bytes_stl_list.begin(); iter != test_bytes_stl_list.end(); ++iter)
    {
        cc->add_test_bytes_stl_list(iter->data());
    }
    cc->clear_test_bytes_stl_unordered_set();
    for (auto iter = test_bytes_stl_unordered_set.begin(); iter != test_bytes_stl_unordered_set.end(); ++iter)
    {
        cc->add_test_bytes_stl_unordered_set(iter->data());
    }
    cc->set_id(id);
    return;
}

NFrameComm::wxWorkRobotTextTest wxWorkRobotTextTest::ToPb() const
{
    NFrameComm::wxWorkRobotTextTest cc;
    ToPb(&cc);
    return cc;
}

std::string wxWorkRobotTextTest::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "test_string:" << "\"" << test_string.data() << "\"" << ", ";
    ss << "test_string_stl:" << "\"" << test_string_stl.data() << "\"" << ", ";
    ss << "test_string_repeated(" << test_string_repeated.size()<< "):[";
    for (auto iter = test_string_repeated.begin(); iter != test_string_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_repeated(" << test_string_stl_repeated.size()<< "):[";
    for (auto iter = test_string_stl_repeated.begin(); iter != test_string_stl_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_vector(" << test_string_stl_vector.size()<< "):[";
    for (auto iter = test_string_stl_vector.begin(); iter != test_string_stl_vector.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_list(" << test_string_stl_list.size()<< "):[";
    for (auto iter = test_string_stl_list.begin(); iter != test_string_stl_list.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_unordered_set(" << test_string_stl_unordered_set.size()<< "):[";
    for (auto iter = test_string_stl_unordered_set.begin(); iter != test_string_stl_unordered_set.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_int_vector(" << test_int_vector.size()<< "):[";
    for (auto iter = test_int_vector.begin(); iter != test_int_vector.end(); ++iter)
    {
        ss << *iter;
        ss << ", ";
    }
    ss << "]";
    ss << "test_int_list(" << test_int_list.size()<< "):[";
    for (auto iter = test_int_list.begin(); iter != test_int_list.end(); ++iter)
    {
        ss << *iter;
        ss << ", ";
    }
    ss << "]";
    ss << "test_int_unordered_set(" << test_int_unordered_set.size()<< "):[";
    for (auto iter = test_int_unordered_set.begin(); iter != test_int_unordered_set.end(); ++iter)
    {
        ss << *iter;
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes:" << "\"" << test_bytes.data() << "\"" << ", ";
    ss << "test_bytes_stl:" << "\"" << test_bytes_stl.data() << "\"" << ", ";
    ss << "test_bytes_repeated(" << test_bytes_repeated.size()<< "):[";
    for (auto iter = test_bytes_repeated.begin(); iter != test_bytes_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_repeated(" << test_bytes_stl_repeated.size()<< "):[";
    for (auto iter = test_bytes_stl_repeated.begin(); iter != test_bytes_stl_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_vector(" << test_bytes_stl_vector.size()<< "):[";
    for (auto iter = test_bytes_stl_vector.begin(); iter != test_bytes_stl_vector.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_list(" << test_bytes_stl_list.size()<< "):[";
    for (auto iter = test_bytes_stl_list.begin(); iter != test_bytes_stl_list.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_unordered_set(" << test_bytes_stl_unordered_set.size()<< "):[";
    for (auto iter = test_bytes_stl_unordered_set.begin(); iter != test_bytes_stl_unordered_set.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "id:" << id;
    ss << "}";
    return ss.str();
}

WelfareNodeDBDataPddBuy::WelfareNodeDBDataPddBuy()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

WelfareNodeDBDataPddBuy::~WelfareNodeDBDataPddBuy()
{
}

WelfareNodeDBDataPddBuy::WelfareNodeDBDataPddBuy(const WelfareNodeDBDataPddBuy& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

WelfareNodeDBDataPddBuy& WelfareNodeDBDataPddBuy::operator=(const WelfareNodeDBDataPddBuy& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void WelfareNodeDBDataPddBuy::CopyData(const WelfareNodeDBDataPddBuy& stArgsData)
{
    test_string = stArgsData.test_string;
    test_string_stl = stArgsData.test_string_stl;
    test_string_repeated = stArgsData.test_string_repeated;
    test_string_stl_repeated = stArgsData.test_string_stl_repeated;
    test_string_stl_vector = stArgsData.test_string_stl_vector;
    test_string_stl_list = stArgsData.test_string_stl_list;
    test_string_stl_unordered_set = stArgsData.test_string_stl_unordered_set;
    test_int_vector = stArgsData.test_int_vector;
    test_int_list = stArgsData.test_int_list;
    test_int_unordered_set = stArgsData.test_int_unordered_set;
    test_bytes = stArgsData.test_bytes;
    test_bytes_stl = stArgsData.test_bytes_stl;
    test_bytes_repeated = stArgsData.test_bytes_repeated;
    test_bytes_stl_repeated = stArgsData.test_bytes_stl_repeated;
    test_bytes_stl_vector = stArgsData.test_bytes_stl_vector;
    test_bytes_stl_list = stArgsData.test_bytes_stl_list;
    test_bytes_stl_unordered_set = stArgsData.test_bytes_stl_unordered_set;
    m_dwBuyCount = stArgsData.m_dwBuyCount;
    m_dwLastBuyTime = stArgsData.m_dwLastBuyTime;
}

int WelfareNodeDBDataPddBuy::CreateInit()
{
    m_dwBuyCount = 0;
    m_dwLastBuyTime = 0;
	return 0;
}

int WelfareNodeDBDataPddBuy::ResumeInit()
{
	return 0;
}

void WelfareNodeDBDataPddBuy::Init()
{
    test_string.Init();
    test_string_stl.Init();
    test_string_repeated.Init();
    test_string_stl_repeated.Init();
    test_string_stl_vector.Init();
    test_string_stl_list.Init();
    test_string_stl_unordered_set.Init();
    test_int_vector.Init();
    test_int_list.Init();
    test_int_unordered_set.Init();
    test_bytes.Init();
    test_bytes_stl.Init();
    test_bytes_repeated.Init();
    test_bytes_stl_repeated.Init();
    test_bytes_stl_vector.Init();
    test_bytes_stl_list.Init();
    test_bytes_stl_unordered_set.Init();
    m_dwBuyCount = 0;
    m_dwLastBuyTime = 0;
}

bool WelfareNodeDBDataPddBuy::FromPb(const NFrameComm::WelfareNodeDBDataPddBuy& cc)
{
    if (cc.test_string().length() >= 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string, cur length:%d, max length:67", cc.test_string().length());
        return false;
    }
    test_string = cc.test_string();
    if (cc.test_string_stl().length() >= 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl, cur length:%d, max length:67", cc.test_string_stl().length());
        return false;
    }
    test_string_stl = cc.test_string_stl();
    test_string_repeated.clear();
    if (cc.test_string_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_repeated, cur count:%d, max count:%d", cc.test_string_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_repeated_size(); ++i)
    {
        if (test_string_repeated.size() >= test_string_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_repeated, cur count:%d, max count:%d", cc.test_string_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_repeated, cur length:%d, max length:%d", cc.test_string_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_repeated.push_back(cc.test_string_repeated(i));
    }
    test_string_stl_repeated.clear();
    if (cc.test_string_stl_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_repeated, cur count:%d, max count:%d", cc.test_string_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_repeated_size(); ++i)
    {
        if (test_string_stl_repeated.size() >= test_string_stl_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_repeated, cur count:%d, max count:%d", cc.test_string_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_repeated, cur length:%d, max length:%d", cc.test_string_stl_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_repeated.push_back(cc.test_string_stl_repeated(i));
    }
    test_string_stl_vector.clear();
    if (cc.test_string_stl_vector_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_vector, cur count:%d, max count:%d", cc.test_string_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_vector_size(); ++i)
    {
        if (test_string_stl_vector.size() >= test_string_stl_vector.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_vector, cur count:%d, max count:%d", cc.test_string_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_vector(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_vector, cur length:%d, max length:%d", cc.test_string_stl_vector(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_vector.push_back(cc.test_string_stl_vector(i));
    }
    test_string_stl_list.clear();
    if (cc.test_string_stl_list_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_list, cur count:%d, max count:%d", cc.test_string_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_list_size(); ++i)
    {
        if (test_string_stl_list.size() >= test_string_stl_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_list, cur count:%d, max count:%d", cc.test_string_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_list(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_list, cur length:%d, max length:%d", cc.test_string_stl_list(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_list.push_back(cc.test_string_stl_list(i));
    }
    test_string_stl_unordered_set.clear();
    if (cc.test_string_stl_unordered_set_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_unordered_set, cur count:%d, max count:%d", cc.test_string_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_string_stl_unordered_set_size(); ++i)
    {
        if (test_string_stl_unordered_set.size() >= test_string_stl_unordered_set.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_unordered_set, cur count:%d, max count:%d", cc.test_string_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_string_stl_unordered_set(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_string_stl_unordered_set, cur length:%d, max length:%d", cc.test_string_stl_unordered_set(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_string_stl_unordered_set.insert(cc.test_string_stl_unordered_set(i));
    }
    test_int_vector.clear();
    if (cc.test_int_vector_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_int_vector, cur count:%d, max count:%d", cc.test_int_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_int_vector_size(); ++i)
    {
        if (test_int_vector.size() >= test_int_vector.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_int_vector, cur count:%d, max count:%d", cc.test_int_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        test_int_vector.push_back(cc.test_int_vector(i));
    }
    test_int_list.clear();
    if (cc.test_int_list_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_int_list, cur count:%d, max count:%d", cc.test_int_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_int_list_size(); ++i)
    {
        if (test_int_list.size() >= test_int_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_int_list, cur count:%d, max count:%d", cc.test_int_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        test_int_list.push_back(cc.test_int_list(i));
    }
    test_int_unordered_set.clear();
    if (cc.test_int_unordered_set_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_int_unordered_set, cur count:%d, max count:%d", cc.test_int_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_int_unordered_set_size(); ++i)
    {
        if (test_int_unordered_set.size() >= test_int_unordered_set.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_int_unordered_set, cur count:%d, max count:%d", cc.test_int_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        test_int_unordered_set.insert(cc.test_int_unordered_set(i));
    }
    if (cc.test_bytes().size() > 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes, cur size:%d, max size:68", cc.test_bytes().size());
        return false;
    }
    test_bytes = cc.test_bytes();
    if (cc.test_bytes_stl().size() > 68)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl, cur size:%d, max size:68", cc.test_bytes_stl().size());
        return false;
    }
    test_bytes_stl = cc.test_bytes_stl();
    test_bytes_repeated.clear();
    if (cc.test_bytes_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_repeated, cur count:%d, max count:%d", cc.test_bytes_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_repeated_size(); ++i)
    {
        if (test_bytes_repeated.size() >= test_bytes_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_repeated, cur count:%d, max count:%d", cc.test_bytes_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_repeated, cur length:%d, max length:%d", cc.test_bytes_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_repeated.push_back(cc.test_bytes_repeated(i));
    }
    test_bytes_stl_repeated.clear();
    if (cc.test_bytes_stl_repeated_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_repeated, cur count:%d, max count:%d", cc.test_bytes_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_repeated_size(); ++i)
    {
        if (test_bytes_stl_repeated.size() >= test_bytes_stl_repeated.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_repeated, cur count:%d, max count:%d", cc.test_bytes_stl_repeated_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_repeated(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_repeated, cur length:%d, max length:%d", cc.test_bytes_stl_repeated(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_repeated.push_back(cc.test_bytes_stl_repeated(i));
    }
    test_bytes_stl_vector.clear();
    if (cc.test_bytes_stl_vector_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_vector, cur count:%d, max count:%d", cc.test_bytes_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_vector_size(); ++i)
    {
        if (test_bytes_stl_vector.size() >= test_bytes_stl_vector.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_vector, cur count:%d, max count:%d", cc.test_bytes_stl_vector_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_vector(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_vector, cur length:%d, max length:%d", cc.test_bytes_stl_vector(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_vector.push_back(cc.test_bytes_stl_vector(i));
    }
    test_bytes_stl_list.clear();
    if (cc.test_bytes_stl_list_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_list, cur count:%d, max count:%d", cc.test_bytes_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_list_size(); ++i)
    {
        if (test_bytes_stl_list.size() >= test_bytes_stl_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_list, cur count:%d, max count:%d", cc.test_bytes_stl_list_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_list(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_list, cur length:%d, max length:%d", cc.test_bytes_stl_list(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_list.push_back(cc.test_bytes_stl_list(i));
    }
    test_bytes_stl_unordered_set.clear();
    if (cc.test_bytes_stl_unordered_set_size() > FRAME_ENUM_DEFAULT_REPEATED)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_unordered_set, cur count:%d, max count:%d", cc.test_bytes_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
        return false;
    }
    for (int i = 0; i < cc.test_bytes_stl_unordered_set_size(); ++i)
    {
        if (test_bytes_stl_unordered_set.size() >= test_bytes_stl_unordered_set.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_unordered_set, cur count:%d, max count:%d", cc.test_bytes_stl_unordered_set_size(), FRAME_ENUM_DEFAULT_REPEATED);
            return false;
        }
        if (cc.test_bytes_stl_unordered_set(i).length() >= FRAME_ENUM_STRING_NUM)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataPddBuy, field:test_bytes_stl_unordered_set, cur length:%d, max length:%d", cc.test_bytes_stl_unordered_set(i).length(), FRAME_ENUM_STRING_NUM-1);
            return false;
        }
        test_bytes_stl_unordered_set.insert(cc.test_bytes_stl_unordered_set(i));
    }
    m_dwBuyCount = cc.m_dwbuycount();
    m_dwLastBuyTime = cc.m_dwlastbuytime();
    return true;
}

void WelfareNodeDBDataPddBuy::ToPb(NFrameComm::WelfareNodeDBDataPddBuy* cc) const
{
    cc->set_test_string(test_string.data());
    cc->set_test_string_stl(test_string_stl.data());
    cc->clear_test_string_repeated();
    for (auto iter = test_string_repeated.begin(); iter != test_string_repeated.end(); ++iter)
    {
        cc->add_test_string_repeated(iter->data());
    }
    cc->clear_test_string_stl_repeated();
    for (auto iter = test_string_stl_repeated.begin(); iter != test_string_stl_repeated.end(); ++iter)
    {
        cc->add_test_string_stl_repeated(iter->data());
    }
    cc->clear_test_string_stl_vector();
    for (auto iter = test_string_stl_vector.begin(); iter != test_string_stl_vector.end(); ++iter)
    {
        cc->add_test_string_stl_vector(iter->data());
    }
    cc->clear_test_string_stl_list();
    for (auto iter = test_string_stl_list.begin(); iter != test_string_stl_list.end(); ++iter)
    {
        cc->add_test_string_stl_list(iter->data());
    }
    cc->clear_test_string_stl_unordered_set();
    for (auto iter = test_string_stl_unordered_set.begin(); iter != test_string_stl_unordered_set.end(); ++iter)
    {
        cc->add_test_string_stl_unordered_set(iter->data());
    }
    cc->clear_test_int_vector();
    for (auto iter = test_int_vector.begin(); iter != test_int_vector.end(); ++iter)
    {
        cc->add_test_int_vector(*iter);
    }
    cc->clear_test_int_list();
    for (auto iter = test_int_list.begin(); iter != test_int_list.end(); ++iter)
    {
        cc->add_test_int_list(*iter);
    }
    cc->clear_test_int_unordered_set();
    for (auto iter = test_int_unordered_set.begin(); iter != test_int_unordered_set.end(); ++iter)
    {
        cc->add_test_int_unordered_set(*iter);
    }
    cc->set_test_bytes(test_bytes.data(), test_bytes.length());
    cc->set_test_bytes_stl(test_bytes_stl.data(), test_bytes_stl.length());
    cc->clear_test_bytes_repeated();
    for (auto iter = test_bytes_repeated.begin(); iter != test_bytes_repeated.end(); ++iter)
    {
        cc->add_test_bytes_repeated(iter->data());
    }
    cc->clear_test_bytes_stl_repeated();
    for (auto iter = test_bytes_stl_repeated.begin(); iter != test_bytes_stl_repeated.end(); ++iter)
    {
        cc->add_test_bytes_stl_repeated(iter->data());
    }
    cc->clear_test_bytes_stl_vector();
    for (auto iter = test_bytes_stl_vector.begin(); iter != test_bytes_stl_vector.end(); ++iter)
    {
        cc->add_test_bytes_stl_vector(iter->data());
    }
    cc->clear_test_bytes_stl_list();
    for (auto iter = test_bytes_stl_list.begin(); iter != test_bytes_stl_list.end(); ++iter)
    {
        cc->add_test_bytes_stl_list(iter->data());
    }
    cc->clear_test_bytes_stl_unordered_set();
    for (auto iter = test_bytes_stl_unordered_set.begin(); iter != test_bytes_stl_unordered_set.end(); ++iter)
    {
        cc->add_test_bytes_stl_unordered_set(iter->data());
    }
    cc->set_m_dwbuycount(m_dwBuyCount);
    cc->set_m_dwlastbuytime(m_dwLastBuyTime);
    return;
}

NFrameComm::WelfareNodeDBDataPddBuy WelfareNodeDBDataPddBuy::ToPb() const
{
    NFrameComm::WelfareNodeDBDataPddBuy cc;
    ToPb(&cc);
    return cc;
}

std::string WelfareNodeDBDataPddBuy::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "test_string:" << "\"" << test_string.data() << "\"" << ", ";
    ss << "test_string_stl:" << "\"" << test_string_stl.data() << "\"" << ", ";
    ss << "test_string_repeated(" << test_string_repeated.size()<< "):[";
    for (auto iter = test_string_repeated.begin(); iter != test_string_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_repeated(" << test_string_stl_repeated.size()<< "):[";
    for (auto iter = test_string_stl_repeated.begin(); iter != test_string_stl_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_vector(" << test_string_stl_vector.size()<< "):[";
    for (auto iter = test_string_stl_vector.begin(); iter != test_string_stl_vector.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_list(" << test_string_stl_list.size()<< "):[";
    for (auto iter = test_string_stl_list.begin(); iter != test_string_stl_list.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_string_stl_unordered_set(" << test_string_stl_unordered_set.size()<< "):[";
    for (auto iter = test_string_stl_unordered_set.begin(); iter != test_string_stl_unordered_set.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_int_vector(" << test_int_vector.size()<< "):[";
    for (auto iter = test_int_vector.begin(); iter != test_int_vector.end(); ++iter)
    {
        ss << *iter;
        ss << ", ";
    }
    ss << "]";
    ss << "test_int_list(" << test_int_list.size()<< "):[";
    for (auto iter = test_int_list.begin(); iter != test_int_list.end(); ++iter)
    {
        ss << *iter;
        ss << ", ";
    }
    ss << "]";
    ss << "test_int_unordered_set(" << test_int_unordered_set.size()<< "):[";
    for (auto iter = test_int_unordered_set.begin(); iter != test_int_unordered_set.end(); ++iter)
    {
        ss << *iter;
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes:" << "(skip print BYTES)" << ", ";
    ss << "test_bytes_stl:" << "(skip print BYTES)" << ", ";
    ss << "test_bytes_repeated(" << test_bytes_repeated.size()<< "):[";
    for (auto iter = test_bytes_repeated.begin(); iter != test_bytes_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_repeated(" << test_bytes_stl_repeated.size()<< "):[";
    for (auto iter = test_bytes_stl_repeated.begin(); iter != test_bytes_stl_repeated.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_vector(" << test_bytes_stl_vector.size()<< "):[";
    for (auto iter = test_bytes_stl_vector.begin(); iter != test_bytes_stl_vector.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_list(" << test_bytes_stl_list.size()<< "):[";
    for (auto iter = test_bytes_stl_list.begin(); iter != test_bytes_stl_list.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "test_bytes_stl_unordered_set(" << test_bytes_stl_unordered_set.size()<< "):[";
    for (auto iter = test_bytes_stl_unordered_set.begin(); iter != test_bytes_stl_unordered_set.end(); ++iter)
    {
        ss << "\"" << iter->data() << "\"";
        ss << ", ";
    }
    ss << "]";
    ss << "m_dwBuyCount:" << m_dwBuyCount << ", ";
    ss << "m_dwLastBuyTime:" << m_dwLastBuyTime;
    ss << "}";
    return ss.str();
}

WelfareNodeDBDataPddOpen::WelfareNodeDBDataPddOpen()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

WelfareNodeDBDataPddOpen::~WelfareNodeDBDataPddOpen()
{
}

WelfareNodeDBDataPddOpen::WelfareNodeDBDataPddOpen(const WelfareNodeDBDataPddOpen& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

WelfareNodeDBDataPddOpen& WelfareNodeDBDataPddOpen::operator=(const WelfareNodeDBDataPddOpen& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void WelfareNodeDBDataPddOpen::CopyData(const WelfareNodeDBDataPddOpen& stArgsData)
{
    m_dwOpenCount = stArgsData.m_dwOpenCount;
    m_dwLastJoinTime = stArgsData.m_dwLastJoinTime;
    m_ullTeamID = stArgsData.m_ullTeamID;
    m_dwRwdCount = stArgsData.m_dwRwdCount;
    m_dwLastRwdTime = stArgsData.m_dwLastRwdTime;
}

int WelfareNodeDBDataPddOpen::CreateInit()
{
    m_dwOpenCount = 0;
    m_dwLastJoinTime = 0;
    m_ullTeamID = 0;
    m_dwRwdCount = 0;
    m_dwLastRwdTime = 0;
	return 0;
}

int WelfareNodeDBDataPddOpen::ResumeInit()
{
	return 0;
}

void WelfareNodeDBDataPddOpen::Init()
{
    m_dwOpenCount = 0;
    m_dwLastJoinTime = 0;
    m_ullTeamID = 0;
    m_dwRwdCount = 0;
    m_dwLastRwdTime = 0;
}

bool WelfareNodeDBDataPddOpen::FromPb(const NFrameComm::WelfareNodeDBDataPddOpen& cc)
{
    m_dwOpenCount = cc.m_dwopencount();
    m_dwLastJoinTime = cc.m_dwlastjointime();
    m_ullTeamID = cc.m_ullteamid();
    m_dwRwdCount = cc.m_dwrwdcount();
    m_dwLastRwdTime = cc.m_dwlastrwdtime();
    return true;
}

void WelfareNodeDBDataPddOpen::ToPb(NFrameComm::WelfareNodeDBDataPddOpen* cc) const
{
    cc->set_m_dwopencount(m_dwOpenCount);
    cc->set_m_dwlastjointime(m_dwLastJoinTime);
    cc->set_m_ullteamid(m_ullTeamID);
    cc->set_m_dwrwdcount(m_dwRwdCount);
    cc->set_m_dwlastrwdtime(m_dwLastRwdTime);
    return;
}

NFrameComm::WelfareNodeDBDataPddOpen WelfareNodeDBDataPddOpen::ToPb() const
{
    NFrameComm::WelfareNodeDBDataPddOpen cc;
    ToPb(&cc);
    return cc;
}

std::string WelfareNodeDBDataPddOpen::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "m_dwOpenCount:" << m_dwOpenCount << ", ";
    ss << "m_dwLastJoinTime:" << m_dwLastJoinTime << ", ";
    ss << "m_ullTeamID:" << m_ullTeamID << ", ";
    ss << "m_dwRwdCount:" << m_dwRwdCount << ", ";
    ss << "m_dwLastRwdTime:" << m_dwLastRwdTime;
    ss << "}";
    return ss.str();
}

WelfareNodeDBDataGetTaskManual::WelfareNodeDBDataGetTaskManual()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

WelfareNodeDBDataGetTaskManual::~WelfareNodeDBDataGetTaskManual()
{
}

WelfareNodeDBDataGetTaskManual::WelfareNodeDBDataGetTaskManual(const WelfareNodeDBDataGetTaskManual& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

WelfareNodeDBDataGetTaskManual& WelfareNodeDBDataGetTaskManual::operator=(const WelfareNodeDBDataGetTaskManual& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void WelfareNodeDBDataGetTaskManual::CopyData(const WelfareNodeDBDataGetTaskManual& stArgsData)
{
    m_iState = stArgsData.m_iState;
}

int WelfareNodeDBDataGetTaskManual::CreateInit()
{
    m_iState = 0;
	return 0;
}

int WelfareNodeDBDataGetTaskManual::ResumeInit()
{
	return 0;
}

void WelfareNodeDBDataGetTaskManual::Init()
{
    m_iState = 0;
}

bool WelfareNodeDBDataGetTaskManual::FromPb(const NFrameComm::WelfareNodeDBDataGetTaskManual& cc)
{
    m_iState = cc.m_istate();
    return true;
}

void WelfareNodeDBDataGetTaskManual::ToPb(NFrameComm::WelfareNodeDBDataGetTaskManual* cc) const
{
    cc->set_m_istate(m_iState);
    return;
}

NFrameComm::WelfareNodeDBDataGetTaskManual WelfareNodeDBDataGetTaskManual::ToPb() const
{
    NFrameComm::WelfareNodeDBDataGetTaskManual cc;
    ToPb(&cc);
    return cc;
}

std::string WelfareNodeDBDataGetTaskManual::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "m_iState:" << m_iState;
    ss << "}";
    return ss.str();
}

WelfareNodeDBDataUnion::WelfareNodeDBDataUnion()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

WelfareNodeDBDataUnion::~WelfareNodeDBDataUnion()
{
    uninit_which_m_stData();
    uninit_which_m_stData2();
}

WelfareNodeDBDataUnion::WelfareNodeDBDataUnion(const WelfareNodeDBDataUnion& stArgsData)
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

WelfareNodeDBDataUnion& WelfareNodeDBDataUnion::operator=(const WelfareNodeDBDataUnion& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void WelfareNodeDBDataUnion::CopyData(const WelfareNodeDBDataUnion& stArgsData)
{
    init_which_m_stData(stArgsData.which_m_stData);
    switch (stArgsData.which_m_stData)
    {
    case WelfareNodeDBDataUnion_test_string_tag:
        m_stData.test_string = stArgsData.m_stData.test_string;
        break;
    case WelfareNodeDBDataUnion_test_string_stl_tag:
        m_stData.test_string_stl = stArgsData.m_stData.test_string_stl;
        break;
    case WelfareNodeDBDataUnion_test_bytes_tag:
        m_stData.test_bytes = stArgsData.m_stData.test_bytes;
        break;
    case WelfareNodeDBDataUnion_test_bytes_stl_tag:
        m_stData.test_bytes_stl = stArgsData.m_stData.test_bytes_stl;
        break;
    case WelfareNodeDBDataUnion_test_enum_tag:
        m_stData.test_enum = stArgsData.m_stData.test_enum;
        break;
    case WelfareNodeDBDataUnion_m_dwBuyCount_tag:
        m_stData.m_dwBuyCount = stArgsData.m_stData.m_dwBuyCount;
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime_tag:
        m_stData.m_dwLastBuyTime = stArgsData.m_stData.m_dwLastBuyTime;
        break;
    case WelfareNodeDBDataUnion_m_stPddBuy_tag:
        m_stData.m_stPddBuy = stArgsData.m_stData.m_stPddBuy;
        break;
    case WelfareNodeDBDataUnion_m_stPddOpen_tag:
        m_stData.m_stPddOpen = stArgsData.m_stData.m_stPddOpen;
        break;
    case WelfareNodeDBDataUnion_m_stGetTaskManual_tag:
        m_stData.m_stGetTaskManual = stArgsData.m_stData.m_stGetTaskManual;
        break;
    case 0:
        break;
    }
    m_stPddBuy1 = stArgsData.m_stPddBuy1;
    init_which_m_stData2(stArgsData.which_m_stData2);
    switch (stArgsData.which_m_stData2)
    {
    case WelfareNodeDBDataUnion_m_dwBuyCount2_tag:
        m_stData2.m_dwBuyCount2 = stArgsData.m_stData2.m_dwBuyCount2;
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag:
        m_stData2.m_dwLastBuyTime2 = stArgsData.m_stData2.m_dwLastBuyTime2;
        break;
    case 0:
        break;
    }
}

int WelfareNodeDBDataUnion::CreateInit()
{
    which_m_stData = 0;
    which_m_stData2 = 0;
	return 0;
}

int WelfareNodeDBDataUnion::ResumeInit()
{
    switch (which_m_stData)
    {
    case WelfareNodeDBDataUnion_test_string_tag:
        new(&m_stData.test_string) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_string_stl_tag:
        new(&m_stData.test_string_stl) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_bytes_tag:
        new(&m_stData.test_bytes) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_bytes_stl_tag:
        new(&m_stData.test_bytes_stl) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_enum_tag:
        break;
    case WelfareNodeDBDataUnion_m_dwBuyCount_tag:
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime_tag:
        break;
    case WelfareNodeDBDataUnion_m_stPddBuy_tag:
        new(&m_stData.m_stPddBuy) WelfareNodeDBDataPddBuy();
        break;
    case WelfareNodeDBDataUnion_m_stPddOpen_tag:
        new(&m_stData.m_stPddOpen) WelfareNodeDBDataPddOpen();
        break;
    case WelfareNodeDBDataUnion_m_stGetTaskManual_tag:
        new(&m_stData.m_stGetTaskManual) WelfareNodeDBDataGetTaskManual();
        break;
    case 0:
        break;
    }
    switch (which_m_stData2)
    {
    case WelfareNodeDBDataUnion_m_dwBuyCount2_tag:
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag:
        break;
    case 0:
        break;
    }
	return 0;
}

void WelfareNodeDBDataUnion::Init()
{
    which_m_stData = 0;
    m_stPddBuy1.Init();
    which_m_stData2 = 0;
}

bool WelfareNodeDBDataUnion::FromPb(const NFrameComm::WelfareNodeDBDataUnion& cc)
{
    switch (cc.m_stData_case())
    {
    case WelfareNodeDBDataUnion_test_string_tag:
        if (cc.test_string().length() >= 68)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataUnion, field:test_string, cur length:%d, max length:67", cc.test_string().length());
            return false;
        }
        m_stData.test_string = cc.test_string();
        break;
    case WelfareNodeDBDataUnion_test_string_stl_tag:
        if (cc.test_string_stl().length() >= 68)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataUnion, field:test_string_stl, cur length:%d, max length:67", cc.test_string_stl().length());
            return false;
        }
        m_stData.test_string_stl = cc.test_string_stl();
        break;
    case WelfareNodeDBDataUnion_test_bytes_tag:
        if (cc.test_bytes().size() > 68)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataUnion, field:test_bytes, cur size:%d, max size:68", cc.test_bytes().size());
            return false;
        }
        m_stData.test_bytes = cc.test_bytes();
        break;
    case WelfareNodeDBDataUnion_test_bytes_stl_tag:
        if (cc.test_bytes_stl().size() > 68)
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:WelfareNodeDBDataUnion, field:test_bytes_stl, cur size:%d, max size:68", cc.test_bytes_stl().size());
            return false;
        }
        m_stData.test_bytes_stl = cc.test_bytes_stl();
        break;
    case WelfareNodeDBDataUnion_test_enum_tag:
        m_stData.test_enum = static_cast<FrameGlobalTestEnum>(cc.test_enum());
        break;
    case WelfareNodeDBDataUnion_m_dwBuyCount_tag:
        m_stData.m_dwBuyCount = cc.m_dwbuycount();
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime_tag:
        m_stData.m_dwLastBuyTime = cc.m_dwlastbuytime();
        break;
    case WelfareNodeDBDataUnion_m_stPddBuy_tag:
        if (!m_stData.m_stPddBuy.FromPb(cc.m_stpddbuy())) return false;
        break;
    case WelfareNodeDBDataUnion_m_stPddOpen_tag:
        if (!m_stData.m_stPddOpen.FromPb(cc.m_stpddopen())) return false;
        break;
    case WelfareNodeDBDataUnion_m_stGetTaskManual_tag:
        if (!m_stData.m_stGetTaskManual.FromPb(cc.m_stgettaskmanual())) return false;
        break;
    case 0:
        break;
    }
    which_m_stData = cc.m_stData_case();
    if (!m_stPddBuy1.FromPb(cc.m_stpddbuy1())) return false;
    switch (cc.m_stData2_case())
    {
    case WelfareNodeDBDataUnion_m_dwBuyCount2_tag:
        m_stData2.m_dwBuyCount2 = cc.m_dwbuycount2();
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag:
        m_stData2.m_dwLastBuyTime2 = cc.m_dwlastbuytime2();
        break;
    case 0:
        break;
    }
    which_m_stData2 = cc.m_stData2_case();
    return true;
}

void WelfareNodeDBDataUnion::ToPb(NFrameComm::WelfareNodeDBDataUnion* cc) const
{
    switch (which_m_stData)
    {
    case WelfareNodeDBDataUnion_test_string_tag:
        cc->set_test_string(m_stData.test_string.data());
        break;
    case WelfareNodeDBDataUnion_test_string_stl_tag:
        cc->set_test_string_stl(m_stData.test_string_stl.data());
        break;
    case WelfareNodeDBDataUnion_test_bytes_tag:
        cc->set_test_bytes(m_stData.test_bytes.data(), m_stData.test_bytes.length());
        break;
    case WelfareNodeDBDataUnion_test_bytes_stl_tag:
        cc->set_test_bytes_stl(m_stData.test_bytes_stl.data(), m_stData.test_bytes_stl.length());
        break;
    case WelfareNodeDBDataUnion_test_enum_tag:
        cc->set_test_enum(static_cast<NFrameEnum::FrameGlobalTestEnum>(m_stData.test_enum));
        break;
    case WelfareNodeDBDataUnion_m_dwBuyCount_tag:
        cc->set_m_dwbuycount(m_stData.m_dwBuyCount);
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime_tag:
        cc->set_m_dwlastbuytime(m_stData.m_dwLastBuyTime);
        break;
    case WelfareNodeDBDataUnion_m_stPddBuy_tag:
        m_stData.m_stPddBuy.ToPb(cc->mutable_m_stpddbuy());
        break;
    case WelfareNodeDBDataUnion_m_stPddOpen_tag:
        m_stData.m_stPddOpen.ToPb(cc->mutable_m_stpddopen());
        break;
    case WelfareNodeDBDataUnion_m_stGetTaskManual_tag:
        m_stData.m_stGetTaskManual.ToPb(cc->mutable_m_stgettaskmanual());
        break;
    }
    m_stPddBuy1.ToPb(cc->mutable_m_stpddbuy1());
    switch (which_m_stData2)
    {
    case WelfareNodeDBDataUnion_m_dwBuyCount2_tag:
        cc->set_m_dwbuycount2(m_stData2.m_dwBuyCount2);
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag:
        cc->set_m_dwlastbuytime2(m_stData2.m_dwLastBuyTime2);
        break;
    }
    return;
}

NFrameComm::WelfareNodeDBDataUnion WelfareNodeDBDataUnion::ToPb() const
{
    NFrameComm::WelfareNodeDBDataUnion cc;
    ToPb(&cc);
    return cc;
}

std::string WelfareNodeDBDataUnion::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    switch (which_m_stData)
    {
    case WelfareNodeDBDataUnion_test_string_tag:
        ss << "m_stData.test_string" << ":" << "\"" << m_stData.test_string.c_str() << "\"";
        break;
    case WelfareNodeDBDataUnion_test_string_stl_tag:
        ss << "m_stData.test_string_stl" << ":" << "\"" << m_stData.test_string_stl.c_str() << "\"";
        break;
    case WelfareNodeDBDataUnion_test_bytes_tag:
        ss << "m_stData.test_bytes" << ":" << "(skip print BYTES)";
        break;
    case WelfareNodeDBDataUnion_test_bytes_stl_tag:
        ss << "m_stData.test_bytes_stl" << ":" << "(skip print BYTES)";
        break;
    case WelfareNodeDBDataUnion_test_enum_tag:
        ss << "m_stData.test_enum" << ":" << m_stData.test_enum;
        break;
    case WelfareNodeDBDataUnion_m_dwBuyCount_tag:
        ss << "m_stData.m_dwBuyCount" << ":" << m_stData.m_dwBuyCount;
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime_tag:
        ss << "m_stData.m_dwLastBuyTime" << ":" << m_stData.m_dwLastBuyTime;
        break;
    case WelfareNodeDBDataUnion_m_stPddBuy_tag:
        ss << "m_stData.m_stPddBuy" << ":" << m_stData.m_stPddBuy.ShortDebugString();
        break;
    case WelfareNodeDBDataUnion_m_stPddOpen_tag:
        ss << "m_stData.m_stPddOpen" << ":" << m_stData.m_stPddOpen.ShortDebugString();
        break;
    case WelfareNodeDBDataUnion_m_stGetTaskManual_tag:
        ss << "m_stData.m_stGetTaskManual" << ":" << m_stData.m_stGetTaskManual.ShortDebugString();
        break;
    }
;
    ss << "m_stPddBuy1:" << m_stPddBuy1.ShortDebugString() << ", ";
    switch (which_m_stData2)
    {
    case WelfareNodeDBDataUnion_m_dwBuyCount2_tag:
        ss << "m_stData2.m_dwBuyCount2" << ":" << m_stData2.m_dwBuyCount2;
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag:
        ss << "m_stData2.m_dwLastBuyTime2" << ":" << m_stData2.m_dwLastBuyTime2;
        break;
    }
;
    ss << "}";
    return ss.str();
}

void WelfareNodeDBDataUnion::init_which_m_stData(pb_size_t which_data) {
    if (which_m_stData != 0) {
        if (NULL != g_nanopb_frompb_log_handle) {
            g_nanopb_frompb_log_handle("the which_m_stData has inited:%d, now you select:%d", which_m_stData, which_data);
        }
        uninit_which_m_stData();
    }


    switch (which_data)
    {
    case WelfareNodeDBDataUnion_test_string_tag:
        new(&m_stData.test_string) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_string_stl_tag:
        new(&m_stData.test_string_stl) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_bytes_tag:
        new(&m_stData.test_bytes) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_bytes_stl_tag:
        new(&m_stData.test_bytes_stl) NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_enum_tag:
        m_stData.test_enum = _FrameGlobalTestEnum_MIN;
        break;
    case WelfareNodeDBDataUnion_m_dwBuyCount_tag:
        m_stData.m_dwBuyCount = 0;
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime_tag:
        m_stData.m_dwLastBuyTime = 0;
        break;
    case WelfareNodeDBDataUnion_m_stPddBuy_tag:
        new(&m_stData.m_stPddBuy) WelfareNodeDBDataPddBuy();
        break;
    case WelfareNodeDBDataUnion_m_stPddOpen_tag:
        new(&m_stData.m_stPddOpen) WelfareNodeDBDataPddOpen();
        break;
    case WelfareNodeDBDataUnion_m_stGetTaskManual_tag:
        new(&m_stData.m_stGetTaskManual) WelfareNodeDBDataGetTaskManual();
        break;
    case 0:
        break;
    }
    which_m_stData = which_data;
}

void WelfareNodeDBDataUnion::uninit_which_m_stData() {
    switch (which_m_stData)
    {
    case WelfareNodeDBDataUnion_test_string_tag:
        m_stData.test_string.~NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_string_stl_tag:
        m_stData.test_string_stl.~NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_bytes_tag:
        m_stData.test_bytes.~NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_bytes_stl_tag:
        m_stData.test_bytes_stl.~NFShmString<FRAME_ENUM_STRING_NUM>();
        break;
    case WelfareNodeDBDataUnion_test_enum_tag:
        break;
    case WelfareNodeDBDataUnion_m_dwBuyCount_tag:
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime_tag:
        break;
    case WelfareNodeDBDataUnion_m_stPddBuy_tag:
        m_stData.m_stPddBuy.~WelfareNodeDBDataPddBuy();
        break;
    case WelfareNodeDBDataUnion_m_stPddOpen_tag:
        m_stData.m_stPddOpen.~WelfareNodeDBDataPddOpen();
        break;
    case WelfareNodeDBDataUnion_m_stGetTaskManual_tag:
        m_stData.m_stGetTaskManual.~WelfareNodeDBDataGetTaskManual();
        break;
    case 0:
        break;
    }
}

NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_string() {
    if (which_m_stData == WelfareNodeDBDataUnion_test_string_tag) {
        return &m_stData.test_string;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_string_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_string() const {
    if (which_m_stData == WelfareNodeDBDataUnion_test_string_tag) {
        return &m_stData.test_string;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_string_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_string_stl() {
    if (which_m_stData == WelfareNodeDBDataUnion_test_string_stl_tag) {
        return &m_stData.test_string_stl;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_string_stl_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_string_stl() const {
    if (which_m_stData == WelfareNodeDBDataUnion_test_string_stl_tag) {
        return &m_stData.test_string_stl;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_string_stl_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_bytes() {
    if (which_m_stData == WelfareNodeDBDataUnion_test_bytes_tag) {
        return &m_stData.test_bytes;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_bytes_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_bytes() const {
    if (which_m_stData == WelfareNodeDBDataUnion_test_bytes_tag) {
        return &m_stData.test_bytes;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_bytes_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_bytes_stl() {
    if (which_m_stData == WelfareNodeDBDataUnion_test_bytes_stl_tag) {
        return &m_stData.test_bytes_stl;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_bytes_stl_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const NFShmString<FRAME_ENUM_STRING_NUM>* WelfareNodeDBDataUnion::get_m_stData_test_bytes_stl() const {
    if (which_m_stData == WelfareNodeDBDataUnion_test_bytes_stl_tag) {
        return &m_stData.test_bytes_stl;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_bytes_stl_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

FrameGlobalTestEnum* WelfareNodeDBDataUnion::get_m_stData_test_enum() {
    if (which_m_stData == WelfareNodeDBDataUnion_test_enum_tag) {
        return &m_stData.test_enum;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_enum_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const FrameGlobalTestEnum* WelfareNodeDBDataUnion::get_m_stData_test_enum() const {
    if (which_m_stData == WelfareNodeDBDataUnion_test_enum_tag) {
        return &m_stData.test_enum;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_test_enum_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

uint32_t* WelfareNodeDBDataUnion::get_m_stData_m_dwBuyCount() {
    if (which_m_stData == WelfareNodeDBDataUnion_m_dwBuyCount_tag) {
        return &m_stData.m_dwBuyCount;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_dwBuyCount_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const uint32_t* WelfareNodeDBDataUnion::get_m_stData_m_dwBuyCount() const {
    if (which_m_stData == WelfareNodeDBDataUnion_m_dwBuyCount_tag) {
        return &m_stData.m_dwBuyCount;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_dwBuyCount_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

uint32_t* WelfareNodeDBDataUnion::get_m_stData_m_dwLastBuyTime() {
    if (which_m_stData == WelfareNodeDBDataUnion_m_dwLastBuyTime_tag) {
        return &m_stData.m_dwLastBuyTime;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_dwLastBuyTime_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const uint32_t* WelfareNodeDBDataUnion::get_m_stData_m_dwLastBuyTime() const {
    if (which_m_stData == WelfareNodeDBDataUnion_m_dwLastBuyTime_tag) {
        return &m_stData.m_dwLastBuyTime;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_dwLastBuyTime_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

WelfareNodeDBDataPddBuy* WelfareNodeDBDataUnion::get_m_stData_m_stPddBuy() {
    if (which_m_stData == WelfareNodeDBDataUnion_m_stPddBuy_tag) {
        return &m_stData.m_stPddBuy;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_stPddBuy_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const WelfareNodeDBDataPddBuy* WelfareNodeDBDataUnion::get_m_stData_m_stPddBuy() const {
    if (which_m_stData == WelfareNodeDBDataUnion_m_stPddBuy_tag) {
        return &m_stData.m_stPddBuy;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_stPddBuy_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

WelfareNodeDBDataPddOpen* WelfareNodeDBDataUnion::get_m_stData_m_stPddOpen() {
    if (which_m_stData == WelfareNodeDBDataUnion_m_stPddOpen_tag) {
        return &m_stData.m_stPddOpen;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_stPddOpen_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const WelfareNodeDBDataPddOpen* WelfareNodeDBDataUnion::get_m_stData_m_stPddOpen() const {
    if (which_m_stData == WelfareNodeDBDataUnion_m_stPddOpen_tag) {
        return &m_stData.m_stPddOpen;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_stPddOpen_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

WelfareNodeDBDataGetTaskManual* WelfareNodeDBDataUnion::get_m_stData_m_stGetTaskManual() {
    if (which_m_stData == WelfareNodeDBDataUnion_m_stGetTaskManual_tag) {
        return &m_stData.m_stGetTaskManual;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_stGetTaskManual_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

const WelfareNodeDBDataGetTaskManual* WelfareNodeDBDataUnion::get_m_stData_m_stGetTaskManual() const {
    if (which_m_stData == WelfareNodeDBDataUnion_m_stGetTaskManual_tag) {
        return &m_stData.m_stGetTaskManual;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData:%d != WelfareNodeDBDataUnion_m_stGetTaskManual_tag, so return NULL", which_m_stData);
    }
    return NULL;
}

void WelfareNodeDBDataUnion::init_which_m_stData2(pb_size_t which_data) {
    if (which_m_stData2 != 0) {
        if (NULL != g_nanopb_frompb_log_handle) {
            g_nanopb_frompb_log_handle("the which_m_stData2 has inited:%d, now you select:%d", which_m_stData2, which_data);
        }
        uninit_which_m_stData2();
    }


    switch (which_data)
    {
    case WelfareNodeDBDataUnion_m_dwBuyCount2_tag:
        m_stData2.m_dwBuyCount2 = 0;
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag:
        m_stData2.m_dwLastBuyTime2 = 0;
        break;
    case 0:
        break;
    }
    which_m_stData2 = which_data;
}

void WelfareNodeDBDataUnion::uninit_which_m_stData2() {
    switch (which_m_stData2)
    {
    case WelfareNodeDBDataUnion_m_dwBuyCount2_tag:
        break;
    case WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag:
        break;
    case 0:
        break;
    }
}

uint32_t* WelfareNodeDBDataUnion::get_m_stData2_m_dwBuyCount2() {
    if (which_m_stData2 == WelfareNodeDBDataUnion_m_dwBuyCount2_tag) {
        return &m_stData2.m_dwBuyCount2;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData2:%d != WelfareNodeDBDataUnion_m_dwBuyCount2_tag, so return NULL", which_m_stData2);
    }
    return NULL;
}

const uint32_t* WelfareNodeDBDataUnion::get_m_stData2_m_dwBuyCount2() const {
    if (which_m_stData2 == WelfareNodeDBDataUnion_m_dwBuyCount2_tag) {
        return &m_stData2.m_dwBuyCount2;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData2:%d != WelfareNodeDBDataUnion_m_dwBuyCount2_tag, so return NULL", which_m_stData2);
    }
    return NULL;
}

uint32_t* WelfareNodeDBDataUnion::get_m_stData2_m_dwLastBuyTime2() {
    if (which_m_stData2 == WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag) {
        return &m_stData2.m_dwLastBuyTime2;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData2:%d != WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag, so return NULL", which_m_stData2);
    }
    return NULL;
}

const uint32_t* WelfareNodeDBDataUnion::get_m_stData2_m_dwLastBuyTime2() const {
    if (which_m_stData2 == WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag) {
        return &m_stData2.m_dwLastBuyTime2;
    }
    if (NULL != g_nanopb_frompb_log_handle) {
        g_nanopb_frompb_log_handle("the which_m_stData2:%d != WelfareNodeDBDataUnion_m_dwLastBuyTime2_tag, so return NULL", which_m_stData2);
    }
    return NULL;
}

BevLogTestItem::BevLogTestItem()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

BevLogTestItem::~BevLogTestItem()
{
}

BevLogTestItem::BevLogTestItem(const BevLogTestItem& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

BevLogTestItem& BevLogTestItem::operator=(const BevLogTestItem& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void BevLogTestItem::CopyData(const BevLogTestItem& stArgsData)
{
    item_id = stArgsData.item_id;
    item_num = stArgsData.item_num;
}

int BevLogTestItem::CreateInit()
{
    item_id = 0;
    item_num = 0;
	return 0;
}

int BevLogTestItem::ResumeInit()
{
	return 0;
}

void BevLogTestItem::Init()
{
    item_id = 0;
    item_num = 0;
}

bool BevLogTestItem::FromPb(const NFrameComm::BevLogTestItem& cc)
{
    item_id = cc.item_id();
    item_num = cc.item_num();
    return true;
}

void BevLogTestItem::ToPb(NFrameComm::BevLogTestItem* cc) const
{
    cc->set_item_id(item_id);
    cc->set_item_num(item_num);
    return;
}

NFrameComm::BevLogTestItem BevLogTestItem::ToPb() const
{
    NFrameComm::BevLogTestItem cc;
    ToPb(&cc);
    return cc;
}

std::string BevLogTestItem::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "item_id:" << item_id << ", ";
    ss << "item_num:" << item_num;
    ss << "}";
    return ss.str();
}

BevLogTest::BevLogTest()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

BevLogTest::~BevLogTest()
{
}

BevLogTest::BevLogTest(const BevLogTest& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

BevLogTest& BevLogTest::operator=(const BevLogTest& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void BevLogTest::CopyData(const BevLogTest& stArgsData)
{
    tDtEventTime = stArgsData.tDtEventTime;
    szVGameIP = stArgsData.szVGameIP;
    iIZoneAreaID = stArgsData.iIZoneAreaID;
    iITimeShift = stArgsData.iITimeShift;
    item = stArgsData.item;
    item_list = stArgsData.item_list;
    id_list = stArgsData.id_list;
}

int BevLogTest::CreateInit()
{
    tDtEventTime = 0;
    iIZoneAreaID = 0;
    iITimeShift = 0;
	return 0;
}

int BevLogTest::ResumeInit()
{
	return 0;
}

void BevLogTest::Init()
{
    tDtEventTime = 0;
    szVGameIP.Init();
    iIZoneAreaID = 0;
    iITimeShift = 0;
    item.Init();
    item_list.Init();
    id_list.Init();
}

bool BevLogTest::FromPb(const NFrameComm::BevLogTest& cc)
{
    tDtEventTime = cc.tdteventtime();
    if (cc.szvgameip().length() >= 32)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogTest, field:szVGameIP, cur length:%d, max length:31", cc.szvgameip().length());
        return false;
    }
    szVGameIP = cc.szvgameip();
    iIZoneAreaID = cc.iizoneareaid();
    iITimeShift = cc.iitimeshift();
    if (!item.FromPb(cc.item())) return false;
    item_list.clear();
    if (cc.item_list_size() > MAX_REPEATED_DEFAULT_COUNT)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogTest, field:item_list, cur count:%d, max count:%d", cc.item_list_size(), MAX_REPEATED_DEFAULT_COUNT);
        return false;
    }
    for (int i = 0; i < cc.item_list_size(); ++i)
    {
        if (item_list.size() >= item_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:BevLogTest, field:item_list, cur count:%d, max count:%d", cc.item_list_size(), MAX_REPEATED_DEFAULT_COUNT);
            return false;
        }
        item_list.emplace_back();
        if (!item_list.back().FromPb(cc.item_list(i)))
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:BevLogTest, field:item_list, cur count:%d, max count:%d", cc.item_list_size(), MAX_REPEATED_DEFAULT_COUNT);
            return false;
        }
    }
    id_list.clear();
    if (cc.id_list_size() > MAX_REPEATED_DEFAULT_COUNT)
    {
        if (NULL != g_nanopb_frompb_log_handle)
            g_nanopb_frompb_log_handle("struct:BevLogTest, field:id_list, cur count:%d, max count:%d", cc.id_list_size(), MAX_REPEATED_DEFAULT_COUNT);
        return false;
    }
    for (int i = 0; i < cc.id_list_size(); ++i)
    {
        if (id_list.size() >= id_list.max_size())
        {
            if (NULL != g_nanopb_frompb_log_handle)
                g_nanopb_frompb_log_handle("struct:BevLogTest, field:id_list, cur count:%d, max count:%d", cc.id_list_size(), MAX_REPEATED_DEFAULT_COUNT);
            return false;
        }
        id_list.push_back(cc.id_list(i));
    }
    return true;
}

void BevLogTest::ToPb(NFrameComm::BevLogTest* cc) const
{
    cc->set_tdteventtime(tDtEventTime);
    cc->set_szvgameip(szVGameIP.data());
    cc->set_iizoneareaid(iIZoneAreaID);
    cc->set_iitimeshift(iITimeShift);
    item.ToPb(cc->mutable_item());
    cc->clear_item_list();
    for (auto iter = item_list.begin(); iter != item_list.end(); ++iter)
    {
        iter->ToPb(cc->add_item_list());
    }
    cc->clear_id_list();
    for (auto iter = id_list.begin(); iter != id_list.end(); ++iter)
    {
        cc->add_id_list(*iter);
    }
    return;
}

NFrameComm::BevLogTest BevLogTest::ToPb() const
{
    NFrameComm::BevLogTest cc;
    ToPb(&cc);
    return cc;
}

std::string BevLogTest::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "tDtEventTime:" << tDtEventTime << ", ";
    ss << "szVGameIP:" << "\"" << szVGameIP.data() << "\"" << ", ";
    ss << "iIZoneAreaID:" << iIZoneAreaID << ", ";
    ss << "iITimeShift:" << iITimeShift << ", ";
    ss << "item:" << item.ShortDebugString() << ", ";
    ss << "item_list(" << item_list.size()<< "):[";
    for (auto iter = item_list.begin(); iter != item_list.end(); ++iter)
    {
        ss << iter->ShortDebugString();
        ss << ", ";
    }
    ss << "]";
    ss << "id_list(" << id_list.size()<< "):[";
    for (auto iter = id_list.begin(); iter != id_list.end(); ++iter)
    {
        ss << *iter;
        ss << ", ";
    }
    ss << "]";
    ss << "}";
    return ss.str();
}




/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(WelfareNodeDBDataUnion, m_stData.m_stPddBuy) < 65536 && pb_membersize(WelfareNodeDBDataUnion, m_stData.m_stPddOpen) < 65536 && pb_membersize(WelfareNodeDBDataUnion, m_stData.m_stGetTaskManual) < 65536 && pb_membersize(WelfareNodeDBDataUnion, m_stPddBuy1) < 65536 && pb_membersize(BevLogTest, item) < 65536 && pb_membersize(BevLogTest, item_list[0]) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_wxWorkRobotTextTest_WelfareNodeDBDataPddBuy_WelfareNodeDBDataPddOpen_WelfareNodeDBDataGetTaskManual_WelfareNodeDBDataUnion_BevLogTestItem_BevLogTest)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
#error Field descriptor for WelfareNodeDBDataUnion.m_stGetTaskManual is too large. Define PB_FIELD_16BIT to fix this.
#endif


/* @@protoc_insertion_point(eof) */
