// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* tbServerMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbServerMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbMysqlConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbMysqlConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbRedisConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbRedisConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbRouteConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbRouteConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbNetConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbNetConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbAllServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbAllServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbPluginConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbPluginConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbTableConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbTableConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbNFServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbNFServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* wxWorkRobotText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wxWorkRobotText_reflection_ = NULL;
const ::google::protobuf::Descriptor* wxWorkRobotHttpPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wxWorkRobotHttpPost_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NF_SERVER_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fcommon_2eproto() {
  protobuf_AddDesc_proto_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_common.proto");
  GOOGLE_CHECK(file != NULL);
  tbServerMgr_descriptor_ = file->message_type(0);
  static const int tbServerMgr_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, server_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, cur_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, create_time_),
  };
  tbServerMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbServerMgr_descriptor_,
      tbServerMgr::default_instance_,
      tbServerMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbServerMgr));
  pbMysqlConfig_descriptor_ = file->message_type(1);
  static const int pbMysqlConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, mysqlip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, mysqlport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, mysqldbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, mysqluser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, mysqlpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, tbconflist_),
  };
  pbMysqlConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbMysqlConfig_descriptor_,
      pbMysqlConfig::default_instance_,
      pbMysqlConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMysqlConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbMysqlConfig));
  pbRedisConfig_descriptor_ = file->message_type(2);
  static const int pbRedisConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRedisConfig, redisip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRedisConfig, redisport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRedisConfig, redispass_),
  };
  pbRedisConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbRedisConfig_descriptor_,
      pbRedisConfig::default_instance_,
      pbRedisConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRedisConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRedisConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbRedisConfig));
  pbRouteConfig_descriptor_ = file->message_type(3);
  static const int pbRouteConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRouteConfig, masterip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRouteConfig, masterport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRouteConfig, naminghost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRouteConfig, namingpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRouteConfig, routeagent_),
  };
  pbRouteConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbRouteConfig_descriptor_,
      pbRouteConfig::default_instance_,
      pbRouteConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRouteConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRouteConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbRouteConfig));
  pbNetConfig_descriptor_ = file->message_type(4);
  static const int pbNetConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, serverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, externalserverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, externalserverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, httpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, maxconnectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, workthreadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, netthreadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, security_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, websocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, mparsetype_),
  };
  pbNetConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbNetConfig_descriptor_,
      pbNetConfig::default_instance_,
      pbNetConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNetConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbNetConfig));
  pbAllServerConfig_descriptor_ = file->message_type(5);
  static const int pbAllServerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAllServerConfig, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAllServerConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAllServerConfig, servertype_),
  };
  pbAllServerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbAllServerConfig_descriptor_,
      pbAllServerConfig::default_instance_,
      pbAllServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAllServerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAllServerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbAllServerConfig));
  pbPluginConfig_descriptor_ = file->message_type(6);
  static const int pbPluginConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPluginConfig, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPluginConfig, serverplugins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPluginConfig, serverlist_),
  };
  pbPluginConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbPluginConfig_descriptor_,
      pbPluginConfig::default_instance_,
      pbPluginConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPluginConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPluginConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbPluginConfig));
  pbTableConfig_descriptor_ = file->message_type(7);
  static const int pbTableConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTableConfig, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTableConfig, tablecount_),
  };
  pbTableConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbTableConfig_descriptor_,
      pbTableConfig::default_instance_,
      pbTableConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTableConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbTableConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbTableConfig));
  pbNFServerConfig_descriptor_ = file->message_type(8);
  static const int pbNFServerConfig_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, busid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, buslength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, linkmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, idlesleepus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, serverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, serverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, externalserverip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, externalserverport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, httpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, maxconnectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, workthreadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, netthreadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, security_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, websocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, parsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, masterip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, masterport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, naminghost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, namingpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, routeagent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, mysqlip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, mysqlport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, mysqldbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, mysqluser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, mysqlpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, defaultdbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, crossdbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, tbconflist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, redisip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, redisport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, redispass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, sendemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, sendemailpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, sendemailurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, sendemailport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, recvemail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, wxworkdrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, maxonlineplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, heartbeattimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, clientkeepalivetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, clientversion_),
  };
  pbNFServerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbNFServerConfig_descriptor_,
      pbNFServerConfig::default_instance_,
      pbNFServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbNFServerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbNFServerConfig));
  wxWorkRobotText_descriptor_ = file->message_type(9);
  static const int wxWorkRobotText_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotText, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotText, mentioned_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotText, mentioned_mobile_list_),
  };
  wxWorkRobotText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wxWorkRobotText_descriptor_,
      wxWorkRobotText::default_instance_,
      wxWorkRobotText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wxWorkRobotText));
  wxWorkRobotHttpPost_descriptor_ = file->message_type(10);
  static const int wxWorkRobotHttpPost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotHttpPost, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotHttpPost, text_),
  };
  wxWorkRobotHttpPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wxWorkRobotHttpPost_descriptor_,
      wxWorkRobotHttpPost::default_instance_,
      wxWorkRobotHttpPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotHttpPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wxWorkRobotHttpPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wxWorkRobotHttpPost));
  NF_SERVER_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbServerMgr_descriptor_, &tbServerMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbMysqlConfig_descriptor_, &pbMysqlConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbRedisConfig_descriptor_, &pbRedisConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbRouteConfig_descriptor_, &pbRouteConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbNetConfig_descriptor_, &pbNetConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbAllServerConfig_descriptor_, &pbAllServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbPluginConfig_descriptor_, &pbPluginConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbTableConfig_descriptor_, &pbTableConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbNFServerConfig_descriptor_, &pbNFServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wxWorkRobotText_descriptor_, &wxWorkRobotText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wxWorkRobotHttpPost_descriptor_, &wxWorkRobotHttpPost::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fcommon_2eproto() {
  delete tbServerMgr::default_instance_;
  delete tbServerMgr_reflection_;
  delete pbMysqlConfig::default_instance_;
  delete pbMysqlConfig_reflection_;
  delete pbRedisConfig::default_instance_;
  delete pbRedisConfig_reflection_;
  delete pbRouteConfig::default_instance_;
  delete pbRouteConfig_reflection_;
  delete pbNetConfig::default_instance_;
  delete pbNetConfig_reflection_;
  delete pbAllServerConfig::default_instance_;
  delete pbAllServerConfig_reflection_;
  delete pbPluginConfig::default_instance_;
  delete pbPluginConfig_reflection_;
  delete pbTableConfig::default_instance_;
  delete pbTableConfig_reflection_;
  delete pbNFServerConfig::default_instance_;
  delete pbNFServerConfig_reflection_;
  delete wxWorkRobotText::default_instance_;
  delete wxWorkRobotText_reflection_;
  delete wxWorkRobotHttpPost::default_instance_;
  delete wxWorkRobotHttpPost_reflection_;
}

void protobuf_AddDesc_proto_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto_common.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"\314\003\n\013tbServerMgr\022\026\n\002id\030\001 \001("
    "\004B\n\300\202\024\002\272\304\023\002ID\022-\n\010contract\030\002 \001(\tB\033\300\202\024\003\220\301\024"
    "\200\001\310\202\024\200\001\272\304\023\t\345\220\210\345\220\214\345\217\267\0221\n\014machine_addr\030\003 \001"
    "(\tB\033\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\t\346\234\272\345\231\250\347\240\201\022&\n\002ip\030\004 "
    "\001(\tB\032\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\010IP\345\234\260\345\235\200\022/\n\010bus_n"
    "ame\030\005 \001(\tB\035\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\013\346\234\215\345\212\241\345\231\250ID"
    "\022/\n\013server_desc\030\006 \001(\tB\032\220\301\024\200\001\310\202\024\200\001\272\304\023\014\346\217\217"
    "\350\277\260\344\277\241\346\201\257\022)\n\tcur_count\030\007 \001(\rB\026\272\304\023\022\345\275\223\345\211\215"
    "\346\234\215\345\212\241\345\231\250\346\225\260\0222\n\017last_login_time\030\010 \001(\004B\031\272"
    "\304\023\025\344\270\212\344\270\200\346\254\241\347\231\273\345\275\225\346\227\266\351\227\264\0223\n\020last_logout_"
    "time\030\t \001(\004B\031\272\304\023\025\344\270\212\344\270\200\346\254\241\344\270\213\347\272\277\346\227\266\351\227\264\022%\n"
    "\013create_time\030\n \001(\004B\020\272\304\023\014\345\210\233\345\273\272\346\227\266\351\227\264\"\245\001\n"
    "\rpbMysqlConfig\022\025\n\007MysqlIp\030\001 \001(\tB\004\240\301\024\001\022\021\n"
    "\tMysqlPort\030\002 \001(\r\022\023\n\013MysqlDbName\030\003 \001(\t\022\021\n"
    "\tMysqlUser\030\004 \001(\t\022\025\n\rMysqlPassword\030\005 \001(\t\022"
    "+\n\nTBConfList\030\006 \003(\0132\027.proto_ff.pbTableCo"
    "nfig\"L\n\rpbRedisConfig\022\025\n\007RedisIp\030\001 \001(\tB\004"
    "\240\301\024\001\022\021\n\tRedisPort\030\002 \001(\r\022\021\n\tRedisPass\030\003 \001"
    "(\t\"w\n\rpbRouteConfig\022\026\n\010MasterIp\030\001 \001(\tB\004\240"
    "\301\024\001\022\022\n\nMasterPort\030\002 \001(\r\022\022\n\nNamingHost\030\003 "
    "\001(\t\022\022\n\nNamingPath\030\004 \001(\t\022\022\n\nRouteAgent\030\005 "
    "\001(\t\"\376\001\n\013pbNetConfig\022\026\n\010ServerIp\030\001 \001(\tB\004\240"
    "\301\024\001\022\022\n\nServerPort\030\002 \001(\r\022\030\n\020ExternalServe"
    "rIp\030\003 \001(\t\022\032\n\022ExternalServerPort\030\004 \001(\r\022\020\n"
    "\010HttpPort\030\005 \001(\r\022\025\n\rMaxConnectNum\030\006 \001(\r\022\025"
    "\n\rWorkThreadNum\030\007 \001(\r\022\024\n\014NetThreadNum\030\010 "
    "\001(\r\022\020\n\010Security\030\t \001(\010\022\021\n\tWebSocket\030\n \001(\010"
    "\022\022\n\nmParseType\030\013 \001(\r\"I\n\021pbAllServerConfi"
    "g\022\024\n\006Server\030\001 \001(\tB\004\240\301\024\001\022\n\n\002ID\030\002 \001(\t\022\022\n\nS"
    "erverType\030\003 \001(\r\"r\n\016pbPluginConfig\022\030\n\nSer"
    "verType\030\001 \001(\rB\004\240\301\024\001\022\025\n\rServerPlugins\030\002 \003"
    "(\t\022/\n\nServerList\030\003 \003(\0132\033.proto_ff.pbAllS"
    "erverConfig\"<\n\rpbTableConfig\022\027\n\tTableNam"
    "e\030\001 \001(\tB\004\240\301\024\001\022\022\n\nTableCount\030\002 \001(\r\"\324\007\n\020pb"
    "NFServerConfig\022\026\n\010ServerId\030\001 \001(\tB\004\240\301\024\001\022\022"
    "\n\nServerType\030\002 \001(\r\022\022\n\nServerName\030\003 \001(\t\022\r"
    "\n\005BusId\030\004 \001(\r\022\021\n\tBusLength\030\005 \001(\r\022\020\n\010Link"
    "Mode\030\007 \001(\t\022\013\n\003Url\030\010 \001(\t\022\023\n\013IdleSleepUS\030\t"
    " \001(\r\022\020\n\010ServerIp\030\024 \001(\t\022\022\n\nServerPort\030\025 \001"
    "(\r\022\030\n\020ExternalServerIp\030\026 \001(\t\022\032\n\022External"
    "ServerPort\030\027 \001(\r\022\020\n\010HttpPort\030\030 \001(\r\022\025\n\rMa"
    "xConnectNum\030\031 \001(\r\022\025\n\rWorkThreadNum\030\032 \001(\r"
    "\022\024\n\014NetThreadNum\030\033 \001(\r\022\020\n\010Security\030\034 \001(\010"
    "\022\021\n\tWebSocket\030\035 \001(\010\022\021\n\tParseType\030\036 \001(\r\022\020"
    "\n\010MasterIp\0302 \001(\t\022\022\n\nMasterPort\0303 \001(\r\022\022\n\n"
    "NamingHost\0304 \001(\t\022\022\n\nNamingPath\0305 \001(\t\022\022\n\n"
    "RouteAgent\0306 \001(\t\022\017\n\007MysqlIp\030F \001(\t\022\021\n\tMys"
    "qlPort\030G \001(\r\022\023\n\013MysqlDbName\030H \001(\t\022\021\n\tMys"
    "qlUser\030I \001(\t\022\025\n\rMysqlPassword\030J \001(\t\022\025\n\rD"
    "efaultDBName\030K \001(\t\022\023\n\013CrossDBName\030L \001(\t\022"
    "+\n\nTBConfList\030M \003(\0132\027.proto_ff.pbTableCo"
    "nfig\022\017\n\007RedisIp\030P \001(\t\022\021\n\tRedisPort\030Q \001(\r"
    "\022\021\n\tRedisPass\030R \001(\t\022\021\n\tsendEmail\030[ \001(\t\022\025"
    "\n\rsendEmailPass\030\\ \001(\t\022\024\n\014sendEmailUrl\030] "
    "\001(\t\022\025\n\rsendEmailPort\030^ \001(\t\022\021\n\trecvEmail\030"
    "_ \001(\t\022\024\n\014wxWorkdRobot\030` \001(\t\022\032\n\022MaxOnline"
    "PlayerNum\030d \001(\r\022\030\n\020HeartBeatTimeout\030e \001("
    "\r\022\036\n\026ClientKeepAliveTimeout\030f \001(\r\022\025\n\rCli"
    "entVersion\030g \001(\r\"_\n\017wxWorkRobotText\022\025\n\007c"
    "ontent\030\001 \001(\tB\004\240\301\024\001\022\026\n\016mentioned_list\030\002 \003"
    "(\t\022\035\n\025mentioned_mobile_list\030\003 \003(\t\"U\n\023wxW"
    "orkRobotHttpPost\022\025\n\007msgtype\030\001 \001(\tB\004\240\301\024\001\022"
    "\'\n\004text\030\002 \001(\0132\031.proto_ff.wxWorkRobotText"
    "*\224\003\n\016NF_SERVER_TYPE\022\016\n\nNF_ST_NONE\020\000\022\027\n\023N"
    "F_ST_MASTER_SERVER\020\001\022\034\n\030NF_ST_ROUTE_AGEN"
    "T_SERVER\020\002\022\026\n\022NF_ST_ROUTE_SERVER\020\003\022\026\n\022NF"
    "_ST_PROXY_SERVER\020\004\022!\n\035NF_ST_PROXY_SERVER"
    "_FOR_CLIENT\020\005\022\034\n\030NF_ST_PROXY_AGENT_SERVE"
    "R\020\006\022\026\n\022NF_ST_STORE_SERVER\020\007\022\026\n\022NF_ST_LOG"
    "IN_SERVER\020\010\022\026\n\022NF_ST_WORLD_SERVER\020\t\022\026\n\022N"
    "F_ST_LOGIC_SERVER\020\n\022\025\n\021NF_ST_GAME_SERVER"
    "\020\013\022\024\n\020NF_ST_SNS_SERVER\020\014\022\024\n\020NF_ST_WEB_SE"
    "RVER\020\r\022\030\n\024NF_ST_MONITOR_SERVER\020\016\022\r\n\tNF_S"
    "T_MAX\020\024", 2967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_common.proto", &protobuf_RegisterTypes);
  tbServerMgr::default_instance_ = new tbServerMgr();
  pbMysqlConfig::default_instance_ = new pbMysqlConfig();
  pbRedisConfig::default_instance_ = new pbRedisConfig();
  pbRouteConfig::default_instance_ = new pbRouteConfig();
  pbNetConfig::default_instance_ = new pbNetConfig();
  pbAllServerConfig::default_instance_ = new pbAllServerConfig();
  pbPluginConfig::default_instance_ = new pbPluginConfig();
  pbTableConfig::default_instance_ = new pbTableConfig();
  pbNFServerConfig::default_instance_ = new pbNFServerConfig();
  wxWorkRobotText::default_instance_ = new wxWorkRobotText();
  wxWorkRobotHttpPost::default_instance_ = new wxWorkRobotHttpPost();
  tbServerMgr::default_instance_->InitAsDefaultInstance();
  pbMysqlConfig::default_instance_->InitAsDefaultInstance();
  pbRedisConfig::default_instance_->InitAsDefaultInstance();
  pbRouteConfig::default_instance_->InitAsDefaultInstance();
  pbNetConfig::default_instance_->InitAsDefaultInstance();
  pbAllServerConfig::default_instance_->InitAsDefaultInstance();
  pbPluginConfig::default_instance_->InitAsDefaultInstance();
  pbTableConfig::default_instance_->InitAsDefaultInstance();
  pbNFServerConfig::default_instance_->InitAsDefaultInstance();
  wxWorkRobotText::default_instance_->InitAsDefaultInstance();
  wxWorkRobotHttpPost::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fcommon_2eproto {
  StaticDescriptorInitializer_proto_5fcommon_2eproto() {
    protobuf_AddDesc_proto_5fcommon_2eproto();
  }
} static_descriptor_initializer_proto_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* NF_SERVER_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NF_SERVER_TYPE_descriptor_;
}
bool NF_SERVER_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int tbServerMgr::kIdFieldNumber;
const int tbServerMgr::kContractFieldNumber;
const int tbServerMgr::kMachineAddrFieldNumber;
const int tbServerMgr::kIpFieldNumber;
const int tbServerMgr::kBusNameFieldNumber;
const int tbServerMgr::kServerDescFieldNumber;
const int tbServerMgr::kCurCountFieldNumber;
const int tbServerMgr::kLastLoginTimeFieldNumber;
const int tbServerMgr::kLastLogoutTimeFieldNumber;
const int tbServerMgr::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

tbServerMgr::tbServerMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbServerMgr::InitAsDefaultInstance() {
}

tbServerMgr::tbServerMgr(const tbServerMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbServerMgr::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_count_ = 0u;
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbServerMgr::~tbServerMgr() {
  SharedDtor();
}

void tbServerMgr::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete server_desc_;
  }
  if (this != default_instance_) {
  }
}

void tbServerMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbServerMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbServerMgr_descriptor_;
}

const tbServerMgr& tbServerMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbServerMgr* tbServerMgr::default_instance_ = NULL;

tbServerMgr* tbServerMgr::New() const {
  return new tbServerMgr;
}

void tbServerMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_server_desc()) {
      if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
        server_desc_->clear();
      }
    }
    cur_count_ = 0u;
    last_login_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_logout_time_ = GOOGLE_ULONGLONG(0);
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbServerMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // optional string contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_desc;
        break;
      }

      // optional string server_desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_desc().data(), this->server_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_count;
        break;
      }

      // optional uint32 cur_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_count_)));
          set_has_cur_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_logout_time;
        break;
      }

      // optional uint64 last_logout_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbServerMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contract(), output);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_addr(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bus_name(), output);
  }

  // optional string server_desc = 6;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->server_desc(), output);
  }

  // optional uint32 cur_count = 7;
  if (has_cur_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_count(), output);
  }

  // optional uint64 last_login_time = 8;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_login_time(), output);
  }

  // optional uint64 last_logout_time = 9;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_logout_time(), output);
  }

  // optional uint64 create_time = 10;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbServerMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_addr(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bus_name(), target);
  }

  // optional string server_desc = 6;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_desc(), target);
  }

  // optional uint32 cur_count = 7;
  if (has_cur_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_count(), target);
  }

  // optional uint64 last_login_time = 8;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_login_time(), target);
  }

  // optional uint64 last_logout_time = 9;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_logout_time(), target);
  }

  // optional uint64 create_time = 10;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbServerMgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string contract = 2;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional string machine_addr = 3;
    if (has_machine_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string bus_name = 5;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string server_desc = 6;
    if (has_server_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_desc());
    }

    // optional uint32 cur_count = 7;
    if (has_cur_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_count());
    }

    // optional uint64 last_login_time = 8;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 last_logout_time = 9;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout_time());
    }

    // optional uint64 create_time = 10;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbServerMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbServerMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbServerMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbServerMgr::MergeFrom(const tbServerMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_server_desc()) {
      set_server_desc(from.server_desc());
    }
    if (from.has_cur_count()) {
      set_cur_count(from.cur_count());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbServerMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbServerMgr::CopyFrom(const tbServerMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbServerMgr::IsInitialized() const {

  return true;
}

void tbServerMgr::Swap(tbServerMgr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contract_, other->contract_);
    std::swap(machine_addr_, other->machine_addr_);
    std::swap(ip_, other->ip_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(server_desc_, other->server_desc_);
    std::swap(cur_count_, other->cur_count_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbServerMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbServerMgr_descriptor_;
  metadata.reflection = tbServerMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbMysqlConfig::kMysqlIpFieldNumber;
const int pbMysqlConfig::kMysqlPortFieldNumber;
const int pbMysqlConfig::kMysqlDbNameFieldNumber;
const int pbMysqlConfig::kMysqlUserFieldNumber;
const int pbMysqlConfig::kMysqlPasswordFieldNumber;
const int pbMysqlConfig::kTBConfListFieldNumber;
#endif  // !_MSC_VER

pbMysqlConfig::pbMysqlConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbMysqlConfig::InitAsDefaultInstance() {
}

pbMysqlConfig::pbMysqlConfig(const pbMysqlConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbMysqlConfig::SharedCtor() {
  _cached_size_ = 0;
  mysqlip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqlport_ = 0u;
  mysqldbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqluser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqlpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbMysqlConfig::~pbMysqlConfig() {
  SharedDtor();
}

void pbMysqlConfig::SharedDtor() {
  if (mysqlip_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqlip_;
  }
  if (mysqldbname_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqldbname_;
  }
  if (mysqluser_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqluser_;
  }
  if (mysqlpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqlpassword_;
  }
  if (this != default_instance_) {
  }
}

void pbMysqlConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbMysqlConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbMysqlConfig_descriptor_;
}

const pbMysqlConfig& pbMysqlConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbMysqlConfig* pbMysqlConfig::default_instance_ = NULL;

pbMysqlConfig* pbMysqlConfig::New() const {
  return new pbMysqlConfig;
}

void pbMysqlConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mysqlip()) {
      if (mysqlip_ != &::google::protobuf::internal::kEmptyString) {
        mysqlip_->clear();
      }
    }
    mysqlport_ = 0u;
    if (has_mysqldbname()) {
      if (mysqldbname_ != &::google::protobuf::internal::kEmptyString) {
        mysqldbname_->clear();
      }
    }
    if (has_mysqluser()) {
      if (mysqluser_ != &::google::protobuf::internal::kEmptyString) {
        mysqluser_->clear();
      }
    }
    if (has_mysqlpassword()) {
      if (mysqlpassword_ != &::google::protobuf::internal::kEmptyString) {
        mysqlpassword_->clear();
      }
    }
  }
  tbconflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbMysqlConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MysqlIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqlip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqlip().data(), this->mysqlip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MysqlPort;
        break;
      }

      // optional uint32 MysqlPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MysqlPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mysqlport_)));
          set_has_mysqlport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MysqlDbName;
        break;
      }

      // optional string MysqlDbName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MysqlDbName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqldbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqldbname().data(), this->mysqldbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MysqlUser;
        break;
      }

      // optional string MysqlUser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MysqlUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqluser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqluser().data(), this->mysqluser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_MysqlPassword;
        break;
      }

      // optional string MysqlPassword = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MysqlPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqlpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqlpassword().data(), this->mysqlpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_TBConfList;
        break;
      }

      // repeated .proto_ff.pbTableConfig TBConfList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TBConfList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tbconflist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_TBConfList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbMysqlConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string MysqlIp = 1;
  if (has_mysqlip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlip().data(), this->mysqlip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mysqlip(), output);
  }

  // optional uint32 MysqlPort = 2;
  if (has_mysqlport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mysqlport(), output);
  }

  // optional string MysqlDbName = 3;
  if (has_mysqldbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqldbname().data(), this->mysqldbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mysqldbname(), output);
  }

  // optional string MysqlUser = 4;
  if (has_mysqluser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqluser().data(), this->mysqluser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mysqluser(), output);
  }

  // optional string MysqlPassword = 5;
  if (has_mysqlpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlpassword().data(), this->mysqlpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mysqlpassword(), output);
  }

  // repeated .proto_ff.pbTableConfig TBConfList = 6;
  for (int i = 0; i < this->tbconflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tbconflist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbMysqlConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string MysqlIp = 1;
  if (has_mysqlip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlip().data(), this->mysqlip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mysqlip(), target);
  }

  // optional uint32 MysqlPort = 2;
  if (has_mysqlport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mysqlport(), target);
  }

  // optional string MysqlDbName = 3;
  if (has_mysqldbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqldbname().data(), this->mysqldbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mysqldbname(), target);
  }

  // optional string MysqlUser = 4;
  if (has_mysqluser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqluser().data(), this->mysqluser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mysqluser(), target);
  }

  // optional string MysqlPassword = 5;
  if (has_mysqlpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlpassword().data(), this->mysqlpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mysqlpassword(), target);
  }

  // repeated .proto_ff.pbTableConfig TBConfList = 6;
  for (int i = 0; i < this->tbconflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tbconflist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbMysqlConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string MysqlIp = 1;
    if (has_mysqlip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqlip());
    }

    // optional uint32 MysqlPort = 2;
    if (has_mysqlport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mysqlport());
    }

    // optional string MysqlDbName = 3;
    if (has_mysqldbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqldbname());
    }

    // optional string MysqlUser = 4;
    if (has_mysqluser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqluser());
    }

    // optional string MysqlPassword = 5;
    if (has_mysqlpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqlpassword());
    }

  }
  // repeated .proto_ff.pbTableConfig TBConfList = 6;
  total_size += 1 * this->tbconflist_size();
  for (int i = 0; i < this->tbconflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tbconflist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbMysqlConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbMysqlConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbMysqlConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbMysqlConfig::MergeFrom(const pbMysqlConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbconflist_.MergeFrom(from.tbconflist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mysqlip()) {
      set_mysqlip(from.mysqlip());
    }
    if (from.has_mysqlport()) {
      set_mysqlport(from.mysqlport());
    }
    if (from.has_mysqldbname()) {
      set_mysqldbname(from.mysqldbname());
    }
    if (from.has_mysqluser()) {
      set_mysqluser(from.mysqluser());
    }
    if (from.has_mysqlpassword()) {
      set_mysqlpassword(from.mysqlpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbMysqlConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbMysqlConfig::CopyFrom(const pbMysqlConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbMysqlConfig::IsInitialized() const {

  return true;
}

void pbMysqlConfig::Swap(pbMysqlConfig* other) {
  if (other != this) {
    std::swap(mysqlip_, other->mysqlip_);
    std::swap(mysqlport_, other->mysqlport_);
    std::swap(mysqldbname_, other->mysqldbname_);
    std::swap(mysqluser_, other->mysqluser_);
    std::swap(mysqlpassword_, other->mysqlpassword_);
    tbconflist_.Swap(&other->tbconflist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbMysqlConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbMysqlConfig_descriptor_;
  metadata.reflection = pbMysqlConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbRedisConfig::kRedisIpFieldNumber;
const int pbRedisConfig::kRedisPortFieldNumber;
const int pbRedisConfig::kRedisPassFieldNumber;
#endif  // !_MSC_VER

pbRedisConfig::pbRedisConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbRedisConfig::InitAsDefaultInstance() {
}

pbRedisConfig::pbRedisConfig(const pbRedisConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbRedisConfig::SharedCtor() {
  _cached_size_ = 0;
  redisip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redisport_ = 0u;
  redispass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbRedisConfig::~pbRedisConfig() {
  SharedDtor();
}

void pbRedisConfig::SharedDtor() {
  if (redisip_ != &::google::protobuf::internal::kEmptyString) {
    delete redisip_;
  }
  if (redispass_ != &::google::protobuf::internal::kEmptyString) {
    delete redispass_;
  }
  if (this != default_instance_) {
  }
}

void pbRedisConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbRedisConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbRedisConfig_descriptor_;
}

const pbRedisConfig& pbRedisConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbRedisConfig* pbRedisConfig::default_instance_ = NULL;

pbRedisConfig* pbRedisConfig::New() const {
  return new pbRedisConfig;
}

void pbRedisConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_redisip()) {
      if (redisip_ != &::google::protobuf::internal::kEmptyString) {
        redisip_->clear();
      }
    }
    redisport_ = 0u;
    if (has_redispass()) {
      if (redispass_ != &::google::protobuf::internal::kEmptyString) {
        redispass_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbRedisConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string RedisIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redisip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redisip().data(), this->redisip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RedisPort;
        break;
      }

      // optional uint32 RedisPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RedisPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redisport_)));
          set_has_redisport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RedisPass;
        break;
      }

      // optional string RedisPass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RedisPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redispass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redispass().data(), this->redispass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbRedisConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string RedisIp = 1;
  if (has_redisip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redisip().data(), this->redisip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->redisip(), output);
  }

  // optional uint32 RedisPort = 2;
  if (has_redisport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->redisport(), output);
  }

  // optional string RedisPass = 3;
  if (has_redispass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redispass().data(), this->redispass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->redispass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbRedisConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string RedisIp = 1;
  if (has_redisip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redisip().data(), this->redisip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->redisip(), target);
  }

  // optional uint32 RedisPort = 2;
  if (has_redisport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->redisport(), target);
  }

  // optional string RedisPass = 3;
  if (has_redispass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redispass().data(), this->redispass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->redispass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbRedisConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RedisIp = 1;
    if (has_redisip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redisip());
    }

    // optional uint32 RedisPort = 2;
    if (has_redisport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redisport());
    }

    // optional string RedisPass = 3;
    if (has_redispass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redispass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbRedisConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbRedisConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbRedisConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbRedisConfig::MergeFrom(const pbRedisConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redisip()) {
      set_redisip(from.redisip());
    }
    if (from.has_redisport()) {
      set_redisport(from.redisport());
    }
    if (from.has_redispass()) {
      set_redispass(from.redispass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbRedisConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbRedisConfig::CopyFrom(const pbRedisConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbRedisConfig::IsInitialized() const {

  return true;
}

void pbRedisConfig::Swap(pbRedisConfig* other) {
  if (other != this) {
    std::swap(redisip_, other->redisip_);
    std::swap(redisport_, other->redisport_);
    std::swap(redispass_, other->redispass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbRedisConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbRedisConfig_descriptor_;
  metadata.reflection = pbRedisConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbRouteConfig::kMasterIpFieldNumber;
const int pbRouteConfig::kMasterPortFieldNumber;
const int pbRouteConfig::kNamingHostFieldNumber;
const int pbRouteConfig::kNamingPathFieldNumber;
const int pbRouteConfig::kRouteAgentFieldNumber;
#endif  // !_MSC_VER

pbRouteConfig::pbRouteConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbRouteConfig::InitAsDefaultInstance() {
}

pbRouteConfig::pbRouteConfig(const pbRouteConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbRouteConfig::SharedCtor() {
  _cached_size_ = 0;
  masterip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  masterport_ = 0u;
  naminghost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namingpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  routeagent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbRouteConfig::~pbRouteConfig() {
  SharedDtor();
}

void pbRouteConfig::SharedDtor() {
  if (masterip_ != &::google::protobuf::internal::kEmptyString) {
    delete masterip_;
  }
  if (naminghost_ != &::google::protobuf::internal::kEmptyString) {
    delete naminghost_;
  }
  if (namingpath_ != &::google::protobuf::internal::kEmptyString) {
    delete namingpath_;
  }
  if (routeagent_ != &::google::protobuf::internal::kEmptyString) {
    delete routeagent_;
  }
  if (this != default_instance_) {
  }
}

void pbRouteConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbRouteConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbRouteConfig_descriptor_;
}

const pbRouteConfig& pbRouteConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbRouteConfig* pbRouteConfig::default_instance_ = NULL;

pbRouteConfig* pbRouteConfig::New() const {
  return new pbRouteConfig;
}

void pbRouteConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_masterip()) {
      if (masterip_ != &::google::protobuf::internal::kEmptyString) {
        masterip_->clear();
      }
    }
    masterport_ = 0u;
    if (has_naminghost()) {
      if (naminghost_ != &::google::protobuf::internal::kEmptyString) {
        naminghost_->clear();
      }
    }
    if (has_namingpath()) {
      if (namingpath_ != &::google::protobuf::internal::kEmptyString) {
        namingpath_->clear();
      }
    }
    if (has_routeagent()) {
      if (routeagent_ != &::google::protobuf::internal::kEmptyString) {
        routeagent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbRouteConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MasterIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_masterip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->masterip().data(), this->masterip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MasterPort;
        break;
      }

      // optional uint32 MasterPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MasterPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterport_)));
          set_has_masterport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NamingHost;
        break;
      }

      // optional string NamingHost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NamingHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_naminghost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->naminghost().data(), this->naminghost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NamingPath;
        break;
      }

      // optional string NamingPath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NamingPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namingpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namingpath().data(), this->namingpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RouteAgent;
        break;
      }

      // optional string RouteAgent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RouteAgent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routeagent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->routeagent().data(), this->routeagent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbRouteConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string MasterIp = 1;
  if (has_masterip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->masterip().data(), this->masterip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->masterip(), output);
  }

  // optional uint32 MasterPort = 2;
  if (has_masterport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->masterport(), output);
  }

  // optional string NamingHost = 3;
  if (has_naminghost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->naminghost().data(), this->naminghost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->naminghost(), output);
  }

  // optional string NamingPath = 4;
  if (has_namingpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namingpath().data(), this->namingpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->namingpath(), output);
  }

  // optional string RouteAgent = 5;
  if (has_routeagent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routeagent().data(), this->routeagent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->routeagent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbRouteConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string MasterIp = 1;
  if (has_masterip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->masterip().data(), this->masterip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->masterip(), target);
  }

  // optional uint32 MasterPort = 2;
  if (has_masterport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->masterport(), target);
  }

  // optional string NamingHost = 3;
  if (has_naminghost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->naminghost().data(), this->naminghost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->naminghost(), target);
  }

  // optional string NamingPath = 4;
  if (has_namingpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namingpath().data(), this->namingpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->namingpath(), target);
  }

  // optional string RouteAgent = 5;
  if (has_routeagent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routeagent().data(), this->routeagent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->routeagent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbRouteConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string MasterIp = 1;
    if (has_masterip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->masterip());
    }

    // optional uint32 MasterPort = 2;
    if (has_masterport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterport());
    }

    // optional string NamingHost = 3;
    if (has_naminghost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->naminghost());
    }

    // optional string NamingPath = 4;
    if (has_namingpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namingpath());
    }

    // optional string RouteAgent = 5;
    if (has_routeagent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routeagent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbRouteConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbRouteConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbRouteConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbRouteConfig::MergeFrom(const pbRouteConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_masterip()) {
      set_masterip(from.masterip());
    }
    if (from.has_masterport()) {
      set_masterport(from.masterport());
    }
    if (from.has_naminghost()) {
      set_naminghost(from.naminghost());
    }
    if (from.has_namingpath()) {
      set_namingpath(from.namingpath());
    }
    if (from.has_routeagent()) {
      set_routeagent(from.routeagent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbRouteConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbRouteConfig::CopyFrom(const pbRouteConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbRouteConfig::IsInitialized() const {

  return true;
}

void pbRouteConfig::Swap(pbRouteConfig* other) {
  if (other != this) {
    std::swap(masterip_, other->masterip_);
    std::swap(masterport_, other->masterport_);
    std::swap(naminghost_, other->naminghost_);
    std::swap(namingpath_, other->namingpath_);
    std::swap(routeagent_, other->routeagent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbRouteConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbRouteConfig_descriptor_;
  metadata.reflection = pbRouteConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbNetConfig::kServerIpFieldNumber;
const int pbNetConfig::kServerPortFieldNumber;
const int pbNetConfig::kExternalServerIpFieldNumber;
const int pbNetConfig::kExternalServerPortFieldNumber;
const int pbNetConfig::kHttpPortFieldNumber;
const int pbNetConfig::kMaxConnectNumFieldNumber;
const int pbNetConfig::kWorkThreadNumFieldNumber;
const int pbNetConfig::kNetThreadNumFieldNumber;
const int pbNetConfig::kSecurityFieldNumber;
const int pbNetConfig::kWebSocketFieldNumber;
const int pbNetConfig::kMParseTypeFieldNumber;
#endif  // !_MSC_VER

pbNetConfig::pbNetConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbNetConfig::InitAsDefaultInstance() {
}

pbNetConfig::pbNetConfig(const pbNetConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbNetConfig::SharedCtor() {
  _cached_size_ = 0;
  serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverport_ = 0u;
  externalserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  externalserverport_ = 0u;
  httpport_ = 0u;
  maxconnectnum_ = 0u;
  workthreadnum_ = 0u;
  netthreadnum_ = 0u;
  security_ = false;
  websocket_ = false;
  mparsetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbNetConfig::~pbNetConfig() {
  SharedDtor();
}

void pbNetConfig::SharedDtor() {
  if (serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete serverip_;
  }
  if (externalserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete externalserverip_;
  }
  if (this != default_instance_) {
  }
}

void pbNetConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbNetConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbNetConfig_descriptor_;
}

const pbNetConfig& pbNetConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbNetConfig* pbNetConfig::default_instance_ = NULL;

pbNetConfig* pbNetConfig::New() const {
  return new pbNetConfig;
}

void pbNetConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverip()) {
      if (serverip_ != &::google::protobuf::internal::kEmptyString) {
        serverip_->clear();
      }
    }
    serverport_ = 0u;
    if (has_externalserverip()) {
      if (externalserverip_ != &::google::protobuf::internal::kEmptyString) {
        externalserverip_->clear();
      }
    }
    externalserverport_ = 0u;
    httpport_ = 0u;
    maxconnectnum_ = 0u;
    workthreadnum_ = 0u;
    netthreadnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    security_ = false;
    websocket_ = false;
    mparsetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbNetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerIp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerPort;
        break;
      }

      // optional uint32 ServerPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverport_)));
          set_has_serverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExternalServerIp;
        break;
      }

      // optional string ExternalServerIp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExternalServerIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_externalserverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->externalserverip().data(), this->externalserverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ExternalServerPort;
        break;
      }

      // optional uint32 ExternalServerPort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExternalServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &externalserverport_)));
          set_has_externalserverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HttpPort;
        break;
      }

      // optional uint32 HttpPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HttpPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &httpport_)));
          set_has_httpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MaxConnectNum;
        break;
      }

      // optional uint32 MaxConnectNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxConnectNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxconnectnum_)));
          set_has_maxconnectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_WorkThreadNum;
        break;
      }

      // optional uint32 WorkThreadNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WorkThreadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workthreadnum_)));
          set_has_workthreadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_NetThreadNum;
        break;
      }

      // optional uint32 NetThreadNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NetThreadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netthreadnum_)));
          set_has_netthreadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Security;
        break;
      }

      // optional bool Security = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Security:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &security_)));
          set_has_security();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_WebSocket;
        break;
      }

      // optional bool WebSocket = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WebSocket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &websocket_)));
          set_has_websocket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mParseType;
        break;
      }

      // optional uint32 mParseType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mParseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mparsetype_)));
          set_has_mparsetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbNetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ServerIp = 1;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serverip(), output);
  }

  // optional uint32 ServerPort = 2;
  if (has_serverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverport(), output);
  }

  // optional string ExternalServerIp = 3;
  if (has_externalserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externalserverip().data(), this->externalserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->externalserverip(), output);
  }

  // optional uint32 ExternalServerPort = 4;
  if (has_externalserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->externalserverport(), output);
  }

  // optional uint32 HttpPort = 5;
  if (has_httpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->httpport(), output);
  }

  // optional uint32 MaxConnectNum = 6;
  if (has_maxconnectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->maxconnectnum(), output);
  }

  // optional uint32 WorkThreadNum = 7;
  if (has_workthreadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->workthreadnum(), output);
  }

  // optional uint32 NetThreadNum = 8;
  if (has_netthreadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->netthreadnum(), output);
  }

  // optional bool Security = 9;
  if (has_security()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->security(), output);
  }

  // optional bool WebSocket = 10;
  if (has_websocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->websocket(), output);
  }

  // optional uint32 mParseType = 11;
  if (has_mparsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mparsetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbNetConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ServerIp = 1;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverip(), target);
  }

  // optional uint32 ServerPort = 2;
  if (has_serverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverport(), target);
  }

  // optional string ExternalServerIp = 3;
  if (has_externalserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externalserverip().data(), this->externalserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->externalserverip(), target);
  }

  // optional uint32 ExternalServerPort = 4;
  if (has_externalserverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->externalserverport(), target);
  }

  // optional uint32 HttpPort = 5;
  if (has_httpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->httpport(), target);
  }

  // optional uint32 MaxConnectNum = 6;
  if (has_maxconnectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->maxconnectnum(), target);
  }

  // optional uint32 WorkThreadNum = 7;
  if (has_workthreadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->workthreadnum(), target);
  }

  // optional uint32 NetThreadNum = 8;
  if (has_netthreadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->netthreadnum(), target);
  }

  // optional bool Security = 9;
  if (has_security()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->security(), target);
  }

  // optional bool WebSocket = 10;
  if (has_websocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->websocket(), target);
  }

  // optional uint32 mParseType = 11;
  if (has_mparsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mparsetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbNetConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerIp = 1;
    if (has_serverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverip());
    }

    // optional uint32 ServerPort = 2;
    if (has_serverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverport());
    }

    // optional string ExternalServerIp = 3;
    if (has_externalserverip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->externalserverip());
    }

    // optional uint32 ExternalServerPort = 4;
    if (has_externalserverport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->externalserverport());
    }

    // optional uint32 HttpPort = 5;
    if (has_httpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->httpport());
    }

    // optional uint32 MaxConnectNum = 6;
    if (has_maxconnectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxconnectnum());
    }

    // optional uint32 WorkThreadNum = 7;
    if (has_workthreadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workthreadnum());
    }

    // optional uint32 NetThreadNum = 8;
    if (has_netthreadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netthreadnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool Security = 9;
    if (has_security()) {
      total_size += 1 + 1;
    }

    // optional bool WebSocket = 10;
    if (has_websocket()) {
      total_size += 1 + 1;
    }

    // optional uint32 mParseType = 11;
    if (has_mparsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mparsetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbNetConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbNetConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbNetConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbNetConfig::MergeFrom(const pbNetConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_serverport()) {
      set_serverport(from.serverport());
    }
    if (from.has_externalserverip()) {
      set_externalserverip(from.externalserverip());
    }
    if (from.has_externalserverport()) {
      set_externalserverport(from.externalserverport());
    }
    if (from.has_httpport()) {
      set_httpport(from.httpport());
    }
    if (from.has_maxconnectnum()) {
      set_maxconnectnum(from.maxconnectnum());
    }
    if (from.has_workthreadnum()) {
      set_workthreadnum(from.workthreadnum());
    }
    if (from.has_netthreadnum()) {
      set_netthreadnum(from.netthreadnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_security()) {
      set_security(from.security());
    }
    if (from.has_websocket()) {
      set_websocket(from.websocket());
    }
    if (from.has_mparsetype()) {
      set_mparsetype(from.mparsetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbNetConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbNetConfig::CopyFrom(const pbNetConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbNetConfig::IsInitialized() const {

  return true;
}

void pbNetConfig::Swap(pbNetConfig* other) {
  if (other != this) {
    std::swap(serverip_, other->serverip_);
    std::swap(serverport_, other->serverport_);
    std::swap(externalserverip_, other->externalserverip_);
    std::swap(externalserverport_, other->externalserverport_);
    std::swap(httpport_, other->httpport_);
    std::swap(maxconnectnum_, other->maxconnectnum_);
    std::swap(workthreadnum_, other->workthreadnum_);
    std::swap(netthreadnum_, other->netthreadnum_);
    std::swap(security_, other->security_);
    std::swap(websocket_, other->websocket_);
    std::swap(mparsetype_, other->mparsetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbNetConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbNetConfig_descriptor_;
  metadata.reflection = pbNetConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbAllServerConfig::kServerFieldNumber;
const int pbAllServerConfig::kIDFieldNumber;
const int pbAllServerConfig::kServerTypeFieldNumber;
#endif  // !_MSC_VER

pbAllServerConfig::pbAllServerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbAllServerConfig::InitAsDefaultInstance() {
}

pbAllServerConfig::pbAllServerConfig(const pbAllServerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbAllServerConfig::SharedCtor() {
  _cached_size_ = 0;
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbAllServerConfig::~pbAllServerConfig() {
  SharedDtor();
}

void pbAllServerConfig::SharedDtor() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void pbAllServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbAllServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbAllServerConfig_descriptor_;
}

const pbAllServerConfig& pbAllServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbAllServerConfig* pbAllServerConfig::default_instance_ = NULL;

pbAllServerConfig* pbAllServerConfig::New() const {
  return new pbAllServerConfig;
}

void pbAllServerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    servertype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbAllServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ServerType;
        break;
      }

      // optional uint32 ServerType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbAllServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server(), output);
  }

  // optional string ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional uint32 ServerType = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->servertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbAllServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Server = 1;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server(), target);
  }

  // optional string ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional uint32 ServerType = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->servertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbAllServerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }

    // optional string ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint32 ServerType = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbAllServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbAllServerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbAllServerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbAllServerConfig::MergeFrom(const pbAllServerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbAllServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbAllServerConfig::CopyFrom(const pbAllServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbAllServerConfig::IsInitialized() const {

  return true;
}

void pbAllServerConfig::Swap(pbAllServerConfig* other) {
  if (other != this) {
    std::swap(server_, other->server_);
    std::swap(id_, other->id_);
    std::swap(servertype_, other->servertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbAllServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbAllServerConfig_descriptor_;
  metadata.reflection = pbAllServerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbPluginConfig::kServerTypeFieldNumber;
const int pbPluginConfig::kServerPluginsFieldNumber;
const int pbPluginConfig::kServerListFieldNumber;
#endif  // !_MSC_VER

pbPluginConfig::pbPluginConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbPluginConfig::InitAsDefaultInstance() {
}

pbPluginConfig::pbPluginConfig(const pbPluginConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbPluginConfig::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbPluginConfig::~pbPluginConfig() {
  SharedDtor();
}

void pbPluginConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbPluginConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbPluginConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbPluginConfig_descriptor_;
}

const pbPluginConfig& pbPluginConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbPluginConfig* pbPluginConfig::default_instance_ = NULL;

pbPluginConfig* pbPluginConfig::New() const {
  return new pbPluginConfig;
}

void pbPluginConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    servertype_ = 0u;
  }
  serverplugins_.Clear();
  serverlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbPluginConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerPlugins;
        break;
      }

      // repeated string ServerPlugins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerPlugins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serverplugins()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverplugins(this->serverplugins_size() - 1).data(),
            this->serverplugins(this->serverplugins_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerPlugins;
        if (input->ExpectTag(26)) goto parse_ServerList;
        break;
      }

      // repeated .proto_ff.pbAllServerConfig ServerList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serverlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ServerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbPluginConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ServerType = 1;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->servertype(), output);
  }

  // repeated string ServerPlugins = 2;
  for (int i = 0; i < this->serverplugins_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->serverplugins(i).data(), this->serverplugins(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverplugins(i), output);
  }

  // repeated .proto_ff.pbAllServerConfig ServerList = 3;
  for (int i = 0; i < this->serverlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->serverlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbPluginConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ServerType = 1;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->servertype(), target);
  }

  // repeated string ServerPlugins = 2;
  for (int i = 0; i < this->serverplugins_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverplugins(i).data(), this->serverplugins(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->serverplugins(i), target);
  }

  // repeated .proto_ff.pbAllServerConfig ServerList = 3;
  for (int i = 0; i < this->serverlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->serverlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbPluginConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

  }
  // repeated string ServerPlugins = 2;
  total_size += 1 * this->serverplugins_size();
  for (int i = 0; i < this->serverplugins_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serverplugins(i));
  }

  // repeated .proto_ff.pbAllServerConfig ServerList = 3;
  total_size += 1 * this->serverlist_size();
  for (int i = 0; i < this->serverlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serverlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbPluginConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbPluginConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbPluginConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbPluginConfig::MergeFrom(const pbPluginConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverplugins_.MergeFrom(from.serverplugins_);
  serverlist_.MergeFrom(from.serverlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbPluginConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbPluginConfig::CopyFrom(const pbPluginConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbPluginConfig::IsInitialized() const {

  return true;
}

void pbPluginConfig::Swap(pbPluginConfig* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    serverplugins_.Swap(&other->serverplugins_);
    serverlist_.Swap(&other->serverlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbPluginConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbPluginConfig_descriptor_;
  metadata.reflection = pbPluginConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbTableConfig::kTableNameFieldNumber;
const int pbTableConfig::kTableCountFieldNumber;
#endif  // !_MSC_VER

pbTableConfig::pbTableConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbTableConfig::InitAsDefaultInstance() {
}

pbTableConfig::pbTableConfig(const pbTableConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbTableConfig::SharedCtor() {
  _cached_size_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tablecount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbTableConfig::~pbTableConfig() {
  SharedDtor();
}

void pbTableConfig::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void pbTableConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbTableConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbTableConfig_descriptor_;
}

const pbTableConfig& pbTableConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbTableConfig* pbTableConfig::default_instance_ = NULL;

pbTableConfig* pbTableConfig::New() const {
  return new pbTableConfig;
}

void pbTableConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    tablecount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbTableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TableName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TableCount;
        break;
      }

      // optional uint32 TableCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TableCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tablecount_)));
          set_has_tablecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbTableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tablename(), output);
  }

  // optional uint32 TableCount = 2;
  if (has_tablecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tablecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbTableConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablename(), target);
  }

  // optional uint32 TableCount = 2;
  if (has_tablecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tablecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbTableConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional uint32 TableCount = 2;
    if (has_tablecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tablecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbTableConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbTableConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbTableConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbTableConfig::MergeFrom(const pbTableConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_tablecount()) {
      set_tablecount(from.tablecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbTableConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbTableConfig::CopyFrom(const pbTableConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbTableConfig::IsInitialized() const {

  return true;
}

void pbTableConfig::Swap(pbTableConfig* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    std::swap(tablecount_, other->tablecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbTableConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbTableConfig_descriptor_;
  metadata.reflection = pbTableConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbNFServerConfig::kServerIdFieldNumber;
const int pbNFServerConfig::kServerTypeFieldNumber;
const int pbNFServerConfig::kServerNameFieldNumber;
const int pbNFServerConfig::kBusIdFieldNumber;
const int pbNFServerConfig::kBusLengthFieldNumber;
const int pbNFServerConfig::kLinkModeFieldNumber;
const int pbNFServerConfig::kUrlFieldNumber;
const int pbNFServerConfig::kIdleSleepUSFieldNumber;
const int pbNFServerConfig::kServerIpFieldNumber;
const int pbNFServerConfig::kServerPortFieldNumber;
const int pbNFServerConfig::kExternalServerIpFieldNumber;
const int pbNFServerConfig::kExternalServerPortFieldNumber;
const int pbNFServerConfig::kHttpPortFieldNumber;
const int pbNFServerConfig::kMaxConnectNumFieldNumber;
const int pbNFServerConfig::kWorkThreadNumFieldNumber;
const int pbNFServerConfig::kNetThreadNumFieldNumber;
const int pbNFServerConfig::kSecurityFieldNumber;
const int pbNFServerConfig::kWebSocketFieldNumber;
const int pbNFServerConfig::kParseTypeFieldNumber;
const int pbNFServerConfig::kMasterIpFieldNumber;
const int pbNFServerConfig::kMasterPortFieldNumber;
const int pbNFServerConfig::kNamingHostFieldNumber;
const int pbNFServerConfig::kNamingPathFieldNumber;
const int pbNFServerConfig::kRouteAgentFieldNumber;
const int pbNFServerConfig::kMysqlIpFieldNumber;
const int pbNFServerConfig::kMysqlPortFieldNumber;
const int pbNFServerConfig::kMysqlDbNameFieldNumber;
const int pbNFServerConfig::kMysqlUserFieldNumber;
const int pbNFServerConfig::kMysqlPasswordFieldNumber;
const int pbNFServerConfig::kDefaultDBNameFieldNumber;
const int pbNFServerConfig::kCrossDBNameFieldNumber;
const int pbNFServerConfig::kTBConfListFieldNumber;
const int pbNFServerConfig::kRedisIpFieldNumber;
const int pbNFServerConfig::kRedisPortFieldNumber;
const int pbNFServerConfig::kRedisPassFieldNumber;
const int pbNFServerConfig::kSendEmailFieldNumber;
const int pbNFServerConfig::kSendEmailPassFieldNumber;
const int pbNFServerConfig::kSendEmailUrlFieldNumber;
const int pbNFServerConfig::kSendEmailPortFieldNumber;
const int pbNFServerConfig::kRecvEmailFieldNumber;
const int pbNFServerConfig::kWxWorkdRobotFieldNumber;
const int pbNFServerConfig::kMaxOnlinePlayerNumFieldNumber;
const int pbNFServerConfig::kHeartBeatTimeoutFieldNumber;
const int pbNFServerConfig::kClientKeepAliveTimeoutFieldNumber;
const int pbNFServerConfig::kClientVersionFieldNumber;
#endif  // !_MSC_VER

pbNFServerConfig::pbNFServerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbNFServerConfig::InitAsDefaultInstance() {
}

pbNFServerConfig::pbNFServerConfig(const pbNFServerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbNFServerConfig::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  busid_ = 0u;
  buslength_ = 0u;
  linkmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idlesleepus_ = 0u;
  serverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverport_ = 0u;
  externalserverip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  externalserverport_ = 0u;
  httpport_ = 0u;
  maxconnectnum_ = 0u;
  workthreadnum_ = 0u;
  netthreadnum_ = 0u;
  security_ = false;
  websocket_ = false;
  parsetype_ = 0u;
  masterip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  masterport_ = 0u;
  naminghost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namingpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  routeagent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqlip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqlport_ = 0u;
  mysqldbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqluser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mysqlpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defaultdbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crossdbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redisip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redisport_ = 0u;
  redispass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendemail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendemailpass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendemailurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendemailport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recvemail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wxworkdrobot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxonlineplayernum_ = 0u;
  heartbeattimeout_ = 0u;
  clientkeepalivetimeout_ = 0u;
  clientversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbNFServerConfig::~pbNFServerConfig() {
  SharedDtor();
}

void pbNFServerConfig::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    delete serverid_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (linkmode_ != &::google::protobuf::internal::kEmptyString) {
    delete linkmode_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (serverip_ != &::google::protobuf::internal::kEmptyString) {
    delete serverip_;
  }
  if (externalserverip_ != &::google::protobuf::internal::kEmptyString) {
    delete externalserverip_;
  }
  if (masterip_ != &::google::protobuf::internal::kEmptyString) {
    delete masterip_;
  }
  if (naminghost_ != &::google::protobuf::internal::kEmptyString) {
    delete naminghost_;
  }
  if (namingpath_ != &::google::protobuf::internal::kEmptyString) {
    delete namingpath_;
  }
  if (routeagent_ != &::google::protobuf::internal::kEmptyString) {
    delete routeagent_;
  }
  if (mysqlip_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqlip_;
  }
  if (mysqldbname_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqldbname_;
  }
  if (mysqluser_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqluser_;
  }
  if (mysqlpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete mysqlpassword_;
  }
  if (defaultdbname_ != &::google::protobuf::internal::kEmptyString) {
    delete defaultdbname_;
  }
  if (crossdbname_ != &::google::protobuf::internal::kEmptyString) {
    delete crossdbname_;
  }
  if (redisip_ != &::google::protobuf::internal::kEmptyString) {
    delete redisip_;
  }
  if (redispass_ != &::google::protobuf::internal::kEmptyString) {
    delete redispass_;
  }
  if (sendemail_ != &::google::protobuf::internal::kEmptyString) {
    delete sendemail_;
  }
  if (sendemailpass_ != &::google::protobuf::internal::kEmptyString) {
    delete sendemailpass_;
  }
  if (sendemailurl_ != &::google::protobuf::internal::kEmptyString) {
    delete sendemailurl_;
  }
  if (sendemailport_ != &::google::protobuf::internal::kEmptyString) {
    delete sendemailport_;
  }
  if (recvemail_ != &::google::protobuf::internal::kEmptyString) {
    delete recvemail_;
  }
  if (wxworkdrobot_ != &::google::protobuf::internal::kEmptyString) {
    delete wxworkdrobot_;
  }
  if (this != default_instance_) {
  }
}

void pbNFServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbNFServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbNFServerConfig_descriptor_;
}

const pbNFServerConfig& pbNFServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

pbNFServerConfig* pbNFServerConfig::default_instance_ = NULL;

pbNFServerConfig* pbNFServerConfig::New() const {
  return new pbNFServerConfig;
}

void pbNFServerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::kEmptyString) {
        serverid_->clear();
      }
    }
    servertype_ = 0u;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    busid_ = 0u;
    buslength_ = 0u;
    if (has_linkmode()) {
      if (linkmode_ != &::google::protobuf::internal::kEmptyString) {
        linkmode_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    idlesleepus_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_serverip()) {
      if (serverip_ != &::google::protobuf::internal::kEmptyString) {
        serverip_->clear();
      }
    }
    serverport_ = 0u;
    if (has_externalserverip()) {
      if (externalserverip_ != &::google::protobuf::internal::kEmptyString) {
        externalserverip_->clear();
      }
    }
    externalserverport_ = 0u;
    httpport_ = 0u;
    maxconnectnum_ = 0u;
    workthreadnum_ = 0u;
    netthreadnum_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    security_ = false;
    websocket_ = false;
    parsetype_ = 0u;
    if (has_masterip()) {
      if (masterip_ != &::google::protobuf::internal::kEmptyString) {
        masterip_->clear();
      }
    }
    masterport_ = 0u;
    if (has_naminghost()) {
      if (naminghost_ != &::google::protobuf::internal::kEmptyString) {
        naminghost_->clear();
      }
    }
    if (has_namingpath()) {
      if (namingpath_ != &::google::protobuf::internal::kEmptyString) {
        namingpath_->clear();
      }
    }
    if (has_routeagent()) {
      if (routeagent_ != &::google::protobuf::internal::kEmptyString) {
        routeagent_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_mysqlip()) {
      if (mysqlip_ != &::google::protobuf::internal::kEmptyString) {
        mysqlip_->clear();
      }
    }
    mysqlport_ = 0u;
    if (has_mysqldbname()) {
      if (mysqldbname_ != &::google::protobuf::internal::kEmptyString) {
        mysqldbname_->clear();
      }
    }
    if (has_mysqluser()) {
      if (mysqluser_ != &::google::protobuf::internal::kEmptyString) {
        mysqluser_->clear();
      }
    }
    if (has_mysqlpassword()) {
      if (mysqlpassword_ != &::google::protobuf::internal::kEmptyString) {
        mysqlpassword_->clear();
      }
    }
    if (has_defaultdbname()) {
      if (defaultdbname_ != &::google::protobuf::internal::kEmptyString) {
        defaultdbname_->clear();
      }
    }
    if (has_crossdbname()) {
      if (crossdbname_ != &::google::protobuf::internal::kEmptyString) {
        crossdbname_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_redisip()) {
      if (redisip_ != &::google::protobuf::internal::kEmptyString) {
        redisip_->clear();
      }
    }
    redisport_ = 0u;
    if (has_redispass()) {
      if (redispass_ != &::google::protobuf::internal::kEmptyString) {
        redispass_->clear();
      }
    }
    if (has_sendemail()) {
      if (sendemail_ != &::google::protobuf::internal::kEmptyString) {
        sendemail_->clear();
      }
    }
    if (has_sendemailpass()) {
      if (sendemailpass_ != &::google::protobuf::internal::kEmptyString) {
        sendemailpass_->clear();
      }
    }
    if (has_sendemailurl()) {
      if (sendemailurl_ != &::google::protobuf::internal::kEmptyString) {
        sendemailurl_->clear();
      }
    }
    if (has_sendemailport()) {
      if (sendemailport_ != &::google::protobuf::internal::kEmptyString) {
        sendemailport_->clear();
      }
    }
    if (has_recvemail()) {
      if (recvemail_ != &::google::protobuf::internal::kEmptyString) {
        recvemail_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_wxworkdrobot()) {
      if (wxworkdrobot_ != &::google::protobuf::internal::kEmptyString) {
        wxworkdrobot_->clear();
      }
    }
    maxonlineplayernum_ = 0u;
    heartbeattimeout_ = 0u;
    clientkeepalivetimeout_ = 0u;
    clientversion_ = 0u;
  }
  tbconflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbNFServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerType;
        break;
      }

      // optional uint32 ServerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ServerName;
        break;
      }

      // optional string ServerName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BusId;
        break;
      }

      // optional uint32 BusId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BusId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &busid_)));
          set_has_busid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BusLength;
        break;
      }

      // optional uint32 BusLength = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BusLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buslength_)));
          set_has_buslength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_LinkMode;
        break;
      }

      // optional string LinkMode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LinkMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linkmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->linkmode().data(), this->linkmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Url;
        break;
      }

      // optional string Url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_IdleSleepUS;
        break;
      }

      // optional uint32 IdleSleepUS = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IdleSleepUS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idlesleepus_)));
          set_has_idlesleepus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ServerIp;
        break;
      }

      // optional string ServerIp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_ServerPort;
        break;
      }

      // optional uint32 ServerPort = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverport_)));
          set_has_serverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ExternalServerIp;
        break;
      }

      // optional string ExternalServerIp = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExternalServerIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_externalserverip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->externalserverip().data(), this->externalserverip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_ExternalServerPort;
        break;
      }

      // optional uint32 ExternalServerPort = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExternalServerPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &externalserverport_)));
          set_has_externalserverport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_HttpPort;
        break;
      }

      // optional uint32 HttpPort = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HttpPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &httpport_)));
          set_has_httpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_MaxConnectNum;
        break;
      }

      // optional uint32 MaxConnectNum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxConnectNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxconnectnum_)));
          set_has_maxconnectnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_WorkThreadNum;
        break;
      }

      // optional uint32 WorkThreadNum = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WorkThreadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workthreadnum_)));
          set_has_workthreadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_NetThreadNum;
        break;
      }

      // optional uint32 NetThreadNum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NetThreadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &netthreadnum_)));
          set_has_netthreadnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_Security;
        break;
      }

      // optional bool Security = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Security:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &security_)));
          set_has_security();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_WebSocket;
        break;
      }

      // optional bool WebSocket = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WebSocket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &websocket_)));
          set_has_websocket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_ParseType;
        break;
      }

      // optional uint32 ParseType = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ParseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parsetype_)));
          set_has_parsetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_MasterIp;
        break;
      }

      // optional string MasterIp = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MasterIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_masterip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->masterip().data(), this->masterip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_MasterPort;
        break;
      }

      // optional uint32 MasterPort = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MasterPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterport_)));
          set_has_masterport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_NamingHost;
        break;
      }

      // optional string NamingHost = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NamingHost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_naminghost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->naminghost().data(), this->naminghost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_NamingPath;
        break;
      }

      // optional string NamingPath = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NamingPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namingpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namingpath().data(), this->namingpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_RouteAgent;
        break;
      }

      // optional string RouteAgent = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RouteAgent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routeagent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->routeagent().data(), this->routeagent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_MysqlIp;
        break;
      }

      // optional string MysqlIp = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MysqlIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqlip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqlip().data(), this->mysqlip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_MysqlPort;
        break;
      }

      // optional uint32 MysqlPort = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MysqlPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mysqlport_)));
          set_has_mysqlport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_MysqlDbName;
        break;
      }

      // optional string MysqlDbName = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MysqlDbName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqldbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqldbname().data(), this->mysqldbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_MysqlUser;
        break;
      }

      // optional string MysqlUser = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MysqlUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqluser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqluser().data(), this->mysqluser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_MysqlPassword;
        break;
      }

      // optional string MysqlPassword = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MysqlPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mysqlpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mysqlpassword().data(), this->mysqlpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_DefaultDBName;
        break;
      }

      // optional string DefaultDBName = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DefaultDBName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultdbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defaultdbname().data(), this->defaultdbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_CrossDBName;
        break;
      }

      // optional string CrossDBName = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CrossDBName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crossdbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crossdbname().data(), this->crossdbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_TBConfList;
        break;
      }

      // repeated .proto_ff.pbTableConfig TBConfList = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TBConfList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tbconflist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_TBConfList;
        if (input->ExpectTag(642)) goto parse_RedisIp;
        break;
      }

      // optional string RedisIp = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RedisIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redisip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redisip().data(), this->redisip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_RedisPort;
        break;
      }

      // optional uint32 RedisPort = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RedisPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redisport_)));
          set_has_redisport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(658)) goto parse_RedisPass;
        break;
      }

      // optional string RedisPass = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RedisPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redispass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redispass().data(), this->redispass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_sendEmail;
        break;
      }

      // optional string sendEmail = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendemail().data(), this->sendemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(738)) goto parse_sendEmailPass;
        break;
      }

      // optional string sendEmailPass = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendEmailPass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendemailpass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendemailpass().data(), this->sendemailpass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(746)) goto parse_sendEmailUrl;
        break;
      }

      // optional string sendEmailUrl = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendEmailUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendemailurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendemailurl().data(), this->sendemailurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_sendEmailPort;
        break;
      }

      // optional string sendEmailPort = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendEmailPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendemailport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendemailport().data(), this->sendemailport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(762)) goto parse_recvEmail;
        break;
      }

      // optional string recvEmail = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvEmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvemail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recvemail().data(), this->recvemail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(770)) goto parse_wxWorkdRobot;
        break;
      }

      // optional string wxWorkdRobot = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wxWorkdRobot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxworkdrobot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wxworkdrobot().data(), this->wxworkdrobot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_MaxOnlinePlayerNum;
        break;
      }

      // optional uint32 MaxOnlinePlayerNum = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxOnlinePlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxonlineplayernum_)));
          set_has_maxonlineplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_HeartBeatTimeout;
        break;
      }

      // optional uint32 HeartBeatTimeout = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeartBeatTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeattimeout_)));
          set_has_heartbeattimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_ClientKeepAliveTimeout;
        break;
      }

      // optional uint32 ClientKeepAliveTimeout = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientKeepAliveTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientkeepalivetimeout_)));
          set_has_clientkeepalivetimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_ClientVersion;
        break;
      }

      // optional uint32 ClientVersion = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbNFServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->serverid(), output);
  }

  // optional uint32 ServerType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertype(), output);
  }

  // optional string ServerName = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->servername(), output);
  }

  // optional uint32 BusId = 4;
  if (has_busid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->busid(), output);
  }

  // optional uint32 BusLength = 5;
  if (has_buslength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buslength(), output);
  }

  // optional string LinkMode = 7;
  if (has_linkmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linkmode().data(), this->linkmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->linkmode(), output);
  }

  // optional string Url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->url(), output);
  }

  // optional uint32 IdleSleepUS = 9;
  if (has_idlesleepus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->idlesleepus(), output);
  }

  // optional string ServerIp = 20;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->serverip(), output);
  }

  // optional uint32 ServerPort = 21;
  if (has_serverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->serverport(), output);
  }

  // optional string ExternalServerIp = 22;
  if (has_externalserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externalserverip().data(), this->externalserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->externalserverip(), output);
  }

  // optional uint32 ExternalServerPort = 23;
  if (has_externalserverport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->externalserverport(), output);
  }

  // optional uint32 HttpPort = 24;
  if (has_httpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->httpport(), output);
  }

  // optional uint32 MaxConnectNum = 25;
  if (has_maxconnectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->maxconnectnum(), output);
  }

  // optional uint32 WorkThreadNum = 26;
  if (has_workthreadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->workthreadnum(), output);
  }

  // optional uint32 NetThreadNum = 27;
  if (has_netthreadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->netthreadnum(), output);
  }

  // optional bool Security = 28;
  if (has_security()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->security(), output);
  }

  // optional bool WebSocket = 29;
  if (has_websocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->websocket(), output);
  }

  // optional uint32 ParseType = 30;
  if (has_parsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->parsetype(), output);
  }

  // optional string MasterIp = 50;
  if (has_masterip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->masterip().data(), this->masterip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->masterip(), output);
  }

  // optional uint32 MasterPort = 51;
  if (has_masterport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->masterport(), output);
  }

  // optional string NamingHost = 52;
  if (has_naminghost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->naminghost().data(), this->naminghost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->naminghost(), output);
  }

  // optional string NamingPath = 53;
  if (has_namingpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namingpath().data(), this->namingpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      53, this->namingpath(), output);
  }

  // optional string RouteAgent = 54;
  if (has_routeagent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routeagent().data(), this->routeagent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->routeagent(), output);
  }

  // optional string MysqlIp = 70;
  if (has_mysqlip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlip().data(), this->mysqlip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      70, this->mysqlip(), output);
  }

  // optional uint32 MysqlPort = 71;
  if (has_mysqlport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->mysqlport(), output);
  }

  // optional string MysqlDbName = 72;
  if (has_mysqldbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqldbname().data(), this->mysqldbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      72, this->mysqldbname(), output);
  }

  // optional string MysqlUser = 73;
  if (has_mysqluser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqluser().data(), this->mysqluser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      73, this->mysqluser(), output);
  }

  // optional string MysqlPassword = 74;
  if (has_mysqlpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlpassword().data(), this->mysqlpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      74, this->mysqlpassword(), output);
  }

  // optional string DefaultDBName = 75;
  if (has_defaultdbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaultdbname().data(), this->defaultdbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      75, this->defaultdbname(), output);
  }

  // optional string CrossDBName = 76;
  if (has_crossdbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crossdbname().data(), this->crossdbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      76, this->crossdbname(), output);
  }

  // repeated .proto_ff.pbTableConfig TBConfList = 77;
  for (int i = 0; i < this->tbconflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->tbconflist(i), output);
  }

  // optional string RedisIp = 80;
  if (has_redisip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redisip().data(), this->redisip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      80, this->redisip(), output);
  }

  // optional uint32 RedisPort = 81;
  if (has_redisport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(81, this->redisport(), output);
  }

  // optional string RedisPass = 82;
  if (has_redispass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redispass().data(), this->redispass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      82, this->redispass(), output);
  }

  // optional string sendEmail = 91;
  if (has_sendemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemail().data(), this->sendemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      91, this->sendemail(), output);
  }

  // optional string sendEmailPass = 92;
  if (has_sendemailpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemailpass().data(), this->sendemailpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      92, this->sendemailpass(), output);
  }

  // optional string sendEmailUrl = 93;
  if (has_sendemailurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemailurl().data(), this->sendemailurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      93, this->sendemailurl(), output);
  }

  // optional string sendEmailPort = 94;
  if (has_sendemailport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemailport().data(), this->sendemailport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      94, this->sendemailport(), output);
  }

  // optional string recvEmail = 95;
  if (has_recvemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvemail().data(), this->recvemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      95, this->recvemail(), output);
  }

  // optional string wxWorkdRobot = 96;
  if (has_wxworkdrobot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wxworkdrobot().data(), this->wxworkdrobot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      96, this->wxworkdrobot(), output);
  }

  // optional uint32 MaxOnlinePlayerNum = 100;
  if (has_maxonlineplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->maxonlineplayernum(), output);
  }

  // optional uint32 HeartBeatTimeout = 101;
  if (has_heartbeattimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(101, this->heartbeattimeout(), output);
  }

  // optional uint32 ClientKeepAliveTimeout = 102;
  if (has_clientkeepalivetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(102, this->clientkeepalivetimeout(), output);
  }

  // optional uint32 ClientVersion = 103;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(103, this->clientversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbNFServerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // optional uint32 ServerType = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertype(), target);
  }

  // optional string ServerName = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servername(), target);
  }

  // optional uint32 BusId = 4;
  if (has_busid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->busid(), target);
  }

  // optional uint32 BusLength = 5;
  if (has_buslength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buslength(), target);
  }

  // optional string LinkMode = 7;
  if (has_linkmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linkmode().data(), this->linkmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->linkmode(), target);
  }

  // optional string Url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional uint32 IdleSleepUS = 9;
  if (has_idlesleepus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->idlesleepus(), target);
  }

  // optional string ServerIp = 20;
  if (has_serverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->serverip(), target);
  }

  // optional uint32 ServerPort = 21;
  if (has_serverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->serverport(), target);
  }

  // optional string ExternalServerIp = 22;
  if (has_externalserverip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externalserverip().data(), this->externalserverip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->externalserverip(), target);
  }

  // optional uint32 ExternalServerPort = 23;
  if (has_externalserverport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->externalserverport(), target);
  }

  // optional uint32 HttpPort = 24;
  if (has_httpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->httpport(), target);
  }

  // optional uint32 MaxConnectNum = 25;
  if (has_maxconnectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->maxconnectnum(), target);
  }

  // optional uint32 WorkThreadNum = 26;
  if (has_workthreadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->workthreadnum(), target);
  }

  // optional uint32 NetThreadNum = 27;
  if (has_netthreadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->netthreadnum(), target);
  }

  // optional bool Security = 28;
  if (has_security()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->security(), target);
  }

  // optional bool WebSocket = 29;
  if (has_websocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->websocket(), target);
  }

  // optional uint32 ParseType = 30;
  if (has_parsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->parsetype(), target);
  }

  // optional string MasterIp = 50;
  if (has_masterip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->masterip().data(), this->masterip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->masterip(), target);
  }

  // optional uint32 MasterPort = 51;
  if (has_masterport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->masterport(), target);
  }

  // optional string NamingHost = 52;
  if (has_naminghost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->naminghost().data(), this->naminghost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->naminghost(), target);
  }

  // optional string NamingPath = 53;
  if (has_namingpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namingpath().data(), this->namingpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->namingpath(), target);
  }

  // optional string RouteAgent = 54;
  if (has_routeagent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routeagent().data(), this->routeagent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->routeagent(), target);
  }

  // optional string MysqlIp = 70;
  if (has_mysqlip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlip().data(), this->mysqlip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->mysqlip(), target);
  }

  // optional uint32 MysqlPort = 71;
  if (has_mysqlport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->mysqlport(), target);
  }

  // optional string MysqlDbName = 72;
  if (has_mysqldbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqldbname().data(), this->mysqldbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        72, this->mysqldbname(), target);
  }

  // optional string MysqlUser = 73;
  if (has_mysqluser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqluser().data(), this->mysqluser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        73, this->mysqluser(), target);
  }

  // optional string MysqlPassword = 74;
  if (has_mysqlpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mysqlpassword().data(), this->mysqlpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        74, this->mysqlpassword(), target);
  }

  // optional string DefaultDBName = 75;
  if (has_defaultdbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaultdbname().data(), this->defaultdbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        75, this->defaultdbname(), target);
  }

  // optional string CrossDBName = 76;
  if (has_crossdbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crossdbname().data(), this->crossdbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        76, this->crossdbname(), target);
  }

  // repeated .proto_ff.pbTableConfig TBConfList = 77;
  for (int i = 0; i < this->tbconflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->tbconflist(i), target);
  }

  // optional string RedisIp = 80;
  if (has_redisip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redisip().data(), this->redisip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        80, this->redisip(), target);
  }

  // optional uint32 RedisPort = 81;
  if (has_redisport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(81, this->redisport(), target);
  }

  // optional string RedisPass = 82;
  if (has_redispass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redispass().data(), this->redispass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        82, this->redispass(), target);
  }

  // optional string sendEmail = 91;
  if (has_sendemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemail().data(), this->sendemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        91, this->sendemail(), target);
  }

  // optional string sendEmailPass = 92;
  if (has_sendemailpass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemailpass().data(), this->sendemailpass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        92, this->sendemailpass(), target);
  }

  // optional string sendEmailUrl = 93;
  if (has_sendemailurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemailurl().data(), this->sendemailurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        93, this->sendemailurl(), target);
  }

  // optional string sendEmailPort = 94;
  if (has_sendemailport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendemailport().data(), this->sendemailport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        94, this->sendemailport(), target);
  }

  // optional string recvEmail = 95;
  if (has_recvemail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvemail().data(), this->recvemail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        95, this->recvemail(), target);
  }

  // optional string wxWorkdRobot = 96;
  if (has_wxworkdrobot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wxworkdrobot().data(), this->wxworkdrobot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        96, this->wxworkdrobot(), target);
  }

  // optional uint32 MaxOnlinePlayerNum = 100;
  if (has_maxonlineplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->maxonlineplayernum(), target);
  }

  // optional uint32 HeartBeatTimeout = 101;
  if (has_heartbeattimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(101, this->heartbeattimeout(), target);
  }

  // optional uint32 ClientKeepAliveTimeout = 102;
  if (has_clientkeepalivetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(102, this->clientkeepalivetimeout(), target);
  }

  // optional uint32 ClientVersion = 103;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(103, this->clientversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbNFServerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 ServerType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional string ServerName = 3;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional uint32 BusId = 4;
    if (has_busid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->busid());
    }

    // optional uint32 BusLength = 5;
    if (has_buslength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buslength());
    }

    // optional string LinkMode = 7;
    if (has_linkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linkmode());
    }

    // optional string Url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 IdleSleepUS = 9;
    if (has_idlesleepus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idlesleepus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ServerIp = 20;
    if (has_serverip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverip());
    }

    // optional uint32 ServerPort = 21;
    if (has_serverport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverport());
    }

    // optional string ExternalServerIp = 22;
    if (has_externalserverip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->externalserverip());
    }

    // optional uint32 ExternalServerPort = 23;
    if (has_externalserverport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->externalserverport());
    }

    // optional uint32 HttpPort = 24;
    if (has_httpport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->httpport());
    }

    // optional uint32 MaxConnectNum = 25;
    if (has_maxconnectnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxconnectnum());
    }

    // optional uint32 WorkThreadNum = 26;
    if (has_workthreadnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workthreadnum());
    }

    // optional uint32 NetThreadNum = 27;
    if (has_netthreadnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->netthreadnum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool Security = 28;
    if (has_security()) {
      total_size += 2 + 1;
    }

    // optional bool WebSocket = 29;
    if (has_websocket()) {
      total_size += 2 + 1;
    }

    // optional uint32 ParseType = 30;
    if (has_parsetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parsetype());
    }

    // optional string MasterIp = 50;
    if (has_masterip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->masterip());
    }

    // optional uint32 MasterPort = 51;
    if (has_masterport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterport());
    }

    // optional string NamingHost = 52;
    if (has_naminghost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->naminghost());
    }

    // optional string NamingPath = 53;
    if (has_namingpath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namingpath());
    }

    // optional string RouteAgent = 54;
    if (has_routeagent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routeagent());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string MysqlIp = 70;
    if (has_mysqlip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqlip());
    }

    // optional uint32 MysqlPort = 71;
    if (has_mysqlport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mysqlport());
    }

    // optional string MysqlDbName = 72;
    if (has_mysqldbname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqldbname());
    }

    // optional string MysqlUser = 73;
    if (has_mysqluser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqluser());
    }

    // optional string MysqlPassword = 74;
    if (has_mysqlpassword()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mysqlpassword());
    }

    // optional string DefaultDBName = 75;
    if (has_defaultdbname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultdbname());
    }

    // optional string CrossDBName = 76;
    if (has_crossdbname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crossdbname());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string RedisIp = 80;
    if (has_redisip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redisip());
    }

    // optional uint32 RedisPort = 81;
    if (has_redisport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redisport());
    }

    // optional string RedisPass = 82;
    if (has_redispass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redispass());
    }

    // optional string sendEmail = 91;
    if (has_sendemail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendemail());
    }

    // optional string sendEmailPass = 92;
    if (has_sendemailpass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendemailpass());
    }

    // optional string sendEmailUrl = 93;
    if (has_sendemailurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendemailurl());
    }

    // optional string sendEmailPort = 94;
    if (has_sendemailport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendemailport());
    }

    // optional string recvEmail = 95;
    if (has_recvemail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvemail());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string wxWorkdRobot = 96;
    if (has_wxworkdrobot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxworkdrobot());
    }

    // optional uint32 MaxOnlinePlayerNum = 100;
    if (has_maxonlineplayernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxonlineplayernum());
    }

    // optional uint32 HeartBeatTimeout = 101;
    if (has_heartbeattimeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeattimeout());
    }

    // optional uint32 ClientKeepAliveTimeout = 102;
    if (has_clientkeepalivetimeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientkeepalivetimeout());
    }

    // optional uint32 ClientVersion = 103;
    if (has_clientversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientversion());
    }

  }
  // repeated .proto_ff.pbTableConfig TBConfList = 77;
  total_size += 2 * this->tbconflist_size();
  for (int i = 0; i < this->tbconflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tbconflist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbNFServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbNFServerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbNFServerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbNFServerConfig::MergeFrom(const pbNFServerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbconflist_.MergeFrom(from.tbconflist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_busid()) {
      set_busid(from.busid());
    }
    if (from.has_buslength()) {
      set_buslength(from.buslength());
    }
    if (from.has_linkmode()) {
      set_linkmode(from.linkmode());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_idlesleepus()) {
      set_idlesleepus(from.idlesleepus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverip()) {
      set_serverip(from.serverip());
    }
    if (from.has_serverport()) {
      set_serverport(from.serverport());
    }
    if (from.has_externalserverip()) {
      set_externalserverip(from.externalserverip());
    }
    if (from.has_externalserverport()) {
      set_externalserverport(from.externalserverport());
    }
    if (from.has_httpport()) {
      set_httpport(from.httpport());
    }
    if (from.has_maxconnectnum()) {
      set_maxconnectnum(from.maxconnectnum());
    }
    if (from.has_workthreadnum()) {
      set_workthreadnum(from.workthreadnum());
    }
    if (from.has_netthreadnum()) {
      set_netthreadnum(from.netthreadnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_security()) {
      set_security(from.security());
    }
    if (from.has_websocket()) {
      set_websocket(from.websocket());
    }
    if (from.has_parsetype()) {
      set_parsetype(from.parsetype());
    }
    if (from.has_masterip()) {
      set_masterip(from.masterip());
    }
    if (from.has_masterport()) {
      set_masterport(from.masterport());
    }
    if (from.has_naminghost()) {
      set_naminghost(from.naminghost());
    }
    if (from.has_namingpath()) {
      set_namingpath(from.namingpath());
    }
    if (from.has_routeagent()) {
      set_routeagent(from.routeagent());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mysqlip()) {
      set_mysqlip(from.mysqlip());
    }
    if (from.has_mysqlport()) {
      set_mysqlport(from.mysqlport());
    }
    if (from.has_mysqldbname()) {
      set_mysqldbname(from.mysqldbname());
    }
    if (from.has_mysqluser()) {
      set_mysqluser(from.mysqluser());
    }
    if (from.has_mysqlpassword()) {
      set_mysqlpassword(from.mysqlpassword());
    }
    if (from.has_defaultdbname()) {
      set_defaultdbname(from.defaultdbname());
    }
    if (from.has_crossdbname()) {
      set_crossdbname(from.crossdbname());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_redisip()) {
      set_redisip(from.redisip());
    }
    if (from.has_redisport()) {
      set_redisport(from.redisport());
    }
    if (from.has_redispass()) {
      set_redispass(from.redispass());
    }
    if (from.has_sendemail()) {
      set_sendemail(from.sendemail());
    }
    if (from.has_sendemailpass()) {
      set_sendemailpass(from.sendemailpass());
    }
    if (from.has_sendemailurl()) {
      set_sendemailurl(from.sendemailurl());
    }
    if (from.has_sendemailport()) {
      set_sendemailport(from.sendemailport());
    }
    if (from.has_recvemail()) {
      set_recvemail(from.recvemail());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_wxworkdrobot()) {
      set_wxworkdrobot(from.wxworkdrobot());
    }
    if (from.has_maxonlineplayernum()) {
      set_maxonlineplayernum(from.maxonlineplayernum());
    }
    if (from.has_heartbeattimeout()) {
      set_heartbeattimeout(from.heartbeattimeout());
    }
    if (from.has_clientkeepalivetimeout()) {
      set_clientkeepalivetimeout(from.clientkeepalivetimeout());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbNFServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbNFServerConfig::CopyFrom(const pbNFServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbNFServerConfig::IsInitialized() const {

  return true;
}

void pbNFServerConfig::Swap(pbNFServerConfig* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(servername_, other->servername_);
    std::swap(busid_, other->busid_);
    std::swap(buslength_, other->buslength_);
    std::swap(linkmode_, other->linkmode_);
    std::swap(url_, other->url_);
    std::swap(idlesleepus_, other->idlesleepus_);
    std::swap(serverip_, other->serverip_);
    std::swap(serverport_, other->serverport_);
    std::swap(externalserverip_, other->externalserverip_);
    std::swap(externalserverport_, other->externalserverport_);
    std::swap(httpport_, other->httpport_);
    std::swap(maxconnectnum_, other->maxconnectnum_);
    std::swap(workthreadnum_, other->workthreadnum_);
    std::swap(netthreadnum_, other->netthreadnum_);
    std::swap(security_, other->security_);
    std::swap(websocket_, other->websocket_);
    std::swap(parsetype_, other->parsetype_);
    std::swap(masterip_, other->masterip_);
    std::swap(masterport_, other->masterport_);
    std::swap(naminghost_, other->naminghost_);
    std::swap(namingpath_, other->namingpath_);
    std::swap(routeagent_, other->routeagent_);
    std::swap(mysqlip_, other->mysqlip_);
    std::swap(mysqlport_, other->mysqlport_);
    std::swap(mysqldbname_, other->mysqldbname_);
    std::swap(mysqluser_, other->mysqluser_);
    std::swap(mysqlpassword_, other->mysqlpassword_);
    std::swap(defaultdbname_, other->defaultdbname_);
    std::swap(crossdbname_, other->crossdbname_);
    tbconflist_.Swap(&other->tbconflist_);
    std::swap(redisip_, other->redisip_);
    std::swap(redisport_, other->redisport_);
    std::swap(redispass_, other->redispass_);
    std::swap(sendemail_, other->sendemail_);
    std::swap(sendemailpass_, other->sendemailpass_);
    std::swap(sendemailurl_, other->sendemailurl_);
    std::swap(sendemailport_, other->sendemailport_);
    std::swap(recvemail_, other->recvemail_);
    std::swap(wxworkdrobot_, other->wxworkdrobot_);
    std::swap(maxonlineplayernum_, other->maxonlineplayernum_);
    std::swap(heartbeattimeout_, other->heartbeattimeout_);
    std::swap(clientkeepalivetimeout_, other->clientkeepalivetimeout_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbNFServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbNFServerConfig_descriptor_;
  metadata.reflection = pbNFServerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wxWorkRobotText::kContentFieldNumber;
const int wxWorkRobotText::kMentionedListFieldNumber;
const int wxWorkRobotText::kMentionedMobileListFieldNumber;
#endif  // !_MSC_VER

wxWorkRobotText::wxWorkRobotText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wxWorkRobotText::InitAsDefaultInstance() {
}

wxWorkRobotText::wxWorkRobotText(const wxWorkRobotText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wxWorkRobotText::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wxWorkRobotText::~wxWorkRobotText() {
  SharedDtor();
}

void wxWorkRobotText::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void wxWorkRobotText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wxWorkRobotText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wxWorkRobotText_descriptor_;
}

const wxWorkRobotText& wxWorkRobotText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

wxWorkRobotText* wxWorkRobotText::default_instance_ = NULL;

wxWorkRobotText* wxWorkRobotText::New() const {
  return new wxWorkRobotText;
}

void wxWorkRobotText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  mentioned_list_.Clear();
  mentioned_mobile_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wxWorkRobotText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mentioned_list;
        break;
      }

      // repeated string mentioned_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mentioned_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mentioned_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mentioned_list(this->mentioned_list_size() - 1).data(),
            this->mentioned_list(this->mentioned_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mentioned_list;
        if (input->ExpectTag(26)) goto parse_mentioned_mobile_list;
        break;
      }

      // repeated string mentioned_mobile_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mentioned_mobile_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mentioned_mobile_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mentioned_mobile_list(this->mentioned_mobile_list_size() - 1).data(),
            this->mentioned_mobile_list(this->mentioned_mobile_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mentioned_mobile_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wxWorkRobotText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // repeated string mentioned_list = 2;
  for (int i = 0; i < this->mentioned_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mentioned_list(i).data(), this->mentioned_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mentioned_list(i), output);
  }

  // repeated string mentioned_mobile_list = 3;
  for (int i = 0; i < this->mentioned_mobile_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mentioned_mobile_list(i).data(), this->mentioned_mobile_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mentioned_mobile_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wxWorkRobotText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // repeated string mentioned_list = 2;
  for (int i = 0; i < this->mentioned_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentioned_list(i).data(), this->mentioned_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mentioned_list(i), target);
  }

  // repeated string mentioned_mobile_list = 3;
  for (int i = 0; i < this->mentioned_mobile_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mentioned_mobile_list(i).data(), this->mentioned_mobile_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mentioned_mobile_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wxWorkRobotText::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated string mentioned_list = 2;
  total_size += 1 * this->mentioned_list_size();
  for (int i = 0; i < this->mentioned_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mentioned_list(i));
  }

  // repeated string mentioned_mobile_list = 3;
  total_size += 1 * this->mentioned_mobile_list_size();
  for (int i = 0; i < this->mentioned_mobile_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mentioned_mobile_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wxWorkRobotText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wxWorkRobotText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wxWorkRobotText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wxWorkRobotText::MergeFrom(const wxWorkRobotText& from) {
  GOOGLE_CHECK_NE(&from, this);
  mentioned_list_.MergeFrom(from.mentioned_list_);
  mentioned_mobile_list_.MergeFrom(from.mentioned_mobile_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wxWorkRobotText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wxWorkRobotText::CopyFrom(const wxWorkRobotText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wxWorkRobotText::IsInitialized() const {

  return true;
}

void wxWorkRobotText::Swap(wxWorkRobotText* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    mentioned_list_.Swap(&other->mentioned_list_);
    mentioned_mobile_list_.Swap(&other->mentioned_mobile_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wxWorkRobotText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wxWorkRobotText_descriptor_;
  metadata.reflection = wxWorkRobotText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wxWorkRobotHttpPost::kMsgtypeFieldNumber;
const int wxWorkRobotHttpPost::kTextFieldNumber;
#endif  // !_MSC_VER

wxWorkRobotHttpPost::wxWorkRobotHttpPost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wxWorkRobotHttpPost::InitAsDefaultInstance() {
  text_ = const_cast< ::proto_ff::wxWorkRobotText*>(&::proto_ff::wxWorkRobotText::default_instance());
}

wxWorkRobotHttpPost::wxWorkRobotHttpPost(const wxWorkRobotHttpPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wxWorkRobotHttpPost::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wxWorkRobotHttpPost::~wxWorkRobotHttpPost() {
  SharedDtor();
}

void wxWorkRobotHttpPost::SharedDtor() {
  if (msgtype_ != &::google::protobuf::internal::kEmptyString) {
    delete msgtype_;
  }
  if (this != default_instance_) {
    delete text_;
  }
}

void wxWorkRobotHttpPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wxWorkRobotHttpPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wxWorkRobotHttpPost_descriptor_;
}

const wxWorkRobotHttpPost& wxWorkRobotHttpPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

wxWorkRobotHttpPost* wxWorkRobotHttpPost::default_instance_ = NULL;

wxWorkRobotHttpPost* wxWorkRobotHttpPost::New() const {
  return new wxWorkRobotHttpPost;
}

void wxWorkRobotHttpPost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgtype()) {
      if (msgtype_ != &::google::protobuf::internal::kEmptyString) {
        msgtype_->clear();
      }
    }
    if (has_text()) {
      if (text_ != NULL) text_->::proto_ff::wxWorkRobotText::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wxWorkRobotHttpPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msgtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgtype().data(), this->msgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional .proto_ff.wxWorkRobotText text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wxWorkRobotHttpPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgtype(), output);
  }

  // optional .proto_ff.wxWorkRobotText text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wxWorkRobotHttpPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgtype(), target);
  }

  // optional .proto_ff.wxWorkRobotText text = 2;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wxWorkRobotHttpPost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }

    // optional .proto_ff.wxWorkRobotText text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wxWorkRobotHttpPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wxWorkRobotHttpPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wxWorkRobotHttpPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wxWorkRobotHttpPost::MergeFrom(const wxWorkRobotHttpPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_text()) {
      mutable_text()->::proto_ff::wxWorkRobotText::MergeFrom(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wxWorkRobotHttpPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wxWorkRobotHttpPost::CopyFrom(const wxWorkRobotHttpPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wxWorkRobotHttpPost::IsInitialized() const {

  return true;
}

void wxWorkRobotHttpPost::Swap(wxWorkRobotHttpPost* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wxWorkRobotHttpPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wxWorkRobotHttpPost_descriptor_;
  metadata.reflection = wxWorkRobotHttpPost_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
