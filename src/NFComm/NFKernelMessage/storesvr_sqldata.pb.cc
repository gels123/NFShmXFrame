// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storesvr_sqldata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storesvr_sqldata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace storesvr_sqldata {

namespace {

const ::google::protobuf::Descriptor* storesvr_vk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_vk_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_wherecond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_wherecond_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_baseinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_baseinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_opres_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_opres_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_sel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_sel_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_sel_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_sel_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_selobj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_selobj_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_selobj_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_selobj_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_ins_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_ins_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_ins_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_ins_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_del_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_del_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_del_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_del_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_delobj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_delobj_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_delobj_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_delobj_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_mod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_mod_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_mod_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_mod_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_modobj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_modobj_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_modobj_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_modobj_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_modins_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_modins_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_modins_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_modins_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_modinsobj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_modinsobj_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_modinsobj_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_modinsobj_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_execute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_execute_reflection_ = NULL;
const ::google::protobuf::Descriptor* storesvr_execute_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  storesvr_execute_res_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* storesvr_logic_operator_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* storesvr_cmp_operator_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* storesvr_column_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_storesvr_5fsqldata_2eproto() {
  protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "storesvr_sqldata.proto");
  GOOGLE_CHECK(file != NULL);
  storesvr_vk_descriptor_ = file->message_type(0);
  static const int storesvr_vk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_vk, column_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_vk, column_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_vk, cmp_operator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_vk, column_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_vk, logic_operator_),
  };
  storesvr_vk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_vk_descriptor_,
      storesvr_vk::default_instance_,
      storesvr_vk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_vk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_vk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_vk));
  storesvr_wherecond_descriptor_ = file->message_type(1);
  static const int storesvr_wherecond_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_wherecond, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_wherecond, where_conds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_wherecond, where_additional_conds_),
  };
  storesvr_wherecond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_wherecond_descriptor_,
      storesvr_wherecond::default_instance_,
      storesvr_wherecond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_wherecond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_wherecond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_wherecond));
  storesvr_baseinfo_descriptor_ = file->message_type(2);
  static const int storesvr_baseinfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_baseinfo, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_baseinfo, tbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_baseinfo, clname_),
  };
  storesvr_baseinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_baseinfo_descriptor_,
      storesvr_baseinfo::default_instance_,
      storesvr_baseinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_baseinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_baseinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_baseinfo));
  storesvr_opres_descriptor_ = file->message_type(3);
  static const int storesvr_opres_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_opres, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_opres, zdb_errmsg_),
  };
  storesvr_opres_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_opres_descriptor_,
      storesvr_opres::default_instance_,
      storesvr_opres_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_opres, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_opres, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_opres));
  storesvr_sel_descriptor_ = file->message_type(4);
  static const int storesvr_sel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel, sel_cond_),
  };
  storesvr_sel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_sel_descriptor_,
      storesvr_sel::default_instance_,
      storesvr_sel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_sel));
  storesvr_sel_res_descriptor_ = file->message_type(5);
  static const int storesvr_sel_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel_res, sel_opres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel_res, is_lastbatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel_res, row_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel_res, sel_records_),
  };
  storesvr_sel_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_sel_res_descriptor_,
      storesvr_sel_res::default_instance_,
      storesvr_sel_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_sel_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_sel_res));
  storesvr_selobj_descriptor_ = file->message_type(6);
  static const int storesvr_selobj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj, sel_record_),
  };
  storesvr_selobj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_selobj_descriptor_,
      storesvr_selobj::default_instance_,
      storesvr_selobj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_selobj));
  storesvr_selobj_res_descriptor_ = file->message_type(7);
  static const int storesvr_selobj_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj_res, sel_opres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj_res, sel_record_),
  };
  storesvr_selobj_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_selobj_res_descriptor_,
      storesvr_selobj_res::default_instance_,
      storesvr_selobj_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_selobj_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_selobj_res));
  storesvr_ins_descriptor_ = file->message_type(8);
  static const int storesvr_ins_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins, ins_record_),
  };
  storesvr_ins_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_ins_descriptor_,
      storesvr_ins::default_instance_,
      storesvr_ins_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_ins));
  storesvr_ins_res_descriptor_ = file->message_type(9);
  static const int storesvr_ins_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins_res, ins_opres_),
  };
  storesvr_ins_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_ins_res_descriptor_,
      storesvr_ins_res::default_instance_,
      storesvr_ins_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_ins_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_ins_res));
  storesvr_del_descriptor_ = file->message_type(10);
  static const int storesvr_del_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del, del_cond_),
  };
  storesvr_del_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_del_descriptor_,
      storesvr_del::default_instance_,
      storesvr_del_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_del));
  storesvr_del_res_descriptor_ = file->message_type(11);
  static const int storesvr_del_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del_res, del_opres_),
  };
  storesvr_del_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_del_res_descriptor_,
      storesvr_del_res::default_instance_,
      storesvr_del_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_del_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_del_res));
  storesvr_delobj_descriptor_ = file->message_type(12);
  static const int storesvr_delobj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj, del_record_),
  };
  storesvr_delobj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_delobj_descriptor_,
      storesvr_delobj::default_instance_,
      storesvr_delobj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_delobj));
  storesvr_delobj_res_descriptor_ = file->message_type(13);
  static const int storesvr_delobj_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj_res, del_opres_),
  };
  storesvr_delobj_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_delobj_res_descriptor_,
      storesvr_delobj_res::default_instance_,
      storesvr_delobj_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_delobj_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_delobj_res));
  storesvr_mod_descriptor_ = file->message_type(14);
  static const int storesvr_mod_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod, mod_cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod, mod_record_),
  };
  storesvr_mod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_mod_descriptor_,
      storesvr_mod::default_instance_,
      storesvr_mod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_mod));
  storesvr_mod_res_descriptor_ = file->message_type(15);
  static const int storesvr_mod_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod_res, mod_opres_),
  };
  storesvr_mod_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_mod_res_descriptor_,
      storesvr_mod_res::default_instance_,
      storesvr_mod_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_mod_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_mod_res));
  storesvr_modobj_descriptor_ = file->message_type(16);
  static const int storesvr_modobj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj, mod_record_),
  };
  storesvr_modobj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_modobj_descriptor_,
      storesvr_modobj::default_instance_,
      storesvr_modobj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_modobj));
  storesvr_modobj_res_descriptor_ = file->message_type(17);
  static const int storesvr_modobj_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj_res, mod_opres_),
  };
  storesvr_modobj_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_modobj_res_descriptor_,
      storesvr_modobj_res::default_instance_,
      storesvr_modobj_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modobj_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_modobj_res));
  storesvr_modins_descriptor_ = file->message_type(18);
  static const int storesvr_modins_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins, mod_cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins, mod_record_),
  };
  storesvr_modins_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_modins_descriptor_,
      storesvr_modins::default_instance_,
      storesvr_modins_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_modins));
  storesvr_modins_res_descriptor_ = file->message_type(19);
  static const int storesvr_modins_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins_res, mod_opres_),
  };
  storesvr_modins_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_modins_res_descriptor_,
      storesvr_modins_res::default_instance_,
      storesvr_modins_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modins_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_modins_res));
  storesvr_modinsobj_descriptor_ = file->message_type(20);
  static const int storesvr_modinsobj_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj, modins_record_),
  };
  storesvr_modinsobj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_modinsobj_descriptor_,
      storesvr_modinsobj::default_instance_,
      storesvr_modinsobj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_modinsobj));
  storesvr_modinsobj_res_descriptor_ = file->message_type(21);
  static const int storesvr_modinsobj_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj_res, modins_opres_),
  };
  storesvr_modinsobj_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_modinsobj_res_descriptor_,
      storesvr_modinsobj_res::default_instance_,
      storesvr_modinsobj_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_modinsobj_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_modinsobj_res));
  storesvr_execute_descriptor_ = file->message_type(22);
  static const int storesvr_execute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute, mod_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute, execute_record_),
  };
  storesvr_execute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_execute_descriptor_,
      storesvr_execute::default_instance_,
      storesvr_execute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_execute));
  storesvr_execute_res_descriptor_ = file->message_type(23);
  static const int storesvr_execute_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute_res, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute_res, exe_opres_),
  };
  storesvr_execute_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      storesvr_execute_res_descriptor_,
      storesvr_execute_res::default_instance_,
      storesvr_execute_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(storesvr_execute_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(storesvr_execute_res));
  storesvr_logic_operator_descriptor_ = file->enum_type(0);
  storesvr_cmp_operator_descriptor_ = file->enum_type(1);
  storesvr_column_type_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_storesvr_5fsqldata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_vk_descriptor_, &storesvr_vk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_wherecond_descriptor_, &storesvr_wherecond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_baseinfo_descriptor_, &storesvr_baseinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_opres_descriptor_, &storesvr_opres::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_sel_descriptor_, &storesvr_sel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_sel_res_descriptor_, &storesvr_sel_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_selobj_descriptor_, &storesvr_selobj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_selobj_res_descriptor_, &storesvr_selobj_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_ins_descriptor_, &storesvr_ins::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_ins_res_descriptor_, &storesvr_ins_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_del_descriptor_, &storesvr_del::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_del_res_descriptor_, &storesvr_del_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_delobj_descriptor_, &storesvr_delobj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_delobj_res_descriptor_, &storesvr_delobj_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_mod_descriptor_, &storesvr_mod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_mod_res_descriptor_, &storesvr_mod_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_modobj_descriptor_, &storesvr_modobj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_modobj_res_descriptor_, &storesvr_modobj_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_modins_descriptor_, &storesvr_modins::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_modins_res_descriptor_, &storesvr_modins_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_modinsobj_descriptor_, &storesvr_modinsobj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_modinsobj_res_descriptor_, &storesvr_modinsobj_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_execute_descriptor_, &storesvr_execute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    storesvr_execute_res_descriptor_, &storesvr_execute_res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_storesvr_5fsqldata_2eproto() {
  delete storesvr_vk::default_instance_;
  delete storesvr_vk_reflection_;
  delete storesvr_wherecond::default_instance_;
  delete storesvr_wherecond_reflection_;
  delete storesvr_baseinfo::default_instance_;
  delete storesvr_baseinfo_reflection_;
  delete storesvr_opres::default_instance_;
  delete storesvr_opres_reflection_;
  delete storesvr_sel::default_instance_;
  delete storesvr_sel_reflection_;
  delete storesvr_sel_res::default_instance_;
  delete storesvr_sel_res_reflection_;
  delete storesvr_selobj::default_instance_;
  delete storesvr_selobj_reflection_;
  delete storesvr_selobj_res::default_instance_;
  delete storesvr_selobj_res_reflection_;
  delete storesvr_ins::default_instance_;
  delete storesvr_ins_reflection_;
  delete storesvr_ins_res::default_instance_;
  delete storesvr_ins_res_reflection_;
  delete storesvr_del::default_instance_;
  delete storesvr_del_reflection_;
  delete storesvr_del_res::default_instance_;
  delete storesvr_del_res_reflection_;
  delete storesvr_delobj::default_instance_;
  delete storesvr_delobj_reflection_;
  delete storesvr_delobj_res::default_instance_;
  delete storesvr_delobj_res_reflection_;
  delete storesvr_mod::default_instance_;
  delete storesvr_mod_reflection_;
  delete storesvr_mod_res::default_instance_;
  delete storesvr_mod_res_reflection_;
  delete storesvr_modobj::default_instance_;
  delete storesvr_modobj_reflection_;
  delete storesvr_modobj_res::default_instance_;
  delete storesvr_modobj_res_reflection_;
  delete storesvr_modins::default_instance_;
  delete storesvr_modins_reflection_;
  delete storesvr_modins_res::default_instance_;
  delete storesvr_modins_res_reflection_;
  delete storesvr_modinsobj::default_instance_;
  delete storesvr_modinsobj_reflection_;
  delete storesvr_modinsobj_res::default_instance_;
  delete storesvr_modinsobj_res_reflection_;
  delete storesvr_execute::default_instance_;
  delete storesvr_execute_reflection_;
  delete storesvr_execute_res::default_instance_;
  delete storesvr_execute_res_reflection_;
}

void protobuf_AddDesc_storesvr_5fsqldata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026storesvr_sqldata.proto\022\020storesvr_sqlda"
    "ta\"\231\002\n\013storesvr_vk\022\023\n\013column_name\030\001 \001(\t\022"
    "\024\n\014column_value\030\002 \001(\t\022=\n\014cmp_operator\030\003 "
    "\001(\0162\'.storesvr_sqldata.storesvr_cmp_oper"
    "ator\022M\n\013column_type\030\004 \001(\0162&.storesvr_sql"
    "data.storesvr_column_type:\020E_COLUMNTYPE_"
    "NUM\022Q\n\016logic_operator\030\005 \001(\0162).storesvr_s"
    "qldata.storesvr_logic_operator:\016E_LOGICO"
    "P_NONE\"y\n\022storesvr_wherecond\022\017\n\007mod_key\030"
    "\001 \001(\004\0222\n\013where_conds\030\002 \003(\0132\035.storesvr_sq"
    "ldata.storesvr_vk\022\036\n\026where_additional_co"
    "nds\030\003 \001(\t\"C\n\021storesvr_baseinfo\022\016\n\006dbname"
    "\030\001 \001(\t\022\016\n\006tbname\030\002 \001(\t\022\016\n\006clname\030\003 \001(\t\"5"
    "\n\016storesvr_opres\022\017\n\007mod_key\030\001 \001(\004\022\022\n\nzdb"
    "_errmsg\030\002 \001(\t\"}\n\014storesvr_sel\0225\n\010baseinf"
    "o\030\001 \001(\0132#.storesvr_sqldata.storesvr_base"
    "info\0226\n\010sel_cond\030\002 \001(\0132$.storesvr_sqldat"
    "a.storesvr_wherecond\"\274\001\n\020storesvr_sel_re"
    "s\0225\n\010baseinfo\030\001 \001(\0132#.storesvr_sqldata.s"
    "toresvr_baseinfo\0223\n\tsel_opres\030\002 \001(\0132 .st"
    "oresvr_sqldata.storesvr_opres\022\024\n\014is_last"
    "batch\030\003 \001(\010\022\021\n\trow_count\030\004 \001(\005\022\023\n\013sel_re"
    "cords\030\005 \003(\014\"m\n\017storesvr_selobj\0225\n\010basein"
    "fo\030\001 \001(\0132#.storesvr_sqldata.storesvr_bas"
    "einfo\022\017\n\007mod_key\030\002 \001(\004\022\022\n\nsel_record\030\003 \001"
    "(\014\"\225\001\n\023storesvr_selobj_res\0225\n\010baseinfo\030\001"
    " \001(\0132#.storesvr_sqldata.storesvr_baseinf"
    "o\0223\n\tsel_opres\030\002 \001(\0132 .storesvr_sqldata."
    "storesvr_opres\022\022\n\nsel_record\030\003 \001(\014\"j\n\014st"
    "oresvr_ins\0225\n\010baseinfo\030\001 \001(\0132#.storesvr_"
    "sqldata.storesvr_baseinfo\022\017\n\007mod_key\030\002 \001"
    "(\004\022\022\n\nins_record\030\003 \001(\014\"~\n\020storesvr_ins_r"
    "es\0225\n\010baseinfo\030\001 \001(\0132#.storesvr_sqldata."
    "storesvr_baseinfo\0223\n\tins_opres\030\002 \001(\0132 .s"
    "toresvr_sqldata.storesvr_opres\"}\n\014stores"
    "vr_del\0225\n\010baseinfo\030\001 \001(\0132#.storesvr_sqld"
    "ata.storesvr_baseinfo\0226\n\010del_cond\030\002 \001(\0132"
    "$.storesvr_sqldata.storesvr_wherecond\"~\n"
    "\020storesvr_del_res\0225\n\010baseinfo\030\001 \001(\0132#.st"
    "oresvr_sqldata.storesvr_baseinfo\0223\n\tdel_"
    "opres\030\002 \001(\0132 .storesvr_sqldata.storesvr_"
    "opres\"m\n\017storesvr_delobj\0225\n\010baseinfo\030\001 \001"
    "(\0132#.storesvr_sqldata.storesvr_baseinfo\022"
    "\017\n\007mod_key\030\002 \001(\004\022\022\n\ndel_record\030\003 \001(\014\"\201\001\n"
    "\023storesvr_delobj_res\0225\n\010baseinfo\030\001 \001(\0132#"
    ".storesvr_sqldata.storesvr_baseinfo\0223\n\td"
    "el_opres\030\002 \001(\0132 .storesvr_sqldata.stores"
    "vr_opres\"\221\001\n\014storesvr_mod\0225\n\010baseinfo\030\001 "
    "\001(\0132#.storesvr_sqldata.storesvr_baseinfo"
    "\0226\n\010mod_cond\030\002 \001(\0132$.storesvr_sqldata.st"
    "oresvr_wherecond\022\022\n\nmod_record\030\003 \001(\014\"~\n\020"
    "storesvr_mod_res\0225\n\010baseinfo\030\001 \001(\0132#.sto"
    "resvr_sqldata.storesvr_baseinfo\0223\n\tmod_o"
    "pres\030\002 \001(\0132 .storesvr_sqldata.storesvr_o"
    "pres\"m\n\017storesvr_modobj\0225\n\010baseinfo\030\001 \001("
    "\0132#.storesvr_sqldata.storesvr_baseinfo\022\017"
    "\n\007mod_key\030\002 \001(\004\022\022\n\nmod_record\030\003 \001(\014\"\201\001\n\023"
    "storesvr_modobj_res\0225\n\010baseinfo\030\001 \001(\0132#."
    "storesvr_sqldata.storesvr_baseinfo\0223\n\tmo"
    "d_opres\030\002 \001(\0132 .storesvr_sqldata.storesv"
    "r_opres\"\224\001\n\017storesvr_modins\0225\n\010baseinfo\030"
    "\001 \001(\0132#.storesvr_sqldata.storesvr_basein"
    "fo\0226\n\010mod_cond\030\002 \001(\0132$.storesvr_sqldata."
    "storesvr_wherecond\022\022\n\nmod_record\030\003 \001(\014\"\201"
    "\001\n\023storesvr_modins_res\0225\n\010baseinfo\030\001 \001(\013"
    "2#.storesvr_sqldata.storesvr_baseinfo\0223\n"
    "\tmod_opres\030\002 \001(\0132 .storesvr_sqldata.stor"
    "esvr_opres\"s\n\022storesvr_modinsobj\0225\n\010base"
    "info\030\001 \001(\0132#.storesvr_sqldata.storesvr_b"
    "aseinfo\022\017\n\007mod_key\030\002 \001(\004\022\025\n\rmodins_recor"
    "d\030\003 \001(\014\"\207\001\n\026storesvr_modinsobj_res\0225\n\010ba"
    "seinfo\030\001 \001(\0132#.storesvr_sqldata.storesvr"
    "_baseinfo\0226\n\014modins_opres\030\002 \001(\0132 .stores"
    "vr_sqldata.storesvr_opres\"r\n\020storesvr_ex"
    "ecute\0225\n\010baseinfo\030\001 \001(\0132#.storesvr_sqlda"
    "ta.storesvr_baseinfo\022\017\n\007mod_key\030\002 \001(\004\022\026\n"
    "\016execute_record\030\003 \001(\014\"\202\001\n\024storesvr_execu"
    "te_res\0225\n\010baseinfo\030\001 \001(\0132#.storesvr_sqld"
    "ata.storesvr_baseinfo\0223\n\texe_opres\030\002 \001(\013"
    "2 .storesvr_sqldata.storesvr_opres*R\n\027st"
    "oresvr_logic_operator\022\021\n\rE_LOGICOP_AND\020\001"
    "\022\020\n\014E_LOGICOP_OR\020\002\022\022\n\016E_LOGICOP_NONE\020\003*\230"
    "\001\n\025storesvr_cmp_operator\022\021\n\rE_CMPOP_EQUA"
    "L\020\001\022\023\n\017E_CMPOP_GREATER\020\002\022\020\n\014E_CMPOP_LESS"
    "\020\003\022\030\n\024E_CMPOP_GREATEREQUAL\020\004\022\025\n\021E_CMPOP_"
    "LESSEQUAL\020\005\022\024\n\020E_CMPOP_NOTEQUAL\020\006*E\n\024sto"
    "resvr_column_type\022\027\n\023E_COLUMNTYPE_STRING"
    "\020\001\022\024\n\020E_COLUMNTYPE_NUM\020\002", 3504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storesvr_sqldata.proto", &protobuf_RegisterTypes);
  storesvr_vk::default_instance_ = new storesvr_vk();
  storesvr_wherecond::default_instance_ = new storesvr_wherecond();
  storesvr_baseinfo::default_instance_ = new storesvr_baseinfo();
  storesvr_opres::default_instance_ = new storesvr_opres();
  storesvr_sel::default_instance_ = new storesvr_sel();
  storesvr_sel_res::default_instance_ = new storesvr_sel_res();
  storesvr_selobj::default_instance_ = new storesvr_selobj();
  storesvr_selobj_res::default_instance_ = new storesvr_selobj_res();
  storesvr_ins::default_instance_ = new storesvr_ins();
  storesvr_ins_res::default_instance_ = new storesvr_ins_res();
  storesvr_del::default_instance_ = new storesvr_del();
  storesvr_del_res::default_instance_ = new storesvr_del_res();
  storesvr_delobj::default_instance_ = new storesvr_delobj();
  storesvr_delobj_res::default_instance_ = new storesvr_delobj_res();
  storesvr_mod::default_instance_ = new storesvr_mod();
  storesvr_mod_res::default_instance_ = new storesvr_mod_res();
  storesvr_modobj::default_instance_ = new storesvr_modobj();
  storesvr_modobj_res::default_instance_ = new storesvr_modobj_res();
  storesvr_modins::default_instance_ = new storesvr_modins();
  storesvr_modins_res::default_instance_ = new storesvr_modins_res();
  storesvr_modinsobj::default_instance_ = new storesvr_modinsobj();
  storesvr_modinsobj_res::default_instance_ = new storesvr_modinsobj_res();
  storesvr_execute::default_instance_ = new storesvr_execute();
  storesvr_execute_res::default_instance_ = new storesvr_execute_res();
  storesvr_vk::default_instance_->InitAsDefaultInstance();
  storesvr_wherecond::default_instance_->InitAsDefaultInstance();
  storesvr_baseinfo::default_instance_->InitAsDefaultInstance();
  storesvr_opres::default_instance_->InitAsDefaultInstance();
  storesvr_sel::default_instance_->InitAsDefaultInstance();
  storesvr_sel_res::default_instance_->InitAsDefaultInstance();
  storesvr_selobj::default_instance_->InitAsDefaultInstance();
  storesvr_selobj_res::default_instance_->InitAsDefaultInstance();
  storesvr_ins::default_instance_->InitAsDefaultInstance();
  storesvr_ins_res::default_instance_->InitAsDefaultInstance();
  storesvr_del::default_instance_->InitAsDefaultInstance();
  storesvr_del_res::default_instance_->InitAsDefaultInstance();
  storesvr_delobj::default_instance_->InitAsDefaultInstance();
  storesvr_delobj_res::default_instance_->InitAsDefaultInstance();
  storesvr_mod::default_instance_->InitAsDefaultInstance();
  storesvr_mod_res::default_instance_->InitAsDefaultInstance();
  storesvr_modobj::default_instance_->InitAsDefaultInstance();
  storesvr_modobj_res::default_instance_->InitAsDefaultInstance();
  storesvr_modins::default_instance_->InitAsDefaultInstance();
  storesvr_modins_res::default_instance_->InitAsDefaultInstance();
  storesvr_modinsobj::default_instance_->InitAsDefaultInstance();
  storesvr_modinsobj_res::default_instance_->InitAsDefaultInstance();
  storesvr_execute::default_instance_->InitAsDefaultInstance();
  storesvr_execute_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storesvr_5fsqldata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storesvr_5fsqldata_2eproto {
  StaticDescriptorInitializer_storesvr_5fsqldata_2eproto() {
    protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  }
} static_descriptor_initializer_storesvr_5fsqldata_2eproto_;
const ::google::protobuf::EnumDescriptor* storesvr_logic_operator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_logic_operator_descriptor_;
}
bool storesvr_logic_operator_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* storesvr_cmp_operator_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_cmp_operator_descriptor_;
}
bool storesvr_cmp_operator_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* storesvr_column_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_column_type_descriptor_;
}
bool storesvr_column_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_vk::kColumnNameFieldNumber;
const int storesvr_vk::kColumnValueFieldNumber;
const int storesvr_vk::kCmpOperatorFieldNumber;
const int storesvr_vk::kColumnTypeFieldNumber;
const int storesvr_vk::kLogicOperatorFieldNumber;
#endif  // !_MSC_VER

storesvr_vk::storesvr_vk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_vk::InitAsDefaultInstance() {
}

storesvr_vk::storesvr_vk(const storesvr_vk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_vk::SharedCtor() {
  _cached_size_ = 0;
  column_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  column_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmp_operator_ = 1;
  column_type_ = 2;
  logic_operator_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_vk::~storesvr_vk() {
  SharedDtor();
}

void storesvr_vk::SharedDtor() {
  if (column_name_ != &::google::protobuf::internal::kEmptyString) {
    delete column_name_;
  }
  if (column_value_ != &::google::protobuf::internal::kEmptyString) {
    delete column_value_;
  }
  if (this != default_instance_) {
  }
}

void storesvr_vk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_vk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_vk_descriptor_;
}

const storesvr_vk& storesvr_vk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_vk* storesvr_vk::default_instance_ = NULL;

storesvr_vk* storesvr_vk::New() const {
  return new storesvr_vk;
}

void storesvr_vk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_column_name()) {
      if (column_name_ != &::google::protobuf::internal::kEmptyString) {
        column_name_->clear();
      }
    }
    if (has_column_value()) {
      if (column_value_ != &::google::protobuf::internal::kEmptyString) {
        column_value_->clear();
      }
    }
    cmp_operator_ = 1;
    column_type_ = 2;
    logic_operator_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_vk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string column_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_name().data(), this->column_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_value;
        break;
      }

      // optional string column_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_value().data(), this->column_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmp_operator;
        break;
      }

      // optional .storesvr_sqldata.storesvr_cmp_operator cmp_operator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmp_operator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::storesvr_sqldata::storesvr_cmp_operator_IsValid(value)) {
            set_cmp_operator(static_cast< ::storesvr_sqldata::storesvr_cmp_operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_column_type;
        break;
      }

      // optional .storesvr_sqldata.storesvr_column_type column_type = 4 [default = E_COLUMNTYPE_NUM];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::storesvr_sqldata::storesvr_column_type_IsValid(value)) {
            set_column_type(static_cast< ::storesvr_sqldata::storesvr_column_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logic_operator;
        break;
      }

      // optional .storesvr_sqldata.storesvr_logic_operator logic_operator = 5 [default = E_LOGICOP_NONE];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_operator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::storesvr_sqldata::storesvr_logic_operator_IsValid(value)) {
            set_logic_operator(static_cast< ::storesvr_sqldata::storesvr_logic_operator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_vk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string column_name = 1;
  if (has_column_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->column_name(), output);
  }

  // optional string column_value = 2;
  if (has_column_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_value().data(), this->column_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->column_value(), output);
  }

  // optional .storesvr_sqldata.storesvr_cmp_operator cmp_operator = 3;
  if (has_cmp_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmp_operator(), output);
  }

  // optional .storesvr_sqldata.storesvr_column_type column_type = 4 [default = E_COLUMNTYPE_NUM];
  if (has_column_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->column_type(), output);
  }

  // optional .storesvr_sqldata.storesvr_logic_operator logic_operator = 5 [default = E_LOGICOP_NONE];
  if (has_logic_operator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->logic_operator(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_vk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string column_name = 1;
  if (has_column_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_name().data(), this->column_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->column_name(), target);
  }

  // optional string column_value = 2;
  if (has_column_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_value().data(), this->column_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column_value(), target);
  }

  // optional .storesvr_sqldata.storesvr_cmp_operator cmp_operator = 3;
  if (has_cmp_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmp_operator(), target);
  }

  // optional .storesvr_sqldata.storesvr_column_type column_type = 4 [default = E_COLUMNTYPE_NUM];
  if (has_column_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->column_type(), target);
  }

  // optional .storesvr_sqldata.storesvr_logic_operator logic_operator = 5 [default = E_LOGICOP_NONE];
  if (has_logic_operator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->logic_operator(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_vk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string column_name = 1;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_name());
    }

    // optional string column_value = 2;
    if (has_column_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_value());
    }

    // optional .storesvr_sqldata.storesvr_cmp_operator cmp_operator = 3;
    if (has_cmp_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmp_operator());
    }

    // optional .storesvr_sqldata.storesvr_column_type column_type = 4 [default = E_COLUMNTYPE_NUM];
    if (has_column_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->column_type());
    }

    // optional .storesvr_sqldata.storesvr_logic_operator logic_operator = 5 [default = E_LOGICOP_NONE];
    if (has_logic_operator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->logic_operator());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_vk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_vk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_vk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_vk::MergeFrom(const storesvr_vk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_column_name()) {
      set_column_name(from.column_name());
    }
    if (from.has_column_value()) {
      set_column_value(from.column_value());
    }
    if (from.has_cmp_operator()) {
      set_cmp_operator(from.cmp_operator());
    }
    if (from.has_column_type()) {
      set_column_type(from.column_type());
    }
    if (from.has_logic_operator()) {
      set_logic_operator(from.logic_operator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_vk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_vk::CopyFrom(const storesvr_vk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_vk::IsInitialized() const {

  return true;
}

void storesvr_vk::Swap(storesvr_vk* other) {
  if (other != this) {
    std::swap(column_name_, other->column_name_);
    std::swap(column_value_, other->column_value_);
    std::swap(cmp_operator_, other->cmp_operator_);
    std::swap(column_type_, other->column_type_);
    std::swap(logic_operator_, other->logic_operator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_vk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_vk_descriptor_;
  metadata.reflection = storesvr_vk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_wherecond::kModKeyFieldNumber;
const int storesvr_wherecond::kWhereCondsFieldNumber;
const int storesvr_wherecond::kWhereAdditionalCondsFieldNumber;
#endif  // !_MSC_VER

storesvr_wherecond::storesvr_wherecond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_wherecond::InitAsDefaultInstance() {
}

storesvr_wherecond::storesvr_wherecond(const storesvr_wherecond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_wherecond::SharedCtor() {
  _cached_size_ = 0;
  mod_key_ = GOOGLE_ULONGLONG(0);
  where_additional_conds_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_wherecond::~storesvr_wherecond() {
  SharedDtor();
}

void storesvr_wherecond::SharedDtor() {
  if (where_additional_conds_ != &::google::protobuf::internal::kEmptyString) {
    delete where_additional_conds_;
  }
  if (this != default_instance_) {
  }
}

void storesvr_wherecond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_wherecond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_wherecond_descriptor_;
}

const storesvr_wherecond& storesvr_wherecond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_wherecond* storesvr_wherecond::default_instance_ = NULL;

storesvr_wherecond* storesvr_wherecond::New() const {
  return new storesvr_wherecond;
}

void storesvr_wherecond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_where_additional_conds()) {
      if (where_additional_conds_ != &::google::protobuf::internal::kEmptyString) {
        where_additional_conds_->clear();
      }
    }
  }
  where_conds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_wherecond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mod_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_where_conds;
        break;
      }

      // repeated .storesvr_sqldata.storesvr_vk where_conds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_where_conds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_where_conds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_where_conds;
        if (input->ExpectTag(26)) goto parse_where_additional_conds;
        break;
      }

      // optional string where_additional_conds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_where_additional_conds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where_additional_conds()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->where_additional_conds().data(), this->where_additional_conds().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_wherecond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mod_key = 1;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mod_key(), output);
  }

  // repeated .storesvr_sqldata.storesvr_vk where_conds = 2;
  for (int i = 0; i < this->where_conds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->where_conds(i), output);
  }

  // optional string where_additional_conds = 3;
  if (has_where_additional_conds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->where_additional_conds().data(), this->where_additional_conds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->where_additional_conds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_wherecond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mod_key = 1;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mod_key(), target);
  }

  // repeated .storesvr_sqldata.storesvr_vk where_conds = 2;
  for (int i = 0; i < this->where_conds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->where_conds(i), target);
  }

  // optional string where_additional_conds = 3;
  if (has_where_additional_conds()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->where_additional_conds().data(), this->where_additional_conds().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->where_additional_conds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_wherecond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mod_key = 1;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional string where_additional_conds = 3;
    if (has_where_additional_conds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->where_additional_conds());
    }

  }
  // repeated .storesvr_sqldata.storesvr_vk where_conds = 2;
  total_size += 1 * this->where_conds_size();
  for (int i = 0; i < this->where_conds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->where_conds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_wherecond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_wherecond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_wherecond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_wherecond::MergeFrom(const storesvr_wherecond& from) {
  GOOGLE_CHECK_NE(&from, this);
  where_conds_.MergeFrom(from.where_conds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_where_additional_conds()) {
      set_where_additional_conds(from.where_additional_conds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_wherecond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_wherecond::CopyFrom(const storesvr_wherecond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_wherecond::IsInitialized() const {

  return true;
}

void storesvr_wherecond::Swap(storesvr_wherecond* other) {
  if (other != this) {
    std::swap(mod_key_, other->mod_key_);
    where_conds_.Swap(&other->where_conds_);
    std::swap(where_additional_conds_, other->where_additional_conds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_wherecond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_wherecond_descriptor_;
  metadata.reflection = storesvr_wherecond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_baseinfo::kDbnameFieldNumber;
const int storesvr_baseinfo::kTbnameFieldNumber;
const int storesvr_baseinfo::kClnameFieldNumber;
#endif  // !_MSC_VER

storesvr_baseinfo::storesvr_baseinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_baseinfo::InitAsDefaultInstance() {
}

storesvr_baseinfo::storesvr_baseinfo(const storesvr_baseinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_baseinfo::SharedCtor() {
  _cached_size_ = 0;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_baseinfo::~storesvr_baseinfo() {
  SharedDtor();
}

void storesvr_baseinfo::SharedDtor() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (tbname_ != &::google::protobuf::internal::kEmptyString) {
    delete tbname_;
  }
  if (clname_ != &::google::protobuf::internal::kEmptyString) {
    delete clname_;
  }
  if (this != default_instance_) {
  }
}

void storesvr_baseinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_baseinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_baseinfo_descriptor_;
}

const storesvr_baseinfo& storesvr_baseinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_baseinfo* storesvr_baseinfo::default_instance_ = NULL;

storesvr_baseinfo* storesvr_baseinfo::New() const {
  return new storesvr_baseinfo;
}

void storesvr_baseinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    if (has_tbname()) {
      if (tbname_ != &::google::protobuf::internal::kEmptyString) {
        tbname_->clear();
      }
    }
    if (has_clname()) {
      if (clname_ != &::google::protobuf::internal::kEmptyString) {
        clname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_baseinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tbname;
        break;
      }

      // optional string tbname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tbname().data(), this->tbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clname;
        break;
      }

      // optional string clname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clname().data(), this->clname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_baseinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dbname = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbname(), output);
  }

  // optional string tbname = 2;
  if (has_tbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbname().data(), this->tbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tbname(), output);
  }

  // optional string clname = 3;
  if (has_clname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clname().data(), this->clname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_baseinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dbname = 1;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbname(), target);
  }

  // optional string tbname = 2;
  if (has_tbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tbname().data(), this->tbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tbname(), target);
  }

  // optional string clname = 3;
  if (has_clname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clname().data(), this->clname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_baseinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dbname = 1;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string tbname = 2;
    if (has_tbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tbname());
    }

    // optional string clname = 3;
    if (has_clname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_baseinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_baseinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_baseinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_baseinfo::MergeFrom(const storesvr_baseinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_tbname()) {
      set_tbname(from.tbname());
    }
    if (from.has_clname()) {
      set_clname(from.clname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_baseinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_baseinfo::CopyFrom(const storesvr_baseinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_baseinfo::IsInitialized() const {

  return true;
}

void storesvr_baseinfo::Swap(storesvr_baseinfo* other) {
  if (other != this) {
    std::swap(dbname_, other->dbname_);
    std::swap(tbname_, other->tbname_);
    std::swap(clname_, other->clname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_baseinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_baseinfo_descriptor_;
  metadata.reflection = storesvr_baseinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_opres::kModKeyFieldNumber;
const int storesvr_opres::kZdbErrmsgFieldNumber;
#endif  // !_MSC_VER

storesvr_opres::storesvr_opres()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_opres::InitAsDefaultInstance() {
}

storesvr_opres::storesvr_opres(const storesvr_opres& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_opres::SharedCtor() {
  _cached_size_ = 0;
  mod_key_ = GOOGLE_ULONGLONG(0);
  zdb_errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_opres::~storesvr_opres() {
  SharedDtor();
}

void storesvr_opres::SharedDtor() {
  if (zdb_errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete zdb_errmsg_;
  }
  if (this != default_instance_) {
  }
}

void storesvr_opres::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_opres::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_opres_descriptor_;
}

const storesvr_opres& storesvr_opres::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_opres* storesvr_opres::default_instance_ = NULL;

storesvr_opres* storesvr_opres::New() const {
  return new storesvr_opres;
}

void storesvr_opres::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_zdb_errmsg()) {
      if (zdb_errmsg_ != &::google::protobuf::internal::kEmptyString) {
        zdb_errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_opres::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mod_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_zdb_errmsg;
        break;
      }

      // optional string zdb_errmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zdb_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zdb_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zdb_errmsg().data(), this->zdb_errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_opres::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mod_key = 1;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mod_key(), output);
  }

  // optional string zdb_errmsg = 2;
  if (has_zdb_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zdb_errmsg().data(), this->zdb_errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->zdb_errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_opres::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mod_key = 1;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mod_key(), target);
  }

  // optional string zdb_errmsg = 2;
  if (has_zdb_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zdb_errmsg().data(), this->zdb_errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zdb_errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_opres::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mod_key = 1;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional string zdb_errmsg = 2;
    if (has_zdb_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zdb_errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_opres::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_opres* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_opres*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_opres::MergeFrom(const storesvr_opres& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_zdb_errmsg()) {
      set_zdb_errmsg(from.zdb_errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_opres::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_opres::CopyFrom(const storesvr_opres& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_opres::IsInitialized() const {

  return true;
}

void storesvr_opres::Swap(storesvr_opres* other) {
  if (other != this) {
    std::swap(mod_key_, other->mod_key_);
    std::swap(zdb_errmsg_, other->zdb_errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_opres::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_opres_descriptor_;
  metadata.reflection = storesvr_opres_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_sel::kBaseinfoFieldNumber;
const int storesvr_sel::kSelCondFieldNumber;
#endif  // !_MSC_VER

storesvr_sel::storesvr_sel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_sel::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  sel_cond_ = const_cast< ::storesvr_sqldata::storesvr_wherecond*>(&::storesvr_sqldata::storesvr_wherecond::default_instance());
}

storesvr_sel::storesvr_sel(const storesvr_sel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_sel::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  sel_cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_sel::~storesvr_sel() {
  SharedDtor();
}

void storesvr_sel::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete sel_cond_;
  }
}

void storesvr_sel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_sel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_sel_descriptor_;
}

const storesvr_sel& storesvr_sel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_sel* storesvr_sel::default_instance_ = NULL;

storesvr_sel* storesvr_sel::New() const {
  return new storesvr_sel;
}

void storesvr_sel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_sel_cond()) {
      if (sel_cond_ != NULL) sel_cond_->::storesvr_sqldata::storesvr_wherecond::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_sel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sel_cond;
        break;
      }

      // optional .storesvr_sqldata.storesvr_wherecond sel_cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sel_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sel_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_sel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_wherecond sel_cond = 2;
  if (has_sel_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sel_cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_sel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_wherecond sel_cond = 2;
  if (has_sel_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sel_cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_sel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_wherecond sel_cond = 2;
    if (has_sel_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sel_cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_sel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_sel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_sel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_sel::MergeFrom(const storesvr_sel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_sel_cond()) {
      mutable_sel_cond()->::storesvr_sqldata::storesvr_wherecond::MergeFrom(from.sel_cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_sel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_sel::CopyFrom(const storesvr_sel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_sel::IsInitialized() const {

  return true;
}

void storesvr_sel::Swap(storesvr_sel* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(sel_cond_, other->sel_cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_sel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_sel_descriptor_;
  metadata.reflection = storesvr_sel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_sel_res::kBaseinfoFieldNumber;
const int storesvr_sel_res::kSelOpresFieldNumber;
const int storesvr_sel_res::kIsLastbatchFieldNumber;
const int storesvr_sel_res::kRowCountFieldNumber;
const int storesvr_sel_res::kSelRecordsFieldNumber;
#endif  // !_MSC_VER

storesvr_sel_res::storesvr_sel_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_sel_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  sel_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_sel_res::storesvr_sel_res(const storesvr_sel_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_sel_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  sel_opres_ = NULL;
  is_lastbatch_ = false;
  row_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_sel_res::~storesvr_sel_res() {
  SharedDtor();
}

void storesvr_sel_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete sel_opres_;
  }
}

void storesvr_sel_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_sel_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_sel_res_descriptor_;
}

const storesvr_sel_res& storesvr_sel_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_sel_res* storesvr_sel_res::default_instance_ = NULL;

storesvr_sel_res* storesvr_sel_res::New() const {
  return new storesvr_sel_res;
}

void storesvr_sel_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_sel_opres()) {
      if (sel_opres_ != NULL) sel_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
    is_lastbatch_ = false;
    row_count_ = 0;
  }
  sel_records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_sel_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sel_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sel_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sel_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_lastbatch;
        break;
      }

      // optional bool is_lastbatch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_lastbatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lastbatch_)));
          set_has_is_lastbatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_row_count;
        break;
      }

      // optional int32 row_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sel_records;
        break;
      }

      // repeated bytes sel_records = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sel_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_sel_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sel_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_sel_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
  if (has_sel_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sel_opres(), output);
  }

  // optional bool is_lastbatch = 3;
  if (has_is_lastbatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_lastbatch(), output);
  }

  // optional int32 row_count = 4;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->row_count(), output);
  }

  // repeated bytes sel_records = 5;
  for (int i = 0; i < this->sel_records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->sel_records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_sel_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
  if (has_sel_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sel_opres(), target);
  }

  // optional bool is_lastbatch = 3;
  if (has_is_lastbatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_lastbatch(), target);
  }

  // optional int32 row_count = 4;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->row_count(), target);
  }

  // repeated bytes sel_records = 5;
  for (int i = 0; i < this->sel_records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->sel_records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_sel_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
    if (has_sel_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sel_opres());
    }

    // optional bool is_lastbatch = 3;
    if (has_is_lastbatch()) {
      total_size += 1 + 1;
    }

    // optional int32 row_count = 4;
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_count());
    }

  }
  // repeated bytes sel_records = 5;
  total_size += 1 * this->sel_records_size();
  for (int i = 0; i < this->sel_records_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->sel_records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_sel_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_sel_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_sel_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_sel_res::MergeFrom(const storesvr_sel_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  sel_records_.MergeFrom(from.sel_records_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_sel_opres()) {
      mutable_sel_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.sel_opres());
    }
    if (from.has_is_lastbatch()) {
      set_is_lastbatch(from.is_lastbatch());
    }
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_sel_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_sel_res::CopyFrom(const storesvr_sel_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_sel_res::IsInitialized() const {

  return true;
}

void storesvr_sel_res::Swap(storesvr_sel_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(sel_opres_, other->sel_opres_);
    std::swap(is_lastbatch_, other->is_lastbatch_);
    std::swap(row_count_, other->row_count_);
    sel_records_.Swap(&other->sel_records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_sel_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_sel_res_descriptor_;
  metadata.reflection = storesvr_sel_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_selobj::kBaseinfoFieldNumber;
const int storesvr_selobj::kModKeyFieldNumber;
const int storesvr_selobj::kSelRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_selobj::storesvr_selobj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_selobj::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
}

storesvr_selobj::storesvr_selobj(const storesvr_selobj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_selobj::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_key_ = GOOGLE_ULONGLONG(0);
  sel_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_selobj::~storesvr_selobj() {
  SharedDtor();
}

void storesvr_selobj::SharedDtor() {
  if (sel_record_ != &::google::protobuf::internal::kEmptyString) {
    delete sel_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void storesvr_selobj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_selobj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_selobj_descriptor_;
}

const storesvr_selobj& storesvr_selobj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_selobj* storesvr_selobj::default_instance_ = NULL;

storesvr_selobj* storesvr_selobj::New() const {
  return new storesvr_selobj;
}

void storesvr_selobj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_sel_record()) {
      if (sel_record_ != &::google::protobuf::internal::kEmptyString) {
        sel_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_selobj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mod_key;
        break;
      }

      // optional uint64 mod_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sel_record;
        break;
      }

      // optional bytes sel_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sel_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sel_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_selobj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mod_key(), output);
  }

  // optional bytes sel_record = 3;
  if (has_sel_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sel_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_selobj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mod_key(), target);
  }

  // optional bytes sel_record = 3;
  if (has_sel_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sel_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_selobj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional uint64 mod_key = 2;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional bytes sel_record = 3;
    if (has_sel_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sel_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_selobj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_selobj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_selobj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_selobj::MergeFrom(const storesvr_selobj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_sel_record()) {
      set_sel_record(from.sel_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_selobj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_selobj::CopyFrom(const storesvr_selobj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_selobj::IsInitialized() const {

  return true;
}

void storesvr_selobj::Swap(storesvr_selobj* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_key_, other->mod_key_);
    std::swap(sel_record_, other->sel_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_selobj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_selobj_descriptor_;
  metadata.reflection = storesvr_selobj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_selobj_res::kBaseinfoFieldNumber;
const int storesvr_selobj_res::kSelOpresFieldNumber;
const int storesvr_selobj_res::kSelRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_selobj_res::storesvr_selobj_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_selobj_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  sel_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_selobj_res::storesvr_selobj_res(const storesvr_selobj_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_selobj_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  sel_opres_ = NULL;
  sel_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_selobj_res::~storesvr_selobj_res() {
  SharedDtor();
}

void storesvr_selobj_res::SharedDtor() {
  if (sel_record_ != &::google::protobuf::internal::kEmptyString) {
    delete sel_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete sel_opres_;
  }
}

void storesvr_selobj_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_selobj_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_selobj_res_descriptor_;
}

const storesvr_selobj_res& storesvr_selobj_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_selobj_res* storesvr_selobj_res::default_instance_ = NULL;

storesvr_selobj_res* storesvr_selobj_res::New() const {
  return new storesvr_selobj_res;
}

void storesvr_selobj_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_sel_opres()) {
      if (sel_opres_ != NULL) sel_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
    if (has_sel_record()) {
      if (sel_record_ != &::google::protobuf::internal::kEmptyString) {
        sel_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_selobj_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sel_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sel_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sel_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sel_record;
        break;
      }

      // optional bytes sel_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sel_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sel_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_selobj_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
  if (has_sel_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sel_opres(), output);
  }

  // optional bytes sel_record = 3;
  if (has_sel_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sel_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_selobj_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
  if (has_sel_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sel_opres(), target);
  }

  // optional bytes sel_record = 3;
  if (has_sel_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sel_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_selobj_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres sel_opres = 2;
    if (has_sel_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sel_opres());
    }

    // optional bytes sel_record = 3;
    if (has_sel_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sel_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_selobj_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_selobj_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_selobj_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_selobj_res::MergeFrom(const storesvr_selobj_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_sel_opres()) {
      mutable_sel_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.sel_opres());
    }
    if (from.has_sel_record()) {
      set_sel_record(from.sel_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_selobj_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_selobj_res::CopyFrom(const storesvr_selobj_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_selobj_res::IsInitialized() const {

  return true;
}

void storesvr_selobj_res::Swap(storesvr_selobj_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(sel_opres_, other->sel_opres_);
    std::swap(sel_record_, other->sel_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_selobj_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_selobj_res_descriptor_;
  metadata.reflection = storesvr_selobj_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_ins::kBaseinfoFieldNumber;
const int storesvr_ins::kModKeyFieldNumber;
const int storesvr_ins::kInsRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_ins::storesvr_ins()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_ins::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
}

storesvr_ins::storesvr_ins(const storesvr_ins& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_ins::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_key_ = GOOGLE_ULONGLONG(0);
  ins_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_ins::~storesvr_ins() {
  SharedDtor();
}

void storesvr_ins::SharedDtor() {
  if (ins_record_ != &::google::protobuf::internal::kEmptyString) {
    delete ins_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void storesvr_ins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_ins::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_ins_descriptor_;
}

const storesvr_ins& storesvr_ins::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_ins* storesvr_ins::default_instance_ = NULL;

storesvr_ins* storesvr_ins::New() const {
  return new storesvr_ins;
}

void storesvr_ins::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_ins_record()) {
      if (ins_record_ != &::google::protobuf::internal::kEmptyString) {
        ins_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_ins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mod_key;
        break;
      }

      // optional uint64 mod_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ins_record;
        break;
      }

      // optional bytes ins_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ins_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ins_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_ins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mod_key(), output);
  }

  // optional bytes ins_record = 3;
  if (has_ins_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ins_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_ins::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mod_key(), target);
  }

  // optional bytes ins_record = 3;
  if (has_ins_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ins_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_ins::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional uint64 mod_key = 2;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional bytes ins_record = 3;
    if (has_ins_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ins_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_ins::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_ins* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_ins*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_ins::MergeFrom(const storesvr_ins& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_ins_record()) {
      set_ins_record(from.ins_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_ins::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_ins::CopyFrom(const storesvr_ins& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_ins::IsInitialized() const {

  return true;
}

void storesvr_ins::Swap(storesvr_ins* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_key_, other->mod_key_);
    std::swap(ins_record_, other->ins_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_ins::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_ins_descriptor_;
  metadata.reflection = storesvr_ins_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_ins_res::kBaseinfoFieldNumber;
const int storesvr_ins_res::kInsOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_ins_res::storesvr_ins_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_ins_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  ins_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_ins_res::storesvr_ins_res(const storesvr_ins_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_ins_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  ins_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_ins_res::~storesvr_ins_res() {
  SharedDtor();
}

void storesvr_ins_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete ins_opres_;
  }
}

void storesvr_ins_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_ins_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_ins_res_descriptor_;
}

const storesvr_ins_res& storesvr_ins_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_ins_res* storesvr_ins_res::default_instance_ = NULL;

storesvr_ins_res* storesvr_ins_res::New() const {
  return new storesvr_ins_res;
}

void storesvr_ins_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_ins_opres()) {
      if (ins_opres_ != NULL) ins_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_ins_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ins_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres ins_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ins_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_ins_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres ins_opres = 2;
  if (has_ins_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ins_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_ins_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres ins_opres = 2;
  if (has_ins_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ins_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_ins_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres ins_opres = 2;
    if (has_ins_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ins_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_ins_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_ins_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_ins_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_ins_res::MergeFrom(const storesvr_ins_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_ins_opres()) {
      mutable_ins_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.ins_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_ins_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_ins_res::CopyFrom(const storesvr_ins_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_ins_res::IsInitialized() const {

  return true;
}

void storesvr_ins_res::Swap(storesvr_ins_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(ins_opres_, other->ins_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_ins_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_ins_res_descriptor_;
  metadata.reflection = storesvr_ins_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_del::kBaseinfoFieldNumber;
const int storesvr_del::kDelCondFieldNumber;
#endif  // !_MSC_VER

storesvr_del::storesvr_del()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_del::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  del_cond_ = const_cast< ::storesvr_sqldata::storesvr_wherecond*>(&::storesvr_sqldata::storesvr_wherecond::default_instance());
}

storesvr_del::storesvr_del(const storesvr_del& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_del::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  del_cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_del::~storesvr_del() {
  SharedDtor();
}

void storesvr_del::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete del_cond_;
  }
}

void storesvr_del::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_del::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_del_descriptor_;
}

const storesvr_del& storesvr_del::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_del* storesvr_del::default_instance_ = NULL;

storesvr_del* storesvr_del::New() const {
  return new storesvr_del;
}

void storesvr_del::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_del_cond()) {
      if (del_cond_ != NULL) del_cond_->::storesvr_sqldata::storesvr_wherecond::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_del::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_del_cond;
        break;
      }

      // optional .storesvr_sqldata.storesvr_wherecond del_cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_del::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_wherecond del_cond = 2;
  if (has_del_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->del_cond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_del::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_wherecond del_cond = 2;
  if (has_del_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->del_cond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_del::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_wherecond del_cond = 2;
    if (has_del_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_cond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_del::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_del* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_del*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_del::MergeFrom(const storesvr_del& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_del_cond()) {
      mutable_del_cond()->::storesvr_sqldata::storesvr_wherecond::MergeFrom(from.del_cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_del::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_del::CopyFrom(const storesvr_del& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_del::IsInitialized() const {

  return true;
}

void storesvr_del::Swap(storesvr_del* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(del_cond_, other->del_cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_del::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_del_descriptor_;
  metadata.reflection = storesvr_del_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_del_res::kBaseinfoFieldNumber;
const int storesvr_del_res::kDelOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_del_res::storesvr_del_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_del_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  del_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_del_res::storesvr_del_res(const storesvr_del_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_del_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  del_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_del_res::~storesvr_del_res() {
  SharedDtor();
}

void storesvr_del_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete del_opres_;
  }
}

void storesvr_del_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_del_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_del_res_descriptor_;
}

const storesvr_del_res& storesvr_del_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_del_res* storesvr_del_res::default_instance_ = NULL;

storesvr_del_res* storesvr_del_res::New() const {
  return new storesvr_del_res;
}

void storesvr_del_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_del_opres()) {
      if (del_opres_ != NULL) del_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_del_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_del_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_del_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
  if (has_del_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->del_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_del_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
  if (has_del_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->del_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_del_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
    if (has_del_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_del_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_del_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_del_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_del_res::MergeFrom(const storesvr_del_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_del_opres()) {
      mutable_del_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.del_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_del_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_del_res::CopyFrom(const storesvr_del_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_del_res::IsInitialized() const {

  return true;
}

void storesvr_del_res::Swap(storesvr_del_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(del_opres_, other->del_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_del_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_del_res_descriptor_;
  metadata.reflection = storesvr_del_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_delobj::kBaseinfoFieldNumber;
const int storesvr_delobj::kModKeyFieldNumber;
const int storesvr_delobj::kDelRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_delobj::storesvr_delobj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_delobj::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
}

storesvr_delobj::storesvr_delobj(const storesvr_delobj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_delobj::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_key_ = GOOGLE_ULONGLONG(0);
  del_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_delobj::~storesvr_delobj() {
  SharedDtor();
}

void storesvr_delobj::SharedDtor() {
  if (del_record_ != &::google::protobuf::internal::kEmptyString) {
    delete del_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void storesvr_delobj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_delobj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_delobj_descriptor_;
}

const storesvr_delobj& storesvr_delobj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_delobj* storesvr_delobj::default_instance_ = NULL;

storesvr_delobj* storesvr_delobj::New() const {
  return new storesvr_delobj;
}

void storesvr_delobj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_del_record()) {
      if (del_record_ != &::google::protobuf::internal::kEmptyString) {
        del_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_delobj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mod_key;
        break;
      }

      // optional uint64 mod_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_del_record;
        break;
      }

      // optional bytes del_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_del_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_delobj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mod_key(), output);
  }

  // optional bytes del_record = 3;
  if (has_del_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->del_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_delobj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mod_key(), target);
  }

  // optional bytes del_record = 3;
  if (has_del_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->del_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_delobj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional uint64 mod_key = 2;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional bytes del_record = 3;
    if (has_del_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->del_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_delobj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_delobj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_delobj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_delobj::MergeFrom(const storesvr_delobj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_del_record()) {
      set_del_record(from.del_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_delobj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_delobj::CopyFrom(const storesvr_delobj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_delobj::IsInitialized() const {

  return true;
}

void storesvr_delobj::Swap(storesvr_delobj* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_key_, other->mod_key_);
    std::swap(del_record_, other->del_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_delobj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_delobj_descriptor_;
  metadata.reflection = storesvr_delobj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_delobj_res::kBaseinfoFieldNumber;
const int storesvr_delobj_res::kDelOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_delobj_res::storesvr_delobj_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_delobj_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  del_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_delobj_res::storesvr_delobj_res(const storesvr_delobj_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_delobj_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  del_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_delobj_res::~storesvr_delobj_res() {
  SharedDtor();
}

void storesvr_delobj_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete del_opres_;
  }
}

void storesvr_delobj_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_delobj_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_delobj_res_descriptor_;
}

const storesvr_delobj_res& storesvr_delobj_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_delobj_res* storesvr_delobj_res::default_instance_ = NULL;

storesvr_delobj_res* storesvr_delobj_res::New() const {
  return new storesvr_delobj_res;
}

void storesvr_delobj_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_del_opres()) {
      if (del_opres_ != NULL) del_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_delobj_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_del_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_delobj_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
  if (has_del_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->del_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_delobj_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
  if (has_del_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->del_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_delobj_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres del_opres = 2;
    if (has_del_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_delobj_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_delobj_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_delobj_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_delobj_res::MergeFrom(const storesvr_delobj_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_del_opres()) {
      mutable_del_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.del_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_delobj_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_delobj_res::CopyFrom(const storesvr_delobj_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_delobj_res::IsInitialized() const {

  return true;
}

void storesvr_delobj_res::Swap(storesvr_delobj_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(del_opres_, other->del_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_delobj_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_delobj_res_descriptor_;
  metadata.reflection = storesvr_delobj_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_mod::kBaseinfoFieldNumber;
const int storesvr_mod::kModCondFieldNumber;
const int storesvr_mod::kModRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_mod::storesvr_mod()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_mod::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  mod_cond_ = const_cast< ::storesvr_sqldata::storesvr_wherecond*>(&::storesvr_sqldata::storesvr_wherecond::default_instance());
}

storesvr_mod::storesvr_mod(const storesvr_mod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_mod::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_cond_ = NULL;
  mod_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_mod::~storesvr_mod() {
  SharedDtor();
}

void storesvr_mod::SharedDtor() {
  if (mod_record_ != &::google::protobuf::internal::kEmptyString) {
    delete mod_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete mod_cond_;
  }
}

void storesvr_mod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_mod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_mod_descriptor_;
}

const storesvr_mod& storesvr_mod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_mod* storesvr_mod::default_instance_ = NULL;

storesvr_mod* storesvr_mod::New() const {
  return new storesvr_mod;
}

void storesvr_mod::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_mod_cond()) {
      if (mod_cond_ != NULL) mod_cond_->::storesvr_sqldata::storesvr_wherecond::Clear();
    }
    if (has_mod_record()) {
      if (mod_record_ != &::google::protobuf::internal::kEmptyString) {
        mod_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_mod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mod_cond;
        break;
      }

      // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mod_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mod_record;
        break;
      }

      // optional bytes mod_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mod_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_mod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
  if (has_mod_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mod_cond(), output);
  }

  // optional bytes mod_record = 3;
  if (has_mod_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mod_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_mod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
  if (has_mod_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mod_cond(), target);
  }

  // optional bytes mod_record = 3;
  if (has_mod_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mod_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_mod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
    if (has_mod_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mod_cond());
    }

    // optional bytes mod_record = 3;
    if (has_mod_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mod_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_mod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_mod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_mod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_mod::MergeFrom(const storesvr_mod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_cond()) {
      mutable_mod_cond()->::storesvr_sqldata::storesvr_wherecond::MergeFrom(from.mod_cond());
    }
    if (from.has_mod_record()) {
      set_mod_record(from.mod_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_mod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_mod::CopyFrom(const storesvr_mod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_mod::IsInitialized() const {

  return true;
}

void storesvr_mod::Swap(storesvr_mod* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_cond_, other->mod_cond_);
    std::swap(mod_record_, other->mod_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_mod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_mod_descriptor_;
  metadata.reflection = storesvr_mod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_mod_res::kBaseinfoFieldNumber;
const int storesvr_mod_res::kModOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_mod_res::storesvr_mod_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_mod_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  mod_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_mod_res::storesvr_mod_res(const storesvr_mod_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_mod_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_mod_res::~storesvr_mod_res() {
  SharedDtor();
}

void storesvr_mod_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete mod_opres_;
  }
}

void storesvr_mod_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_mod_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_mod_res_descriptor_;
}

const storesvr_mod_res& storesvr_mod_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_mod_res* storesvr_mod_res::default_instance_ = NULL;

storesvr_mod_res* storesvr_mod_res::New() const {
  return new storesvr_mod_res;
}

void storesvr_mod_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_mod_opres()) {
      if (mod_opres_ != NULL) mod_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_mod_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mod_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mod_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_mod_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
  if (has_mod_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mod_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_mod_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
  if (has_mod_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mod_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_mod_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
    if (has_mod_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mod_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_mod_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_mod_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_mod_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_mod_res::MergeFrom(const storesvr_mod_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_opres()) {
      mutable_mod_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.mod_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_mod_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_mod_res::CopyFrom(const storesvr_mod_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_mod_res::IsInitialized() const {

  return true;
}

void storesvr_mod_res::Swap(storesvr_mod_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_opres_, other->mod_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_mod_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_mod_res_descriptor_;
  metadata.reflection = storesvr_mod_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_modobj::kBaseinfoFieldNumber;
const int storesvr_modobj::kModKeyFieldNumber;
const int storesvr_modobj::kModRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_modobj::storesvr_modobj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_modobj::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
}

storesvr_modobj::storesvr_modobj(const storesvr_modobj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_modobj::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_key_ = GOOGLE_ULONGLONG(0);
  mod_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_modobj::~storesvr_modobj() {
  SharedDtor();
}

void storesvr_modobj::SharedDtor() {
  if (mod_record_ != &::google::protobuf::internal::kEmptyString) {
    delete mod_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void storesvr_modobj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_modobj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_modobj_descriptor_;
}

const storesvr_modobj& storesvr_modobj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_modobj* storesvr_modobj::default_instance_ = NULL;

storesvr_modobj* storesvr_modobj::New() const {
  return new storesvr_modobj;
}

void storesvr_modobj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_mod_record()) {
      if (mod_record_ != &::google::protobuf::internal::kEmptyString) {
        mod_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_modobj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mod_key;
        break;
      }

      // optional uint64 mod_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mod_record;
        break;
      }

      // optional bytes mod_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mod_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_modobj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mod_key(), output);
  }

  // optional bytes mod_record = 3;
  if (has_mod_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mod_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_modobj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mod_key(), target);
  }

  // optional bytes mod_record = 3;
  if (has_mod_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mod_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_modobj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional uint64 mod_key = 2;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional bytes mod_record = 3;
    if (has_mod_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mod_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_modobj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_modobj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_modobj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_modobj::MergeFrom(const storesvr_modobj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_mod_record()) {
      set_mod_record(from.mod_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_modobj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_modobj::CopyFrom(const storesvr_modobj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_modobj::IsInitialized() const {

  return true;
}

void storesvr_modobj::Swap(storesvr_modobj* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_key_, other->mod_key_);
    std::swap(mod_record_, other->mod_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_modobj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_modobj_descriptor_;
  metadata.reflection = storesvr_modobj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_modobj_res::kBaseinfoFieldNumber;
const int storesvr_modobj_res::kModOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_modobj_res::storesvr_modobj_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_modobj_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  mod_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_modobj_res::storesvr_modobj_res(const storesvr_modobj_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_modobj_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_modobj_res::~storesvr_modobj_res() {
  SharedDtor();
}

void storesvr_modobj_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete mod_opres_;
  }
}

void storesvr_modobj_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_modobj_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_modobj_res_descriptor_;
}

const storesvr_modobj_res& storesvr_modobj_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_modobj_res* storesvr_modobj_res::default_instance_ = NULL;

storesvr_modobj_res* storesvr_modobj_res::New() const {
  return new storesvr_modobj_res;
}

void storesvr_modobj_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_mod_opres()) {
      if (mod_opres_ != NULL) mod_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_modobj_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mod_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mod_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_modobj_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
  if (has_mod_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mod_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_modobj_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
  if (has_mod_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mod_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_modobj_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
    if (has_mod_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mod_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_modobj_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_modobj_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_modobj_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_modobj_res::MergeFrom(const storesvr_modobj_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_opres()) {
      mutable_mod_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.mod_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_modobj_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_modobj_res::CopyFrom(const storesvr_modobj_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_modobj_res::IsInitialized() const {

  return true;
}

void storesvr_modobj_res::Swap(storesvr_modobj_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_opres_, other->mod_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_modobj_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_modobj_res_descriptor_;
  metadata.reflection = storesvr_modobj_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_modins::kBaseinfoFieldNumber;
const int storesvr_modins::kModCondFieldNumber;
const int storesvr_modins::kModRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_modins::storesvr_modins()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_modins::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  mod_cond_ = const_cast< ::storesvr_sqldata::storesvr_wherecond*>(&::storesvr_sqldata::storesvr_wherecond::default_instance());
}

storesvr_modins::storesvr_modins(const storesvr_modins& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_modins::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_cond_ = NULL;
  mod_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_modins::~storesvr_modins() {
  SharedDtor();
}

void storesvr_modins::SharedDtor() {
  if (mod_record_ != &::google::protobuf::internal::kEmptyString) {
    delete mod_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete mod_cond_;
  }
}

void storesvr_modins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_modins::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_modins_descriptor_;
}

const storesvr_modins& storesvr_modins::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_modins* storesvr_modins::default_instance_ = NULL;

storesvr_modins* storesvr_modins::New() const {
  return new storesvr_modins;
}

void storesvr_modins::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_mod_cond()) {
      if (mod_cond_ != NULL) mod_cond_->::storesvr_sqldata::storesvr_wherecond::Clear();
    }
    if (has_mod_record()) {
      if (mod_record_ != &::google::protobuf::internal::kEmptyString) {
        mod_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_modins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mod_cond;
        break;
      }

      // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mod_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mod_record;
        break;
      }

      // optional bytes mod_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mod_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_modins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
  if (has_mod_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mod_cond(), output);
  }

  // optional bytes mod_record = 3;
  if (has_mod_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mod_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_modins::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
  if (has_mod_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mod_cond(), target);
  }

  // optional bytes mod_record = 3;
  if (has_mod_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mod_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_modins::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_wherecond mod_cond = 2;
    if (has_mod_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mod_cond());
    }

    // optional bytes mod_record = 3;
    if (has_mod_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mod_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_modins::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_modins* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_modins*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_modins::MergeFrom(const storesvr_modins& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_cond()) {
      mutable_mod_cond()->::storesvr_sqldata::storesvr_wherecond::MergeFrom(from.mod_cond());
    }
    if (from.has_mod_record()) {
      set_mod_record(from.mod_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_modins::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_modins::CopyFrom(const storesvr_modins& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_modins::IsInitialized() const {

  return true;
}

void storesvr_modins::Swap(storesvr_modins* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_cond_, other->mod_cond_);
    std::swap(mod_record_, other->mod_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_modins::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_modins_descriptor_;
  metadata.reflection = storesvr_modins_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_modins_res::kBaseinfoFieldNumber;
const int storesvr_modins_res::kModOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_modins_res::storesvr_modins_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_modins_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  mod_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_modins_res::storesvr_modins_res(const storesvr_modins_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_modins_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_modins_res::~storesvr_modins_res() {
  SharedDtor();
}

void storesvr_modins_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete mod_opres_;
  }
}

void storesvr_modins_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_modins_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_modins_res_descriptor_;
}

const storesvr_modins_res& storesvr_modins_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_modins_res* storesvr_modins_res::default_instance_ = NULL;

storesvr_modins_res* storesvr_modins_res::New() const {
  return new storesvr_modins_res;
}

void storesvr_modins_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_mod_opres()) {
      if (mod_opres_ != NULL) mod_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_modins_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mod_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mod_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mod_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_modins_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
  if (has_mod_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mod_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_modins_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
  if (has_mod_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mod_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_modins_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres mod_opres = 2;
    if (has_mod_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mod_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_modins_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_modins_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_modins_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_modins_res::MergeFrom(const storesvr_modins_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_opres()) {
      mutable_mod_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.mod_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_modins_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_modins_res::CopyFrom(const storesvr_modins_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_modins_res::IsInitialized() const {

  return true;
}

void storesvr_modins_res::Swap(storesvr_modins_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_opres_, other->mod_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_modins_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_modins_res_descriptor_;
  metadata.reflection = storesvr_modins_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_modinsobj::kBaseinfoFieldNumber;
const int storesvr_modinsobj::kModKeyFieldNumber;
const int storesvr_modinsobj::kModinsRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_modinsobj::storesvr_modinsobj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_modinsobj::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
}

storesvr_modinsobj::storesvr_modinsobj(const storesvr_modinsobj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_modinsobj::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_key_ = GOOGLE_ULONGLONG(0);
  modins_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_modinsobj::~storesvr_modinsobj() {
  SharedDtor();
}

void storesvr_modinsobj::SharedDtor() {
  if (modins_record_ != &::google::protobuf::internal::kEmptyString) {
    delete modins_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void storesvr_modinsobj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_modinsobj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_modinsobj_descriptor_;
}

const storesvr_modinsobj& storesvr_modinsobj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_modinsobj* storesvr_modinsobj::default_instance_ = NULL;

storesvr_modinsobj* storesvr_modinsobj::New() const {
  return new storesvr_modinsobj;
}

void storesvr_modinsobj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_modins_record()) {
      if (modins_record_ != &::google::protobuf::internal::kEmptyString) {
        modins_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_modinsobj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mod_key;
        break;
      }

      // optional uint64 mod_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_modins_record;
        break;
      }

      // optional bytes modins_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modins_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modins_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_modinsobj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mod_key(), output);
  }

  // optional bytes modins_record = 3;
  if (has_modins_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->modins_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_modinsobj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mod_key(), target);
  }

  // optional bytes modins_record = 3;
  if (has_modins_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->modins_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_modinsobj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional uint64 mod_key = 2;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional bytes modins_record = 3;
    if (has_modins_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->modins_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_modinsobj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_modinsobj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_modinsobj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_modinsobj::MergeFrom(const storesvr_modinsobj& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_modins_record()) {
      set_modins_record(from.modins_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_modinsobj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_modinsobj::CopyFrom(const storesvr_modinsobj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_modinsobj::IsInitialized() const {

  return true;
}

void storesvr_modinsobj::Swap(storesvr_modinsobj* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_key_, other->mod_key_);
    std::swap(modins_record_, other->modins_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_modinsobj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_modinsobj_descriptor_;
  metadata.reflection = storesvr_modinsobj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_modinsobj_res::kBaseinfoFieldNumber;
const int storesvr_modinsobj_res::kModinsOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_modinsobj_res::storesvr_modinsobj_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_modinsobj_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  modins_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_modinsobj_res::storesvr_modinsobj_res(const storesvr_modinsobj_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_modinsobj_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  modins_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_modinsobj_res::~storesvr_modinsobj_res() {
  SharedDtor();
}

void storesvr_modinsobj_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete modins_opres_;
  }
}

void storesvr_modinsobj_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_modinsobj_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_modinsobj_res_descriptor_;
}

const storesvr_modinsobj_res& storesvr_modinsobj_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_modinsobj_res* storesvr_modinsobj_res::default_instance_ = NULL;

storesvr_modinsobj_res* storesvr_modinsobj_res::New() const {
  return new storesvr_modinsobj_res;
}

void storesvr_modinsobj_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_modins_opres()) {
      if (modins_opres_ != NULL) modins_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_modinsobj_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_modins_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres modins_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modins_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modins_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_modinsobj_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres modins_opres = 2;
  if (has_modins_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->modins_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_modinsobj_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres modins_opres = 2;
  if (has_modins_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->modins_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_modinsobj_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres modins_opres = 2;
    if (has_modins_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modins_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_modinsobj_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_modinsobj_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_modinsobj_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_modinsobj_res::MergeFrom(const storesvr_modinsobj_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_modins_opres()) {
      mutable_modins_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.modins_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_modinsobj_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_modinsobj_res::CopyFrom(const storesvr_modinsobj_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_modinsobj_res::IsInitialized() const {

  return true;
}

void storesvr_modinsobj_res::Swap(storesvr_modinsobj_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(modins_opres_, other->modins_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_modinsobj_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_modinsobj_res_descriptor_;
  metadata.reflection = storesvr_modinsobj_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_execute::kBaseinfoFieldNumber;
const int storesvr_execute::kModKeyFieldNumber;
const int storesvr_execute::kExecuteRecordFieldNumber;
#endif  // !_MSC_VER

storesvr_execute::storesvr_execute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_execute::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
}

storesvr_execute::storesvr_execute(const storesvr_execute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_execute::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  mod_key_ = GOOGLE_ULONGLONG(0);
  execute_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_execute::~storesvr_execute() {
  SharedDtor();
}

void storesvr_execute::SharedDtor() {
  if (execute_record_ != &::google::protobuf::internal::kEmptyString) {
    delete execute_record_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void storesvr_execute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_execute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_execute_descriptor_;
}

const storesvr_execute& storesvr_execute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_execute* storesvr_execute::default_instance_ = NULL;

storesvr_execute* storesvr_execute::New() const {
  return new storesvr_execute;
}

void storesvr_execute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    mod_key_ = GOOGLE_ULONGLONG(0);
    if (has_execute_record()) {
      if (execute_record_ != &::google::protobuf::internal::kEmptyString) {
        execute_record_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_execute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mod_key;
        break;
      }

      // optional uint64 mod_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mod_key_)));
          set_has_mod_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_execute_record;
        break;
      }

      // optional bytes execute_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execute_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_execute_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_execute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mod_key(), output);
  }

  // optional bytes execute_record = 3;
  if (has_execute_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->execute_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_execute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional uint64 mod_key = 2;
  if (has_mod_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mod_key(), target);
  }

  // optional bytes execute_record = 3;
  if (has_execute_record()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->execute_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_execute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional uint64 mod_key = 2;
    if (has_mod_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mod_key());
    }

    // optional bytes execute_record = 3;
    if (has_execute_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->execute_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_execute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_execute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_execute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_execute::MergeFrom(const storesvr_execute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_mod_key()) {
      set_mod_key(from.mod_key());
    }
    if (from.has_execute_record()) {
      set_execute_record(from.execute_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_execute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_execute::CopyFrom(const storesvr_execute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_execute::IsInitialized() const {

  return true;
}

void storesvr_execute::Swap(storesvr_execute* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(mod_key_, other->mod_key_);
    std::swap(execute_record_, other->execute_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_execute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_execute_descriptor_;
  metadata.reflection = storesvr_execute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int storesvr_execute_res::kBaseinfoFieldNumber;
const int storesvr_execute_res::kExeOpresFieldNumber;
#endif  // !_MSC_VER

storesvr_execute_res::storesvr_execute_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void storesvr_execute_res::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::storesvr_sqldata::storesvr_baseinfo*>(&::storesvr_sqldata::storesvr_baseinfo::default_instance());
  exe_opres_ = const_cast< ::storesvr_sqldata::storesvr_opres*>(&::storesvr_sqldata::storesvr_opres::default_instance());
}

storesvr_execute_res::storesvr_execute_res(const storesvr_execute_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void storesvr_execute_res::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  exe_opres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

storesvr_execute_res::~storesvr_execute_res() {
  SharedDtor();
}

void storesvr_execute_res::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete exe_opres_;
  }
}

void storesvr_execute_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* storesvr_execute_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return storesvr_execute_res_descriptor_;
}

const storesvr_execute_res& storesvr_execute_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storesvr_5fsqldata_2eproto();
  return *default_instance_;
}

storesvr_execute_res* storesvr_execute_res::default_instance_ = NULL;

storesvr_execute_res* storesvr_execute_res::New() const {
  return new storesvr_execute_res;
}

void storesvr_execute_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::storesvr_sqldata::storesvr_baseinfo::Clear();
    }
    if (has_exe_opres()) {
      if (exe_opres_ != NULL) exe_opres_->::storesvr_sqldata::storesvr_opres::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool storesvr_execute_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exe_opres;
        break;
      }

      // optional .storesvr_sqldata.storesvr_opres exe_opres = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exe_opres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exe_opres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void storesvr_execute_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // optional .storesvr_sqldata.storesvr_opres exe_opres = 2;
  if (has_exe_opres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exe_opres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* storesvr_execute_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // optional .storesvr_sqldata.storesvr_opres exe_opres = 2;
  if (has_exe_opres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exe_opres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int storesvr_execute_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .storesvr_sqldata.storesvr_baseinfo baseinfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .storesvr_sqldata.storesvr_opres exe_opres = 2;
    if (has_exe_opres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exe_opres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void storesvr_execute_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const storesvr_execute_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const storesvr_execute_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void storesvr_execute_res::MergeFrom(const storesvr_execute_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::storesvr_sqldata::storesvr_baseinfo::MergeFrom(from.baseinfo());
    }
    if (from.has_exe_opres()) {
      mutable_exe_opres()->::storesvr_sqldata::storesvr_opres::MergeFrom(from.exe_opres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void storesvr_execute_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void storesvr_execute_res::CopyFrom(const storesvr_execute_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool storesvr_execute_res::IsInitialized() const {

  return true;
}

void storesvr_execute_res::Swap(storesvr_execute_res* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(exe_opres_, other->exe_opres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata storesvr_execute_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = storesvr_execute_res_descriptor_;
  metadata.reflection = storesvr_execute_res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace storesvr_sqldata

// @@protoc_insertion_point(global_scope)
