// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_kernel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_kernel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_DispInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_DispInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_StoreInfo_CB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_StoreInfo_CB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_StoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_StoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SvrPkg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SvrPkg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoReportList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoReportList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZkServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZkServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynLibFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynLibFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynLibFileInfoArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynLibFileInfoArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_KillAllServerNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_KillAllServerNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_KillAllServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_KillAllServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STSBroadPlayerMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STSBroadPlayerMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STWebMsgRspNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STWebMsgRspNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorLogHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorLogHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* NFEventNoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NFEventNoneData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_Kernel_CMD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NFROUTER_ERRCODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STORESVR_CS_COMMAND_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STORESVR_ERRCODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketDispType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TableID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EServerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_Kernel_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NFEventSrcType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NFEventIdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fkernel_2eproto() {
  protobuf_AddDesc_proto_5fkernel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_kernel.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_DispInfo_descriptor_ = file->message_type(0);
  static const int Proto_DispInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, req_trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, rsp_trans_id_),
  };
  Proto_DispInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_DispInfo_descriptor_,
      Proto_DispInfo::default_instance_,
      Proto_DispInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_DispInfo));
  Proto_StoreInfo_CB_descriptor_ = file->message_type(1);
  static const int Proto_StoreInfo_CB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, seq_),
  };
  Proto_StoreInfo_CB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_StoreInfo_CB_descriptor_,
      Proto_StoreInfo_CB::default_instance_,
      Proto_StoreInfo_CB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_StoreInfo_CB));
  Proto_StoreInfo_descriptor_ = file->message_type(2);
  static const int Proto_StoreInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, cb_data_),
  };
  Proto_StoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_StoreInfo_descriptor_,
      Proto_StoreInfo::default_instance_,
      Proto_StoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_StoreInfo));
  Proto_SvrPkg_descriptor_ = file->message_type(3);
  static const int Proto_SvrPkg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, disp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, store_info_),
  };
  Proto_SvrPkg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SvrPkg_descriptor_,
      Proto_SvrPkg::default_instance_,
      Proto_SvrPkg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SvrPkg));
  ServerInfoReport_descriptor_ = file->message_type(4);
  static const int ServerInfoReport_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, link_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, bus_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_http_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, external_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, external_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, route_svr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_max_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_cur_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, total_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, free_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, used_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_cwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, last_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, contract_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, db_name_list_),
  };
  ServerInfoReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoReport_descriptor_,
      ServerInfoReport::default_instance_,
      ServerInfoReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoReport));
  ServerInfoReportList_descriptor_ = file->message_type(5);
  static const int ServerInfoReportList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, server_list_),
  };
  ServerInfoReportList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoReportList_descriptor_,
      ServerInfoReportList::default_instance_,
      ServerInfoReportList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoReportList));
  ZkServerInfo_descriptor_ = file->message_type(6);
  static const int ZkServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, bus_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, tcp_url_),
  };
  ZkServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZkServerInfo_descriptor_,
      ZkServerInfo::default_instance_,
      ZkServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZkServerInfo));
  DynLibFileInfo_descriptor_ = file->message_type(7);
  static const int DynLibFileInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, file_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, file_size_),
  };
  DynLibFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynLibFileInfo_descriptor_,
      DynLibFileInfo::default_instance_,
      DynLibFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynLibFileInfo));
  DynLibFileInfoArray_descriptor_ = file->message_type(8);
  static const int DynLibFileInfoArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfoArray, file_list_),
  };
  DynLibFileInfoArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynLibFileInfoArray_descriptor_,
      DynLibFileInfoArray::default_instance_,
      DynLibFileInfoArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfoArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfoArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynLibFileInfoArray));
  Proto_KillAllServerNtf_descriptor_ = file->message_type(9);
  static const int Proto_KillAllServerNtf_offsets_[1] = {
  };
  Proto_KillAllServerNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_KillAllServerNtf_descriptor_,
      Proto_KillAllServerNtf::default_instance_,
      Proto_KillAllServerNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_KillAllServerNtf));
  Proto_KillAllServerRsp_descriptor_ = file->message_type(10);
  static const int Proto_KillAllServerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerRsp, result_),
  };
  Proto_KillAllServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_KillAllServerRsp_descriptor_,
      Proto_KillAllServerRsp::default_instance_,
      Proto_KillAllServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_KillAllServerRsp));
  Proto_STSBroadPlayerMsgNotify_descriptor_ = file->message_type(11);
  static const int Proto_STSBroadPlayerMsgNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, msg_data_),
  };
  Proto_STSBroadPlayerMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STSBroadPlayerMsgNotify_descriptor_,
      Proto_STSBroadPlayerMsgNotify::default_instance_,
      Proto_STSBroadPlayerMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STSBroadPlayerMsgNotify));
  Proto_STWebMsgRspNotify_descriptor_ = file->message_type(12);
  static const int Proto_STWebMsgRspNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, err_msg_),
  };
  Proto_STWebMsgRspNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STWebMsgRspNotify_descriptor_,
      Proto_STWebMsgRspNotify::default_instance_,
      Proto_STWebMsgRspNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STWebMsgRspNotify));
  BehaviorLogHeader_descriptor_ = file->message_type(13);
  static const int BehaviorLogHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, user_name_),
  };
  BehaviorLogHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorLogHeader_descriptor_,
      BehaviorLogHeader::default_instance_,
      BehaviorLogHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorLogHeader));
  NFEventNoneData_descriptor_ = file->message_type(14);
  static const int NFEventNoneData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param5_),
  };
  NFEventNoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NFEventNoneData_descriptor_,
      NFEventNoneData::default_instance_,
      NFEventNoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NFEventNoneData));
  Proto_Kernel_CMD_descriptor_ = file->enum_type(0);
  NFROUTER_ERRCODE_descriptor_ = file->enum_type(1);
  STORESVR_CS_COMMAND_descriptor_ = file->enum_type(2);
  STORESVR_ERRCODE_descriptor_ = file->enum_type(3);
  PacketDispType_descriptor_ = file->enum_type(4);
  TableID_descriptor_ = file->enum_type(5);
  ServerType_descriptor_ = file->enum_type(6);
  EServerState_descriptor_ = file->enum_type(7);
  Proto_Kernel_ErrorCode_descriptor_ = file->enum_type(8);
  NFEventSrcType_descriptor_ = file->enum_type(9);
  NFEventIdType_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fkernel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_DispInfo_descriptor_, &Proto_DispInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_StoreInfo_CB_descriptor_, &Proto_StoreInfo_CB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_StoreInfo_descriptor_, &Proto_StoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SvrPkg_descriptor_, &Proto_SvrPkg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoReport_descriptor_, &ServerInfoReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoReportList_descriptor_, &ServerInfoReportList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZkServerInfo_descriptor_, &ZkServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynLibFileInfo_descriptor_, &DynLibFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynLibFileInfoArray_descriptor_, &DynLibFileInfoArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_KillAllServerNtf_descriptor_, &Proto_KillAllServerNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_KillAllServerRsp_descriptor_, &Proto_KillAllServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STSBroadPlayerMsgNotify_descriptor_, &Proto_STSBroadPlayerMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STWebMsgRspNotify_descriptor_, &Proto_STWebMsgRspNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorLogHeader_descriptor_, &BehaviorLogHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NFEventNoneData_descriptor_, &NFEventNoneData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fkernel_2eproto() {
  delete Proto_DispInfo::default_instance_;
  delete Proto_DispInfo_reflection_;
  delete Proto_StoreInfo_CB::default_instance_;
  delete Proto_StoreInfo_CB_reflection_;
  delete Proto_StoreInfo::default_instance_;
  delete Proto_StoreInfo_reflection_;
  delete Proto_SvrPkg::default_instance_;
  delete Proto_SvrPkg_reflection_;
  delete ServerInfoReport::default_instance_;
  delete ServerInfoReport_reflection_;
  delete ServerInfoReportList::default_instance_;
  delete ServerInfoReportList_reflection_;
  delete ZkServerInfo::default_instance_;
  delete ZkServerInfo_reflection_;
  delete DynLibFileInfo::default_instance_;
  delete DynLibFileInfo_reflection_;
  delete DynLibFileInfoArray::default_instance_;
  delete DynLibFileInfoArray_reflection_;
  delete Proto_KillAllServerNtf::default_instance_;
  delete Proto_KillAllServerNtf_reflection_;
  delete Proto_KillAllServerRsp::default_instance_;
  delete Proto_KillAllServerRsp_reflection_;
  delete Proto_STSBroadPlayerMsgNotify::default_instance_;
  delete Proto_STSBroadPlayerMsgNotify_reflection_;
  delete Proto_STWebMsgRspNotify::default_instance_;
  delete Proto_STWebMsgRspNotify_reflection_;
  delete BehaviorLogHeader::default_instance_;
  delete BehaviorLogHeader_reflection_;
  delete NFEventNoneData::default_instance_;
  delete NFEventNoneData_reflection_;
}

void protobuf_AddDesc_proto_5fkernel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto_kernel.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"M\n\016Proto_DispInfo\022\017\n\007user_"
    "id\030\001 \001(\004\022\024\n\014req_trans_id\030\002 \001(\005\022\024\n\014rsp_tr"
    "ans_id\030\003 \001(\005\"z\n\022Proto_StoreInfo_CB\022&\n\004ty"
    "pe\030\001 \001(\0162\030.proto_ff.PacketDispType\022\n\n\002id"
    "\030\002 \001(\004\022#\n\010table_id\030\003 \001(\0162\021.proto_ff.Tabl"
    "eID\022\013\n\003seq\030\004 \001(\r\"\232\001\n\017Proto_StoreInfo\022*\n\003"
    "cmd\030\001 \001(\0162\035.proto_ff.STORESVR_CS_COMMAND"
    "\022,\n\010err_code\030\002 \001(\0162\032.proto_ff.STORESVR_E"
    "RRCODE\022-\n\007cb_data\030\003 \001(\0132\034.proto_ff.Proto"
    "_StoreInfo_CB\"\214\001\n\014Proto_SvrPkg\022\016\n\006msg_id"
    "\030\001 \001(\005\022\020\n\010msg_data\030\002 \001(\014\022+\n\tdisp_info\030\003 "
    "\001(\0132\030.proto_ff.Proto_DispInfo\022-\n\nstore_i"
    "nfo\030\004 \001(\0132\031.proto_ff.Proto_StoreInfo\"\222\005\n"
    "\020ServerInfoReport\022\016\n\006bus_id\030\001 \001(\r\022\020\n\010bus"
    "_name\030\002 \001(\t\022\023\n\013server_type\030\003 \001(\r\022\023\n\013serv"
    "er_name\030\004 \001(\t\022\013\n\003url\030\005 \001(\t\022\021\n\tlink_mode\030"
    "\006 \001(\t\022\022\n\nbus_length\030\007 \001(\r\022\021\n\tserver_ip\030\t"
    " \001(\t\022\023\n\013server_port\030\n \001(\r\022\030\n\020server_http"
    "_port\030\013 \001(\r\022\032\n\022external_server_ip\030\014 \001(\t\022"
    "\034\n\024external_server_port\030\r \001(\r\022\021\n\troute_s"
    "vr\030\017 \001(\t\022\031\n\021server_max_online\030\036 \001(\r\022\031\n\021s"
    "erver_cur_online\030\037 \001(\r\022\024\n\014server_state\030 "
    " \001(\r\022\023\n\013system_info\030! \001(\t\022\021\n\ttotal_mem\030\""
    " \001(\004\022\020\n\010free_mem\030# \001(\004\022\020\n\010used_mem\030$ \001(\004"
    "\022\020\n\010proc_cpu\030% \001(\001\022\020\n\010proc_mem\030& \001(\004\022\023\n\013"
    "proc_thread\030\' \001(\r\022\021\n\tproc_name\030( \001(\t\022\020\n\010"
    "proc_cwd\030) \001(\t\022\020\n\010proc_pid\030* \001(\r\022\021\n\tlast"
    "_date\030+ \001(\t\022\021\n\tlast_time\030, \001(\004\022\025\n\rcontra"
    "ct_info\030- \001(\t\022\024\n\014machine_addr\030. \001(\t\022\024\n\014d"
    "b_name_list\030/ \003(\t\"G\n\024ServerInfoReportLis"
    "t\022/\n\013server_list\030\001 \003(\0132\032.proto_ff.Server"
    "InfoReport\"0\n\014ZkServerInfo\022\017\n\007bus_url\030\001 "
    "\001(\t\022\017\n\007tcp_url\030\002 \001(\t\"5\n\016DynLibFileInfo\022\020"
    "\n\010file_md5\030\001 \001(\t\022\021\n\tfile_size\030\002 \001(\005\"B\n\023D"
    "ynLibFileInfoArray\022+\n\tfile_list\030\001 \003(\0132\030."
    "proto_ff.DynLibFileInfo\"\030\n\026Proto_KillAll"
    "ServerNtf\"(\n\026Proto_KillAllServerRsp\022\016\n\006r"
    "esult\030\001 \001(\005\"R\n\035Proto_STSBroadPlayerMsgNo"
    "tify\022\017\n\007user_id\030\001 \003(\004\022\016\n\006msg_id\030\002 \001(\r\022\020\n"
    "\010msg_data\030\003 \001(\014\"N\n\027Proto_STWebMsgRspNoti"
    "fy\022\022\n\nrequest_id\030\001 \001(\004\022\016\n\006result\030\002 \001(\005\022\017"
    "\n\007err_msg\030\003 \001(\t\"\253\001\n\021BehaviorLogHeader\022\026\n"
    "\010event_id\030\001 \001(\004B\004\300\202\024\002\022\020\n\010sequence\030\002 \001(\r\022"
    "\034\n\010bus_name\030\003 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\036\n\nevent_t"
    "ime\030\004 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\017\n\007user_id\030\005 \001(\004\022\035"
    "\n\tuser_name\030\006 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\"a\n\017NFEvent"
    "NoneData\022\016\n\006param1\030\001 \001(\t\022\016\n\006param2\030\002 \001(\t"
    "\022\016\n\006param3\030\003 \001(\t\022\016\n\006param4\030\004 \001(\t\022\016\n\006para"
    "m5\030\005 \001(\t*\260\r\n\020Proto_Kernel_CMD\022\036\n\032NF_GTM_"
    "KILL_ALL_SERVER_NTF\020\003\022\036\n\032NF_STS_KILL_ALL"
    "_SERVER_NTF\020\004\022\"\n\036NF_STMaster_SEND_DUMP_I"
    "NFO_NTF\020,\022$\n NF_MasterTMonitor_RELOAD_CM"
    "D_REQ\020P\022%\n!NF_MasterTMonitor_RESTART_CMD"
    "_REQ\020Q\022#\n\037NF_MasterTMonitor_START_CMD_RE"
    "Q\020R\022\"\n\036NF_MasterTMonitor_STOP_CMD_REQ\020S\022"
    "&\n\"NF_MasterTMonitor_STOP_ALL_CMD_REQ\020T\022"
    "(\n$NF_MasterTMonitor_RELOAD_ALL_CMD_REQ\020"
    "U\022)\n%NF_MasterTMonitor_RESTART_ALL_CMD_R"
    "EQ\020V\022\'\n#NF_MasterTMonitor_START_ALL_CMD_"
    "REQ\020W\022$\n NF_MonitorTMaster_RELOAD_CMD_RS"
    "P\020Z\022%\n!NF_MonitorTMaster_RESTART_CMD_RSP"
    "\020[\022#\n\037NF_MonitorTMaster_START_CMD_RSP\020\\\022"
    "\"\n\036NF_MonitorTMaster_STOP_CMD_RSP\020]\022&\n\"N"
    "F_MonitorTMaster_STOP_ALL_CMD_RSP\020^\022(\n$N"
    "F_MonitorTMaster_RELOAD_ALL_CMD_RSP\020_\022)\n"
    "%NF_MonitorTMaster_RESTART_ALL_CMD_RSP\020`"
    "\022\'\n#NF_MonitorTMaster_START_ALL_CMD_RSP\020"
    "a\022 \n\034NF_SERVER_TO_SERVER_REGISTER\020d\022$\n N"
    "F_SERVER_TO_SERVER_REGISTER_RSP\020e\022*\n&NF_"
    "MASTER_SERVER_SEND_OTHERS_TO_SERVER\020f\022%\n"
    "!NF_SERVER_TO_MASTER_SERVER_REPORT\020g\022\'\n#"
    "NF_ROUTER_CMD_INTERNAL_C2R_REGISTER\020h\022\'\n"
    "#NF_ROUTER_CMD_INTERNAL_R2C_REGISTER\020i\022("
    "\n$NF_ROUTER_CMD_INTERNAL_C2R_HEARTBEAT\020j"
    "\022(\n$NF_ROUTER_CMD_INTERNAL_R2C_HEARTBEAT"
    "\020k\022\036\n\032NF_ROUTER_CMD_DISPATCH_MOD\020l\022%\n!NF"
    "_ROUTER_CMD_DISPATCH_ROUNDROBIN\020m\022$\n NF_"
    "ROUTER_CMD_DISPATCH_BROADCAST\020n\022/\n+NF_RO"
    "UTER_CMD_DISPATCH_BROADCAST_AND_MASTER\020o"
    "\022+\n\'NF_ROUTER_CMD_DISPATCH_BORADCAST_MAS"
    "TER\020p\022*\n&NF_ROUTER_CMD_DISPATCH_BORADCAS"
    "T_SLAVE\020q\022!\n\035NF_ROUTER_CMD_DISPATCH_DIRE"
    "CT\020r\022-\n)NF_ROUTER_CMD_INTERNAL_R2C_DISPA"
    "TCHFAILED\020s\0220\n,NF_ROUTER_CMD_INTERNAL_C2"
    "R_REG_RAASSOCAPPSVS\020t\022!\n\035NF_SERVER_TO_SE"
    "RVER_TRANS_CMD\020x\022$\n NF_SERVER_TO_STORE_S"
    "ERVER_DB_CMD\020y\022$\n NF_STORE_SERVER_TO_SER"
    "VER_DB_CMD\020z\022%\n!NF_WORLD_ROUTER_CMD_TO_S"
    "UIT_LOGIC\020{\022#\n\037NF_SNS_ROUTER_CMD_TO_SUIT"
    "_LOGIC\020|\022\"\n\036NF_STS_BROAD_PLAYER_MSG_NOTI"
    "FY\020}\022%\n!NF_SEVER_TO_WEB_SERVER_RSP_NOTIF"
    "Y\020~*b\n\020NFROUTER_ERRCODE\022\030\n\024NF_ROUTER_ERR"
    "CODE_OK\020\000\0224\n0NF_ROUTER_ERRCODE_DISPATCHF"
    "AILD_DESTSVR_NOTEXIST\020\001*\207\005\n\023STORESVR_CS_"
    "COMMAND\022\031\n\025E_STORESVR_C2S_SELECT\020\000\022\031\n\025E_"
    "STORESVR_S2C_SELECT\020\001\022\034\n\030E_STORESVR_C2S_"
    "SELECTOBJ\020\002\022\034\n\030E_STORESVR_S2C_SELECTOBJ\020"
    "\003\022\031\n\025E_STORESVR_C2S_INSERT\020\004\022\031\n\025E_STORES"
    "VR_S2C_INSERT\020\005\022\031\n\025E_STORESVR_C2S_DELETE"
    "\020\006\022\031\n\025E_STORESVR_S2C_DELETE\020\007\022\034\n\030E_STORE"
    "SVR_C2S_DELETEOBJ\020\010\022\034\n\030E_STORESVR_S2C_DE"
    "LETEOBJ\020\t\022\031\n\025E_STORESVR_C2S_MODIFY\020\n\022\031\n\025"
    "E_STORESVR_S2C_MODIFY\020\013\022\034\n\030E_STORESVR_C2"
    "S_MODIFYOBJ\020\014\022\034\n\030E_STORESVR_S2C_MODIFYOB"
    "J\020\r\022\031\n\025E_STORESVR_C2S_MODINS\020\016\022\031\n\025E_STOR"
    "ESVR_S2C_MODINS\020\017\022\034\n\030E_STORESVR_C2S_MODI"
    "NSOBJ\020\020\022\034\n\030E_STORESVR_S2C_MODINSOBJ\020\021\022\034\n"
    "\030E_STORESVR_C2S_DESCSTORE\020\022\022\034\n\030E_STORESV"
    "R_S2C_DESCSTORE\020\023\022\032\n\026E_STORESVR_C2S_EXEC"
    "UTE\020\024\022\032\n\026E_STORESVR_S2C_EXECUTE\020\025*\245\006\n\020ST"
    "ORESVR_ERRCODE\022\031\n\025E_STORESVR_ERRCODE_OK\020"
    "\000\022\033\n\027E_STORESVR_ERRCODE_BUSY\020\001\022\035\n\031E_STOR"
    "ESVR_ERRCODE_EINVAL\020\002\022,\n(E_STORESVR_ERRC"
    "ODE_PARSEFROMSTRINGFAILED\020\003\022/\n+E_STORESV"
    "R_ERRCODE_DBNAME_OR_MODKEY_INVALID\020\004\022%\n!"
    "E_STORESVR_ERRCODE_TBNAME_INVALID\020\005\022#\n\037E"
    "_STORESVR_ERRCODE_SELECT_EMPTY\020\006\0227\n3E_ST"
    "ORESVR_ERRCODE_SELECT_FILLMESSAGEBYRESUL"
    "TFAILED\020\007\0222\n.E_STORESVR_ERRCODE_CANNOTCR"
    "EATERECORDMSGOBJECT\020\010\022,\n(E_STORESVR_ERRC"
    "ODE_CANNOTFINDSQLTEMPALTE\020\t\0220\n,E_STORESV"
    "R_ERRCODE_SETPREPARESTATEMENTFAILED\020\n\022#\n"
    "\037E_STORESVR_ERRCODE_INSERTFAILED\020\013\022#\n\037E_"
    "STORESVR_ERRCODE_DELETEFAILED\020\014\022-\n)E_STO"
    "RESVR_ERRCODE_DELETERECORDISNOTEXIST\020\r\022-"
    "\n)E_STORESVR_ERRCODE_UPDATERECORDISNOTEX"
    "IST\020\016\022*\n&E_STORESVR_ERRCODE_UPDATENOROWA"
    "FFECTED\020\017\022#\n\037E_STORESVR_ERRCODE_UPDATEFA"
    "ILED\020\020\022)\n%E_STORESVR_ERRCODE_UPDATEINSER"
    "TFAILED\020\021\022\036\n\032E_STORESVR_ERRCODE_UNKNOWN\020"
    "\022*\223\001\n\016PacketDispType\022\024\n\020E_DISP_TYPE_NONE"
    "\020\000\022\036\n\032E_DISP_TYPE_BY_TRANSACTION\020\001\022\031\n\025E_"
    "DISP_TYPE_BY_ROLEID\020\002\022\030\n\024E_DISP_TYPE_BY_"
    "MSGID\020\003\022\026\n\022E_DISP_TYPE_BY_RPC\020\004*\346\002\n\007Tabl"
    "eID\022\020\n\014E_TABLE_NONE\020\000\022\032\n\026E_TABLE_ACCOUNT"
    "_PLAYER\020\001\022\025\n\021E_TABLE_USER_MAIL\020\002\022\027\n\023E_TA"
    "BLE_MAIL_DETAIL\020\003\022\027\n\023E_TABLE_USER_DETAIL"
    "\020\004\022\027\n\023E_TABLE_USER_SIMPLE\020\005\022\025\n\021E_TABLE_U"
    "SER_MISC\020\006\022\034\n\030E_TABLE_GIVE_BANK_JETTON\020\007"
    "\022\025\n\021E_TABLE_EVENT_LOG\020\010\022\027\n\023E_TABLE_RANK_"
    "COMMON\020\t\022\026\n\022E_TABLE_GAME_ROBOT\020\n\022\030\n\024E_TA"
    "BLE_MONEY_DETAIL\020\013\022\032\n\026E_TABLE_LOG_SYSTEM"
    "_DAY\020\014\022\030\n\024E_TABLE_LOG_GAME_DAY\020\r*\361\001\n\nSer"
    "verType\022\016\n\nNF_ST_NONE\020\000\022\027\n\023NF_ST_MASTER_"
    "SERVER\020\001\022\026\n\022NF_ST_LOGIN_SERVER\020\002\022\026\n\022NF_S"
    "T_WORLD_SERVER\020\003\022\025\n\021NF_ST_GAME_SERVER\020\004\022"
    "\026\n\022NF_ST_PROXY_SERVER\020\005\022\034\n\030NF_ST_ROUTE_A"
    "GENT_SERVER\020\006\022\026\n\022NF_ST_ROUTE_SERVER\020\007\022\026\n"
    "\022NF_ST_STORE_SERVER\020\010\022\r\n\tNF_ST_MAX\020\024*Z\n\014"
    "EServerState\022\r\n\tEST_CRASH\020\000\022\016\n\nEST_NARMA"
    "L\020\001\022\014\n\010EST_BUSY\020\002\022\014\n\010EST_FIRE\020\003\022\017\n\013EST_M"
    "AINTEN\020\004*\261\021\n\026Proto_Kernel_ErrorCode\022\033\n\027E"
    "RR_CODE_ZOOKEEPER_BASE\020\000\022$\n\027ERR_CODE_ZK_"
    "SYSTEMERROR\020\377\377\377\377\377\377\377\377\377\001\022-\n ERR_CODE_ZK_RU"
    "NTIMEINCONSISTENCY\020\376\377\377\377\377\377\377\377\377\001\022*\n\035ERR_COD"
    "E_ZK_DATAINCONSISTENCY\020\375\377\377\377\377\377\377\377\377\001\022\'\n\032ERR"
    "_CODE_ZK_CONNECTIONLOSS\020\374\377\377\377\377\377\377\377\377\001\022)\n\034ER"
    "R_CODE_ZK_MARSHALLINGERROR\020\373\377\377\377\377\377\377\377\377\001\022&\n"
    "\031ERR_CODE_ZK_UNIMPLEMENTED\020\372\377\377\377\377\377\377\377\377\001\022)\n"
    "\034ERR_CODE_ZK_OPERATIONTIMEOUT\020\371\377\377\377\377\377\377\377\377\001"
    "\022%\n\030ERR_CODE_ZK_BADARGUMENTS\020\370\377\377\377\377\377\377\377\377\001\022"
    "%\n\030ERR_CODE_ZK_INVALIDSTATE\020\367\377\377\377\377\377\377\377\377\001\022$"
    "\n\027ERR_CODE_kSM_DNSFAILURE\020\366\377\377\377\377\377\377\377\377\001\022!\n\024"
    "ERR_CODE_ZK_APIERROR\020\234\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_C"
    "ODE_ZK_NONODE\020\233\377\377\377\377\377\377\377\377\001\022\037\n\022ERR_CODE_ZK_"
    "NOAUTH\020\232\377\377\377\377\377\377\377\377\001\022#\n\026ERR_CODE_ZK_BADVERS"
    "ION\020\231\377\377\377\377\377\377\377\377\001\0220\n#ERR_CODE_ZK_NOCHILDREN"
    "FOREPHEMERALS\020\224\377\377\377\377\377\377\377\377\001\022#\n\026ERR_CODE_ZK_"
    "NODEEXISTS\020\222\377\377\377\377\377\377\377\377\001\022!\n\024ERR_CODE_ZK_NOT"
    "EMPTY\020\221\377\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_ZK_SESSIONE"
    "XPIRED\020\220\377\377\377\377\377\377\377\377\001\022(\n\033ERR_CODE_ZK_INVALID"
    "CALLBACK\020\217\377\377\377\377\377\377\377\377\001\022#\n\026ERR_CODE_ZK_INVAL"
    "IDACL\020\216\377\377\377\377\377\377\377\377\001\022#\n\026ERR_CODE_ZK_AUTHFAIL"
    "ED\020\215\377\377\377\377\377\377\377\377\001\022 \n\023ERR_CODE_ZK_CLOSING\020\214\377\377"
    "\377\377\377\377\377\377\001\022 \n\023ERR_CODE_ZK_NOTHING\020\213\377\377\377\377\377\377\377\377"
    "\001\022%\n\030ERR_CODE_ZK_SESSIONMOVED\020\212\377\377\377\377\377\377\377\377\001"
    "\022 \n\023ERR_CODE_ZK_NOQUOTA\020\211\377\377\377\377\377\377\377\377\001\022\'\n\032ER"
    "R_CODE_ZK_SERVEROVERLOAD\020\210\377\377\377\377\377\377\377\377\001\022\'\n\032E"
    "RR_CODE_ZK_NOT_SET_APPKEY\020\270\376\377\377\377\377\377\377\377\001\022&\n\031"
    "ERR_CODE_SVR_SYSTEM_ERROR\020\377\377\377\377\377\377\377\377\377\001\022\023\n\017"
    "ERR_CODE_SVR_OK\020\000\022\031\n\025ERR_CODE_MSG_RPC_BA"
    "SE\020d\022\032\n\025ERR_CODE_SESSION_BASE\020\310\001\022\032\n\025ERR_"
    "CODE_MESSAGE_BASE\020\254\002\022\031\n\024ERR_CODE_NAMING_"
    "BASE\020\220\003\022#\n\036ERR_CODE_NAMING_NOT_SUPPORTTE"
    "D\020\221\003\022\"\n\035ERR_CODE_NAMING_INVAILD_PARAM\020\222\003"
    "\022#\n\036ERR_CODE_NAMING_URL_REGISTERED\020\223\003\022#\n"
    "\036ERR_CODE_NAMING_URL_NOT_BINDED\020\224\003\022$\n\037ER"
    "R_CODE_NAMING_REGISTER_FAILED\020\225\003\022%\n ERR_"
    "CODE_NAMING_FACTORY_MAP_NULL\020\226\003\022$\n\037ERR_C"
    "ODE_NAMING_FACTORY_EXISTED\020\227\003\022\031\n\024ERR_COD"
    "E_ROUTER_BASE\020\364\003\022#\n\036ERR_CODE_ROUTER_NOT_"
    "SUPPORTTED\020\365\003\022\"\n\035ERR_CODE_ROUTER_INVAILD"
    "_PARAM\020\366\003\022&\n!ERR_CODE_ROUTER_NONE_VALID_"
    "HANDLE\020\367\003\022%\n ERR_CODE_ROUTER_FACTORY_MAP"
    "_NULL\020\370\003\022$\n\037ERR_CODE_ROUTER_FACTORY_EXIS"
    "TED\020\371\003\022\030\n\023ERR_CODE_TIMER_BASE\020\330\004\022\027\n\022ERR_"
    "CODE_PIPE_BASE\020\274\005\022\034\n\027ERR_CODE_COROUTINE_"
    "BASE\020\240\006\022\036\n\031ERR_CODE_CO_INVALID_PARAM\020\241\006\022"
    "!\n\034ERR_CODE_CO_NOT_IN_COROUTINE\020\242\006\022\034\n\027ER"
    "R_CODE_CO_NOT_RUNNING\020\243\006\022#\n\036ERR_CODE_CO_"
    "START_TIMER_FAILED\020\244\006\022\030\n\023ERR_CODE_CO_TIM"
    "EOUT\020\245\006\022+\n&ERR_CODE_CO_CANNOT_RESUME_IN_"
    "COROUTINE\020\246\006\022\"\n\035ERR_CODE_CO_COROUTINE_UN"
    "EXIST\020\247\006\022\'\n\"ERR_CODE_CO_COROUTINE_STATUS"
    "_ERROR\020\251\006\022\032\n\025ERR_CODE_CHANNEL_BASE\020\204\007\022 \n"
    "\033ERR_CODE_SVR_SYSTEM_TIMEOUT\020\220N\022\'\n\"ERR_C"
    "ODE_SVR_SYSTEM_DATABASE_ERROR\020\221N\032\002\020\001*r\n\016"
    "NFEventSrcType\022\026\n\022NF_EVENT_NONE_TYPE\020\000\022\030"
    "\n\024NF_EVENT_SERVER_TYPE\020\001\022\024\n\020NF_EVENT_GM_"
    "TYPE\020\002\022\030\n\024NF_EVENT_PLAYER_TYPE\020\003*\365\004\n\rNFE"
    "ventIdType\022\036\n\032NF_EVENT_SERVER_TYPE_BEGIN"
    "\020\001\022#\n\037NF_EVENT_SERVER_APP_TASK_FINISH\020\002\022"
    "#\n\037NF_EVENT_SERVER_LOAD_DESC_STORE\020\003\022$\n "
    "NF_EVENT_SERVER_OBJ_LOAD_FROM_DB\020\004\022%\n!NF"
    "_EVENT_SERVER_APP_FINISH_INITED\020\005\022\036\n\032NF_"
    "EVENT_SERVER_DEAD_EVENT\020\006\022\035\n\031NF_EVENT_SE"
    "RVER_REG_EVENT\020\007\022#\n\037NF_EVENT_GAME_SERVER"
    "_DUMP_EVENT\020\010\022$\n NF_EVENT_LOGIC_SERVER_D"
    "UMP_EVENT\020\t\022\034\n\030NF_EVENT_SERVER_TYPE_END\020"
    "c\022\032\n\026NF_EVENT_GM_TYPE_BEGIN\020d\022\031\n\024NF_EVEN"
    "T_GM_TYPE_END\020\307\001\022\037\n\032NF_EVENT_PLAYER_TYPE"
    "_BEGIN\020\310\001\022\"\n\035NF_EVENT_PLAYER_LOGIN_SUCCE"
    "SS\020\311\001\022!\n\034NF_EVENT_PLAYER_LOGIN_FAILED\020\312\001"
    "\022&\n!NF_EVENT_PLAYER_RECONNECT_SUCCESS\020\313\001"
    "\022\037\n\032NF_EVENT_PLAYER_DISCONNECT\020\314\001\022\035\n\030NF_"
    "EVENT_PLAYER_TYPE_END\020\253\002", 9064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_kernel.proto", &protobuf_RegisterTypes);
  Proto_DispInfo::default_instance_ = new Proto_DispInfo();
  Proto_StoreInfo_CB::default_instance_ = new Proto_StoreInfo_CB();
  Proto_StoreInfo::default_instance_ = new Proto_StoreInfo();
  Proto_SvrPkg::default_instance_ = new Proto_SvrPkg();
  ServerInfoReport::default_instance_ = new ServerInfoReport();
  ServerInfoReportList::default_instance_ = new ServerInfoReportList();
  ZkServerInfo::default_instance_ = new ZkServerInfo();
  DynLibFileInfo::default_instance_ = new DynLibFileInfo();
  DynLibFileInfoArray::default_instance_ = new DynLibFileInfoArray();
  Proto_KillAllServerNtf::default_instance_ = new Proto_KillAllServerNtf();
  Proto_KillAllServerRsp::default_instance_ = new Proto_KillAllServerRsp();
  Proto_STSBroadPlayerMsgNotify::default_instance_ = new Proto_STSBroadPlayerMsgNotify();
  Proto_STWebMsgRspNotify::default_instance_ = new Proto_STWebMsgRspNotify();
  BehaviorLogHeader::default_instance_ = new BehaviorLogHeader();
  NFEventNoneData::default_instance_ = new NFEventNoneData();
  Proto_DispInfo::default_instance_->InitAsDefaultInstance();
  Proto_StoreInfo_CB::default_instance_->InitAsDefaultInstance();
  Proto_StoreInfo::default_instance_->InitAsDefaultInstance();
  Proto_SvrPkg::default_instance_->InitAsDefaultInstance();
  ServerInfoReport::default_instance_->InitAsDefaultInstance();
  ServerInfoReportList::default_instance_->InitAsDefaultInstance();
  ZkServerInfo::default_instance_->InitAsDefaultInstance();
  DynLibFileInfo::default_instance_->InitAsDefaultInstance();
  DynLibFileInfoArray::default_instance_->InitAsDefaultInstance();
  Proto_KillAllServerNtf::default_instance_->InitAsDefaultInstance();
  Proto_KillAllServerRsp::default_instance_->InitAsDefaultInstance();
  Proto_STSBroadPlayerMsgNotify::default_instance_->InitAsDefaultInstance();
  Proto_STWebMsgRspNotify::default_instance_->InitAsDefaultInstance();
  BehaviorLogHeader::default_instance_->InitAsDefaultInstance();
  NFEventNoneData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fkernel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fkernel_2eproto {
  StaticDescriptorInitializer_proto_5fkernel_2eproto() {
    protobuf_AddDesc_proto_5fkernel_2eproto();
  }
} static_descriptor_initializer_proto_5fkernel_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_Kernel_CMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Kernel_CMD_descriptor_;
}
bool Proto_Kernel_CMD_IsValid(int value) {
  switch(value) {
    case 3:
    case 4:
    case 44:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NFROUTER_ERRCODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFROUTER_ERRCODE_descriptor_;
}
bool NFROUTER_ERRCODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STORESVR_CS_COMMAND_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STORESVR_CS_COMMAND_descriptor_;
}
bool STORESVR_CS_COMMAND_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STORESVR_ERRCODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STORESVR_ERRCODE_descriptor_;
}
bool STORESVR_ERRCODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PacketDispType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketDispType_descriptor_;
}
bool PacketDispType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TableID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableID_descriptor_;
}
bool TableID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerType_descriptor_;
}
bool ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServerState_descriptor_;
}
bool EServerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_Kernel_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Kernel_ErrorCode_descriptor_;
}
bool Proto_Kernel_ErrorCode_IsValid(int value) {
  switch(value) {
    case -200:
    case -120:
    case -119:
    case -118:
    case -117:
    case -116:
    case -115:
    case -114:
    case -113:
    case -112:
    case -111:
    case -110:
    case -108:
    case -103:
    case -102:
    case -101:
    case -100:
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
    case 100:
    case 200:
    case 300:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 600:
    case 700:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 809:
    case 900:
    case 10000:
    case 10001:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NFEventSrcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFEventSrcType_descriptor_;
}
bool NFEventSrcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NFEventIdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFEventIdType_descriptor_;
}
bool NFEventIdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 99:
    case 100:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 299:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_DispInfo::kUserIdFieldNumber;
const int Proto_DispInfo::kReqTransIdFieldNumber;
const int Proto_DispInfo::kRspTransIdFieldNumber;
#endif  // !_MSC_VER

Proto_DispInfo::Proto_DispInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_DispInfo::InitAsDefaultInstance() {
}

Proto_DispInfo::Proto_DispInfo(const Proto_DispInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_DispInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  req_trans_id_ = 0;
  rsp_trans_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_DispInfo::~Proto_DispInfo() {
  SharedDtor();
}

void Proto_DispInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_DispInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_DispInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_DispInfo_descriptor_;
}

const Proto_DispInfo& Proto_DispInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_DispInfo* Proto_DispInfo::default_instance_ = NULL;

Proto_DispInfo* Proto_DispInfo::New() const {
  return new Proto_DispInfo;
}

void Proto_DispInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    req_trans_id_ = 0;
    rsp_trans_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_DispInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_req_trans_id;
        break;
      }

      // optional int32 req_trans_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_trans_id_)));
          set_has_req_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rsp_trans_id;
        break;
      }

      // optional int32 rsp_trans_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsp_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_trans_id_)));
          set_has_rsp_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_DispInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int32 req_trans_id = 2;
  if (has_req_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->req_trans_id(), output);
  }

  // optional int32 rsp_trans_id = 3;
  if (has_rsp_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rsp_trans_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_DispInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 req_trans_id = 2;
  if (has_req_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->req_trans_id(), target);
  }

  // optional int32 rsp_trans_id = 3;
  if (has_rsp_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rsp_trans_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_DispInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int32 req_trans_id = 2;
    if (has_req_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_trans_id());
    }

    // optional int32 rsp_trans_id = 3;
    if (has_rsp_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_trans_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_DispInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_DispInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_DispInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_DispInfo::MergeFrom(const Proto_DispInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_req_trans_id()) {
      set_req_trans_id(from.req_trans_id());
    }
    if (from.has_rsp_trans_id()) {
      set_rsp_trans_id(from.rsp_trans_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_DispInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_DispInfo::CopyFrom(const Proto_DispInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_DispInfo::IsInitialized() const {

  return true;
}

void Proto_DispInfo::Swap(Proto_DispInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(req_trans_id_, other->req_trans_id_);
    std::swap(rsp_trans_id_, other->rsp_trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_DispInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_DispInfo_descriptor_;
  metadata.reflection = Proto_DispInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_StoreInfo_CB::kTypeFieldNumber;
const int Proto_StoreInfo_CB::kIdFieldNumber;
const int Proto_StoreInfo_CB::kTableIdFieldNumber;
const int Proto_StoreInfo_CB::kSeqFieldNumber;
#endif  // !_MSC_VER

Proto_StoreInfo_CB::Proto_StoreInfo_CB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_StoreInfo_CB::InitAsDefaultInstance() {
}

Proto_StoreInfo_CB::Proto_StoreInfo_CB(const Proto_StoreInfo_CB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_StoreInfo_CB::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  table_id_ = 0;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_StoreInfo_CB::~Proto_StoreInfo_CB() {
  SharedDtor();
}

void Proto_StoreInfo_CB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_StoreInfo_CB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_StoreInfo_CB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_StoreInfo_CB_descriptor_;
}

const Proto_StoreInfo_CB& Proto_StoreInfo_CB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_StoreInfo_CB* Proto_StoreInfo_CB::default_instance_ = NULL;

Proto_StoreInfo_CB* Proto_StoreInfo_CB::New() const {
  return new Proto_StoreInfo_CB;
}

void Proto_StoreInfo_CB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    table_id_ = 0;
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_StoreInfo_CB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.PacketDispType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::PacketDispType_IsValid(value)) {
            set_type(static_cast< ::proto_ff::PacketDispType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // optional .proto_ff.TableID table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::TableID_IsValid(value)) {
            set_table_id(static_cast< ::proto_ff::TableID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_StoreInfo_CB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.PacketDispType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional .proto_ff.TableID table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->table_id(), output);
  }

  // optional uint32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_StoreInfo_CB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.PacketDispType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional .proto_ff.TableID table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->table_id(), target);
  }

  // optional uint32 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_StoreInfo_CB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.PacketDispType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .proto_ff.TableID table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->table_id());
    }

    // optional uint32 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_StoreInfo_CB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_StoreInfo_CB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_StoreInfo_CB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_StoreInfo_CB::MergeFrom(const Proto_StoreInfo_CB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_StoreInfo_CB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_StoreInfo_CB::CopyFrom(const Proto_StoreInfo_CB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_StoreInfo_CB::IsInitialized() const {

  return true;
}

void Proto_StoreInfo_CB::Swap(Proto_StoreInfo_CB* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(table_id_, other->table_id_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_StoreInfo_CB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_StoreInfo_CB_descriptor_;
  metadata.reflection = Proto_StoreInfo_CB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_StoreInfo::kCmdFieldNumber;
const int Proto_StoreInfo::kErrCodeFieldNumber;
const int Proto_StoreInfo::kCbDataFieldNumber;
#endif  // !_MSC_VER

Proto_StoreInfo::Proto_StoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_StoreInfo::InitAsDefaultInstance() {
  cb_data_ = const_cast< ::proto_ff::Proto_StoreInfo_CB*>(&::proto_ff::Proto_StoreInfo_CB::default_instance());
}

Proto_StoreInfo::Proto_StoreInfo(const Proto_StoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_StoreInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  err_code_ = 0;
  cb_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_StoreInfo::~Proto_StoreInfo() {
  SharedDtor();
}

void Proto_StoreInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cb_data_;
  }
}

void Proto_StoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_StoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_StoreInfo_descriptor_;
}

const Proto_StoreInfo& Proto_StoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_StoreInfo* Proto_StoreInfo::default_instance_ = NULL;

Proto_StoreInfo* Proto_StoreInfo::New() const {
  return new Proto_StoreInfo;
}

void Proto_StoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    err_code_ = 0;
    if (has_cb_data()) {
      if (cb_data_ != NULL) cb_data_->::proto_ff::Proto_StoreInfo_CB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_StoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.STORESVR_CS_COMMAND cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::STORESVR_CS_COMMAND_IsValid(value)) {
            set_cmd(static_cast< ::proto_ff::STORESVR_CS_COMMAND >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_code;
        break;
      }

      // optional .proto_ff.STORESVR_ERRCODE err_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::STORESVR_ERRCODE_IsValid(value)) {
            set_err_code(static_cast< ::proto_ff::STORESVR_ERRCODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cb_data;
        break;
      }

      // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_StoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.STORESVR_CS_COMMAND cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .proto_ff.STORESVR_ERRCODE err_code = 2;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->err_code(), output);
  }

  // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
  if (has_cb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cb_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_StoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.STORESVR_CS_COMMAND cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .proto_ff.STORESVR_ERRCODE err_code = 2;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->err_code(), target);
  }

  // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
  if (has_cb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cb_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_StoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.STORESVR_CS_COMMAND cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .proto_ff.STORESVR_ERRCODE err_code = 2;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->err_code());
    }

    // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
    if (has_cb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cb_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_StoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_StoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_StoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_StoreInfo::MergeFrom(const Proto_StoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_cb_data()) {
      mutable_cb_data()->::proto_ff::Proto_StoreInfo_CB::MergeFrom(from.cb_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_StoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_StoreInfo::CopyFrom(const Proto_StoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_StoreInfo::IsInitialized() const {

  return true;
}

void Proto_StoreInfo::Swap(Proto_StoreInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(err_code_, other->err_code_);
    std::swap(cb_data_, other->cb_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_StoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_StoreInfo_descriptor_;
  metadata.reflection = Proto_StoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SvrPkg::kMsgIdFieldNumber;
const int Proto_SvrPkg::kMsgDataFieldNumber;
const int Proto_SvrPkg::kDispInfoFieldNumber;
const int Proto_SvrPkg::kStoreInfoFieldNumber;
#endif  // !_MSC_VER

Proto_SvrPkg::Proto_SvrPkg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SvrPkg::InitAsDefaultInstance() {
  disp_info_ = const_cast< ::proto_ff::Proto_DispInfo*>(&::proto_ff::Proto_DispInfo::default_instance());
  store_info_ = const_cast< ::proto_ff::Proto_StoreInfo*>(&::proto_ff::Proto_StoreInfo::default_instance());
}

Proto_SvrPkg::Proto_SvrPkg(const Proto_SvrPkg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SvrPkg::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disp_info_ = NULL;
  store_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SvrPkg::~Proto_SvrPkg() {
  SharedDtor();
}

void Proto_SvrPkg::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
    delete disp_info_;
    delete store_info_;
  }
}

void Proto_SvrPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SvrPkg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SvrPkg_descriptor_;
}

const Proto_SvrPkg& Proto_SvrPkg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_SvrPkg* Proto_SvrPkg::default_instance_ = NULL;

Proto_SvrPkg* Proto_SvrPkg::New() const {
  return new Proto_SvrPkg;
}

void Proto_SvrPkg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 0;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
    if (has_disp_info()) {
      if (disp_info_ != NULL) disp_info_->::proto_ff::Proto_DispInfo::Clear();
    }
    if (has_store_info()) {
      if (store_info_ != NULL) store_info_->::proto_ff::Proto_StoreInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SvrPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // optional bytes msg_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disp_info;
        break;
      }

      // optional .proto_ff.Proto_DispInfo disp_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_store_info;
        break;
      }

      // optional .proto_ff.Proto_StoreInfo store_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SvrPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg_data(), output);
  }

  // optional .proto_ff.Proto_DispInfo disp_info = 3;
  if (has_disp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->disp_info(), output);
  }

  // optional .proto_ff.Proto_StoreInfo store_info = 4;
  if (has_store_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->store_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SvrPkg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // optional .proto_ff.Proto_DispInfo disp_info = 3;
  if (has_disp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->disp_info(), target);
  }

  // optional .proto_ff.Proto_StoreInfo store_info = 4;
  if (has_store_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->store_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SvrPkg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_id());
    }

    // optional bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional .proto_ff.Proto_DispInfo disp_info = 3;
    if (has_disp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disp_info());
    }

    // optional .proto_ff.Proto_StoreInfo store_info = 4;
    if (has_store_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SvrPkg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SvrPkg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SvrPkg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SvrPkg::MergeFrom(const Proto_SvrPkg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_disp_info()) {
      mutable_disp_info()->::proto_ff::Proto_DispInfo::MergeFrom(from.disp_info());
    }
    if (from.has_store_info()) {
      mutable_store_info()->::proto_ff::Proto_StoreInfo::MergeFrom(from.store_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SvrPkg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SvrPkg::CopyFrom(const Proto_SvrPkg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SvrPkg::IsInitialized() const {

  return true;
}

void Proto_SvrPkg::Swap(Proto_SvrPkg* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(disp_info_, other->disp_info_);
    std::swap(store_info_, other->store_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SvrPkg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SvrPkg_descriptor_;
  metadata.reflection = Proto_SvrPkg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoReport::kBusIdFieldNumber;
const int ServerInfoReport::kBusNameFieldNumber;
const int ServerInfoReport::kServerTypeFieldNumber;
const int ServerInfoReport::kServerNameFieldNumber;
const int ServerInfoReport::kUrlFieldNumber;
const int ServerInfoReport::kLinkModeFieldNumber;
const int ServerInfoReport::kBusLengthFieldNumber;
const int ServerInfoReport::kServerIpFieldNumber;
const int ServerInfoReport::kServerPortFieldNumber;
const int ServerInfoReport::kServerHttpPortFieldNumber;
const int ServerInfoReport::kExternalServerIpFieldNumber;
const int ServerInfoReport::kExternalServerPortFieldNumber;
const int ServerInfoReport::kRouteSvrFieldNumber;
const int ServerInfoReport::kServerMaxOnlineFieldNumber;
const int ServerInfoReport::kServerCurOnlineFieldNumber;
const int ServerInfoReport::kServerStateFieldNumber;
const int ServerInfoReport::kSystemInfoFieldNumber;
const int ServerInfoReport::kTotalMemFieldNumber;
const int ServerInfoReport::kFreeMemFieldNumber;
const int ServerInfoReport::kUsedMemFieldNumber;
const int ServerInfoReport::kProcCpuFieldNumber;
const int ServerInfoReport::kProcMemFieldNumber;
const int ServerInfoReport::kProcThreadFieldNumber;
const int ServerInfoReport::kProcNameFieldNumber;
const int ServerInfoReport::kProcCwdFieldNumber;
const int ServerInfoReport::kProcPidFieldNumber;
const int ServerInfoReport::kLastDateFieldNumber;
const int ServerInfoReport::kLastTimeFieldNumber;
const int ServerInfoReport::kContractInfoFieldNumber;
const int ServerInfoReport::kMachineAddrFieldNumber;
const int ServerInfoReport::kDbNameListFieldNumber;
#endif  // !_MSC_VER

ServerInfoReport::ServerInfoReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoReport::InitAsDefaultInstance() {
}

ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoReport::SharedCtor() {
  _cached_size_ = 0;
  bus_id_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_type_ = 0u;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  link_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_length_ = 0u;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0u;
  server_http_port_ = 0u;
  external_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  external_server_port_ = 0u;
  route_svr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_max_online_ = 0u;
  server_cur_online_ = 0u;
  server_state_ = 0u;
  system_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_mem_ = GOOGLE_ULONGLONG(0);
  free_mem_ = GOOGLE_ULONGLONG(0);
  used_mem_ = GOOGLE_ULONGLONG(0);
  proc_cpu_ = 0;
  proc_mem_ = GOOGLE_ULONGLONG(0);
  proc_thread_ = 0u;
  proc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_cwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_pid_ = 0u;
  last_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_time_ = GOOGLE_ULONGLONG(0);
  contract_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoReport::~ServerInfoReport() {
  SharedDtor();
}

void ServerInfoReport::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (link_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete link_mode_;
  }
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (external_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete external_server_ip_;
  }
  if (route_svr_ != &::google::protobuf::internal::kEmptyString) {
    delete route_svr_;
  }
  if (system_info_ != &::google::protobuf::internal::kEmptyString) {
    delete system_info_;
  }
  if (proc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_name_;
  }
  if (proc_cwd_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_cwd_;
  }
  if (last_date_ != &::google::protobuf::internal::kEmptyString) {
    delete last_date_;
  }
  if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_info_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfoReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoReport_descriptor_;
}

const ServerInfoReport& ServerInfoReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

ServerInfoReport* ServerInfoReport::default_instance_ = NULL;

ServerInfoReport* ServerInfoReport::New() const {
  return new ServerInfoReport;
}

void ServerInfoReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bus_id_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    server_type_ = 0u;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_link_mode()) {
      if (link_mode_ != &::google::protobuf::internal::kEmptyString) {
        link_mode_->clear();
      }
    }
    bus_length_ = 0u;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    server_port_ = 0u;
    server_http_port_ = 0u;
    if (has_external_server_ip()) {
      if (external_server_ip_ != &::google::protobuf::internal::kEmptyString) {
        external_server_ip_->clear();
      }
    }
    external_server_port_ = 0u;
    if (has_route_svr()) {
      if (route_svr_ != &::google::protobuf::internal::kEmptyString) {
        route_svr_->clear();
      }
    }
    server_max_online_ = 0u;
    server_cur_online_ = 0u;
    server_state_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_system_info()) {
      if (system_info_ != &::google::protobuf::internal::kEmptyString) {
        system_info_->clear();
      }
    }
    total_mem_ = GOOGLE_ULONGLONG(0);
    free_mem_ = GOOGLE_ULONGLONG(0);
    used_mem_ = GOOGLE_ULONGLONG(0);
    proc_cpu_ = 0;
    proc_mem_ = GOOGLE_ULONGLONG(0);
    proc_thread_ = 0u;
    if (has_proc_name()) {
      if (proc_name_ != &::google::protobuf::internal::kEmptyString) {
        proc_name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_proc_cwd()) {
      if (proc_cwd_ != &::google::protobuf::internal::kEmptyString) {
        proc_cwd_->clear();
      }
    }
    proc_pid_ = 0u;
    if (has_last_date()) {
      if (last_date_ != &::google::protobuf::internal::kEmptyString) {
        last_date_->clear();
      }
    }
    last_time_ = GOOGLE_ULONGLONG(0);
    if (has_contract_info()) {
      if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
        contract_info_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
  }
  db_name_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bus_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_type;
        break;
      }

      // optional uint32 server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_name;
        break;
      }

      // optional string server_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_link_mode;
        break;
      }

      // optional string link_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link_mode().data(), this->link_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bus_length;
        break;
      }

      // optional uint32 bus_length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_length_)));
          set_has_bus_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_server_ip;
        break;
      }

      // optional string server_ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_server_http_port;
        break;
      }

      // optional uint32 server_http_port = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_http_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_http_port_)));
          set_has_server_http_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_external_server_ip;
        break;
      }

      // optional string external_server_ip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_server_ip().data(), this->external_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_external_server_port;
        break;
      }

      // optional uint32 external_server_port = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &external_server_port_)));
          set_has_external_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_route_svr;
        break;
      }

      // optional string route_svr = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_svr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_svr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->route_svr().data(), this->route_svr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_server_max_online;
        break;
      }

      // optional uint32 server_max_online = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_max_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_max_online_)));
          set_has_server_max_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_server_cur_online;
        break;
      }

      // optional uint32 server_cur_online = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_cur_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cur_online_)));
          set_has_server_cur_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_server_state;
        break;
      }

      // optional uint32 server_state = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_state_)));
          set_has_server_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_system_info;
        break;
      }

      // optional string system_info = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->system_info().data(), this->system_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_total_mem;
        break;
      }

      // optional uint64 total_mem = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_mem_)));
          set_has_total_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_free_mem;
        break;
      }

      // optional uint64 free_mem = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_mem_)));
          set_has_free_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_used_mem;
        break;
      }

      // optional uint64 used_mem = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_mem_)));
          set_has_used_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_proc_cpu;
        break;
      }

      // optional double proc_cpu = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_proc_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &proc_cpu_)));
          set_has_proc_cpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_proc_mem;
        break;
      }

      // optional uint64 proc_mem = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_mem_)));
          set_has_proc_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_proc_thread;
        break;
      }

      // optional uint32 proc_thread = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_thread_)));
          set_has_proc_thread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_proc_name;
        break;
      }

      // optional string proc_name = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_name().data(), this->proc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_proc_cwd;
        break;
      }

      // optional string proc_cwd = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_cwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_cwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_cwd().data(), this->proc_cwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_proc_pid;
        break;
      }

      // optional uint32 proc_pid = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_pid_)));
          set_has_proc_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_last_date;
        break;
      }

      // optional string last_date = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_date().data(), this->last_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_contract_info;
        break;
      }

      // optional string contract_info = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract_info().data(), this->contract_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_db_name_list;
        break;
      }

      // repeated string db_name_list = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_name_list(this->db_name_list_size() - 1).data(),
            this->db_name_list(this->db_name_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_db_name_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bus_id = 1;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bus_id(), output);
  }

  // optional string bus_name = 2;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bus_name(), output);
  }

  // optional uint32 server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_type(), output);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_name(), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }

  // optional string link_mode = 6;
  if (has_link_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_mode().data(), this->link_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->link_mode(), output);
  }

  // optional uint32 bus_length = 7;
  if (has_bus_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bus_length(), output);
  }

  // optional string server_ip = 9;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->server_ip(), output);
  }

  // optional uint32 server_port = 10;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->server_port(), output);
  }

  // optional uint32 server_http_port = 11;
  if (has_server_http_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->server_http_port(), output);
  }

  // optional string external_server_ip = 12;
  if (has_external_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_server_ip().data(), this->external_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->external_server_ip(), output);
  }

  // optional uint32 external_server_port = 13;
  if (has_external_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->external_server_port(), output);
  }

  // optional string route_svr = 15;
  if (has_route_svr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_svr().data(), this->route_svr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->route_svr(), output);
  }

  // optional uint32 server_max_online = 30;
  if (has_server_max_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->server_max_online(), output);
  }

  // optional uint32 server_cur_online = 31;
  if (has_server_cur_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->server_cur_online(), output);
  }

  // optional uint32 server_state = 32;
  if (has_server_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->server_state(), output);
  }

  // optional string system_info = 33;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->system_info().data(), this->system_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->system_info(), output);
  }

  // optional uint64 total_mem = 34;
  if (has_total_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->total_mem(), output);
  }

  // optional uint64 free_mem = 35;
  if (has_free_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->free_mem(), output);
  }

  // optional uint64 used_mem = 36;
  if (has_used_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->used_mem(), output);
  }

  // optional double proc_cpu = 37;
  if (has_proc_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->proc_cpu(), output);
  }

  // optional uint64 proc_mem = 38;
  if (has_proc_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->proc_mem(), output);
  }

  // optional uint32 proc_thread = 39;
  if (has_proc_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->proc_thread(), output);
  }

  // optional string proc_name = 40;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->proc_name(), output);
  }

  // optional string proc_cwd = 41;
  if (has_proc_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_cwd().data(), this->proc_cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->proc_cwd(), output);
  }

  // optional uint32 proc_pid = 42;
  if (has_proc_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->proc_pid(), output);
  }

  // optional string last_date = 43;
  if (has_last_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_date().data(), this->last_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->last_date(), output);
  }

  // optional uint64 last_time = 44;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->last_time(), output);
  }

  // optional string contract_info = 45;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      45, this->contract_info(), output);
  }

  // optional string machine_addr = 46;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->machine_addr(), output);
  }

  // repeated string db_name_list = 47;
  for (int i = 0; i < this->db_name_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->db_name_list(i).data(), this->db_name_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->db_name_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bus_id = 1;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bus_id(), target);
  }

  // optional string bus_name = 2;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bus_name(), target);
  }

  // optional uint32 server_type = 3;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_type(), target);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // optional string link_mode = 6;
  if (has_link_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_mode().data(), this->link_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->link_mode(), target);
  }

  // optional uint32 bus_length = 7;
  if (has_bus_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bus_length(), target);
  }

  // optional string server_ip = 9;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->server_ip(), target);
  }

  // optional uint32 server_port = 10;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->server_port(), target);
  }

  // optional uint32 server_http_port = 11;
  if (has_server_http_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->server_http_port(), target);
  }

  // optional string external_server_ip = 12;
  if (has_external_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_server_ip().data(), this->external_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->external_server_ip(), target);
  }

  // optional uint32 external_server_port = 13;
  if (has_external_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->external_server_port(), target);
  }

  // optional string route_svr = 15;
  if (has_route_svr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_svr().data(), this->route_svr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->route_svr(), target);
  }

  // optional uint32 server_max_online = 30;
  if (has_server_max_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->server_max_online(), target);
  }

  // optional uint32 server_cur_online = 31;
  if (has_server_cur_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->server_cur_online(), target);
  }

  // optional uint32 server_state = 32;
  if (has_server_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->server_state(), target);
  }

  // optional string system_info = 33;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->system_info().data(), this->system_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->system_info(), target);
  }

  // optional uint64 total_mem = 34;
  if (has_total_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->total_mem(), target);
  }

  // optional uint64 free_mem = 35;
  if (has_free_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->free_mem(), target);
  }

  // optional uint64 used_mem = 36;
  if (has_used_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->used_mem(), target);
  }

  // optional double proc_cpu = 37;
  if (has_proc_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->proc_cpu(), target);
  }

  // optional uint64 proc_mem = 38;
  if (has_proc_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->proc_mem(), target);
  }

  // optional uint32 proc_thread = 39;
  if (has_proc_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->proc_thread(), target);
  }

  // optional string proc_name = 40;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->proc_name(), target);
  }

  // optional string proc_cwd = 41;
  if (has_proc_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_cwd().data(), this->proc_cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->proc_cwd(), target);
  }

  // optional uint32 proc_pid = 42;
  if (has_proc_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->proc_pid(), target);
  }

  // optional string last_date = 43;
  if (has_last_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_date().data(), this->last_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->last_date(), target);
  }

  // optional uint64 last_time = 44;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->last_time(), target);
  }

  // optional string contract_info = 45;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->contract_info(), target);
  }

  // optional string machine_addr = 46;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->machine_addr(), target);
  }

  // repeated string db_name_list = 47;
  for (int i = 0; i < this->db_name_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name_list(i).data(), this->db_name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(47, this->db_name_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bus_id = 1;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

    // optional string bus_name = 2;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional uint32 server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional string server_name = 4;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string link_mode = 6;
    if (has_link_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_mode());
    }

    // optional uint32 bus_length = 7;
    if (has_bus_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_length());
    }

    // optional string server_ip = 9;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 server_port = 10;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 server_http_port = 11;
    if (has_server_http_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_http_port());
    }

    // optional string external_server_ip = 12;
    if (has_external_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_server_ip());
    }

    // optional uint32 external_server_port = 13;
    if (has_external_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->external_server_port());
    }

    // optional string route_svr = 15;
    if (has_route_svr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_svr());
    }

    // optional uint32 server_max_online = 30;
    if (has_server_max_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_max_online());
    }

    // optional uint32 server_cur_online = 31;
    if (has_server_cur_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cur_online());
    }

    // optional uint32 server_state = 32;
    if (has_server_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_state());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string system_info = 33;
    if (has_system_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_info());
    }

    // optional uint64 total_mem = 34;
    if (has_total_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_mem());
    }

    // optional uint64 free_mem = 35;
    if (has_free_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_mem());
    }

    // optional uint64 used_mem = 36;
    if (has_used_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used_mem());
    }

    // optional double proc_cpu = 37;
    if (has_proc_cpu()) {
      total_size += 2 + 8;
    }

    // optional uint64 proc_mem = 38;
    if (has_proc_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_mem());
    }

    // optional uint32 proc_thread = 39;
    if (has_proc_thread()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proc_thread());
    }

    // optional string proc_name = 40;
    if (has_proc_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_name());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string proc_cwd = 41;
    if (has_proc_cwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_cwd());
    }

    // optional uint32 proc_pid = 42;
    if (has_proc_pid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proc_pid());
    }

    // optional string last_date = 43;
    if (has_last_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_date());
    }

    // optional uint64 last_time = 44;
    if (has_last_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional string contract_info = 45;
    if (has_contract_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract_info());
    }

    // optional string machine_addr = 46;
    if (has_machine_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

  }
  // repeated string db_name_list = 47;
  total_size += 2 * this->db_name_list_size();
  for (int i = 0; i < this->db_name_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_name_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_name_list_.MergeFrom(from.db_name_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_link_mode()) {
      set_link_mode(from.link_mode());
    }
    if (from.has_bus_length()) {
      set_bus_length(from.bus_length());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_http_port()) {
      set_server_http_port(from.server_http_port());
    }
    if (from.has_external_server_ip()) {
      set_external_server_ip(from.external_server_ip());
    }
    if (from.has_external_server_port()) {
      set_external_server_port(from.external_server_port());
    }
    if (from.has_route_svr()) {
      set_route_svr(from.route_svr());
    }
    if (from.has_server_max_online()) {
      set_server_max_online(from.server_max_online());
    }
    if (from.has_server_cur_online()) {
      set_server_cur_online(from.server_cur_online());
    }
    if (from.has_server_state()) {
      set_server_state(from.server_state());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_system_info()) {
      set_system_info(from.system_info());
    }
    if (from.has_total_mem()) {
      set_total_mem(from.total_mem());
    }
    if (from.has_free_mem()) {
      set_free_mem(from.free_mem());
    }
    if (from.has_used_mem()) {
      set_used_mem(from.used_mem());
    }
    if (from.has_proc_cpu()) {
      set_proc_cpu(from.proc_cpu());
    }
    if (from.has_proc_mem()) {
      set_proc_mem(from.proc_mem());
    }
    if (from.has_proc_thread()) {
      set_proc_thread(from.proc_thread());
    }
    if (from.has_proc_name()) {
      set_proc_name(from.proc_name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_proc_cwd()) {
      set_proc_cwd(from.proc_cwd());
    }
    if (from.has_proc_pid()) {
      set_proc_pid(from.proc_pid());
    }
    if (from.has_last_date()) {
      set_last_date(from.last_date());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_contract_info()) {
      set_contract_info(from.contract_info());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {

  return true;
}

void ServerInfoReport::Swap(ServerInfoReport* other) {
  if (other != this) {
    std::swap(bus_id_, other->bus_id_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_name_, other->server_name_);
    std::swap(url_, other->url_);
    std::swap(link_mode_, other->link_mode_);
    std::swap(bus_length_, other->bus_length_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_http_port_, other->server_http_port_);
    std::swap(external_server_ip_, other->external_server_ip_);
    std::swap(external_server_port_, other->external_server_port_);
    std::swap(route_svr_, other->route_svr_);
    std::swap(server_max_online_, other->server_max_online_);
    std::swap(server_cur_online_, other->server_cur_online_);
    std::swap(server_state_, other->server_state_);
    std::swap(system_info_, other->system_info_);
    std::swap(total_mem_, other->total_mem_);
    std::swap(free_mem_, other->free_mem_);
    std::swap(used_mem_, other->used_mem_);
    std::swap(proc_cpu_, other->proc_cpu_);
    std::swap(proc_mem_, other->proc_mem_);
    std::swap(proc_thread_, other->proc_thread_);
    std::swap(proc_name_, other->proc_name_);
    std::swap(proc_cwd_, other->proc_cwd_);
    std::swap(proc_pid_, other->proc_pid_);
    std::swap(last_date_, other->last_date_);
    std::swap(last_time_, other->last_time_);
    std::swap(contract_info_, other->contract_info_);
    std::swap(machine_addr_, other->machine_addr_);
    db_name_list_.Swap(&other->db_name_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoReport_descriptor_;
  metadata.reflection = ServerInfoReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoReportList::kServerListFieldNumber;
#endif  // !_MSC_VER

ServerInfoReportList::ServerInfoReportList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoReportList::InitAsDefaultInstance() {
}

ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoReportList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoReportList::~ServerInfoReportList() {
  SharedDtor();
}

void ServerInfoReportList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoReportList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReportList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoReportList_descriptor_;
}

const ServerInfoReportList& ServerInfoReportList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

ServerInfoReportList* ServerInfoReportList::default_instance_ = NULL;

ServerInfoReportList* ServerInfoReportList::New() const {
  return new ServerInfoReportList;
}

void ServerInfoReportList::Clear() {
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ServerInfoReport server_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ServerInfoReport server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoReportList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ServerInfoReport server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoReportList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ServerInfoReport server_list = 1;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReportList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoReportList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoReportList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoReportList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {

  return true;
}

void ServerInfoReportList::Swap(ServerInfoReportList* other) {
  if (other != this) {
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoReportList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoReportList_descriptor_;
  metadata.reflection = ServerInfoReportList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZkServerInfo::kBusUrlFieldNumber;
const int ZkServerInfo::kTcpUrlFieldNumber;
#endif  // !_MSC_VER

ZkServerInfo::ZkServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZkServerInfo::InitAsDefaultInstance() {
}

ZkServerInfo::ZkServerInfo(const ZkServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZkServerInfo::SharedCtor() {
  _cached_size_ = 0;
  bus_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tcp_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZkServerInfo::~ZkServerInfo() {
  SharedDtor();
}

void ZkServerInfo::SharedDtor() {
  if (bus_url_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_url_;
  }
  if (tcp_url_ != &::google::protobuf::internal::kEmptyString) {
    delete tcp_url_;
  }
  if (this != default_instance_) {
  }
}

void ZkServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZkServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZkServerInfo_descriptor_;
}

const ZkServerInfo& ZkServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

ZkServerInfo* ZkServerInfo::default_instance_ = NULL;

ZkServerInfo* ZkServerInfo::New() const {
  return new ZkServerInfo;
}

void ZkServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bus_url()) {
      if (bus_url_ != &::google::protobuf::internal::kEmptyString) {
        bus_url_->clear();
      }
    }
    if (has_tcp_url()) {
      if (tcp_url_ != &::google::protobuf::internal::kEmptyString) {
        tcp_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZkServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bus_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_url().data(), this->bus_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tcp_url;
        break;
      }

      // optional string tcp_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcp_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tcp_url().data(), this->tcp_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZkServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bus_url = 1;
  if (has_bus_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_url().data(), this->bus_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bus_url(), output);
  }

  // optional string tcp_url = 2;
  if (has_tcp_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcp_url().data(), this->tcp_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tcp_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZkServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bus_url = 1;
  if (has_bus_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_url().data(), this->bus_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bus_url(), target);
  }

  // optional string tcp_url = 2;
  if (has_tcp_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcp_url().data(), this->tcp_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tcp_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZkServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bus_url = 1;
    if (has_bus_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_url());
    }

    // optional string tcp_url = 2;
    if (has_tcp_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcp_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZkServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZkServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZkServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZkServerInfo::MergeFrom(const ZkServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bus_url()) {
      set_bus_url(from.bus_url());
    }
    if (from.has_tcp_url()) {
      set_tcp_url(from.tcp_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZkServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZkServerInfo::CopyFrom(const ZkServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZkServerInfo::IsInitialized() const {

  return true;
}

void ZkServerInfo::Swap(ZkServerInfo* other) {
  if (other != this) {
    std::swap(bus_url_, other->bus_url_);
    std::swap(tcp_url_, other->tcp_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZkServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZkServerInfo_descriptor_;
  metadata.reflection = ZkServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynLibFileInfo::kFileMd5FieldNumber;
const int DynLibFileInfo::kFileSizeFieldNumber;
#endif  // !_MSC_VER

DynLibFileInfo::DynLibFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynLibFileInfo::InitAsDefaultInstance() {
}

DynLibFileInfo::DynLibFileInfo(const DynLibFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynLibFileInfo::SharedCtor() {
  _cached_size_ = 0;
  file_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynLibFileInfo::~DynLibFileInfo() {
  SharedDtor();
}

void DynLibFileInfo::SharedDtor() {
  if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete file_md5_;
  }
  if (this != default_instance_) {
  }
}

void DynLibFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynLibFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynLibFileInfo_descriptor_;
}

const DynLibFileInfo& DynLibFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

DynLibFileInfo* DynLibFileInfo::default_instance_ = NULL;

DynLibFileInfo* DynLibFileInfo::New() const {
  return new DynLibFileInfo;
}

void DynLibFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_md5()) {
      if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
        file_md5_->clear();
      }
    }
    file_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynLibFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_md5 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_md5().data(), this->file_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional int32 file_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynLibFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_md5 = 1;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_md5(), output);
  }

  // optional int32 file_size = 2;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->file_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynLibFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_md5 = 1;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_md5(), target);
  }

  // optional int32 file_size = 2;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->file_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynLibFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_md5 = 1;
    if (has_file_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_md5());
    }

    // optional int32 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynLibFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynLibFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynLibFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynLibFileInfo::MergeFrom(const DynLibFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_md5()) {
      set_file_md5(from.file_md5());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynLibFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynLibFileInfo::CopyFrom(const DynLibFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynLibFileInfo::IsInitialized() const {

  return true;
}

void DynLibFileInfo::Swap(DynLibFileInfo* other) {
  if (other != this) {
    std::swap(file_md5_, other->file_md5_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynLibFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynLibFileInfo_descriptor_;
  metadata.reflection = DynLibFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynLibFileInfoArray::kFileListFieldNumber;
#endif  // !_MSC_VER

DynLibFileInfoArray::DynLibFileInfoArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynLibFileInfoArray::InitAsDefaultInstance() {
}

DynLibFileInfoArray::DynLibFileInfoArray(const DynLibFileInfoArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynLibFileInfoArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynLibFileInfoArray::~DynLibFileInfoArray() {
  SharedDtor();
}

void DynLibFileInfoArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DynLibFileInfoArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynLibFileInfoArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynLibFileInfoArray_descriptor_;
}

const DynLibFileInfoArray& DynLibFileInfoArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

DynLibFileInfoArray* DynLibFileInfoArray::default_instance_ = NULL;

DynLibFileInfoArray* DynLibFileInfoArray::New() const {
  return new DynLibFileInfoArray;
}

void DynLibFileInfoArray::Clear() {
  file_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynLibFileInfoArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DynLibFileInfo file_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_file_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynLibFileInfoArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DynLibFileInfo file_list = 1;
  for (int i = 0; i < this->file_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynLibFileInfoArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DynLibFileInfo file_list = 1;
  for (int i = 0; i < this->file_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynLibFileInfoArray::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DynLibFileInfo file_list = 1;
  total_size += 1 * this->file_list_size();
  for (int i = 0; i < this->file_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynLibFileInfoArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynLibFileInfoArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynLibFileInfoArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynLibFileInfoArray::MergeFrom(const DynLibFileInfoArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_list_.MergeFrom(from.file_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynLibFileInfoArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynLibFileInfoArray::CopyFrom(const DynLibFileInfoArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynLibFileInfoArray::IsInitialized() const {

  return true;
}

void DynLibFileInfoArray::Swap(DynLibFileInfoArray* other) {
  if (other != this) {
    file_list_.Swap(&other->file_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynLibFileInfoArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynLibFileInfoArray_descriptor_;
  metadata.reflection = DynLibFileInfoArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Proto_KillAllServerNtf::Proto_KillAllServerNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_KillAllServerNtf::InitAsDefaultInstance() {
}

Proto_KillAllServerNtf::Proto_KillAllServerNtf(const Proto_KillAllServerNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_KillAllServerNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_KillAllServerNtf::~Proto_KillAllServerNtf() {
  SharedDtor();
}

void Proto_KillAllServerNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_KillAllServerNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_KillAllServerNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_KillAllServerNtf_descriptor_;
}

const Proto_KillAllServerNtf& Proto_KillAllServerNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_KillAllServerNtf* Proto_KillAllServerNtf::default_instance_ = NULL;

Proto_KillAllServerNtf* Proto_KillAllServerNtf::New() const {
  return new Proto_KillAllServerNtf;
}

void Proto_KillAllServerNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_KillAllServerNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Proto_KillAllServerNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_KillAllServerNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_KillAllServerNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_KillAllServerNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_KillAllServerNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_KillAllServerNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_KillAllServerNtf::MergeFrom(const Proto_KillAllServerNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_KillAllServerNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_KillAllServerNtf::CopyFrom(const Proto_KillAllServerNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_KillAllServerNtf::IsInitialized() const {

  return true;
}

void Proto_KillAllServerNtf::Swap(Proto_KillAllServerNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_KillAllServerNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_KillAllServerNtf_descriptor_;
  metadata.reflection = Proto_KillAllServerNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_KillAllServerRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_KillAllServerRsp::Proto_KillAllServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_KillAllServerRsp::InitAsDefaultInstance() {
}

Proto_KillAllServerRsp::Proto_KillAllServerRsp(const Proto_KillAllServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_KillAllServerRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_KillAllServerRsp::~Proto_KillAllServerRsp() {
  SharedDtor();
}

void Proto_KillAllServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_KillAllServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_KillAllServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_KillAllServerRsp_descriptor_;
}

const Proto_KillAllServerRsp& Proto_KillAllServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_KillAllServerRsp* Proto_KillAllServerRsp::default_instance_ = NULL;

Proto_KillAllServerRsp* Proto_KillAllServerRsp::New() const {
  return new Proto_KillAllServerRsp;
}

void Proto_KillAllServerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_KillAllServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_KillAllServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_KillAllServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_KillAllServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_KillAllServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_KillAllServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_KillAllServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_KillAllServerRsp::MergeFrom(const Proto_KillAllServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_KillAllServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_KillAllServerRsp::CopyFrom(const Proto_KillAllServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_KillAllServerRsp::IsInitialized() const {

  return true;
}

void Proto_KillAllServerRsp::Swap(Proto_KillAllServerRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_KillAllServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_KillAllServerRsp_descriptor_;
  metadata.reflection = Proto_KillAllServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STSBroadPlayerMsgNotify::kUserIdFieldNumber;
const int Proto_STSBroadPlayerMsgNotify::kMsgIdFieldNumber;
const int Proto_STSBroadPlayerMsgNotify::kMsgDataFieldNumber;
#endif  // !_MSC_VER

Proto_STSBroadPlayerMsgNotify::Proto_STSBroadPlayerMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STSBroadPlayerMsgNotify::InitAsDefaultInstance() {
}

Proto_STSBroadPlayerMsgNotify::Proto_STSBroadPlayerMsgNotify(const Proto_STSBroadPlayerMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STSBroadPlayerMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0u;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STSBroadPlayerMsgNotify::~Proto_STSBroadPlayerMsgNotify() {
  SharedDtor();
}

void Proto_STSBroadPlayerMsgNotify::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
  }
}

void Proto_STSBroadPlayerMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STSBroadPlayerMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STSBroadPlayerMsgNotify_descriptor_;
}

const Proto_STSBroadPlayerMsgNotify& Proto_STSBroadPlayerMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_STSBroadPlayerMsgNotify* Proto_STSBroadPlayerMsgNotify::default_instance_ = NULL;

Proto_STSBroadPlayerMsgNotify* Proto_STSBroadPlayerMsgNotify::New() const {
  return new Proto_STSBroadPlayerMsgNotify;
}

void Proto_STSBroadPlayerMsgNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    msg_id_ = 0u;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STSBroadPlayerMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // optional uint32 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_data;
        break;
      }

      // optional bytes msg_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STSBroadPlayerMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->user_id(i), output);
  }

  // optional uint32 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_id(), output);
  }

  // optional bytes msg_data = 3;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STSBroadPlayerMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->user_id(i), target);
  }

  // optional uint32 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_id(), target);
  }

  // optional bytes msg_data = 3;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STSBroadPlayerMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // optional bytes msg_data = 3;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

  }
  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STSBroadPlayerMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STSBroadPlayerMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STSBroadPlayerMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STSBroadPlayerMsgNotify::MergeFrom(const Proto_STSBroadPlayerMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STSBroadPlayerMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STSBroadPlayerMsgNotify::CopyFrom(const Proto_STSBroadPlayerMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STSBroadPlayerMsgNotify::IsInitialized() const {

  return true;
}

void Proto_STSBroadPlayerMsgNotify::Swap(Proto_STSBroadPlayerMsgNotify* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STSBroadPlayerMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STSBroadPlayerMsgNotify_descriptor_;
  metadata.reflection = Proto_STSBroadPlayerMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STWebMsgRspNotify::kRequestIdFieldNumber;
const int Proto_STWebMsgRspNotify::kResultFieldNumber;
const int Proto_STWebMsgRspNotify::kErrMsgFieldNumber;
#endif  // !_MSC_VER

Proto_STWebMsgRspNotify::Proto_STWebMsgRspNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STWebMsgRspNotify::InitAsDefaultInstance() {
}

Proto_STWebMsgRspNotify::Proto_STWebMsgRspNotify(const Proto_STWebMsgRspNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STWebMsgRspNotify::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STWebMsgRspNotify::~Proto_STWebMsgRspNotify() {
  SharedDtor();
}

void Proto_STWebMsgRspNotify::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void Proto_STWebMsgRspNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STWebMsgRspNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STWebMsgRspNotify_descriptor_;
}

const Proto_STWebMsgRspNotify& Proto_STWebMsgRspNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_STWebMsgRspNotify* Proto_STWebMsgRspNotify::default_instance_ = NULL;

Proto_STWebMsgRspNotify* Proto_STWebMsgRspNotify::New() const {
  return new Proto_STWebMsgRspNotify;
}

void Proto_STWebMsgRspNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STWebMsgRspNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STWebMsgRspNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STWebMsgRspNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STWebMsgRspNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string err_msg = 3;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STWebMsgRspNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STWebMsgRspNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STWebMsgRspNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STWebMsgRspNotify::MergeFrom(const Proto_STWebMsgRspNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STWebMsgRspNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STWebMsgRspNotify::CopyFrom(const Proto_STWebMsgRspNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STWebMsgRspNotify::IsInitialized() const {

  return true;
}

void Proto_STWebMsgRspNotify::Swap(Proto_STWebMsgRspNotify* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(result_, other->result_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STWebMsgRspNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STWebMsgRspNotify_descriptor_;
  metadata.reflection = Proto_STWebMsgRspNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorLogHeader::kEventIdFieldNumber;
const int BehaviorLogHeader::kSequenceFieldNumber;
const int BehaviorLogHeader::kBusNameFieldNumber;
const int BehaviorLogHeader::kEventTimeFieldNumber;
const int BehaviorLogHeader::kUserIdFieldNumber;
const int BehaviorLogHeader::kUserNameFieldNumber;
#endif  // !_MSC_VER

BehaviorLogHeader::BehaviorLogHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BehaviorLogHeader::InitAsDefaultInstance() {
}

BehaviorLogHeader::BehaviorLogHeader(const BehaviorLogHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BehaviorLogHeader::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorLogHeader::~BehaviorLogHeader() {
  SharedDtor();
}

void BehaviorLogHeader::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void BehaviorLogHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorLogHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorLogHeader_descriptor_;
}

const BehaviorLogHeader& BehaviorLogHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

BehaviorLogHeader* BehaviorLogHeader::default_instance_ = NULL;

BehaviorLogHeader* BehaviorLogHeader::New() const {
  return new BehaviorLogHeader;
}

void BehaviorLogHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorLogHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BehaviorLogHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BehaviorLogHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BehaviorLogHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorLogHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorLogHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorLogHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorLogHeader::MergeFrom(const BehaviorLogHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorLogHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorLogHeader::CopyFrom(const BehaviorLogHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorLogHeader::IsInitialized() const {

  return true;
}

void BehaviorLogHeader::Swap(BehaviorLogHeader* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorLogHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorLogHeader_descriptor_;
  metadata.reflection = BehaviorLogHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NFEventNoneData::kParam1FieldNumber;
const int NFEventNoneData::kParam2FieldNumber;
const int NFEventNoneData::kParam3FieldNumber;
const int NFEventNoneData::kParam4FieldNumber;
const int NFEventNoneData::kParam5FieldNumber;
#endif  // !_MSC_VER

NFEventNoneData::NFEventNoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NFEventNoneData::InitAsDefaultInstance() {
}

NFEventNoneData::NFEventNoneData(const NFEventNoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NFEventNoneData::SharedCtor() {
  _cached_size_ = 0;
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NFEventNoneData::~NFEventNoneData() {
  SharedDtor();
}

void NFEventNoneData::SharedDtor() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (param3_ != &::google::protobuf::internal::kEmptyString) {
    delete param3_;
  }
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (param5_ != &::google::protobuf::internal::kEmptyString) {
    delete param5_;
  }
  if (this != default_instance_) {
  }
}

void NFEventNoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NFEventNoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFEventNoneData_descriptor_;
}

const NFEventNoneData& NFEventNoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

NFEventNoneData* NFEventNoneData::default_instance_ = NULL;

NFEventNoneData* NFEventNoneData::New() const {
  return new NFEventNoneData;
}

void NFEventNoneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::kEmptyString) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::kEmptyString) {
        param2_->clear();
      }
    }
    if (has_param3()) {
      if (param3_ != &::google::protobuf::internal::kEmptyString) {
        param3_->clear();
      }
    }
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::kEmptyString) {
        param4_->clear();
      }
    }
    if (has_param5()) {
      if (param5_ != &::google::protobuf::internal::kEmptyString) {
        param5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NFEventNoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string param1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param1().data(), this->param1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param2;
        break;
      }

      // optional string param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param2().data(), this->param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param3;
        break;
      }

      // optional string param3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param3().data(), this->param3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param4;
        break;
      }

      // optional string param4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param4().data(), this->param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_param5;
        break;
      }

      // optional string param5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param5().data(), this->param5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NFEventNoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->param1(), output);
  }

  // optional string param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param2(), output);
  }

  // optional string param3 = 3;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->param3(), output);
  }

  // optional string param4 = 4;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->param4(), output);
  }

  // optional string param5 = 5;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param5().data(), this->param5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->param5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NFEventNoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param1(), target);
  }

  // optional string param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->param2(), target);
  }

  // optional string param3 = 3;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param3(), target);
  }

  // optional string param4 = 4;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param4(), target);
  }

  // optional string param5 = 5;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param5().data(), this->param5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->param5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NFEventNoneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }

    // optional string param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }

    // optional string param3 = 3;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param3());
    }

    // optional string param4 = 4;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }

    // optional string param5 = 5;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NFEventNoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NFEventNoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NFEventNoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NFEventNoneData::MergeFrom(const NFEventNoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NFEventNoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NFEventNoneData::CopyFrom(const NFEventNoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NFEventNoneData::IsInitialized() const {

  return true;
}

void NFEventNoneData::Swap(NFEventNoneData* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NFEventNoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NFEventNoneData_descriptor_;
  metadata.reflection = NFEventNoneData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
