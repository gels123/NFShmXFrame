// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_kernel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_kernel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_DispInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_DispInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_StoreInfo_CB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_StoreInfo_CB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_StoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_StoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_EventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_EventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_ScriptRpcResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_ScriptRpcResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_RpcInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_RpcInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_RedirectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_RedirectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SvrPkg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SvrPkg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoReportList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoReportList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInfoReportListRespne_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfoReportListRespne_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZkServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZkServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynLibFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynLibFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynLibFileInfoArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynLibFileInfoArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_KillAllServerNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_KillAllServerNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_KillAllServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_KillAllServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STSBroadPlayerMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STSBroadPlayerMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STWebMsgRspNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STWebMsgRspNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorLogHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorLogHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* NFEventNoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NFEventNoneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NFEventScriptData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NFEventScriptData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_ServerDumpInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_ServerDumpInfoNtf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_Kernel_CMD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketDispType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EServerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_Kernel_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NFEventSrcType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NFEventIdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fkernel_2eproto() {
  protobuf_AddDesc_proto_5fkernel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_kernel.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_DispInfo_descriptor_ = file->message_type(0);
  static const int Proto_DispInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, req_trans_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, rsp_trans_id_),
  };
  Proto_DispInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_DispInfo_descriptor_,
      Proto_DispInfo::default_instance_,
      Proto_DispInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_DispInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_DispInfo));
  Proto_StoreInfo_CB_descriptor_ = file->message_type(1);
  static const int Proto_StoreInfo_CB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, seq_),
  };
  Proto_StoreInfo_CB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_StoreInfo_CB_descriptor_,
      Proto_StoreInfo_CB::default_instance_,
      Proto_StoreInfo_CB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo_CB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_StoreInfo_CB));
  Proto_StoreInfo_descriptor_ = file->message_type(2);
  static const int Proto_StoreInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, cb_data_),
  };
  Proto_StoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_StoreInfo_descriptor_,
      Proto_StoreInfo::default_instance_,
      Proto_StoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_StoreInfo));
  Proto_EventInfo_descriptor_ = file->message_type(3);
  static const int Proto_EventInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_EventInfo, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_EventInfo, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_EventInfo, src_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_EventInfo, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_EventInfo, full_message_name_),
  };
  Proto_EventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_EventInfo_descriptor_,
      Proto_EventInfo::default_instance_,
      Proto_EventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_EventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_EventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_EventInfo));
  Proto_ScriptRpcResult_descriptor_ = file->message_type(4);
  static const int Proto_ScriptRpcResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ScriptRpcResult, req_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ScriptRpcResult, rsp_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ScriptRpcResult, respone_),
  };
  Proto_ScriptRpcResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_ScriptRpcResult_descriptor_,
      Proto_ScriptRpcResult::default_instance_,
      Proto_ScriptRpcResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ScriptRpcResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ScriptRpcResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_ScriptRpcResult));
  Proto_RpcInfo_descriptor_ = file->message_type(5);
  static const int Proto_RpcInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, req_rpc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, rsp_rpc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, rpc_ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, req_rpc_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, rsp_rpc_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, req_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, req_server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, is_script_rpc_),
  };
  Proto_RpcInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_RpcInfo_descriptor_,
      Proto_RpcInfo::default_instance_,
      Proto_RpcInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RpcInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_RpcInfo));
  Proto_RedirectInfo_descriptor_ = file->message_type(6);
  static const int Proto_RedirectInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RedirectInfo, id_),
  };
  Proto_RedirectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_RedirectInfo_descriptor_,
      Proto_RedirectInfo::default_instance_,
      Proto_RedirectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RedirectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_RedirectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_RedirectInfo));
  Proto_SvrPkg_descriptor_ = file->message_type(7);
  static const int Proto_SvrPkg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, disp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, store_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, event_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, redirect_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, rpc_info_),
  };
  Proto_SvrPkg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SvrPkg_descriptor_,
      Proto_SvrPkg::default_instance_,
      Proto_SvrPkg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SvrPkg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SvrPkg));
  ServerInfoReport_descriptor_ = file->message_type(8);
  static const int ServerInfoReport_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, link_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, bus_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_http_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, external_server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, external_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, route_svr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_max_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_cur_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, server_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, system_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, total_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, free_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, used_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_cwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, proc_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, last_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, contract_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, db_name_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, map_id_list_),
  };
  ServerInfoReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoReport_descriptor_,
      ServerInfoReport::default_instance_,
      ServerInfoReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoReport));
  ServerInfoReportList_descriptor_ = file->message_type(9);
  static const int ServerInfoReportList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, server_list_),
  };
  ServerInfoReportList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoReportList_descriptor_,
      ServerInfoReportList::default_instance_,
      ServerInfoReportList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoReportList));
  ServerInfoReportListRespne_descriptor_ = file->message_type(10);
  static const int ServerInfoReportListRespne_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportListRespne, ret_code_),
  };
  ServerInfoReportListRespne_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInfoReportListRespne_descriptor_,
      ServerInfoReportListRespne::default_instance_,
      ServerInfoReportListRespne_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportListRespne, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfoReportListRespne, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInfoReportListRespne));
  ZkServerInfo_descriptor_ = file->message_type(11);
  static const int ZkServerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, bus_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, tcp_url_),
  };
  ZkServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZkServerInfo_descriptor_,
      ZkServerInfo::default_instance_,
      ZkServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZkServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZkServerInfo));
  DynLibFileInfo_descriptor_ = file->message_type(12);
  static const int DynLibFileInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, file_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, file_size_),
  };
  DynLibFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynLibFileInfo_descriptor_,
      DynLibFileInfo::default_instance_,
      DynLibFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynLibFileInfo));
  DynLibFileInfoArray_descriptor_ = file->message_type(13);
  static const int DynLibFileInfoArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfoArray, file_list_),
  };
  DynLibFileInfoArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynLibFileInfoArray_descriptor_,
      DynLibFileInfoArray::default_instance_,
      DynLibFileInfoArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfoArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynLibFileInfoArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynLibFileInfoArray));
  Proto_KillAllServerNtf_descriptor_ = file->message_type(14);
  static const int Proto_KillAllServerNtf_offsets_[1] = {
  };
  Proto_KillAllServerNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_KillAllServerNtf_descriptor_,
      Proto_KillAllServerNtf::default_instance_,
      Proto_KillAllServerNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_KillAllServerNtf));
  Proto_KillAllServerRsp_descriptor_ = file->message_type(15);
  static const int Proto_KillAllServerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerRsp, result_),
  };
  Proto_KillAllServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_KillAllServerRsp_descriptor_,
      Proto_KillAllServerRsp::default_instance_,
      Proto_KillAllServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_KillAllServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_KillAllServerRsp));
  Proto_STSBroadPlayerMsgNotify_descriptor_ = file->message_type(16);
  static const int Proto_STSBroadPlayerMsgNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, msg_data_),
  };
  Proto_STSBroadPlayerMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STSBroadPlayerMsgNotify_descriptor_,
      Proto_STSBroadPlayerMsgNotify::default_instance_,
      Proto_STSBroadPlayerMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSBroadPlayerMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STSBroadPlayerMsgNotify));
  Proto_STWebMsgRspNotify_descriptor_ = file->message_type(17);
  static const int Proto_STWebMsgRspNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, err_msg_),
  };
  Proto_STWebMsgRspNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STWebMsgRspNotify_descriptor_,
      Proto_STWebMsgRspNotify::default_instance_,
      Proto_STWebMsgRspNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STWebMsgRspNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STWebMsgRspNotify));
  BehaviorLogHeader_descriptor_ = file->message_type(18);
  static const int BehaviorLogHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, user_name_),
  };
  BehaviorLogHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorLogHeader_descriptor_,
      BehaviorLogHeader::default_instance_,
      BehaviorLogHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorLogHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorLogHeader));
  NFEventNoneData_descriptor_ = file->message_type(19);
  static const int NFEventNoneData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, param5_),
  };
  NFEventNoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NFEventNoneData_descriptor_,
      NFEventNoneData::default_instance_,
      NFEventNoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventNoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NFEventNoneData));
  NFEventScriptData_descriptor_ = file->message_type(20);
  static const int NFEventScriptData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventScriptData, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventScriptData, event_data_),
  };
  NFEventScriptData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NFEventScriptData_descriptor_,
      NFEventScriptData::default_instance_,
      NFEventScriptData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventScriptData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NFEventScriptData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NFEventScriptData));
  Proto_ServerDumpInfoNtf_descriptor_ = file->message_type(21);
  static const int Proto_ServerDumpInfoNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ServerDumpInfoNtf, dump_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ServerDumpInfoNtf, bus_id_),
  };
  Proto_ServerDumpInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_ServerDumpInfoNtf_descriptor_,
      Proto_ServerDumpInfoNtf::default_instance_,
      Proto_ServerDumpInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ServerDumpInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_ServerDumpInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_ServerDumpInfoNtf));
  Proto_Kernel_CMD_descriptor_ = file->enum_type(0);
  PacketDispType_descriptor_ = file->enum_type(1);
  EServerState_descriptor_ = file->enum_type(2);
  Proto_Kernel_ErrorCode_descriptor_ = file->enum_type(3);
  NFEventSrcType_descriptor_ = file->enum_type(4);
  NFEventIdType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fkernel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_DispInfo_descriptor_, &Proto_DispInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_StoreInfo_CB_descriptor_, &Proto_StoreInfo_CB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_StoreInfo_descriptor_, &Proto_StoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_EventInfo_descriptor_, &Proto_EventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_ScriptRpcResult_descriptor_, &Proto_ScriptRpcResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_RpcInfo_descriptor_, &Proto_RpcInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_RedirectInfo_descriptor_, &Proto_RedirectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SvrPkg_descriptor_, &Proto_SvrPkg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoReport_descriptor_, &ServerInfoReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoReportList_descriptor_, &ServerInfoReportList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInfoReportListRespne_descriptor_, &ServerInfoReportListRespne::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZkServerInfo_descriptor_, &ZkServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynLibFileInfo_descriptor_, &DynLibFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynLibFileInfoArray_descriptor_, &DynLibFileInfoArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_KillAllServerNtf_descriptor_, &Proto_KillAllServerNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_KillAllServerRsp_descriptor_, &Proto_KillAllServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STSBroadPlayerMsgNotify_descriptor_, &Proto_STSBroadPlayerMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STWebMsgRspNotify_descriptor_, &Proto_STWebMsgRspNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorLogHeader_descriptor_, &BehaviorLogHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NFEventNoneData_descriptor_, &NFEventNoneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NFEventScriptData_descriptor_, &NFEventScriptData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_ServerDumpInfoNtf_descriptor_, &Proto_ServerDumpInfoNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fkernel_2eproto() {
  delete Proto_DispInfo::default_instance_;
  delete Proto_DispInfo_reflection_;
  delete Proto_StoreInfo_CB::default_instance_;
  delete Proto_StoreInfo_CB_reflection_;
  delete Proto_StoreInfo::default_instance_;
  delete Proto_StoreInfo_reflection_;
  delete Proto_EventInfo::default_instance_;
  delete Proto_EventInfo_reflection_;
  delete Proto_ScriptRpcResult::default_instance_;
  delete Proto_ScriptRpcResult_reflection_;
  delete Proto_RpcInfo::default_instance_;
  delete Proto_RpcInfo_reflection_;
  delete Proto_RedirectInfo::default_instance_;
  delete Proto_RedirectInfo_reflection_;
  delete Proto_SvrPkg::default_instance_;
  delete Proto_SvrPkg_reflection_;
  delete ServerInfoReport::default_instance_;
  delete ServerInfoReport_reflection_;
  delete ServerInfoReportList::default_instance_;
  delete ServerInfoReportList_reflection_;
  delete ServerInfoReportListRespne::default_instance_;
  delete ServerInfoReportListRespne_reflection_;
  delete ZkServerInfo::default_instance_;
  delete ZkServerInfo_reflection_;
  delete DynLibFileInfo::default_instance_;
  delete DynLibFileInfo_reflection_;
  delete DynLibFileInfoArray::default_instance_;
  delete DynLibFileInfoArray_reflection_;
  delete Proto_KillAllServerNtf::default_instance_;
  delete Proto_KillAllServerNtf_reflection_;
  delete Proto_KillAllServerRsp::default_instance_;
  delete Proto_KillAllServerRsp_reflection_;
  delete Proto_STSBroadPlayerMsgNotify::default_instance_;
  delete Proto_STSBroadPlayerMsgNotify_reflection_;
  delete Proto_STWebMsgRspNotify::default_instance_;
  delete Proto_STWebMsgRspNotify_reflection_;
  delete BehaviorLogHeader::default_instance_;
  delete BehaviorLogHeader_reflection_;
  delete NFEventNoneData::default_instance_;
  delete NFEventNoneData_reflection_;
  delete NFEventScriptData::default_instance_;
  delete NFEventScriptData_reflection_;
  delete Proto_ServerDumpInfoNtf::default_instance_;
  delete Proto_ServerDumpInfoNtf_reflection_;
}

void protobuf_AddDesc_proto_5fkernel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto_kernel.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"M\n\016Proto_DispInfo\022\017\n\007user_"
    "id\030\001 \001(\004\022\024\n\014req_trans_id\030\002 \001(\005\022\024\n\014rsp_tr"
    "ans_id\030\003 \001(\005\"g\n\022Proto_StoreInfo_CB\022&\n\004ty"
    "pe\030\001 \001(\0162\030.proto_ff.PacketDispType\022\n\n\002id"
    "\030\002 \001(\004\022\020\n\010table_id\030\003 \001(\r\022\013\n\003seq\030\004 \001(\r\"_\n"
    "\017Proto_StoreInfo\022\013\n\003cmd\030\001 \001(\r\022\020\n\010err_cod"
    "e\030\002 \001(\005\022-\n\007cb_data\030\003 \001(\0132\034.proto_ff.Prot"
    "o_StoreInfo_CB\"u\n\017Proto_EventInfo\022\023\n\013ser"
    "ver_type\030\001 \001(\r\022\020\n\010event_id\030\002 \001(\004\022\020\n\010src_"
    "type\030\003 \001(\004\022\016\n\006src_id\030\004 \001(\004\022\031\n\021full_messa"
    "ge_name\030\005 \001(\t\"L\n\025Proto_ScriptRpcResult\022\020"
    "\n\010req_type\030\001 \001(\t\022\020\n\010rsp_type\030\002 \001(\t\022\017\n\007re"
    "spone\030\003 \001(\t\"\275\001\n\rProto_RpcInfo\022\022\n\nreq_rpc"
    "_id\030\001 \001(\003\022\022\n\nrsp_rpc_id\030\002 \001(\003\022\024\n\014rpc_ret"
    "_code\030\003 \001(\005\022\024\n\014req_rpc_hash\030\004 \001(\004\022\024\n\014rsp"
    "_rpc_hash\030\005 \001(\004\022\022\n\nreq_bus_id\030\006 \001(\r\022\027\n\017r"
    "eq_server_type\030\007 \001(\004\022\025\n\ris_script_rpc\030\010 "
    "\001(\010\" \n\022Proto_RedirectInfo\022\n\n\002id\030\001 \003(\004\"\233\002"
    "\n\014Proto_SvrPkg\022\016\n\006msg_id\030\001 \001(\005\022\020\n\010msg_da"
    "ta\030\002 \001(\014\022+\n\tdisp_info\030\003 \001(\0132\030.proto_ff.P"
    "roto_DispInfo\022-\n\nstore_info\030\004 \001(\0132\031.prot"
    "o_ff.Proto_StoreInfo\022-\n\nevent_info\030\005 \001(\013"
    "2\031.proto_ff.Proto_EventInfo\0223\n\rredirect_"
    "info\030\006 \001(\0132\034.proto_ff.Proto_RedirectInfo"
    "\022)\n\010rpc_info\030\007 \001(\0132\027.proto_ff.Proto_RpcI"
    "nfo\"\270\005\n\020ServerInfoReport\022\016\n\006bus_id\030\001 \001(\r"
    "\022\021\n\tserver_id\030\002 \001(\t\022\023\n\013server_type\030\003 \001(\r"
    "\022\023\n\013server_name\030\004 \001(\t\022\013\n\003url\030\005 \001(\t\022\021\n\tli"
    "nk_mode\030\006 \001(\t\022\022\n\nbus_length\030\007 \001(\r\022\021\n\tser"
    "ver_ip\030\t \001(\t\022\023\n\013server_port\030\n \001(\r\022\030\n\020ser"
    "ver_http_port\030\013 \001(\r\022\032\n\022external_server_i"
    "p\030\014 \001(\t\022\034\n\024external_server_port\030\r \001(\r\022\021\n"
    "\troute_svr\030\017 \001(\t\022\031\n\021server_max_online\030\036 "
    "\001(\r\022\031\n\021server_cur_online\030\037 \001(\r\022\024\n\014server"
    "_state\030  \001(\r\022\023\n\013system_info\030! \001(\t\022\021\n\ttot"
    "al_mem\030\" \001(\004\022\020\n\010free_mem\030# \001(\004\022\020\n\010used_m"
    "em\030$ \001(\004\022\020\n\010proc_cpu\030% \001(\001\022\020\n\010proc_mem\030&"
    " \001(\004\022\023\n\013proc_thread\030\' \001(\r\022\021\n\tproc_name\030("
    " \001(\t\022\020\n\010proc_cwd\030) \001(\t\022\020\n\010proc_pid\030* \001(\r"
    "\022\021\n\tlast_date\030+ \001(\t\022\021\n\tlast_time\030, \001(\004\022\025"
    "\n\rcontract_info\030- \001(\t\022\024\n\014machine_addr\030. "
    "\001(\t\022\024\n\014db_name_list\030/ \003(\t\022\016\n\006msg_id\0300 \003("
    "\r\022\023\n\013map_id_list\0301 \003(\004\"G\n\024ServerInfoRepo"
    "rtList\022/\n\013server_list\030\001 \003(\0132\032.proto_ff.S"
    "erverInfoReport\".\n\032ServerInfoReportListR"
    "espne\022\020\n\010ret_code\030\001 \001(\005\"0\n\014ZkServerInfo\022"
    "\017\n\007bus_url\030\001 \001(\t\022\017\n\007tcp_url\030\002 \001(\t\"5\n\016Dyn"
    "LibFileInfo\022\020\n\010file_md5\030\001 \001(\t\022\021\n\tfile_si"
    "ze\030\002 \001(\005\"B\n\023DynLibFileInfoArray\022+\n\tfile_"
    "list\030\001 \003(\0132\030.proto_ff.DynLibFileInfo\"\030\n\026"
    "Proto_KillAllServerNtf\"(\n\026Proto_KillAllS"
    "erverRsp\022\016\n\006result\030\001 \001(\005\"R\n\035Proto_STSBro"
    "adPlayerMsgNotify\022\017\n\007user_id\030\001 \003(\004\022\016\n\006ms"
    "g_id\030\002 \001(\r\022\020\n\010msg_data\030\003 \001(\014\"N\n\027Proto_ST"
    "WebMsgRspNotify\022\022\n\nrequest_id\030\001 \001(\004\022\016\n\006r"
    "esult\030\002 \001(\005\022\017\n\007err_msg\030\003 \001(\t\"\253\001\n\021Behavio"
    "rLogHeader\022\026\n\010event_id\030\001 \001(\004B\004\300\202\024\002\022\020\n\010se"
    "quence\030\002 \001(\r\022\034\n\010bus_name\030\003 \001(\tB\n\220\301\024\200\001\310\202\024"
    "\200\001\022\036\n\nevent_time\030\004 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\017\n\007us"
    "er_id\030\005 \001(\004\022\035\n\tuser_name\030\006 \001(\tB\n\220\301\024\200\001\310\202\024"
    "\200\001\"a\n\017NFEventNoneData\022\016\n\006param1\030\001 \001(\003\022\016\n"
    "\006param2\030\002 \001(\003\022\016\n\006param3\030\003 \001(\003\022\016\n\006param4\030"
    "\004 \001(\003\022\016\n\006param5\030\005 \001(\003\";\n\021NFEventScriptDa"
    "ta\022\022\n\nevent_type\030\001 \001(\t\022\022\n\nevent_data\030\002 \001"
    "(\t\"<\n\027Proto_ServerDumpInfoNtf\022\021\n\tdump_in"
    "fo\030\001 \001(\t\022\016\n\006bus_id\030\002 \001(\r*\305\025\n\020Proto_Kerne"
    "l_CMD\022#\n\036NF_SERVER_TO_SERVER_HEART_BEAT\020"
    "\211\'\022\'\n\"NF_SERVER_TO_SERVER_HEART_BEAT_RSP"
    "\020\212\'\022\037\n\032NF_GTM_KILL_ALL_SERVER_NTF\020\213\'\022\037\n\032"
    "NF_STS_KILL_ALL_SERVER_NTF\020\214\'\022\036\n\031NF_STS_"
    "SEND_DUMP_INFO_NTF\020\264\'\022%\n NF_MasterTMonit"
    "or_RELOAD_CMD_REQ\020\330\'\022&\n!NF_MasterTMonito"
    "r_RESTART_CMD_REQ\020\331\'\022$\n\037NF_MasterTMonito"
    "r_START_CMD_REQ\020\332\'\022#\n\036NF_MasterTMonitor_"
    "STOP_CMD_REQ\020\333\'\022\'\n\"NF_MasterTMonitor_STO"
    "P_ALL_CMD_REQ\020\334\'\022)\n$NF_MasterTMonitor_RE"
    "LOAD_ALL_CMD_REQ\020\335\'\022*\n%NF_MasterTMonitor"
    "_RESTART_ALL_CMD_REQ\020\336\'\022(\n#NF_MasterTMon"
    "itor_START_ALL_CMD_REQ\020\337\'\022%\n NF_MonitorT"
    "Master_RELOAD_CMD_RSP\020\342\'\022&\n!NF_MonitorTM"
    "aster_RESTART_CMD_RSP\020\343\'\022$\n\037NF_MonitorTM"
    "aster_START_CMD_RSP\020\344\'\022#\n\036NF_MonitorTMas"
    "ter_STOP_CMD_RSP\020\345\'\022\'\n\"NF_MonitorTMaster"
    "_STOP_ALL_CMD_RSP\020\346\'\022)\n$NF_MonitorTMaste"
    "r_RELOAD_ALL_CMD_RSP\020\347\'\022*\n%NF_MonitorTMa"
    "ster_RESTART_ALL_CMD_RSP\020\350\'\022(\n#NF_Monito"
    "rTMaster_START_ALL_CMD_RSP\020\351\'\022!\n\034NF_SERV"
    "ER_TO_SERVER_REGISTER\020\334\013\022%\n NF_SERVER_TO"
    "_SERVER_REGISTER_RSP\020\355\'\022+\n&NF_MASTER_SER"
    "VER_SEND_OTHERS_TO_SERVER\020\356\'\022&\n!NF_SERVE"
    "R_TO_MASTER_SERVER_REPORT\020\357\'\022(\n#NF_ROUTE"
    "R_CMD_INTERNAL_C2R_REGISTER\020\360\'\022(\n#NF_ROU"
    "TER_CMD_INTERNAL_R2C_REGISTER\020\361\'\022)\n$NF_R"
    "OUTER_CMD_INTERNAL_C2R_HEARTBEAT\020\362\'\022)\n$N"
    "F_ROUTER_CMD_INTERNAL_R2C_HEARTBEAT\020\363\'\022\037"
    "\n\032NF_ROUTER_CMD_DISPATCH_MOD\020\364\'\022&\n!NF_RO"
    "UTER_CMD_DISPATCH_ROUNDROBIN\020\365\'\022%\n NF_RO"
    "UTER_CMD_DISPATCH_BROADCAST\020\366\'\0220\n+NF_ROU"
    "TER_CMD_DISPATCH_BROADCAST_AND_MASTER\020\367\'"
    "\022,\n\'NF_ROUTER_CMD_DISPATCH_BORADCAST_MAS"
    "TER\020\370\'\022+\n&NF_ROUTER_CMD_DISPATCH_BORADCA"
    "ST_SLAVE\020\371\'\022\"\n\035NF_ROUTER_CMD_DISPATCH_DI"
    "RECT\020\372\'\022.\n)NF_ROUTER_CMD_INTERNAL_R2C_DI"
    "SPATCHFAILED\020\373\'\0221\n,NF_ROUTER_CMD_INTERNA"
    "L_C2R_REG_RAASSOCAPPSVS\020\374\'\022 \n\033NF_SERVER_"
    "TO_SERVER_RPC_CMD\020\377\'\022\"\n\035NF_SERVER_TO_SER"
    "VER_TRANS_CMD\020\200(\022%\n NF_SERVER_TO_STORE_S"
    "ERVER_DB_CMD\020\201(\022%\n NF_STORE_SERVER_TO_SE"
    "RVER_DB_CMD\020\202(\022&\n!NF_WORLD_ROUTER_CMD_TO"
    "_SUIT_LOGIC\020\203(\022$\n\037NF_SNS_ROUTER_CMD_TO_S"
    "UIT_LOGIC\020\204(\022#\n\036NF_STS_BROAD_PLAYER_MSG_"
    "NOTIFY\020\205(\022&\n!NF_SEVER_TO_WEB_SERVER_RSP_"
    "NOTIFY\020\206(\022(\n#NF_SERVER_BROAD_EVENT_TO_SE"
    "RVER_CMD\020\207(\022/\n*NF_SERVER_REDIRECT_MSG_TO"
    "_PROXY_SERVER_CMD\020\210(\022\033\n\026NF_STORESVR_C2S_"
    "SELECT\020\320(\022\033\n\026NF_STORESVR_S2C_SELECT\020\321(\022\036"
    "\n\031NF_STORESVR_C2S_SELECTOBJ\020\322(\022\036\n\031NF_STO"
    "RESVR_S2C_SELECTOBJ\020\323(\022\033\n\026NF_STORESVR_C2"
    "S_INSERT\020\324(\022\033\n\026NF_STORESVR_S2C_INSERT\020\325("
    "\022\036\n\031NF_STORESVR_C2S_INSERTOBJ\020\326(\022\036\n\031NF_S"
    "TORESVR_S2C_INSERTOBJ\020\327(\022\033\n\026NF_STORESVR_"
    "C2S_DELETE\020\330(\022\033\n\026NF_STORESVR_S2C_DELETE\020"
    "\331(\022\036\n\031NF_STORESVR_C2S_DELETEOBJ\020\332(\022\036\n\031NF"
    "_STORESVR_S2C_DELETEOBJ\020\333(\022\033\n\026NF_STORESV"
    "R_C2S_MODIFY\020\334(\022\033\n\026NF_STORESVR_S2C_MODIF"
    "Y\020\335(\022\036\n\031NF_STORESVR_C2S_MODIFYOBJ\020\336(\022\036\n\031"
    "NF_STORESVR_S2C_MODIFYOBJ\020\337(\022\033\n\026NF_STORE"
    "SVR_C2S_UPDATE\020\340(\022\033\n\026NF_STORESVR_S2C_UPD"
    "ATE\020\341(\022\036\n\031NF_STORESVR_C2S_UPDATEOBJ\020\342(\022\036"
    "\n\031NF_STORESVR_S2C_UPDATEOBJ\020\343(\022\036\n\031NF_STO"
    "RESVR_C2S_DESCSTORE\020\344(\022\036\n\031NF_STORESVR_S2"
    "C_DESCSTORE\020\345(\022\034\n\027NF_STORESVR_C2S_EXECUT"
    "E\020\346(\022\034\n\027NF_STORESVR_S2C_EXECUTE\020\347(\022!\n\034NF"
    "_STORESVR_C2S_EXECUTE_MORE\020\350(\022!\n\034NF_STOR"
    "ESVR_S2C_EXECUTE_MORE\020\351(*\223\001\n\016PacketDispT"
    "ype\022\024\n\020E_DISP_TYPE_NONE\020\000\022\036\n\032E_DISP_TYPE"
    "_BY_TRANSACTION\020\001\022\031\n\025E_DISP_TYPE_BY_ROLE"
    "ID\020\002\022\030\n\024E_DISP_TYPE_BY_MSGID\020\003\022\026\n\022E_DISP"
    "_TYPE_BY_RPC\020\004*I\n\014EServerState\022\014\n\010EST_IN"
    "IT\020\000\022\016\n\nEST_NARMAL\020\001\022\014\n\010EST_BUSY\020\002\022\r\n\tES"
    "T_CRASH\020\003*\3724\n\026Proto_Kernel_ErrorCode\022\023\n\017"
    "ERR_CODE_SVR_OK\020\000\022&\n\031ERR_CODE_SVR_SYSTEM"
    "_ERROR\020\377\377\377\377\377\377\377\377\377\001\022(\n\033ERR_CODE_SVR_SYSTEM"
    "_TIMEOUT\020\376\377\377\377\377\377\377\377\377\001\022/\n\"ERR_CODE_SVR_SYST"
    "EM_DATABASE_ERROR\020\375\377\377\377\377\377\377\377\377\001\022\"\n\025ERR_CODE"
    "_MSG_RPC_BASE\020\234\377\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_RPC"
    "_INVALID_PARAM\020\233\377\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_RP"
    "C_ENCODE_FAILED\020\232\377\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_R"
    "PC_DECODE_FAILED\020\231\377\377\377\377\377\377\377\377\001\022,\n\037ERR_CODE_"
    "RPC_RECV_EXCEPTION_MSG\020\230\377\377\377\377\377\377\377\377\001\022&\n\031ERR"
    "_CODE_RPC_UNKNOWN_TYPE\020\227\377\377\377\377\377\377\377\377\001\0221\n$ERR"
    "_CODE_RPC_UNSUPPORT_FUNCTION_NAME\020\226\377\377\377\377\377"
    "\377\377\377\001\022+\n\036ERR_CODE_RPC_SESSION_NOT_FOUND\020\225"
    "\377\377\377\377\377\377\377\377\001\022%\n\030ERR_CODE_RPC_SEND_FAILED\020\224\377"
    "\377\377\377\377\377\377\377\001\022)\n\034ERR_CODE_RPC_REQUEST_TIMEOUT"
    "\020\223\377\377\377\377\377\377\377\377\001\022/\n\"ERR_CODE_RPC_FUNCTION_NAM"
    "E_EXISTED\020\222\377\377\377\377\377\377\377\377\001\022&\n\031ERR_CODE_RPC_SYS"
    "TEM_ERROR\020\221\377\377\377\377\377\377\377\377\001\022)\n\034ERR_CODE_RPC_PRO"
    "CESS_TIMEOUT\020\220\377\377\377\377\377\377\377\377\001\0220\n#ERR_CODE_RPC_"
    "MSG_FUNCTION_UNEXISTED\020\217\377\377\377\377\377\377\377\377\001\022.\n!ERR"
    "_CODE_RPC_SYSTEM_OVERLOAD_BASE\020\216\377\377\377\377\377\377\377\377"
    "\001\022)\n\034ERR_CODE_RPC_MESSAGE_EXPIRED\020\215\377\377\377\377\377"
    "\377\377\377\001\022\'\n\032ERR_CODE_RPC_TASK_OVERLOAD\020\214\377\377\377\377"
    "\377\377\377\377\001\022!\n\024ERR_CODE_RPC_CO_USED\020\213\377\377\377\377\377\377\377\377\001"
    "\022$\n\027ERR_CODE_ZK_SYSTEMERROR\020\270\376\377\377\377\377\377\377\377\001\022-"
    "\n ERR_CODE_ZK_RUNTIMEINCONSISTENCY\020\267\376\377\377\377"
    "\377\377\377\377\001\022*\n\035ERR_CODE_ZK_DATAINCONSISTENCY\020\265"
    "\376\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_ZK_CONNECTIONLOSS\020"
    "\264\376\377\377\377\377\377\377\377\001\022)\n\034ERR_CODE_ZK_MARSHALLINGERR"
    "OR\020\263\376\377\377\377\377\377\377\377\001\022&\n\031ERR_CODE_ZK_UNIMPLEMENT"
    "ED\020\262\376\377\377\377\377\377\377\377\001\022)\n\034ERR_CODE_ZK_OPERATIONTI"
    "MEOUT\020\261\376\377\377\377\377\377\377\377\001\022%\n\030ERR_CODE_ZK_BADARGUM"
    "ENTS\020\260\376\377\377\377\377\377\377\377\001\022%\n\030ERR_CODE_ZK_INVALIDST"
    "ATE\020\257\376\377\377\377\377\377\377\377\001\022$\n\027ERR_CODE_kSM_DNSFAILUR"
    "E\020\256\376\377\377\377\377\377\377\377\001\022!\n\024ERR_CODE_ZK_APIERROR\020\255\376\377"
    "\377\377\377\377\377\377\001\022\037\n\022ERR_CODE_ZK_NONODE\020\254\376\377\377\377\377\377\377\377\001"
    "\022\037\n\022ERR_CODE_ZK_NOAUTH\020\253\376\377\377\377\377\377\377\377\001\022#\n\026ERR"
    "_CODE_ZK_BADVERSION\020\252\376\377\377\377\377\377\377\377\001\0220\n#ERR_CO"
    "DE_ZK_NOCHILDRENFOREPHEMERALS\020\251\376\377\377\377\377\377\377\377\001"
    "\022#\n\026ERR_CODE_ZK_NODEEXISTS\020\250\376\377\377\377\377\377\377\377\001\022!\n"
    "\024ERR_CODE_ZK_NOTEMPTY\020\247\376\377\377\377\377\377\377\377\001\022\'\n\032ERR_"
    "CODE_ZK_SESSIONEXPIRED\020\246\376\377\377\377\377\377\377\377\001\022(\n\033ERR"
    "_CODE_ZK_INVALIDCALLBACK\020\245\376\377\377\377\377\377\377\377\001\022#\n\026E"
    "RR_CODE_ZK_INVALIDACL\020\244\376\377\377\377\377\377\377\377\001\022#\n\026ERR_"
    "CODE_ZK_AUTHFAILED\020\243\376\377\377\377\377\377\377\377\001\022 \n\023ERR_COD"
    "E_ZK_CLOSING\020\242\376\377\377\377\377\377\377\377\001\022 \n\023ERR_CODE_ZK_N"
    "OTHING\020\241\376\377\377\377\377\377\377\377\001\022%\n\030ERR_CODE_ZK_SESSION"
    "MOVED\020\240\376\377\377\377\377\377\377\377\001\022 \n\023ERR_CODE_ZK_NOQUOTA\020"
    "\237\376\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_ZK_SERVEROVERLOAD"
    "\020\236\376\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_ZK_NOT_SET_APPKE"
    "Y\020\235\376\377\377\377\377\377\377\377\001\022\"\n\025ERR_CODE_MESSAGE_BASE\020\324\375"
    "\377\377\377\377\377\377\377\001\022!\n\024ERR_CODE_NAMING_BASE\020\360\374\377\377\377\377\377"
    "\377\377\001\022+\n\036ERR_CODE_NAMING_NOT_SUPPORTTED\020\357\374"
    "\377\377\377\377\377\377\377\001\022*\n\035ERR_CODE_NAMING_INVAILD_PARA"
    "M\020\356\374\377\377\377\377\377\377\377\001\022+\n\036ERR_CODE_NAMING_URL_REGI"
    "STERED\020\355\374\377\377\377\377\377\377\377\001\022+\n\036ERR_CODE_NAMING_URL"
    "_NOT_BINDED\020\354\374\377\377\377\377\377\377\377\001\022,\n\037ERR_CODE_NAMIN"
    "G_REGISTER_FAILED\020\353\374\377\377\377\377\377\377\377\001\022-\n ERR_CODE"
    "_NAMING_FACTORY_MAP_NULL\020\352\374\377\377\377\377\377\377\377\001\022,\n\037E"
    "RR_CODE_NAMING_FACTORY_EXISTED\020\351\374\377\377\377\377\377\377\377"
    "\001\022!\n\024ERR_CODE_ROUTER_BASE\020\214\374\377\377\377\377\377\377\377\001\022+\n\036"
    "ERR_CODE_ROUTER_NOT_SUPPORTTED\020\213\374\377\377\377\377\377\377\377"
    "\001\022*\n\035ERR_CODE_ROUTER_INVAILD_PARAM\020\212\374\377\377\377"
    "\377\377\377\377\001\022.\n!ERR_CODE_ROUTER_NONE_VALID_HAND"
    "LE\020\211\374\377\377\377\377\377\377\377\001\022-\n ERR_CODE_ROUTER_FACTORY"
    "_MAP_NULL\020\210\374\377\377\377\377\377\377\377\001\022,\n\037ERR_CODE_ROUTER_"
    "FACTORY_EXISTED\020\207\374\377\377\377\377\377\377\377\001\022:\n-NF_CODE_RO"
    "UTER_DISPATCHFAILD_DESTSVR_NOTEXIST\020\206\374\377\377"
    "\377\377\377\377\377\001\022 \n\023ERR_CODE_TIMER_BASE\020\250\373\377\377\377\377\377\377\377\001"
    "\022+\n\036ERR_CODE_STORESVR_ERRCODE_BUSY\020\303\372\377\377\377"
    "\377\377\377\377\001\022-\n ERR_CODE_STORESVR_ERRCODE_EINVA"
    "L\020\302\372\377\377\377\377\377\377\377\001\022<\n/ERR_CODE_STORESVR_ERRCOD"
    "E_PARSEFROMSTRINGFAILED\020\301\372\377\377\377\377\377\377\377\001\022\?\n2ER"
    "R_CODE_STORESVR_ERRCODE_DBNAME_OR_MODKEY"
    "_INVALID\020\300\372\377\377\377\377\377\377\377\001\0225\n(ERR_CODE_STORESVR"
    "_ERRCODE_TBNAME_INVALID\020\277\372\377\377\377\377\377\377\377\001\0223\n&ER"
    "R_CODE_STORESVR_ERRCODE_SELECT_EMPTY\020\276\372\377"
    "\377\377\377\377\377\377\001\022G\n:ERR_CODE_STORESVR_ERRCODE_SEL"
    "ECT_FILLMESSAGEBYRESULTFAILED\020\275\372\377\377\377\377\377\377\377\001"
    "\0223\n&ERR_CODE_STORESVR_ERRCODE_SELECTFAIL"
    "ED\020\274\372\377\377\377\377\377\377\377\001\0223\n&ERR_CODE_STORESVR_ERRCO"
    "DE_INSERTFAILED\020\271\372\377\377\377\377\377\377\377\001\0223\n&ERR_CODE_S"
    "TORESVR_ERRCODE_DELETEFAILED\020\270\372\377\377\377\377\377\377\377\001\022"
    "=\n0ERR_CODE_STORESVR_ERRCODE_DELETERECOR"
    "DISNOTEXIST\020\267\372\377\377\377\377\377\377\377\001\022=\n0ERR_CODE_STORE"
    "SVR_ERRCODE_UPDATERECORDISNOTEXIST\020\266\372\377\377\377"
    "\377\377\377\377\001\022:\n-ERR_CODE_STORESVR_ERRCODE_UPDAT"
    "ENOROWAFFECTED\020\265\372\377\377\377\377\377\377\377\001\0223\n&ERR_CODE_ST"
    "ORESVR_ERRCODE_UPDATEFAILED\020\264\372\377\377\377\377\377\377\377\001\0229"
    "\n,ERR_CODE_STORESVR_ERRCODE_UPDATEINSERT"
    "FAILED\020\263\372\377\377\377\377\377\377\377\001\022.\n!ERR_CODE_STORESVR_E"
    "RRCODE_UNKNOWN\020\262\372\377\377\377\377\377\377\377\001\022&\n\031ERR_CODE_CO"
    "_INVALID_PARAM\020\337\371\377\377\377\377\377\377\377\001\022)\n\034ERR_CODE_CO"
    "_NOT_IN_COROUTINE\020\336\371\377\377\377\377\377\377\377\001\022$\n\027ERR_CODE"
    "_CO_NOT_RUNNING\020\335\371\377\377\377\377\377\377\377\001\022+\n\036ERR_CODE_C"
    "O_START_TIMER_FAILED\020\334\371\377\377\377\377\377\377\377\001\022 \n\023ERR_C"
    "ODE_CO_TIMEOUT\020\333\371\377\377\377\377\377\377\377\001\0223\n&ERR_CODE_CO"
    "_CANNOT_RESUME_IN_COROUTINE\020\332\371\377\377\377\377\377\377\377\001\022*"
    "\n\035ERR_CODE_CO_COROUTINE_UNEXIST\020\331\371\377\377\377\377\377\377"
    "\377\001\022/\n\"ERR_CODE_CO_COROUTINE_STATUS_ERROR"
    "\020\327\371\377\377\377\377\377\377\377\001\022&\n\031ERR_CODE_NFBUS_ERR_PARAMS"
    "\020\373\370\377\377\377\377\377\377\377\001\022%\n\030ERR_CODE_NFBUS_ERR_INNER\020"
    "\372\370\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_NFBUS_ERR_NO_DATA"
    "\020\371\370\377\377\377\377\377\377\377\001\022*\n\035ERR_CODE_NFBUS_ERR_BUFF_L"
    "IMIT\020\370\370\377\377\377\377\377\377\377\001\022&\n\031ERR_CODE_NFBUS_ERR_MA"
    "LLOC\020\367\370\377\377\377\377\377\377\377\001\022&\n\031ERR_CODE_NFBUS_ERR_SC"
    "HEME\020\366\370\377\377\377\377\377\377\377\001\022(\n\033ERR_CODE_NFBUS_ERR_BA"
    "D_DATA\020\365\370\377\377\377\377\377\377\377\001\022,\n\037ERR_CODE_NFBUS_ERR_"
    "INVALID_SIZE\020\364\370\377\377\377\377\377\377\377\001\022*\n\035ERR_CODE_NFBU"
    "S_ERR_NOT_INITED\020\363\370\377\377\377\377\377\377\377\001\022.\n!ERR_CODE_"
    "NFBUS_ERR_ALREADY_INITED\020\362\370\377\377\377\377\377\377\377\001\022+\n\036E"
    "RR_CODE_NFBUS_ERR_ACCESS_DENY\020\361\370\377\377\377\377\377\377\377\001"
    "\022&\n\031ERR_CODE_NFBUS_ERR_UNPACK\020\360\370\377\377\377\377\377\377\377\001"
    "\022$\n\027ERR_CODE_NFBUS_ERR_PACK\020\357\370\377\377\377\377\377\377\377\001\0220"
    "\n#ERR_CODE_NFBUS_ERR_NFNODE_NOT_FOUND\020\350\370"
    "\377\377\377\377\377\377\377\001\0221\n$ERR_CODE_NFBUS_ERR_NFNODE_IN"
    "VALID_ID\020\373\370\377\377\377\377\377\377\377\001\0224\n\'ERR_CODE_NFBUS_ER"
    "R_NFNODE_NO_CONNECTION\020\371\370\377\377\377\377\377\377\377\001\0225\n(ERR"
    "_CODE_NFBUS_ERR_NFNODE_FAULT_TOLERANT\020\370\370"
    "\377\377\377\377\377\377\377\001\0222\n%ERR_CODE_NFBUS_ERR_NFNODE_IN"
    "VALID_MSG\020\367\370\377\377\377\377\377\377\377\001\0227\n*ERR_CODE_NFBUS_E"
    "RR_NFNODE_BUS_ID_NOT_MNFCH\020\366\370\377\377\377\377\377\377\377\001\022*\n"
    "\035ERR_CODE_NFBUS_ERR_NFNODE_TTL\020\365\370\377\377\377\377\377\377\377"
    "\001\0224\n\'ERR_CODE_NFBUS_ERR_NFNODE_MASK_CONF"
    "LICT\020\364\370\377\377\377\377\377\377\377\001\0222\n%ERR_CODE_NFBUS_ERR_NF"
    "NODE_ID_CONFLICT\020\363\370\377\377\377\377\377\377\377\001\0226\n)ERR_CODE_"
    "NFBUS_ERR_NFNODE_SRC_DST_IS_SAME\020\362\370\377\377\377\377\377"
    "\377\377\001\0226\n)ERR_CODE_NFBUS_ERR_CHANNEL_SIZE_T"
    "OO_SMALL\020\361\370\377\377\377\377\377\377\377\001\0226\n)ERR_CODE_NFBUS_ER"
    "R_CHANNEL_BUFFER_INVALID\020\360\370\377\377\377\377\377\377\377\001\0224\n\'E"
    "RR_CODE_NFBUS_ERR_CHANNEL_ADDR_INVALID\020\357"
    "\370\377\377\377\377\377\377\377\001\022/\n\"ERR_CODE_NFBUS_ERR_CHANNEL_"
    "CLOSING\020\356\370\377\377\377\377\377\377\377\001\0223\n&ERR_CODE_NFBUS_ERR"
    "_CHANNEL_NOT_SUPPORT\020\355\370\377\377\377\377\377\377\377\001\022;\n.ERR_C"
    "ODE_NFBUS_ERR_CHANNEL_UNSUPPORTED_VERSIO"
    "N\020\354\370\377\377\377\377\377\377\377\001\022;\n.ERR_CODE_NFBUS_ERR_CHANN"
    "EL_ALIGN_SIZE_MISMATCH\020\353\370\377\377\377\377\377\377\377\001\022<\n/ERR"
    "_CODE_NFBUS_ERR_CHANNEL_ARCH_SIZE_T_MISM"
    "ATCH\020\352\370\377\377\377\377\377\377\377\001\0227\n*ERR_CODE_NFBUS_ERR_NO"
    "DE_BAD_BLOCK_NODE_NUM\020\336\370\377\377\377\377\377\377\377\001\0228\n+ERR_"
    "CODE_NFBUS_ERR_NODE_BAD_BLOCK_BUFF_SIZE\020"
    "\324\370\377\377\377\377\377\377\377\001\0226\n)ERR_CODE_NFBUS_ERR_NODE_BA"
    "D_BLOCK_WSEQ_ID\020\312\370\377\377\377\377\377\377\377\001\0226\n)ERR_CODE_N"
    "FBUS_ERR_NODE_BAD_BLOCK_CSEQ_ID\020\300\370\377\377\377\377\377\377"
    "\377\001\022,\n\037ERR_CODE_NFBUS_ERR_NODE_TIMEOUT\020\266\370"
    "\377\377\377\377\377\377\377\001\022.\n!ERR_CODE_NFBUS_ERR_SHM_GET_F"
    "AILED\020\254\370\377\377\377\377\377\377\377\001\022-\n ERR_CODE_NFBUS_ERR_S"
    "HM_NOT_FOUND\020\253\370\377\377\377\377\377\377\377\001\0220\n#ERR_CODE_NFBU"
    "S_ERR_SHM_CLOSE_FAILED\020\252\370\377\377\377\377\377\377\377\001\0220\n#ERR"
    "_CODE_NFBUS_ERR_SHM_PATH_INVALID\020\251\370\377\377\377\377\377"
    "\377\377\001\022.\n!ERR_CODE_NFBUS_ERR_SHM_MAP_FAILED"
    "\020\250\370\377\377\377\377\377\377\377\001\0220\n#ERR_CODE_NFBUS_ERR_SOCK_B"
    "IND_FAILED\020\242\370\377\377\377\377\377\377\377\001\0222\n%ERR_CODE_NFBUS_"
    "ERR_SOCK_LISTEN_FAILED\020\241\370\377\377\377\377\377\377\377\001\0223\n&ERR"
    "_CODE_NFBUS_ERR_SOCK_CONNECT_FAILED\020\240\370\377\377"
    "\377\377\377\377\377\001\0220\n#ERR_CODE_NFBUS_ERR_PIPE_BIND_F"
    "AILED\020\230\370\377\377\377\377\377\377\377\001\0222\n%ERR_CODE_NFBUS_ERR_P"
    "IPE_LISTEN_FAILED\020\227\370\377\377\377\377\377\377\377\001\0223\n&ERR_CODE"
    "_NFBUS_ERR_PIPE_CONNECT_FAILED\020\226\370\377\377\377\377\377\377\377"
    "\001\0222\n%ERR_CODE_NFBUS_ERR_PIPE_ADDR_TOO_LO"
    "NG\020\225\370\377\377\377\377\377\377\377\001\0222\n%ERR_CODE_NFBUS_ERR_PIPE"
    "_REMOVE_FAILED\020\224\370\377\377\377\377\377\377\377\001\0222\n%ERR_CODE_NF"
    "BUS_ERR_DNS_GETADDR_FAILED\020\216\370\377\377\377\377\377\377\377\001\0224\n"
    "\'ERR_CODE_NFBUS_ERR_CONNECTION_NOT_FOUND"
    "\020\215\370\377\377\377\377\377\377\377\001\022,\n\037ERR_CODE_NFBUS_ERR_WRITE_"
    "FAILED\020\214\370\377\377\377\377\377\377\377\001\022+\n\036ERR_CODE_NFBUS_ERR_"
    "READ_FAILED\020\213\370\377\377\377\377\377\377\377\001\022&\n\031ERR_CODE_NFBUS"
    "_ERR_EV_RUN\020\211\370\377\377\377\377\377\377\377\001\022)\n\034ERR_CODE_NFBUS"
    "_ERR_NO_LISTEN\020\211\370\377\377\377\377\377\377\377\001\022\'\n\032ERR_CODE_NF"
    "BUS_ERR_CLOSING\020\210\370\377\377\377\377\377\377\377\001\032\002\020\001*r\n\016NFEven"
    "tSrcType\022\026\n\022NF_EVENT_NONE_TYPE\020\000\022\030\n\024NF_E"
    "VENT_SERVER_TYPE\020\001\022\024\n\020NF_EVENT_GM_TYPE\020\002"
    "\022\030\n\024NF_EVENT_PLAYER_TYPE\020\003*\371\004\n\rNFEventId"
    "Type\022\036\n\032NF_EVENT_SERVER_TYPE_BEGIN\020\001\022\'\n#"
    "NF_EVENT_SERVER_CONNECT_TASK_FINISH\020\002\022#\n"
    "\037NF_EVENT_SERVER_LOAD_DESC_STORE\020\003\022$\n NF"
    "_EVENT_SERVER_OBJ_LOAD_FROM_DB\020\004\022%\n!NF_E"
    "VENT_SERVER_APP_FINISH_INITED\020\005\022\036\n\032NF_EV"
    "ENT_SERVER_DEAD_EVENT\020\006\022\035\n\031NF_EVENT_SERV"
    "ER_REG_EVENT\020\007\022#\n\037NF_EVENT_GAME_SERVER_D"
    "UMP_EVENT\020\010\022$\n NF_EVENT_LOGIC_SERVER_DUM"
    "P_EVENT\020\t\022\034\n\030NF_EVENT_SERVER_TYPE_END\020c\022"
    "\032\n\026NF_EVENT_GM_TYPE_BEGIN\020d\022\031\n\024NF_EVENT_"
    "GM_TYPE_END\020\307\001\022\037\n\032NF_EVENT_PLAYER_TYPE_B"
    "EGIN\020\310\001\022\"\n\035NF_EVENT_PLAYER_LOGIN_SUCCESS"
    "\020\311\001\022!\n\034NF_EVENT_PLAYER_LOGIN_FAILED\020\312\001\022&"
    "\n!NF_EVENT_PLAYER_RECONNECT_SUCCESS\020\313\001\022\037"
    "\n\032NF_EVENT_PLAYER_DISCONNECT\020\314\001\022\035\n\030NF_EV"
    "ENT_PLAYER_TYPE_END\020\253\002", 13182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_kernel.proto", &protobuf_RegisterTypes);
  Proto_DispInfo::default_instance_ = new Proto_DispInfo();
  Proto_StoreInfo_CB::default_instance_ = new Proto_StoreInfo_CB();
  Proto_StoreInfo::default_instance_ = new Proto_StoreInfo();
  Proto_EventInfo::default_instance_ = new Proto_EventInfo();
  Proto_ScriptRpcResult::default_instance_ = new Proto_ScriptRpcResult();
  Proto_RpcInfo::default_instance_ = new Proto_RpcInfo();
  Proto_RedirectInfo::default_instance_ = new Proto_RedirectInfo();
  Proto_SvrPkg::default_instance_ = new Proto_SvrPkg();
  ServerInfoReport::default_instance_ = new ServerInfoReport();
  ServerInfoReportList::default_instance_ = new ServerInfoReportList();
  ServerInfoReportListRespne::default_instance_ = new ServerInfoReportListRespne();
  ZkServerInfo::default_instance_ = new ZkServerInfo();
  DynLibFileInfo::default_instance_ = new DynLibFileInfo();
  DynLibFileInfoArray::default_instance_ = new DynLibFileInfoArray();
  Proto_KillAllServerNtf::default_instance_ = new Proto_KillAllServerNtf();
  Proto_KillAllServerRsp::default_instance_ = new Proto_KillAllServerRsp();
  Proto_STSBroadPlayerMsgNotify::default_instance_ = new Proto_STSBroadPlayerMsgNotify();
  Proto_STWebMsgRspNotify::default_instance_ = new Proto_STWebMsgRspNotify();
  BehaviorLogHeader::default_instance_ = new BehaviorLogHeader();
  NFEventNoneData::default_instance_ = new NFEventNoneData();
  NFEventScriptData::default_instance_ = new NFEventScriptData();
  Proto_ServerDumpInfoNtf::default_instance_ = new Proto_ServerDumpInfoNtf();
  Proto_DispInfo::default_instance_->InitAsDefaultInstance();
  Proto_StoreInfo_CB::default_instance_->InitAsDefaultInstance();
  Proto_StoreInfo::default_instance_->InitAsDefaultInstance();
  Proto_EventInfo::default_instance_->InitAsDefaultInstance();
  Proto_ScriptRpcResult::default_instance_->InitAsDefaultInstance();
  Proto_RpcInfo::default_instance_->InitAsDefaultInstance();
  Proto_RedirectInfo::default_instance_->InitAsDefaultInstance();
  Proto_SvrPkg::default_instance_->InitAsDefaultInstance();
  ServerInfoReport::default_instance_->InitAsDefaultInstance();
  ServerInfoReportList::default_instance_->InitAsDefaultInstance();
  ServerInfoReportListRespne::default_instance_->InitAsDefaultInstance();
  ZkServerInfo::default_instance_->InitAsDefaultInstance();
  DynLibFileInfo::default_instance_->InitAsDefaultInstance();
  DynLibFileInfoArray::default_instance_->InitAsDefaultInstance();
  Proto_KillAllServerNtf::default_instance_->InitAsDefaultInstance();
  Proto_KillAllServerRsp::default_instance_->InitAsDefaultInstance();
  Proto_STSBroadPlayerMsgNotify::default_instance_->InitAsDefaultInstance();
  Proto_STWebMsgRspNotify::default_instance_->InitAsDefaultInstance();
  BehaviorLogHeader::default_instance_->InitAsDefaultInstance();
  NFEventNoneData::default_instance_->InitAsDefaultInstance();
  NFEventScriptData::default_instance_->InitAsDefaultInstance();
  Proto_ServerDumpInfoNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fkernel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fkernel_2eproto {
  StaticDescriptorInitializer_proto_5fkernel_2eproto() {
    protobuf_AddDesc_proto_5fkernel_2eproto();
  }
} static_descriptor_initializer_proto_5fkernel_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_Kernel_CMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Kernel_CMD_descriptor_;
}
bool Proto_Kernel_CMD_IsValid(int value) {
  switch(value) {
    case 1500:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5044:
    case 5080:
    case 5081:
    case 5082:
    case 5083:
    case 5084:
    case 5085:
    case 5086:
    case 5087:
    case 5090:
    case 5091:
    case 5092:
    case 5093:
    case 5094:
    case 5095:
    case 5096:
    case 5097:
    case 5101:
    case 5102:
    case 5103:
    case 5104:
    case 5105:
    case 5106:
    case 5107:
    case 5108:
    case 5109:
    case 5110:
    case 5111:
    case 5112:
    case 5113:
    case 5114:
    case 5115:
    case 5116:
    case 5119:
    case 5120:
    case 5121:
    case 5122:
    case 5123:
    case 5124:
    case 5125:
    case 5126:
    case 5127:
    case 5128:
    case 5200:
    case 5201:
    case 5202:
    case 5203:
    case 5204:
    case 5205:
    case 5206:
    case 5207:
    case 5208:
    case 5209:
    case 5210:
    case 5211:
    case 5212:
    case 5213:
    case 5214:
    case 5215:
    case 5216:
    case 5217:
    case 5218:
    case 5219:
    case 5220:
    case 5221:
    case 5222:
    case 5223:
    case 5224:
    case 5225:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PacketDispType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketDispType_descriptor_;
}
bool PacketDispType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServerState_descriptor_;
}
bool EServerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_Kernel_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Kernel_ErrorCode_descriptor_;
}
bool Proto_Kernel_ErrorCode_IsValid(int value) {
  switch(value) {
    case -1016:
    case -1015:
    case -1013:
    case -1012:
    case -1011:
    case -1010:
    case -1004:
    case -1003:
    case -1002:
    case -1001:
    case -1000:
    case -992:
    case -991:
    case -990:
    case -984:
    case -983:
    case -982:
    case -981:
    case -980:
    case -970:
    case -960:
    case -950:
    case -940:
    case -930:
    case -920:
    case -918:
    case -917:
    case -916:
    case -915:
    case -914:
    case -913:
    case -912:
    case -911:
    case -910:
    case -909:
    case -908:
    case -907:
    case -906:
    case -905:
    case -904:
    case -903:
    case -902:
    case -901:
    case -809:
    case -807:
    case -806:
    case -805:
    case -804:
    case -803:
    case -802:
    case -801:
    case -718:
    case -717:
    case -716:
    case -715:
    case -714:
    case -713:
    case -712:
    case -711:
    case -708:
    case -707:
    case -706:
    case -705:
    case -704:
    case -703:
    case -702:
    case -701:
    case -600:
    case -506:
    case -505:
    case -504:
    case -503:
    case -502:
    case -501:
    case -500:
    case -407:
    case -406:
    case -405:
    case -404:
    case -403:
    case -402:
    case -401:
    case -400:
    case -300:
    case -227:
    case -226:
    case -225:
    case -224:
    case -223:
    case -222:
    case -221:
    case -220:
    case -219:
    case -218:
    case -217:
    case -216:
    case -215:
    case -214:
    case -213:
    case -212:
    case -211:
    case -210:
    case -209:
    case -208:
    case -207:
    case -206:
    case -205:
    case -204:
    case -203:
    case -201:
    case -200:
    case -117:
    case -116:
    case -115:
    case -114:
    case -113:
    case -112:
    case -111:
    case -110:
    case -109:
    case -108:
    case -107:
    case -106:
    case -105:
    case -104:
    case -103:
    case -102:
    case -101:
    case -100:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NFEventSrcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFEventSrcType_descriptor_;
}
bool NFEventSrcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NFEventIdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFEventIdType_descriptor_;
}
bool NFEventIdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 99:
    case 100:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 299:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_DispInfo::kUserIdFieldNumber;
const int Proto_DispInfo::kReqTransIdFieldNumber;
const int Proto_DispInfo::kRspTransIdFieldNumber;
#endif  // !_MSC_VER

Proto_DispInfo::Proto_DispInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_DispInfo::InitAsDefaultInstance() {
}

Proto_DispInfo::Proto_DispInfo(const Proto_DispInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_DispInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  req_trans_id_ = 0;
  rsp_trans_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_DispInfo::~Proto_DispInfo() {
  SharedDtor();
}

void Proto_DispInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_DispInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_DispInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_DispInfo_descriptor_;
}

const Proto_DispInfo& Proto_DispInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_DispInfo* Proto_DispInfo::default_instance_ = NULL;

Proto_DispInfo* Proto_DispInfo::New() const {
  return new Proto_DispInfo;
}

void Proto_DispInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    req_trans_id_ = 0;
    rsp_trans_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_DispInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_req_trans_id;
        break;
      }

      // optional int32 req_trans_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_trans_id_)));
          set_has_req_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rsp_trans_id;
        break;
      }

      // optional int32 rsp_trans_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsp_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_trans_id_)));
          set_has_rsp_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_DispInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int32 req_trans_id = 2;
  if (has_req_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->req_trans_id(), output);
  }

  // optional int32 rsp_trans_id = 3;
  if (has_rsp_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rsp_trans_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_DispInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 req_trans_id = 2;
  if (has_req_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->req_trans_id(), target);
  }

  // optional int32 rsp_trans_id = 3;
  if (has_rsp_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rsp_trans_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_DispInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int32 req_trans_id = 2;
    if (has_req_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_trans_id());
    }

    // optional int32 rsp_trans_id = 3;
    if (has_rsp_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_trans_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_DispInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_DispInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_DispInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_DispInfo::MergeFrom(const Proto_DispInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_req_trans_id()) {
      set_req_trans_id(from.req_trans_id());
    }
    if (from.has_rsp_trans_id()) {
      set_rsp_trans_id(from.rsp_trans_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_DispInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_DispInfo::CopyFrom(const Proto_DispInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_DispInfo::IsInitialized() const {

  return true;
}

void Proto_DispInfo::Swap(Proto_DispInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(req_trans_id_, other->req_trans_id_);
    std::swap(rsp_trans_id_, other->rsp_trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_DispInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_DispInfo_descriptor_;
  metadata.reflection = Proto_DispInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_StoreInfo_CB::kTypeFieldNumber;
const int Proto_StoreInfo_CB::kIdFieldNumber;
const int Proto_StoreInfo_CB::kTableIdFieldNumber;
const int Proto_StoreInfo_CB::kSeqFieldNumber;
#endif  // !_MSC_VER

Proto_StoreInfo_CB::Proto_StoreInfo_CB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_StoreInfo_CB::InitAsDefaultInstance() {
}

Proto_StoreInfo_CB::Proto_StoreInfo_CB(const Proto_StoreInfo_CB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_StoreInfo_CB::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  table_id_ = 0u;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_StoreInfo_CB::~Proto_StoreInfo_CB() {
  SharedDtor();
}

void Proto_StoreInfo_CB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_StoreInfo_CB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_StoreInfo_CB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_StoreInfo_CB_descriptor_;
}

const Proto_StoreInfo_CB& Proto_StoreInfo_CB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_StoreInfo_CB* Proto_StoreInfo_CB::default_instance_ = NULL;

Proto_StoreInfo_CB* Proto_StoreInfo_CB::New() const {
  return new Proto_StoreInfo_CB;
}

void Proto_StoreInfo_CB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    table_id_ = 0u;
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_StoreInfo_CB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.PacketDispType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::PacketDispType_IsValid(value)) {
            set_type(static_cast< ::proto_ff::PacketDispType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_table_id;
        break;
      }

      // optional uint32 table_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_StoreInfo_CB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.PacketDispType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 table_id = 3;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->table_id(), output);
  }

  // optional uint32 seq = 4;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_StoreInfo_CB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.PacketDispType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 table_id = 3;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->table_id(), target);
  }

  // optional uint32 seq = 4;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_StoreInfo_CB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.PacketDispType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 table_id = 3;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_id());
    }

    // optional uint32 seq = 4;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_StoreInfo_CB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_StoreInfo_CB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_StoreInfo_CB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_StoreInfo_CB::MergeFrom(const Proto_StoreInfo_CB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_StoreInfo_CB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_StoreInfo_CB::CopyFrom(const Proto_StoreInfo_CB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_StoreInfo_CB::IsInitialized() const {

  return true;
}

void Proto_StoreInfo_CB::Swap(Proto_StoreInfo_CB* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(table_id_, other->table_id_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_StoreInfo_CB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_StoreInfo_CB_descriptor_;
  metadata.reflection = Proto_StoreInfo_CB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_StoreInfo::kCmdFieldNumber;
const int Proto_StoreInfo::kErrCodeFieldNumber;
const int Proto_StoreInfo::kCbDataFieldNumber;
#endif  // !_MSC_VER

Proto_StoreInfo::Proto_StoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_StoreInfo::InitAsDefaultInstance() {
  cb_data_ = const_cast< ::proto_ff::Proto_StoreInfo_CB*>(&::proto_ff::Proto_StoreInfo_CB::default_instance());
}

Proto_StoreInfo::Proto_StoreInfo(const Proto_StoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_StoreInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0u;
  err_code_ = 0;
  cb_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_StoreInfo::~Proto_StoreInfo() {
  SharedDtor();
}

void Proto_StoreInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cb_data_;
  }
}

void Proto_StoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_StoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_StoreInfo_descriptor_;
}

const Proto_StoreInfo& Proto_StoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_StoreInfo* Proto_StoreInfo::default_instance_ = NULL;

Proto_StoreInfo* Proto_StoreInfo::New() const {
  return new Proto_StoreInfo;
}

void Proto_StoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0u;
    err_code_ = 0;
    if (has_cb_data()) {
      if (cb_data_ != NULL) cb_data_->::proto_ff::Proto_StoreInfo_CB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_StoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err_code;
        break;
      }

      // optional int32 err_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cb_data;
        break;
      }

      // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_StoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cmd(), output);
  }

  // optional int32 err_code = 2;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_code(), output);
  }

  // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
  if (has_cb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cb_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_StoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cmd(), target);
  }

  // optional int32 err_code = 2;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_code(), target);
  }

  // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
  if (has_cb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cb_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_StoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional int32 err_code = 2;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_code());
    }

    // optional .proto_ff.Proto_StoreInfo_CB cb_data = 3;
    if (has_cb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cb_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_StoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_StoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_StoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_StoreInfo::MergeFrom(const Proto_StoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_cb_data()) {
      mutable_cb_data()->::proto_ff::Proto_StoreInfo_CB::MergeFrom(from.cb_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_StoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_StoreInfo::CopyFrom(const Proto_StoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_StoreInfo::IsInitialized() const {

  return true;
}

void Proto_StoreInfo::Swap(Proto_StoreInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(err_code_, other->err_code_);
    std::swap(cb_data_, other->cb_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_StoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_StoreInfo_descriptor_;
  metadata.reflection = Proto_StoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_EventInfo::kServerTypeFieldNumber;
const int Proto_EventInfo::kEventIdFieldNumber;
const int Proto_EventInfo::kSrcTypeFieldNumber;
const int Proto_EventInfo::kSrcIdFieldNumber;
const int Proto_EventInfo::kFullMessageNameFieldNumber;
#endif  // !_MSC_VER

Proto_EventInfo::Proto_EventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_EventInfo::InitAsDefaultInstance() {
}

Proto_EventInfo::Proto_EventInfo(const Proto_EventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_EventInfo::SharedCtor() {
  _cached_size_ = 0;
  server_type_ = 0u;
  event_id_ = GOOGLE_ULONGLONG(0);
  src_type_ = GOOGLE_ULONGLONG(0);
  src_id_ = GOOGLE_ULONGLONG(0);
  full_message_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_EventInfo::~Proto_EventInfo() {
  SharedDtor();
}

void Proto_EventInfo::SharedDtor() {
  if (full_message_name_ != &::google::protobuf::internal::kEmptyString) {
    delete full_message_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_EventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_EventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_EventInfo_descriptor_;
}

const Proto_EventInfo& Proto_EventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_EventInfo* Proto_EventInfo::default_instance_ = NULL;

Proto_EventInfo* Proto_EventInfo::New() const {
  return new Proto_EventInfo;
}

void Proto_EventInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_type_ = 0u;
    event_id_ = GOOGLE_ULONGLONG(0);
    src_type_ = GOOGLE_ULONGLONG(0);
    src_id_ = GOOGLE_ULONGLONG(0);
    if (has_full_message_name()) {
      if (full_message_name_ != &::google::protobuf::internal::kEmptyString) {
        full_message_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_EventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint64 event_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_type;
        break;
      }

      // optional uint64 src_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_type_)));
          set_has_src_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_src_id;
        break;
      }

      // optional uint64 src_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_full_message_name;
        break;
      }

      // optional string full_message_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_message_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_message_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_message_name().data(), this->full_message_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_EventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // optional uint64 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_id(), output);
  }

  // optional uint64 src_type = 3;
  if (has_src_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->src_type(), output);
  }

  // optional uint64 src_id = 4;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->src_id(), output);
  }

  // optional string full_message_name = 5;
  if (has_full_message_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_message_name().data(), this->full_message_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->full_message_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_EventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_type = 1;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // optional uint64 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_id(), target);
  }

  // optional uint64 src_type = 3;
  if (has_src_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->src_type(), target);
  }

  // optional uint64 src_id = 4;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->src_id(), target);
  }

  // optional string full_message_name = 5;
  if (has_full_message_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_message_name().data(), this->full_message_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->full_message_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_EventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_type = 1;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional uint64 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint64 src_type = 3;
    if (has_src_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_type());
    }

    // optional uint64 src_id = 4;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_id());
    }

    // optional string full_message_name = 5;
    if (has_full_message_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_message_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_EventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_EventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_EventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_EventInfo::MergeFrom(const Proto_EventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_src_type()) {
      set_src_type(from.src_type());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_full_message_name()) {
      set_full_message_name(from.full_message_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_EventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_EventInfo::CopyFrom(const Proto_EventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_EventInfo::IsInitialized() const {

  return true;
}

void Proto_EventInfo::Swap(Proto_EventInfo* other) {
  if (other != this) {
    std::swap(server_type_, other->server_type_);
    std::swap(event_id_, other->event_id_);
    std::swap(src_type_, other->src_type_);
    std::swap(src_id_, other->src_id_);
    std::swap(full_message_name_, other->full_message_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_EventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_EventInfo_descriptor_;
  metadata.reflection = Proto_EventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_ScriptRpcResult::kReqTypeFieldNumber;
const int Proto_ScriptRpcResult::kRspTypeFieldNumber;
const int Proto_ScriptRpcResult::kResponeFieldNumber;
#endif  // !_MSC_VER

Proto_ScriptRpcResult::Proto_ScriptRpcResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_ScriptRpcResult::InitAsDefaultInstance() {
}

Proto_ScriptRpcResult::Proto_ScriptRpcResult(const Proto_ScriptRpcResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_ScriptRpcResult::SharedCtor() {
  _cached_size_ = 0;
  req_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rsp_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  respone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_ScriptRpcResult::~Proto_ScriptRpcResult() {
  SharedDtor();
}

void Proto_ScriptRpcResult::SharedDtor() {
  if (req_type_ != &::google::protobuf::internal::kEmptyString) {
    delete req_type_;
  }
  if (rsp_type_ != &::google::protobuf::internal::kEmptyString) {
    delete rsp_type_;
  }
  if (respone_ != &::google::protobuf::internal::kEmptyString) {
    delete respone_;
  }
  if (this != default_instance_) {
  }
}

void Proto_ScriptRpcResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_ScriptRpcResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_ScriptRpcResult_descriptor_;
}

const Proto_ScriptRpcResult& Proto_ScriptRpcResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_ScriptRpcResult* Proto_ScriptRpcResult::default_instance_ = NULL;

Proto_ScriptRpcResult* Proto_ScriptRpcResult::New() const {
  return new Proto_ScriptRpcResult;
}

void Proto_ScriptRpcResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_type()) {
      if (req_type_ != &::google::protobuf::internal::kEmptyString) {
        req_type_->clear();
      }
    }
    if (has_rsp_type()) {
      if (rsp_type_ != &::google::protobuf::internal::kEmptyString) {
        rsp_type_->clear();
      }
    }
    if (has_respone()) {
      if (respone_ != &::google::protobuf::internal::kEmptyString) {
        respone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_ScriptRpcResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string req_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->req_type().data(), this->req_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rsp_type;
        break;
      }

      // optional string rsp_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsp_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsp_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rsp_type().data(), this->rsp_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_respone;
        break;
      }

      // optional string respone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_respone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_respone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->respone().data(), this->respone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_ScriptRpcResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string req_type = 1;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_type().data(), this->req_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->req_type(), output);
  }

  // optional string rsp_type = 2;
  if (has_rsp_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsp_type().data(), this->rsp_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rsp_type(), output);
  }

  // optional string respone = 3;
  if (has_respone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->respone().data(), this->respone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->respone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_ScriptRpcResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string req_type = 1;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_type().data(), this->req_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req_type(), target);
  }

  // optional string rsp_type = 2;
  if (has_rsp_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rsp_type().data(), this->rsp_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rsp_type(), target);
  }

  // optional string respone = 3;
  if (has_respone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->respone().data(), this->respone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->respone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_ScriptRpcResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string req_type = 1;
    if (has_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_type());
    }

    // optional string rsp_type = 2;
    if (has_rsp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rsp_type());
    }

    // optional string respone = 3;
    if (has_respone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->respone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_ScriptRpcResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_ScriptRpcResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_ScriptRpcResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_ScriptRpcResult::MergeFrom(const Proto_ScriptRpcResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_rsp_type()) {
      set_rsp_type(from.rsp_type());
    }
    if (from.has_respone()) {
      set_respone(from.respone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_ScriptRpcResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_ScriptRpcResult::CopyFrom(const Proto_ScriptRpcResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_ScriptRpcResult::IsInitialized() const {

  return true;
}

void Proto_ScriptRpcResult::Swap(Proto_ScriptRpcResult* other) {
  if (other != this) {
    std::swap(req_type_, other->req_type_);
    std::swap(rsp_type_, other->rsp_type_);
    std::swap(respone_, other->respone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_ScriptRpcResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_ScriptRpcResult_descriptor_;
  metadata.reflection = Proto_ScriptRpcResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_RpcInfo::kReqRpcIdFieldNumber;
const int Proto_RpcInfo::kRspRpcIdFieldNumber;
const int Proto_RpcInfo::kRpcRetCodeFieldNumber;
const int Proto_RpcInfo::kReqRpcHashFieldNumber;
const int Proto_RpcInfo::kRspRpcHashFieldNumber;
const int Proto_RpcInfo::kReqBusIdFieldNumber;
const int Proto_RpcInfo::kReqServerTypeFieldNumber;
const int Proto_RpcInfo::kIsScriptRpcFieldNumber;
#endif  // !_MSC_VER

Proto_RpcInfo::Proto_RpcInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_RpcInfo::InitAsDefaultInstance() {
}

Proto_RpcInfo::Proto_RpcInfo(const Proto_RpcInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_RpcInfo::SharedCtor() {
  _cached_size_ = 0;
  req_rpc_id_ = GOOGLE_LONGLONG(0);
  rsp_rpc_id_ = GOOGLE_LONGLONG(0);
  rpc_ret_code_ = 0;
  req_rpc_hash_ = GOOGLE_ULONGLONG(0);
  rsp_rpc_hash_ = GOOGLE_ULONGLONG(0);
  req_bus_id_ = 0u;
  req_server_type_ = GOOGLE_ULONGLONG(0);
  is_script_rpc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_RpcInfo::~Proto_RpcInfo() {
  SharedDtor();
}

void Proto_RpcInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_RpcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_RpcInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_RpcInfo_descriptor_;
}

const Proto_RpcInfo& Proto_RpcInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_RpcInfo* Proto_RpcInfo::default_instance_ = NULL;

Proto_RpcInfo* Proto_RpcInfo::New() const {
  return new Proto_RpcInfo;
}

void Proto_RpcInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    req_rpc_id_ = GOOGLE_LONGLONG(0);
    rsp_rpc_id_ = GOOGLE_LONGLONG(0);
    rpc_ret_code_ = 0;
    req_rpc_hash_ = GOOGLE_ULONGLONG(0);
    rsp_rpc_hash_ = GOOGLE_ULONGLONG(0);
    req_bus_id_ = 0u;
    req_server_type_ = GOOGLE_ULONGLONG(0);
    is_script_rpc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_RpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 req_rpc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &req_rpc_id_)));
          set_has_req_rpc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rsp_rpc_id;
        break;
      }

      // optional int64 rsp_rpc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsp_rpc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rsp_rpc_id_)));
          set_has_rsp_rpc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rpc_ret_code;
        break;
      }

      // optional int32 rpc_ret_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpc_ret_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_ret_code_)));
          set_has_rpc_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_req_rpc_hash;
        break;
      }

      // optional uint64 req_rpc_hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_rpc_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_rpc_hash_)));
          set_has_req_rpc_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rsp_rpc_hash;
        break;
      }

      // optional uint64 rsp_rpc_hash = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rsp_rpc_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rsp_rpc_hash_)));
          set_has_rsp_rpc_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_req_bus_id;
        break;
      }

      // optional uint32 req_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_bus_id_)));
          set_has_req_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_req_server_type;
        break;
      }

      // optional uint64 req_server_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &req_server_type_)));
          set_has_req_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_script_rpc;
        break;
      }

      // optional bool is_script_rpc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_script_rpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_script_rpc_)));
          set_has_is_script_rpc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_RpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 req_rpc_id = 1;
  if (has_req_rpc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->req_rpc_id(), output);
  }

  // optional int64 rsp_rpc_id = 2;
  if (has_rsp_rpc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rsp_rpc_id(), output);
  }

  // optional int32 rpc_ret_code = 3;
  if (has_rpc_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rpc_ret_code(), output);
  }

  // optional uint64 req_rpc_hash = 4;
  if (has_req_rpc_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->req_rpc_hash(), output);
  }

  // optional uint64 rsp_rpc_hash = 5;
  if (has_rsp_rpc_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->rsp_rpc_hash(), output);
  }

  // optional uint32 req_bus_id = 6;
  if (has_req_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->req_bus_id(), output);
  }

  // optional uint64 req_server_type = 7;
  if (has_req_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->req_server_type(), output);
  }

  // optional bool is_script_rpc = 8;
  if (has_is_script_rpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_script_rpc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_RpcInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 req_rpc_id = 1;
  if (has_req_rpc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->req_rpc_id(), target);
  }

  // optional int64 rsp_rpc_id = 2;
  if (has_rsp_rpc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rsp_rpc_id(), target);
  }

  // optional int32 rpc_ret_code = 3;
  if (has_rpc_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rpc_ret_code(), target);
  }

  // optional uint64 req_rpc_hash = 4;
  if (has_req_rpc_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->req_rpc_hash(), target);
  }

  // optional uint64 rsp_rpc_hash = 5;
  if (has_rsp_rpc_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->rsp_rpc_hash(), target);
  }

  // optional uint32 req_bus_id = 6;
  if (has_req_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->req_bus_id(), target);
  }

  // optional uint64 req_server_type = 7;
  if (has_req_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->req_server_type(), target);
  }

  // optional bool is_script_rpc = 8;
  if (has_is_script_rpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_script_rpc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_RpcInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 req_rpc_id = 1;
    if (has_req_rpc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->req_rpc_id());
    }

    // optional int64 rsp_rpc_id = 2;
    if (has_rsp_rpc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rsp_rpc_id());
    }

    // optional int32 rpc_ret_code = 3;
    if (has_rpc_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpc_ret_code());
    }

    // optional uint64 req_rpc_hash = 4;
    if (has_req_rpc_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_rpc_hash());
    }

    // optional uint64 rsp_rpc_hash = 5;
    if (has_rsp_rpc_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rsp_rpc_hash());
    }

    // optional uint32 req_bus_id = 6;
    if (has_req_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_bus_id());
    }

    // optional uint64 req_server_type = 7;
    if (has_req_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->req_server_type());
    }

    // optional bool is_script_rpc = 8;
    if (has_is_script_rpc()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_RpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_RpcInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_RpcInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_RpcInfo::MergeFrom(const Proto_RpcInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_rpc_id()) {
      set_req_rpc_id(from.req_rpc_id());
    }
    if (from.has_rsp_rpc_id()) {
      set_rsp_rpc_id(from.rsp_rpc_id());
    }
    if (from.has_rpc_ret_code()) {
      set_rpc_ret_code(from.rpc_ret_code());
    }
    if (from.has_req_rpc_hash()) {
      set_req_rpc_hash(from.req_rpc_hash());
    }
    if (from.has_rsp_rpc_hash()) {
      set_rsp_rpc_hash(from.rsp_rpc_hash());
    }
    if (from.has_req_bus_id()) {
      set_req_bus_id(from.req_bus_id());
    }
    if (from.has_req_server_type()) {
      set_req_server_type(from.req_server_type());
    }
    if (from.has_is_script_rpc()) {
      set_is_script_rpc(from.is_script_rpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_RpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_RpcInfo::CopyFrom(const Proto_RpcInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_RpcInfo::IsInitialized() const {

  return true;
}

void Proto_RpcInfo::Swap(Proto_RpcInfo* other) {
  if (other != this) {
    std::swap(req_rpc_id_, other->req_rpc_id_);
    std::swap(rsp_rpc_id_, other->rsp_rpc_id_);
    std::swap(rpc_ret_code_, other->rpc_ret_code_);
    std::swap(req_rpc_hash_, other->req_rpc_hash_);
    std::swap(rsp_rpc_hash_, other->rsp_rpc_hash_);
    std::swap(req_bus_id_, other->req_bus_id_);
    std::swap(req_server_type_, other->req_server_type_);
    std::swap(is_script_rpc_, other->is_script_rpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_RpcInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_RpcInfo_descriptor_;
  metadata.reflection = Proto_RpcInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_RedirectInfo::kIdFieldNumber;
#endif  // !_MSC_VER

Proto_RedirectInfo::Proto_RedirectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_RedirectInfo::InitAsDefaultInstance() {
}

Proto_RedirectInfo::Proto_RedirectInfo(const Proto_RedirectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_RedirectInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_RedirectInfo::~Proto_RedirectInfo() {
  SharedDtor();
}

void Proto_RedirectInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_RedirectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_RedirectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_RedirectInfo_descriptor_;
}

const Proto_RedirectInfo& Proto_RedirectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_RedirectInfo* Proto_RedirectInfo::default_instance_ = NULL;

Proto_RedirectInfo* Proto_RedirectInfo::New() const {
  return new Proto_RedirectInfo;
}

void Proto_RedirectInfo::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_RedirectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_RedirectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_RedirectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_RedirectInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint64 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_RedirectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_RedirectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_RedirectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_RedirectInfo::MergeFrom(const Proto_RedirectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_RedirectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_RedirectInfo::CopyFrom(const Proto_RedirectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_RedirectInfo::IsInitialized() const {

  return true;
}

void Proto_RedirectInfo::Swap(Proto_RedirectInfo* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_RedirectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_RedirectInfo_descriptor_;
  metadata.reflection = Proto_RedirectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SvrPkg::kMsgIdFieldNumber;
const int Proto_SvrPkg::kMsgDataFieldNumber;
const int Proto_SvrPkg::kDispInfoFieldNumber;
const int Proto_SvrPkg::kStoreInfoFieldNumber;
const int Proto_SvrPkg::kEventInfoFieldNumber;
const int Proto_SvrPkg::kRedirectInfoFieldNumber;
const int Proto_SvrPkg::kRpcInfoFieldNumber;
#endif  // !_MSC_VER

Proto_SvrPkg::Proto_SvrPkg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SvrPkg::InitAsDefaultInstance() {
  disp_info_ = const_cast< ::proto_ff::Proto_DispInfo*>(&::proto_ff::Proto_DispInfo::default_instance());
  store_info_ = const_cast< ::proto_ff::Proto_StoreInfo*>(&::proto_ff::Proto_StoreInfo::default_instance());
  event_info_ = const_cast< ::proto_ff::Proto_EventInfo*>(&::proto_ff::Proto_EventInfo::default_instance());
  redirect_info_ = const_cast< ::proto_ff::Proto_RedirectInfo*>(&::proto_ff::Proto_RedirectInfo::default_instance());
  rpc_info_ = const_cast< ::proto_ff::Proto_RpcInfo*>(&::proto_ff::Proto_RpcInfo::default_instance());
}

Proto_SvrPkg::Proto_SvrPkg(const Proto_SvrPkg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SvrPkg::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disp_info_ = NULL;
  store_info_ = NULL;
  event_info_ = NULL;
  redirect_info_ = NULL;
  rpc_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SvrPkg::~Proto_SvrPkg() {
  SharedDtor();
}

void Proto_SvrPkg::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
    delete disp_info_;
    delete store_info_;
    delete event_info_;
    delete redirect_info_;
    delete rpc_info_;
  }
}

void Proto_SvrPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SvrPkg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SvrPkg_descriptor_;
}

const Proto_SvrPkg& Proto_SvrPkg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_SvrPkg* Proto_SvrPkg::default_instance_ = NULL;

Proto_SvrPkg* Proto_SvrPkg::New() const {
  return new Proto_SvrPkg;
}

void Proto_SvrPkg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 0;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
    if (has_disp_info()) {
      if (disp_info_ != NULL) disp_info_->::proto_ff::Proto_DispInfo::Clear();
    }
    if (has_store_info()) {
      if (store_info_ != NULL) store_info_->::proto_ff::Proto_StoreInfo::Clear();
    }
    if (has_event_info()) {
      if (event_info_ != NULL) event_info_->::proto_ff::Proto_EventInfo::Clear();
    }
    if (has_redirect_info()) {
      if (redirect_info_ != NULL) redirect_info_->::proto_ff::Proto_RedirectInfo::Clear();
    }
    if (has_rpc_info()) {
      if (rpc_info_ != NULL) rpc_info_->::proto_ff::Proto_RpcInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SvrPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // optional bytes msg_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disp_info;
        break;
      }

      // optional .proto_ff.Proto_DispInfo disp_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_store_info;
        break;
      }

      // optional .proto_ff.Proto_StoreInfo store_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_event_info;
        break;
      }

      // optional .proto_ff.Proto_EventInfo event_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_redirect_info;
        break;
      }

      // optional .proto_ff.Proto_RedirectInfo redirect_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redirect_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redirect_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rpc_info;
        break;
      }

      // optional .proto_ff.Proto_RpcInfo rpc_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SvrPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg_data(), output);
  }

  // optional .proto_ff.Proto_DispInfo disp_info = 3;
  if (has_disp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->disp_info(), output);
  }

  // optional .proto_ff.Proto_StoreInfo store_info = 4;
  if (has_store_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->store_info(), output);
  }

  // optional .proto_ff.Proto_EventInfo event_info = 5;
  if (has_event_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->event_info(), output);
  }

  // optional .proto_ff.Proto_RedirectInfo redirect_info = 6;
  if (has_redirect_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->redirect_info(), output);
  }

  // optional .proto_ff.Proto_RpcInfo rpc_info = 7;
  if (has_rpc_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rpc_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SvrPkg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  // optional bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // optional .proto_ff.Proto_DispInfo disp_info = 3;
  if (has_disp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->disp_info(), target);
  }

  // optional .proto_ff.Proto_StoreInfo store_info = 4;
  if (has_store_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->store_info(), target);
  }

  // optional .proto_ff.Proto_EventInfo event_info = 5;
  if (has_event_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->event_info(), target);
  }

  // optional .proto_ff.Proto_RedirectInfo redirect_info = 6;
  if (has_redirect_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->redirect_info(), target);
  }

  // optional .proto_ff.Proto_RpcInfo rpc_info = 7;
  if (has_rpc_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rpc_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SvrPkg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_id());
    }

    // optional bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional .proto_ff.Proto_DispInfo disp_info = 3;
    if (has_disp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disp_info());
    }

    // optional .proto_ff.Proto_StoreInfo store_info = 4;
    if (has_store_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_info());
    }

    // optional .proto_ff.Proto_EventInfo event_info = 5;
    if (has_event_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_info());
    }

    // optional .proto_ff.Proto_RedirectInfo redirect_info = 6;
    if (has_redirect_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redirect_info());
    }

    // optional .proto_ff.Proto_RpcInfo rpc_info = 7;
    if (has_rpc_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rpc_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SvrPkg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SvrPkg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SvrPkg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SvrPkg::MergeFrom(const Proto_SvrPkg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_disp_info()) {
      mutable_disp_info()->::proto_ff::Proto_DispInfo::MergeFrom(from.disp_info());
    }
    if (from.has_store_info()) {
      mutable_store_info()->::proto_ff::Proto_StoreInfo::MergeFrom(from.store_info());
    }
    if (from.has_event_info()) {
      mutable_event_info()->::proto_ff::Proto_EventInfo::MergeFrom(from.event_info());
    }
    if (from.has_redirect_info()) {
      mutable_redirect_info()->::proto_ff::Proto_RedirectInfo::MergeFrom(from.redirect_info());
    }
    if (from.has_rpc_info()) {
      mutable_rpc_info()->::proto_ff::Proto_RpcInfo::MergeFrom(from.rpc_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SvrPkg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SvrPkg::CopyFrom(const Proto_SvrPkg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SvrPkg::IsInitialized() const {

  return true;
}

void Proto_SvrPkg::Swap(Proto_SvrPkg* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(disp_info_, other->disp_info_);
    std::swap(store_info_, other->store_info_);
    std::swap(event_info_, other->event_info_);
    std::swap(redirect_info_, other->redirect_info_);
    std::swap(rpc_info_, other->rpc_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SvrPkg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SvrPkg_descriptor_;
  metadata.reflection = Proto_SvrPkg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoReport::kBusIdFieldNumber;
const int ServerInfoReport::kServerIdFieldNumber;
const int ServerInfoReport::kServerTypeFieldNumber;
const int ServerInfoReport::kServerNameFieldNumber;
const int ServerInfoReport::kUrlFieldNumber;
const int ServerInfoReport::kLinkModeFieldNumber;
const int ServerInfoReport::kBusLengthFieldNumber;
const int ServerInfoReport::kServerIpFieldNumber;
const int ServerInfoReport::kServerPortFieldNumber;
const int ServerInfoReport::kServerHttpPortFieldNumber;
const int ServerInfoReport::kExternalServerIpFieldNumber;
const int ServerInfoReport::kExternalServerPortFieldNumber;
const int ServerInfoReport::kRouteSvrFieldNumber;
const int ServerInfoReport::kServerMaxOnlineFieldNumber;
const int ServerInfoReport::kServerCurOnlineFieldNumber;
const int ServerInfoReport::kServerStateFieldNumber;
const int ServerInfoReport::kSystemInfoFieldNumber;
const int ServerInfoReport::kTotalMemFieldNumber;
const int ServerInfoReport::kFreeMemFieldNumber;
const int ServerInfoReport::kUsedMemFieldNumber;
const int ServerInfoReport::kProcCpuFieldNumber;
const int ServerInfoReport::kProcMemFieldNumber;
const int ServerInfoReport::kProcThreadFieldNumber;
const int ServerInfoReport::kProcNameFieldNumber;
const int ServerInfoReport::kProcCwdFieldNumber;
const int ServerInfoReport::kProcPidFieldNumber;
const int ServerInfoReport::kLastDateFieldNumber;
const int ServerInfoReport::kLastTimeFieldNumber;
const int ServerInfoReport::kContractInfoFieldNumber;
const int ServerInfoReport::kMachineAddrFieldNumber;
const int ServerInfoReport::kDbNameListFieldNumber;
const int ServerInfoReport::kMsgIdFieldNumber;
const int ServerInfoReport::kMapIdListFieldNumber;
#endif  // !_MSC_VER

ServerInfoReport::ServerInfoReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoReport::InitAsDefaultInstance() {
}

ServerInfoReport::ServerInfoReport(const ServerInfoReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoReport::SharedCtor() {
  _cached_size_ = 0;
  bus_id_ = 0u;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_type_ = 0u;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  link_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_length_ = 0u;
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0u;
  server_http_port_ = 0u;
  external_server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  external_server_port_ = 0u;
  route_svr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_max_online_ = 0u;
  server_cur_online_ = 0u;
  server_state_ = 0u;
  system_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_mem_ = GOOGLE_ULONGLONG(0);
  free_mem_ = GOOGLE_ULONGLONG(0);
  used_mem_ = GOOGLE_ULONGLONG(0);
  proc_cpu_ = 0;
  proc_mem_ = GOOGLE_ULONGLONG(0);
  proc_thread_ = 0u;
  proc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_cwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_pid_ = 0u;
  last_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_time_ = GOOGLE_ULONGLONG(0);
  contract_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoReport::~ServerInfoReport() {
  SharedDtor();
}

void ServerInfoReport::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (link_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete link_mode_;
  }
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (external_server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete external_server_ip_;
  }
  if (route_svr_ != &::google::protobuf::internal::kEmptyString) {
    delete route_svr_;
  }
  if (system_info_ != &::google::protobuf::internal::kEmptyString) {
    delete system_info_;
  }
  if (proc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_name_;
  }
  if (proc_cwd_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_cwd_;
  }
  if (last_date_ != &::google::protobuf::internal::kEmptyString) {
    delete last_date_;
  }
  if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_info_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (this != default_instance_) {
  }
}

void ServerInfoReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoReport_descriptor_;
}

const ServerInfoReport& ServerInfoReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

ServerInfoReport* ServerInfoReport::default_instance_ = NULL;

ServerInfoReport* ServerInfoReport::New() const {
  return new ServerInfoReport;
}

void ServerInfoReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bus_id_ = 0u;
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    server_type_ = 0u;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_link_mode()) {
      if (link_mode_ != &::google::protobuf::internal::kEmptyString) {
        link_mode_->clear();
      }
    }
    bus_length_ = 0u;
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    server_port_ = 0u;
    server_http_port_ = 0u;
    if (has_external_server_ip()) {
      if (external_server_ip_ != &::google::protobuf::internal::kEmptyString) {
        external_server_ip_->clear();
      }
    }
    external_server_port_ = 0u;
    if (has_route_svr()) {
      if (route_svr_ != &::google::protobuf::internal::kEmptyString) {
        route_svr_->clear();
      }
    }
    server_max_online_ = 0u;
    server_cur_online_ = 0u;
    server_state_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_system_info()) {
      if (system_info_ != &::google::protobuf::internal::kEmptyString) {
        system_info_->clear();
      }
    }
    total_mem_ = GOOGLE_ULONGLONG(0);
    free_mem_ = GOOGLE_ULONGLONG(0);
    used_mem_ = GOOGLE_ULONGLONG(0);
    proc_cpu_ = 0;
    proc_mem_ = GOOGLE_ULONGLONG(0);
    proc_thread_ = 0u;
    if (has_proc_name()) {
      if (proc_name_ != &::google::protobuf::internal::kEmptyString) {
        proc_name_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_proc_cwd()) {
      if (proc_cwd_ != &::google::protobuf::internal::kEmptyString) {
        proc_cwd_->clear();
      }
    }
    proc_pid_ = 0u;
    if (has_last_date()) {
      if (last_date_ != &::google::protobuf::internal::kEmptyString) {
        last_date_->clear();
      }
    }
    last_time_ = GOOGLE_ULONGLONG(0);
    if (has_contract_info()) {
      if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
        contract_info_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
  }
  db_name_list_.Clear();
  msg_id_.Clear();
  map_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bus_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_type;
        break;
      }

      // optional uint32 server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_name;
        break;
      }

      // optional string server_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_link_mode;
        break;
      }

      // optional string link_mode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link_mode().data(), this->link_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bus_length;
        break;
      }

      // optional uint32 bus_length = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_length_)));
          set_has_bus_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_server_ip;
        break;
      }

      // optional string server_ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_server_port;
        break;
      }

      // optional uint32 server_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_server_http_port;
        break;
      }

      // optional uint32 server_http_port = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_http_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_http_port_)));
          set_has_server_http_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_external_server_ip;
        break;
      }

      // optional string external_server_ip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_server_ip().data(), this->external_server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_external_server_port;
        break;
      }

      // optional uint32 external_server_port = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &external_server_port_)));
          set_has_external_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_route_svr;
        break;
      }

      // optional string route_svr = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_svr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_svr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->route_svr().data(), this->route_svr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_server_max_online;
        break;
      }

      // optional uint32 server_max_online = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_max_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_max_online_)));
          set_has_server_max_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_server_cur_online;
        break;
      }

      // optional uint32 server_cur_online = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_cur_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_cur_online_)));
          set_has_server_cur_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_server_state;
        break;
      }

      // optional uint32 server_state = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_state_)));
          set_has_server_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_system_info;
        break;
      }

      // optional string system_info = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->system_info().data(), this->system_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_total_mem;
        break;
      }

      // optional uint64 total_mem = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_mem_)));
          set_has_total_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_free_mem;
        break;
      }

      // optional uint64 free_mem = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_mem_)));
          set_has_free_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_used_mem;
        break;
      }

      // optional uint64 used_mem = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_mem_)));
          set_has_used_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_proc_cpu;
        break;
      }

      // optional double proc_cpu = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_proc_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &proc_cpu_)));
          set_has_proc_cpu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_proc_mem;
        break;
      }

      // optional uint64 proc_mem = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proc_mem_)));
          set_has_proc_mem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_proc_thread;
        break;
      }

      // optional uint32 proc_thread = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_thread_)));
          set_has_proc_thread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_proc_name;
        break;
      }

      // optional string proc_name = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_name().data(), this->proc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_proc_cwd;
        break;
      }

      // optional string proc_cwd = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_cwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_cwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_cwd().data(), this->proc_cwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_proc_pid;
        break;
      }

      // optional uint32 proc_pid = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_pid_)));
          set_has_proc_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_last_date;
        break;
      }

      // optional string last_date = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_date().data(), this->last_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_contract_info;
        break;
      }

      // optional string contract_info = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract_info().data(), this->contract_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_db_name_list;
        break;
      }

      // repeated string db_name_list = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_name_list(this->db_name_list_size() - 1).data(),
            this->db_name_list(this->db_name_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_db_name_list;
        if (input->ExpectTag(384)) goto parse_msg_id;
        break;
      }

      // repeated uint32 msg_id = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 384, input, this->mutable_msg_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_msg_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_msg_id;
        if (input->ExpectTag(392)) goto parse_map_id_list;
        break;
      }

      // repeated uint64 map_id_list = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 392, input, this->mutable_map_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_map_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_map_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bus_id = 1;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bus_id(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  // optional uint32 server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_type(), output);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_name(), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }

  // optional string link_mode = 6;
  if (has_link_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_mode().data(), this->link_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->link_mode(), output);
  }

  // optional uint32 bus_length = 7;
  if (has_bus_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bus_length(), output);
  }

  // optional string server_ip = 9;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->server_ip(), output);
  }

  // optional uint32 server_port = 10;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->server_port(), output);
  }

  // optional uint32 server_http_port = 11;
  if (has_server_http_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->server_http_port(), output);
  }

  // optional string external_server_ip = 12;
  if (has_external_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_server_ip().data(), this->external_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->external_server_ip(), output);
  }

  // optional uint32 external_server_port = 13;
  if (has_external_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->external_server_port(), output);
  }

  // optional string route_svr = 15;
  if (has_route_svr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_svr().data(), this->route_svr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->route_svr(), output);
  }

  // optional uint32 server_max_online = 30;
  if (has_server_max_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->server_max_online(), output);
  }

  // optional uint32 server_cur_online = 31;
  if (has_server_cur_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->server_cur_online(), output);
  }

  // optional uint32 server_state = 32;
  if (has_server_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->server_state(), output);
  }

  // optional string system_info = 33;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->system_info().data(), this->system_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->system_info(), output);
  }

  // optional uint64 total_mem = 34;
  if (has_total_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->total_mem(), output);
  }

  // optional uint64 free_mem = 35;
  if (has_free_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->free_mem(), output);
  }

  // optional uint64 used_mem = 36;
  if (has_used_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->used_mem(), output);
  }

  // optional double proc_cpu = 37;
  if (has_proc_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->proc_cpu(), output);
  }

  // optional uint64 proc_mem = 38;
  if (has_proc_mem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->proc_mem(), output);
  }

  // optional uint32 proc_thread = 39;
  if (has_proc_thread()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->proc_thread(), output);
  }

  // optional string proc_name = 40;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->proc_name(), output);
  }

  // optional string proc_cwd = 41;
  if (has_proc_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_cwd().data(), this->proc_cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->proc_cwd(), output);
  }

  // optional uint32 proc_pid = 42;
  if (has_proc_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->proc_pid(), output);
  }

  // optional string last_date = 43;
  if (has_last_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_date().data(), this->last_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->last_date(), output);
  }

  // optional uint64 last_time = 44;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->last_time(), output);
  }

  // optional string contract_info = 45;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      45, this->contract_info(), output);
  }

  // optional string machine_addr = 46;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->machine_addr(), output);
  }

  // repeated string db_name_list = 47;
  for (int i = 0; i < this->db_name_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->db_name_list(i).data(), this->db_name_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->db_name_list(i), output);
  }

  // repeated uint32 msg_id = 48;
  for (int i = 0; i < this->msg_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      48, this->msg_id(i), output);
  }

  // repeated uint64 map_id_list = 49;
  for (int i = 0; i < this->map_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      49, this->map_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bus_id = 1;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bus_id(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  // optional uint32 server_type = 3;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_type(), target);
  }

  // optional string server_name = 4;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_name(), target);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // optional string link_mode = 6;
  if (has_link_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link_mode().data(), this->link_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->link_mode(), target);
  }

  // optional uint32 bus_length = 7;
  if (has_bus_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bus_length(), target);
  }

  // optional string server_ip = 9;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->server_ip(), target);
  }

  // optional uint32 server_port = 10;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->server_port(), target);
  }

  // optional uint32 server_http_port = 11;
  if (has_server_http_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->server_http_port(), target);
  }

  // optional string external_server_ip = 12;
  if (has_external_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_server_ip().data(), this->external_server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->external_server_ip(), target);
  }

  // optional uint32 external_server_port = 13;
  if (has_external_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->external_server_port(), target);
  }

  // optional string route_svr = 15;
  if (has_route_svr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_svr().data(), this->route_svr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->route_svr(), target);
  }

  // optional uint32 server_max_online = 30;
  if (has_server_max_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->server_max_online(), target);
  }

  // optional uint32 server_cur_online = 31;
  if (has_server_cur_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->server_cur_online(), target);
  }

  // optional uint32 server_state = 32;
  if (has_server_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->server_state(), target);
  }

  // optional string system_info = 33;
  if (has_system_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->system_info().data(), this->system_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->system_info(), target);
  }

  // optional uint64 total_mem = 34;
  if (has_total_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->total_mem(), target);
  }

  // optional uint64 free_mem = 35;
  if (has_free_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->free_mem(), target);
  }

  // optional uint64 used_mem = 36;
  if (has_used_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->used_mem(), target);
  }

  // optional double proc_cpu = 37;
  if (has_proc_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->proc_cpu(), target);
  }

  // optional uint64 proc_mem = 38;
  if (has_proc_mem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->proc_mem(), target);
  }

  // optional uint32 proc_thread = 39;
  if (has_proc_thread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->proc_thread(), target);
  }

  // optional string proc_name = 40;
  if (has_proc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_name().data(), this->proc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->proc_name(), target);
  }

  // optional string proc_cwd = 41;
  if (has_proc_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_cwd().data(), this->proc_cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->proc_cwd(), target);
  }

  // optional uint32 proc_pid = 42;
  if (has_proc_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->proc_pid(), target);
  }

  // optional string last_date = 43;
  if (has_last_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_date().data(), this->last_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->last_date(), target);
  }

  // optional uint64 last_time = 44;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->last_time(), target);
  }

  // optional string contract_info = 45;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->contract_info(), target);
  }

  // optional string machine_addr = 46;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->machine_addr(), target);
  }

  // repeated string db_name_list = 47;
  for (int i = 0; i < this->db_name_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name_list(i).data(), this->db_name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(47, this->db_name_list(i), target);
  }

  // repeated uint32 msg_id = 48;
  for (int i = 0; i < this->msg_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(48, this->msg_id(i), target);
  }

  // repeated uint64 map_id_list = 49;
  for (int i = 0; i < this->map_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(49, this->map_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bus_id = 1;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // optional uint32 server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_type());
    }

    // optional string server_name = 4;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string link_mode = 6;
    if (has_link_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_mode());
    }

    // optional uint32 bus_length = 7;
    if (has_bus_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_length());
    }

    // optional string server_ip = 9;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 server_port = 10;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 server_http_port = 11;
    if (has_server_http_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_http_port());
    }

    // optional string external_server_ip = 12;
    if (has_external_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_server_ip());
    }

    // optional uint32 external_server_port = 13;
    if (has_external_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->external_server_port());
    }

    // optional string route_svr = 15;
    if (has_route_svr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->route_svr());
    }

    // optional uint32 server_max_online = 30;
    if (has_server_max_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_max_online());
    }

    // optional uint32 server_cur_online = 31;
    if (has_server_cur_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_cur_online());
    }

    // optional uint32 server_state = 32;
    if (has_server_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_state());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string system_info = 33;
    if (has_system_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->system_info());
    }

    // optional uint64 total_mem = 34;
    if (has_total_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_mem());
    }

    // optional uint64 free_mem = 35;
    if (has_free_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_mem());
    }

    // optional uint64 used_mem = 36;
    if (has_used_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used_mem());
    }

    // optional double proc_cpu = 37;
    if (has_proc_cpu()) {
      total_size += 2 + 8;
    }

    // optional uint64 proc_mem = 38;
    if (has_proc_mem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proc_mem());
    }

    // optional uint32 proc_thread = 39;
    if (has_proc_thread()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proc_thread());
    }

    // optional string proc_name = 40;
    if (has_proc_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_name());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string proc_cwd = 41;
    if (has_proc_cwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_cwd());
    }

    // optional uint32 proc_pid = 42;
    if (has_proc_pid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proc_pid());
    }

    // optional string last_date = 43;
    if (has_last_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_date());
    }

    // optional uint64 last_time = 44;
    if (has_last_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional string contract_info = 45;
    if (has_contract_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract_info());
    }

    // optional string machine_addr = 46;
    if (has_machine_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

  }
  // repeated string db_name_list = 47;
  total_size += 2 * this->db_name_list_size();
  for (int i = 0; i < this->db_name_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_name_list(i));
  }

  // repeated uint32 msg_id = 48;
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->msg_id(i));
    }
    total_size += 2 * this->msg_id_size() + data_size;
  }

  // repeated uint64 map_id_list = 49;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->map_id_list(i));
    }
    total_size += 2 * this->map_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoReport::MergeFrom(const ServerInfoReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_name_list_.MergeFrom(from.db_name_list_);
  msg_id_.MergeFrom(from.msg_id_);
  map_id_list_.MergeFrom(from.map_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_link_mode()) {
      set_link_mode(from.link_mode());
    }
    if (from.has_bus_length()) {
      set_bus_length(from.bus_length());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_http_port()) {
      set_server_http_port(from.server_http_port());
    }
    if (from.has_external_server_ip()) {
      set_external_server_ip(from.external_server_ip());
    }
    if (from.has_external_server_port()) {
      set_external_server_port(from.external_server_port());
    }
    if (from.has_route_svr()) {
      set_route_svr(from.route_svr());
    }
    if (from.has_server_max_online()) {
      set_server_max_online(from.server_max_online());
    }
    if (from.has_server_cur_online()) {
      set_server_cur_online(from.server_cur_online());
    }
    if (from.has_server_state()) {
      set_server_state(from.server_state());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_system_info()) {
      set_system_info(from.system_info());
    }
    if (from.has_total_mem()) {
      set_total_mem(from.total_mem());
    }
    if (from.has_free_mem()) {
      set_free_mem(from.free_mem());
    }
    if (from.has_used_mem()) {
      set_used_mem(from.used_mem());
    }
    if (from.has_proc_cpu()) {
      set_proc_cpu(from.proc_cpu());
    }
    if (from.has_proc_mem()) {
      set_proc_mem(from.proc_mem());
    }
    if (from.has_proc_thread()) {
      set_proc_thread(from.proc_thread());
    }
    if (from.has_proc_name()) {
      set_proc_name(from.proc_name());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_proc_cwd()) {
      set_proc_cwd(from.proc_cwd());
    }
    if (from.has_proc_pid()) {
      set_proc_pid(from.proc_pid());
    }
    if (from.has_last_date()) {
      set_last_date(from.last_date());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_contract_info()) {
      set_contract_info(from.contract_info());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReport::CopyFrom(const ServerInfoReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReport::IsInitialized() const {

  return true;
}

void ServerInfoReport::Swap(ServerInfoReport* other) {
  if (other != this) {
    std::swap(bus_id_, other->bus_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_name_, other->server_name_);
    std::swap(url_, other->url_);
    std::swap(link_mode_, other->link_mode_);
    std::swap(bus_length_, other->bus_length_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_http_port_, other->server_http_port_);
    std::swap(external_server_ip_, other->external_server_ip_);
    std::swap(external_server_port_, other->external_server_port_);
    std::swap(route_svr_, other->route_svr_);
    std::swap(server_max_online_, other->server_max_online_);
    std::swap(server_cur_online_, other->server_cur_online_);
    std::swap(server_state_, other->server_state_);
    std::swap(system_info_, other->system_info_);
    std::swap(total_mem_, other->total_mem_);
    std::swap(free_mem_, other->free_mem_);
    std::swap(used_mem_, other->used_mem_);
    std::swap(proc_cpu_, other->proc_cpu_);
    std::swap(proc_mem_, other->proc_mem_);
    std::swap(proc_thread_, other->proc_thread_);
    std::swap(proc_name_, other->proc_name_);
    std::swap(proc_cwd_, other->proc_cwd_);
    std::swap(proc_pid_, other->proc_pid_);
    std::swap(last_date_, other->last_date_);
    std::swap(last_time_, other->last_time_);
    std::swap(contract_info_, other->contract_info_);
    std::swap(machine_addr_, other->machine_addr_);
    db_name_list_.Swap(&other->db_name_list_);
    msg_id_.Swap(&other->msg_id_);
    map_id_list_.Swap(&other->map_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoReport_descriptor_;
  metadata.reflection = ServerInfoReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoReportList::kServerListFieldNumber;
#endif  // !_MSC_VER

ServerInfoReportList::ServerInfoReportList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoReportList::InitAsDefaultInstance() {
}

ServerInfoReportList::ServerInfoReportList(const ServerInfoReportList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoReportList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoReportList::~ServerInfoReportList() {
  SharedDtor();
}

void ServerInfoReportList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoReportList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReportList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoReportList_descriptor_;
}

const ServerInfoReportList& ServerInfoReportList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

ServerInfoReportList* ServerInfoReportList::default_instance_ = NULL;

ServerInfoReportList* ServerInfoReportList::New() const {
  return new ServerInfoReportList;
}

void ServerInfoReportList::Clear() {
  server_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ServerInfoReport server_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_server_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ServerInfoReport server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->server_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoReportList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ServerInfoReport server_list = 1;
  for (int i = 0; i < this->server_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->server_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoReportList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ServerInfoReport server_list = 1;
  total_size += 1 * this->server_list_size();
  for (int i = 0; i < this->server_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReportList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoReportList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoReportList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoReportList::MergeFrom(const ServerInfoReportList& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_list_.MergeFrom(from.server_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoReportList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportList::CopyFrom(const ServerInfoReportList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportList::IsInitialized() const {

  return true;
}

void ServerInfoReportList::Swap(ServerInfoReportList* other) {
  if (other != this) {
    server_list_.Swap(&other->server_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoReportList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoReportList_descriptor_;
  metadata.reflection = ServerInfoReportList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInfoReportListRespne::kRetCodeFieldNumber;
#endif  // !_MSC_VER

ServerInfoReportListRespne::ServerInfoReportListRespne()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerInfoReportListRespne::InitAsDefaultInstance() {
}

ServerInfoReportListRespne::ServerInfoReportListRespne(const ServerInfoReportListRespne& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerInfoReportListRespne::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfoReportListRespne::~ServerInfoReportListRespne() {
  SharedDtor();
}

void ServerInfoReportListRespne::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerInfoReportListRespne::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfoReportListRespne::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfoReportListRespne_descriptor_;
}

const ServerInfoReportListRespne& ServerInfoReportListRespne::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

ServerInfoReportListRespne* ServerInfoReportListRespne::default_instance_ = NULL;

ServerInfoReportListRespne* ServerInfoReportListRespne::New() const {
  return new ServerInfoReportListRespne;
}

void ServerInfoReportListRespne::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInfoReportListRespne::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerInfoReportListRespne::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerInfoReportListRespne::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerInfoReportListRespne::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfoReportListRespne::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInfoReportListRespne* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInfoReportListRespne*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInfoReportListRespne::MergeFrom(const ServerInfoReportListRespne& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInfoReportListRespne::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfoReportListRespne::CopyFrom(const ServerInfoReportListRespne& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoReportListRespne::IsInitialized() const {

  return true;
}

void ServerInfoReportListRespne::Swap(ServerInfoReportListRespne* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInfoReportListRespne::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfoReportListRespne_descriptor_;
  metadata.reflection = ServerInfoReportListRespne_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZkServerInfo::kBusUrlFieldNumber;
const int ZkServerInfo::kTcpUrlFieldNumber;
#endif  // !_MSC_VER

ZkServerInfo::ZkServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZkServerInfo::InitAsDefaultInstance() {
}

ZkServerInfo::ZkServerInfo(const ZkServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZkServerInfo::SharedCtor() {
  _cached_size_ = 0;
  bus_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tcp_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZkServerInfo::~ZkServerInfo() {
  SharedDtor();
}

void ZkServerInfo::SharedDtor() {
  if (bus_url_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_url_;
  }
  if (tcp_url_ != &::google::protobuf::internal::kEmptyString) {
    delete tcp_url_;
  }
  if (this != default_instance_) {
  }
}

void ZkServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZkServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZkServerInfo_descriptor_;
}

const ZkServerInfo& ZkServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

ZkServerInfo* ZkServerInfo::default_instance_ = NULL;

ZkServerInfo* ZkServerInfo::New() const {
  return new ZkServerInfo;
}

void ZkServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bus_url()) {
      if (bus_url_ != &::google::protobuf::internal::kEmptyString) {
        bus_url_->clear();
      }
    }
    if (has_tcp_url()) {
      if (tcp_url_ != &::google::protobuf::internal::kEmptyString) {
        tcp_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZkServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bus_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_url().data(), this->bus_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tcp_url;
        break;
      }

      // optional string tcp_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tcp_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tcp_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tcp_url().data(), this->tcp_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZkServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bus_url = 1;
  if (has_bus_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_url().data(), this->bus_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bus_url(), output);
  }

  // optional string tcp_url = 2;
  if (has_tcp_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcp_url().data(), this->tcp_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tcp_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZkServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bus_url = 1;
  if (has_bus_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_url().data(), this->bus_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bus_url(), target);
  }

  // optional string tcp_url = 2;
  if (has_tcp_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tcp_url().data(), this->tcp_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tcp_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZkServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bus_url = 1;
    if (has_bus_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_url());
    }

    // optional string tcp_url = 2;
    if (has_tcp_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tcp_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZkServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZkServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZkServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZkServerInfo::MergeFrom(const ZkServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bus_url()) {
      set_bus_url(from.bus_url());
    }
    if (from.has_tcp_url()) {
      set_tcp_url(from.tcp_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZkServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZkServerInfo::CopyFrom(const ZkServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZkServerInfo::IsInitialized() const {

  return true;
}

void ZkServerInfo::Swap(ZkServerInfo* other) {
  if (other != this) {
    std::swap(bus_url_, other->bus_url_);
    std::swap(tcp_url_, other->tcp_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZkServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZkServerInfo_descriptor_;
  metadata.reflection = ZkServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynLibFileInfo::kFileMd5FieldNumber;
const int DynLibFileInfo::kFileSizeFieldNumber;
#endif  // !_MSC_VER

DynLibFileInfo::DynLibFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynLibFileInfo::InitAsDefaultInstance() {
}

DynLibFileInfo::DynLibFileInfo(const DynLibFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynLibFileInfo::SharedCtor() {
  _cached_size_ = 0;
  file_md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynLibFileInfo::~DynLibFileInfo() {
  SharedDtor();
}

void DynLibFileInfo::SharedDtor() {
  if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
    delete file_md5_;
  }
  if (this != default_instance_) {
  }
}

void DynLibFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynLibFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynLibFileInfo_descriptor_;
}

const DynLibFileInfo& DynLibFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

DynLibFileInfo* DynLibFileInfo::default_instance_ = NULL;

DynLibFileInfo* DynLibFileInfo::New() const {
  return new DynLibFileInfo;
}

void DynLibFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_md5()) {
      if (file_md5_ != &::google::protobuf::internal::kEmptyString) {
        file_md5_->clear();
      }
    }
    file_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynLibFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_md5 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_md5().data(), this->file_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional int32 file_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynLibFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_md5 = 1;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_md5(), output);
  }

  // optional int32 file_size = 2;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->file_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynLibFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_md5 = 1;
  if (has_file_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_md5().data(), this->file_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_md5(), target);
  }

  // optional int32 file_size = 2;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->file_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynLibFileInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_md5 = 1;
    if (has_file_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_md5());
    }

    // optional int32 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynLibFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynLibFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynLibFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynLibFileInfo::MergeFrom(const DynLibFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_md5()) {
      set_file_md5(from.file_md5());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynLibFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynLibFileInfo::CopyFrom(const DynLibFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynLibFileInfo::IsInitialized() const {

  return true;
}

void DynLibFileInfo::Swap(DynLibFileInfo* other) {
  if (other != this) {
    std::swap(file_md5_, other->file_md5_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynLibFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynLibFileInfo_descriptor_;
  metadata.reflection = DynLibFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynLibFileInfoArray::kFileListFieldNumber;
#endif  // !_MSC_VER

DynLibFileInfoArray::DynLibFileInfoArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynLibFileInfoArray::InitAsDefaultInstance() {
}

DynLibFileInfoArray::DynLibFileInfoArray(const DynLibFileInfoArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynLibFileInfoArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynLibFileInfoArray::~DynLibFileInfoArray() {
  SharedDtor();
}

void DynLibFileInfoArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DynLibFileInfoArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynLibFileInfoArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynLibFileInfoArray_descriptor_;
}

const DynLibFileInfoArray& DynLibFileInfoArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

DynLibFileInfoArray* DynLibFileInfoArray::default_instance_ = NULL;

DynLibFileInfoArray* DynLibFileInfoArray::New() const {
  return new DynLibFileInfoArray;
}

void DynLibFileInfoArray::Clear() {
  file_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynLibFileInfoArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DynLibFileInfo file_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_file_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynLibFileInfoArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DynLibFileInfo file_list = 1;
  for (int i = 0; i < this->file_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynLibFileInfoArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DynLibFileInfo file_list = 1;
  for (int i = 0; i < this->file_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynLibFileInfoArray::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DynLibFileInfo file_list = 1;
  total_size += 1 * this->file_list_size();
  for (int i = 0; i < this->file_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynLibFileInfoArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynLibFileInfoArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynLibFileInfoArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynLibFileInfoArray::MergeFrom(const DynLibFileInfoArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_list_.MergeFrom(from.file_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynLibFileInfoArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynLibFileInfoArray::CopyFrom(const DynLibFileInfoArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynLibFileInfoArray::IsInitialized() const {

  return true;
}

void DynLibFileInfoArray::Swap(DynLibFileInfoArray* other) {
  if (other != this) {
    file_list_.Swap(&other->file_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynLibFileInfoArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynLibFileInfoArray_descriptor_;
  metadata.reflection = DynLibFileInfoArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Proto_KillAllServerNtf::Proto_KillAllServerNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_KillAllServerNtf::InitAsDefaultInstance() {
}

Proto_KillAllServerNtf::Proto_KillAllServerNtf(const Proto_KillAllServerNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_KillAllServerNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_KillAllServerNtf::~Proto_KillAllServerNtf() {
  SharedDtor();
}

void Proto_KillAllServerNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_KillAllServerNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_KillAllServerNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_KillAllServerNtf_descriptor_;
}

const Proto_KillAllServerNtf& Proto_KillAllServerNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_KillAllServerNtf* Proto_KillAllServerNtf::default_instance_ = NULL;

Proto_KillAllServerNtf* Proto_KillAllServerNtf::New() const {
  return new Proto_KillAllServerNtf;
}

void Proto_KillAllServerNtf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_KillAllServerNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Proto_KillAllServerNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_KillAllServerNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_KillAllServerNtf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_KillAllServerNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_KillAllServerNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_KillAllServerNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_KillAllServerNtf::MergeFrom(const Proto_KillAllServerNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_KillAllServerNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_KillAllServerNtf::CopyFrom(const Proto_KillAllServerNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_KillAllServerNtf::IsInitialized() const {

  return true;
}

void Proto_KillAllServerNtf::Swap(Proto_KillAllServerNtf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_KillAllServerNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_KillAllServerNtf_descriptor_;
  metadata.reflection = Proto_KillAllServerNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_KillAllServerRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_KillAllServerRsp::Proto_KillAllServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_KillAllServerRsp::InitAsDefaultInstance() {
}

Proto_KillAllServerRsp::Proto_KillAllServerRsp(const Proto_KillAllServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_KillAllServerRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_KillAllServerRsp::~Proto_KillAllServerRsp() {
  SharedDtor();
}

void Proto_KillAllServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_KillAllServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_KillAllServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_KillAllServerRsp_descriptor_;
}

const Proto_KillAllServerRsp& Proto_KillAllServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_KillAllServerRsp* Proto_KillAllServerRsp::default_instance_ = NULL;

Proto_KillAllServerRsp* Proto_KillAllServerRsp::New() const {
  return new Proto_KillAllServerRsp;
}

void Proto_KillAllServerRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_KillAllServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_KillAllServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_KillAllServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_KillAllServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_KillAllServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_KillAllServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_KillAllServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_KillAllServerRsp::MergeFrom(const Proto_KillAllServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_KillAllServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_KillAllServerRsp::CopyFrom(const Proto_KillAllServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_KillAllServerRsp::IsInitialized() const {

  return true;
}

void Proto_KillAllServerRsp::Swap(Proto_KillAllServerRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_KillAllServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_KillAllServerRsp_descriptor_;
  metadata.reflection = Proto_KillAllServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STSBroadPlayerMsgNotify::kUserIdFieldNumber;
const int Proto_STSBroadPlayerMsgNotify::kMsgIdFieldNumber;
const int Proto_STSBroadPlayerMsgNotify::kMsgDataFieldNumber;
#endif  // !_MSC_VER

Proto_STSBroadPlayerMsgNotify::Proto_STSBroadPlayerMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STSBroadPlayerMsgNotify::InitAsDefaultInstance() {
}

Proto_STSBroadPlayerMsgNotify::Proto_STSBroadPlayerMsgNotify(const Proto_STSBroadPlayerMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STSBroadPlayerMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0u;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STSBroadPlayerMsgNotify::~Proto_STSBroadPlayerMsgNotify() {
  SharedDtor();
}

void Proto_STSBroadPlayerMsgNotify::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
  }
}

void Proto_STSBroadPlayerMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STSBroadPlayerMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STSBroadPlayerMsgNotify_descriptor_;
}

const Proto_STSBroadPlayerMsgNotify& Proto_STSBroadPlayerMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_STSBroadPlayerMsgNotify* Proto_STSBroadPlayerMsgNotify::default_instance_ = NULL;

Proto_STSBroadPlayerMsgNotify* Proto_STSBroadPlayerMsgNotify::New() const {
  return new Proto_STSBroadPlayerMsgNotify;
}

void Proto_STSBroadPlayerMsgNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    msg_id_ = 0u;
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STSBroadPlayerMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // optional uint32 msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_data;
        break;
      }

      // optional bytes msg_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STSBroadPlayerMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->user_id(i), output);
  }

  // optional uint32 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_id(), output);
  }

  // optional bytes msg_data = 3;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msg_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STSBroadPlayerMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->user_id(i), target);
  }

  // optional uint32 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_id(), target);
  }

  // optional bytes msg_data = 3;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STSBroadPlayerMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_id());
    }

    // optional bytes msg_data = 3;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

  }
  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STSBroadPlayerMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STSBroadPlayerMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STSBroadPlayerMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STSBroadPlayerMsgNotify::MergeFrom(const Proto_STSBroadPlayerMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STSBroadPlayerMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STSBroadPlayerMsgNotify::CopyFrom(const Proto_STSBroadPlayerMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STSBroadPlayerMsgNotify::IsInitialized() const {

  return true;
}

void Proto_STSBroadPlayerMsgNotify::Swap(Proto_STSBroadPlayerMsgNotify* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STSBroadPlayerMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STSBroadPlayerMsgNotify_descriptor_;
  metadata.reflection = Proto_STSBroadPlayerMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STWebMsgRspNotify::kRequestIdFieldNumber;
const int Proto_STWebMsgRspNotify::kResultFieldNumber;
const int Proto_STWebMsgRspNotify::kErrMsgFieldNumber;
#endif  // !_MSC_VER

Proto_STWebMsgRspNotify::Proto_STWebMsgRspNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STWebMsgRspNotify::InitAsDefaultInstance() {
}

Proto_STWebMsgRspNotify::Proto_STWebMsgRspNotify(const Proto_STWebMsgRspNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STWebMsgRspNotify::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STWebMsgRspNotify::~Proto_STWebMsgRspNotify() {
  SharedDtor();
}

void Proto_STWebMsgRspNotify::SharedDtor() {
  if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void Proto_STWebMsgRspNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STWebMsgRspNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STWebMsgRspNotify_descriptor_;
}

const Proto_STWebMsgRspNotify& Proto_STWebMsgRspNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_STWebMsgRspNotify* Proto_STWebMsgRspNotify::default_instance_ = NULL;

Proto_STWebMsgRspNotify* Proto_STWebMsgRspNotify::New() const {
  return new Proto_STWebMsgRspNotify;
}

void Proto_STWebMsgRspNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::kEmptyString) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STWebMsgRspNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STWebMsgRspNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STWebMsgRspNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string err_msg = 3;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STWebMsgRspNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string err_msg = 3;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STWebMsgRspNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STWebMsgRspNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STWebMsgRspNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STWebMsgRspNotify::MergeFrom(const Proto_STWebMsgRspNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STWebMsgRspNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STWebMsgRspNotify::CopyFrom(const Proto_STWebMsgRspNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STWebMsgRspNotify::IsInitialized() const {

  return true;
}

void Proto_STWebMsgRspNotify::Swap(Proto_STWebMsgRspNotify* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(result_, other->result_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STWebMsgRspNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STWebMsgRspNotify_descriptor_;
  metadata.reflection = Proto_STWebMsgRspNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorLogHeader::kEventIdFieldNumber;
const int BehaviorLogHeader::kSequenceFieldNumber;
const int BehaviorLogHeader::kBusNameFieldNumber;
const int BehaviorLogHeader::kEventTimeFieldNumber;
const int BehaviorLogHeader::kUserIdFieldNumber;
const int BehaviorLogHeader::kUserNameFieldNumber;
#endif  // !_MSC_VER

BehaviorLogHeader::BehaviorLogHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BehaviorLogHeader::InitAsDefaultInstance() {
}

BehaviorLogHeader::BehaviorLogHeader(const BehaviorLogHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BehaviorLogHeader::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorLogHeader::~BehaviorLogHeader() {
  SharedDtor();
}

void BehaviorLogHeader::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void BehaviorLogHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorLogHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorLogHeader_descriptor_;
}

const BehaviorLogHeader& BehaviorLogHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

BehaviorLogHeader* BehaviorLogHeader::default_instance_ = NULL;

BehaviorLogHeader* BehaviorLogHeader::New() const {
  return new BehaviorLogHeader;
}

void BehaviorLogHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorLogHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BehaviorLogHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BehaviorLogHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BehaviorLogHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorLogHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorLogHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorLogHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorLogHeader::MergeFrom(const BehaviorLogHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorLogHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorLogHeader::CopyFrom(const BehaviorLogHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorLogHeader::IsInitialized() const {

  return true;
}

void BehaviorLogHeader::Swap(BehaviorLogHeader* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorLogHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorLogHeader_descriptor_;
  metadata.reflection = BehaviorLogHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NFEventNoneData::kParam1FieldNumber;
const int NFEventNoneData::kParam2FieldNumber;
const int NFEventNoneData::kParam3FieldNumber;
const int NFEventNoneData::kParam4FieldNumber;
const int NFEventNoneData::kParam5FieldNumber;
#endif  // !_MSC_VER

NFEventNoneData::NFEventNoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NFEventNoneData::InitAsDefaultInstance() {
}

NFEventNoneData::NFEventNoneData(const NFEventNoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NFEventNoneData::SharedCtor() {
  _cached_size_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  param3_ = GOOGLE_LONGLONG(0);
  param4_ = GOOGLE_LONGLONG(0);
  param5_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NFEventNoneData::~NFEventNoneData() {
  SharedDtor();
}

void NFEventNoneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NFEventNoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NFEventNoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFEventNoneData_descriptor_;
}

const NFEventNoneData& NFEventNoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

NFEventNoneData* NFEventNoneData::default_instance_ = NULL;

NFEventNoneData* NFEventNoneData::New() const {
  return new NFEventNoneData;
}

void NFEventNoneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param1_ = GOOGLE_LONGLONG(0);
    param2_ = GOOGLE_LONGLONG(0);
    param3_ = GOOGLE_LONGLONG(0);
    param4_ = GOOGLE_LONGLONG(0);
    param5_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NFEventNoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 param1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param3;
        break;
      }

      // optional int64 param3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param4;
        break;
      }

      // optional int64 param4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param5;
        break;
      }

      // optional int64 param5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NFEventNoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->param1(), output);
  }

  // optional int64 param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->param2(), output);
  }

  // optional int64 param3 = 3;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->param3(), output);
  }

  // optional int64 param4 = 4;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param4(), output);
  }

  // optional int64 param5 = 5;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NFEventNoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 param1 = 1;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->param1(), target);
  }

  // optional int64 param2 = 2;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->param2(), target);
  }

  // optional int64 param3 = 3;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->param3(), target);
  }

  // optional int64 param4 = 4;
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param4(), target);
  }

  // optional int64 param5 = 5;
  if (has_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NFEventNoneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

    // optional int64 param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

    // optional int64 param3 = 3;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param3());
    }

    // optional int64 param4 = 4;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param4());
    }

    // optional int64 param5 = 5;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NFEventNoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NFEventNoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NFEventNoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NFEventNoneData::MergeFrom(const NFEventNoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NFEventNoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NFEventNoneData::CopyFrom(const NFEventNoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NFEventNoneData::IsInitialized() const {

  return true;
}

void NFEventNoneData::Swap(NFEventNoneData* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NFEventNoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NFEventNoneData_descriptor_;
  metadata.reflection = NFEventNoneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NFEventScriptData::kEventTypeFieldNumber;
const int NFEventScriptData::kEventDataFieldNumber;
#endif  // !_MSC_VER

NFEventScriptData::NFEventScriptData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NFEventScriptData::InitAsDefaultInstance() {
}

NFEventScriptData::NFEventScriptData(const NFEventScriptData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NFEventScriptData::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NFEventScriptData::~NFEventScriptData() {
  SharedDtor();
}

void NFEventScriptData::SharedDtor() {
  if (event_type_ != &::google::protobuf::internal::kEmptyString) {
    delete event_type_;
  }
  if (event_data_ != &::google::protobuf::internal::kEmptyString) {
    delete event_data_;
  }
  if (this != default_instance_) {
  }
}

void NFEventScriptData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NFEventScriptData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NFEventScriptData_descriptor_;
}

const NFEventScriptData& NFEventScriptData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

NFEventScriptData* NFEventScriptData::default_instance_ = NULL;

NFEventScriptData* NFEventScriptData::New() const {
  return new NFEventScriptData;
}

void NFEventScriptData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event_type()) {
      if (event_type_ != &::google::protobuf::internal::kEmptyString) {
        event_type_->clear();
      }
    }
    if (has_event_data()) {
      if (event_data_ != &::google::protobuf::internal::kEmptyString) {
        event_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NFEventScriptData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_type().data(), this->event_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_data;
        break;
      }

      // optional string event_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_data().data(), this->event_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NFEventScriptData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_type().data(), this->event_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->event_type(), output);
  }

  // optional string event_data = 2;
  if (has_event_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_data().data(), this->event_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->event_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NFEventScriptData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_type().data(), this->event_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_type(), target);
  }

  // optional string event_data = 2;
  if (has_event_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_data().data(), this->event_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NFEventScriptData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_type());
    }

    // optional string event_data = 2;
    if (has_event_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NFEventScriptData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NFEventScriptData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NFEventScriptData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NFEventScriptData::MergeFrom(const NFEventScriptData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_data()) {
      set_event_data(from.event_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NFEventScriptData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NFEventScriptData::CopyFrom(const NFEventScriptData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NFEventScriptData::IsInitialized() const {

  return true;
}

void NFEventScriptData::Swap(NFEventScriptData* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(event_data_, other->event_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NFEventScriptData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NFEventScriptData_descriptor_;
  metadata.reflection = NFEventScriptData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_ServerDumpInfoNtf::kDumpInfoFieldNumber;
const int Proto_ServerDumpInfoNtf::kBusIdFieldNumber;
#endif  // !_MSC_VER

Proto_ServerDumpInfoNtf::Proto_ServerDumpInfoNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_ServerDumpInfoNtf::InitAsDefaultInstance() {
}

Proto_ServerDumpInfoNtf::Proto_ServerDumpInfoNtf(const Proto_ServerDumpInfoNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_ServerDumpInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  dump_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_ServerDumpInfoNtf::~Proto_ServerDumpInfoNtf() {
  SharedDtor();
}

void Proto_ServerDumpInfoNtf::SharedDtor() {
  if (dump_info_ != &::google::protobuf::internal::kEmptyString) {
    delete dump_info_;
  }
  if (this != default_instance_) {
  }
}

void Proto_ServerDumpInfoNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_ServerDumpInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_ServerDumpInfoNtf_descriptor_;
}

const Proto_ServerDumpInfoNtf& Proto_ServerDumpInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fkernel_2eproto();
  return *default_instance_;
}

Proto_ServerDumpInfoNtf* Proto_ServerDumpInfoNtf::default_instance_ = NULL;

Proto_ServerDumpInfoNtf* Proto_ServerDumpInfoNtf::New() const {
  return new Proto_ServerDumpInfoNtf;
}

void Proto_ServerDumpInfoNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dump_info()) {
      if (dump_info_ != &::google::protobuf::internal::kEmptyString) {
        dump_info_->clear();
      }
    }
    bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_ServerDumpInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dump_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dump_info().data(), this->dump_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bus_id;
        break;
      }

      // optional uint32 bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_ServerDumpInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dump_info = 1;
  if (has_dump_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dump_info().data(), this->dump_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dump_info(), output);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_ServerDumpInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dump_info = 1;
  if (has_dump_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dump_info().data(), this->dump_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dump_info(), target);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_ServerDumpInfoNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dump_info = 1;
    if (has_dump_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dump_info());
    }

    // optional uint32 bus_id = 2;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_ServerDumpInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_ServerDumpInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_ServerDumpInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_ServerDumpInfoNtf::MergeFrom(const Proto_ServerDumpInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dump_info()) {
      set_dump_info(from.dump_info());
    }
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_ServerDumpInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_ServerDumpInfoNtf::CopyFrom(const Proto_ServerDumpInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_ServerDumpInfoNtf::IsInitialized() const {

  return true;
}

void Proto_ServerDumpInfoNtf::Swap(Proto_ServerDumpInfoNtf* other) {
  if (other != this) {
    std::swap(dump_info_, other->dump_info_);
    std::swap(bus_id_, other->bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_ServerDumpInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_ServerDumpInfoNtf_descriptor_;
  metadata.reflection = Proto_ServerDumpInfoNtf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
