package proto_ff;

import "yd_fieldoptions.proto";

// 命令字
enum Proto_Kernel_CMD {
  NF_SERVER_TO_SERVER_HEART_BEAT = 5001;  //服务器心跳
  NF_SERVER_TO_SERVER_HEART_BEAT_RSP = 5002;  //服务器心跳
  NF_SERVER_TO_SERVER_BUS_CONNECT_REQ = 5003;  //服务器心跳 BUS Connect 协议
  NF_SERVER_TO_SERVER_BUS_CONNECT_RSP = 5004;  //服务器心跳 BUS CONNECT RSP 协议

  NF_GTM_KILL_ALL_SERVER_NTF = 5050;
  NF_STS_KILL_ALL_SERVER_NTF = 5051;
  NF_STS_SEND_DUMP_INFO_NTF = 5052;

  NF_MasterTMonitor_RELOAD_CMD_REQ = 5080;
  NF_MasterTMonitor_RESTART_CMD_REQ = 5081;
  NF_MasterTMonitor_START_CMD_REQ = 5082;
  NF_MasterTMonitor_STOP_CMD_REQ = 5083;
  NF_MasterTMonitor_STOP_ALL_CMD_REQ = 5084;
  NF_MasterTMonitor_RELOAD_ALL_CMD_REQ = 5085;
  NF_MasterTMonitor_RESTART_ALL_CMD_REQ = 5086;
  NF_MasterTMonitor_START_ALL_CMD_REQ = 5087;

  NF_MonitorTMaster_RELOAD_CMD_RSP = 5090;
  NF_MonitorTMaster_RESTART_CMD_RSP = 5091;
  NF_MonitorTMaster_START_CMD_RSP = 5092;
  NF_MonitorTMaster_STOP_CMD_RSP = 5093;
  NF_MonitorTMaster_STOP_ALL_CMD_RSP = 5094;
  NF_MonitorTMaster_RELOAD_ALL_CMD_RSP = 5095;
  NF_MonitorTMaster_RESTART_ALL_CMD_RSP = 5096;
  NF_MonitorTMaster_START_ALL_CMD_RSP = 5097;

  NF_SERVER_TO_SERVER_REGISTER = 5100;  //服务器注册
  NF_SERVER_TO_SERVER_REGISTER_RSP = 5101;  //服务器注册
  NF_MASTER_SERVER_SEND_OTHERS_TO_SERVER = 5102;  //master服务器反馈别的服务器给注册服务器
  NF_SERVER_TO_MASTER_SERVER_REPORT = 5103;  //服务器注册master

  NF_ROUTER_CMD_INTERNAL_C2R_REGISTER = 5104; // 注册，内部命令
  NF_ROUTER_CMD_INTERNAL_R2C_REGISTER = 5105; // 注册回应
  NF_ROUTER_CMD_INTERNAL_C2R_HEARTBEAT = 5106; // client到routersvr的心跳，内部命令
  NF_ROUTER_CMD_INTERNAL_R2C_HEARTBEAT = 5107; // routersvr到client的心跳，内部命令
  NF_ROUTER_CMD_DISPATCH_MOD = 5108; // 取模转发，转发命令
  NF_ROUTER_CMD_DISPATCH_ROUNDROBIN = 5109; // 随机转发，转发命令，routersvr可自己设定random策略，是随机计算，是roundrobin
  NF_ROUTER_CMD_DISPATCH_BROADCAST = 5110; // 广播，转发命令，平等的广播
  NF_ROUTER_CMD_DISPATCH_BROADCAST_AND_MASTER = 5111; // 广播，同时选择主服务，转发命令  c-->router
  NF_ROUTER_CMD_DISPATCH_BORADCAST_MASTER = 5112; // 广播，确定某一个为master router---->dest
  NF_ROUTER_CMD_DISPATCH_BORADCAST_SLAVE = 5113; // 广播，确定某一个为slave  router---->dest
  NF_ROUTER_CMD_DISPATCH_DIRECT = 5114; // 直接转发，转发命令
  NF_ROUTER_CMD_INTERNAL_R2C_DISPATCHFAILED = 5115; // routersvr到client，转发失败回应
  NF_ROUTER_CMD_INTERNAL_C2R_REG_RAASSOCAPPSVS = 5116; // routeragent和appsvr的对应关系注册到routersvr

  NF_SERVER_TO_SERVER_RPC_CMD = 5119; //rpc协议
  NF_SERVER_TO_SERVER_TRANS_CMD = 5120; //trans msg
  NF_SERVER_TO_STORE_SERVER_DB_CMD = 5121; //send db msg
  NF_STORE_SERVER_TO_SERVER_DB_CMD = 5122; //send db msg
  NF_WORLD_ROUTER_CMD_TO_SUIT_LOGIC = 5123; //logic send msg to world, world trans msg to suit logic
  NF_SNS_ROUTER_CMD_TO_SUIT_LOGIC = 5124; //logic send msg to sns, sns trans msg to suit logic
  NF_STS_BROAD_PLAYER_MSG_NOTIFY = 5125;
  NF_SEVER_TO_WEB_SERVER_RSP_NOTIFY = 5126;
  NF_SERVER_BROAD_EVENT_TO_SERVER_CMD = 5127; //广播事件系统
  NF_SERVER_REDIRECT_MSG_TO_PROXY_SERVER_CMD = 5128; //其他业务服务器粘包消息发给网关
  NF_SERVER_TO_SERVER_REGISTER_ROOM_INFO_RPC = 5129;

  //STORE SERVER CMD
  NF_STORESVR_C2S_SELECT = 5200;					// select req  按条件去查询，
  NF_STORESVR_S2C_SELECT = 5201;						// select res
  NF_STORESVR_C2S_SELECTOBJ = 5202;					// 按对象去查询
  NF_STORESVR_S2C_SELECTOBJ = 5203;
  NF_STORESVR_C2S_INSERT = 5204;
  NF_STORESVR_S2C_INSERT = 5205;
  NF_STORESVR_C2S_INSERTOBJ = 5206;
  NF_STORESVR_S2C_INSERTOBJ = 5207;
  NF_STORESVR_C2S_DELETE = 5208;
  NF_STORESVR_S2C_DELETE = 5209;
  NF_STORESVR_C2S_DELETEOBJ = 5210;
  NF_STORESVR_S2C_DELETEOBJ = 5211;
  NF_STORESVR_C2S_MODIFY = 5212;
  NF_STORESVR_S2C_MODIFY = 5213;
  NF_STORESVR_C2S_MODIFYOBJ = 5214;
  NF_STORESVR_S2C_MODIFYOBJ = 5215;
  NF_STORESVR_C2S_UPDATE = 5216;						// modify + insert
  NF_STORESVR_S2C_UPDATE = 5217;
  NF_STORESVR_C2S_UPDATEOBJ = 5218;						// modify + insert
  NF_STORESVR_S2C_UPDATEOBJ = 5219;
  NF_STORESVR_C2S_DESCSTORE = 5220;
  NF_STORESVR_S2C_DESCSTORE = 5221;
  NF_STORESVR_C2S_EXECUTE = 5222;
  NF_STORESVR_S2C_EXECUTE = 5223;
  NF_STORESVR_C2S_EXECUTE_MORE = 5224;
  NF_STORESVR_S2C_EXECUTE_MORE = 5225;
}

enum PacketDispType
{
  E_DISP_TYPE_NONE = 0;
  E_DISP_TYPE_BY_TRANSACTION = 1;
  E_DISP_TYPE_BY_ROLEID = 2;
  E_DISP_TYPE_BY_MSGID = 3;
  E_DISP_TYPE_BY_RPC = 4;
};

message Proto_DispInfo
{
  optional uint64        user_id = 1;
  optional int32         req_trans_id = 2;        //req transaction id  事务ID。请求方的ID
  optional int32         rsp_trans_id = 3;       //rsp transaction id  事务ID回包携带的，需要据此在PacketDisp里处理
}

message Proto_StoreInfo_CB
{
  optional PacketDispType  type = 1;
  optional uint64 id = 2;
  optional uint32 table_id = 3;
  optional uint32 seq = 4;
}

message Proto_StoreInfo
{
  optional uint32     cmd = 1;
  optional int32      err_code = 2;
  optional Proto_StoreInfo_CB   cb_data = 3;
}

message Proto_EventInfo
{
  optional uint32 server_type = 1;
  optional uint64 event_id = 2;
  optional uint64 src_type = 3;
  optional uint64 src_id = 4;
  optional string full_message_name = 5;
}

message Proto_ScriptRpcResult
{
  optional string req_type = 1;
  optional string rsp_type = 2;
  optional string respone = 3;
}

message Proto_RpcInfo
{
  optional int64 req_rpc_id = 1;
  optional int64 rsp_rpc_id = 2;
  optional int32 rpc_ret_code = 3;
  optional uint64 req_rpc_hash = 4;
  optional uint64 rsp_rpc_hash = 5;
  optional uint32 req_bus_id = 6;
  optional uint64 req_server_type = 7;
  optional bool is_script_rpc = 8;
}

//粘包
message Proto_RedirectInfo
{
  repeated uint64 id = 1;
  optional bool all = 2;
}

message Proto_SvrPkg
{
  optional int32          msg_id = 1;              //trans send msg id
  optional bytes          msg_data = 2;
  optional Proto_DispInfo disp_info = 3;              //trans send msg id
  optional Proto_StoreInfo store_info = 4;
  optional Proto_EventInfo event_info = 5; //
  optional Proto_RedirectInfo redirect_info = 6;
  optional Proto_RpcInfo rpc_info = 7;
}

enum EServerState
{
  EST_INIT = 0;
  EST_NARMAL = 1;
  EST_BUSY = 2;
  EST_CRASH = 3;
}

message ServerInfoReport
{
  optional uint32   bus_id = 1;
  optional string  server_id = 2 ;
  optional uint32   server_type = 3;
  optional string  server_name = 4 ;
  optional string  url = 5;
  optional string  link_mode = 6;
  optional uint32  bus_length = 7; //NFBUS/TBUS共享内存通信大小
  optional string  server_ip = 9;
  optional uint32  server_port = 10;
  optional uint32  server_http_port = 11;
  optional string  external_server_ip = 12;
  optional uint32  external_server_port = 13;
  optional bool is_cross_server = 14;
  optional string  route_svr = 15;
  optional uint32   server_max_online = 30;
  optional uint32   server_cur_online = 31;
  optional uint32  server_state = 32;
  optional string  system_info = 33;
  optional uint64  total_mem = 34;
  optional uint64  free_mem = 35;
  optional uint64  used_mem = 36;
  optional double  proc_cpu = 37;  //cur process cpu used
  optional uint64  proc_mem = 38;  //cur process mem used
  optional uint32  proc_thread = 39; //cur process thread num
  optional string  proc_name = 40;
  optional string  proc_cwd = 41;
  optional uint32  proc_pid = 42;
  optional string  last_date = 43;
  optional uint64  last_time = 44;
  optional string  contract_info = 45;
  optional string  machine_addr = 46;
  repeated string  db_name_list = 47;
  repeated uint32  msg_id = 48;
  repeated uint64  map_id_list = 49;
}

message ServerInfoReportList
{
  repeated ServerInfoReport server_list = 1;
}

message ServerInfoReportListRespne
{
  optional int32 ret_code = 1;
}

message ZkServerInfo
{
  optional string   bus_url = 1;
  optional string   tcp_url = 2;
}

message DynLibFileInfo
{
  optional string  file_md5 = 1;
  optional int32  file_size = 2;
}

message DynLibFileInfoArray
{
  repeated DynLibFileInfo file_list = 1;
}

message Proto_KillAllServerNtf
{
}

message Proto_KillAllServerRsp
{
    optional int32 result = 1;
}

//NF_STS_BROAD_PLAYER_MSG_NOTIFY = 125;
message Proto_STSBroadPlayerMsgNotify
{
  repeated uint64 user_id = 1;
  optional uint32 msg_id = 2;
  optional bytes msg_data = 3;
}

//NF_SEVER_TO_WEB_SERVER_RSP_NOTIFY = 126;
message Proto_STWebMsgRspNotify
{
  optional uint64 request_id = 1;
  optional int32 result = 2;
  optional string err_msg = 3;
}

/* Behavior日志接入公共头部 */
message BehaviorLogHeader
{
  ////////////////////////////////1-20///////////////////////////
  optional uint64	event_id = 1[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_PRIMARYKEY];                         /*   游戏事件ID */
  optional uint32  sequence = 2;													/*   日志事件的序列号 */
  optional string bus_name = 3 [(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.db_field_bufsize)=128];											/*   登录的游戏服务器编号 */
  optional string event_time = 4 [(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.db_field_bufsize)=128];                       /*   游戏事件的时间, 格式 YYYY-MM-DD HH:MM:SS */
  optional uint64 user_id = 5;                        /*   玩家ID */
  optional string user_name = 6 [(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.db_field_bufsize)=128];													  /*   玩家名-Base64 */
  ///////////////////////////////////////////////////////////////
};

// 错误码
enum Proto_Kernel_ErrorCode {
  option allow_alias = true;
  //0------10000
  ERR_CODE_SVR_OK = 0;
  ERR_CODE_SVR_SYSTEM_ERROR = -1;
  ERR_CODE_SVR_SYSTEM_TIMEOUT = -2;
  ERR_CODE_SVR_SYSTEM_DATABASE_ERROR = -3;

  ERR_CODE_MSG_RPC_BASE = -100;
  ERR_CODE_RPC_INVALID_PARAM = -101;   // 参数错误
  ERR_CODE_RPC_ENCODE_FAILED = -102;   // 编码错误
  ERR_CODE_RPC_DECODE_FAILED = -103;   // 解码错误
  ERR_CODE_RPC_RECV_EXCEPTION_MSG = -104;   // 收到EXCEPTION消息
  ERR_CODE_RPC_UNKNOWN_TYPE = -105;   // 消息类型错误
  ERR_CODE_RPC_UNSUPPORT_FUNCTION_NAME = -106;  // 不支持的函数名
  ERR_CODE_RPC_SESSION_NOT_FOUND = -107;   // session已过期
  ERR_CODE_RPC_SEND_FAILED = -108;   // 发送失败
  ERR_CODE_RPC_REQUEST_TIMEOUT = -109;   // 请求超时
  ERR_CODE_RPC_FUNCTION_NAME_EXISTED = -110; // 服务名已存在
  ERR_CODE_RPC_SYSTEM_ERROR = -111;  // 系统错误
  ERR_CODE_RPC_PROCESS_TIMEOUT = -112;  // 服务处理超时
  ERR_CODE_RPC_MSG_FUNCTION_UNEXISTED = -113;  // 服务名不存在
  ERR_CODE_RPC_SYSTEM_OVERLOAD_BASE = -114; // 系统过载BASE
  ERR_CODE_RPC_MESSAGE_EXPIRED = -115; // 系统过载-消息过期
  ERR_CODE_RPC_TASK_OVERLOAD = -116; // 系统过载-并发任务过载
  ERR_CODE_RPC_CO_USED = -117; //rpc所在的携程已经被使用了

  /////////////////////////zk调用返回码/////////////////////////////////////
  ERR_CODE_ZK_SYSTEMERROR = -200;///< System and server-side errors.
  ERR_CODE_ZK_RUNTIMEINCONSISTENCY = -201;///< A runtime inconsistency was found
  ERR_CODE_ZK_DATAINCONSISTENCY = -203;  ///< A data inconsistency was found
  ERR_CODE_ZK_CONNECTIONLOSS = -204; ///< Connection to the server has been lost
  ERR_CODE_ZK_MARSHALLINGERROR = -205; ///< Error while marshalling or unmarshalling data
  ERR_CODE_ZK_UNIMPLEMENTED = -206; ///< Operation is unimplemented
  ERR_CODE_ZK_OPERATIONTIMEOUT = -207; ///< Operation timeout
  ERR_CODE_ZK_BADARGUMENTS = -208; ///< Invalid arguments
  ERR_CODE_ZK_INVALIDSTATE = -209; ///< Invliad zhandle state
  ERR_CODE_kSM_DNSFAILURE = -210; ///< Error occurs when dns lookup

  ERR_CODE_ZK_APIERROR = -211;
  ERR_CODE_ZK_NONODE = -212; ///< Node does not exist
  ERR_CODE_ZK_NOAUTH = -213; ///< Not authenticated
  ERR_CODE_ZK_BADVERSION = -214; ///< Version conflict
  ERR_CODE_ZK_NOCHILDRENFOREPHEMERALS = -215;  ///< Ephemeral nodes may not have children
  ERR_CODE_ZK_NODEEXISTS = -216;  ///< The node already exists
  ERR_CODE_ZK_NOTEMPTY = -217; ///< The node has children
  ERR_CODE_ZK_SESSIONEXPIRED = -218; ///< The session has been expired by the server
  ERR_CODE_ZK_INVALIDCALLBACK = -219;  ///< Invalid callback specified
  ERR_CODE_ZK_INVALIDACL = -220;  ///< Invalid ACL specified
  ERR_CODE_ZK_AUTHFAILED = -221;  ///< Client authentication failed
  ERR_CODE_ZK_CLOSING = -222;  ///< ZooKeeper is closing
  ERR_CODE_ZK_NOTHING = -223; ///< (not error) no server responses to process
  ERR_CODE_ZK_SESSIONMOVED = -224;  ///< session moved to another server, so operation is ignored
  ERR_CODE_ZK_NOQUOTA = -225;  ///< quota is not enough.
  ERR_CODE_ZK_SERVEROVERLOAD = -226;  ///< server overload.
  ERR_CODE_ZK_NOT_SET_APPKEY = -227;  ///< 未设置appkey
  /////////////////////////zk调用返回码/////////////////////////////////////

  ERR_CODE_MESSAGE_BASE = -300;
  ////////////////////////////////////////////////////////////////////
  ERR_CODE_NAMING_BASE = -400;
  ERR_CODE_NAMING_NOT_SUPPORTTED = -401;
  ERR_CODE_NAMING_INVAILD_PARAM = -402;
  ERR_CODE_NAMING_URL_REGISTERED = -403; ///< 已经注册过了
  ERR_CODE_NAMING_URL_NOT_BINDED = -404; ///< 注册的地址没有bind
  ERR_CODE_NAMING_REGISTER_FAILED = -405; ///< 注册地址失败
  ERR_CODE_NAMING_FACTORY_MAP_NULL = -406; ///< 名字工厂map为空
  ERR_CODE_NAMING_FACTORY_EXISTED = -407;  ///< 名字工厂已存在
  ///////////////////////////////////////////////////////////////////
  ERR_CODE_ROUTER_BASE = -500;
  ERR_CODE_ROUTER_NOT_SUPPORTTED = -501;
  ERR_CODE_ROUTER_INVAILD_PARAM = -502;
  ERR_CODE_ROUTER_NONE_VALID_HANDLE = -503;
  ERR_CODE_ROUTER_FACTORY_MAP_NULL = -504;     ///< 名字工厂map为空
  ERR_CODE_ROUTER_FACTORY_EXISTED = -505;     ///< 名字工厂已存在
  NF_CODE_ROUTER_DISPATCHFAILD_DESTSVR_NOTEXIST = -506; // 转发失败，对端服务不存在
  ////////////////////////////////////////////////////////////////////
  ERR_CODE_TIMER_BASE = -600;
  ////////////////////////////////////////////////////////////////////
  ERR_CODE_STORESVR_ERRCODE_BUSY = -701;
  ERR_CODE_STORESVR_ERRCODE_EINVAL = -702;
  ERR_CODE_STORESVR_ERRCODE_PARSEFROMSTRINGFAILED = -703;
  ERR_CODE_STORESVR_ERRCODE_DBNAME_OR_MODKEY_INVALID = -704;
  ERR_CODE_STORESVR_ERRCODE_TBNAME_INVALID = -705;
  ERR_CODE_STORESVR_ERRCODE_SELECT_EMPTY = -706;
  ERR_CODE_STORESVR_ERRCODE_SELECT_FILLMESSAGEBYRESULTFAILED = -707;
  ERR_CODE_STORESVR_ERRCODE_SELECTFAILED = -708;
  ERR_CODE_STORESVR_ERRCODE_INSERTFAILED = -711;
  ERR_CODE_STORESVR_ERRCODE_DELETEFAILED = -712;
  ERR_CODE_STORESVR_ERRCODE_DELETERECORDISNOTEXIST = -713;
  ERR_CODE_STORESVR_ERRCODE_UPDATERECORDISNOTEXIST = -714;
  ERR_CODE_STORESVR_ERRCODE_UPDATENOROWAFFECTED = -715;
  ERR_CODE_STORESVR_ERRCODE_UPDATEFAILED = -716;
  ERR_CODE_STORESVR_ERRCODE_UPDATEINSERTFAILED = -717;
  ERR_CODE_STORESVR_ERRCODE_UNKNOWN = -718;
  /////////////////////////协程模块错误码定义/////////////////////////////////////
  ERR_CODE_CO_INVALID_PARAM = -801;
  ERR_CODE_CO_NOT_IN_COROUTINE = -802;
  ERR_CODE_CO_NOT_RUNNING = -803;
  ERR_CODE_CO_START_TIMER_FAILED = -804;
  ERR_CODE_CO_TIMEOUT = -805;
  ERR_CODE_CO_CANNOT_RESUME_IN_COROUTINE = -806;
  ERR_CODE_CO_COROUTINE_UNEXIST = -807;
  ERR_CODE_CO_COROUTINE_STATUS_ERROR = -809;
  /////////////////////////协程模块错误码定义/////////////////////////////////////
  /////////////////////////共享内存bus通信错误/////////////////////////////////////
  ERR_CODE_NFBUS_ERR_PARAMS = -901;
  ERR_CODE_NFBUS_ERR_INNER = -902;
  ERR_CODE_NFBUS_ERR_NO_DATA = -903;  // 无数据
  ERR_CODE_NFBUS_ERR_BUFF_LIMIT = -904;  // 缓冲区不足
  ERR_CODE_NFBUS_ERR_MALLOC = -905;  // 分配失败
  ERR_CODE_NFBUS_ERR_SCHEME = -906;  // 协议错误
  ERR_CODE_NFBUS_ERR_BAD_DATA = -907;  // 数据校验不通过
  ERR_CODE_NFBUS_ERR_INVALID_SIZE = -908;  // 数据大小异常
  ERR_CODE_NFBUS_ERR_NOT_INITED = -909;  // 未初始化
  ERR_CODE_NFBUS_ERR_ALREADY_INITED = -910; // 已填充初始数据
  ERR_CODE_NFBUS_ERR_ACCESS_DENY = -911; // 不允许的操作
  ERR_CODE_NFBUS_ERR_UNPACK = -912; // 解包失败
  ERR_CODE_NFBUS_ERR_PACK = -913; // 打包失败

  ERR_CODE_NFBUS_ERR_NFNODE_NOT_FOUND = -920; // 查找不到目标节点
  ERR_CODE_NFBUS_ERR_NFNODE_INVALID_ID = -901; // 不可用的ID
  ERR_CODE_NFBUS_ERR_NFNODE_NO_CONNECTION = -903; // 无可用连接
  ERR_CODE_NFBUS_ERR_NFNODE_FAULT_TOLERANT = -904; // 超出容错值
  ERR_CODE_NFBUS_ERR_NFNODE_INVALID_MSG = -905; // 错误的消息
  ERR_CODE_NFBUS_ERR_NFNODE_BUS_ID_NOT_MNFCH = -906; // Bus ID不匹配
  ERR_CODE_NFBUS_ERR_NFNODE_TTL = -907; // ttl限制
  ERR_CODE_NFBUS_ERR_NFNODE_MASK_CONFLICT = -908; // 域范围错误或冲突
  ERR_CODE_NFBUS_ERR_NFNODE_ID_CONFLICT = -909; // ID冲突
  ERR_CODE_NFBUS_ERR_NFNODE_SRC_DST_IS_SAME = -910; // 发送源和发送目标不能相同

  ERR_CODE_NFBUS_ERR_CHANNEL_SIZE_TOO_SMALL = -911;
  ERR_CODE_NFBUS_ERR_CHANNEL_BUFFER_INVALID = -912; // 缓冲区错误（已被其他模块使用或检测冲突）
  ERR_CODE_NFBUS_ERR_CHANNEL_ADDR_INVALID = -913; // 地址错误
  ERR_CODE_NFBUS_ERR_CHANNEL_CLOSING = -914; // 正在关闭
  ERR_CODE_NFBUS_ERR_CHANNEL_NOT_SUPPORT = -915; // 不支持的通道
  ERR_CODE_NFBUS_ERR_CHANNEL_UNSUPPORTED_VERSION = -916;   // 通道版本不受支持
  ERR_CODE_NFBUS_ERR_CHANNEL_ALIGN_SIZE_MISMATCH = -917;   // 对齐参数不一致
  ERR_CODE_NFBUS_ERR_CHANNEL_ARCH_SIZE_T_MISMATCH = -918;  // 架构size_t不匹配

  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_NODE_NUM = -930; // 发现写坏的数据块 - 节点数量错误
  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_BUFF_SIZE = -940; // 发现写坏的数据块 - 节点数量错误
  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_WSEQ_ID = -950; // 发现写坏的数据块 - 写操作序列错误
  ERR_CODE_NFBUS_ERR_NODE_BAD_BLOCK_CSEQ_ID = -960; // 发现写坏的数据块 - 检查操作序列错误

  ERR_CODE_NFBUS_ERR_NODE_TIMEOUT = -970; // 操作超时

  ERR_CODE_NFBUS_ERR_SHM_GET_FAILED = -980; // 连接共享内存出错，具体错误原因可以查看errno或类似的位置
  ERR_CODE_NFBUS_ERR_SHM_NOT_FOUND = -981; // 共享内存未找到
  ERR_CODE_NFBUS_ERR_SHM_CLOSE_FAILED = -982;  // 移除共享内存出错，具体错误原因可以查看errno或类似的位置
  ERR_CODE_NFBUS_ERR_SHM_PATH_INVALID = -983;  // 共享内存地址错误
  ERR_CODE_NFBUS_ERR_SHM_MAP_FAILED = -984;    // 共享内存地址映射错误

  ERR_CODE_NFBUS_ERR_SOCK_BIND_FAILED = -990; // 绑定地址或端口失败
  ERR_CODE_NFBUS_ERR_SOCK_LISTEN_FAILED = -991; // 监听失败
  ERR_CODE_NFBUS_ERR_SOCK_CONNECT_FAILED = -992; // 连接失败

  ERR_CODE_NFBUS_ERR_PIPE_BIND_FAILED = -1000; // 绑定地址或端口失败
  ERR_CODE_NFBUS_ERR_PIPE_LISTEN_FAILED = -1001; // 监听失败
  ERR_CODE_NFBUS_ERR_PIPE_CONNECT_FAILED = -1002; // 连接失败
  ERR_CODE_NFBUS_ERR_PIPE_ADDR_TOO_LONG = -1003; // 地址路径过长，绝对路径长度要小于 sizeof(sockaddr_un.sun_pNFh) - 1
  ERR_CODE_NFBUS_ERR_PIPE_REMOVE_FAILED = -1004; // 删除老socket失败

  ERR_CODE_NFBUS_ERR_DNS_GETADDR_FAILED = -1010; // DNS解析失败
  ERR_CODE_NFBUS_ERR_CONNECTION_NOT_FOUND = -1011; // 找不到连接
  ERR_CODE_NFBUS_ERR_WRITE_FAILED = -1012; // 底层API写失败
  ERR_CODE_NFBUS_ERR_READ_FAILED = -1013; // 底层API读失败
  ERR_CODE_NFBUS_ERR_EV_RUN = -1015; // 底层API事件循环失败
  ERR_CODE_NFBUS_ERR_NO_LISTEN = -1015; // 尚未监听（绑定）
  ERR_CODE_NFBUS_ERR_CLOSING = -1016; // 正在关闭或已关闭
  /////////////////////////共享内存bus通信错误/////////////////////////////////////


}

enum NFEventSrcType
{
  NF_EVENT_NONE_TYPE = 0;
  NF_EVENT_SERVER_TYPE = 1; //server event
  NF_EVENT_GM_TYPE = 2;   //GM
  NF_EVENT_PLAYER_TYPE = 4;   //player event
}

enum NFEventIdType
{
  //////server event////////////
  NF_EVENT_SERVER_TYPE_BEGIN = 1;
  NF_EVENT_SERVER_TASK_GROUP_FINISH = 2;
  NF_EVENT_SERVER_APP_FINISH_INITED = 5;
  NF_EVENT_SERVER_DEAD_EVENT = 6;
  NF_EVENT_GAME_SERVER_DUMP_EVENT = 8;
  NF_EVENT_LOGIC_SERVER_DUMP_EVENT = 9;
  NF_EVENT_WORLD_SERVER_DUMP_EVENT = 10;
  NF_EVENT_CENTER_SERVER_DUMP_VENT = 11;
  NF_EVENT_PROXY_SERVER_DUMP_EVENT = 12;
  NF_EVENT_PROXY_AGENT_SERVER_DUMP_EVENT = 13;
  NF_EVENT_STORE_SERVER_DMP_EVENT = 14;
  NF_EVENT_LOGIN_SERVER_DUMP_EVENT = 15;
  NF_EVENT_ROUTE_AGENT_SERVER_DUMP_EVENT = 16;
  NF_EVENT_ROUTE_SERVER_DUMP_EVENT = 17;
  NF_EVENT_MASTER_SERVER_DUMP_EVENT = 18;
  NF_EVENT_SERVER_REPORT_EVENT = 30;
  NF_EVENT_SERVER_TYPE_END = 99;
}

message NFEventNoneData
{
  optional int64 param1 = 1;
  optional int64 param2 = 2;
  optional int64 param3 = 3;
  optional int64 param4 = 4;
  optional int64 param5 = 5;
}

message NFEventScriptData
{
  optional string event_type = 1;
  optional string event_data = 2;
}

message Proto_ServerDumpInfoNtf
{
  optional string dump_info = 1;
  optional uint32 bus_id = 2;
}