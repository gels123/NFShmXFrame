// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResMeta.proto

#ifndef PROTOBUF_ResMeta_2eproto__INCLUDED
#define PROTOBUF_ResMeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "proto_common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ResMeta_2eproto();
void protobuf_AssignDesc_ResMeta_2eproto();
void protobuf_ShutdownFile_ResMeta_2eproto();

class MailDesc;
class Sheet_MailDesc;
class ConstDesc;
class Sheet_ConstDesc;
class NameDesc;
class Sheet_NameDesc;
class GameRoomDesc;
class Sheet_GameRoomDesc;

enum enMailID {
  EN_MAIL_ID_TEST = 1
};
bool enMailID_IsValid(int value);
const enMailID enMailID_MIN = EN_MAIL_ID_TEST;
const enMailID enMailID_MAX = EN_MAIL_ID_TEST;
const int enMailID_ARRAYSIZE = enMailID_MAX + 1;

const ::google::protobuf::EnumDescriptor* enMailID_descriptor();
inline const ::std::string& enMailID_Name(enMailID value) {
  return ::google::protobuf::internal::NameOfEnum(
    enMailID_descriptor(), value);
}
inline bool enMailID_Parse(
    const ::std::string& name, enMailID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enMailID>(
    enMailID_descriptor(), name, value);
}
enum GameRoomStatus {
  GAME_ROOM_STATUS_OPEN = 1,
  GAME_ROOM_STATUS_CLOSE_AND_EXE = 2,
  GAME_ROOM_STATUS_CLOSE_AND_NOT_EXE = 3,
  GAME_ROOM_STATUS_WAIT = 4,
  GAME_ROOM_STATUS_NOT_SEE = 5
};
bool GameRoomStatus_IsValid(int value);
const GameRoomStatus GameRoomStatus_MIN = GAME_ROOM_STATUS_OPEN;
const GameRoomStatus GameRoomStatus_MAX = GAME_ROOM_STATUS_NOT_SEE;
const int GameRoomStatus_ARRAYSIZE = GameRoomStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameRoomStatus_descriptor();
inline const ::std::string& GameRoomStatus_Name(GameRoomStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameRoomStatus_descriptor(), value);
}
inline bool GameRoomStatus_Parse(
    const ::std::string& name, GameRoomStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameRoomStatus>(
    GameRoomStatus_descriptor(), name, value);
}
// ===================================================================

class MailDesc : public ::google::protobuf::Message {
 public:
  MailDesc();
  virtual ~MailDesc();

  MailDesc(const MailDesc& from);

  inline MailDesc& operator=(const MailDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailDesc& default_instance();

  void Swap(MailDesc* other);

  // implements Message ----------------------------------------------

  MailDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailDesc& from);
  void MergeFrom(const MailDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string send_name = 5;
  inline bool has_send_name() const;
  inline void clear_send_name();
  static const int kSendNameFieldNumber = 5;
  inline const ::std::string& send_name() const;
  inline void set_send_name(const ::std::string& value);
  inline void set_send_name(const char* value);
  inline void set_send_name(const char* value, size_t size);
  inline ::std::string* mutable_send_name();
  inline ::std::string* release_send_name();
  inline void set_allocated_send_name(::std::string* send_name);

  // optional string start_time_str = 6;
  inline bool has_start_time_str() const;
  inline void clear_start_time_str();
  static const int kStartTimeStrFieldNumber = 6;
  inline const ::std::string& start_time_str() const;
  inline void set_start_time_str(const ::std::string& value);
  inline void set_start_time_str(const char* value);
  inline void set_start_time_str(const char* value, size_t size);
  inline ::std::string* mutable_start_time_str();
  inline ::std::string* release_start_time_str();
  inline void set_allocated_start_time_str(::std::string* start_time_str);

  // optional string end_time_str = 7;
  inline bool has_end_time_str() const;
  inline void clear_end_time_str();
  static const int kEndTimeStrFieldNumber = 7;
  inline const ::std::string& end_time_str() const;
  inline void set_end_time_str(const ::std::string& value);
  inline void set_end_time_str(const char* value);
  inline void set_end_time_str(const char* value, size_t size);
  inline ::std::string* mutable_end_time_str();
  inline ::std::string* release_end_time_str();
  inline void set_allocated_end_time_str(::std::string* end_time_str);

  // optional uint64 start_time = 8;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 9;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional int32 add_gold = 11;
  inline bool has_add_gold() const;
  inline void clear_add_gold();
  static const int kAddGoldFieldNumber = 11;
  inline ::google::protobuf::int32 add_gold() const;
  inline void set_add_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MailDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_send_name();
  inline void clear_has_send_name();
  inline void set_has_start_time_str();
  inline void clear_has_start_time_str();
  inline void set_has_end_time_str();
  inline void clear_has_end_time_str();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_add_gold();
  inline void clear_has_add_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* content_;
  ::std::string* send_name_;
  ::std::string* start_time_str_;
  ::std::string* end_time_str_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::int32 add_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static MailDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MailDesc : public ::google::protobuf::Message {
 public:
  Sheet_MailDesc();
  virtual ~Sheet_MailDesc();

  Sheet_MailDesc(const Sheet_MailDesc& from);

  inline Sheet_MailDesc& operator=(const Sheet_MailDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MailDesc& default_instance();

  void Swap(Sheet_MailDesc* other);

  // implements Message ----------------------------------------------

  Sheet_MailDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MailDesc& from);
  void MergeFrom(const Sheet_MailDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.MailDesc MailDesc_List = 1;
  inline int maildesc_list_size() const;
  inline void clear_maildesc_list();
  static const int kMailDescListFieldNumber = 1;
  inline const ::proto_ff::MailDesc& maildesc_list(int index) const;
  inline ::proto_ff::MailDesc* mutable_maildesc_list(int index);
  inline ::proto_ff::MailDesc* add_maildesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailDesc >&
      maildesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailDesc >*
      mutable_maildesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MailDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::MailDesc > maildesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MailDesc* default_instance_;
};
// -------------------------------------------------------------------

class ConstDesc : public ::google::protobuf::Message {
 public:
  ConstDesc();
  virtual ~ConstDesc();

  ConstDesc(const ConstDesc& from);

  inline ConstDesc& operator=(const ConstDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstDesc& default_instance();

  void Swap(ConstDesc* other);

  // implements Message ----------------------------------------------

  ConstDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstDesc& from);
  void MergeFrom(const ConstDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional string type_name = 3;
  inline bool has_type_name() const;
  inline void clear_type_name();
  static const int kTypeNameFieldNumber = 3;
  inline const ::std::string& type_name() const;
  inline void set_type_name(const ::std::string& value);
  inline void set_type_name(const char* value);
  inline void set_type_name(const char* value, size_t size);
  inline ::std::string* mutable_type_name();
  inline ::std::string* release_type_name();
  inline void set_allocated_type_name(::std::string* type_name);

  // @@protoc_insertion_point(class_scope:proto_ff.ConstDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_type_name();
  inline void clear_has_type_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;
  ::std::string* type_name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static ConstDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_ConstDesc : public ::google::protobuf::Message {
 public:
  Sheet_ConstDesc();
  virtual ~Sheet_ConstDesc();

  Sheet_ConstDesc(const Sheet_ConstDesc& from);

  inline Sheet_ConstDesc& operator=(const Sheet_ConstDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_ConstDesc& default_instance();

  void Swap(Sheet_ConstDesc* other);

  // implements Message ----------------------------------------------

  Sheet_ConstDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_ConstDesc& from);
  void MergeFrom(const Sheet_ConstDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
  inline int constdesc_list_size() const;
  inline void clear_constdesc_list();
  static const int kConstDescListFieldNumber = 1;
  inline const ::proto_ff::ConstDesc& constdesc_list(int index) const;
  inline ::proto_ff::ConstDesc* mutable_constdesc_list(int index);
  inline ::proto_ff::ConstDesc* add_constdesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ConstDesc >&
      constdesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ConstDesc >*
      mutable_constdesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_ConstDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ConstDesc > constdesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_ConstDesc* default_instance_;
};
// -------------------------------------------------------------------

class NameDesc : public ::google::protobuf::Message {
 public:
  NameDesc();
  virtual ~NameDesc();

  NameDesc(const NameDesc& from);

  inline NameDesc& operator=(const NameDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameDesc& default_instance();

  void Swap(NameDesc* other);

  // implements Message ----------------------------------------------

  NameDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameDesc& from);
  void MergeFrom(const NameDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.NameDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static NameDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_NameDesc : public ::google::protobuf::Message {
 public:
  Sheet_NameDesc();
  virtual ~Sheet_NameDesc();

  Sheet_NameDesc(const Sheet_NameDesc& from);

  inline Sheet_NameDesc& operator=(const Sheet_NameDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_NameDesc& default_instance();

  void Swap(Sheet_NameDesc* other);

  // implements Message ----------------------------------------------

  Sheet_NameDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_NameDesc& from);
  void MergeFrom(const Sheet_NameDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.NameDesc NameDesc_List = 1;
  inline int namedesc_list_size() const;
  inline void clear_namedesc_list();
  static const int kNameDescListFieldNumber = 1;
  inline const ::proto_ff::NameDesc& namedesc_list(int index) const;
  inline ::proto_ff::NameDesc* mutable_namedesc_list(int index);
  inline ::proto_ff::NameDesc* add_namedesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::NameDesc >&
      namedesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::NameDesc >*
      mutable_namedesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_NameDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::NameDesc > namedesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_NameDesc* default_instance_;
};
// -------------------------------------------------------------------

class GameRoomDesc : public ::google::protobuf::Message {
 public:
  GameRoomDesc();
  virtual ~GameRoomDesc();

  GameRoomDesc(const GameRoomDesc& from);

  inline GameRoomDesc& operator=(const GameRoomDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRoomDesc& default_instance();

  void Swap(GameRoomDesc* other);

  // implements Message ----------------------------------------------

  GameRoomDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameRoomDesc& from);
  void MergeFrom(const GameRoomDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RoomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 GameID = 2;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIDFieldNumber = 2;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional string GameName = 3;
  inline bool has_gamename() const;
  inline void clear_gamename();
  static const int kGameNameFieldNumber = 3;
  inline const ::std::string& gamename() const;
  inline void set_gamename(const ::std::string& value);
  inline void set_gamename(const char* value);
  inline void set_gamename(const char* value, size_t size);
  inline ::std::string* mutable_gamename();
  inline ::std::string* release_gamename();
  inline void set_allocated_gamename(::std::string* gamename);

  // optional int32 RoomType = 4;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomTypeFieldNumber = 4;
  inline ::google::protobuf::int32 roomtype() const;
  inline void set_roomtype(::google::protobuf::int32 value);

  // optional string RoomName = 5;
  inline bool has_roomname() const;
  inline void clear_roomname();
  static const int kRoomNameFieldNumber = 5;
  inline const ::std::string& roomname() const;
  inline void set_roomname(const ::std::string& value);
  inline void set_roomname(const char* value);
  inline void set_roomname(const char* value, size_t size);
  inline ::std::string* mutable_roomname();
  inline ::std::string* release_roomname();
  inline void set_allocated_roomname(::std::string* roomname);

  // optional int32 SiteNum = 6;
  inline bool has_sitenum() const;
  inline void clear_sitenum();
  static const int kSiteNumFieldNumber = 6;
  inline ::google::protobuf::int32 sitenum() const;
  inline void set_sitenum(::google::protobuf::int32 value);

  // optional int32 DeskCount = 7;
  inline bool has_deskcount() const;
  inline void clear_deskcount();
  static const int kDeskCountFieldNumber = 7;
  inline ::google::protobuf::int32 deskcount() const;
  inline void set_deskcount(::google::protobuf::int32 value);

  // optional int32 MaxPeople = 8;
  inline bool has_maxpeople() const;
  inline void clear_maxpeople();
  static const int kMaxPeopleFieldNumber = 8;
  inline ::google::protobuf::int32 maxpeople() const;
  inline void set_maxpeople(::google::protobuf::int32 value);

  // optional int64 enter_min = 9;
  inline bool has_enter_min() const;
  inline void clear_enter_min();
  static const int kEnterMinFieldNumber = 9;
  inline ::google::protobuf::int64 enter_min() const;
  inline void set_enter_min(::google::protobuf::int64 value);

  // optional int64 enter_max = 10;
  inline bool has_enter_max() const;
  inline void clear_enter_max();
  static const int kEnterMaxFieldNumber = 10;
  inline ::google::protobuf::int64 enter_max() const;
  inline void set_enter_max(::google::protobuf::int64 value);

  // optional int32 auto_chair = 11;
  inline bool has_auto_chair() const;
  inline void clear_auto_chair();
  static const int kAutoChairFieldNumber = 11;
  inline ::google::protobuf::int32 auto_chair() const;
  inline void set_auto_chair(::google::protobuf::int32 value);

  // optional int32 is_exp_scene = 12;
  inline bool has_is_exp_scene() const;
  inline void clear_is_exp_scene();
  static const int kIsExpSceneFieldNumber = 12;
  inline ::google::protobuf::int32 is_exp_scene() const;
  inline void set_is_exp_scene(::google::protobuf::int32 value);

  // optional int64 exp_scene_gold = 13;
  inline bool has_exp_scene_gold() const;
  inline void clear_exp_scene_gold();
  static const int kExpSceneGoldFieldNumber = 13;
  inline ::google::protobuf::int64 exp_scene_gold() const;
  inline void set_exp_scene_gold(::google::protobuf::int64 value);

  // optional int32 robot_num = 14;
  inline bool has_robot_num() const;
  inline void clear_robot_num();
  static const int kRobotNumFieldNumber = 14;
  inline ::google::protobuf::int32 robot_num() const;
  inline void set_robot_num(::google::protobuf::int32 value);

  // optional int32 status = 15;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 15;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 RoomLevel = 16;
  inline bool has_roomlevel() const;
  inline void clear_roomlevel();
  static const int kRoomLevelFieldNumber = 16;
  inline ::google::protobuf::int32 roomlevel() const;
  inline void set_roomlevel(::google::protobuf::int32 value);

  // optional int32 Tax = 17;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 17;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // optional int32 StartTime = 18;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 18;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GameRoomDesc)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gamename();
  inline void clear_has_gamename();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();
  inline void set_has_roomname();
  inline void clear_has_roomname();
  inline void set_has_sitenum();
  inline void clear_has_sitenum();
  inline void set_has_deskcount();
  inline void clear_has_deskcount();
  inline void set_has_maxpeople();
  inline void clear_has_maxpeople();
  inline void set_has_enter_min();
  inline void clear_has_enter_min();
  inline void set_has_enter_max();
  inline void clear_has_enter_max();
  inline void set_has_auto_chair();
  inline void clear_has_auto_chair();
  inline void set_has_is_exp_scene();
  inline void clear_has_is_exp_scene();
  inline void set_has_exp_scene_gold();
  inline void clear_has_exp_scene_gold();
  inline void set_has_robot_num();
  inline void clear_has_robot_num();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_roomlevel();
  inline void clear_has_roomlevel();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 gameid_;
  ::std::string* gamename_;
  ::std::string* roomname_;
  ::google::protobuf::int32 roomtype_;
  ::google::protobuf::int32 sitenum_;
  ::google::protobuf::int32 deskcount_;
  ::google::protobuf::int32 maxpeople_;
  ::google::protobuf::int64 enter_min_;
  ::google::protobuf::int64 enter_max_;
  ::google::protobuf::int32 auto_chair_;
  ::google::protobuf::int32 is_exp_scene_;
  ::google::protobuf::int64 exp_scene_gold_;
  ::google::protobuf::int32 robot_num_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 roomlevel_;
  ::google::protobuf::int32 tax_;
  ::google::protobuf::int32 starttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static GameRoomDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_GameRoomDesc : public ::google::protobuf::Message {
 public:
  Sheet_GameRoomDesc();
  virtual ~Sheet_GameRoomDesc();

  Sheet_GameRoomDesc(const Sheet_GameRoomDesc& from);

  inline Sheet_GameRoomDesc& operator=(const Sheet_GameRoomDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_GameRoomDesc& default_instance();

  void Swap(Sheet_GameRoomDesc* other);

  // implements Message ----------------------------------------------

  Sheet_GameRoomDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_GameRoomDesc& from);
  void MergeFrom(const Sheet_GameRoomDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GameRoomDesc GameRoomDesc_List = 1;
  inline int gameroomdesc_list_size() const;
  inline void clear_gameroomdesc_list();
  static const int kGameRoomDescListFieldNumber = 1;
  inline const ::proto_ff::GameRoomDesc& gameroomdesc_list(int index) const;
  inline ::proto_ff::GameRoomDesc* mutable_gameroomdesc_list(int index);
  inline ::proto_ff::GameRoomDesc* add_gameroomdesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GameRoomDesc >&
      gameroomdesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GameRoomDesc >*
      mutable_gameroomdesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_GameRoomDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GameRoomDesc > gameroomdesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ResMeta_2eproto();
  friend void protobuf_AssignDesc_ResMeta_2eproto();
  friend void protobuf_ShutdownFile_ResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_GameRoomDesc* default_instance_;
};
// ===================================================================


// ===================================================================

// MailDesc

// required int32 id = 1;
inline bool MailDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MailDesc::id() const {
  return id_;
}
inline void MailDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string title = 2;
inline bool MailDesc::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailDesc::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailDesc::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailDesc::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MailDesc::title() const {
  return *title_;
}
inline void MailDesc::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MailDesc::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MailDesc::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailDesc::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MailDesc::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailDesc::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 type = 3;
inline bool MailDesc::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailDesc::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MailDesc::type() const {
  return type_;
}
inline void MailDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string content = 4;
inline bool MailDesc::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailDesc::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailDesc::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailDesc::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MailDesc::content() const {
  return *content_;
}
inline void MailDesc::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailDesc::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailDesc::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailDesc::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MailDesc::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailDesc::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string send_name = 5;
inline bool MailDesc::has_send_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailDesc::set_has_send_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailDesc::clear_has_send_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailDesc::clear_send_name() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    send_name_->clear();
  }
  clear_has_send_name();
}
inline const ::std::string& MailDesc::send_name() const {
  return *send_name_;
}
inline void MailDesc::set_send_name(const ::std::string& value) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(value);
}
inline void MailDesc::set_send_name(const char* value) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(value);
}
inline void MailDesc::set_send_name(const char* value, size_t size) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailDesc::mutable_send_name() {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  return send_name_;
}
inline ::std::string* MailDesc::release_send_name() {
  clear_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_name_;
    send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailDesc::set_allocated_send_name(::std::string* send_name) {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (send_name) {
    set_has_send_name();
    send_name_ = send_name;
  } else {
    clear_has_send_name();
    send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string start_time_str = 6;
inline bool MailDesc::has_start_time_str() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailDesc::set_has_start_time_str() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailDesc::clear_has_start_time_str() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailDesc::clear_start_time_str() {
  if (start_time_str_ != &::google::protobuf::internal::kEmptyString) {
    start_time_str_->clear();
  }
  clear_has_start_time_str();
}
inline const ::std::string& MailDesc::start_time_str() const {
  return *start_time_str_;
}
inline void MailDesc::set_start_time_str(const ::std::string& value) {
  set_has_start_time_str();
  if (start_time_str_ == &::google::protobuf::internal::kEmptyString) {
    start_time_str_ = new ::std::string;
  }
  start_time_str_->assign(value);
}
inline void MailDesc::set_start_time_str(const char* value) {
  set_has_start_time_str();
  if (start_time_str_ == &::google::protobuf::internal::kEmptyString) {
    start_time_str_ = new ::std::string;
  }
  start_time_str_->assign(value);
}
inline void MailDesc::set_start_time_str(const char* value, size_t size) {
  set_has_start_time_str();
  if (start_time_str_ == &::google::protobuf::internal::kEmptyString) {
    start_time_str_ = new ::std::string;
  }
  start_time_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailDesc::mutable_start_time_str() {
  set_has_start_time_str();
  if (start_time_str_ == &::google::protobuf::internal::kEmptyString) {
    start_time_str_ = new ::std::string;
  }
  return start_time_str_;
}
inline ::std::string* MailDesc::release_start_time_str() {
  clear_has_start_time_str();
  if (start_time_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = start_time_str_;
    start_time_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailDesc::set_allocated_start_time_str(::std::string* start_time_str) {
  if (start_time_str_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_str_;
  }
  if (start_time_str) {
    set_has_start_time_str();
    start_time_str_ = start_time_str;
  } else {
    clear_has_start_time_str();
    start_time_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string end_time_str = 7;
inline bool MailDesc::has_end_time_str() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailDesc::set_has_end_time_str() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailDesc::clear_has_end_time_str() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailDesc::clear_end_time_str() {
  if (end_time_str_ != &::google::protobuf::internal::kEmptyString) {
    end_time_str_->clear();
  }
  clear_has_end_time_str();
}
inline const ::std::string& MailDesc::end_time_str() const {
  return *end_time_str_;
}
inline void MailDesc::set_end_time_str(const ::std::string& value) {
  set_has_end_time_str();
  if (end_time_str_ == &::google::protobuf::internal::kEmptyString) {
    end_time_str_ = new ::std::string;
  }
  end_time_str_->assign(value);
}
inline void MailDesc::set_end_time_str(const char* value) {
  set_has_end_time_str();
  if (end_time_str_ == &::google::protobuf::internal::kEmptyString) {
    end_time_str_ = new ::std::string;
  }
  end_time_str_->assign(value);
}
inline void MailDesc::set_end_time_str(const char* value, size_t size) {
  set_has_end_time_str();
  if (end_time_str_ == &::google::protobuf::internal::kEmptyString) {
    end_time_str_ = new ::std::string;
  }
  end_time_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailDesc::mutable_end_time_str() {
  set_has_end_time_str();
  if (end_time_str_ == &::google::protobuf::internal::kEmptyString) {
    end_time_str_ = new ::std::string;
  }
  return end_time_str_;
}
inline ::std::string* MailDesc::release_end_time_str() {
  clear_has_end_time_str();
  if (end_time_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_time_str_;
    end_time_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailDesc::set_allocated_end_time_str(::std::string* end_time_str) {
  if (end_time_str_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_str_;
  }
  if (end_time_str) {
    set_has_end_time_str();
    end_time_str_ = end_time_str;
  } else {
    clear_has_end_time_str();
    end_time_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 start_time = 8;
inline bool MailDesc::has_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailDesc::set_has_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailDesc::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailDesc::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 MailDesc::start_time() const {
  return start_time_;
}
inline void MailDesc::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint64 end_time = 9;
inline bool MailDesc::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MailDesc::set_has_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MailDesc::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MailDesc::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 MailDesc::end_time() const {
  return end_time_;
}
inline void MailDesc::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 add_gold = 11;
inline bool MailDesc::has_add_gold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MailDesc::set_has_add_gold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MailDesc::clear_has_add_gold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MailDesc::clear_add_gold() {
  add_gold_ = 0;
  clear_has_add_gold();
}
inline ::google::protobuf::int32 MailDesc::add_gold() const {
  return add_gold_;
}
inline void MailDesc::set_add_gold(::google::protobuf::int32 value) {
  set_has_add_gold();
  add_gold_ = value;
}

// -------------------------------------------------------------------

// Sheet_MailDesc

// repeated .proto_ff.MailDesc MailDesc_List = 1;
inline int Sheet_MailDesc::maildesc_list_size() const {
  return maildesc_list_.size();
}
inline void Sheet_MailDesc::clear_maildesc_list() {
  maildesc_list_.Clear();
}
inline const ::proto_ff::MailDesc& Sheet_MailDesc::maildesc_list(int index) const {
  return maildesc_list_.Get(index);
}
inline ::proto_ff::MailDesc* Sheet_MailDesc::mutable_maildesc_list(int index) {
  return maildesc_list_.Mutable(index);
}
inline ::proto_ff::MailDesc* Sheet_MailDesc::add_maildesc_list() {
  return maildesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::MailDesc >&
Sheet_MailDesc::maildesc_list() const {
  return maildesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::MailDesc >*
Sheet_MailDesc::mutable_maildesc_list() {
  return &maildesc_list_;
}

// -------------------------------------------------------------------

// ConstDesc

// optional int32 id = 1;
inline bool ConstDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ConstDesc::id() const {
  return id_;
}
inline void ConstDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string value = 2;
inline bool ConstDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstDesc::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ConstDesc::value() const {
  return *value_;
}
inline void ConstDesc::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ConstDesc::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ConstDesc::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConstDesc::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* ConstDesc::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConstDesc::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type_name = 3;
inline bool ConstDesc::has_type_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstDesc::set_has_type_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstDesc::clear_has_type_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstDesc::clear_type_name() {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    type_name_->clear();
  }
  clear_has_type_name();
}
inline const ::std::string& ConstDesc::type_name() const {
  return *type_name_;
}
inline void ConstDesc::set_type_name(const ::std::string& value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
}
inline void ConstDesc::set_type_name(const char* value) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(value);
}
inline void ConstDesc::set_type_name(const char* value, size_t size) {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  type_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConstDesc::mutable_type_name() {
  set_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    type_name_ = new ::std::string;
  }
  return type_name_;
}
inline ::std::string* ConstDesc::release_type_name() {
  clear_has_type_name();
  if (type_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_name_;
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConstDesc::set_allocated_type_name(::std::string* type_name) {
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (type_name) {
    set_has_type_name();
    type_name_ = type_name;
  } else {
    clear_has_type_name();
    type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_ConstDesc

// repeated .proto_ff.ConstDesc ConstDesc_List = 1;
inline int Sheet_ConstDesc::constdesc_list_size() const {
  return constdesc_list_.size();
}
inline void Sheet_ConstDesc::clear_constdesc_list() {
  constdesc_list_.Clear();
}
inline const ::proto_ff::ConstDesc& Sheet_ConstDesc::constdesc_list(int index) const {
  return constdesc_list_.Get(index);
}
inline ::proto_ff::ConstDesc* Sheet_ConstDesc::mutable_constdesc_list(int index) {
  return constdesc_list_.Mutable(index);
}
inline ::proto_ff::ConstDesc* Sheet_ConstDesc::add_constdesc_list() {
  return constdesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ConstDesc >&
Sheet_ConstDesc::constdesc_list() const {
  return constdesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ConstDesc >*
Sheet_ConstDesc::mutable_constdesc_list() {
  return &constdesc_list_;
}

// -------------------------------------------------------------------

// NameDesc

// optional uint64 id = 1;
inline bool NameDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameDesc::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 NameDesc::id() const {
  return id_;
}
inline void NameDesc::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool NameDesc::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameDesc::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameDesc::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameDesc::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NameDesc::name() const {
  return *name_;
}
inline void NameDesc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NameDesc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NameDesc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameDesc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NameDesc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameDesc::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_NameDesc

// repeated .proto_ff.NameDesc NameDesc_List = 1;
inline int Sheet_NameDesc::namedesc_list_size() const {
  return namedesc_list_.size();
}
inline void Sheet_NameDesc::clear_namedesc_list() {
  namedesc_list_.Clear();
}
inline const ::proto_ff::NameDesc& Sheet_NameDesc::namedesc_list(int index) const {
  return namedesc_list_.Get(index);
}
inline ::proto_ff::NameDesc* Sheet_NameDesc::mutable_namedesc_list(int index) {
  return namedesc_list_.Mutable(index);
}
inline ::proto_ff::NameDesc* Sheet_NameDesc::add_namedesc_list() {
  return namedesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::NameDesc >&
Sheet_NameDesc::namedesc_list() const {
  return namedesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::NameDesc >*
Sheet_NameDesc::mutable_namedesc_list() {
  return &namedesc_list_;
}

// -------------------------------------------------------------------

// GameRoomDesc

// optional int32 RoomID = 1;
inline bool GameRoomDesc::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameRoomDesc::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameRoomDesc::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameRoomDesc::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 GameRoomDesc::roomid() const {
  return roomid_;
}
inline void GameRoomDesc::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 GameID = 2;
inline bool GameRoomDesc::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameRoomDesc::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameRoomDesc::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameRoomDesc::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GameRoomDesc::gameid() const {
  return gameid_;
}
inline void GameRoomDesc::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional string GameName = 3;
inline bool GameRoomDesc::has_gamename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameRoomDesc::set_has_gamename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameRoomDesc::clear_has_gamename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameRoomDesc::clear_gamename() {
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    gamename_->clear();
  }
  clear_has_gamename();
}
inline const ::std::string& GameRoomDesc::gamename() const {
  return *gamename_;
}
inline void GameRoomDesc::set_gamename(const ::std::string& value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
}
inline void GameRoomDesc::set_gamename(const char* value) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(value);
}
inline void GameRoomDesc::set_gamename(const char* value, size_t size) {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  gamename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameRoomDesc::mutable_gamename() {
  set_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    gamename_ = new ::std::string;
  }
  return gamename_;
}
inline ::std::string* GameRoomDesc::release_gamename() {
  clear_has_gamename();
  if (gamename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gamename_;
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameRoomDesc::set_allocated_gamename(::std::string* gamename) {
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete gamename_;
  }
  if (gamename) {
    set_has_gamename();
    gamename_ = gamename;
  } else {
    clear_has_gamename();
    gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 RoomType = 4;
inline bool GameRoomDesc::has_roomtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameRoomDesc::set_has_roomtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameRoomDesc::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameRoomDesc::clear_roomtype() {
  roomtype_ = 0;
  clear_has_roomtype();
}
inline ::google::protobuf::int32 GameRoomDesc::roomtype() const {
  return roomtype_;
}
inline void GameRoomDesc::set_roomtype(::google::protobuf::int32 value) {
  set_has_roomtype();
  roomtype_ = value;
}

// optional string RoomName = 5;
inline bool GameRoomDesc::has_roomname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameRoomDesc::set_has_roomname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameRoomDesc::clear_has_roomname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameRoomDesc::clear_roomname() {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    roomname_->clear();
  }
  clear_has_roomname();
}
inline const ::std::string& GameRoomDesc::roomname() const {
  return *roomname_;
}
inline void GameRoomDesc::set_roomname(const ::std::string& value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void GameRoomDesc::set_roomname(const char* value) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(value);
}
inline void GameRoomDesc::set_roomname(const char* value, size_t size) {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  roomname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameRoomDesc::mutable_roomname() {
  set_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    roomname_ = new ::std::string;
  }
  return roomname_;
}
inline ::std::string* GameRoomDesc::release_roomname() {
  clear_has_roomname();
  if (roomname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomname_;
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameRoomDesc::set_allocated_roomname(::std::string* roomname) {
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (roomname) {
    set_has_roomname();
    roomname_ = roomname;
  } else {
    clear_has_roomname();
    roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 SiteNum = 6;
inline bool GameRoomDesc::has_sitenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameRoomDesc::set_has_sitenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameRoomDesc::clear_has_sitenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameRoomDesc::clear_sitenum() {
  sitenum_ = 0;
  clear_has_sitenum();
}
inline ::google::protobuf::int32 GameRoomDesc::sitenum() const {
  return sitenum_;
}
inline void GameRoomDesc::set_sitenum(::google::protobuf::int32 value) {
  set_has_sitenum();
  sitenum_ = value;
}

// optional int32 DeskCount = 7;
inline bool GameRoomDesc::has_deskcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameRoomDesc::set_has_deskcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameRoomDesc::clear_has_deskcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameRoomDesc::clear_deskcount() {
  deskcount_ = 0;
  clear_has_deskcount();
}
inline ::google::protobuf::int32 GameRoomDesc::deskcount() const {
  return deskcount_;
}
inline void GameRoomDesc::set_deskcount(::google::protobuf::int32 value) {
  set_has_deskcount();
  deskcount_ = value;
}

// optional int32 MaxPeople = 8;
inline bool GameRoomDesc::has_maxpeople() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameRoomDesc::set_has_maxpeople() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameRoomDesc::clear_has_maxpeople() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameRoomDesc::clear_maxpeople() {
  maxpeople_ = 0;
  clear_has_maxpeople();
}
inline ::google::protobuf::int32 GameRoomDesc::maxpeople() const {
  return maxpeople_;
}
inline void GameRoomDesc::set_maxpeople(::google::protobuf::int32 value) {
  set_has_maxpeople();
  maxpeople_ = value;
}

// optional int64 enter_min = 9;
inline bool GameRoomDesc::has_enter_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameRoomDesc::set_has_enter_min() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameRoomDesc::clear_has_enter_min() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameRoomDesc::clear_enter_min() {
  enter_min_ = GOOGLE_LONGLONG(0);
  clear_has_enter_min();
}
inline ::google::protobuf::int64 GameRoomDesc::enter_min() const {
  return enter_min_;
}
inline void GameRoomDesc::set_enter_min(::google::protobuf::int64 value) {
  set_has_enter_min();
  enter_min_ = value;
}

// optional int64 enter_max = 10;
inline bool GameRoomDesc::has_enter_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameRoomDesc::set_has_enter_max() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameRoomDesc::clear_has_enter_max() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameRoomDesc::clear_enter_max() {
  enter_max_ = GOOGLE_LONGLONG(0);
  clear_has_enter_max();
}
inline ::google::protobuf::int64 GameRoomDesc::enter_max() const {
  return enter_max_;
}
inline void GameRoomDesc::set_enter_max(::google::protobuf::int64 value) {
  set_has_enter_max();
  enter_max_ = value;
}

// optional int32 auto_chair = 11;
inline bool GameRoomDesc::has_auto_chair() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameRoomDesc::set_has_auto_chair() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameRoomDesc::clear_has_auto_chair() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameRoomDesc::clear_auto_chair() {
  auto_chair_ = 0;
  clear_has_auto_chair();
}
inline ::google::protobuf::int32 GameRoomDesc::auto_chair() const {
  return auto_chair_;
}
inline void GameRoomDesc::set_auto_chair(::google::protobuf::int32 value) {
  set_has_auto_chair();
  auto_chair_ = value;
}

// optional int32 is_exp_scene = 12;
inline bool GameRoomDesc::has_is_exp_scene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameRoomDesc::set_has_is_exp_scene() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameRoomDesc::clear_has_is_exp_scene() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameRoomDesc::clear_is_exp_scene() {
  is_exp_scene_ = 0;
  clear_has_is_exp_scene();
}
inline ::google::protobuf::int32 GameRoomDesc::is_exp_scene() const {
  return is_exp_scene_;
}
inline void GameRoomDesc::set_is_exp_scene(::google::protobuf::int32 value) {
  set_has_is_exp_scene();
  is_exp_scene_ = value;
}

// optional int64 exp_scene_gold = 13;
inline bool GameRoomDesc::has_exp_scene_gold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GameRoomDesc::set_has_exp_scene_gold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GameRoomDesc::clear_has_exp_scene_gold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GameRoomDesc::clear_exp_scene_gold() {
  exp_scene_gold_ = GOOGLE_LONGLONG(0);
  clear_has_exp_scene_gold();
}
inline ::google::protobuf::int64 GameRoomDesc::exp_scene_gold() const {
  return exp_scene_gold_;
}
inline void GameRoomDesc::set_exp_scene_gold(::google::protobuf::int64 value) {
  set_has_exp_scene_gold();
  exp_scene_gold_ = value;
}

// optional int32 robot_num = 14;
inline bool GameRoomDesc::has_robot_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameRoomDesc::set_has_robot_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameRoomDesc::clear_has_robot_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameRoomDesc::clear_robot_num() {
  robot_num_ = 0;
  clear_has_robot_num();
}
inline ::google::protobuf::int32 GameRoomDesc::robot_num() const {
  return robot_num_;
}
inline void GameRoomDesc::set_robot_num(::google::protobuf::int32 value) {
  set_has_robot_num();
  robot_num_ = value;
}

// optional int32 status = 15;
inline bool GameRoomDesc::has_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GameRoomDesc::set_has_status() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GameRoomDesc::clear_has_status() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GameRoomDesc::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GameRoomDesc::status() const {
  return status_;
}
inline void GameRoomDesc::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 RoomLevel = 16;
inline bool GameRoomDesc::has_roomlevel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GameRoomDesc::set_has_roomlevel() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GameRoomDesc::clear_has_roomlevel() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GameRoomDesc::clear_roomlevel() {
  roomlevel_ = 0;
  clear_has_roomlevel();
}
inline ::google::protobuf::int32 GameRoomDesc::roomlevel() const {
  return roomlevel_;
}
inline void GameRoomDesc::set_roomlevel(::google::protobuf::int32 value) {
  set_has_roomlevel();
  roomlevel_ = value;
}

// optional int32 Tax = 17;
inline bool GameRoomDesc::has_tax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GameRoomDesc::set_has_tax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GameRoomDesc::clear_has_tax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GameRoomDesc::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
inline ::google::protobuf::int32 GameRoomDesc::tax() const {
  return tax_;
}
inline void GameRoomDesc::set_tax(::google::protobuf::int32 value) {
  set_has_tax();
  tax_ = value;
}

// optional int32 StartTime = 18;
inline bool GameRoomDesc::has_starttime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GameRoomDesc::set_has_starttime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GameRoomDesc::clear_has_starttime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GameRoomDesc::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 GameRoomDesc::starttime() const {
  return starttime_;
}
inline void GameRoomDesc::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// -------------------------------------------------------------------

// Sheet_GameRoomDesc

// repeated .proto_ff.GameRoomDesc GameRoomDesc_List = 1;
inline int Sheet_GameRoomDesc::gameroomdesc_list_size() const {
  return gameroomdesc_list_.size();
}
inline void Sheet_GameRoomDesc::clear_gameroomdesc_list() {
  gameroomdesc_list_.Clear();
}
inline const ::proto_ff::GameRoomDesc& Sheet_GameRoomDesc::gameroomdesc_list(int index) const {
  return gameroomdesc_list_.Get(index);
}
inline ::proto_ff::GameRoomDesc* Sheet_GameRoomDesc::mutable_gameroomdesc_list(int index) {
  return gameroomdesc_list_.Mutable(index);
}
inline ::proto_ff::GameRoomDesc* Sheet_GameRoomDesc::add_gameroomdesc_list() {
  return gameroomdesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GameRoomDesc >&
Sheet_GameRoomDesc::gameroomdesc_list() const {
  return gameroomdesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GameRoomDesc >*
Sheet_GameRoomDesc::mutable_gameroomdesc_list() {
  return &gameroomdesc_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::enMailID>() {
  return ::proto_ff::enMailID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::GameRoomStatus>() {
  return ::proto_ff::GameRoomStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ResMeta_2eproto__INCLUDED
