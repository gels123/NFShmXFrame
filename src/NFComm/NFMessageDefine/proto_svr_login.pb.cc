// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_LTWRegisterUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTWRegisterUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WTLRegisterUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WTLRegisterUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTLRegisterUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTLRegisterUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_PTWUserLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_PTWUserLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WTPPlayerLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WTPPlayerLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WorldToLogicLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WorldToLogicLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LogicToWorldLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LogicToWorldLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerReconnctRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerReconnctRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WTLNotifyPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WTLNotifyPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTWNotifyPlayerReconnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTWNotifyPlayerReconnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WTGNotifyPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WTGNotifyPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTWNotifyPlayerReconnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTWNotifyPlayerReconnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTSNotifyPlayerReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTSNotifyPlayerReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_WorldToLogicLogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_WorldToLogicLogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LogicToWorldLogoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LogicToWorldLogoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LogicToSnsLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LogicToSnsLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SnsToLogicLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SnsToLogicLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LogicToSnsLogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LogicToSnsLogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SnsToLogicLogoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SnsToLogicLogoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LogicToWorldLogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LogicToWorldLogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTWebPhoneAuthCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTWebPhoneAuthCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebTLPhoneAuthCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebTLPhoneAuthCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTWebPhoneCheckCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTWebPhoneCheckCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebTLPhoneCheckCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebTLPhoneCheckCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebPhoneCodeRetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebPhoneCodeRetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTSnsChangeFaceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTSnsChangeFaceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTSnsChangeNickNameNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTSnsChangeNickNameNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTSnsChangeVipLevelNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTSnsChangeVipLevelNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTSnsChangeUserIdNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTSnsChangeUserIdNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LTLPlayerDeviceChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LTLPlayerDeviceChangeNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_LoginSvrMsgID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_AccountState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PhoneCodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5flogin_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_login.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_LTWRegisterUserReq_descriptor_ = file->message_type(0);
  static const int Proto_LTWRegisterUserReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWRegisterUserReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWRegisterUserReq, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWRegisterUserReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWRegisterUserReq, ext_data_),
  };
  Proto_LTWRegisterUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTWRegisterUserReq_descriptor_,
      Proto_LTWRegisterUserReq::default_instance_,
      Proto_LTWRegisterUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWRegisterUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTWRegisterUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTWRegisterUserReq));
  Proto_WTLRegisterUserReq_descriptor_ = file->message_type(1);
  static const int Proto_WTLRegisterUserReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, ext_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, login_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, req_trans_id_),
  };
  Proto_WTLRegisterUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WTLRegisterUserReq_descriptor_,
      Proto_WTLRegisterUserReq::default_instance_,
      Proto_WTLRegisterUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTLRegisterUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WTLRegisterUserReq));
  Proto_LTLRegisterUserRsp_descriptor_ = file->message_type(2);
  static const int Proto_LTLRegisterUserRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTLRegisterUserRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTLRegisterUserRsp, user_id_),
  };
  Proto_LTLRegisterUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTLRegisterUserRsp_descriptor_,
      Proto_LTLRegisterUserRsp::default_instance_,
      Proto_LTLRegisterUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTLRegisterUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTLRegisterUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTLRegisterUserRsp));
  Proto_PTWUserLoginReq_descriptor_ = file->message_type(3);
  static const int Proto_PTWUserLoginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, proxy_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, ext_data_),
  };
  Proto_PTWUserLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_PTWUserLoginReq_descriptor_,
      Proto_PTWUserLoginReq::default_instance_,
      Proto_PTWUserLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PTWUserLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_PTWUserLoginReq));
  Proto_WTPPlayerLoginRsp_descriptor_ = file->message_type(4);
  static const int Proto_WTPPlayerLoginRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, logic_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, detail_data_),
  };
  Proto_WTPPlayerLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WTPPlayerLoginRsp_descriptor_,
      Proto_WTPPlayerLoginRsp::default_instance_,
      Proto_WTPPlayerLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WTPPlayerLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WTPPlayerLoginRsp));
  Proto_WorldToLogicLoginReq_descriptor_ = file->message_type(5);
  static const int Proto_WorldToLogicLoginReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, proxy_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, ext_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, client_ip_),
  };
  Proto_WorldToLogicLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WorldToLogicLoginReq_descriptor_,
      Proto_WorldToLogicLoginReq::default_instance_,
      Proto_WorldToLogicLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WorldToLogicLoginReq));
  Proto_LogicToWorldLoginRsp_descriptor_ = file->message_type(6);
  static const int Proto_LogicToWorldLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, detail_data_),
  };
  Proto_LogicToWorldLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LogicToWorldLoginRsp_descriptor_,
      Proto_LogicToWorldLoginRsp::default_instance_,
      Proto_LogicToWorldLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LogicToWorldLoginRsp));
  NotifyPlayerDisconnect_descriptor_ = file->message_type(7);
  static const int NotifyPlayerDisconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerDisconnect, player_id_),
  };
  NotifyPlayerDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPlayerDisconnect_descriptor_,
      NotifyPlayerDisconnect::default_instance_,
      NotifyPlayerDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPlayerDisconnect));
  NotifyPlayerReconnectReq_descriptor_ = file->message_type(8);
  static const int NotifyPlayerReconnectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnectReq, proxy_bus_id_),
  };
  NotifyPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPlayerReconnectReq_descriptor_,
      NotifyPlayerReconnectReq::default_instance_,
      NotifyPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPlayerReconnectReq));
  NotifyPlayerReconnctRsp_descriptor_ = file->message_type(9);
  static const int NotifyPlayerReconnctRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, logic_bus_id_),
  };
  NotifyPlayerReconnctRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPlayerReconnctRsp_descriptor_,
      NotifyPlayerReconnctRsp::default_instance_,
      NotifyPlayerReconnctRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerReconnctRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPlayerReconnctRsp));
  WTLNotifyPlayerReconnectReq_descriptor_ = file->message_type(10);
  static const int WTLNotifyPlayerReconnectReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLNotifyPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLNotifyPlayerReconnectReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLNotifyPlayerReconnectReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLNotifyPlayerReconnectReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLNotifyPlayerReconnectReq, proxy_bus_id_),
  };
  WTLNotifyPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WTLNotifyPlayerReconnectReq_descriptor_,
      WTLNotifyPlayerReconnectReq::default_instance_,
      WTLNotifyPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLNotifyPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTLNotifyPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WTLNotifyPlayerReconnectReq));
  LTWNotifyPlayerReconnectRsp_descriptor_ = file->message_type(11);
  static const int LTWNotifyPlayerReconnectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWNotifyPlayerReconnectRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWNotifyPlayerReconnectRsp, player_id_),
  };
  LTWNotifyPlayerReconnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTWNotifyPlayerReconnectRsp_descriptor_,
      LTWNotifyPlayerReconnectRsp::default_instance_,
      LTWNotifyPlayerReconnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWNotifyPlayerReconnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWNotifyPlayerReconnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTWNotifyPlayerReconnectRsp));
  WTGNotifyPlayerReconnectReq_descriptor_ = file->message_type(12);
  static const int WTGNotifyPlayerReconnectReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGNotifyPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGNotifyPlayerReconnectReq, proxy_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGNotifyPlayerReconnectReq, logic_bus_id_),
  };
  WTGNotifyPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WTGNotifyPlayerReconnectReq_descriptor_,
      WTGNotifyPlayerReconnectReq::default_instance_,
      WTGNotifyPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGNotifyPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WTGNotifyPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WTGNotifyPlayerReconnectReq));
  GTWNotifyPlayerReconnectRsp_descriptor_ = file->message_type(13);
  static const int GTWNotifyPlayerReconnectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWNotifyPlayerReconnectRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWNotifyPlayerReconnectRsp, player_id_),
  };
  GTWNotifyPlayerReconnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTWNotifyPlayerReconnectRsp_descriptor_,
      GTWNotifyPlayerReconnectRsp::default_instance_,
      GTWNotifyPlayerReconnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWNotifyPlayerReconnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTWNotifyPlayerReconnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTWNotifyPlayerReconnectRsp));
  LTSNotifyPlayerReconnectReq_descriptor_ = file->message_type(14);
  static const int LTSNotifyPlayerReconnectReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, logic_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, simple_data_),
  };
  LTSNotifyPlayerReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTSNotifyPlayerReconnectReq_descriptor_,
      LTSNotifyPlayerReconnectReq::default_instance_,
      LTSNotifyPlayerReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSNotifyPlayerReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTSNotifyPlayerReconnectReq));
  Proto_WorldToLogicLogoutReq_descriptor_ = file->message_type(15);
  static const int Proto_WorldToLogicLogoutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLogoutReq, player_id_),
  };
  Proto_WorldToLogicLogoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_WorldToLogicLogoutReq_descriptor_,
      Proto_WorldToLogicLogoutReq::default_instance_,
      Proto_WorldToLogicLogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLogoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_WorldToLogicLogoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_WorldToLogicLogoutReq));
  Proto_LogicToWorldLogoutRsp_descriptor_ = file->message_type(16);
  static const int Proto_LogicToWorldLogoutRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLogoutRsp, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLogoutRsp, result_),
  };
  Proto_LogicToWorldLogoutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LogicToWorldLogoutRsp_descriptor_,
      Proto_LogicToWorldLogoutRsp::default_instance_,
      Proto_LogicToWorldLogoutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLogoutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLogoutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LogicToWorldLogoutRsp));
  Proto_LogicToSnsLoginReq_descriptor_ = file->message_type(17);
  static const int Proto_LogicToSnsLoginReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, logic_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, game_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, simple_data_),
  };
  Proto_LogicToSnsLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LogicToSnsLoginReq_descriptor_,
      Proto_LogicToSnsLoginReq::default_instance_,
      Proto_LogicToSnsLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LogicToSnsLoginReq));
  Proto_SnsToLogicLoginRsp_descriptor_ = file->message_type(18);
  static const int Proto_SnsToLogicLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLoginRsp, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLoginRsp, result_),
  };
  Proto_SnsToLogicLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SnsToLogicLoginRsp_descriptor_,
      Proto_SnsToLogicLoginRsp::default_instance_,
      Proto_SnsToLogicLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SnsToLogicLoginRsp));
  Proto_LogicToSnsLogoutReq_descriptor_ = file->message_type(19);
  static const int Proto_LogicToSnsLogoutReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLogoutReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLogoutReq, logic_svr_id_),
  };
  Proto_LogicToSnsLogoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LogicToSnsLogoutReq_descriptor_,
      Proto_LogicToSnsLogoutReq::default_instance_,
      Proto_LogicToSnsLogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLogoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToSnsLogoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LogicToSnsLogoutReq));
  Proto_SnsToLogicLogoutRsp_descriptor_ = file->message_type(20);
  static const int Proto_SnsToLogicLogoutRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLogoutRsp, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLogoutRsp, result_),
  };
  Proto_SnsToLogicLogoutRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SnsToLogicLogoutRsp_descriptor_,
      Proto_SnsToLogicLogoutRsp::default_instance_,
      Proto_SnsToLogicLogoutRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLogoutRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsToLogicLogoutRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SnsToLogicLogoutRsp));
  Proto_LogicToWorldLogoutReq_descriptor_ = file->message_type(21);
  static const int Proto_LogicToWorldLogoutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLogoutReq, player_id_),
  };
  Proto_LogicToWorldLogoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LogicToWorldLogoutReq_descriptor_,
      Proto_LogicToWorldLogoutReq::default_instance_,
      Proto_LogicToWorldLogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLogoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LogicToWorldLogoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LogicToWorldLogoutReq));
  LTWebPhoneAuthCodeReq_descriptor_ = file->message_type(22);
  static const int LTWebPhoneAuthCodeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneAuthCodeReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneAuthCodeReq, code_type_),
  };
  LTWebPhoneAuthCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTWebPhoneAuthCodeReq_descriptor_,
      LTWebPhoneAuthCodeReq::default_instance_,
      LTWebPhoneAuthCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneAuthCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneAuthCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTWebPhoneAuthCodeReq));
  WebTLPhoneAuthCodeRsp_descriptor_ = file->message_type(23);
  static const int WebTLPhoneAuthCodeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneAuthCodeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneAuthCodeRsp, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneAuthCodeRsp, msg_),
  };
  WebTLPhoneAuthCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebTLPhoneAuthCodeRsp_descriptor_,
      WebTLPhoneAuthCodeRsp::default_instance_,
      WebTLPhoneAuthCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneAuthCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneAuthCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebTLPhoneAuthCodeRsp));
  LTWebPhoneCheckCodeReq_descriptor_ = file->message_type(24);
  static const int LTWebPhoneCheckCodeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneCheckCodeReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneCheckCodeReq, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneCheckCodeReq, code_type_),
  };
  LTWebPhoneCheckCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTWebPhoneCheckCodeReq_descriptor_,
      LTWebPhoneCheckCodeReq::default_instance_,
      LTWebPhoneCheckCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneCheckCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTWebPhoneCheckCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTWebPhoneCheckCodeReq));
  WebTLPhoneCheckCodeRsp_descriptor_ = file->message_type(25);
  static const int WebTLPhoneCheckCodeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneCheckCodeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneCheckCodeRsp, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneCheckCodeRsp, msg_),
  };
  WebTLPhoneCheckCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebTLPhoneCheckCodeRsp_descriptor_,
      WebTLPhoneCheckCodeRsp::default_instance_,
      WebTLPhoneCheckCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneCheckCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebTLPhoneCheckCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebTLPhoneCheckCodeRsp));
  WebPhoneCodeRetMsg_descriptor_ = file->message_type(26);
  static const int WebPhoneCodeRetMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPhoneCodeRetMsg, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPhoneCodeRetMsg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPhoneCodeRetMsg, time_),
  };
  WebPhoneCodeRetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebPhoneCodeRetMsg_descriptor_,
      WebPhoneCodeRetMsg::default_instance_,
      WebPhoneCodeRetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPhoneCodeRetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebPhoneCodeRetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebPhoneCodeRetMsg));
  LTSnsChangeFaceNotify_descriptor_ = file->message_type(27);
  static const int LTSnsChangeFaceNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeFaceNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeFaceNotify, face_id_),
  };
  LTSnsChangeFaceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTSnsChangeFaceNotify_descriptor_,
      LTSnsChangeFaceNotify::default_instance_,
      LTSnsChangeFaceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeFaceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeFaceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTSnsChangeFaceNotify));
  LTSnsChangeNickNameNotify_descriptor_ = file->message_type(28);
  static const int LTSnsChangeNickNameNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeNickNameNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeNickNameNotify, nick_name_),
  };
  LTSnsChangeNickNameNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTSnsChangeNickNameNotify_descriptor_,
      LTSnsChangeNickNameNotify::default_instance_,
      LTSnsChangeNickNameNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeNickNameNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeNickNameNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTSnsChangeNickNameNotify));
  LTSnsChangeVipLevelNotify_descriptor_ = file->message_type(29);
  static const int LTSnsChangeVipLevelNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeVipLevelNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeVipLevelNotify, vip_level_),
  };
  LTSnsChangeVipLevelNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTSnsChangeVipLevelNotify_descriptor_,
      LTSnsChangeVipLevelNotify::default_instance_,
      LTSnsChangeVipLevelNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeVipLevelNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeVipLevelNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTSnsChangeVipLevelNotify));
  LTSnsChangeUserIdNotify_descriptor_ = file->message_type(30);
  static const int LTSnsChangeUserIdNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeUserIdNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeUserIdNotify, show_userid_),
  };
  LTSnsChangeUserIdNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTSnsChangeUserIdNotify_descriptor_,
      LTSnsChangeUserIdNotify::default_instance_,
      LTSnsChangeUserIdNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeUserIdNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTSnsChangeUserIdNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTSnsChangeUserIdNotify));
  LTLPlayerDeviceChangeNotify_descriptor_ = file->message_type(31);
  static const int LTLPlayerDeviceChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTLPlayerDeviceChangeNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTLPlayerDeviceChangeNotify, device_id_),
  };
  LTLPlayerDeviceChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LTLPlayerDeviceChangeNotify_descriptor_,
      LTLPlayerDeviceChangeNotify::default_instance_,
      LTLPlayerDeviceChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTLPlayerDeviceChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LTLPlayerDeviceChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LTLPlayerDeviceChangeNotify));
  Proto_LoginSvrMsgID_descriptor_ = file->enum_type(0);
  Proto_AccountState_descriptor_ = file->enum_type(1);
  PhoneCodeType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTWRegisterUserReq_descriptor_, &Proto_LTWRegisterUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WTLRegisterUserReq_descriptor_, &Proto_WTLRegisterUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTLRegisterUserRsp_descriptor_, &Proto_LTLRegisterUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_PTWUserLoginReq_descriptor_, &Proto_PTWUserLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WTPPlayerLoginRsp_descriptor_, &Proto_WTPPlayerLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WorldToLogicLoginReq_descriptor_, &Proto_WorldToLogicLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LogicToWorldLoginRsp_descriptor_, &Proto_LogicToWorldLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPlayerDisconnect_descriptor_, &NotifyPlayerDisconnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPlayerReconnectReq_descriptor_, &NotifyPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPlayerReconnctRsp_descriptor_, &NotifyPlayerReconnctRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WTLNotifyPlayerReconnectReq_descriptor_, &WTLNotifyPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTWNotifyPlayerReconnectRsp_descriptor_, &LTWNotifyPlayerReconnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WTGNotifyPlayerReconnectReq_descriptor_, &WTGNotifyPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTWNotifyPlayerReconnectRsp_descriptor_, &GTWNotifyPlayerReconnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTSNotifyPlayerReconnectReq_descriptor_, &LTSNotifyPlayerReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_WorldToLogicLogoutReq_descriptor_, &Proto_WorldToLogicLogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LogicToWorldLogoutRsp_descriptor_, &Proto_LogicToWorldLogoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LogicToSnsLoginReq_descriptor_, &Proto_LogicToSnsLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SnsToLogicLoginRsp_descriptor_, &Proto_SnsToLogicLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LogicToSnsLogoutReq_descriptor_, &Proto_LogicToSnsLogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SnsToLogicLogoutRsp_descriptor_, &Proto_SnsToLogicLogoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LogicToWorldLogoutReq_descriptor_, &Proto_LogicToWorldLogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTWebPhoneAuthCodeReq_descriptor_, &LTWebPhoneAuthCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebTLPhoneAuthCodeRsp_descriptor_, &WebTLPhoneAuthCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTWebPhoneCheckCodeReq_descriptor_, &LTWebPhoneCheckCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebTLPhoneCheckCodeRsp_descriptor_, &WebTLPhoneCheckCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebPhoneCodeRetMsg_descriptor_, &WebPhoneCodeRetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTSnsChangeFaceNotify_descriptor_, &LTSnsChangeFaceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTSnsChangeNickNameNotify_descriptor_, &LTSnsChangeNickNameNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTSnsChangeVipLevelNotify_descriptor_, &LTSnsChangeVipLevelNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTSnsChangeUserIdNotify_descriptor_, &LTSnsChangeUserIdNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LTLPlayerDeviceChangeNotify_descriptor_, &LTLPlayerDeviceChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5flogin_2eproto() {
  delete Proto_LTWRegisterUserReq::default_instance_;
  delete Proto_LTWRegisterUserReq_reflection_;
  delete Proto_WTLRegisterUserReq::default_instance_;
  delete Proto_WTLRegisterUserReq_reflection_;
  delete Proto_LTLRegisterUserRsp::default_instance_;
  delete Proto_LTLRegisterUserRsp_reflection_;
  delete Proto_PTWUserLoginReq::default_instance_;
  delete Proto_PTWUserLoginReq_reflection_;
  delete Proto_WTPPlayerLoginRsp::default_instance_;
  delete Proto_WTPPlayerLoginRsp_reflection_;
  delete Proto_WorldToLogicLoginReq::default_instance_;
  delete Proto_WorldToLogicLoginReq_reflection_;
  delete Proto_LogicToWorldLoginRsp::default_instance_;
  delete Proto_LogicToWorldLoginRsp_reflection_;
  delete NotifyPlayerDisconnect::default_instance_;
  delete NotifyPlayerDisconnect_reflection_;
  delete NotifyPlayerReconnectReq::default_instance_;
  delete NotifyPlayerReconnectReq_reflection_;
  delete NotifyPlayerReconnctRsp::default_instance_;
  delete NotifyPlayerReconnctRsp_reflection_;
  delete WTLNotifyPlayerReconnectReq::default_instance_;
  delete WTLNotifyPlayerReconnectReq_reflection_;
  delete LTWNotifyPlayerReconnectRsp::default_instance_;
  delete LTWNotifyPlayerReconnectRsp_reflection_;
  delete WTGNotifyPlayerReconnectReq::default_instance_;
  delete WTGNotifyPlayerReconnectReq_reflection_;
  delete GTWNotifyPlayerReconnectRsp::default_instance_;
  delete GTWNotifyPlayerReconnectRsp_reflection_;
  delete LTSNotifyPlayerReconnectReq::default_instance_;
  delete LTSNotifyPlayerReconnectReq_reflection_;
  delete Proto_WorldToLogicLogoutReq::default_instance_;
  delete Proto_WorldToLogicLogoutReq_reflection_;
  delete Proto_LogicToWorldLogoutRsp::default_instance_;
  delete Proto_LogicToWorldLogoutRsp_reflection_;
  delete Proto_LogicToSnsLoginReq::default_instance_;
  delete Proto_LogicToSnsLoginReq_reflection_;
  delete Proto_SnsToLogicLoginRsp::default_instance_;
  delete Proto_SnsToLogicLoginRsp_reflection_;
  delete Proto_LogicToSnsLogoutReq::default_instance_;
  delete Proto_LogicToSnsLogoutReq_reflection_;
  delete Proto_SnsToLogicLogoutRsp::default_instance_;
  delete Proto_SnsToLogicLogoutRsp_reflection_;
  delete Proto_LogicToWorldLogoutReq::default_instance_;
  delete Proto_LogicToWorldLogoutReq_reflection_;
  delete LTWebPhoneAuthCodeReq::default_instance_;
  delete LTWebPhoneAuthCodeReq_reflection_;
  delete WebTLPhoneAuthCodeRsp::default_instance_;
  delete WebTLPhoneAuthCodeRsp_reflection_;
  delete LTWebPhoneCheckCodeReq::default_instance_;
  delete LTWebPhoneCheckCodeReq_reflection_;
  delete WebTLPhoneCheckCodeRsp::default_instance_;
  delete WebTLPhoneCheckCodeRsp_reflection_;
  delete WebPhoneCodeRetMsg::default_instance_;
  delete WebPhoneCodeRetMsg_reflection_;
  delete LTSnsChangeFaceNotify::default_instance_;
  delete LTSnsChangeFaceNotify_reflection_;
  delete LTSnsChangeNickNameNotify::default_instance_;
  delete LTSnsChangeNickNameNotify_reflection_;
  delete LTSnsChangeVipLevelNotify::default_instance_;
  delete LTSnsChangeVipLevelNotify_reflection_;
  delete LTSnsChangeUserIdNotify::default_instance_;
  delete LTSnsChangeUserIdNotify_reflection_;
  delete LTLPlayerDeviceChangeNotify::default_instance_;
  delete LTLPlayerDeviceChangeNotify_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fkernel_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5ferror_5fcode_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcs_2eproto();
  ::proto_login::protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025proto_svr_login.proto\022\010proto_ff\032\025yd_fi"
    "eldoptions.proto\032\022proto_common.proto\032\022pr"
    "oto_kernel.proto\032\026proto_error_code.proto"
    "\032\016proto_cs.proto\032\024proto_cs_login.proto\"~"
    "\n\030Proto_LTWRegisterUserReq\022\017\n\007user_id\030\001 "
    "\001(\004\022\021\n\tnick_name\030\002 \001(\t\022\021\n\tphone_num\030\003 \001("
    "\004\022+\n\010ext_data\030\004 \001(\0132\031.proto_ff.LoginComm"
    "onData\"\252\001\n\030Proto_WTLRegisterUserReq\022\017\n\007u"
    "ser_id\030\001 \001(\004\022\021\n\tnick_name\030\002 \001(\t\022\021\n\tphone"
    "_num\030\003 \001(\004\022+\n\010ext_data\030\004 \001(\0132\031.proto_ff."
    "LoginCommonData\022\024\n\014login_bus_id\030\005 \001(\r\022\024\n"
    "\014req_trans_id\030\006 \001(\r\";\n\030Proto_LTLRegister"
    "UserRsp\022\016\n\006result\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\004"
    "\"\236\001\n\025Proto_PTWUserLoginReq\022\017\n\007user_id\030\001 "
    "\001(\004\022\017\n\007account\030\002 \001(\t\022\024\n\014proxy_bus_id\030\003 \001"
    "(\r\022\021\n\tclient_ip\030\004 \001(\t\022:\n\010ext_data\030\005 \001(\0132"
    "(.proto_login.Proto_UserLoginExternalDat"
    "a\"\305\001\n\027Proto_WTPPlayerLoginRsp\022\016\n\006result\030"
    "\001 \001(\005\022\017\n\007user_id\030\002 \001(\004\022\017\n\007game_id\030\003 \001(\r\022"
    "\017\n\007room_id\030\004 \001(\r\022\023\n\013game_bus_id\030\005 \001(\r\022\024\n"
    "\014logic_bus_id\030\006 \001(\r\022<\n\013detail_data\030\007 \001(\013"
    "2\'.proto_login.Proto_UserDetailCommonDat"
    "a\"\311\001\n\032Proto_WorldToLogicLoginReq\022\017\n\007user"
    "_id\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room_id\030\003 "
    "\001(\r\022\023\n\013game_bus_id\030\004 \001(\r\022\024\n\014proxy_bus_id"
    "\030\005 \001(\r\022:\n\010ext_data\030\006 \001(\0132(.proto_login.P"
    "roto_UserLoginExternalData\022\021\n\tclient_ip\030"
    "\007 \001(\t\"{\n\032Proto_LogicToWorldLoginRsp\022\016\n\006r"
    "esult\030\001 \001(\r\022\017\n\007user_id\030\002 \001(\004\022<\n\013detail_d"
    "ata\030\003 \001(\0132\'.proto_login.Proto_UserDetail"
    "CommonData\"+\n\026NotifyPlayerDisconnect\022\021\n\t"
    "player_id\030\001 \001(\004\"C\n\030NotifyPlayerReconnect"
    "Req\022\021\n\tplayer_id\030\001 \001(\004\022\024\n\014proxy_bus_id\030\002"
    " \001(\r\"\211\001\n\027NotifyPlayerReconnctRsp\022\016\n\006resu"
    "lt\030\001 \001(\005\022\021\n\tplayer_id\030\002 \001(\004\022\017\n\007game_id\030\003"
    " \001(\r\022\017\n\007room_id\030\004 \001(\r\022\023\n\013game_bus_id\030\005 \001"
    "(\r\022\024\n\014logic_bus_id\030\006 \001(\r\"}\n\033WTLNotifyPla"
    "yerReconnectReq\022\021\n\tplayer_id\030\001 \001(\004\022\017\n\007ga"
    "me_id\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\r\022\023\n\013game_bus"
    "_id\030\004 \001(\r\022\024\n\014proxy_bus_id\030\006 \001(\r\"@\n\033LTWNo"
    "tifyPlayerReconnectRsp\022\016\n\006result\030\001 \001(\005\022\021"
    "\n\tplayer_id\030\002 \001(\004\"\\\n\033WTGNotifyPlayerReco"
    "nnectReq\022\021\n\tplayer_id\030\001 \001(\004\022\024\n\014proxy_bus"
    "_id\030\002 \001(\r\022\024\n\014logic_bus_id\030\003 \001(\r\"@\n\033GTWNo"
    "tifyPlayerReconnectRsp\022\016\n\006result\030\001 \001(\005\022\021"
    "\n\tplayer_id\030\002 \001(\004\"\275\001\n\033LTSNotifyPlayerRec"
    "onnectReq\022\021\n\tplayer_id\030\001 \001(\004\022\024\n\014logic_bu"
    "s_id\030\002 \001(\r\022\023\n\013game_bus_id\030\003 \001(\r\022\027\n\017last_"
    "login_time\030\004 \001(\004\022\030\n\020last_logout_time\030\005 \001"
    "(\004\022-\n\013simple_data\030\006 \001(\0132\030.proto_ff.UserS"
    "impleData\"0\n\033Proto_WorldToLogicLogoutReq"
    "\022\021\n\tplayer_id\030\001 \001(\004\"@\n\033Proto_LogicToWorl"
    "dLogoutRsp\022\021\n\tplayer_id\030\001 \001(\004\022\016\n\006result\030"
    "\002 \001(\r\"\272\001\n\030Proto_LogicToSnsLoginReq\022\021\n\tpl"
    "ayer_id\030\001 \001(\004\022\024\n\014logic_bus_id\030\002 \001(\r\022\023\n\013g"
    "ame_bus_id\030\003 \001(\r\022\027\n\017last_login_time\030\004 \001("
    "\004\022\030\n\020last_logout_time\030\005 \001(\004\022-\n\013simple_da"
    "ta\030\006 \001(\0132\030.proto_ff.UserSimpleData\"=\n\030Pr"
    "oto_SnsToLogicLoginRsp\022\021\n\tplayer_id\030\001 \001("
    "\004\022\016\n\006result\030\002 \001(\r\"D\n\031Proto_LogicToSnsLog"
    "outReq\022\021\n\tplayer_id\030\001 \001(\004\022\024\n\014logic_svr_i"
    "d\030\002 \001(\r\">\n\031Proto_SnsToLogicLogoutRsp\022\021\n\t"
    "player_id\030\001 \001(\004\022\016\n\006result\030\002 \001(\r\"0\n\033Proto"
    "_LogicToWorldLogoutReq\022\021\n\tplayer_id\030\001 \001("
    "\004\"=\n\025LTWebPhoneAuthCodeReq\022\021\n\tphone_num\030"
    "\001 \001(\004\022\021\n\tcode_type\030\002 \001(\r\"G\n\025WebTLPhoneAu"
    "thCodeRsp\022\016\n\006result\030\001 \001(\005\022\021\n\tphone_num\030\002"
    " \001(\004\022\013\n\003msg\030\003 \001(\t\"L\n\026LTWebPhoneCheckCode"
    "Req\022\021\n\tphone_num\030\001 \001(\004\022\014\n\004code\030\002 \001(\r\022\021\n\t"
    "code_type\030\003 \001(\r\"H\n\026WebTLPhoneCheckCodeRs"
    "p\022\016\n\006result\030\001 \001(\005\022\021\n\tphone_num\030\002 \001(\004\022\013\n\003"
    "msg\030\003 \001(\t\"=\n\022WebPhoneCodeRetMsg\022\014\n\004code\030"
    "\001 \001(\005\022\013\n\003msg\030\002 \001(\t\022\014\n\004time\030\003 \001(\003\"9\n\025LTSn"
    "sChangeFaceNotify\022\017\n\007user_id\030\001 \001(\004\022\017\n\007fa"
    "ce_id\030\002 \001(\r\"\?\n\031LTSnsChangeNickNameNotify"
    "\022\017\n\007user_id\030\001 \001(\004\022\021\n\tnick_name\030\002 \001(\t\"\?\n\031"
    "LTSnsChangeVipLevelNotify\022\017\n\007user_id\030\001 \001"
    "(\004\022\021\n\tvip_level\030\003 \001(\r\"\?\n\027LTSnsChangeUser"
    "IdNotify\022\017\n\007user_id\030\001 \001(\004\022\023\n\013show_userid"
    "\030\002 \001(\004\"A\n\033LTLPlayerDeviceChangeNotify\022\017\n"
    "\007user_id\030\001 \001(\004\022\021\n\tdevice_id\030\002 \001(\t*\301\n\n\023Pr"
    "oto_LoginSvrMsgID\022\034\n\027NF_WTL_PLAYER_LOGIN"
    "_REQ\020\202\001\022\034\n\027NF_LTW_PLAYER_LOGIN_RSP\020\203\001\022\034\n"
    "\027NF_PTW_PLAYER_LOGIN_MSG\020\204\001\022 \n\033NF_WTP_PL"
    "AYER_LOGIN_MSG_RSP\020\205\001\022\034\n\027NF_LTS_PLAYER_L"
    "OGIN_REQ\020\206\001\022\034\n\027NF_STL_PLAYER_LOGIN_RSP\020\207"
    "\001\022\035\n\030NF_LTS_PLAYER_LOGOUT_REQ\020\210\001\022\035\n\030NF_S"
    "TL_PLAYER_LOGOUT_RSP\020\211\001\022\035\n\030NF_LTW_PLAYER"
    "_LOGOUT_REQ\020\212\001\022 \n\033NF_WTL_PLAYER_LOGOUT_N"
    "OTIFY\020\213\001\022&\n!NF_LTW_REGISTER_USER_TO_WORL"
    "D_REQ\020\214\001\022&\n!NF_WTL_REGISTER_USER_TO_LOGI"
    "C_REQ\020\215\001\022&\n!NF_LTL_REGISTER_USER_TO_LOGI"
    "N_RSP\020\216\001\022!\n\034NF_LTWeb_PHONE_AUTH_CODE_REQ"
    "\020\217\001\022!\n\034NF_WebTL_PHONE_AUTH_CODE_RSP\020\220\001\022\""
    "\n\035NF_LTWeb_PHONE_CHECK_CODE_REQ\020\221\001\022\"\n\035NF"
    "_WebTL_PHONE_CHECK_CODE_RSP\020\222\001\022 \n\033NF_LTS"
    "ns_CHANGE_FACE_NOTIFY\020\223\001\022$\n\037NF_LTSns_CHA"
    "NGE_NICKNAME_NOTIFY\020\224\001\022\"\n\035NF_LTSns_CHANG"
    "E_USERID_NOTIFY\020\225\001\022 \n\033NF_PTW_PLAYER_RECO"
    "NNECT_MSG\020\226\001\022$\n\037NF_WTP_PLAYER_RECONNECT_"
    "MSG_RSP\020\227\001\022 \n\033NF_WTL_PLAYER_RECONNECT_MS"
    "G\020\230\001\022$\n\037NF_LTW_PLAYER_RECONNECT_MSG_RSP\020"
    "\231\001\022 \n\033NF_LTS_PLAYER_RECONNECT_MSG\020\232\001\022 \n\033"
    "NF_WTG_PLAYER_RECONNECT_MSG\020\233\001\022$\n\037NF_GTW"
    "_PLAYER_RECONNECT_MSG_RSP\020\234\001\022!\n\034NF_PTW_P"
    "LAYER_DISCONNECT_MSG\020\252\001\022!\n\034NF_WTL_PLAYER"
    "_DISCONNECT_MSG\020\253\001\022!\n\034NF_LTS_PLAYER_DISC"
    "ONNECT_MSG\020\254\001\022!\n\034NF_WTG_PLAYER_DISCONNEC"
    "T_MSG\020\255\001\022(\n#NF_LTWeb_PLAYER_PHONE_AUTH_C"
    "ODE_REQ\020\260\001\022(\n#NF_WebTL_PLAYER_PHONE_AUTH"
    "_CODE_RSP\020\261\001\022)\n$NF_LTWeb_PLAYER_PHONE_CH"
    "ECK_CODE_REQ\020\262\001\022)\n$NF_WebTL_PLAYER_PHONE"
    "_CHECK_CODE_RSP\020\263\001\022\'\n\"NF_LTL_PLAYER_DEVI"
    "CE_CHANGE_NOTIFY\020\264\001\022(\n#NF_LTS_PLAYER_VIP"
    "LVEL_CHANGE_NOTIFY\020\265\001*a\n\022Proto_AccountSt"
    "ate\022\025\n\021E_ACCOUNTSTATE_OK\020\000\022\031\n\025E_ACCOUNTS"
    "TATE_FREEZE\020\001\022\031\n\025E_ACCOUNTSTATE_FORBIT\020\002"
    "*\330\001\n\rPhoneCodeType\022\030\n\024PHONE_AUTO_CODE_NO"
    "NE\020\000\022\034\n\030PHONE_AUTO_CODE_REGISTER\020\001\022#\n\037PH"
    "ONE_AUTO_CODE_CHANGE_PASSWORD\020\002\022!\n\035PHONE"
    "_AUTO_CODE_CHANGE_DEVICE\020\003\022\036\n\032PHONE_AUTO"
    "_CODE_BIND_PHONE\020\004\022\'\n#PHONE_AUTO_CODE_CH"
    "ANG_BANK_PASSWORD\020\005", 4899);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_login.proto", &protobuf_RegisterTypes);
  Proto_LTWRegisterUserReq::default_instance_ = new Proto_LTWRegisterUserReq();
  Proto_WTLRegisterUserReq::default_instance_ = new Proto_WTLRegisterUserReq();
  Proto_LTLRegisterUserRsp::default_instance_ = new Proto_LTLRegisterUserRsp();
  Proto_PTWUserLoginReq::default_instance_ = new Proto_PTWUserLoginReq();
  Proto_WTPPlayerLoginRsp::default_instance_ = new Proto_WTPPlayerLoginRsp();
  Proto_WorldToLogicLoginReq::default_instance_ = new Proto_WorldToLogicLoginReq();
  Proto_LogicToWorldLoginRsp::default_instance_ = new Proto_LogicToWorldLoginRsp();
  NotifyPlayerDisconnect::default_instance_ = new NotifyPlayerDisconnect();
  NotifyPlayerReconnectReq::default_instance_ = new NotifyPlayerReconnectReq();
  NotifyPlayerReconnctRsp::default_instance_ = new NotifyPlayerReconnctRsp();
  WTLNotifyPlayerReconnectReq::default_instance_ = new WTLNotifyPlayerReconnectReq();
  LTWNotifyPlayerReconnectRsp::default_instance_ = new LTWNotifyPlayerReconnectRsp();
  WTGNotifyPlayerReconnectReq::default_instance_ = new WTGNotifyPlayerReconnectReq();
  GTWNotifyPlayerReconnectRsp::default_instance_ = new GTWNotifyPlayerReconnectRsp();
  LTSNotifyPlayerReconnectReq::default_instance_ = new LTSNotifyPlayerReconnectReq();
  Proto_WorldToLogicLogoutReq::default_instance_ = new Proto_WorldToLogicLogoutReq();
  Proto_LogicToWorldLogoutRsp::default_instance_ = new Proto_LogicToWorldLogoutRsp();
  Proto_LogicToSnsLoginReq::default_instance_ = new Proto_LogicToSnsLoginReq();
  Proto_SnsToLogicLoginRsp::default_instance_ = new Proto_SnsToLogicLoginRsp();
  Proto_LogicToSnsLogoutReq::default_instance_ = new Proto_LogicToSnsLogoutReq();
  Proto_SnsToLogicLogoutRsp::default_instance_ = new Proto_SnsToLogicLogoutRsp();
  Proto_LogicToWorldLogoutReq::default_instance_ = new Proto_LogicToWorldLogoutReq();
  LTWebPhoneAuthCodeReq::default_instance_ = new LTWebPhoneAuthCodeReq();
  WebTLPhoneAuthCodeRsp::default_instance_ = new WebTLPhoneAuthCodeRsp();
  LTWebPhoneCheckCodeReq::default_instance_ = new LTWebPhoneCheckCodeReq();
  WebTLPhoneCheckCodeRsp::default_instance_ = new WebTLPhoneCheckCodeRsp();
  WebPhoneCodeRetMsg::default_instance_ = new WebPhoneCodeRetMsg();
  LTSnsChangeFaceNotify::default_instance_ = new LTSnsChangeFaceNotify();
  LTSnsChangeNickNameNotify::default_instance_ = new LTSnsChangeNickNameNotify();
  LTSnsChangeVipLevelNotify::default_instance_ = new LTSnsChangeVipLevelNotify();
  LTSnsChangeUserIdNotify::default_instance_ = new LTSnsChangeUserIdNotify();
  LTLPlayerDeviceChangeNotify::default_instance_ = new LTLPlayerDeviceChangeNotify();
  Proto_LTWRegisterUserReq::default_instance_->InitAsDefaultInstance();
  Proto_WTLRegisterUserReq::default_instance_->InitAsDefaultInstance();
  Proto_LTLRegisterUserRsp::default_instance_->InitAsDefaultInstance();
  Proto_PTWUserLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_WTPPlayerLoginRsp::default_instance_->InitAsDefaultInstance();
  Proto_WorldToLogicLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_LogicToWorldLoginRsp::default_instance_->InitAsDefaultInstance();
  NotifyPlayerDisconnect::default_instance_->InitAsDefaultInstance();
  NotifyPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  NotifyPlayerReconnctRsp::default_instance_->InitAsDefaultInstance();
  WTLNotifyPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  LTWNotifyPlayerReconnectRsp::default_instance_->InitAsDefaultInstance();
  WTGNotifyPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  GTWNotifyPlayerReconnectRsp::default_instance_->InitAsDefaultInstance();
  LTSNotifyPlayerReconnectReq::default_instance_->InitAsDefaultInstance();
  Proto_WorldToLogicLogoutReq::default_instance_->InitAsDefaultInstance();
  Proto_LogicToWorldLogoutRsp::default_instance_->InitAsDefaultInstance();
  Proto_LogicToSnsLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_SnsToLogicLoginRsp::default_instance_->InitAsDefaultInstance();
  Proto_LogicToSnsLogoutReq::default_instance_->InitAsDefaultInstance();
  Proto_SnsToLogicLogoutRsp::default_instance_->InitAsDefaultInstance();
  Proto_LogicToWorldLogoutReq::default_instance_->InitAsDefaultInstance();
  LTWebPhoneAuthCodeReq::default_instance_->InitAsDefaultInstance();
  WebTLPhoneAuthCodeRsp::default_instance_->InitAsDefaultInstance();
  LTWebPhoneCheckCodeReq::default_instance_->InitAsDefaultInstance();
  WebTLPhoneCheckCodeRsp::default_instance_->InitAsDefaultInstance();
  WebPhoneCodeRetMsg::default_instance_->InitAsDefaultInstance();
  LTSnsChangeFaceNotify::default_instance_->InitAsDefaultInstance();
  LTSnsChangeNickNameNotify::default_instance_->InitAsDefaultInstance();
  LTSnsChangeVipLevelNotify::default_instance_->InitAsDefaultInstance();
  LTSnsChangeUserIdNotify::default_instance_->InitAsDefaultInstance();
  LTLPlayerDeviceChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5flogin_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5flogin_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5flogin_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_LoginSvrMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LoginSvrMsgID_descriptor_;
}
bool Proto_LoginSvrMsgID_IsValid(int value) {
  switch(value) {
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 170:
    case 171:
    case 172:
    case 173:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_AccountState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_AccountState_descriptor_;
}
bool Proto_AccountState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PhoneCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhoneCodeType_descriptor_;
}
bool PhoneCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTWRegisterUserReq::kUserIdFieldNumber;
const int Proto_LTWRegisterUserReq::kNickNameFieldNumber;
const int Proto_LTWRegisterUserReq::kPhoneNumFieldNumber;
const int Proto_LTWRegisterUserReq::kExtDataFieldNumber;
#endif  // !_MSC_VER

Proto_LTWRegisterUserReq::Proto_LTWRegisterUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTWRegisterUserReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_ff::LoginCommonData*>(&::proto_ff::LoginCommonData::default_instance());
}

Proto_LTWRegisterUserReq::Proto_LTWRegisterUserReq(const Proto_LTWRegisterUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTWRegisterUserReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_num_ = GOOGLE_ULONGLONG(0);
  ext_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTWRegisterUserReq::~Proto_LTWRegisterUserReq() {
  SharedDtor();
}

void Proto_LTWRegisterUserReq::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_LTWRegisterUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTWRegisterUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTWRegisterUserReq_descriptor_;
}

const Proto_LTWRegisterUserReq& Proto_LTWRegisterUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_LTWRegisterUserReq* Proto_LTWRegisterUserReq::default_instance_ = NULL;

Proto_LTWRegisterUserReq* Proto_LTWRegisterUserReq::New() const {
  return new Proto_LTWRegisterUserReq;
}

void Proto_LTWRegisterUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    phone_num_ = GOOGLE_ULONGLONG(0);
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_ff::LoginCommonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTWRegisterUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ext_data;
        break;
      }

      // optional .proto_ff.LoginCommonData ext_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTWRegisterUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional uint64 phone_num = 3;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->phone_num(), output);
  }

  // optional .proto_ff.LoginCommonData ext_data = 4;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ext_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTWRegisterUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint64 phone_num = 3;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->phone_num(), target);
  }

  // optional .proto_ff.LoginCommonData ext_data = 4;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ext_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTWRegisterUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint64 phone_num = 3;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional .proto_ff.LoginCommonData ext_data = 4;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTWRegisterUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTWRegisterUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTWRegisterUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTWRegisterUserReq::MergeFrom(const Proto_LTWRegisterUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_ff::LoginCommonData::MergeFrom(from.ext_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTWRegisterUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTWRegisterUserReq::CopyFrom(const Proto_LTWRegisterUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTWRegisterUserReq::IsInitialized() const {

  return true;
}

void Proto_LTWRegisterUserReq::Swap(Proto_LTWRegisterUserReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTWRegisterUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTWRegisterUserReq_descriptor_;
  metadata.reflection = Proto_LTWRegisterUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WTLRegisterUserReq::kUserIdFieldNumber;
const int Proto_WTLRegisterUserReq::kNickNameFieldNumber;
const int Proto_WTLRegisterUserReq::kPhoneNumFieldNumber;
const int Proto_WTLRegisterUserReq::kExtDataFieldNumber;
const int Proto_WTLRegisterUserReq::kLoginBusIdFieldNumber;
const int Proto_WTLRegisterUserReq::kReqTransIdFieldNumber;
#endif  // !_MSC_VER

Proto_WTLRegisterUserReq::Proto_WTLRegisterUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WTLRegisterUserReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_ff::LoginCommonData*>(&::proto_ff::LoginCommonData::default_instance());
}

Proto_WTLRegisterUserReq::Proto_WTLRegisterUserReq(const Proto_WTLRegisterUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WTLRegisterUserReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_num_ = GOOGLE_ULONGLONG(0);
  ext_data_ = NULL;
  login_bus_id_ = 0u;
  req_trans_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WTLRegisterUserReq::~Proto_WTLRegisterUserReq() {
  SharedDtor();
}

void Proto_WTLRegisterUserReq::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_WTLRegisterUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WTLRegisterUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WTLRegisterUserReq_descriptor_;
}

const Proto_WTLRegisterUserReq& Proto_WTLRegisterUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_WTLRegisterUserReq* Proto_WTLRegisterUserReq::default_instance_ = NULL;

Proto_WTLRegisterUserReq* Proto_WTLRegisterUserReq::New() const {
  return new Proto_WTLRegisterUserReq;
}

void Proto_WTLRegisterUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    phone_num_ = GOOGLE_ULONGLONG(0);
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_ff::LoginCommonData::Clear();
    }
    login_bus_id_ = 0u;
    req_trans_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WTLRegisterUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ext_data;
        break;
      }

      // optional .proto_ff.LoginCommonData ext_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_login_bus_id;
        break;
      }

      // optional uint32 login_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_bus_id_)));
          set_has_login_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_req_trans_id;
        break;
      }

      // optional uint32 req_trans_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_req_trans_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_trans_id_)));
          set_has_req_trans_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WTLRegisterUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional uint64 phone_num = 3;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->phone_num(), output);
  }

  // optional .proto_ff.LoginCommonData ext_data = 4;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ext_data(), output);
  }

  // optional uint32 login_bus_id = 5;
  if (has_login_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->login_bus_id(), output);
  }

  // optional uint32 req_trans_id = 6;
  if (has_req_trans_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->req_trans_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WTLRegisterUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional uint64 phone_num = 3;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->phone_num(), target);
  }

  // optional .proto_ff.LoginCommonData ext_data = 4;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ext_data(), target);
  }

  // optional uint32 login_bus_id = 5;
  if (has_login_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->login_bus_id(), target);
  }

  // optional uint32 req_trans_id = 6;
  if (has_req_trans_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->req_trans_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WTLRegisterUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint64 phone_num = 3;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional .proto_ff.LoginCommonData ext_data = 4;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

    // optional uint32 login_bus_id = 5;
    if (has_login_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_bus_id());
    }

    // optional uint32 req_trans_id = 6;
    if (has_req_trans_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_trans_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WTLRegisterUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WTLRegisterUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WTLRegisterUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WTLRegisterUserReq::MergeFrom(const Proto_WTLRegisterUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_ff::LoginCommonData::MergeFrom(from.ext_data());
    }
    if (from.has_login_bus_id()) {
      set_login_bus_id(from.login_bus_id());
    }
    if (from.has_req_trans_id()) {
      set_req_trans_id(from.req_trans_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WTLRegisterUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WTLRegisterUserReq::CopyFrom(const Proto_WTLRegisterUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WTLRegisterUserReq::IsInitialized() const {

  return true;
}

void Proto_WTLRegisterUserReq::Swap(Proto_WTLRegisterUserReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(login_bus_id_, other->login_bus_id_);
    std::swap(req_trans_id_, other->req_trans_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WTLRegisterUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WTLRegisterUserReq_descriptor_;
  metadata.reflection = Proto_WTLRegisterUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTLRegisterUserRsp::kResultFieldNumber;
const int Proto_LTLRegisterUserRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTLRegisterUserRsp::Proto_LTLRegisterUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTLRegisterUserRsp::InitAsDefaultInstance() {
}

Proto_LTLRegisterUserRsp::Proto_LTLRegisterUserRsp(const Proto_LTLRegisterUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTLRegisterUserRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTLRegisterUserRsp::~Proto_LTLRegisterUserRsp() {
  SharedDtor();
}

void Proto_LTLRegisterUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTLRegisterUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTLRegisterUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTLRegisterUserRsp_descriptor_;
}

const Proto_LTLRegisterUserRsp& Proto_LTLRegisterUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_LTLRegisterUserRsp* Proto_LTLRegisterUserRsp::default_instance_ = NULL;

Proto_LTLRegisterUserRsp* Proto_LTLRegisterUserRsp::New() const {
  return new Proto_LTLRegisterUserRsp;
}

void Proto_LTLRegisterUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTLRegisterUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTLRegisterUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTLRegisterUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTLRegisterUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTLRegisterUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTLRegisterUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTLRegisterUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTLRegisterUserRsp::MergeFrom(const Proto_LTLRegisterUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTLRegisterUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTLRegisterUserRsp::CopyFrom(const Proto_LTLRegisterUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTLRegisterUserRsp::IsInitialized() const {

  return true;
}

void Proto_LTLRegisterUserRsp::Swap(Proto_LTLRegisterUserRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTLRegisterUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTLRegisterUserRsp_descriptor_;
  metadata.reflection = Proto_LTLRegisterUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_PTWUserLoginReq::kUserIdFieldNumber;
const int Proto_PTWUserLoginReq::kAccountFieldNumber;
const int Proto_PTWUserLoginReq::kProxyBusIdFieldNumber;
const int Proto_PTWUserLoginReq::kClientIpFieldNumber;
const int Proto_PTWUserLoginReq::kExtDataFieldNumber;
#endif  // !_MSC_VER

Proto_PTWUserLoginReq::Proto_PTWUserLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_PTWUserLoginReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_login::Proto_UserLoginExternalData*>(&::proto_login::Proto_UserLoginExternalData::default_instance());
}

Proto_PTWUserLoginReq::Proto_PTWUserLoginReq(const Proto_PTWUserLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_PTWUserLoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proxy_bus_id_ = 0u;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_PTWUserLoginReq::~Proto_PTWUserLoginReq() {
  SharedDtor();
}

void Proto_PTWUserLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_PTWUserLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_PTWUserLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_PTWUserLoginReq_descriptor_;
}

const Proto_PTWUserLoginReq& Proto_PTWUserLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_PTWUserLoginReq* Proto_PTWUserLoginReq::default_instance_ = NULL;

Proto_PTWUserLoginReq* Proto_PTWUserLoginReq::New() const {
  return new Proto_PTWUserLoginReq;
}

void Proto_PTWUserLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    proxy_bus_id_ = 0u;
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_login::Proto_UserLoginExternalData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_PTWUserLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ext_data;
        break;
      }

      // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_PTWUserLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 proxy_bus_id = 3;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proxy_bus_id(), output);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_ip(), output);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ext_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_PTWUserLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 proxy_bus_id = 3;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->proxy_bus_id(), target);
  }

  // optional string client_ip = 4;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ip(), target);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ext_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_PTWUserLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 proxy_bus_id = 3;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

    // optional string client_ip = 4;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_PTWUserLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_PTWUserLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_PTWUserLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_PTWUserLoginReq::MergeFrom(const Proto_PTWUserLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_login::Proto_UserLoginExternalData::MergeFrom(from.ext_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_PTWUserLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_PTWUserLoginReq::CopyFrom(const Proto_PTWUserLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_PTWUserLoginReq::IsInitialized() const {

  return true;
}

void Proto_PTWUserLoginReq::Swap(Proto_PTWUserLoginReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(account_, other->account_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_PTWUserLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_PTWUserLoginReq_descriptor_;
  metadata.reflection = Proto_PTWUserLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WTPPlayerLoginRsp::kResultFieldNumber;
const int Proto_WTPPlayerLoginRsp::kUserIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kGameIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kRoomIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kGameBusIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kLogicBusIdFieldNumber;
const int Proto_WTPPlayerLoginRsp::kDetailDataFieldNumber;
#endif  // !_MSC_VER

Proto_WTPPlayerLoginRsp::Proto_WTPPlayerLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WTPPlayerLoginRsp::InitAsDefaultInstance() {
  detail_data_ = const_cast< ::proto_login::Proto_UserDetailCommonData*>(&::proto_login::Proto_UserDetailCommonData::default_instance());
}

Proto_WTPPlayerLoginRsp::Proto_WTPPlayerLoginRsp(const Proto_WTPPlayerLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WTPPlayerLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  logic_bus_id_ = 0u;
  detail_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WTPPlayerLoginRsp::~Proto_WTPPlayerLoginRsp() {
  SharedDtor();
}

void Proto_WTPPlayerLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_data_;
  }
}

void Proto_WTPPlayerLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WTPPlayerLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WTPPlayerLoginRsp_descriptor_;
}

const Proto_WTPPlayerLoginRsp& Proto_WTPPlayerLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_WTPPlayerLoginRsp* Proto_WTPPlayerLoginRsp::default_instance_ = NULL;

Proto_WTPPlayerLoginRsp* Proto_WTPPlayerLoginRsp::New() const {
  return new Proto_WTPPlayerLoginRsp;
}

void Proto_WTPPlayerLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    logic_bus_id_ = 0u;
    if (has_detail_data()) {
      if (detail_data_ != NULL) detail_data_->::proto_login::Proto_UserDetailCommonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WTPPlayerLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_detail_data;
        break;
      }

      // optional .proto_login.Proto_UserDetailCommonData detail_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WTPPlayerLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_bus_id(), output);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logic_bus_id(), output);
  }

  // optional .proto_login.Proto_UserDetailCommonData detail_data = 7;
  if (has_detail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->detail_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WTPPlayerLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_bus_id(), target);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logic_bus_id(), target);
  }

  // optional .proto_login.Proto_UserDetailCommonData detail_data = 7;
  if (has_detail_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->detail_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WTPPlayerLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 5;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 logic_bus_id = 6;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

    // optional .proto_login.Proto_UserDetailCommonData detail_data = 7;
    if (has_detail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WTPPlayerLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WTPPlayerLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WTPPlayerLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WTPPlayerLoginRsp::MergeFrom(const Proto_WTPPlayerLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
    if (from.has_detail_data()) {
      mutable_detail_data()->::proto_login::Proto_UserDetailCommonData::MergeFrom(from.detail_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WTPPlayerLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WTPPlayerLoginRsp::CopyFrom(const Proto_WTPPlayerLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WTPPlayerLoginRsp::IsInitialized() const {

  return true;
}

void Proto_WTPPlayerLoginRsp::Swap(Proto_WTPPlayerLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(detail_data_, other->detail_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WTPPlayerLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WTPPlayerLoginRsp_descriptor_;
  metadata.reflection = Proto_WTPPlayerLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WorldToLogicLoginReq::kUserIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kGameIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kRoomIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kGameBusIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kProxyBusIdFieldNumber;
const int Proto_WorldToLogicLoginReq::kExtDataFieldNumber;
const int Proto_WorldToLogicLoginReq::kClientIpFieldNumber;
#endif  // !_MSC_VER

Proto_WorldToLogicLoginReq::Proto_WorldToLogicLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WorldToLogicLoginReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_login::Proto_UserLoginExternalData*>(&::proto_login::Proto_UserLoginExternalData::default_instance());
}

Proto_WorldToLogicLoginReq::Proto_WorldToLogicLoginReq(const Proto_WorldToLogicLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WorldToLogicLoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  proxy_bus_id_ = 0u;
  ext_data_ = NULL;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WorldToLogicLoginReq::~Proto_WorldToLogicLoginReq() {
  SharedDtor();
}

void Proto_WorldToLogicLoginReq::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_WorldToLogicLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WorldToLogicLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WorldToLogicLoginReq_descriptor_;
}

const Proto_WorldToLogicLoginReq& Proto_WorldToLogicLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_WorldToLogicLoginReq* Proto_WorldToLogicLoginReq::default_instance_ = NULL;

Proto_WorldToLogicLoginReq* Proto_WorldToLogicLoginReq::New() const {
  return new Proto_WorldToLogicLoginReq;
}

void Proto_WorldToLogicLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    proxy_bus_id_ = 0u;
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_login::Proto_UserLoginExternalData::Clear();
    }
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WorldToLogicLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ext_data;
        break;
      }

      // optional .proto_login.Proto_UserLoginExternalData ext_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WorldToLogicLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  // optional uint32 proxy_bus_id = 5;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->proxy_bus_id(), output);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 6;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ext_data(), output);
  }

  // optional string client_ip = 7;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->client_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WorldToLogicLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  // optional uint32 proxy_bus_id = 5;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->proxy_bus_id(), target);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 6;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ext_data(), target);
  }

  // optional string client_ip = 7;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->client_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WorldToLogicLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 proxy_bus_id = 5;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

    // optional .proto_login.Proto_UserLoginExternalData ext_data = 6;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

    // optional string client_ip = 7;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WorldToLogicLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WorldToLogicLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WorldToLogicLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WorldToLogicLoginReq::MergeFrom(const Proto_WorldToLogicLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_login::Proto_UserLoginExternalData::MergeFrom(from.ext_data());
    }
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WorldToLogicLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WorldToLogicLoginReq::CopyFrom(const Proto_WorldToLogicLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WorldToLogicLoginReq::IsInitialized() const {

  return true;
}

void Proto_WorldToLogicLoginReq::Swap(Proto_WorldToLogicLoginReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(client_ip_, other->client_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WorldToLogicLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WorldToLogicLoginReq_descriptor_;
  metadata.reflection = Proto_WorldToLogicLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LogicToWorldLoginRsp::kResultFieldNumber;
const int Proto_LogicToWorldLoginRsp::kUserIdFieldNumber;
const int Proto_LogicToWorldLoginRsp::kDetailDataFieldNumber;
#endif  // !_MSC_VER

Proto_LogicToWorldLoginRsp::Proto_LogicToWorldLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LogicToWorldLoginRsp::InitAsDefaultInstance() {
  detail_data_ = const_cast< ::proto_login::Proto_UserDetailCommonData*>(&::proto_login::Proto_UserDetailCommonData::default_instance());
}

Proto_LogicToWorldLoginRsp::Proto_LogicToWorldLoginRsp(const Proto_LogicToWorldLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LogicToWorldLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  user_id_ = GOOGLE_ULONGLONG(0);
  detail_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LogicToWorldLoginRsp::~Proto_LogicToWorldLoginRsp() {
  SharedDtor();
}

void Proto_LogicToWorldLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_data_;
  }
}

void Proto_LogicToWorldLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LogicToWorldLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LogicToWorldLoginRsp_descriptor_;
}

const Proto_LogicToWorldLoginRsp& Proto_LogicToWorldLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_LogicToWorldLoginRsp* Proto_LogicToWorldLoginRsp::default_instance_ = NULL;

Proto_LogicToWorldLoginRsp* Proto_LogicToWorldLoginRsp::New() const {
  return new Proto_LogicToWorldLoginRsp;
}

void Proto_LogicToWorldLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_detail_data()) {
      if (detail_data_ != NULL) detail_data_->::proto_login::Proto_UserDetailCommonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LogicToWorldLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail_data;
        break;
      }

      // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LogicToWorldLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
  if (has_detail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LogicToWorldLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
  if (has_detail_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LogicToWorldLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
    if (has_detail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LogicToWorldLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LogicToWorldLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LogicToWorldLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LogicToWorldLoginRsp::MergeFrom(const Proto_LogicToWorldLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_detail_data()) {
      mutable_detail_data()->::proto_login::Proto_UserDetailCommonData::MergeFrom(from.detail_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LogicToWorldLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LogicToWorldLoginRsp::CopyFrom(const Proto_LogicToWorldLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LogicToWorldLoginRsp::IsInitialized() const {

  return true;
}

void Proto_LogicToWorldLoginRsp::Swap(Proto_LogicToWorldLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(detail_data_, other->detail_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LogicToWorldLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LogicToWorldLoginRsp_descriptor_;
  metadata.reflection = Proto_LogicToWorldLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPlayerDisconnect::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

NotifyPlayerDisconnect::NotifyPlayerDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPlayerDisconnect::InitAsDefaultInstance() {
}

NotifyPlayerDisconnect::NotifyPlayerDisconnect(const NotifyPlayerDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPlayerDisconnect::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerDisconnect::~NotifyPlayerDisconnect() {
  SharedDtor();
}

void NotifyPlayerDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerDisconnect_descriptor_;
}

const NotifyPlayerDisconnect& NotifyPlayerDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

NotifyPlayerDisconnect* NotifyPlayerDisconnect::default_instance_ = NULL;

NotifyPlayerDisconnect* NotifyPlayerDisconnect::New() const {
  return new NotifyPlayerDisconnect;
}

void NotifyPlayerDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPlayerDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPlayerDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPlayerDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPlayerDisconnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPlayerDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPlayerDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPlayerDisconnect::MergeFrom(const NotifyPlayerDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPlayerDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerDisconnect::CopyFrom(const NotifyPlayerDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerDisconnect::IsInitialized() const {

  return true;
}

void NotifyPlayerDisconnect::Swap(NotifyPlayerDisconnect* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPlayerDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerDisconnect_descriptor_;
  metadata.reflection = NotifyPlayerDisconnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPlayerReconnectReq::kPlayerIdFieldNumber;
const int NotifyPlayerReconnectReq::kProxyBusIdFieldNumber;
#endif  // !_MSC_VER

NotifyPlayerReconnectReq::NotifyPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPlayerReconnectReq::InitAsDefaultInstance() {
}

NotifyPlayerReconnectReq::NotifyPlayerReconnectReq(const NotifyPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  proxy_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerReconnectReq::~NotifyPlayerReconnectReq() {
  SharedDtor();
}

void NotifyPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerReconnectReq_descriptor_;
}

const NotifyPlayerReconnectReq& NotifyPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

NotifyPlayerReconnectReq* NotifyPlayerReconnectReq::default_instance_ = NULL;

NotifyPlayerReconnectReq* NotifyPlayerReconnectReq::New() const {
  return new NotifyPlayerReconnectReq;
}

void NotifyPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    proxy_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proxy_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proxy_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 proxy_bus_id = 2;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPlayerReconnectReq::MergeFrom(const NotifyPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerReconnectReq::CopyFrom(const NotifyPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerReconnectReq::IsInitialized() const {

  return true;
}

void NotifyPlayerReconnectReq::Swap(NotifyPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerReconnectReq_descriptor_;
  metadata.reflection = NotifyPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPlayerReconnctRsp::kResultFieldNumber;
const int NotifyPlayerReconnctRsp::kPlayerIdFieldNumber;
const int NotifyPlayerReconnctRsp::kGameIdFieldNumber;
const int NotifyPlayerReconnctRsp::kRoomIdFieldNumber;
const int NotifyPlayerReconnctRsp::kGameBusIdFieldNumber;
const int NotifyPlayerReconnctRsp::kLogicBusIdFieldNumber;
#endif  // !_MSC_VER

NotifyPlayerReconnctRsp::NotifyPlayerReconnctRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPlayerReconnctRsp::InitAsDefaultInstance() {
}

NotifyPlayerReconnctRsp::NotifyPlayerReconnctRsp(const NotifyPlayerReconnctRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPlayerReconnctRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  logic_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerReconnctRsp::~NotifyPlayerReconnctRsp() {
  SharedDtor();
}

void NotifyPlayerReconnctRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerReconnctRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerReconnctRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerReconnctRsp_descriptor_;
}

const NotifyPlayerReconnctRsp& NotifyPlayerReconnctRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

NotifyPlayerReconnctRsp* NotifyPlayerReconnctRsp::default_instance_ = NULL;

NotifyPlayerReconnctRsp* NotifyPlayerReconnctRsp::New() const {
  return new NotifyPlayerReconnctRsp;
}

void NotifyPlayerReconnctRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    logic_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPlayerReconnctRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPlayerReconnctRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_id(), output);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_bus_id(), output);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logic_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPlayerReconnctRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional uint32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_id(), target);
  }

  // optional uint32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 5;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_bus_id(), target);
  }

  // optional uint32 logic_bus_id = 6;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logic_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPlayerReconnctRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 3;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 5;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 logic_bus_id = 6;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerReconnctRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPlayerReconnctRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPlayerReconnctRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPlayerReconnctRsp::MergeFrom(const NotifyPlayerReconnctRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPlayerReconnctRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerReconnctRsp::CopyFrom(const NotifyPlayerReconnctRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerReconnctRsp::IsInitialized() const {

  return true;
}

void NotifyPlayerReconnctRsp::Swap(NotifyPlayerReconnctRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPlayerReconnctRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerReconnctRsp_descriptor_;
  metadata.reflection = NotifyPlayerReconnctRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WTLNotifyPlayerReconnectReq::kPlayerIdFieldNumber;
const int WTLNotifyPlayerReconnectReq::kGameIdFieldNumber;
const int WTLNotifyPlayerReconnectReq::kRoomIdFieldNumber;
const int WTLNotifyPlayerReconnectReq::kGameBusIdFieldNumber;
const int WTLNotifyPlayerReconnectReq::kProxyBusIdFieldNumber;
#endif  // !_MSC_VER

WTLNotifyPlayerReconnectReq::WTLNotifyPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WTLNotifyPlayerReconnectReq::InitAsDefaultInstance() {
}

WTLNotifyPlayerReconnectReq::WTLNotifyPlayerReconnectReq(const WTLNotifyPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WTLNotifyPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  proxy_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WTLNotifyPlayerReconnectReq::~WTLNotifyPlayerReconnectReq() {
  SharedDtor();
}

void WTLNotifyPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WTLNotifyPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTLNotifyPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WTLNotifyPlayerReconnectReq_descriptor_;
}

const WTLNotifyPlayerReconnectReq& WTLNotifyPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

WTLNotifyPlayerReconnectReq* WTLNotifyPlayerReconnectReq::default_instance_ = NULL;

WTLNotifyPlayerReconnectReq* WTLNotifyPlayerReconnectReq::New() const {
  return new WTLNotifyPlayerReconnectReq;
}

void WTLNotifyPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
    proxy_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WTLNotifyPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WTLNotifyPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  // optional uint32 proxy_bus_id = 6;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->proxy_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WTLNotifyPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  // optional uint32 proxy_bus_id = 6;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->proxy_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WTLNotifyPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint32 proxy_bus_id = 6;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTLNotifyPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WTLNotifyPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WTLNotifyPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WTLNotifyPlayerReconnectReq::MergeFrom(const WTLNotifyPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WTLNotifyPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTLNotifyPlayerReconnectReq::CopyFrom(const WTLNotifyPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTLNotifyPlayerReconnectReq::IsInitialized() const {

  return true;
}

void WTLNotifyPlayerReconnectReq::Swap(WTLNotifyPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WTLNotifyPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WTLNotifyPlayerReconnectReq_descriptor_;
  metadata.reflection = WTLNotifyPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTWNotifyPlayerReconnectRsp::kResultFieldNumber;
const int LTWNotifyPlayerReconnectRsp::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

LTWNotifyPlayerReconnectRsp::LTWNotifyPlayerReconnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTWNotifyPlayerReconnectRsp::InitAsDefaultInstance() {
}

LTWNotifyPlayerReconnectRsp::LTWNotifyPlayerReconnectRsp(const LTWNotifyPlayerReconnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTWNotifyPlayerReconnectRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTWNotifyPlayerReconnectRsp::~LTWNotifyPlayerReconnectRsp() {
  SharedDtor();
}

void LTWNotifyPlayerReconnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTWNotifyPlayerReconnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTWNotifyPlayerReconnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTWNotifyPlayerReconnectRsp_descriptor_;
}

const LTWNotifyPlayerReconnectRsp& LTWNotifyPlayerReconnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTWNotifyPlayerReconnectRsp* LTWNotifyPlayerReconnectRsp::default_instance_ = NULL;

LTWNotifyPlayerReconnectRsp* LTWNotifyPlayerReconnectRsp::New() const {
  return new LTWNotifyPlayerReconnectRsp;
}

void LTWNotifyPlayerReconnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTWNotifyPlayerReconnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTWNotifyPlayerReconnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTWNotifyPlayerReconnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTWNotifyPlayerReconnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTWNotifyPlayerReconnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTWNotifyPlayerReconnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTWNotifyPlayerReconnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTWNotifyPlayerReconnectRsp::MergeFrom(const LTWNotifyPlayerReconnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTWNotifyPlayerReconnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTWNotifyPlayerReconnectRsp::CopyFrom(const LTWNotifyPlayerReconnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTWNotifyPlayerReconnectRsp::IsInitialized() const {

  return true;
}

void LTWNotifyPlayerReconnectRsp::Swap(LTWNotifyPlayerReconnectRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTWNotifyPlayerReconnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTWNotifyPlayerReconnectRsp_descriptor_;
  metadata.reflection = LTWNotifyPlayerReconnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WTGNotifyPlayerReconnectReq::kPlayerIdFieldNumber;
const int WTGNotifyPlayerReconnectReq::kProxyBusIdFieldNumber;
const int WTGNotifyPlayerReconnectReq::kLogicBusIdFieldNumber;
#endif  // !_MSC_VER

WTGNotifyPlayerReconnectReq::WTGNotifyPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WTGNotifyPlayerReconnectReq::InitAsDefaultInstance() {
}

WTGNotifyPlayerReconnectReq::WTGNotifyPlayerReconnectReq(const WTGNotifyPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WTGNotifyPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  proxy_bus_id_ = 0u;
  logic_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WTGNotifyPlayerReconnectReq::~WTGNotifyPlayerReconnectReq() {
  SharedDtor();
}

void WTGNotifyPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WTGNotifyPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WTGNotifyPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WTGNotifyPlayerReconnectReq_descriptor_;
}

const WTGNotifyPlayerReconnectReq& WTGNotifyPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

WTGNotifyPlayerReconnectReq* WTGNotifyPlayerReconnectReq::default_instance_ = NULL;

WTGNotifyPlayerReconnectReq* WTGNotifyPlayerReconnectReq::New() const {
  return new WTGNotifyPlayerReconnectReq;
}

void WTGNotifyPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    proxy_bus_id_ = 0u;
    logic_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WTGNotifyPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proxy_bus_id;
        break;
      }

      // optional uint32 proxy_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_bus_id_)));
          set_has_proxy_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WTGNotifyPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proxy_bus_id(), output);
  }

  // optional uint32 logic_bus_id = 3;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logic_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WTGNotifyPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 proxy_bus_id = 2;
  if (has_proxy_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proxy_bus_id(), target);
  }

  // optional uint32 logic_bus_id = 3;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->logic_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WTGNotifyPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 proxy_bus_id = 2;
    if (has_proxy_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_bus_id());
    }

    // optional uint32 logic_bus_id = 3;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WTGNotifyPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WTGNotifyPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WTGNotifyPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WTGNotifyPlayerReconnectReq::MergeFrom(const WTGNotifyPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_proxy_bus_id()) {
      set_proxy_bus_id(from.proxy_bus_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WTGNotifyPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTGNotifyPlayerReconnectReq::CopyFrom(const WTGNotifyPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTGNotifyPlayerReconnectReq::IsInitialized() const {

  return true;
}

void WTGNotifyPlayerReconnectReq::Swap(WTGNotifyPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(proxy_bus_id_, other->proxy_bus_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WTGNotifyPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WTGNotifyPlayerReconnectReq_descriptor_;
  metadata.reflection = WTGNotifyPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTWNotifyPlayerReconnectRsp::kResultFieldNumber;
const int GTWNotifyPlayerReconnectRsp::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GTWNotifyPlayerReconnectRsp::GTWNotifyPlayerReconnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTWNotifyPlayerReconnectRsp::InitAsDefaultInstance() {
}

GTWNotifyPlayerReconnectRsp::GTWNotifyPlayerReconnectRsp(const GTWNotifyPlayerReconnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTWNotifyPlayerReconnectRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTWNotifyPlayerReconnectRsp::~GTWNotifyPlayerReconnectRsp() {
  SharedDtor();
}

void GTWNotifyPlayerReconnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTWNotifyPlayerReconnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTWNotifyPlayerReconnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTWNotifyPlayerReconnectRsp_descriptor_;
}

const GTWNotifyPlayerReconnectRsp& GTWNotifyPlayerReconnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

GTWNotifyPlayerReconnectRsp* GTWNotifyPlayerReconnectRsp::default_instance_ = NULL;

GTWNotifyPlayerReconnectRsp* GTWNotifyPlayerReconnectRsp::New() const {
  return new GTWNotifyPlayerReconnectRsp;
}

void GTWNotifyPlayerReconnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTWNotifyPlayerReconnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTWNotifyPlayerReconnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTWNotifyPlayerReconnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTWNotifyPlayerReconnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTWNotifyPlayerReconnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTWNotifyPlayerReconnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTWNotifyPlayerReconnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTWNotifyPlayerReconnectRsp::MergeFrom(const GTWNotifyPlayerReconnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTWNotifyPlayerReconnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTWNotifyPlayerReconnectRsp::CopyFrom(const GTWNotifyPlayerReconnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTWNotifyPlayerReconnectRsp::IsInitialized() const {

  return true;
}

void GTWNotifyPlayerReconnectRsp::Swap(GTWNotifyPlayerReconnectRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTWNotifyPlayerReconnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTWNotifyPlayerReconnectRsp_descriptor_;
  metadata.reflection = GTWNotifyPlayerReconnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTSNotifyPlayerReconnectReq::kPlayerIdFieldNumber;
const int LTSNotifyPlayerReconnectReq::kLogicBusIdFieldNumber;
const int LTSNotifyPlayerReconnectReq::kGameBusIdFieldNumber;
const int LTSNotifyPlayerReconnectReq::kLastLoginTimeFieldNumber;
const int LTSNotifyPlayerReconnectReq::kLastLogoutTimeFieldNumber;
const int LTSNotifyPlayerReconnectReq::kSimpleDataFieldNumber;
#endif  // !_MSC_VER

LTSNotifyPlayerReconnectReq::LTSNotifyPlayerReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTSNotifyPlayerReconnectReq::InitAsDefaultInstance() {
  simple_data_ = const_cast< ::proto_ff::UserSimpleData*>(&::proto_ff::UserSimpleData::default_instance());
}

LTSNotifyPlayerReconnectReq::LTSNotifyPlayerReconnectReq(const LTSNotifyPlayerReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTSNotifyPlayerReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  logic_bus_id_ = 0u;
  game_bus_id_ = 0u;
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  simple_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTSNotifyPlayerReconnectReq::~LTSNotifyPlayerReconnectReq() {
  SharedDtor();
}

void LTSNotifyPlayerReconnectReq::SharedDtor() {
  if (this != default_instance_) {
    delete simple_data_;
  }
}

void LTSNotifyPlayerReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTSNotifyPlayerReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTSNotifyPlayerReconnectReq_descriptor_;
}

const LTSNotifyPlayerReconnectReq& LTSNotifyPlayerReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTSNotifyPlayerReconnectReq* LTSNotifyPlayerReconnectReq::default_instance_ = NULL;

LTSNotifyPlayerReconnectReq* LTSNotifyPlayerReconnectReq::New() const {
  return new LTSNotifyPlayerReconnectReq;
}

void LTSNotifyPlayerReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    logic_bus_id_ = 0u;
    game_bus_id_ = 0u;
    last_login_time_ = GOOGLE_ULONGLONG(0);
    last_logout_time_ = GOOGLE_ULONGLONG(0);
    if (has_simple_data()) {
      if (simple_data_ != NULL) simple_data_->::proto_ff::UserSimpleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTSNotifyPlayerReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_logout_time;
        break;
      }

      // optional uint64 last_logout_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_simple_data;
        break;
      }

      // optional .proto_ff.UserSimpleData simple_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTSNotifyPlayerReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 logic_bus_id = 2;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_bus_id(), output);
  }

  // optional uint32 game_bus_id = 3;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_bus_id(), output);
  }

  // optional uint64 last_login_time = 4;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_login_time(), output);
  }

  // optional uint64 last_logout_time = 5;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_logout_time(), output);
  }

  // optional .proto_ff.UserSimpleData simple_data = 6;
  if (has_simple_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->simple_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTSNotifyPlayerReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 logic_bus_id = 2;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_bus_id(), target);
  }

  // optional uint32 game_bus_id = 3;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_bus_id(), target);
  }

  // optional uint64 last_login_time = 4;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_login_time(), target);
  }

  // optional uint64 last_logout_time = 5;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_logout_time(), target);
  }

  // optional .proto_ff.UserSimpleData simple_data = 6;
  if (has_simple_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->simple_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTSNotifyPlayerReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 logic_bus_id = 2;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

    // optional uint32 game_bus_id = 3;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint64 last_login_time = 4;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

    // optional uint64 last_logout_time = 5;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout_time());
    }

    // optional .proto_ff.UserSimpleData simple_data = 6;
    if (has_simple_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTSNotifyPlayerReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTSNotifyPlayerReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTSNotifyPlayerReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTSNotifyPlayerReconnectReq::MergeFrom(const LTSNotifyPlayerReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_simple_data()) {
      mutable_simple_data()->::proto_ff::UserSimpleData::MergeFrom(from.simple_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTSNotifyPlayerReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTSNotifyPlayerReconnectReq::CopyFrom(const LTSNotifyPlayerReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTSNotifyPlayerReconnectReq::IsInitialized() const {

  return true;
}

void LTSNotifyPlayerReconnectReq::Swap(LTSNotifyPlayerReconnectReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(simple_data_, other->simple_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTSNotifyPlayerReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTSNotifyPlayerReconnectReq_descriptor_;
  metadata.reflection = LTSNotifyPlayerReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_WorldToLogicLogoutReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

Proto_WorldToLogicLogoutReq::Proto_WorldToLogicLogoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_WorldToLogicLogoutReq::InitAsDefaultInstance() {
}

Proto_WorldToLogicLogoutReq::Proto_WorldToLogicLogoutReq(const Proto_WorldToLogicLogoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_WorldToLogicLogoutReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_WorldToLogicLogoutReq::~Proto_WorldToLogicLogoutReq() {
  SharedDtor();
}

void Proto_WorldToLogicLogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_WorldToLogicLogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_WorldToLogicLogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WorldToLogicLogoutReq_descriptor_;
}

const Proto_WorldToLogicLogoutReq& Proto_WorldToLogicLogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_WorldToLogicLogoutReq* Proto_WorldToLogicLogoutReq::default_instance_ = NULL;

Proto_WorldToLogicLogoutReq* Proto_WorldToLogicLogoutReq::New() const {
  return new Proto_WorldToLogicLogoutReq;
}

void Proto_WorldToLogicLogoutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_WorldToLogicLogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_WorldToLogicLogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_WorldToLogicLogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_WorldToLogicLogoutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_WorldToLogicLogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_WorldToLogicLogoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_WorldToLogicLogoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_WorldToLogicLogoutReq::MergeFrom(const Proto_WorldToLogicLogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_WorldToLogicLogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_WorldToLogicLogoutReq::CopyFrom(const Proto_WorldToLogicLogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_WorldToLogicLogoutReq::IsInitialized() const {

  return true;
}

void Proto_WorldToLogicLogoutReq::Swap(Proto_WorldToLogicLogoutReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_WorldToLogicLogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_WorldToLogicLogoutReq_descriptor_;
  metadata.reflection = Proto_WorldToLogicLogoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LogicToWorldLogoutRsp::kPlayerIdFieldNumber;
const int Proto_LogicToWorldLogoutRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_LogicToWorldLogoutRsp::Proto_LogicToWorldLogoutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LogicToWorldLogoutRsp::InitAsDefaultInstance() {
}

Proto_LogicToWorldLogoutRsp::Proto_LogicToWorldLogoutRsp(const Proto_LogicToWorldLogoutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LogicToWorldLogoutRsp::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LogicToWorldLogoutRsp::~Proto_LogicToWorldLogoutRsp() {
  SharedDtor();
}

void Proto_LogicToWorldLogoutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LogicToWorldLogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LogicToWorldLogoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LogicToWorldLogoutRsp_descriptor_;
}

const Proto_LogicToWorldLogoutRsp& Proto_LogicToWorldLogoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_LogicToWorldLogoutRsp* Proto_LogicToWorldLogoutRsp::default_instance_ = NULL;

Proto_LogicToWorldLogoutRsp* Proto_LogicToWorldLogoutRsp::New() const {
  return new Proto_LogicToWorldLogoutRsp;
}

void Proto_LogicToWorldLogoutRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LogicToWorldLogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LogicToWorldLogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LogicToWorldLogoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LogicToWorldLogoutRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LogicToWorldLogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LogicToWorldLogoutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LogicToWorldLogoutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LogicToWorldLogoutRsp::MergeFrom(const Proto_LogicToWorldLogoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LogicToWorldLogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LogicToWorldLogoutRsp::CopyFrom(const Proto_LogicToWorldLogoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LogicToWorldLogoutRsp::IsInitialized() const {

  return true;
}

void Proto_LogicToWorldLogoutRsp::Swap(Proto_LogicToWorldLogoutRsp* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LogicToWorldLogoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LogicToWorldLogoutRsp_descriptor_;
  metadata.reflection = Proto_LogicToWorldLogoutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LogicToSnsLoginReq::kPlayerIdFieldNumber;
const int Proto_LogicToSnsLoginReq::kLogicBusIdFieldNumber;
const int Proto_LogicToSnsLoginReq::kGameBusIdFieldNumber;
const int Proto_LogicToSnsLoginReq::kLastLoginTimeFieldNumber;
const int Proto_LogicToSnsLoginReq::kLastLogoutTimeFieldNumber;
const int Proto_LogicToSnsLoginReq::kSimpleDataFieldNumber;
#endif  // !_MSC_VER

Proto_LogicToSnsLoginReq::Proto_LogicToSnsLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LogicToSnsLoginReq::InitAsDefaultInstance() {
  simple_data_ = const_cast< ::proto_ff::UserSimpleData*>(&::proto_ff::UserSimpleData::default_instance());
}

Proto_LogicToSnsLoginReq::Proto_LogicToSnsLoginReq(const Proto_LogicToSnsLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LogicToSnsLoginReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  logic_bus_id_ = 0u;
  game_bus_id_ = 0u;
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  simple_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LogicToSnsLoginReq::~Proto_LogicToSnsLoginReq() {
  SharedDtor();
}

void Proto_LogicToSnsLoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete simple_data_;
  }
}

void Proto_LogicToSnsLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LogicToSnsLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LogicToSnsLoginReq_descriptor_;
}

const Proto_LogicToSnsLoginReq& Proto_LogicToSnsLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_LogicToSnsLoginReq* Proto_LogicToSnsLoginReq::default_instance_ = NULL;

Proto_LogicToSnsLoginReq* Proto_LogicToSnsLoginReq::New() const {
  return new Proto_LogicToSnsLoginReq;
}

void Proto_LogicToSnsLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    logic_bus_id_ = 0u;
    game_bus_id_ = 0u;
    last_login_time_ = GOOGLE_ULONGLONG(0);
    last_logout_time_ = GOOGLE_ULONGLONG(0);
    if (has_simple_data()) {
      if (simple_data_ != NULL) simple_data_->::proto_ff::UserSimpleData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LogicToSnsLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_bus_id;
        break;
      }

      // optional uint32 logic_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_bus_id_)));
          set_has_logic_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_logout_time;
        break;
      }

      // optional uint64 last_logout_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_simple_data;
        break;
      }

      // optional .proto_ff.UserSimpleData simple_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LogicToSnsLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 logic_bus_id = 2;
  if (has_logic_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_bus_id(), output);
  }

  // optional uint32 game_bus_id = 3;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_bus_id(), output);
  }

  // optional uint64 last_login_time = 4;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_login_time(), output);
  }

  // optional uint64 last_logout_time = 5;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_logout_time(), output);
  }

  // optional .proto_ff.UserSimpleData simple_data = 6;
  if (has_simple_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->simple_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LogicToSnsLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 logic_bus_id = 2;
  if (has_logic_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_bus_id(), target);
  }

  // optional uint32 game_bus_id = 3;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_bus_id(), target);
  }

  // optional uint64 last_login_time = 4;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_login_time(), target);
  }

  // optional uint64 last_logout_time = 5;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_logout_time(), target);
  }

  // optional .proto_ff.UserSimpleData simple_data = 6;
  if (has_simple_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->simple_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LogicToSnsLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 logic_bus_id = 2;
    if (has_logic_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_bus_id());
    }

    // optional uint32 game_bus_id = 3;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

    // optional uint64 last_login_time = 4;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

    // optional uint64 last_logout_time = 5;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout_time());
    }

    // optional .proto_ff.UserSimpleData simple_data = 6;
    if (has_simple_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LogicToSnsLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LogicToSnsLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LogicToSnsLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LogicToSnsLoginReq::MergeFrom(const Proto_LogicToSnsLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_logic_bus_id()) {
      set_logic_bus_id(from.logic_bus_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_simple_data()) {
      mutable_simple_data()->::proto_ff::UserSimpleData::MergeFrom(from.simple_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LogicToSnsLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LogicToSnsLoginReq::CopyFrom(const Proto_LogicToSnsLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LogicToSnsLoginReq::IsInitialized() const {

  return true;
}

void Proto_LogicToSnsLoginReq::Swap(Proto_LogicToSnsLoginReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(logic_bus_id_, other->logic_bus_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(simple_data_, other->simple_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LogicToSnsLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LogicToSnsLoginReq_descriptor_;
  metadata.reflection = Proto_LogicToSnsLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SnsToLogicLoginRsp::kPlayerIdFieldNumber;
const int Proto_SnsToLogicLoginRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SnsToLogicLoginRsp::Proto_SnsToLogicLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SnsToLogicLoginRsp::InitAsDefaultInstance() {
}

Proto_SnsToLogicLoginRsp::Proto_SnsToLogicLoginRsp(const Proto_SnsToLogicLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SnsToLogicLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SnsToLogicLoginRsp::~Proto_SnsToLogicLoginRsp() {
  SharedDtor();
}

void Proto_SnsToLogicLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SnsToLogicLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SnsToLogicLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SnsToLogicLoginRsp_descriptor_;
}

const Proto_SnsToLogicLoginRsp& Proto_SnsToLogicLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_SnsToLogicLoginRsp* Proto_SnsToLogicLoginRsp::default_instance_ = NULL;

Proto_SnsToLogicLoginRsp* Proto_SnsToLogicLoginRsp::New() const {
  return new Proto_SnsToLogicLoginRsp;
}

void Proto_SnsToLogicLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SnsToLogicLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SnsToLogicLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SnsToLogicLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SnsToLogicLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SnsToLogicLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SnsToLogicLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SnsToLogicLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SnsToLogicLoginRsp::MergeFrom(const Proto_SnsToLogicLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SnsToLogicLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SnsToLogicLoginRsp::CopyFrom(const Proto_SnsToLogicLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SnsToLogicLoginRsp::IsInitialized() const {

  return true;
}

void Proto_SnsToLogicLoginRsp::Swap(Proto_SnsToLogicLoginRsp* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SnsToLogicLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SnsToLogicLoginRsp_descriptor_;
  metadata.reflection = Proto_SnsToLogicLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LogicToSnsLogoutReq::kPlayerIdFieldNumber;
const int Proto_LogicToSnsLogoutReq::kLogicSvrIdFieldNumber;
#endif  // !_MSC_VER

Proto_LogicToSnsLogoutReq::Proto_LogicToSnsLogoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LogicToSnsLogoutReq::InitAsDefaultInstance() {
}

Proto_LogicToSnsLogoutReq::Proto_LogicToSnsLogoutReq(const Proto_LogicToSnsLogoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LogicToSnsLogoutReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  logic_svr_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LogicToSnsLogoutReq::~Proto_LogicToSnsLogoutReq() {
  SharedDtor();
}

void Proto_LogicToSnsLogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LogicToSnsLogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LogicToSnsLogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LogicToSnsLogoutReq_descriptor_;
}

const Proto_LogicToSnsLogoutReq& Proto_LogicToSnsLogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_LogicToSnsLogoutReq* Proto_LogicToSnsLogoutReq::default_instance_ = NULL;

Proto_LogicToSnsLogoutReq* Proto_LogicToSnsLogoutReq::New() const {
  return new Proto_LogicToSnsLogoutReq;
}

void Proto_LogicToSnsLogoutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    logic_svr_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LogicToSnsLogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logic_svr_id;
        break;
      }

      // optional uint32 logic_svr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_svr_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logic_svr_id_)));
          set_has_logic_svr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LogicToSnsLogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 logic_svr_id = 2;
  if (has_logic_svr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logic_svr_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LogicToSnsLogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 logic_svr_id = 2;
  if (has_logic_svr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logic_svr_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LogicToSnsLogoutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 logic_svr_id = 2;
    if (has_logic_svr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logic_svr_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LogicToSnsLogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LogicToSnsLogoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LogicToSnsLogoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LogicToSnsLogoutReq::MergeFrom(const Proto_LogicToSnsLogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_logic_svr_id()) {
      set_logic_svr_id(from.logic_svr_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LogicToSnsLogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LogicToSnsLogoutReq::CopyFrom(const Proto_LogicToSnsLogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LogicToSnsLogoutReq::IsInitialized() const {

  return true;
}

void Proto_LogicToSnsLogoutReq::Swap(Proto_LogicToSnsLogoutReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(logic_svr_id_, other->logic_svr_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LogicToSnsLogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LogicToSnsLogoutReq_descriptor_;
  metadata.reflection = Proto_LogicToSnsLogoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SnsToLogicLogoutRsp::kPlayerIdFieldNumber;
const int Proto_SnsToLogicLogoutRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SnsToLogicLogoutRsp::Proto_SnsToLogicLogoutRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SnsToLogicLogoutRsp::InitAsDefaultInstance() {
}

Proto_SnsToLogicLogoutRsp::Proto_SnsToLogicLogoutRsp(const Proto_SnsToLogicLogoutRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SnsToLogicLogoutRsp::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SnsToLogicLogoutRsp::~Proto_SnsToLogicLogoutRsp() {
  SharedDtor();
}

void Proto_SnsToLogicLogoutRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SnsToLogicLogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SnsToLogicLogoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SnsToLogicLogoutRsp_descriptor_;
}

const Proto_SnsToLogicLogoutRsp& Proto_SnsToLogicLogoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_SnsToLogicLogoutRsp* Proto_SnsToLogicLogoutRsp::default_instance_ = NULL;

Proto_SnsToLogicLogoutRsp* Proto_SnsToLogicLogoutRsp::New() const {
  return new Proto_SnsToLogicLogoutRsp;
}

void Proto_SnsToLogicLogoutRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SnsToLogicLogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SnsToLogicLogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SnsToLogicLogoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SnsToLogicLogoutRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SnsToLogicLogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SnsToLogicLogoutRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SnsToLogicLogoutRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SnsToLogicLogoutRsp::MergeFrom(const Proto_SnsToLogicLogoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SnsToLogicLogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SnsToLogicLogoutRsp::CopyFrom(const Proto_SnsToLogicLogoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SnsToLogicLogoutRsp::IsInitialized() const {

  return true;
}

void Proto_SnsToLogicLogoutRsp::Swap(Proto_SnsToLogicLogoutRsp* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SnsToLogicLogoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SnsToLogicLogoutRsp_descriptor_;
  metadata.reflection = Proto_SnsToLogicLogoutRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LogicToWorldLogoutReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

Proto_LogicToWorldLogoutReq::Proto_LogicToWorldLogoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LogicToWorldLogoutReq::InitAsDefaultInstance() {
}

Proto_LogicToWorldLogoutReq::Proto_LogicToWorldLogoutReq(const Proto_LogicToWorldLogoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LogicToWorldLogoutReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LogicToWorldLogoutReq::~Proto_LogicToWorldLogoutReq() {
  SharedDtor();
}

void Proto_LogicToWorldLogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LogicToWorldLogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LogicToWorldLogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LogicToWorldLogoutReq_descriptor_;
}

const Proto_LogicToWorldLogoutReq& Proto_LogicToWorldLogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

Proto_LogicToWorldLogoutReq* Proto_LogicToWorldLogoutReq::default_instance_ = NULL;

Proto_LogicToWorldLogoutReq* Proto_LogicToWorldLogoutReq::New() const {
  return new Proto_LogicToWorldLogoutReq;
}

void Proto_LogicToWorldLogoutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LogicToWorldLogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LogicToWorldLogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LogicToWorldLogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LogicToWorldLogoutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LogicToWorldLogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LogicToWorldLogoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LogicToWorldLogoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LogicToWorldLogoutReq::MergeFrom(const Proto_LogicToWorldLogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LogicToWorldLogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LogicToWorldLogoutReq::CopyFrom(const Proto_LogicToWorldLogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LogicToWorldLogoutReq::IsInitialized() const {

  return true;
}

void Proto_LogicToWorldLogoutReq::Swap(Proto_LogicToWorldLogoutReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LogicToWorldLogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LogicToWorldLogoutReq_descriptor_;
  metadata.reflection = Proto_LogicToWorldLogoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTWebPhoneAuthCodeReq::kPhoneNumFieldNumber;
const int LTWebPhoneAuthCodeReq::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

LTWebPhoneAuthCodeReq::LTWebPhoneAuthCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTWebPhoneAuthCodeReq::InitAsDefaultInstance() {
}

LTWebPhoneAuthCodeReq::LTWebPhoneAuthCodeReq(const LTWebPhoneAuthCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTWebPhoneAuthCodeReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTWebPhoneAuthCodeReq::~LTWebPhoneAuthCodeReq() {
  SharedDtor();
}

void LTWebPhoneAuthCodeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTWebPhoneAuthCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTWebPhoneAuthCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTWebPhoneAuthCodeReq_descriptor_;
}

const LTWebPhoneAuthCodeReq& LTWebPhoneAuthCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTWebPhoneAuthCodeReq* LTWebPhoneAuthCodeReq::default_instance_ = NULL;

LTWebPhoneAuthCodeReq* LTWebPhoneAuthCodeReq::New() const {
  return new LTWebPhoneAuthCodeReq;
}

void LTWebPhoneAuthCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTWebPhoneAuthCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTWebPhoneAuthCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional uint32 code_type = 2;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTWebPhoneAuthCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional uint32 code_type = 2;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTWebPhoneAuthCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code_type = 2;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTWebPhoneAuthCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTWebPhoneAuthCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTWebPhoneAuthCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTWebPhoneAuthCodeReq::MergeFrom(const LTWebPhoneAuthCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTWebPhoneAuthCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTWebPhoneAuthCodeReq::CopyFrom(const LTWebPhoneAuthCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTWebPhoneAuthCodeReq::IsInitialized() const {

  return true;
}

void LTWebPhoneAuthCodeReq::Swap(LTWebPhoneAuthCodeReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTWebPhoneAuthCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTWebPhoneAuthCodeReq_descriptor_;
  metadata.reflection = LTWebPhoneAuthCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebTLPhoneAuthCodeRsp::kResultFieldNumber;
const int WebTLPhoneAuthCodeRsp::kPhoneNumFieldNumber;
const int WebTLPhoneAuthCodeRsp::kMsgFieldNumber;
#endif  // !_MSC_VER

WebTLPhoneAuthCodeRsp::WebTLPhoneAuthCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebTLPhoneAuthCodeRsp::InitAsDefaultInstance() {
}

WebTLPhoneAuthCodeRsp::WebTLPhoneAuthCodeRsp(const WebTLPhoneAuthCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebTLPhoneAuthCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebTLPhoneAuthCodeRsp::~WebTLPhoneAuthCodeRsp() {
  SharedDtor();
}

void WebTLPhoneAuthCodeRsp::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void WebTLPhoneAuthCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebTLPhoneAuthCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebTLPhoneAuthCodeRsp_descriptor_;
}

const WebTLPhoneAuthCodeRsp& WebTLPhoneAuthCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

WebTLPhoneAuthCodeRsp* WebTLPhoneAuthCodeRsp::default_instance_ = NULL;

WebTLPhoneAuthCodeRsp* WebTLPhoneAuthCodeRsp::New() const {
  return new WebTLPhoneAuthCodeRsp;
}

void WebTLPhoneAuthCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebTLPhoneAuthCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebTLPhoneAuthCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebTLPhoneAuthCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebTLPhoneAuthCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebTLPhoneAuthCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebTLPhoneAuthCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebTLPhoneAuthCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebTLPhoneAuthCodeRsp::MergeFrom(const WebTLPhoneAuthCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebTLPhoneAuthCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebTLPhoneAuthCodeRsp::CopyFrom(const WebTLPhoneAuthCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebTLPhoneAuthCodeRsp::IsInitialized() const {

  return true;
}

void WebTLPhoneAuthCodeRsp::Swap(WebTLPhoneAuthCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebTLPhoneAuthCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebTLPhoneAuthCodeRsp_descriptor_;
  metadata.reflection = WebTLPhoneAuthCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTWebPhoneCheckCodeReq::kPhoneNumFieldNumber;
const int LTWebPhoneCheckCodeReq::kCodeFieldNumber;
const int LTWebPhoneCheckCodeReq::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

LTWebPhoneCheckCodeReq::LTWebPhoneCheckCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTWebPhoneCheckCodeReq::InitAsDefaultInstance() {
}

LTWebPhoneCheckCodeReq::LTWebPhoneCheckCodeReq(const LTWebPhoneCheckCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTWebPhoneCheckCodeReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_ = 0u;
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTWebPhoneCheckCodeReq::~LTWebPhoneCheckCodeReq() {
  SharedDtor();
}

void LTWebPhoneCheckCodeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTWebPhoneCheckCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTWebPhoneCheckCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTWebPhoneCheckCodeReq_descriptor_;
}

const LTWebPhoneCheckCodeReq& LTWebPhoneCheckCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTWebPhoneCheckCodeReq* LTWebPhoneCheckCodeReq::default_instance_ = NULL;

LTWebPhoneCheckCodeReq* LTWebPhoneCheckCodeReq::New() const {
  return new LTWebPhoneCheckCodeReq;
}

void LTWebPhoneCheckCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_ = 0u;
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTWebPhoneCheckCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTWebPhoneCheckCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTWebPhoneCheckCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTWebPhoneCheckCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // optional uint32 code_type = 3;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTWebPhoneCheckCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTWebPhoneCheckCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTWebPhoneCheckCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTWebPhoneCheckCodeReq::MergeFrom(const LTWebPhoneCheckCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTWebPhoneCheckCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTWebPhoneCheckCodeReq::CopyFrom(const LTWebPhoneCheckCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTWebPhoneCheckCodeReq::IsInitialized() const {

  return true;
}

void LTWebPhoneCheckCodeReq::Swap(LTWebPhoneCheckCodeReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_, other->code_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTWebPhoneCheckCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTWebPhoneCheckCodeReq_descriptor_;
  metadata.reflection = LTWebPhoneCheckCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebTLPhoneCheckCodeRsp::kResultFieldNumber;
const int WebTLPhoneCheckCodeRsp::kPhoneNumFieldNumber;
const int WebTLPhoneCheckCodeRsp::kMsgFieldNumber;
#endif  // !_MSC_VER

WebTLPhoneCheckCodeRsp::WebTLPhoneCheckCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebTLPhoneCheckCodeRsp::InitAsDefaultInstance() {
}

WebTLPhoneCheckCodeRsp::WebTLPhoneCheckCodeRsp(const WebTLPhoneCheckCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebTLPhoneCheckCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebTLPhoneCheckCodeRsp::~WebTLPhoneCheckCodeRsp() {
  SharedDtor();
}

void WebTLPhoneCheckCodeRsp::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void WebTLPhoneCheckCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebTLPhoneCheckCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebTLPhoneCheckCodeRsp_descriptor_;
}

const WebTLPhoneCheckCodeRsp& WebTLPhoneCheckCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

WebTLPhoneCheckCodeRsp* WebTLPhoneCheckCodeRsp::default_instance_ = NULL;

WebTLPhoneCheckCodeRsp* WebTLPhoneCheckCodeRsp::New() const {
  return new WebTLPhoneCheckCodeRsp;
}

void WebTLPhoneCheckCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebTLPhoneCheckCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebTLPhoneCheckCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebTLPhoneCheckCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebTLPhoneCheckCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebTLPhoneCheckCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebTLPhoneCheckCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebTLPhoneCheckCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebTLPhoneCheckCodeRsp::MergeFrom(const WebTLPhoneCheckCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebTLPhoneCheckCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebTLPhoneCheckCodeRsp::CopyFrom(const WebTLPhoneCheckCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebTLPhoneCheckCodeRsp::IsInitialized() const {

  return true;
}

void WebTLPhoneCheckCodeRsp::Swap(WebTLPhoneCheckCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebTLPhoneCheckCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebTLPhoneCheckCodeRsp_descriptor_;
  metadata.reflection = WebTLPhoneCheckCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebPhoneCodeRetMsg::kCodeFieldNumber;
const int WebPhoneCodeRetMsg::kMsgFieldNumber;
const int WebPhoneCodeRetMsg::kTimeFieldNumber;
#endif  // !_MSC_VER

WebPhoneCodeRetMsg::WebPhoneCodeRetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebPhoneCodeRetMsg::InitAsDefaultInstance() {
}

WebPhoneCodeRetMsg::WebPhoneCodeRetMsg(const WebPhoneCodeRetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebPhoneCodeRetMsg::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebPhoneCodeRetMsg::~WebPhoneCodeRetMsg() {
  SharedDtor();
}

void WebPhoneCodeRetMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void WebPhoneCodeRetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebPhoneCodeRetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebPhoneCodeRetMsg_descriptor_;
}

const WebPhoneCodeRetMsg& WebPhoneCodeRetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

WebPhoneCodeRetMsg* WebPhoneCodeRetMsg::default_instance_ = NULL;

WebPhoneCodeRetMsg* WebPhoneCodeRetMsg::New() const {
  return new WebPhoneCodeRetMsg;
}

void WebPhoneCodeRetMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebPhoneCodeRetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebPhoneCodeRetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebPhoneCodeRetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebPhoneCodeRetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebPhoneCodeRetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebPhoneCodeRetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebPhoneCodeRetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebPhoneCodeRetMsg::MergeFrom(const WebPhoneCodeRetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebPhoneCodeRetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebPhoneCodeRetMsg::CopyFrom(const WebPhoneCodeRetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebPhoneCodeRetMsg::IsInitialized() const {

  return true;
}

void WebPhoneCodeRetMsg::Swap(WebPhoneCodeRetMsg* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebPhoneCodeRetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebPhoneCodeRetMsg_descriptor_;
  metadata.reflection = WebPhoneCodeRetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTSnsChangeFaceNotify::kUserIdFieldNumber;
const int LTSnsChangeFaceNotify::kFaceIdFieldNumber;
#endif  // !_MSC_VER

LTSnsChangeFaceNotify::LTSnsChangeFaceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTSnsChangeFaceNotify::InitAsDefaultInstance() {
}

LTSnsChangeFaceNotify::LTSnsChangeFaceNotify(const LTSnsChangeFaceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTSnsChangeFaceNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  face_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTSnsChangeFaceNotify::~LTSnsChangeFaceNotify() {
  SharedDtor();
}

void LTSnsChangeFaceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTSnsChangeFaceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTSnsChangeFaceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTSnsChangeFaceNotify_descriptor_;
}

const LTSnsChangeFaceNotify& LTSnsChangeFaceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTSnsChangeFaceNotify* LTSnsChangeFaceNotify::default_instance_ = NULL;

LTSnsChangeFaceNotify* LTSnsChangeFaceNotify::New() const {
  return new LTSnsChangeFaceNotify;
}

void LTSnsChangeFaceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    face_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTSnsChangeFaceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_id;
        break;
      }

      // optional uint32 face_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTSnsChangeFaceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 face_id = 2;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTSnsChangeFaceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 face_id = 2;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTSnsChangeFaceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 face_id = 2;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTSnsChangeFaceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTSnsChangeFaceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTSnsChangeFaceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTSnsChangeFaceNotify::MergeFrom(const LTSnsChangeFaceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTSnsChangeFaceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTSnsChangeFaceNotify::CopyFrom(const LTSnsChangeFaceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTSnsChangeFaceNotify::IsInitialized() const {

  return true;
}

void LTSnsChangeFaceNotify::Swap(LTSnsChangeFaceNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTSnsChangeFaceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTSnsChangeFaceNotify_descriptor_;
  metadata.reflection = LTSnsChangeFaceNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTSnsChangeNickNameNotify::kUserIdFieldNumber;
const int LTSnsChangeNickNameNotify::kNickNameFieldNumber;
#endif  // !_MSC_VER

LTSnsChangeNickNameNotify::LTSnsChangeNickNameNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTSnsChangeNickNameNotify::InitAsDefaultInstance() {
}

LTSnsChangeNickNameNotify::LTSnsChangeNickNameNotify(const LTSnsChangeNickNameNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTSnsChangeNickNameNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTSnsChangeNickNameNotify::~LTSnsChangeNickNameNotify() {
  SharedDtor();
}

void LTSnsChangeNickNameNotify::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void LTSnsChangeNickNameNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTSnsChangeNickNameNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTSnsChangeNickNameNotify_descriptor_;
}

const LTSnsChangeNickNameNotify& LTSnsChangeNickNameNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTSnsChangeNickNameNotify* LTSnsChangeNickNameNotify::default_instance_ = NULL;

LTSnsChangeNickNameNotify* LTSnsChangeNickNameNotify::New() const {
  return new LTSnsChangeNickNameNotify;
}

void LTSnsChangeNickNameNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTSnsChangeNickNameNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTSnsChangeNickNameNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTSnsChangeNickNameNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTSnsChangeNickNameNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTSnsChangeNickNameNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTSnsChangeNickNameNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTSnsChangeNickNameNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTSnsChangeNickNameNotify::MergeFrom(const LTSnsChangeNickNameNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTSnsChangeNickNameNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTSnsChangeNickNameNotify::CopyFrom(const LTSnsChangeNickNameNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTSnsChangeNickNameNotify::IsInitialized() const {

  return true;
}

void LTSnsChangeNickNameNotify::Swap(LTSnsChangeNickNameNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTSnsChangeNickNameNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTSnsChangeNickNameNotify_descriptor_;
  metadata.reflection = LTSnsChangeNickNameNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTSnsChangeVipLevelNotify::kUserIdFieldNumber;
const int LTSnsChangeVipLevelNotify::kVipLevelFieldNumber;
#endif  // !_MSC_VER

LTSnsChangeVipLevelNotify::LTSnsChangeVipLevelNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTSnsChangeVipLevelNotify::InitAsDefaultInstance() {
}

LTSnsChangeVipLevelNotify::LTSnsChangeVipLevelNotify(const LTSnsChangeVipLevelNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTSnsChangeVipLevelNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTSnsChangeVipLevelNotify::~LTSnsChangeVipLevelNotify() {
  SharedDtor();
}

void LTSnsChangeVipLevelNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTSnsChangeVipLevelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTSnsChangeVipLevelNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTSnsChangeVipLevelNotify_descriptor_;
}

const LTSnsChangeVipLevelNotify& LTSnsChangeVipLevelNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTSnsChangeVipLevelNotify* LTSnsChangeVipLevelNotify::default_instance_ = NULL;

LTSnsChangeVipLevelNotify* LTSnsChangeVipLevelNotify::New() const {
  return new LTSnsChangeVipLevelNotify;
}

void LTSnsChangeVipLevelNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    vip_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTSnsChangeVipLevelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTSnsChangeVipLevelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTSnsChangeVipLevelNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTSnsChangeVipLevelNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 vip_level = 3;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTSnsChangeVipLevelNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTSnsChangeVipLevelNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTSnsChangeVipLevelNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTSnsChangeVipLevelNotify::MergeFrom(const LTSnsChangeVipLevelNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTSnsChangeVipLevelNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTSnsChangeVipLevelNotify::CopyFrom(const LTSnsChangeVipLevelNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTSnsChangeVipLevelNotify::IsInitialized() const {

  return true;
}

void LTSnsChangeVipLevelNotify::Swap(LTSnsChangeVipLevelNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTSnsChangeVipLevelNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTSnsChangeVipLevelNotify_descriptor_;
  metadata.reflection = LTSnsChangeVipLevelNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTSnsChangeUserIdNotify::kUserIdFieldNumber;
const int LTSnsChangeUserIdNotify::kShowUseridFieldNumber;
#endif  // !_MSC_VER

LTSnsChangeUserIdNotify::LTSnsChangeUserIdNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTSnsChangeUserIdNotify::InitAsDefaultInstance() {
}

LTSnsChangeUserIdNotify::LTSnsChangeUserIdNotify(const LTSnsChangeUserIdNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTSnsChangeUserIdNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  show_userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTSnsChangeUserIdNotify::~LTSnsChangeUserIdNotify() {
  SharedDtor();
}

void LTSnsChangeUserIdNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LTSnsChangeUserIdNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTSnsChangeUserIdNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTSnsChangeUserIdNotify_descriptor_;
}

const LTSnsChangeUserIdNotify& LTSnsChangeUserIdNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTSnsChangeUserIdNotify* LTSnsChangeUserIdNotify::default_instance_ = NULL;

LTSnsChangeUserIdNotify* LTSnsChangeUserIdNotify::New() const {
  return new LTSnsChangeUserIdNotify;
}

void LTSnsChangeUserIdNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    show_userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTSnsChangeUserIdNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_userid;
        break;
      }

      // optional uint64 show_userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_userid_)));
          set_has_show_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTSnsChangeUserIdNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 show_userid = 2;
  if (has_show_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTSnsChangeUserIdNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 show_userid = 2;
  if (has_show_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTSnsChangeUserIdNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 show_userid = 2;
    if (has_show_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTSnsChangeUserIdNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTSnsChangeUserIdNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTSnsChangeUserIdNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTSnsChangeUserIdNotify::MergeFrom(const LTSnsChangeUserIdNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_show_userid()) {
      set_show_userid(from.show_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTSnsChangeUserIdNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTSnsChangeUserIdNotify::CopyFrom(const LTSnsChangeUserIdNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTSnsChangeUserIdNotify::IsInitialized() const {

  return true;
}

void LTSnsChangeUserIdNotify::Swap(LTSnsChangeUserIdNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(show_userid_, other->show_userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTSnsChangeUserIdNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTSnsChangeUserIdNotify_descriptor_;
  metadata.reflection = LTSnsChangeUserIdNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LTLPlayerDeviceChangeNotify::kUserIdFieldNumber;
const int LTLPlayerDeviceChangeNotify::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

LTLPlayerDeviceChangeNotify::LTLPlayerDeviceChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LTLPlayerDeviceChangeNotify::InitAsDefaultInstance() {
}

LTLPlayerDeviceChangeNotify::LTLPlayerDeviceChangeNotify(const LTLPlayerDeviceChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LTLPlayerDeviceChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LTLPlayerDeviceChangeNotify::~LTLPlayerDeviceChangeNotify() {
  SharedDtor();
}

void LTLPlayerDeviceChangeNotify::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void LTLPlayerDeviceChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LTLPlayerDeviceChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LTLPlayerDeviceChangeNotify_descriptor_;
}

const LTLPlayerDeviceChangeNotify& LTLPlayerDeviceChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5flogin_2eproto();
  return *default_instance_;
}

LTLPlayerDeviceChangeNotify* LTLPlayerDeviceChangeNotify::default_instance_ = NULL;

LTLPlayerDeviceChangeNotify* LTLPlayerDeviceChangeNotify::New() const {
  return new LTLPlayerDeviceChangeNotify;
}

void LTLPlayerDeviceChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LTLPlayerDeviceChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_id;
        break;
      }

      // optional string device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LTLPlayerDeviceChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LTLPlayerDeviceChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LTLPlayerDeviceChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LTLPlayerDeviceChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LTLPlayerDeviceChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LTLPlayerDeviceChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LTLPlayerDeviceChangeNotify::MergeFrom(const LTLPlayerDeviceChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LTLPlayerDeviceChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LTLPlayerDeviceChangeNotify::CopyFrom(const LTLPlayerDeviceChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTLPlayerDeviceChangeNotify::IsInitialized() const {

  return true;
}

void LTLPlayerDeviceChangeNotify::Swap(LTLPlayerDeviceChangeNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LTLPlayerDeviceChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LTLPlayerDeviceChangeNotify_descriptor_;
  metadata.reflection = LTLPlayerDeviceChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
