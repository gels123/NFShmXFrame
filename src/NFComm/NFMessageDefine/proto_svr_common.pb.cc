// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CommonMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STMasterServerDumpInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STMasterServerDumpInfoNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorReloadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorReloadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorRestartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorRestartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStopReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorStopReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterReloadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterReloadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterRestartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterRestartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterStartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStopRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterStopRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSQueryUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSQueryUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLQueryUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLQueryUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSEventLogNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSEventLogNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* emailSender_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emailSender_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STStoreCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STStoreCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_StoreTSCheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_StoreTSCheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_NotifyChangeAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_NotifyChangeAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_PlayerJettonChangeStatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_PlayerJettonChangeStatReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_SvrMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_common.proto");
  GOOGLE_CHECK(file != NULL);
  CommonMsgRsp_descriptor_ = file->message_type(0);
  static const int CommonMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsgRsp, result_),
  };
  CommonMsgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonMsgRsp_descriptor_,
      CommonMsgRsp::default_instance_,
      CommonMsgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonMsgRsp));
  Proto_STMasterServerDumpInfoNtf_descriptor_ = file->message_type(1);
  static const int Proto_STMasterServerDumpInfoNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STMasterServerDumpInfoNtf, dump_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STMasterServerDumpInfoNtf, bus_id_),
  };
  Proto_STMasterServerDumpInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STMasterServerDumpInfoNtf_descriptor_,
      Proto_STMasterServerDumpInfoNtf::default_instance_,
      Proto_STMasterServerDumpInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STMasterServerDumpInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STMasterServerDumpInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STMasterServerDumpInfoNtf));
  Proto_MasterTMonitorReloadReq_descriptor_ = file->message_type(2);
  static const int Proto_MasterTMonitorReloadReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, server_id_),
  };
  Proto_MasterTMonitorReloadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorReloadReq_descriptor_,
      Proto_MasterTMonitorReloadReq::default_instance_,
      Proto_MasterTMonitorReloadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorReloadReq));
  Proto_MasterTMonitorRestartReq_descriptor_ = file->message_type(3);
  static const int Proto_MasterTMonitorRestartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, server_id_),
  };
  Proto_MasterTMonitorRestartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorRestartReq_descriptor_,
      Proto_MasterTMonitorRestartReq::default_instance_,
      Proto_MasterTMonitorRestartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorRestartReq));
  Proto_MasterTMonitorStartReq_descriptor_ = file->message_type(4);
  static const int Proto_MasterTMonitorStartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, server_id_),
  };
  Proto_MasterTMonitorStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorStartReq_descriptor_,
      Proto_MasterTMonitorStartReq::default_instance_,
      Proto_MasterTMonitorStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorStartReq));
  Proto_MasterTMonitorStopReq_descriptor_ = file->message_type(5);
  static const int Proto_MasterTMonitorStopReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, server_id_),
  };
  Proto_MasterTMonitorStopReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorStopReq_descriptor_,
      Proto_MasterTMonitorStopReq::default_instance_,
      Proto_MasterTMonitorStopReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorStopReq));
  Proto_MonitorTMasterReloadRsp_descriptor_ = file->message_type(6);
  static const int Proto_MonitorTMasterReloadRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, server_id_),
  };
  Proto_MonitorTMasterReloadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterReloadRsp_descriptor_,
      Proto_MonitorTMasterReloadRsp::default_instance_,
      Proto_MonitorTMasterReloadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterReloadRsp));
  Proto_MonitorTMasterRestartRsp_descriptor_ = file->message_type(7);
  static const int Proto_MonitorTMasterRestartRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, server_id_),
  };
  Proto_MonitorTMasterRestartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterRestartRsp_descriptor_,
      Proto_MonitorTMasterRestartRsp::default_instance_,
      Proto_MonitorTMasterRestartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterRestartRsp));
  Proto_MonitorTMasterStartRsp_descriptor_ = file->message_type(8);
  static const int Proto_MonitorTMasterStartRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, server_id_),
  };
  Proto_MonitorTMasterStartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterStartRsp_descriptor_,
      Proto_MonitorTMasterStartRsp::default_instance_,
      Proto_MonitorTMasterStartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterStartRsp));
  Proto_MonitorTMasterStopRsp_descriptor_ = file->message_type(9);
  static const int Proto_MonitorTMasterStopRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, server_id_),
  };
  Proto_MonitorTMasterStopRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterStopRsp_descriptor_,
      Proto_MonitorTMasterStopRsp::default_instance_,
      Proto_MonitorTMasterStopRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterStopRsp));
  Proto_LTSQueryUserReq_descriptor_ = file->message_type(10);
  static const int Proto_LTSQueryUserReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSQueryUserReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSQueryUserReq, query_user_id_),
  };
  Proto_LTSQueryUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSQueryUserReq_descriptor_,
      Proto_LTSQueryUserReq::default_instance_,
      Proto_LTSQueryUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSQueryUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSQueryUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSQueryUserReq));
  Proto_STLQueryUserRsp_descriptor_ = file->message_type(11);
  static const int Proto_STLQueryUserRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLQueryUserRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLQueryUserRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLQueryUserRsp, query_user_list_),
  };
  Proto_STLQueryUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLQueryUserRsp_descriptor_,
      Proto_STLQueryUserRsp::default_instance_,
      Proto_STLQueryUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLQueryUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLQueryUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLQueryUserRsp));
  SSEventLogNotify_descriptor_ = file->message_type(12);
  static const int SSEventLogNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSEventLogNotify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSEventLogNotify, eventlog_id_),
  };
  SSEventLogNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSEventLogNotify_descriptor_,
      SSEventLogNotify::default_instance_,
      SSEventLogNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSEventLogNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSEventLogNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSEventLogNotify));
  emailSender_descriptor_ = file->message_type(13);
  static const int emailSender_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emailSender, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emailSender, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emailSender, msg_),
  };
  emailSender_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emailSender_descriptor_,
      emailSender::default_instance_,
      emailSender_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emailSender, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emailSender, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emailSender));
  Proto_STStoreCheckReq_descriptor_ = file->message_type(14);
  static const int Proto_STStoreCheckReq_offsets_[1] = {
  };
  Proto_STStoreCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STStoreCheckReq_descriptor_,
      Proto_STStoreCheckReq::default_instance_,
      Proto_STStoreCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STStoreCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STStoreCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STStoreCheckReq));
  Proto_StoreTSCheckRsp_descriptor_ = file->message_type(15);
  static const int Proto_StoreTSCheckRsp_offsets_[1] = {
  };
  Proto_StoreTSCheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_StoreTSCheckRsp_descriptor_,
      Proto_StoreTSCheckRsp::default_instance_,
      Proto_StoreTSCheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreTSCheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreTSCheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_StoreTSCheckRsp));
  Proto_NotifyChangeAgent_descriptor_ = file->message_type(16);
  static const int Proto_NotifyChangeAgent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyChangeAgent, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyChangeAgent, agent_id_),
  };
  Proto_NotifyChangeAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_NotifyChangeAgent_descriptor_,
      Proto_NotifyChangeAgent::default_instance_,
      Proto_NotifyChangeAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyChangeAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyChangeAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_NotifyChangeAgent));
  Proto_PlayerJettonChangeStatReq_descriptor_ = file->message_type(17);
  static const int Proto_PlayerJettonChangeStatReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, opt_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, money_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, is_first_recharge_),
  };
  Proto_PlayerJettonChangeStatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_PlayerJettonChangeStatReq_descriptor_,
      Proto_PlayerJettonChangeStatReq::default_instance_,
      Proto_PlayerJettonChangeStatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_PlayerJettonChangeStatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_PlayerJettonChangeStatReq));
  Proto_SvrMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonMsgRsp_descriptor_, &CommonMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STMasterServerDumpInfoNtf_descriptor_, &Proto_STMasterServerDumpInfoNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorReloadReq_descriptor_, &Proto_MasterTMonitorReloadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorRestartReq_descriptor_, &Proto_MasterTMonitorRestartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorStartReq_descriptor_, &Proto_MasterTMonitorStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorStopReq_descriptor_, &Proto_MasterTMonitorStopReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterReloadRsp_descriptor_, &Proto_MonitorTMasterReloadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterRestartRsp_descriptor_, &Proto_MonitorTMasterRestartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterStartRsp_descriptor_, &Proto_MonitorTMasterStartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterStopRsp_descriptor_, &Proto_MonitorTMasterStopRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSQueryUserReq_descriptor_, &Proto_LTSQueryUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLQueryUserRsp_descriptor_, &Proto_STLQueryUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSEventLogNotify_descriptor_, &SSEventLogNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emailSender_descriptor_, &emailSender::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STStoreCheckReq_descriptor_, &Proto_STStoreCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_StoreTSCheckRsp_descriptor_, &Proto_StoreTSCheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_NotifyChangeAgent_descriptor_, &Proto_NotifyChangeAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_PlayerJettonChangeStatReq_descriptor_, &Proto_PlayerJettonChangeStatReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto() {
  delete CommonMsgRsp::default_instance_;
  delete CommonMsgRsp_reflection_;
  delete Proto_STMasterServerDumpInfoNtf::default_instance_;
  delete Proto_STMasterServerDumpInfoNtf_reflection_;
  delete Proto_MasterTMonitorReloadReq::default_instance_;
  delete Proto_MasterTMonitorReloadReq_reflection_;
  delete Proto_MasterTMonitorRestartReq::default_instance_;
  delete Proto_MasterTMonitorRestartReq_reflection_;
  delete Proto_MasterTMonitorStartReq::default_instance_;
  delete Proto_MasterTMonitorStartReq_reflection_;
  delete Proto_MasterTMonitorStopReq::default_instance_;
  delete Proto_MasterTMonitorStopReq_reflection_;
  delete Proto_MonitorTMasterReloadRsp::default_instance_;
  delete Proto_MonitorTMasterReloadRsp_reflection_;
  delete Proto_MonitorTMasterRestartRsp::default_instance_;
  delete Proto_MonitorTMasterRestartRsp_reflection_;
  delete Proto_MonitorTMasterStartRsp::default_instance_;
  delete Proto_MonitorTMasterStartRsp_reflection_;
  delete Proto_MonitorTMasterStopRsp::default_instance_;
  delete Proto_MonitorTMasterStopRsp_reflection_;
  delete Proto_LTSQueryUserReq::default_instance_;
  delete Proto_LTSQueryUserReq_reflection_;
  delete Proto_STLQueryUserRsp::default_instance_;
  delete Proto_STLQueryUserRsp_reflection_;
  delete SSEventLogNotify::default_instance_;
  delete SSEventLogNotify_reflection_;
  delete emailSender::default_instance_;
  delete emailSender_reflection_;
  delete Proto_STStoreCheckReq::default_instance_;
  delete Proto_STStoreCheckReq_reflection_;
  delete Proto_StoreTSCheckRsp::default_instance_;
  delete Proto_StoreTSCheckRsp_reflection_;
  delete Proto_NotifyChangeAgent::default_instance_;
  delete Proto_NotifyChangeAgent_reflection_;
  delete Proto_PlayerJettonChangeStatReq::default_instance_;
  delete Proto_PlayerJettonChangeStatReq_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fkernel_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5ferror_5fcode_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcs_2eproto();
  ::proto_login::protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026proto_svr_common.proto\022\010proto_ff\032\025yd_f"
    "ieldoptions.proto\032\022proto_common.proto\032\022p"
    "roto_kernel.proto\032\026proto_error_code.prot"
    "o\032\016proto_cs.proto\032\024proto_cs_login.proto\""
    "\036\n\014CommonMsgRsp\022\016\n\006result\030\001 \001(\005\"D\n\037Proto"
    "_STMasterServerDumpInfoNtf\022\021\n\tdump_info\030"
    "\001 \001(\t\022\016\n\006bus_id\030\002 \001(\r\"G\n\035Proto_MasterTMo"
    "nitorReloadReq\022\023\n\013server_name\030\001 \001(\t\022\021\n\ts"
    "erver_id\030\002 \001(\t\"H\n\036Proto_MasterTMonitorRe"
    "startReq\022\023\n\013server_name\030\001 \001(\t\022\021\n\tserver_"
    "id\030\002 \001(\t\"F\n\034Proto_MasterTMonitorStartReq"
    "\022\023\n\013server_name\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\t"
    "\"E\n\033Proto_MasterTMonitorStopReq\022\023\n\013serve"
    "r_name\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\t\"W\n\035Proto"
    "_MonitorTMasterReloadRsp\022\016\n\006result\030\001 \001(\005"
    "\022\023\n\013server_name\030\002 \001(\t\022\021\n\tserver_id\030\003 \001(\t"
    "\"X\n\036Proto_MonitorTMasterRestartRsp\022\016\n\006re"
    "sult\030\001 \001(\005\022\023\n\013server_name\030\002 \001(\t\022\021\n\tserve"
    "r_id\030\003 \001(\t\"V\n\034Proto_MonitorTMasterStartR"
    "sp\022\016\n\006result\030\001 \001(\005\022\023\n\013server_name\030\002 \001(\t\022"
    "\021\n\tserver_id\030\003 \001(\t\"U\n\033Proto_MonitorTMast"
    "erStopRsp\022\016\n\006result\030\001 \001(\005\022\023\n\013server_name"
    "\030\002 \001(\t\022\021\n\tserver_id\030\003 \001(\t\"\?\n\025Proto_LTSQu"
    "eryUserReq\022\017\n\007user_id\030\001 \001(\004\022\025\n\rquery_use"
    "r_id\030\002 \003(\004\"k\n\025Proto_STLQueryUserRsp\022\017\n\007u"
    "ser_id\030\001 \001(\004\022\016\n\006result\030\002 \001(\005\0221\n\017query_us"
    "er_list\030\003 \003(\0132\030.proto_ff.UserSimpleData\""
    "8\n\020SSEventLogNotify\022\017\n\007user_id\030\001 \001(\004\022\023\n\013"
    "eventlog_id\030\002 \001(\004\"8\n\013emailSender\022\r\n\005emai"
    "l\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\013\n\003msg\030\003 \001(\t\"\027\n\025P"
    "roto_STStoreCheckReq\"\027\n\025Proto_StoreTSChe"
    "ckRsp\"<\n\027Proto_NotifyChangeAgent\022\017\n\007user"
    "_id\030\001 \001(\004\022\020\n\010agent_id\030\002 \001(\004\"\241\001\n\037Proto_Pl"
    "ayerJettonChangeStatReq\022\021\n\tplayer_id\030\001 \001"
    "(\004\022\024\n\014account_type\030\002 \001(\r\022\020\n\010opt_type\030\003 \001"
    "(\r\022\022\n\nopt_reason\030\004 \001(\r\022\024\n\014money_change\030\005"
    " \001(\003\022\031\n\021is_first_recharge\030\006 \001(\010*\326\002\n\016Prot"
    "o_SvrMsgID\022%\n!NF_LTW_LOAD_SERVER_FROM_WO"
    "RLD_REQ\020&\022#\n\037NF_WTL_LOAD_SERVER_TO_LOGIN"
    "_RSP\020\'\022%\n!NF_STSTORE_CHECK_STORE_SERVER_"
    "REQ\020(\022%\n!NF_STORETS_CHECK_STORE_SERVER_R"
    "SP\020)\022%\n NF_SNSTLOGIC_CHANGE_AGENT_NOTIFY"
    "\020\247\002\022\"\n\035NF_UNICASTMSG_EVENTLOG_NOTIFY\020\250\002\022"
    "\032\n\025NF_LTS_QUERY_USER_REQ\020\251\002\022\032\n\025NF_STL_QU"
    "ERY_USER_RSP\020\252\002\022\'\n\"NF_STSNS_PlayerJetton"
    "ChangeStatReq\020\220\003", 1816);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_common.proto", &protobuf_RegisterTypes);
  CommonMsgRsp::default_instance_ = new CommonMsgRsp();
  Proto_STMasterServerDumpInfoNtf::default_instance_ = new Proto_STMasterServerDumpInfoNtf();
  Proto_MasterTMonitorReloadReq::default_instance_ = new Proto_MasterTMonitorReloadReq();
  Proto_MasterTMonitorRestartReq::default_instance_ = new Proto_MasterTMonitorRestartReq();
  Proto_MasterTMonitorStartReq::default_instance_ = new Proto_MasterTMonitorStartReq();
  Proto_MasterTMonitorStopReq::default_instance_ = new Proto_MasterTMonitorStopReq();
  Proto_MonitorTMasterReloadRsp::default_instance_ = new Proto_MonitorTMasterReloadRsp();
  Proto_MonitorTMasterRestartRsp::default_instance_ = new Proto_MonitorTMasterRestartRsp();
  Proto_MonitorTMasterStartRsp::default_instance_ = new Proto_MonitorTMasterStartRsp();
  Proto_MonitorTMasterStopRsp::default_instance_ = new Proto_MonitorTMasterStopRsp();
  Proto_LTSQueryUserReq::default_instance_ = new Proto_LTSQueryUserReq();
  Proto_STLQueryUserRsp::default_instance_ = new Proto_STLQueryUserRsp();
  SSEventLogNotify::default_instance_ = new SSEventLogNotify();
  emailSender::default_instance_ = new emailSender();
  Proto_STStoreCheckReq::default_instance_ = new Proto_STStoreCheckReq();
  Proto_StoreTSCheckRsp::default_instance_ = new Proto_StoreTSCheckRsp();
  Proto_NotifyChangeAgent::default_instance_ = new Proto_NotifyChangeAgent();
  Proto_PlayerJettonChangeStatReq::default_instance_ = new Proto_PlayerJettonChangeStatReq();
  CommonMsgRsp::default_instance_->InitAsDefaultInstance();
  Proto_STMasterServerDumpInfoNtf::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorReloadReq::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorRestartReq::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorStartReq::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorStopReq::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterReloadRsp::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterRestartRsp::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterStartRsp::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterStopRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTSQueryUserReq::default_instance_->InitAsDefaultInstance();
  Proto_STLQueryUserRsp::default_instance_->InitAsDefaultInstance();
  SSEventLogNotify::default_instance_->InitAsDefaultInstance();
  emailSender::default_instance_->InitAsDefaultInstance();
  Proto_STStoreCheckReq::default_instance_->InitAsDefaultInstance();
  Proto_StoreTSCheckRsp::default_instance_->InitAsDefaultInstance();
  Proto_NotifyChangeAgent::default_instance_->InitAsDefaultInstance();
  Proto_PlayerJettonChangeStatReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5fcommon_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5fcommon_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_SvrMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SvrMsgID_descriptor_;
}
bool Proto_SvrMsgID_IsValid(int value) {
  switch(value) {
    case 38:
    case 39:
    case 40:
    case 41:
    case 295:
    case 296:
    case 297:
    case 298:
    case 400:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CommonMsgRsp::kResultFieldNumber;
#endif  // !_MSC_VER

CommonMsgRsp::CommonMsgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonMsgRsp::InitAsDefaultInstance() {
}

CommonMsgRsp::CommonMsgRsp(const CommonMsgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonMsgRsp::~CommonMsgRsp() {
  SharedDtor();
}

void CommonMsgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonMsgRsp_descriptor_;
}

const CommonMsgRsp& CommonMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

CommonMsgRsp* CommonMsgRsp::default_instance_ = NULL;

CommonMsgRsp* CommonMsgRsp::New() const {
  return new CommonMsgRsp;
}

void CommonMsgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonMsgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonMsgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonMsgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonMsgRsp::MergeFrom(const CommonMsgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMsgRsp::CopyFrom(const CommonMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMsgRsp::IsInitialized() const {

  return true;
}

void CommonMsgRsp::Swap(CommonMsgRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonMsgRsp_descriptor_;
  metadata.reflection = CommonMsgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STMasterServerDumpInfoNtf::kDumpInfoFieldNumber;
const int Proto_STMasterServerDumpInfoNtf::kBusIdFieldNumber;
#endif  // !_MSC_VER

Proto_STMasterServerDumpInfoNtf::Proto_STMasterServerDumpInfoNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STMasterServerDumpInfoNtf::InitAsDefaultInstance() {
}

Proto_STMasterServerDumpInfoNtf::Proto_STMasterServerDumpInfoNtf(const Proto_STMasterServerDumpInfoNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STMasterServerDumpInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  dump_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STMasterServerDumpInfoNtf::~Proto_STMasterServerDumpInfoNtf() {
  SharedDtor();
}

void Proto_STMasterServerDumpInfoNtf::SharedDtor() {
  if (dump_info_ != &::google::protobuf::internal::kEmptyString) {
    delete dump_info_;
  }
  if (this != default_instance_) {
  }
}

void Proto_STMasterServerDumpInfoNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STMasterServerDumpInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STMasterServerDumpInfoNtf_descriptor_;
}

const Proto_STMasterServerDumpInfoNtf& Proto_STMasterServerDumpInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_STMasterServerDumpInfoNtf* Proto_STMasterServerDumpInfoNtf::default_instance_ = NULL;

Proto_STMasterServerDumpInfoNtf* Proto_STMasterServerDumpInfoNtf::New() const {
  return new Proto_STMasterServerDumpInfoNtf;
}

void Proto_STMasterServerDumpInfoNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dump_info()) {
      if (dump_info_ != &::google::protobuf::internal::kEmptyString) {
        dump_info_->clear();
      }
    }
    bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STMasterServerDumpInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dump_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dump_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dump_info().data(), this->dump_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bus_id;
        break;
      }

      // optional uint32 bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STMasterServerDumpInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dump_info = 1;
  if (has_dump_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dump_info().data(), this->dump_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dump_info(), output);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STMasterServerDumpInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dump_info = 1;
  if (has_dump_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dump_info().data(), this->dump_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dump_info(), target);
  }

  // optional uint32 bus_id = 2;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STMasterServerDumpInfoNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dump_info = 1;
    if (has_dump_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dump_info());
    }

    // optional uint32 bus_id = 2;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STMasterServerDumpInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STMasterServerDumpInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STMasterServerDumpInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STMasterServerDumpInfoNtf::MergeFrom(const Proto_STMasterServerDumpInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dump_info()) {
      set_dump_info(from.dump_info());
    }
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STMasterServerDumpInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STMasterServerDumpInfoNtf::CopyFrom(const Proto_STMasterServerDumpInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STMasterServerDumpInfoNtf::IsInitialized() const {

  return true;
}

void Proto_STMasterServerDumpInfoNtf::Swap(Proto_STMasterServerDumpInfoNtf* other) {
  if (other != this) {
    std::swap(dump_info_, other->dump_info_);
    std::swap(bus_id_, other->bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STMasterServerDumpInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STMasterServerDumpInfoNtf_descriptor_;
  metadata.reflection = Proto_STMasterServerDumpInfoNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorReloadReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorReloadReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorReloadReq::Proto_MasterTMonitorReloadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorReloadReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorReloadReq::Proto_MasterTMonitorReloadReq(const Proto_MasterTMonitorReloadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorReloadReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorReloadReq::~Proto_MasterTMonitorReloadReq() {
  SharedDtor();
}

void Proto_MasterTMonitorReloadReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorReloadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorReloadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorReloadReq_descriptor_;
}

const Proto_MasterTMonitorReloadReq& Proto_MasterTMonitorReloadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorReloadReq* Proto_MasterTMonitorReloadReq::default_instance_ = NULL;

Proto_MasterTMonitorReloadReq* Proto_MasterTMonitorReloadReq::New() const {
  return new Proto_MasterTMonitorReloadReq;
}

void Proto_MasterTMonitorReloadReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorReloadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorReloadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorReloadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorReloadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorReloadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorReloadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorReloadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorReloadReq::MergeFrom(const Proto_MasterTMonitorReloadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorReloadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorReloadReq::CopyFrom(const Proto_MasterTMonitorReloadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorReloadReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorReloadReq::Swap(Proto_MasterTMonitorReloadReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorReloadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorReloadReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorReloadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorRestartReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorRestartReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorRestartReq::Proto_MasterTMonitorRestartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorRestartReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorRestartReq::Proto_MasterTMonitorRestartReq(const Proto_MasterTMonitorRestartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorRestartReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorRestartReq::~Proto_MasterTMonitorRestartReq() {
  SharedDtor();
}

void Proto_MasterTMonitorRestartReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorRestartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorRestartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorRestartReq_descriptor_;
}

const Proto_MasterTMonitorRestartReq& Proto_MasterTMonitorRestartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorRestartReq* Proto_MasterTMonitorRestartReq::default_instance_ = NULL;

Proto_MasterTMonitorRestartReq* Proto_MasterTMonitorRestartReq::New() const {
  return new Proto_MasterTMonitorRestartReq;
}

void Proto_MasterTMonitorRestartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorRestartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorRestartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorRestartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorRestartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorRestartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorRestartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorRestartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorRestartReq::MergeFrom(const Proto_MasterTMonitorRestartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorRestartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorRestartReq::CopyFrom(const Proto_MasterTMonitorRestartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorRestartReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorRestartReq::Swap(Proto_MasterTMonitorRestartReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorRestartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorRestartReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorRestartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorStartReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorStartReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorStartReq::Proto_MasterTMonitorStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorStartReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorStartReq::Proto_MasterTMonitorStartReq(const Proto_MasterTMonitorStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorStartReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorStartReq::~Proto_MasterTMonitorStartReq() {
  SharedDtor();
}

void Proto_MasterTMonitorStartReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorStartReq_descriptor_;
}

const Proto_MasterTMonitorStartReq& Proto_MasterTMonitorStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorStartReq* Proto_MasterTMonitorStartReq::default_instance_ = NULL;

Proto_MasterTMonitorStartReq* Proto_MasterTMonitorStartReq::New() const {
  return new Proto_MasterTMonitorStartReq;
}

void Proto_MasterTMonitorStartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorStartReq::MergeFrom(const Proto_MasterTMonitorStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorStartReq::CopyFrom(const Proto_MasterTMonitorStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorStartReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorStartReq::Swap(Proto_MasterTMonitorStartReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorStartReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorStopReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorStopReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorStopReq::Proto_MasterTMonitorStopReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorStopReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorStopReq::Proto_MasterTMonitorStopReq(const Proto_MasterTMonitorStopReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorStopReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorStopReq::~Proto_MasterTMonitorStopReq() {
  SharedDtor();
}

void Proto_MasterTMonitorStopReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorStopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStopReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorStopReq_descriptor_;
}

const Proto_MasterTMonitorStopReq& Proto_MasterTMonitorStopReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorStopReq* Proto_MasterTMonitorStopReq::default_instance_ = NULL;

Proto_MasterTMonitorStopReq* Proto_MasterTMonitorStopReq::New() const {
  return new Proto_MasterTMonitorStopReq;
}

void Proto_MasterTMonitorStopReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorStopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorStopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorStopReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorStopReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorStopReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorStopReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorStopReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorStopReq::MergeFrom(const Proto_MasterTMonitorStopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorStopReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorStopReq::CopyFrom(const Proto_MasterTMonitorStopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorStopReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorStopReq::Swap(Proto_MasterTMonitorStopReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorStopReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorStopReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorStopReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterReloadRsp::kResultFieldNumber;
const int Proto_MonitorTMasterReloadRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterReloadRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterReloadRsp::Proto_MonitorTMasterReloadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterReloadRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterReloadRsp::Proto_MonitorTMasterReloadRsp(const Proto_MonitorTMasterReloadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterReloadRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterReloadRsp::~Proto_MonitorTMasterReloadRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterReloadRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterReloadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterReloadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterReloadRsp_descriptor_;
}

const Proto_MonitorTMasterReloadRsp& Proto_MonitorTMasterReloadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterReloadRsp* Proto_MonitorTMasterReloadRsp::default_instance_ = NULL;

Proto_MonitorTMasterReloadRsp* Proto_MonitorTMasterReloadRsp::New() const {
  return new Proto_MonitorTMasterReloadRsp;
}

void Proto_MonitorTMasterReloadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterReloadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterReloadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterReloadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterReloadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterReloadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterReloadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterReloadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterReloadRsp::MergeFrom(const Proto_MonitorTMasterReloadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterReloadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterReloadRsp::CopyFrom(const Proto_MonitorTMasterReloadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterReloadRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterReloadRsp::Swap(Proto_MonitorTMasterReloadRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterReloadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterReloadRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterReloadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterRestartRsp::kResultFieldNumber;
const int Proto_MonitorTMasterRestartRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterRestartRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterRestartRsp::Proto_MonitorTMasterRestartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterRestartRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterRestartRsp::Proto_MonitorTMasterRestartRsp(const Proto_MonitorTMasterRestartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterRestartRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterRestartRsp::~Proto_MonitorTMasterRestartRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterRestartRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterRestartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterRestartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterRestartRsp_descriptor_;
}

const Proto_MonitorTMasterRestartRsp& Proto_MonitorTMasterRestartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterRestartRsp* Proto_MonitorTMasterRestartRsp::default_instance_ = NULL;

Proto_MonitorTMasterRestartRsp* Proto_MonitorTMasterRestartRsp::New() const {
  return new Proto_MonitorTMasterRestartRsp;
}

void Proto_MonitorTMasterRestartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterRestartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterRestartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterRestartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterRestartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterRestartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterRestartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterRestartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterRestartRsp::MergeFrom(const Proto_MonitorTMasterRestartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterRestartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterRestartRsp::CopyFrom(const Proto_MonitorTMasterRestartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterRestartRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterRestartRsp::Swap(Proto_MonitorTMasterRestartRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterRestartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterRestartRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterRestartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterStartRsp::kResultFieldNumber;
const int Proto_MonitorTMasterStartRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterStartRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterStartRsp::Proto_MonitorTMasterStartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterStartRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterStartRsp::Proto_MonitorTMasterStartRsp(const Proto_MonitorTMasterStartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterStartRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterStartRsp::~Proto_MonitorTMasterStartRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterStartRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterStartRsp_descriptor_;
}

const Proto_MonitorTMasterStartRsp& Proto_MonitorTMasterStartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterStartRsp* Proto_MonitorTMasterStartRsp::default_instance_ = NULL;

Proto_MonitorTMasterStartRsp* Proto_MonitorTMasterStartRsp::New() const {
  return new Proto_MonitorTMasterStartRsp;
}

void Proto_MonitorTMasterStartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterStartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterStartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterStartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterStartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterStartRsp::MergeFrom(const Proto_MonitorTMasterStartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterStartRsp::CopyFrom(const Proto_MonitorTMasterStartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterStartRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterStartRsp::Swap(Proto_MonitorTMasterStartRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterStartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterStartRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterStartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterStopRsp::kResultFieldNumber;
const int Proto_MonitorTMasterStopRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterStopRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterStopRsp::Proto_MonitorTMasterStopRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterStopRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterStopRsp::Proto_MonitorTMasterStopRsp(const Proto_MonitorTMasterStopRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterStopRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterStopRsp::~Proto_MonitorTMasterStopRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterStopRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterStopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStopRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterStopRsp_descriptor_;
}

const Proto_MonitorTMasterStopRsp& Proto_MonitorTMasterStopRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterStopRsp* Proto_MonitorTMasterStopRsp::default_instance_ = NULL;

Proto_MonitorTMasterStopRsp* Proto_MonitorTMasterStopRsp::New() const {
  return new Proto_MonitorTMasterStopRsp;
}

void Proto_MonitorTMasterStopRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterStopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterStopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterStopRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterStopRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterStopRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterStopRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterStopRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterStopRsp::MergeFrom(const Proto_MonitorTMasterStopRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterStopRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterStopRsp::CopyFrom(const Proto_MonitorTMasterStopRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterStopRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterStopRsp::Swap(Proto_MonitorTMasterStopRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterStopRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterStopRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterStopRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSQueryUserReq::kUserIdFieldNumber;
const int Proto_LTSQueryUserReq::kQueryUserIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTSQueryUserReq::Proto_LTSQueryUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSQueryUserReq::InitAsDefaultInstance() {
}

Proto_LTSQueryUserReq::Proto_LTSQueryUserReq(const Proto_LTSQueryUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSQueryUserReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSQueryUserReq::~Proto_LTSQueryUserReq() {
  SharedDtor();
}

void Proto_LTSQueryUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTSQueryUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSQueryUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSQueryUserReq_descriptor_;
}

const Proto_LTSQueryUserReq& Proto_LTSQueryUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_LTSQueryUserReq* Proto_LTSQueryUserReq::default_instance_ = NULL;

Proto_LTSQueryUserReq* Proto_LTSQueryUserReq::New() const {
  return new Proto_LTSQueryUserReq;
}

void Proto_LTSQueryUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  query_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSQueryUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_query_user_id;
        break;
      }

      // repeated uint64 query_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_query_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_query_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_query_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSQueryUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated uint64 query_user_id = 2;
  for (int i = 0; i < this->query_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->query_user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSQueryUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated uint64 query_user_id = 2;
  for (int i = 0; i < this->query_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->query_user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSQueryUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated uint64 query_user_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->query_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->query_user_id(i));
    }
    total_size += 1 * this->query_user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSQueryUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSQueryUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSQueryUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSQueryUserReq::MergeFrom(const Proto_LTSQueryUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_user_id_.MergeFrom(from.query_user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSQueryUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSQueryUserReq::CopyFrom(const Proto_LTSQueryUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSQueryUserReq::IsInitialized() const {

  return true;
}

void Proto_LTSQueryUserReq::Swap(Proto_LTSQueryUserReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    query_user_id_.Swap(&other->query_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSQueryUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSQueryUserReq_descriptor_;
  metadata.reflection = Proto_LTSQueryUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLQueryUserRsp::kUserIdFieldNumber;
const int Proto_STLQueryUserRsp::kResultFieldNumber;
const int Proto_STLQueryUserRsp::kQueryUserListFieldNumber;
#endif  // !_MSC_VER

Proto_STLQueryUserRsp::Proto_STLQueryUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLQueryUserRsp::InitAsDefaultInstance() {
}

Proto_STLQueryUserRsp::Proto_STLQueryUserRsp(const Proto_STLQueryUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLQueryUserRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLQueryUserRsp::~Proto_STLQueryUserRsp() {
  SharedDtor();
}

void Proto_STLQueryUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STLQueryUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLQueryUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLQueryUserRsp_descriptor_;
}

const Proto_STLQueryUserRsp& Proto_STLQueryUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_STLQueryUserRsp* Proto_STLQueryUserRsp::default_instance_ = NULL;

Proto_STLQueryUserRsp* Proto_STLQueryUserRsp::New() const {
  return new Proto_STLQueryUserRsp;
}

void Proto_STLQueryUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
  }
  query_user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLQueryUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_query_user_list;
        break;
      }

      // repeated .proto_ff.UserSimpleData query_user_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_query_user_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLQueryUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .proto_ff.UserSimpleData query_user_list = 3;
  for (int i = 0; i < this->query_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->query_user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLQueryUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .proto_ff.UserSimpleData query_user_list = 3;
  for (int i = 0; i < this->query_user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->query_user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLQueryUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_ff.UserSimpleData query_user_list = 3;
  total_size += 1 * this->query_user_list_size();
  for (int i = 0; i < this->query_user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLQueryUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLQueryUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLQueryUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLQueryUserRsp::MergeFrom(const Proto_STLQueryUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_user_list_.MergeFrom(from.query_user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLQueryUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLQueryUserRsp::CopyFrom(const Proto_STLQueryUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLQueryUserRsp::IsInitialized() const {

  return true;
}

void Proto_STLQueryUserRsp::Swap(Proto_STLQueryUserRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_, other->result_);
    query_user_list_.Swap(&other->query_user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLQueryUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLQueryUserRsp_descriptor_;
  metadata.reflection = Proto_STLQueryUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSEventLogNotify::kUserIdFieldNumber;
const int SSEventLogNotify::kEventlogIdFieldNumber;
#endif  // !_MSC_VER

SSEventLogNotify::SSEventLogNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSEventLogNotify::InitAsDefaultInstance() {
}

SSEventLogNotify::SSEventLogNotify(const SSEventLogNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSEventLogNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  eventlog_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSEventLogNotify::~SSEventLogNotify() {
  SharedDtor();
}

void SSEventLogNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSEventLogNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSEventLogNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSEventLogNotify_descriptor_;
}

const SSEventLogNotify& SSEventLogNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

SSEventLogNotify* SSEventLogNotify::default_instance_ = NULL;

SSEventLogNotify* SSEventLogNotify::New() const {
  return new SSEventLogNotify;
}

void SSEventLogNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    eventlog_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSEventLogNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eventlog_id;
        break;
      }

      // optional uint64 eventlog_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventlog_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eventlog_id_)));
          set_has_eventlog_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSEventLogNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 eventlog_id = 2;
  if (has_eventlog_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->eventlog_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSEventLogNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 eventlog_id = 2;
  if (has_eventlog_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->eventlog_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSEventLogNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 eventlog_id = 2;
    if (has_eventlog_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eventlog_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSEventLogNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSEventLogNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSEventLogNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSEventLogNotify::MergeFrom(const SSEventLogNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_eventlog_id()) {
      set_eventlog_id(from.eventlog_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSEventLogNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSEventLogNotify::CopyFrom(const SSEventLogNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSEventLogNotify::IsInitialized() const {

  return true;
}

void SSEventLogNotify::Swap(SSEventLogNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(eventlog_id_, other->eventlog_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSEventLogNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSEventLogNotify_descriptor_;
  metadata.reflection = SSEventLogNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int emailSender::kEmailFieldNumber;
const int emailSender::kTitleFieldNumber;
const int emailSender::kMsgFieldNumber;
#endif  // !_MSC_VER

emailSender::emailSender()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emailSender::InitAsDefaultInstance() {
}

emailSender::emailSender(const emailSender& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emailSender::SharedCtor() {
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emailSender::~emailSender() {
  SharedDtor();
}

void emailSender::SharedDtor() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void emailSender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emailSender::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emailSender_descriptor_;
}

const emailSender& emailSender::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

emailSender* emailSender::default_instance_ = NULL;

emailSender* emailSender::New() const {
  return new emailSender;
}

void emailSender::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emailSender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void emailSender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emailSender::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emailSender::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emailSender::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emailSender* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emailSender*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emailSender::MergeFrom(const emailSender& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emailSender::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emailSender::CopyFrom(const emailSender& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emailSender::IsInitialized() const {

  return true;
}

void emailSender::Swap(emailSender* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(title_, other->title_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emailSender::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emailSender_descriptor_;
  metadata.reflection = emailSender_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Proto_STStoreCheckReq::Proto_STStoreCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STStoreCheckReq::InitAsDefaultInstance() {
}

Proto_STStoreCheckReq::Proto_STStoreCheckReq(const Proto_STStoreCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STStoreCheckReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STStoreCheckReq::~Proto_STStoreCheckReq() {
  SharedDtor();
}

void Proto_STStoreCheckReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STStoreCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STStoreCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STStoreCheckReq_descriptor_;
}

const Proto_STStoreCheckReq& Proto_STStoreCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_STStoreCheckReq* Proto_STStoreCheckReq::default_instance_ = NULL;

Proto_STStoreCheckReq* Proto_STStoreCheckReq::New() const {
  return new Proto_STStoreCheckReq;
}

void Proto_STStoreCheckReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STStoreCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Proto_STStoreCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STStoreCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STStoreCheckReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STStoreCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STStoreCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STStoreCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STStoreCheckReq::MergeFrom(const Proto_STStoreCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STStoreCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STStoreCheckReq::CopyFrom(const Proto_STStoreCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STStoreCheckReq::IsInitialized() const {

  return true;
}

void Proto_STStoreCheckReq::Swap(Proto_STStoreCheckReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STStoreCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STStoreCheckReq_descriptor_;
  metadata.reflection = Proto_STStoreCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Proto_StoreTSCheckRsp::Proto_StoreTSCheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_StoreTSCheckRsp::InitAsDefaultInstance() {
}

Proto_StoreTSCheckRsp::Proto_StoreTSCheckRsp(const Proto_StoreTSCheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_StoreTSCheckRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_StoreTSCheckRsp::~Proto_StoreTSCheckRsp() {
  SharedDtor();
}

void Proto_StoreTSCheckRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_StoreTSCheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_StoreTSCheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_StoreTSCheckRsp_descriptor_;
}

const Proto_StoreTSCheckRsp& Proto_StoreTSCheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_StoreTSCheckRsp* Proto_StoreTSCheckRsp::default_instance_ = NULL;

Proto_StoreTSCheckRsp* Proto_StoreTSCheckRsp::New() const {
  return new Proto_StoreTSCheckRsp;
}

void Proto_StoreTSCheckRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_StoreTSCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Proto_StoreTSCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_StoreTSCheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_StoreTSCheckRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_StoreTSCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_StoreTSCheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_StoreTSCheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_StoreTSCheckRsp::MergeFrom(const Proto_StoreTSCheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_StoreTSCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_StoreTSCheckRsp::CopyFrom(const Proto_StoreTSCheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_StoreTSCheckRsp::IsInitialized() const {

  return true;
}

void Proto_StoreTSCheckRsp::Swap(Proto_StoreTSCheckRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_StoreTSCheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_StoreTSCheckRsp_descriptor_;
  metadata.reflection = Proto_StoreTSCheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_NotifyChangeAgent::kUserIdFieldNumber;
const int Proto_NotifyChangeAgent::kAgentIdFieldNumber;
#endif  // !_MSC_VER

Proto_NotifyChangeAgent::Proto_NotifyChangeAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_NotifyChangeAgent::InitAsDefaultInstance() {
}

Proto_NotifyChangeAgent::Proto_NotifyChangeAgent(const Proto_NotifyChangeAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_NotifyChangeAgent::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  agent_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_NotifyChangeAgent::~Proto_NotifyChangeAgent() {
  SharedDtor();
}

void Proto_NotifyChangeAgent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_NotifyChangeAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_NotifyChangeAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_NotifyChangeAgent_descriptor_;
}

const Proto_NotifyChangeAgent& Proto_NotifyChangeAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_NotifyChangeAgent* Proto_NotifyChangeAgent::default_instance_ = NULL;

Proto_NotifyChangeAgent* Proto_NotifyChangeAgent::New() const {
  return new Proto_NotifyChangeAgent;
}

void Proto_NotifyChangeAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    agent_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_NotifyChangeAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agent_id;
        break;
      }

      // optional uint64 agent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_NotifyChangeAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 agent_id = 2;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->agent_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_NotifyChangeAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 agent_id = 2;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->agent_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_NotifyChangeAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 agent_id = 2;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agent_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_NotifyChangeAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_NotifyChangeAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_NotifyChangeAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_NotifyChangeAgent::MergeFrom(const Proto_NotifyChangeAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_NotifyChangeAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_NotifyChangeAgent::CopyFrom(const Proto_NotifyChangeAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_NotifyChangeAgent::IsInitialized() const {

  return true;
}

void Proto_NotifyChangeAgent::Swap(Proto_NotifyChangeAgent* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_NotifyChangeAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_NotifyChangeAgent_descriptor_;
  metadata.reflection = Proto_NotifyChangeAgent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_PlayerJettonChangeStatReq::kPlayerIdFieldNumber;
const int Proto_PlayerJettonChangeStatReq::kAccountTypeFieldNumber;
const int Proto_PlayerJettonChangeStatReq::kOptTypeFieldNumber;
const int Proto_PlayerJettonChangeStatReq::kOptReasonFieldNumber;
const int Proto_PlayerJettonChangeStatReq::kMoneyChangeFieldNumber;
const int Proto_PlayerJettonChangeStatReq::kIsFirstRechargeFieldNumber;
#endif  // !_MSC_VER

Proto_PlayerJettonChangeStatReq::Proto_PlayerJettonChangeStatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_PlayerJettonChangeStatReq::InitAsDefaultInstance() {
}

Proto_PlayerJettonChangeStatReq::Proto_PlayerJettonChangeStatReq(const Proto_PlayerJettonChangeStatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_PlayerJettonChangeStatReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  account_type_ = 0u;
  opt_type_ = 0u;
  opt_reason_ = 0u;
  money_change_ = GOOGLE_LONGLONG(0);
  is_first_recharge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_PlayerJettonChangeStatReq::~Proto_PlayerJettonChangeStatReq() {
  SharedDtor();
}

void Proto_PlayerJettonChangeStatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_PlayerJettonChangeStatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_PlayerJettonChangeStatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_PlayerJettonChangeStatReq_descriptor_;
}

const Proto_PlayerJettonChangeStatReq& Proto_PlayerJettonChangeStatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  return *default_instance_;
}

Proto_PlayerJettonChangeStatReq* Proto_PlayerJettonChangeStatReq::default_instance_ = NULL;

Proto_PlayerJettonChangeStatReq* Proto_PlayerJettonChangeStatReq::New() const {
  return new Proto_PlayerJettonChangeStatReq;
}

void Proto_PlayerJettonChangeStatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    account_type_ = 0u;
    opt_type_ = 0u;
    opt_reason_ = 0u;
    money_change_ = GOOGLE_LONGLONG(0);
    is_first_recharge_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_PlayerJettonChangeStatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_type;
        break;
      }

      // optional uint32 account_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt_type;
        break;
      }

      // optional uint32 opt_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opt_reason;
        break;
      }

      // optional uint32 opt_reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_reason_)));
          set_has_opt_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money_change;
        break;
      }

      // optional int64 money_change = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_change_)));
          set_has_money_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_first_recharge;
        break;
      }

      // optional bool is_first_recharge = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_first_recharge_)));
          set_has_is_first_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_PlayerJettonChangeStatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 account_type = 2;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_type(), output);
  }

  // optional uint32 opt_type = 3;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opt_type(), output);
  }

  // optional uint32 opt_reason = 4;
  if (has_opt_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opt_reason(), output);
  }

  // optional int64 money_change = 5;
  if (has_money_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money_change(), output);
  }

  // optional bool is_first_recharge = 6;
  if (has_is_first_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_first_recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_PlayerJettonChangeStatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 account_type = 2;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_type(), target);
  }

  // optional uint32 opt_type = 3;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opt_type(), target);
  }

  // optional uint32 opt_reason = 4;
  if (has_opt_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opt_reason(), target);
  }

  // optional int64 money_change = 5;
  if (has_money_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money_change(), target);
  }

  // optional bool is_first_recharge = 6;
  if (has_is_first_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_first_recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_PlayerJettonChangeStatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 account_type = 2;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // optional uint32 opt_type = 3;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_type());
    }

    // optional uint32 opt_reason = 4;
    if (has_opt_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_reason());
    }

    // optional int64 money_change = 5;
    if (has_money_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money_change());
    }

    // optional bool is_first_recharge = 6;
    if (has_is_first_recharge()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_PlayerJettonChangeStatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_PlayerJettonChangeStatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_PlayerJettonChangeStatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_PlayerJettonChangeStatReq::MergeFrom(const Proto_PlayerJettonChangeStatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_opt_reason()) {
      set_opt_reason(from.opt_reason());
    }
    if (from.has_money_change()) {
      set_money_change(from.money_change());
    }
    if (from.has_is_first_recharge()) {
      set_is_first_recharge(from.is_first_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_PlayerJettonChangeStatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_PlayerJettonChangeStatReq::CopyFrom(const Proto_PlayerJettonChangeStatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_PlayerJettonChangeStatReq::IsInitialized() const {

  return true;
}

void Proto_PlayerJettonChangeStatReq::Swap(Proto_PlayerJettonChangeStatReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(account_type_, other->account_type_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(opt_reason_, other->opt_reason_);
    std::swap(money_change_, other->money_change_);
    std::swap(is_first_recharge_, other->is_first_recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_PlayerJettonChangeStatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_PlayerJettonChangeStatReq_descriptor_;
  metadata.reflection = Proto_PlayerJettonChangeStatReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
