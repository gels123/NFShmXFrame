// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_web.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_web.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_Web_CommonRspNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_CommonRspNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_KillServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_KillServer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5fweb_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_web.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_Web_CommonRspNotify_descriptor_ = file->message_type(0);
  static const int Proto_Web_CommonRspNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, msg_),
  };
  Proto_Web_CommonRspNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_CommonRspNotify_descriptor_,
      Proto_Web_CommonRspNotify::default_instance_,
      Proto_Web_CommonRspNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_CommonRspNotify));
  Proto_Web_KillServer_descriptor_ = file->message_type(1);
  static const int Proto_Web_KillServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, bus_name_),
  };
  Proto_Web_KillServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_KillServer_descriptor_,
      Proto_Web_KillServer::default_instance_,
      Proto_Web_KillServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_KillServer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5fweb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_CommonRspNotify_descriptor_, &Proto_Web_CommonRspNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_KillServer_descriptor_, &Proto_Web_KillServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5fweb_2eproto() {
  delete Proto_Web_CommonRspNotify::default_instance_;
  delete Proto_Web_CommonRspNotify_reflection_;
  delete Proto_Web_KillServer::default_instance_;
  delete Proto_Web_KillServer_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5fweb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto_svr_web.proto\022\010proto_ff\032\025yd_fiel"
    "doptions.proto\032\022proto_common.proto\"8\n\031Pr"
    "oto_Web_CommonRspNotify\022\016\n\006result\030\001 \001(\005\022"
    "\013\n\003msg\030\002 \001(\t\"p\n\024Proto_Web_KillServer\022\022\n\n"
    "request_id\030\001 \001(\004\022\020\n\010contract\030\002 \001(\t\022\024\n\014ma"
    "chine_addr\030\003 \001(\t\022\n\n\002ip\030\004 \001(\t\022\020\n\010bus_name"
    "\030\005 \001(\t", 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_web.proto", &protobuf_RegisterTypes);
  Proto_Web_CommonRspNotify::default_instance_ = new Proto_Web_CommonRspNotify();
  Proto_Web_KillServer::default_instance_ = new Proto_Web_KillServer();
  Proto_Web_CommonRspNotify::default_instance_->InitAsDefaultInstance();
  Proto_Web_KillServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5fweb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5fweb_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5fweb_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5fweb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_CommonRspNotify::kResultFieldNumber;
const int Proto_Web_CommonRspNotify::kMsgFieldNumber;
#endif  // !_MSC_VER

Proto_Web_CommonRspNotify::Proto_Web_CommonRspNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_CommonRspNotify::InitAsDefaultInstance() {
}

Proto_Web_CommonRspNotify::Proto_Web_CommonRspNotify(const Proto_Web_CommonRspNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_CommonRspNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_CommonRspNotify::~Proto_Web_CommonRspNotify() {
  SharedDtor();
}

void Proto_Web_CommonRspNotify::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_CommonRspNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_CommonRspNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_CommonRspNotify_descriptor_;
}

const Proto_Web_CommonRspNotify& Proto_Web_CommonRspNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_CommonRspNotify* Proto_Web_CommonRspNotify::default_instance_ = NULL;

Proto_Web_CommonRspNotify* Proto_Web_CommonRspNotify::New() const {
  return new Proto_Web_CommonRspNotify;
}

void Proto_Web_CommonRspNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_CommonRspNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_CommonRspNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_CommonRspNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_CommonRspNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_CommonRspNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_CommonRspNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_CommonRspNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_CommonRspNotify::MergeFrom(const Proto_Web_CommonRspNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_CommonRspNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_CommonRspNotify::CopyFrom(const Proto_Web_CommonRspNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_CommonRspNotify::IsInitialized() const {

  return true;
}

void Proto_Web_CommonRspNotify::Swap(Proto_Web_CommonRspNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_CommonRspNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_CommonRspNotify_descriptor_;
  metadata.reflection = Proto_Web_CommonRspNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_KillServer::kRequestIdFieldNumber;
const int Proto_Web_KillServer::kContractFieldNumber;
const int Proto_Web_KillServer::kMachineAddrFieldNumber;
const int Proto_Web_KillServer::kIpFieldNumber;
const int Proto_Web_KillServer::kBusNameFieldNumber;
#endif  // !_MSC_VER

Proto_Web_KillServer::Proto_Web_KillServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_KillServer::InitAsDefaultInstance() {
}

Proto_Web_KillServer::Proto_Web_KillServer(const Proto_Web_KillServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_KillServer::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_KillServer::~Proto_Web_KillServer() {
  SharedDtor();
}

void Proto_Web_KillServer::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_KillServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_KillServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_KillServer_descriptor_;
}

const Proto_Web_KillServer& Proto_Web_KillServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_KillServer* Proto_Web_KillServer::default_instance_ = NULL;

Proto_Web_KillServer* Proto_Web_KillServer::New() const {
  return new Proto_Web_KillServer;
}

void Proto_Web_KillServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_KillServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // optional string contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_KillServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contract(), output);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_addr(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bus_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_KillServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_addr(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bus_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_KillServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional string contract = 2;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional string machine_addr = 3;
    if (has_machine_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string bus_name = 5;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_KillServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_KillServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_KillServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_KillServer::MergeFrom(const Proto_Web_KillServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_KillServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_KillServer::CopyFrom(const Proto_Web_KillServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_KillServer::IsInitialized() const {

  return true;
}

void Proto_Web_KillServer::Swap(Proto_Web_KillServer* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(contract_, other->contract_);
    std::swap(machine_addr_, other->machine_addr_);
    std::swap(ip_, other->ip_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_KillServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_KillServer_descriptor_;
  metadata.reflection = Proto_Web_KillServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
