// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GameServerRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbServerMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbServerMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbContractMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbContractMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbAccountTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbAccountTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSpecialMailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSpecialMailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbUserMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbUserMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbUserMailDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbUserMailDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMailDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMailDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbGiveBankJetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbGiveBankJetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMiscData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMiscData_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbUserDetailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbUserDetailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSimpleMiscData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSimpleMiscData_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbUserSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbUserSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerWealthData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerWealthData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerDetailData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerDetailData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerAchievementData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerAchievementData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbUserMiscInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbUserMiscInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankCommonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankCommonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankCommonScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankCommonScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankCommonBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankCommonBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbRankCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbRankCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotCommonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotCommonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotCommonBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotCommonBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbGameRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbGameRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventLogData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventLogData_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbEventLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbEventLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginCommonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginCommonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMoneyDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMoneyDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogGameRecordDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogGameRecordDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogGameDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogGameDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbLogGameDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbLogGameDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbGameUserManagerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbGameUserManagerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbMachineManagerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbMachineManagerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_tbGameUserManagerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_tbGameUserManagerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbGmCtrlGiveCtrlData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbGmCtrlGiveCtrlData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_tbGmCtrlGiveCtrlData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_tbGmCtrlGiveCtrlData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogVipRechargeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogVipRechargeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogZhuangRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogZhuangRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRechargeOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRechargeOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogGiveMoneyRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogGiveMoneyRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbLogSystemDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbLogSystemDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* tbRedeemCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tbRedeemCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRedeemCodeRechargeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRedeemCodeRechargeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerPourInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerPourInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTablePourInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTablePourInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_AccountType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_SexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_PlatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_NetworkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_PlayerCreateState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_AgentLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enSnsMailStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumGiveBankJettonStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enConstType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eAccountMoneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eChangeMoneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eOperationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eDrawReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRechargeResonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGameBalanceOperationWinReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGameBalanceOperationLostReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGiveMoneyReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMoneyExchangeReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMoneyTransferReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enRankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EventLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WhiteBlackState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WhiteBlackRosterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataControlType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataJackpotType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fcommon_2eproto() {
  protobuf_AddDesc_proto_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_common.proto");
  GOOGLE_CHECK(file != NULL);
  GameServerRoomInfo_descriptor_ = file->message_type(0);
  static const int GameServerRoomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, enter_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, enter_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, online_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, status_),
  };
  GameServerRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerRoomInfo_descriptor_,
      GameServerRoomInfo::default_instance_,
      GameServerRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerRoomInfo));
  tbServerMgr_descriptor_ = file->message_type(1);
  static const int tbServerMgr_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, server_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, cur_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, create_time_),
  };
  tbServerMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbServerMgr_descriptor_,
      tbServerMgr::default_instance_,
      tbServerMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbServerMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbServerMgr));
  tbContractMgr_descriptor_ = file->message_type(2);
  static const int tbContractMgr_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbContractMgr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbContractMgr, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbContractMgr, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbContractMgr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbContractMgr, server_desc_),
  };
  tbContractMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbContractMgr_descriptor_,
      tbContractMgr::default_instance_,
      tbContractMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbContractMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbContractMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbContractMgr));
  tbAccountTable_descriptor_ = file->message_type(3);
  static const int tbAccountTable_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, real_player_id_),
  };
  tbAccountTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbAccountTable_descriptor_,
      tbAccountTable::default_instance_,
      tbAccountTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbAccountTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbAccountTable));
  ItemData_descriptor_ = file->message_type(4);
  static const int ItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, item_num_),
  };
  ItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemData_descriptor_,
      ItemData::default_instance_,
      ItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemData));
  SingleMailInfo_descriptor_ = file->message_type(5);
  static const int SingleMailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMailInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMailInfo, status_),
  };
  SingleMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleMailInfo_descriptor_,
      SingleMailInfo::default_instance_,
      SingleMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleMailInfo));
  UserSpecialMailData_descriptor_ = file->message_type(6);
  static const int UserSpecialMailData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSpecialMailData, static_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSpecialMailData, time_),
  };
  UserSpecialMailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSpecialMailData_descriptor_,
      UserSpecialMailData::default_instance_,
      UserSpecialMailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSpecialMailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSpecialMailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSpecialMailData));
  UserMailInfo_descriptor_ = file->message_type(7);
  static const int UserMailInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailInfo, simple_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailInfo, receive_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailInfo, del_role_mail_),
  };
  UserMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMailInfo_descriptor_,
      UserMailInfo::default_instance_,
      UserMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMailInfo));
  tbUserMailInfo_descriptor_ = file->message_type(8);
  static const int tbUserMailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailInfo, base_info_),
  };
  tbUserMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbUserMailInfo_descriptor_,
      tbUserMailInfo::default_instance_,
      tbUserMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbUserMailInfo));
  tbUserMailDetail_descriptor_ = file->message_type(9);
  static const int tbUserMailDetail_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, static_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, mail_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, add_gold_),
  };
  tbUserMailDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbUserMailDetail_descriptor_,
      tbUserMailDetail::default_instance_,
      tbUserMailDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMailDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbUserMailDetail));
  UserMailDetailInfo_descriptor_ = file->message_type(10);
  static const int UserMailDetailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailDetailInfo, simple_mail_),
  };
  UserMailDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMailDetailInfo_descriptor_,
      UserMailDetailInfo::default_instance_,
      UserMailDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMailDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMailDetailInfo));
  tbGiveBankJetton_descriptor_ = file->message_type(11);
  static const int tbGiveBankJetton_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, user_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, give_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, give_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, give_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, give_user_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, create_time_),
  };
  tbGiveBankJetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbGiveBankJetton_descriptor_,
      tbGiveBankJetton::default_instance_,
      tbGiveBankJetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGiveBankJetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbGiveBankJetton));
  UserMiscData_descriptor_ = file->message_type(12);
  static const int UserMiscData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, tmp_phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, tmp_auth_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, auth_code_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, tmp_code_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, tmp_code_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, tmp_redeemcard_recharge_count_),
  };
  UserMiscData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMiscData_descriptor_,
      UserMiscData::default_instance_,
      UserMiscData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMiscData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMiscData));
  tbUserDetailData_descriptor_ = file->message_type(13);
  static const int tbUserDetailData_offsets_[60] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, regdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, bank_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, aread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, platform_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, phone_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, first_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, referrer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, misc_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, all_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, all_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, all_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, all_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, today_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, today_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, today_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, today_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, week_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, week_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, week_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, week_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, month_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, month_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, month_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, month_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, is_ban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, no_transfer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, reg_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, reg_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, show_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, all_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, today_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, week_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, month_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, all_vip_zhuanchu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, today_vip_zhuanchu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, week_vip_zhuanchu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, month_vip_zhuanchu_),
  };
  tbUserDetailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbUserDetailData_descriptor_,
      tbUserDetailData::default_instance_,
      tbUserDetailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserDetailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbUserDetailData));
  UserSimpleMiscData_descriptor_ = file->message_type(14);
  static const int UserSimpleMiscData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMiscData, last_valid_player_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMiscData, last_pay_player_time_),
  };
  UserSimpleMiscData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSimpleMiscData_descriptor_,
      UserSimpleMiscData::default_instance_,
      UserSimpleMiscData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMiscData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleMiscData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSimpleMiscData));
  tbUserSimpleData_descriptor_ = file->message_type(15);
  static const int tbUserSimpleData_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, agent_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_team_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_team_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_team_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, ach_team_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, team_user_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, new_user_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, activity_user_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, getrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, tax_getrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, takemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, tax_takemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, all_takemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, all_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, show_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, misc_data_),
  };
  tbUserSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbUserSimpleData_descriptor_,
      tbUserSimpleData::default_instance_,
      tbUserSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbUserSimpleData));
  GamePlayerWealthData_descriptor_ = file->message_type(16);
  static const int GamePlayerWealthData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, total_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, this_game_lost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, this_game_win_),
  };
  GamePlayerWealthData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerWealthData_descriptor_,
      GamePlayerWealthData::default_instance_,
      GamePlayerWealthData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerWealthData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerWealthData));
  GamePlayerDetailData_descriptor_ = file->message_type(17);
  static const int GamePlayerDetailData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, isrobot_),
  };
  GamePlayerDetailData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerDetailData_descriptor_,
      GamePlayerDetailData::default_instance_,
      GamePlayerDetailData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerDetailData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerDetailData));
  GamePlayerAchievementData_descriptor_ = file->message_type(18);
  static const int GamePlayerAchievementData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, cur_ach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, cur_fee_),
  };
  GamePlayerAchievementData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerAchievementData_descriptor_,
      GamePlayerAchievementData::default_instance_,
      GamePlayerAchievementData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerAchievementData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerAchievementData));
  UserSimpleData_descriptor_ = file->message_type(19);
  static const int UserSimpleData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, show_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, vip_level_),
  };
  UserSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSimpleData_descriptor_,
      UserSimpleData::default_instance_,
      UserSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSimpleData));
  UserBankInfo_descriptor_ = file->message_type(20);
  static const int UserBankInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBankInfo, record_id_),
  };
  UserBankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBankInfo_descriptor_,
      UserBankInfo::default_instance_,
      UserBankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBankInfo));
  tbUserMiscInfo_descriptor_ = file->message_type(21);
  static const int tbUserMiscInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMiscInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMiscInfo, bank_info_),
  };
  tbUserMiscInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbUserMiscInfo_descriptor_,
      tbUserMiscInfo::default_instance_,
      tbUserMiscInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMiscInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbUserMiscInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbUserMiscInfo));
  RankCommonInfo_descriptor_ = file->message_type(22);
  static const int RankCommonInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonInfo, rank_),
  };
  RankCommonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankCommonInfo_descriptor_,
      RankCommonInfo::default_instance_,
      RankCommonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankCommonInfo));
  RankCommonScore_descriptor_ = file->message_type(23);
  static const int RankCommonScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonScore, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonScore, score_),
  };
  RankCommonScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankCommonScore_descriptor_,
      RankCommonScore::default_instance_,
      RankCommonScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankCommonScore));
  RankCommonBody_descriptor_ = file->message_type(24);
  static const int RankCommonBody_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonBody, score_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonBody, info_list_),
  };
  RankCommonBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankCommonBody_descriptor_,
      RankCommonBody::default_instance_,
      RankCommonBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCommonBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankCommonBody));
  tbRankCommon_descriptor_ = file->message_type(25);
  static const int tbRankCommon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRankCommon, id4db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRankCommon, body_),
  };
  tbRankCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbRankCommon_descriptor_,
      tbRankCommon::default_instance_,
      tbRankCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRankCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRankCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbRankCommon));
  RobotCommonData_descriptor_ = file->message_type(26);
  static const int RobotCommonData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, is_use_),
  };
  RobotCommonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotCommonData_descriptor_,
      RobotCommonData::default_instance_,
      RobotCommonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotCommonData));
  RobotCommonBody_descriptor_ = file->message_type(27);
  static const int RobotCommonBody_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonBody, robot_data_),
  };
  RobotCommonBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotCommonBody_descriptor_,
      RobotCommonBody::default_instance_,
      RobotCommonBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotCommonBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotCommonBody));
  tbGameRobot_descriptor_ = file->message_type(28);
  static const int tbGameRobot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameRobot, id4db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameRobot, body_),
  };
  tbGameRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbGameRobot_descriptor_,
      tbGameRobot::default_instance_,
      tbGameRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbGameRobot));
  EventLogData_descriptor_ = file->message_type(29);
  static const int EventLogData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogData, event_type_),
  };
  EventLogData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventLogData_descriptor_,
      EventLogData::default_instance_,
      EventLogData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLogData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventLogData));
  tbEventLog_descriptor_ = file->message_type(30);
  static const int tbEventLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbEventLog, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbEventLog, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbEventLog, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbEventLog, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbEventLog, data_),
  };
  tbEventLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbEventLog_descriptor_,
      tbEventLog::default_instance_,
      tbEventLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbEventLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbEventLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbEventLog));
  LoginCommonData_descriptor_ = file->message_type(31);
  static const int LoginCommonData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, aread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, referral_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, platform_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, phone_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, device_id_),
  };
  LoginCommonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginCommonData_descriptor_,
      LoginCommonData::default_instance_,
      LoginCommonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginCommonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginCommonData));
  LogMoneyDetail_descriptor_ = file->message_type(32);
  static const int LogMoneyDetail_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, opt_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, all_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, change_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, record_id_),
  };
  LogMoneyDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogMoneyDetail_descriptor_,
      LogMoneyDetail::default_instance_,
      LogMoneyDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMoneyDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogMoneyDetail));
  LogGameRecordDetail_descriptor_ = file->message_type(33);
  static const int LogGameRecordDetail_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, pour_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, win_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, tax_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, win_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, lost_list_),
  };
  LogGameRecordDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogGameRecordDetail_descriptor_,
      LogGameRecordDetail::default_instance_,
      LogGameRecordDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameRecordDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogGameRecordDetail));
  LogGameDetail_descriptor_ = file->message_type(34);
  static const int LogGameDetail_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, bet_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, result_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, game_time_),
  };
  LogGameDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogGameDetail_descriptor_,
      LogGameDetail::default_instance_,
      LogGameDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGameDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogGameDetail));
  tbLogGameDay_descriptor_ = file->message_type(35);
  static const int tbLogGameDay_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, date_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, all_pour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, pour_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, pour_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, pour_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, all_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, win_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, win_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, win_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, all_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, fee_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, fee_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, fee_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, stat_time_),
  };
  tbLogGameDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbLogGameDay_descriptor_,
      tbLogGameDay::default_instance_,
      tbLogGameDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogGameDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbLogGameDay));
  tbGameUserManagerData_descriptor_ = file->message_type(36);
  static const int tbGameUserManagerData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, create_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, roster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, opt_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, rate_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, control_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, max_win_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, cur_win_),
  };
  tbGameUserManagerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbGameUserManagerData_descriptor_,
      tbGameUserManagerData::default_instance_,
      tbGameUserManagerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGameUserManagerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbGameUserManagerData));
  tbMachineManagerData_descriptor_ = file->message_type(37);
  static const int tbMachineManagerData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, create_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, roster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, opt_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, rate_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, control_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, max_win_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, cur_win_),
  };
  tbMachineManagerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbMachineManagerData_descriptor_,
      tbMachineManagerData::default_instance_,
      tbMachineManagerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbMachineManagerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbMachineManagerData));
  Sheet_tbGameUserManagerData_descriptor_ = file->message_type(38);
  static const int Sheet_tbGameUserManagerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tbGameUserManagerData, tbgameusermanagerdata_list_),
  };
  Sheet_tbGameUserManagerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_tbGameUserManagerData_descriptor_,
      Sheet_tbGameUserManagerData::default_instance_,
      Sheet_tbGameUserManagerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tbGameUserManagerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tbGameUserManagerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_tbGameUserManagerData));
  tbGmCtrlGiveCtrlData_descriptor_ = file->message_type(39);
  static const int tbGmCtrlGiveCtrlData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, create_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, control_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, jackpot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, jackpot_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, jackpot_jetton_),
  };
  tbGmCtrlGiveCtrlData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbGmCtrlGiveCtrlData_descriptor_,
      tbGmCtrlGiveCtrlData::default_instance_,
      tbGmCtrlGiveCtrlData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbGmCtrlGiveCtrlData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbGmCtrlGiveCtrlData));
  Sheet_tbGmCtrlGiveCtrlData_descriptor_ = file->message_type(40);
  static const int Sheet_tbGmCtrlGiveCtrlData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tbGmCtrlGiveCtrlData, tbgmctrlgivectrldata_list_),
  };
  Sheet_tbGmCtrlGiveCtrlData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_tbGmCtrlGiveCtrlData_descriptor_,
      Sheet_tbGmCtrlGiveCtrlData::default_instance_,
      Sheet_tbGmCtrlGiveCtrlData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tbGmCtrlGiveCtrlData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_tbGmCtrlGiveCtrlData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_tbGmCtrlGiveCtrlData));
  LogVipRechargeRecord_descriptor_ = file->message_type(41);
  static const int LogVipRechargeRecord_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, recharge_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, recharge_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, status_),
  };
  LogVipRechargeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogVipRechargeRecord_descriptor_,
      LogVipRechargeRecord::default_instance_,
      LogVipRechargeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogVipRechargeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogVipRechargeRecord));
  LogZhuangRecord_descriptor_ = file->message_type(42);
  static const int LogZhuangRecord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, status_),
  };
  LogZhuangRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogZhuangRecord_descriptor_,
      LogZhuangRecord::default_instance_,
      LogZhuangRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogZhuangRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogZhuangRecord));
  LogRechargeOrder_descriptor_ = file->message_type(43);
  static const int LogRechargeOrder_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, pay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, pay_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, pay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, ch_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, state_),
  };
  LogRechargeOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRechargeOrder_descriptor_,
      LogRechargeOrder::default_instance_,
      LogRechargeOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRechargeOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRechargeOrder));
  LogGiveMoneyRecord_descriptor_ = file->message_type(44);
  static const int LogGiveMoneyRecord_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, status_),
  };
  LogGiveMoneyRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogGiveMoneyRecord_descriptor_,
      LogGiveMoneyRecord::default_instance_,
      LogGiveMoneyRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogGiveMoneyRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogGiveMoneyRecord));
  tbLogSystemDay_descriptor_ = file->message_type(45);
  static const int tbLogSystemDay_offsets_[74] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, date_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, active_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, login_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, valid_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, new_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pay_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pay_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pay_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, new_pay_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, new_pay_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, commission_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_pour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, jetton_init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, jetton_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, jetton_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, sys_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, player_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, trd_pay_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, vip_pay_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, zhuangzhang_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, activity_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, freeze_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, active_seven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, active_thirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pour_day_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pour_week_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pour_month_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, sys_win_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, sys_win_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, sys_win_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, fee_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, fee_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, fee_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, commision_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, commision_take_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, commision_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, commision_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, commision_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, max_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, win_cost_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, day_money_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pay_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pay_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, pay_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, draw_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, draw_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, draw_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, trd_pay_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, trd_pay_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, trd_pay_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, vip_pay_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, vip_pay_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, vip_pay_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, zhuangzhang_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, zhuangzhang_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, zhuangzhang_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, give_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, give_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, give_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, today_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, week_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, month_vip_zhuanru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, all_vip_zhuanchu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, today_vip_zhuanchu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, week_vip_zhuanchu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, month_vip_zhuanchu_),
  };
  tbLogSystemDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbLogSystemDay_descriptor_,
      tbLogSystemDay::default_instance_,
      tbLogSystemDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbLogSystemDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbLogSystemDay));
  tbRedeemCode_descriptor_ = file->message_type(46);
  static const int tbRedeemCode_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, code_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, use_time_),
  };
  tbRedeemCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tbRedeemCode_descriptor_,
      tbRedeemCode::default_instance_,
      tbRedeemCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tbRedeemCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tbRedeemCode));
  LogRedeemCodeRechargeRecord_descriptor_ = file->message_type(47);
  static const int LogRedeemCodeRechargeRecord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, bus_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, status_),
  };
  LogRedeemCodeRechargeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRedeemCodeRechargeRecord_descriptor_,
      LogRedeemCodeRechargeRecord::default_instance_,
      LogRedeemCodeRechargeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRedeemCodeRechargeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRedeemCodeRechargeRecord));
  GameRoomStat_descriptor_ = file->message_type(48);
  static const int GameRoomStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, cur_fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, cur_pour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, cur_win_),
  };
  GameRoomStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomStat_descriptor_,
      GameRoomStat::default_instance_,
      GameRoomStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomStat));
  GamePlayerPourInfo_descriptor_ = file->message_type(49);
  static const int GamePlayerPourInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerPourInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerPourInfo, pour_),
  };
  GamePlayerPourInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerPourInfo_descriptor_,
      GamePlayerPourInfo::default_instance_,
      GamePlayerPourInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerPourInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerPourInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerPourInfo));
  GameTablePourInfo_descriptor_ = file->message_type(50);
  static const int GameTablePourInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTablePourInfo, pour_info_),
  };
  GameTablePourInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTablePourInfo_descriptor_,
      GameTablePourInfo::default_instance_,
      GameTablePourInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTablePourInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTablePourInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTablePourInfo));
  Proto_AccountType_descriptor_ = file->enum_type(0);
  Proto_SexType_descriptor_ = file->enum_type(1);
  Proto_PlatType_descriptor_ = file->enum_type(2);
  Proto_NetworkType_descriptor_ = file->enum_type(3);
  Proto_PlayerCreateState_descriptor_ = file->enum_type(4);
  Proto_AgentLevel_descriptor_ = file->enum_type(5);
  enSnsMailStatus_descriptor_ = file->enum_type(6);
  EnumGiveBankJettonStatus_descriptor_ = file->enum_type(7);
  enConstType_descriptor_ = file->enum_type(8);
  eAccountMoneyType_descriptor_ = file->enum_type(9);
  eChangeMoneyType_descriptor_ = file->enum_type(10);
  eOperationType_descriptor_ = file->enum_type(11);
  eDrawReasonType_descriptor_ = file->enum_type(12);
  eRechargeResonType_descriptor_ = file->enum_type(13);
  eGameBalanceOperationWinReason_descriptor_ = file->enum_type(14);
  eGameBalanceOperationLostReason_descriptor_ = file->enum_type(15);
  eGiveMoneyReason_descriptor_ = file->enum_type(16);
  eMoneyExchangeReason_descriptor_ = file->enum_type(17);
  eMoneyTransferReason_descriptor_ = file->enum_type(18);
  enRankType_descriptor_ = file->enum_type(19);
  EventLogType_descriptor_ = file->enum_type(20);
  WhiteBlackState_descriptor_ = file->enum_type(21);
  WhiteBlackRosterType_descriptor_ = file->enum_type(22);
  GMCtrlGiveDataControlType_descriptor_ = file->enum_type(23);
  GMCtrlGiveDataState_descriptor_ = file->enum_type(24);
  GMCtrlGiveDataJackpotType_descriptor_ = file->enum_type(25);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerRoomInfo_descriptor_, &GameServerRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbServerMgr_descriptor_, &tbServerMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbContractMgr_descriptor_, &tbContractMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbAccountTable_descriptor_, &tbAccountTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemData_descriptor_, &ItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleMailInfo_descriptor_, &SingleMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSpecialMailData_descriptor_, &UserSpecialMailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMailInfo_descriptor_, &UserMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbUserMailInfo_descriptor_, &tbUserMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbUserMailDetail_descriptor_, &tbUserMailDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMailDetailInfo_descriptor_, &UserMailDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbGiveBankJetton_descriptor_, &tbGiveBankJetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMiscData_descriptor_, &UserMiscData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbUserDetailData_descriptor_, &tbUserDetailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSimpleMiscData_descriptor_, &UserSimpleMiscData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbUserSimpleData_descriptor_, &tbUserSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerWealthData_descriptor_, &GamePlayerWealthData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerDetailData_descriptor_, &GamePlayerDetailData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerAchievementData_descriptor_, &GamePlayerAchievementData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSimpleData_descriptor_, &UserSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBankInfo_descriptor_, &UserBankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbUserMiscInfo_descriptor_, &tbUserMiscInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankCommonInfo_descriptor_, &RankCommonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankCommonScore_descriptor_, &RankCommonScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankCommonBody_descriptor_, &RankCommonBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbRankCommon_descriptor_, &tbRankCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotCommonData_descriptor_, &RobotCommonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotCommonBody_descriptor_, &RobotCommonBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbGameRobot_descriptor_, &tbGameRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventLogData_descriptor_, &EventLogData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbEventLog_descriptor_, &tbEventLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginCommonData_descriptor_, &LoginCommonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogMoneyDetail_descriptor_, &LogMoneyDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogGameRecordDetail_descriptor_, &LogGameRecordDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogGameDetail_descriptor_, &LogGameDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbLogGameDay_descriptor_, &tbLogGameDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbGameUserManagerData_descriptor_, &tbGameUserManagerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbMachineManagerData_descriptor_, &tbMachineManagerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_tbGameUserManagerData_descriptor_, &Sheet_tbGameUserManagerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbGmCtrlGiveCtrlData_descriptor_, &tbGmCtrlGiveCtrlData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_tbGmCtrlGiveCtrlData_descriptor_, &Sheet_tbGmCtrlGiveCtrlData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogVipRechargeRecord_descriptor_, &LogVipRechargeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogZhuangRecord_descriptor_, &LogZhuangRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRechargeOrder_descriptor_, &LogRechargeOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogGiveMoneyRecord_descriptor_, &LogGiveMoneyRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbLogSystemDay_descriptor_, &tbLogSystemDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tbRedeemCode_descriptor_, &tbRedeemCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRedeemCodeRechargeRecord_descriptor_, &LogRedeemCodeRechargeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomStat_descriptor_, &GameRoomStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerPourInfo_descriptor_, &GamePlayerPourInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTablePourInfo_descriptor_, &GameTablePourInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fcommon_2eproto() {
  delete GameServerRoomInfo::default_instance_;
  delete GameServerRoomInfo_reflection_;
  delete tbServerMgr::default_instance_;
  delete tbServerMgr_reflection_;
  delete tbContractMgr::default_instance_;
  delete tbContractMgr_reflection_;
  delete tbAccountTable::default_instance_;
  delete tbAccountTable_reflection_;
  delete ItemData::default_instance_;
  delete ItemData_reflection_;
  delete SingleMailInfo::default_instance_;
  delete SingleMailInfo_reflection_;
  delete UserSpecialMailData::default_instance_;
  delete UserSpecialMailData_reflection_;
  delete UserMailInfo::default_instance_;
  delete UserMailInfo_reflection_;
  delete tbUserMailInfo::default_instance_;
  delete tbUserMailInfo_reflection_;
  delete tbUserMailDetail::default_instance_;
  delete tbUserMailDetail_reflection_;
  delete UserMailDetailInfo::default_instance_;
  delete UserMailDetailInfo_reflection_;
  delete tbGiveBankJetton::default_instance_;
  delete tbGiveBankJetton_reflection_;
  delete UserMiscData::default_instance_;
  delete UserMiscData_reflection_;
  delete tbUserDetailData::default_instance_;
  delete tbUserDetailData_reflection_;
  delete UserSimpleMiscData::default_instance_;
  delete UserSimpleMiscData_reflection_;
  delete tbUserSimpleData::default_instance_;
  delete tbUserSimpleData_reflection_;
  delete GamePlayerWealthData::default_instance_;
  delete GamePlayerWealthData_reflection_;
  delete GamePlayerDetailData::default_instance_;
  delete GamePlayerDetailData_reflection_;
  delete GamePlayerAchievementData::default_instance_;
  delete GamePlayerAchievementData_reflection_;
  delete UserSimpleData::default_instance_;
  delete UserSimpleData_reflection_;
  delete UserBankInfo::default_instance_;
  delete UserBankInfo_reflection_;
  delete tbUserMiscInfo::default_instance_;
  delete tbUserMiscInfo_reflection_;
  delete RankCommonInfo::default_instance_;
  delete RankCommonInfo_reflection_;
  delete RankCommonScore::default_instance_;
  delete RankCommonScore_reflection_;
  delete RankCommonBody::default_instance_;
  delete RankCommonBody_reflection_;
  delete tbRankCommon::default_instance_;
  delete tbRankCommon_reflection_;
  delete RobotCommonData::default_instance_;
  delete RobotCommonData_reflection_;
  delete RobotCommonBody::default_instance_;
  delete RobotCommonBody_reflection_;
  delete tbGameRobot::default_instance_;
  delete tbGameRobot_reflection_;
  delete EventLogData::default_instance_;
  delete EventLogData_reflection_;
  delete tbEventLog::default_instance_;
  delete tbEventLog_reflection_;
  delete LoginCommonData::default_instance_;
  delete LoginCommonData_reflection_;
  delete LogMoneyDetail::default_instance_;
  delete LogMoneyDetail_reflection_;
  delete LogGameRecordDetail::default_instance_;
  delete LogGameRecordDetail_reflection_;
  delete LogGameDetail::default_instance_;
  delete LogGameDetail_reflection_;
  delete tbLogGameDay::default_instance_;
  delete tbLogGameDay_reflection_;
  delete tbGameUserManagerData::default_instance_;
  delete tbGameUserManagerData_reflection_;
  delete tbMachineManagerData::default_instance_;
  delete tbMachineManagerData_reflection_;
  delete Sheet_tbGameUserManagerData::default_instance_;
  delete Sheet_tbGameUserManagerData_reflection_;
  delete tbGmCtrlGiveCtrlData::default_instance_;
  delete tbGmCtrlGiveCtrlData_reflection_;
  delete Sheet_tbGmCtrlGiveCtrlData::default_instance_;
  delete Sheet_tbGmCtrlGiveCtrlData_reflection_;
  delete LogVipRechargeRecord::default_instance_;
  delete LogVipRechargeRecord_reflection_;
  delete LogZhuangRecord::default_instance_;
  delete LogZhuangRecord_reflection_;
  delete LogRechargeOrder::default_instance_;
  delete LogRechargeOrder_reflection_;
  delete LogGiveMoneyRecord::default_instance_;
  delete LogGiveMoneyRecord_reflection_;
  delete tbLogSystemDay::default_instance_;
  delete tbLogSystemDay_reflection_;
  delete tbRedeemCode::default_instance_;
  delete tbRedeemCode_reflection_;
  delete LogRedeemCodeRechargeRecord::default_instance_;
  delete LogRedeemCodeRechargeRecord_reflection_;
  delete GameRoomStat::default_instance_;
  delete GameRoomStat_reflection_;
  delete GamePlayerPourInfo::default_instance_;
  delete GamePlayerPourInfo_reflection_;
  delete GameTablePourInfo::default_instance_;
  delete GameTablePourInfo_reflection_;
}

void protobuf_AddDesc_proto_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto_common.proto\022\010proto_ff\032\025yd_field"
    "options.proto\"\261\001\n\022GameServerRoomInfo\022\017\n\007"
    "game_id\030\001 \001(\r\022\017\n\007room_id\030\002 \001(\r\022\035\n\troom_n"
    "ame\030\003 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\021\n\tenter_min\030\004 \001(\004"
    "\022\021\n\tenter_max\030\005 \001(\004\022\024\n\014online_count\030\006 \001("
    "\r\022\016\n\006bus_id\030\007 \001(\r\022\016\n\006status\030\010 \001(\r\"\314\003\n\013tb"
    "ServerMgr\022\026\n\002id\030\001 \001(\004B\n\300\202\024\002\272\304\023\002ID\022-\n\010con"
    "tract\030\002 \001(\tB\033\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\t\345\220\210\345\220\214\345\217\267"
    "\0221\n\014machine_addr\030\003 \001(\tB\033\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304"
    "\023\t\346\234\272\345\231\250\347\240\201\022&\n\002ip\030\004 \001(\tB\032\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272"
    "\304\023\010IP\345\234\260\345\235\200\022/\n\010bus_name\030\005 \001(\tB\035\300\202\024\003\220\301\024\200\001"
    "\310\202\024\200\001\272\304\023\013\346\234\215\345\212\241\345\231\250ID\022/\n\013server_desc\030\006 \001("
    "\tB\032\220\301\024\200\001\310\202\024\200\001\272\304\023\014\346\217\217\350\277\260\344\277\241\346\201\257\022)\n\tcur_cou"
    "nt\030\007 \001(\rB\026\272\304\023\022\345\275\223\345\211\215\346\234\215\345\212\241\345\231\250\346\225\260\0222\n\017last"
    "_login_time\030\010 \001(\004B\031\272\304\023\025\344\270\212\344\270\200\346\254\241\347\231\273\345\275\225\346\227"
    "\266\351\227\264\0223\n\020last_logout_time\030\t \001(\004B\031\272\304\023\025\344\270\212\344"
    "\270\200\346\254\241\344\270\213\347\272\277\346\227\266\351\227\264\022%\n\013create_time\030\n \001(\004B\020"
    "\272\304\023\014\345\210\233\345\273\272\346\227\266\351\227\264\"\352\001\n\rtbContractMgr\022\036\n\002id"
    "\030\001 \001(\004B\022\300\202\024\002\230\304\023\001\250\304\023\001\272\304\023\002ID\022-\n\010contract\030\002"
    " \001(\tB\033\300\202\024\004\220\301\024\200\001\310\202\024\200\001\272\304\023\t\345\220\210\345\220\214\345\217\267\0221\n\014mac"
    "hine_addr\030\003 \001(\tB\033\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\t\346\234\272\345\231"
    "\250\347\240\201\022&\n\002ip\030\004 \001(\tB\032\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\010IP\345\234"
    "\260\345\235\200\022/\n\013server_desc\030\005 \001(\tB\032\220\301\024\200\001\310\202\024\200\001\272\304\023"
    "\014\346\217\217\350\277\260\344\277\241\346\201\257\"\324\001\n\016tbAccountTable\022 \n\tplay"
    "er_id\030\001 \001(\004B\r\300\202\024\002\230\304\023\001\250\304\023\220N\022\037\n\007account\030\002 "
    "\001(\tB\016\300\202\024\004\220\301\024\200\001\310\202\024\200\001\022 \n\010password\030\003 \001(\tB\016\300"
    "\202\024\003\220\301\024\200\001\310\202\024\200\001\022\024\n\014account_type\030\004 \001(\r\022\035\n\td"
    "evice_id\030\005 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\020\n\010phonenum\030\006"
    " \001(\004\022\026\n\016real_player_id\030\007 \001(\004\"A\n\010ItemData"
    "\022\027\n\007item_id\030\001 \001(\005B\006\302\377\024\002ID\022\034\n\010item_num\030\002 "
    "\001(\005B\n\302\377\024\006\346\225\260\351\207\217\",\n\016SingleMailInfo\022\n\n\002id\030"
    "\001 \001(\004\022\016\n\006status\030\003 \001(\r\"6\n\023UserSpecialMail"
    "Data\022\021\n\tstatic_id\030\001 \001(\005\022\014\n\004time\030\002 \001(\004\"\234\001"
    "\n\014UserMailInfo\0224\n\013simple_mail\030\001 \003(\0132\030.pr"
    "oto_ff.SingleMailInfoB\005\210\301\024\350\007\0229\n\014receive_"
    "data\030\002 \003(\0132\035.proto_ff.UserSpecialMailDat"
    "aB\004\210\301\024d\022\033\n\rdel_role_mail\030\004 \003(\004B\004\210\301\024d\"R\n\016"
    "tbUserMailInfo\022\025\n\007user_id\030\001 \002(\004B\004\300\202\024\002\022)\n"
    "\tbase_info\030\002 \001(\0132\026.proto_ff.UserMailInfo"
    "\"\331\001\n\020tbUserMailDetail\022\020\n\002id\030\001 \001(\004B\004\300\202\024\002\022"
    "\025\n\007user_id\030\002 \001(\004B\004\300\202\024\003\022\033\n\tsend_name\030\003 \001("
    "\tB\010\220\301\024 \310\202\024 \022\021\n\tstatic_id\030\004 \001(\005\022\033\n\007conten"
    "t\030\005 \001(\tB\n\220\301\024\300\014\310\202\024\300\014\022\027\n\005title\030\006 \001(\tB\010\220\301\024@"
    "\310\202\024@\022\021\n\tsend_time\030\007 \001(\004\022\021\n\tmail_name\030\010 \003"
    "(\t\022\020\n\010add_gold\030\t \001(\003\"K\n\022UserMailDetailIn"
    "fo\0225\n\013simple_mail\030\001 \003(\0132\032.proto_ff.tbUse"
    "rMailDetailB\004\210\301\0242\"\271\003\n\020tbGiveBankJetton\022\026"
    "\n\002id\030\001 \002(\004B\n\300\202\024\002\272\304\023\002ID\022 \n\007user_id\030\002 \001(\004B"
    "\017\272\304\023\013\350\265\240\351\200\201\350\200\205ID\022.\n\tuser_name\030\003 \001(\tB\033\220\301\024"
    "@\310\202\024@\272\304\023\017\350\265\240\351\200\201\350\200\205\346\230\265\347\247\260\022(\n\016user_vip_lev"
    "el\030\004 \001(\004B\020\272\304\023\014\350\265\240\351\200\201\350\200\205VIP\022\"\n\014give_user_"
    "id\030\005 \001(\004B\014\272\304\023\010\347\216\251\345\256\266ID\022*\n\016give_user_name"
    "\030\006 \001(\tB\022\220\301\024@\310\202\024@\272\304\023\006\346\230\265\347\247\260\022\037\n\013give_jetto"
    "n\030\007 \001(\004B\n\272\304\023\006\346\225\260\351\207\217\022*\n\023give_user_vip_lev"
    "el\030\010 \001(\rB\r\272\304\023\t\347\216\251\345\256\266VIP\022S\n\006status\030\t \001(\rB"
    "C\272\304\023\?\347\212\266\346\200\201:0=\350\277\233\350\241\214\344\270\255,1=\345\244\261\350\264\245,2=\346\210\220\345\212"
    "\237,3=\345\217\226\346\266\210\344\270\255,4=\345\217\226\346\266\210\346\210\220\345\212\237\022\037\n\013create_t"
    "ime\030\n \001(\004B\n\272\304\023\006\346\227\245\346\234\237\"\255\001\n\014UserMiscData\022\025"
    "\n\rtmp_phone_num\030\001 \001(\004\022\025\n\rtmp_auth_code\030\002"
    " \001(\r\022\027\n\017auth_code_stamp\030\003 \001(\004\022\025\n\rtmp_cod"
    "e_type\030\004 \001(\005\022\030\n\020tmp_code_success\030\005 \001(\010\022%"
    "\n\035tmp_redeemcard_recharge_count\030\006 \001(\005\"\202\024"
    "\n\020tbUserDetailData\022 \n\006userid\030\001 \001(\004B\020\300\202\024\002"
    "\272\304\023\010\347\216\251\345\256\266ID\022(\n\010nickname\030\002 \001(\tB\026\300\202\024\003\220\301\024@"
    "\310\202\024@\272\304\023\006\346\230\265\347\247\260\022\032\n\006faceid\030\003 \001(\rB\n\272\304\023\006\345\244\264\345"
    "\203\217\022!\n\007regdate\030\004 \001(\004B\020\272\304\023\014\346\263\250\345\206\214\346\227\266\351\227\264\022\032\n"
    "\006gender\030\005 \001(\rB\n\272\304\023\006\346\200\247\345\210\253\022\027\n\003age\030\006 \001(\rB\n"
    "\272\304\023\006\345\271\264\351\276\204\022!\n\005email\030\007 \001(\tB\022\220\301\024@\310\202\024@\272\304\023\006\351"
    "\202\256\344\273\266\022\"\n\010phonenum\030\010 \001(\004B\020\272\304\023\014\346\211\213\346\234\272\345\217\267\347\240"
    "\201\022\032\n\006jetton\030\t \001(\004B\n\272\304\023\006\351\207\221\345\270\201\022#\n\007country"
    "\030\n \001(\tB\022\220\301\024@\310\202\024@\272\304\023\006\345\233\275\345\256\266\022$\n\010province\030\013"
    " \001(\tB\022\220\301\024@\310\202\024@\272\304\023\006\347\234\201\344\273\275\022 \n\004city\030\014 \001(\tB\022"
    "\220\301\024@\310\202\024@\272\304\023\006\345\237\216\345\270\202\022*\n\007isrobot\030\r \001(\010B\031\272\304\023"
    "\025\346\234\272\345\231\250\344\272\272:0=\345\220\246,1=\346\230\257\022\037\n\rbank_password\030"
    "\016 \001(\tB\010\220\301\024@\310\202\024@\022%\n\013bank_jetton\030\017 \001(\004B\020\272\304"
    "\023\014\351\223\266\350\241\214\345\255\230\346\254\276\022 \n\002ip\030\020 \001(\tB\024\220\301\024@\310\202\024@\272\304\023\010"
    "IP\345\234\260\345\235\200\0225\n\017last_login_time\030\021 \001(\004B\034\272\304\023\030\346"
    "\234\200\350\277\221\344\270\200\346\254\241\347\231\273\345\275\225\346\227\266\351\227\264\0226\n\020last_logout_t"
    "ime\030\022 \001(\004B\034\272\304\023\030\346\234\200\350\277\221\344\270\200\346\254\241\351\200\200\345\207\272\346\227\266\351\227\264\022"
    "\036\n\010aread_id\030\023 \001(\rB\014\272\304\023\010\345\234\260\345\214\272id\022 \n\nchann"
    "el_id\030\024 \001(\rB\014\272\304\023\010\346\270\240\351\201\223id\022-\n\013platform_os"
    "\030\025 \001(\tB\030\220\301\024@\310\202\024@\272\304\023\014\346\211\213\346\234\272\347\263\273\347\273\237\022-\n\013phon"
    "e_model\030\026 \001(\tB\030\220\301\024@\310\202\024@\272\304\023\014\346\211\213\346\234\272\345\236\213\345\217\267\022"
    ".\n\016first_recharge\030\027 \001(\010B\026\272\304\023\022\351\246\226\345\206\262:0=\345\220"
    "\246,1=\346\230\257\022(\n\010agent_id\030\030 \001(\004B\026\300\202\024\003\272\304\023\016\344\270\212\347\272"
    "\247\344\273\243\347\220\206ID\022\023\n\013referrer_id\030\031 \001(\004\022\021\n\tvip_le"
    "vel\030\032 \001(\r\022)\n\tmisc_data\030\033 \001(\0132\026.proto_ff."
    "UserMiscData\022&\n\006online\030\034 \001(\010B\026\272\304\023\022\345\234\250\347\272\277"
    ":0=\345\220\246,1=\346\230\257\022\274\001\n\007game_id\030\035 \001(\rB\252\001\300\202\024\003\272\304\023"
    "\241\001\346\270\270\346\210\217ID:1001=\346\260\264\346\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277\220"
    "\350\275\254\350\275\256,1003=\346\260\264\346\265\222\344\274\240,1004=\351\274\240\346\235\245\345\256\235,100"
    "5=\347\246\217\346\230\237\351\253\230\347\205\247,2001=\345\244\247\351\227\271\345\244\251\347\251\2722,2002=\345"
    "\244\247\351\227\271\345\244\251\347\251\272,2003=\346\254\242\344\271\220\346\215\225\351\261\2743D,2004=\346\265\267"
    "\347\216\213\022]\n\007room_id\030\036 \001(\rBL\300\202\024\003\272\304\023D\346\210\277\351\227\264ID:1"
    "=\344\275\223\351\252\214\345\234\272,2=\345\210\235\347\272\247\345\234\272,3=\346\231\256\351\200\232\345\234\272,4=\344\270\255"
    "\347\272\247\345\234\272,5=\351\253\230\347\272\247\345\234\272\022\"\n\007all_win\030\037 \001(\003B\021\300\202\024"
    "\003\272\304\023\t\346\200\273\350\276\223\350\265\242\022#\n\014all_recharge\030  \001(\004B\r\272\304"
    "\023\t\346\200\273\344\273\230\350\264\271\022\037\n\010all_give\030! \001(\004B\r\272\304\023\t\346\200\273\350\265"
    "\240\351\200\201\022\037\n\010all_draw\030\" \001(\004B\r\272\304\023\t\346\200\273\345\207\272\346\254\276\022#\n"
    "\ttoday_win\030# \001(\003B\020\272\304\023\014\344\273\212\346\227\245\350\276\223\350\265\242\022(\n\016to"
    "day_recharge\030$ \001(\004B\020\272\304\023\014\344\273\212\346\227\245\344\273\230\350\264\271\022$\n\n"
    "today_give\030% \001(\004B\020\272\304\023\014\344\273\212\346\227\245\350\265\240\351\200\201\022$\n\nto"
    "day_draw\030& \001(\004B\020\272\304\023\014\344\273\212\346\227\245\345\207\272\346\254\276\022\037\n\010week"
    "_win\030\' \001(\003B\r\272\304\023\t\345\221\250\350\276\223\350\265\242\022$\n\rweek_rechar"
    "ge\030( \001(\004B\r\272\304\023\t\345\221\250\344\273\230\350\264\271\022 \n\tweek_give\030) \001"
    "(\004B\r\272\304\023\t\345\221\250\350\265\240\351\200\201\022 \n\tweek_draw\030* \001(\004B\r\272\304"
    "\023\t\345\221\250\345\207\272\346\254\276\022 \n\tmonth_win\030+ \001(\003B\r\272\304\023\t\346\234\210\350"
    "\276\223\350\265\242\022%\n\016month_recharge\030, \001(\004B\r\272\304\023\t\346\234\210\344\273"
    "\230\350\264\271\022!\n\nmonth_give\030- \001(\004B\r\272\304\023\t\346\234\210\350\265\240\351\200\201\022"
    "!\n\nmonth_draw\030. \001(\004B\r\272\304\023\t\346\234\210\345\207\272\346\254\276\022,\n\006is"
    "_ban\030/ \001(\rB\034\272\304\023\030\345\260\201\345\217\267:0=\346\255\243\345\270\270,1=\345\260\201\345\217\267"
    "\0221\n\013no_transfer\0300 \001(\rB\034\272\304\023\030\350\275\254\350\264\246:0=\346\255\243\345"
    "\270\270,1=\347\246\201\346\255\242\022*\n\006reg_ip\0301 \001(\tB\032\220\301\024@\310\202\024@\272\304\023"
    "\016\346\263\250\345\206\214IP\345\234\260\345\235\200\022*\n\tdevice_id\0302 \001(\tB\027\220\301\024\200"
    "\001\310\202\024\200\001\272\304\023\t\346\234\272\345\231\250\347\240\201\0224\n\rreg_device_id\0303 \001"
    "(\tB\035\220\301\024\200\001\310\202\024\200\001\272\304\023\017\346\263\250\345\206\214\346\234\272\345\231\250\347\240\201\022+\n\013sho"
    "w_userid\0304 \001(\004B\026\300\202\024\003\272\304\023\016\346\230\276\347\244\272\347\216\251\345\256\266ID\022)"
    "\n\017all_vip_zhuanru\0305 \001(\004B\020\272\304\023\014VIP\346\200\273\350\275\254\345\205"
    "\245\022.\n\021today_vip_zhuanru\0306 \001(\004B\023\272\304\023\017VIP\344\273\212"
    "\346\227\245\350\275\254\345\205\245\022*\n\020week_vip_zhuanru\0307 \001(\004B\020\272\304\023"
    "\014VIP\345\221\250\350\275\254\345\205\245\022+\n\021month_vip_zhuanru\0308 \001(\004"
    "B\020\272\304\023\014VIP\346\234\210\350\275\254\345\205\245\022*\n\020all_vip_zhuanchu\0309"
    " \001(\004B\020\272\304\023\014VIP\346\200\273\350\275\254\345\207\272\022/\n\022today_vip_zhua"
    "nchu\030: \001(\004B\023\272\304\023\017VIP\344\273\212\346\227\245\350\275\254\345\207\272\022+\n\021week_"
    "vip_zhuanchu\030; \001(\004B\020\272\304\023\014VIP\345\221\250\350\275\254\345\207\272\022,\n\022"
    "month_vip_zhuanchu\030< \001(\004B\020\272\304\023\014VIP\346\234\210\350\275\254\345"
    "\207\272\"R\n\022UserSimpleMiscData\022\036\n\026last_valid_p"
    "layer_time\030\001 \001(\004\022\034\n\024last_pay_player_time"
    "\030\002 \001(\004\"\310\t\n\020tbUserSimpleData\022 \n\006userid\030\001 "
    "\001(\004B\020\300\202\024\002\272\304\023\010\347\224\250\346\210\267ID\022(\n\010nickname\030\002 \001(\tB"
    "\026\300\202\024\003\220\301\024@\310\202\024@\272\304\023\006\346\230\265\347\247\260\022\030\n\004face\030\003 \001(\rB\n\272"
    "\304\023\006\345\244\264\345\203\217\022\032\n\006gender\030\004 \001(\rB\n\272\304\023\006\346\200\247\345\210\253\022\027\n"
    "\003age\030\005 \001(\rB\n\272\304\023\006\345\271\264\351\276\204\022\'\n\007agentid\030\006 \001(\004B"
    "\026\300\202\024\003\272\304\023\016\344\270\212\347\272\247\344\273\243\347\220\206ID\022%\n\013create_time\030\007"
    " \001(\004B\020\272\304\023\014\346\263\250\345\206\214\346\227\266\351\227\264\022+\n\010is_robot\030\010 \001(\010"
    "B\031\272\304\023\025\346\234\272\345\231\250\344\272\272:0=\345\220\246,1=\346\230\257\022d\n\013agent_lev"
    "el\030\t \001(\rBO\272\304\023K\344\273\243\347\220\206:0=\346\231\256\351\200\232\344\273\243\347\220\206,1=\346\200"
    "\273\344\273\243,2=\344\270\200\347\272\247\344\273\243\347\220\206,3=\344\272\214\347\272\247\344\273\243\347\220\206,4=\344\270\211"
    "\347\272\247\344\273\243\347\220\206\022!\n\007ach_day\030\n \001(\004B\020\272\304\023\014\344\273\212\346\227\245\346\265"
    "\201\346\260\264\022\037\n\010ach_week\030\013 \001(\004B\r\272\304\023\t\345\221\250\346\265\201\346\260\264\022 \n"
    "\tach_month\030\014 \001(\004B\r\272\304\023\t\346\234\210\346\265\201\346\260\264\022\036\n\007ach_a"
    "ll\030\r \001(\004B\r\272\304\023\t\346\200\273\346\265\201\346\260\264\022,\n\014ach_team_day\030"
    "\016 \001(\004B\026\272\304\023\022\344\273\212\346\227\245\345\233\242\351\230\237\346\265\201\346\260\264\022*\n\rach_tea"
    "m_week\030\017 \001(\004B\023\272\304\023\017\345\221\250\345\233\242\351\230\237\346\265\201\346\260\264\022+\n\016ach"
    "_team_month\030\021 \001(\004B\023\272\304\023\017\346\234\210\345\233\242\351\230\237\346\265\201\346\260\264\022)"
    "\n\014ach_team_all\030\022 \001(\004B\023\272\304\023\017\346\200\273\345\233\242\351\230\237\346\265\201\346\260"
    "\264\022\'\n\rteam_user_num\030\023 \001(\004B\020\272\304\023\014\345\233\242\351\230\237\344\272\272\346"
    "\225\260\0222\n\014new_user_day\030\024 \001(\004B\034\272\304\023\030\346\257\217\346\227\245\346\226\260\345"
    "\242\236\345\233\242\351\230\237\344\272\272\346\225\260\0221\n\021activity_user_day\030\025 \001("
    "\004B\026\272\304\023\022\345\233\242\351\230\237\346\264\273\350\267\203\344\272\272\346\225\260\022!\n\007getrate\030\026 \001"
    "(\rB\020\272\304\023\014\346\265\201\346\260\264\344\277\235\345\272\225\022%\n\013tax_getrate\030\027 \001("
    "\rB\020\272\304\023\014\347\250\216\346\224\266\344\277\235\345\272\225\022,\n\ttakemoney\030\030 \001(\rB\031"
    "\272\304\023\025\345\217\257\346\217\220\347\216\260\344\275\243\351\207\221\344\275\231\351\242\235\0226\n\rtax_takemon"
    "ey\030\031 \001(\rB\037\272\304\023\033\345\217\257\346\217\220\347\216\260\347\250\216\346\224\266\344\275\243\351\207\221\344\275\231\351\242"
    "\235\022\'\n\rall_takemoney\030\032 \001(\004B\020\272\304\023\014\344\275\243\351\207\221\346\200\273\351"
    "\242\235\022!\n\007all_fee\030\033 \001(\004B\020\272\304\023\014\346\212\275\346\260\264\346\200\273\351\242\235\022%\n"
    "\013show_userid\030\034 \001(\004B\020\272\304\023\014\344\273\243\347\220\206\351\235\223\345\217\267\022\032\n\t"
    "vip_level\030\035 \001(\004B\007\272\304\023\003vip\022/\n\tmisc_data\030\036 "
    "\001(\0132\034.proto_ff.UserSimpleMiscData\"\221\001\n\024Ga"
    "mePlayerWealthData\022\021\n\tplayer_id\030\001 \001(\004\022\020\n"
    "\010recharge\030\002 \001(\003\022\022\n\ntotal_lost\030\003 \001(\003\022\021\n\tt"
    "otal_win\030\004 \001(\003\022\026\n\016this_game_lost\030\005 \001(\003\022\025"
    "\n\rthis_game_win\030\006 \001(\003\"\252\001\n\024GamePlayerDeta"
    "ilData\022\021\n\tplayer_id\030\001 \001(\004\022\021\n\tcur_money\030\002"
    " \001(\003\022\021\n\tvip_level\030\003 \001(\r\022\013\n\003sex\030\004 \001(\r\022\020\n\010"
    "chair_id\030\005 \001(\005\022\033\n\tnick_name\030\006 \001(\tB\010\220\301\024@\310"
    "\202\024@\022\014\n\004face\030\007 \001(\r\022\017\n\007isRobot\030\010 \001(\010\"=\n\031Ga"
    "mePlayerAchievementData\022\017\n\007cur_ach\030\002 \001(\004"
    "\022\017\n\007cur_fee\030\003 \001(\004\"\217\001\n\016UserSimpleData\022\016\n\006"
    "userid\030\001 \001(\004\022\032\n\010nickname\030\002 \001(\tB\010\220\301\024@\310\202\024@"
    "\022\014\n\004face\030\003 \001(\r\022\016\n\006gender\030\004 \001(\r\022\013\n\003age\030\005 "
    "\001(\r\022\023\n\013show_userid\030\006 \001(\004\022\021\n\tvip_level\030\007 "
    "\001(\r\"(\n\014UserBankInfo\022\030\n\trecord_id\030\001 \003(\004B\005"
    "\210\301\024\350\007\"R\n\016tbUserMiscInfo\022\025\n\007user_id\030\001 \002(\004"
    "B\004\300\202\024\002\022)\n\tbank_info\030\002 \001(\0132\026.proto_ff.Use"
    "rBankInfo\"*\n\016RankCommonInfo\022\n\n\002id\030\001 \001(\004\022"
    "\014\n\004rank\030\002 \001(\005\",\n\017RankCommonScore\022\n\n\002id\030\001"
    " \001(\004\022\r\n\005score\030\002 \001(\004\"z\n\016RankCommonBody\0224\n"
    "\nscore_list\030\001 \003(\0132\031.proto_ff.RankCommonS"
    "coreB\005\210\301\024\211\'\0222\n\tinfo_list\030\002 \003(\0132\030.proto_f"
    "f.RankCommonInfoB\005\210\301\024\211\'\"S\n\014tbRankCommon\022"
    "\023\n\005id4db\030\001 \001(\005B\004\300\202\024\002\022.\n\004body\030\002 \001(\0132\030.pro"
    "to_ff.RankCommonBodyB\006\220\301\024\200\324a\"\215\001\n\017RobotCo"
    "mmonData\022\020\n\010robot_id\030\001 \001(\004\022\032\n\010nickname\030\002"
    " \001(\tB\010\220\301\024@\310\202\024@\022\017\n\007face_id\030\003 \001(\r\022\013\n\003age\030\004"
    " \001(\r\022\016\n\006gender\030\005 \001(\r\022\016\n\006jetton\030\006 \001(\004\022\016\n\006"
    "is_use\030\007 \001(\010\"G\n\017RobotCommonBody\0224\n\nrobot"
    "_data\030\001 \003(\0132\031.proto_ff.RobotCommonDataB\005"
    "\210\301\024\350\007\"S\n\013tbGameRobot\022\023\n\005id4db\030\001 \001(\005B\004\300\202\024"
    "\002\022/\n\004body\030\002 \001(\0132\031.proto_ff.RobotCommonBo"
    "dyB\006\220\301\024\200\324a\":\n\014EventLogData\022*\n\nevent_type"
    "\030\001 \001(\0162\026.proto_ff.EventLogType\"\213\001\n\ntbEve"
    "ntLog\022\025\n\007user_id\030\001 \001(\004B\004\300\202\024\002\022\026\n\010event_id"
    "\030\002 \001(\004B\004\300\202\024\002\022\023\n\013create_time\030\003 \001(\005\022\023\n\013exp"
    "ire_time\030\004 \001(\005\022$\n\004data\030\005 \001(\0132\026.proto_ff."
    "EventLogData\"\241\002\n\017LoginCommonData\022\020\n\010area"
    "d_id\030\001 \001(\r\022\020\n\010agent_id\030\002 \001(\004\022\022\n\nchannel_"
    "id\030\003 \001(\r\022\025\n\rreferral_code\030\004 \001(\r\022\035\n\013platf"
    "orm_os\030\005 \001(\tB\010\220\301\024@\310\202\024@\022\031\n\007country\030\006 \001(\tB"
    "\010\220\301\024@\310\202\024@\022\032\n\010province\030\007 \001(\tB\010\220\301\024@\310\202\024@\022\026\n"
    "\004city\030\010 \001(\tB\010\220\301\024@\310\202\024@\022\024\n\002ip\030\t \001(\tB\010\220\301\024@\310"
    "\202\024@\022\034\n\nphone_mode\030\n \001(\tB\010\220\301\024@\310\202\024@\022\035\n\tdev"
    "ice_id\030\013 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\"\257\007\n\016LogMoneyDet"
    "ail\022\034\n\010event_id\030\001 \001(\004B\n\300\202\024\002\272\304\023\002ID\022\020\n\010seq"
    "uence\030\002 \001(\r\022\034\n\010bus_name\030\003 \001(\tB\n\220\301\024\200\001\310\202\024\200"
    "\001\022(\n\nevent_time\030\004 \001(\tB\024\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\227\266"
    "\351\227\264\022!\n\007user_id\030\005 \001(\004B\020\300\202\024\003\272\304\023\010\347\216\251\345\256\266ID\022+"
    "\n\tuser_name\030\006 \001(\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\230\265"
    "\347\247\260\022\270\001\n\007game_id\030\024 \001(\rB\246\001\272\304\023\241\001\346\270\270\346\210\217ID:10"
    "01=\346\260\264\346\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277\220\350\275\254\350\275\256,1003=\346"
    "\260\264\346\265\222\344\274\240,1004=\351\274\240\346\235\245\345\256\235,1005=\347\246\217\346\230\237\351\253\230\347\205"
    "\247,2001=\345\244\247\351\227\271\345\244\251\347\251\2722,2002=\345\244\247\351\227\271\345\244\251\347\251\272,2"
    "003=\346\254\242\344\271\220\346\215\225\351\261\2743D,2004=\346\265\267\347\216\213\022Y\n\007room_i"
    "d\030\025 \001(\rBH\272\304\023D\346\210\277\351\227\264ID:1=\344\275\223\351\252\214\345\234\272,2=\345\210\235\347"
    "\272\247\345\234\272,3=\346\231\256\351\200\232\345\234\272,4=\344\270\255\347\272\247\345\234\272,5=\351\253\230\347\272\247\345\234"
    "\272\022\035\n\007desk_id\030\026 \001(\rB\014\272\304\023\010\346\241\214\345\255\220ID\022\036\n\010chai"
    "r_id\030\027 \001(\rB\014\272\304\023\010\346\244\205\345\255\220ID\022&\n\014account_type"
    "\030\030 \001(\rB\020\272\304\023\014\350\264\246\345\217\267\347\261\273\345\236\213\022\"\n\010opt_type\030\032 \001"
    "(\rB\020\272\304\023\014\346\223\215\344\275\234\347\261\273\345\236\213\022$\n\nopt_reason\030\033 \001(\r"
    "B\020\272\304\023\014\346\223\215\344\275\234\347\274\230\347\224\261\022$\n\nall_jetton\030\034 \001(\004B\020"
    "\272\304\023\014\345\205\250\351\203\250\351\207\221\345\270\201\022 \n\006jetton\030\035 \001(\004B\020\272\304\023\014\350\272"
    "\253\344\270\212\351\207\221\345\270\201\022%\n\013bank_jetton\030\036 \001(\004B\020\272\304\023\014\351\223\266"
    "\350\241\214\351\207\221\345\270\201\022&\n\014change_count\030\037 \001(\004B\020\272\304\023\014\346\224\271"
    "\345\217\230\346\225\260\351\207\217\022$\n\010agent_id\030  \001(\004B\022\272\304\023\016\344\270\212\347\272\247\344"
    "\273\243\347\220\206ID\022\"\n\002ip\030! \001(\tB\026\220\301\024\200\001\310\202\024\200\001\272\304\023\010IP\345\234\260"
    "\345\235\200\022-\n\trecord_id\030\" \001(\004B\032\300\202\024\003\272\304\023\022\346\270\270\346\210\217\350\256"
    "\260\345\275\225\347\264\242\345\274\225\"\375\006\n\023LogGameRecordDetail\022\034\n\010ev"
    "ent_id\030\001 \001(\004B\n\300\202\024\002\272\304\023\002ID\022\020\n\010sequence\030\002 \001"
    "(\r\022\034\n\010bus_name\030\003 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022(\n\neven"
    "t_time\030\004 \001(\tB\024\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\227\266\351\227\264\022!\n\007us"
    "er_id\030\005 \001(\004B\020\300\202\024\003\272\304\023\010\347\216\251\345\256\266ID\022+\n\tuser_na"
    "me\030\006 \001(\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\230\265\347\247\260\022-\n\tre"
    "cord_id\030\024 \001(\004B\032\300\202\024\003\272\304\023\022\346\270\270\346\210\217\350\256\260\345\275\225\347\264\242\345\274"
    "\225\022\270\001\n\007game_id\030\025 \001(\rB\246\001\272\304\023\241\001\346\270\270\346\210\217ID:1001"
    "=\346\260\264\346\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277\220\350\275\254\350\275\256,1003=\346\260\264"
    "\346\265\222\344\274\240,1004=\351\274\240\346\235\245\345\256\235,1005=\347\246\217\346\230\237\351\253\230\347\205\247,"
    "2001=\345\244\247\351\227\271\345\244\251\347\251\2722,2002=\345\244\247\351\227\271\345\244\251\347\251\272,200"
    "3=\346\254\242\344\271\220\346\215\225\351\261\2743D,2004=\346\265\267\347\216\213\022Y\n\007room_id\030"
    "\026 \001(\rBH\272\304\023D\346\210\277\351\227\264ID:1=\344\275\223\351\252\214\345\234\272,2=\345\210\235\347\272\247"
    "\345\234\272,3=\346\231\256\351\200\232\345\234\272,4=\344\270\255\347\272\247\345\234\272,5=\351\253\230\347\272\247\345\234\272\022"
    "\035\n\007desk_id\030\027 \001(\rB\014\272\304\023\010\346\241\214\345\255\220ID\022\036\n\010chair_"
    "id\030\030 \001(\rB\014\272\304\023\010\346\244\205\345\255\220ID\022/\n\013result_info\030\031 "
    "\001(\tB\032\220\301\024\200\010\310\202\024\200\010\272\304\023\014\345\274\200\345\245\226\347\273\223\346\236\234\022%\n\013pour_"
    "jetton\030\032 \001(\004B\020\272\304\023\014\344\270\213\346\263\250\346\200\273\351\242\235\022$\n\nwin_je"
    "tton\030\033 \001(\003B\020\272\304\023\014\347\233\210\345\210\251\346\200\273\345\222\214\022$\n\ntax_jett"
    "on\030\034 \001(\004B\020\272\304\023\014\347\250\216\346\224\266\346\200\273\351\242\235\022;\n\010win_list\030\035"
    " \001(\tB)\220\301\024\200\010\310\202\024\200\010\272\304\023\033\345\216\213\344\275\217\345\234\250\350\265\242\347\232\204\345\214\272\345\237"
    "\237\345\210\227\350\241\250\0229\n\tlost_list\030\036 \001(\tB&\220\301\024\200\010\310\202\024\200\010\272\304"
    "\023\030\345\216\213\344\275\217\345\234\250\350\276\223\345\214\272\345\237\237\345\210\227\350\241\250\"\321\005\n\rLogGameDe"
    "tail\022\034\n\010event_id\030\001 \001(\004B\n\300\202\024\002\272\304\023\002ID\022\020\n\010se"
    "quence\030\002 \001(\r\022\034\n\010bus_name\030\003 \001(\tB\n\220\301\024\200\001\310\202\024"
    "\200\001\022(\n\nevent_time\030\004 \001(\tB\024\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\227"
    "\266\351\227\264\022\035\n\007user_id\030\005 \001(\004B\014\272\304\023\010\345\272\204\345\256\266ID\022-\n\tu"
    "ser_name\030\006 \001(\tB\032\220\301\024\200\001\310\202\024\200\001\272\304\023\014\345\272\204\345\256\266\346\230\265\347"
    "\247\260\022-\n\trecord_id\030\024 \001(\004B\032\300\202\024\003\272\304\023\022\346\270\270\346\210\217\350\256\260"
    "\345\275\225\347\264\242\345\274\225\022\274\001\n\007game_id\030\025 \001(\rB\252\001\300\202\024\003\272\304\023\241\001\346"
    "\270\270\346\210\217ID:1001=\346\260\264\346\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277\220\350\275\254"
    "\350\275\256,1003=\346\260\264\346\265\222\344\274\240,1004=\351\274\240\346\235\245\345\256\235,1005=\347"
    "\246\217\346\230\237\351\253\230\347\205\247,2001=\345\244\247\351\227\271\345\244\251\347\251\2722,2002=\345\244\247\351"
    "\227\271\345\244\251\347\251\272,2003=\346\254\242\344\271\220\346\215\225\351\261\2743D,2004=\346\265\267\347\216\213"
    "\022]\n\007room_id\030\026 \001(\rBL\300\202\024\003\272\304\023D\346\210\277\351\227\264ID:1=\344\275"
    "\223\351\252\214\345\234\272,2=\345\210\235\347\272\247\345\234\272,3=\346\231\256\351\200\232\345\234\272,4=\344\270\255\347\272\247"
    "\345\234\272,5=\351\253\230\347\272\247\345\234\272\022\035\n\007desk_id\030\027 \001(\rB\014\272\304\023\010\346\241"
    "\214\345\255\220ID\0222\n\010bet_info\030\030 \001(\tB \220\301\024\200\010\310\202\024\200\010\272\304\023\022"
    "\346\270\270\346\210\217\344\270\213\346\263\250\344\277\241\346\201\257\0225\n\013result_info\030\031 \001(\tB"
    " \220\301\024\200\010\310\202\024\200\010\272\304\023\022\346\270\270\346\210\217\347\273\223\346\236\234\344\277\241\346\201\257\022#\n\tgam"
    "e_time\030\032 \001(\004B\020\272\304\023\014\346\270\270\346\210\217\346\227\266\351\227\264\"\230\006\n\014tbLog"
    "GameDay\022#\n\007date_id\030\001 \001(\tB\022\300\202\024\002\220\301\024 \310\202\024 \272\304"
    "\023\002ID\022\274\001\n\007game_id\030\002 \001(\rB\252\001\300\202\024\003\272\304\023\241\001\346\270\270\346\210\217"
    "ID:1001=\346\260\264\346\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277\220\350\275\254\350\275\256,1"
    "003=\346\260\264\346\265\222\344\274\240,1004=\351\274\240\346\235\245\345\256\235,1005=\347\246\217\346\230\237"
    "\351\253\230\347\205\247,2001=\345\244\247\351\227\271\345\244\251\347\251\2722,2002=\345\244\247\351\227\271\345\244\251"
    "\347\251\272,2003=\346\254\242\344\271\220\346\215\225\351\261\2743D,2004=\346\265\267\347\216\213\022]\n\007r"
    "oom_id\030\003 \001(\rBL\300\202\024\003\272\304\023D\346\210\277\351\227\264ID:1=\344\275\223\351\252\214\345"
    "\234\272,2=\345\210\235\347\272\247\345\234\272,3=\346\231\256\351\200\232\345\234\272,4=\344\270\255\347\272\247\345\234\272,5"
    "=\351\253\230\347\272\247\345\234\272\022\037\n\010all_pour\030\004 \001(\004B\r\272\304\023\t\346\200\273\346\212\225"
    "\346\263\250\022\"\n\010pour_day\030\005 \001(\004B\020\272\304\023\014\344\273\212\346\227\245\346\212\225\346\263\250\022"
    " \n\tpour_week\030\006 \001(\004B\r\272\304\023\t\345\221\250\346\212\225\346\263\250\022!\n\npou"
    "r_month\030\007 \001(\004B\r\272\304\023\t\346\234\210\346\212\225\346\263\250\022\036\n\007all_win\030"
    "\010 \001(\003B\r\272\304\023\t\346\200\273\350\276\223\350\265\242\022!\n\007win_day\030\t \001(\003B\020\272"
    "\304\023\014\344\273\212\346\227\245\350\276\223\350\265\242\022\037\n\010win_week\030\n \001(\003B\r\272\304\023\t\345"
    "\221\250\350\276\223\350\265\242\022 \n\twin_month\030\013 \001(\003B\r\272\304\023\t\346\234\210\350\276\223\350"
    "\265\242\022\036\n\007all_fee\030\014 \001(\004B\r\272\304\023\t\346\200\273\346\212\275\346\260\264\022!\n\007fe"
    "e_day\030\r \001(\004B\020\272\304\023\014\344\273\212\346\227\245\346\212\275\346\260\264\022\037\n\010fee_wee"
    "k\030\016 \001(\004B\r\272\304\023\t\345\221\250\346\212\275\346\260\264\022 \n\tfee_month\030\017 \001("
    "\004B\r\272\304\023\t\346\234\210\346\212\275\346\260\264\022/\n\tstat_time\030\020 \001(\tB\034\300\202\024"
    "\003\220\301\024 \310\202\024 \272\304\023\014\347\273\237\350\256\241\346\227\245\346\234\237\"\363\007\n\025tbGameUser"
    "ManagerData\022\020\n\002id\030\001 \001(\004B\004\300\202\024\002\022!\n\007user_id"
    "\030\002 \001(\004B\020\300\202\024\003\272\304\023\010\347\216\251\345\256\266ID\022+\n\tuser_name\030\003 "
    "\001(\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\230\265\347\247\260\022/\n\013create_"
    "date\030\004 \001(\tB\032\220\301\024\200\001\310\202\024\200\001\272\304\023\014\345\210\233\345\273\272\346\227\245\346\234\237\022;"
    "\n\013roster_type\030\005 \001(\rB&\300\202\024\003\272\304\023\036\347\261\273\345\236\213:0=\351\273"
    "\221\345\220\215\345\215\225,1=\347\231\275\345\220\215\345\215\225\022$\n\nstart_time\030\006 \001(\004B"
    "\020\272\304\023\014\345\274\200\345\247\213\346\227\266\351\227\264\022\"\n\010end_time\030\007 \001(\004B\020\272\304\023"
    "\014\347\273\223\346\235\237\346\227\266\351\227\264\022\274\001\n\007game_id\030\010 \001(\rB\252\001\300\202\024\003\272\304"
    "\023\241\001\346\270\270\346\210\217ID:1001=\346\260\264\346\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277"
    "\220\350\275\254\350\275\256,1003=\346\260\264\346\265\222\344\274\240,1004=\351\274\240\346\235\245\345\256\235,10"
    "05=\347\246\217\346\230\237\351\253\230\347\205\247,2001=\345\244\247\351\227\271\345\244\251\347\251\2722,2002="
    "\345\244\247\351\227\271\345\244\251\347\251\272,2003=\346\254\242\344\271\220\346\215\225\351\261\2743D,2004=\346\265"
    "\267\347\216\213\022]\n\007room_id\030\t \001(\rBL\300\202\024\003\272\304\023D\346\210\277\351\227\264ID:"
    "1=\344\275\223\351\252\214\345\234\272,2=\345\210\235\347\272\247\345\234\272,3=\346\231\256\351\200\232\345\234\272,4=\344\270"
    "\255\347\272\247\345\234\272,5=\351\253\230\347\272\247\345\234\272\022F\n\005state\030\n \001(\rB7\272\304\0233"
    "\347\212\266\346\200\201:0=\344\270\215\350\265\267\344\275\234\347\224\250,1=\350\277\220\350\241\214\344\270\255,2=\350\277\207\346"
    "\234\237,3=\345\256\214\346\210\220\022(\n\010opt_mark\030\013 \001(\003B\026\272\304\023\022\350\276\223\347\233"
    "\210\346\234\200\345\244\247\346\200\273\351\242\235\022#\n\trate_mark\030\014 \001(\002B\020\272\304\023\014\350\276"
    "\223\347\233\210\346\246\202\347\216\207\022\256\001\n\rcontrol_level\030\r \001(\005B\226\001\272\304\023"
    "\221\001\346\216\247\345\210\266\347\255\211\347\272\247:-5=\351\232\276-\347\255\211\347\272\2475,-4=\351\232\276-\347\255\211"
    "\347\272\2474,-3=\351\235\236\345\270\270\351\232\276,-2=\345\276\210\351\232\276,-1=\351\232\276,0=\346\255\243"
    "\345\270\270,1=\345\256\271\346\230\223,2=\345\276\210\345\256\271\346\230\223,3=\351\235\236\345\270\270\345\256\271\346\230\223,"
    "4=\346\230\223-\347\255\211\347\272\2474,5=\346\230\223-\347\255\211\347\272\2475\0221\n\016max_win_j"
    "etton\030\016 \001(\004B\031\272\304\023\025\345\215\225\346\254\241\346\234\200\345\244\247\350\265\242\347\255\271\347\240\201\022\'"
    "\n\007cur_win\030\017 \001(\003B\026\272\304\023\022\345\275\223\345\211\215\350\276\223\347\233\210\346\200\273\351\242\235\""
    "\332\007\n\024tbMachineManagerData\022\030\n\002id\030\001 \001(\004B\014\300\202"
    "\024\002\230\304\023\001\250\304\023\001\022.\n\tdevice_id\030\002 \001(\tB\033\300\202\024\003\220\301\024\200\001"
    "\310\202\024\200\001\272\304\023\t\346\234\272\345\231\250\347\240\201\022/\n\013create_date\030\004 \001(\tB"
    "\032\220\301\024\200\001\310\202\024\200\001\272\304\023\014\345\210\233\345\273\272\346\227\245\346\234\237\022;\n\013roster_ty"
    "pe\030\005 \001(\rB&\300\202\024\003\272\304\023\036\347\261\273\345\236\213:0=\351\273\221\345\220\215\345\215\225,1=\347"
    "\231\275\345\220\215\345\215\225\022$\n\nstart_time\030\006 \001(\004B\020\272\304\023\014\345\274\200\345\247\213"
    "\346\227\266\351\227\264\022\"\n\010end_time\030\007 \001(\004B\020\272\304\023\014\347\273\223\346\235\237\346\227\266\351"
    "\227\264\022\274\001\n\007game_id\030\010 \001(\rB\252\001\300\202\024\003\272\304\023\241\001\346\270\270\346\210\217ID"
    ":1001=\346\260\264\346\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277\220\350\275\254\350\275\256,100"
    "3=\346\260\264\346\265\222\344\274\240,1004=\351\274\240\346\235\245\345\256\235,1005=\347\246\217\346\230\237\351\253"
    "\230\347\205\247,2001=\345\244\247\351\227\271\345\244\251\347\251\2722,2002=\345\244\247\351\227\271\345\244\251\347\251"
    "\272,2003=\346\254\242\344\271\220\346\215\225\351\261\2743D,2004=\346\265\267\347\216\213\022]\n\007roo"
    "m_id\030\t \001(\rBL\300\202\024\003\272\304\023D\346\210\277\351\227\264ID:1=\344\275\223\351\252\214\345\234\272"
    ",2=\345\210\235\347\272\247\345\234\272,3=\346\231\256\351\200\232\345\234\272,4=\344\270\255\347\272\247\345\234\272,5=\351"
    "\253\230\347\272\247\345\234\272\022F\n\005state\030\n \001(\rB7\272\304\0233\347\212\266\346\200\201:0=\344\270"
    "\215\350\265\267\344\275\234\347\224\250,1=\350\277\220\350\241\214\344\270\255,2=\350\277\207\346\234\237,3=\345\256\214\346\210\220"
    "\022(\n\010opt_mark\030\013 \001(\003B\026\272\304\023\022\350\276\223\347\233\210\346\234\200\345\244\247\346\200\273\351"
    "\242\235\022#\n\trate_mark\030\014 \001(\002B\020\272\304\023\014\350\276\223\347\233\210\346\246\202\347\216\207\022"
    "\256\001\n\rcontrol_level\030\r \001(\005B\226\001\272\304\023\221\001\346\216\247\345\210\266\347\255\211"
    "\347\272\247:-5=\351\232\276-\347\255\211\347\272\2475,-4=\351\232\276-\347\255\211\347\272\2474,-3=\351\235\236"
    "\345\270\270\351\232\276,-2=\345\276\210\351\232\276,-1=\351\232\276,0=\346\255\243\345\270\270,1=\345\256\271\346\230"
    "\223,2=\345\276\210\345\256\271\346\230\223,3=\351\235\236\345\270\270\345\256\271\346\230\223,4=\346\230\223-\347\255\211\347\272"
    "\2474,5=\346\230\223-\347\255\211\347\272\2475\0221\n\016max_win_jetton\030\016 \001(\004"
    "B\031\272\304\023\025\345\215\225\346\254\241\346\234\200\345\244\247\350\265\242\347\255\271\347\240\201\022\'\n\007cur_win\030\017"
    " \001(\003B\026\272\304\023\022\345\275\223\345\211\215\350\276\223\347\233\210\346\200\273\351\242\235\"i\n\033Sheet_tb"
    "GameUserManagerData\022J\n\032tbGameUserManager"
    "Data_List\030\001 \003(\0132\037.proto_ff.tbGameUserMan"
    "agerDataB\005\210\301\024\210\'\"\217\006\n\024tbGmCtrlGiveCtrlData"
    "\022\020\n\002id\030\001 \001(\004B\004\300\202\024\002\022!\n\007user_id\030\002 \001(\004B\020\300\202\024"
    "\003\272\304\023\010\347\216\251\345\256\266ID\022+\n\tuser_name\030\003 \001(\tB\030\300\202\024\003\220\301"
    "\024\200\001\310\202\024\200\001\272\304\023\006\346\230\265\347\247\260\022/\n\013create_date\030\004 \001(\tB"
    "\032\220\301\024\200\001\310\202\024\200\001\272\304\023\014\345\210\233\345\273\272\346\227\245\346\234\237\022Y\n\014control_t"
    "ype\030\005 \001(\rBC\300\202\024\003\272\304\023;\347\261\273\345\236\213:0=\346\270\270\346\210\217\345\206\205\351\200\201"
    "\345\275\251\351\207\221,1=\351\200\201bouns,2=\351\200\201\345\205\215\350\264\271\345\260\217\346\270\270\346\210\217\022$"
    "\n\nstart_time\030\006 \001(\004B\020\272\304\023\014\345\274\200\345\247\213\346\227\266\351\227\264\022\"\n\010"
    "end_time\030\007 \001(\004B\020\272\304\023\014\347\273\223\346\235\237\346\227\266\351\227\264\022\252\001\n\007gam"
    "e_id\030\010 \001(\rB\230\001\300\202\024\003\272\304\023\217\001\346\270\270\346\210\217ID:1001=\346\260\264\346"
    "\236\234\347\216\233\344\270\275,1002=\345\271\270\350\277\220\350\275\254\350\275\256,1003=\346\260\264\346\265\222\344\274"
    "\240,1004=\351\274\240\346\235\245\345\256\235,1005=\347\246\217\346\230\237\351\253\230\347\205\247,1006="
    "\350\267\263\351\253\230\351\253\230,1007=\345\245\263\350\265\214\347\245\236,1008=\347\226\257\347\213\202\347\232\204\347"
    "\214\264\345\255\220\022C\n\005state\030\t \001(\rB4\272\304\0230\347\212\266\346\200\201:0=\344\270\215\350\265"
    "\267\344\275\234\347\224\250,1=\345\276\205\351\200\201,2=\350\277\207\346\234\237,3=\345\267\262\351\200\201\022o\n\014ja"
    "ckpot_type\030\n \001(\005BY\272\304\023U\351\200\201\345\275\251\351\207\221\347\261\273\345\236\213:0="
    "\346\231\256\351\200\232\345\275\251\351\207\221, 1=\345\260\217\345\275\251\351\207\221, 2=\344\270\255\345\275\251\351\207\221, "
    "3=\345\244\247\345\275\251\351\207\221, 4=\350\266\205\347\272\247\345\275\251\351\207\221\022/\n\014jackpot_r"
    "ate\030\013 \001(\002B\031\272\304\023\025\351\200\201\345\275\251\351\207\221\347\232\204\347\231\276\345\210\206\346\257\224\022+\n\016"
    "jackpot_jetton\030\014 \001(\004B\023\272\304\023\017\351\200\201\345\275\251\351\207\221\351\207\221\351\242"
    "\235\"f\n\032Sheet_tbGmCtrlGiveCtrlData\022H\n\031tbGmC"
    "trlGiveCtrlData_List\030\001 \003(\0132\036.proto_ff.tb"
    "GmCtrlGiveCtrlDataB\005\210\301\024\210\'\"\216\003\n\024LogVipRech"
    "argeRecord\022\034\n\010event_id\030\001 \001(\004B\n\300\202\024\002\272\304\023\002ID"
    "\022\020\n\010sequence\030\002 \001(\r\022\034\n\010bus_name\030\003 \001(\tB\n\220\301"
    "\024\200\001\310\202\024\200\001\022(\n\nevent_time\030\004 \001(\tB\024\220\301\024\200\001\310\202\024\200\001"
    "\272\304\023\006\346\227\266\351\227\264\022!\n\007user_id\030\005 \001(\004B\020\300\202\024\003\272\304\023\010\347\216\251"
    "\345\256\266ID\022+\n\tuser_name\030\006 \001(\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001"
    "\272\304\023\006\346\230\265\347\247\260\022 \n\006amount\030\024 \001(\004B\020\272\304\023\014\345\205\205\345\200\274\351\207"
    "\221\351\242\235\022$\n\013recharge_id\030\025 \001(\rB\017\272\304\023\013\345\205\205\345\200\274\350\200\205"
    "ID\0228\n\rrecharge_name\030\026 \001(\tB!\300\202\024\003\220\301\024\200\001\310\202\024\200"
    "\001\272\304\023\017\345\205\205\345\200\274\350\200\205\346\230\265\347\247\260\022,\n\006status\030\027 \001(\004B\034\272\304"
    "\023\030\347\212\266\346\200\201:0=\346\210\220\345\212\237 1=\345\244\261\350\264\245\"\251\002\n\017LogZhuang"
    "Record\022\034\n\010event_id\030\001 \001(\004B\n\300\202\024\002\272\304\023\002ID\022\020\n\010"
    "sequence\030\002 \001(\r\022\034\n\010bus_name\030\003 \001(\tB\n\220\301\024\200\001\310"
    "\202\024\200\001\022(\n\nevent_time\030\004 \001(\tB\024\220\301\024\200\001\310\202\024\200\001\272\304\023\006"
    "\346\227\266\351\227\264\022!\n\007user_id\030\005 \001(\004B\020\300\202\024\003\272\304\023\010\347\216\251\345\256\266I"
    "D\022+\n\tuser_name\030\006 \001(\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\006"
    "\346\230\265\347\247\260\022 \n\006amount\030\024 \001(\003B\020\272\304\023\014\345\205\205\345\200\274\351\207\221\351\242\235"
    "\022,\n\006status\030\025 \001(\004B\034\272\304\023\030\347\212\266\346\200\201:0=\346\210\220\345\212\237 1="
    "\345\244\261\350\264\245\"\272\004\n\020LogRechargeOrder\022\034\n\010event_id\030"
    "\001 \001(\004B\n\300\202\024\002\272\304\023\002ID\022\020\n\010sequence\030\002 \001(\r\022\034\n\010b"
    "us_name\030\003 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022(\n\nevent_time\030"
    "\004 \001(\tB\024\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\227\266\351\227\264\022!\n\007user_id\030\005"
    " \001(\004B\020\300\202\024\003\272\304\023\010\347\216\251\345\256\266ID\022+\n\tuser_name\030\006 \001("
    "\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\230\265\347\247\260\022,\n\010order_id\030"
    "\024 \001(\tB\032\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\010\350\256\242\345\215\225ID\022 \n\006pay"
    "_id\030\025 \001(\rB\020\272\304\023\014\346\224\257\344\273\230\347\261\273\345\236\213\022/\n\013pay_chann"
    "el\030\026 \001(\tB\032\220\301\024\200\001\310\202\024\200\001\272\304\023\014\345\205\205\345\200\274\346\270\240\351\201\223\022:\n\010"
    "pay_type\030\027 \001(\rB(\272\304\023$\345\205\205\345\200\274:0=\346\224\257\344\273\230\345\256\235,1"
    "=\345\276\256\344\277\241,3=\351\223\266\350\201\224\0228\n\013ch_order_id\030\030 \001(\tB#\300"
    "\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\021\346\270\240\351\201\223\350\216\267\345\276\227\347\232\204ID\022g\n\005st"
    "ate\030\031 \001(\rBX\272\304\023T\346\224\257\344\273\230\347\212\266\346\200\201:0=\346\224\266\345\210\260\346\224\257\344"
    "\273\230\345\233\236\350\260\203\357\274\214\346\224\257\344\273\230\346\210\220\345\212\237,1=\345\217\221\350\265\267\346\224\257\344\273\230\350\257"
    "\267\346\261\202,2=\350\277\224\345\233\236\345\244\261\350\264\245\"\336\002\n\022LogGiveMoneyReco"
    "rd\022\034\n\010event_id\030\001 \001(\004B\n\300\202\024\002\272\304\023\002ID\022\020\n\010sequ"
    "ence\030\002 \001(\r\022\034\n\010bus_name\030\003 \001(\tB\n\220\301\024\200\001\310\202\024\200\001"
    "\022(\n\nevent_time\030\004 \001(\tB\024\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\227\266\351"
    "\227\264\022!\n\007user_id\030\005 \001(\004B\020\300\202\024\003\272\304\023\010\347\216\251\345\256\266ID\022+\n"
    "\tuser_name\030\006 \001(\tB\030\300\202\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\006\346\230\265\347"
    "\247\260\0220\n\004type\030\024 \001(\rB\"\272\304\023\036\350\265\240\351\200\201\347\261\273\345\236\213:0=Web"
    "\347\233\264\346\216\245\350\265\240\351\200\201\022 \n\006amount\030\025 \001(\004B\020\272\304\023\014\350\265\240\351\200\201"
    "\351\207\221\351\242\235\022,\n\006status\030\026 \001(\004B\034\272\304\023\030\347\212\266\346\200\201:0=\346\210\220"
    "\345\212\237 1=\345\244\261\350\264\245\"\322\030\n\016tbLogSystemDay\022-\n\007date_"
    "id\030\001 \001(\tB\034\300\202\024\002\220\301\024 \310\202\024 \272\304\023\014\347\273\237\350\256\241\346\227\245\346\234\237\022\'"
    "\n\ractive_player\030\002 \001(\rB\020\272\304\023\014\346\264\273\350\267\203\347\216\251\345\256\266\022"
    "%\n\013login_count\030\003 \001(\rB\020\272\304\023\014\347\231\273\345\275\225\346\254\241\346\225\260\022&"
    "\n\014valid_player\030\004 \001(\rB\020\272\304\023\014\346\234\211\346\225\210\347\216\251\345\256\266\022$"
    "\n\nnew_player\030\005 \001(\rB\020\272\304\023\014\346\226\260\345\242\236\347\216\251\345\256\266\022$\n\n"
    "pay_player\030\006 \001(\rB\020\272\304\023\014\344\273\230\350\264\271\344\272\272\346\225\260\022#\n\tpa"
    "y_times\030\007 \001(\rB\020\272\304\023\014\344\273\230\350\264\271\346\254\241\346\225\260\022!\n\007pay_a"
    "ll\030\010 \001(\004B\020\272\304\023\014\344\273\230\350\264\271\346\200\273\351\242\235\0221\n\016new_pay_pl"
    "ayer\030\t \001(\rB\031\272\304\023\025\344\273\230\350\264\271\346\226\260\347\216\251\345\256\266\344\272\272\346\225\260\022.\n"
    "\013new_pay_all\030d \001(\rB\031\272\304\023\025\344\273\230\350\264\271\346\226\260\347\216\251\345\256\266\346"
    "\200\273\351\242\235\022.\n\016commission_all\030\n \001(\004B\026\272\304\023\022\344\275\243\351\207"
    "\221\345\217\221\346\224\276\346\200\273\351\242\235\022!\n\007all_fee\030\013 \001(\004B\020\272\304\023\014\347\250\216\346"
    "\224\266\346\200\273\345\222\214\022\"\n\010all_pour\030\014 \001(\004B\020\272\304\023\014\346\212\225\346\263\250\346\200"
    "\273\345\222\214\022\'\n\007all_win\030\r \001(\003B\026\272\304\023\022\347\263\273\347\273\237\347\233\210\345\210\251\346"
    "\200\273\345\222\214\022(\n\013jetton_init\030\016 \001(\004B\023\272\304\023\017\346\257\217\346\227\245\345\210"
    "\235\345\247\213\345\200\274\022\"\n\010all_draw\030\017 \001(\004B\020\272\304\023\014\345\207\272\346\254\276\346\200\273"
    "\351\242\235\022#\n\tjetton_in\030\020 \001(\004B\020\272\304\023\014\347\263\273\347\273\237\350\277\233\351\241\271"
    "\022*\n\njetton_out\030\021 \001(\004B\026\272\304\023\022\347\263\273\347\273\237\345\207\272\346\254\276\346\200"
    "\273\351\242\235\022/\n\tsys_award\030\022 \001(\004B\034\272\304\023\030\347\263\273\347\273\237\345\217\221\346\224"
    "\276\345\245\226\345\212\261\346\200\273\351\242\235\022-\n\rplayer_jetton\030\023 \001(\004B\026\272\304"
    "\023\022\347\216\251\345\256\266\351\207\221\345\270\201\345\272\223\345\255\230\022.\n\013trd_pay_all\030\024 \001("
    "\004B\031\272\304\023\025\347\254\254\344\270\211\346\226\271\346\224\257\344\273\230\346\200\273\351\242\235\022(\n\013vip_pay_"
    "all\030\025 \001(\004B\023\272\304\023\017vip\346\224\257\344\273\230\346\200\273\351\242\235\022/\n\017zhuang"
    "zhang_all\030\026 \001(\004B\026\272\304\023\022\345\205\205\345\200\274\350\275\254\350\264\246\346\200\273\351\242\235\022"
    ".\n\016activity_award\030\027 \001(\004B\026\272\304\023\022\346\264\273\345\212\250\345\245\226\345\212"
    "\261\346\200\273\351\242\235\022/\n\017all_bank_jetton\030\031 \001(\004B\026\272\304\023\022\345\205"
    "\250\351\203\250\351\223\266\350\241\214\345\272\223\345\255\230\022-\n\rfreeze_jetton\030\032 \001(\004B"
    "\026\272\304\023\022\350\242\253\345\206\273\347\273\223\347\232\204\345\272\223\345\255\230\022$\n\nall_jetton\030\033 "
    "\001(\004B\020\272\304\023\014\345\205\250\351\203\250\345\272\223\345\255\230\022$\n\nall_player\030\034 \001("
    "\004B\020\272\304\023\014\347\216\251\345\256\266\346\200\273\346\225\260\022*\n\014active_seven\030\035 \001("
    "\004B\024\272\304\023\020\346\234\200\350\277\2217\346\227\245\346\227\245\346\264\273\022,\n\ractive_thirty"
    "\030\036 \001(\004B\025\272\304\023\021\346\234\200\350\277\22130\345\244\251\346\227\245\346\264\273\022&\n\014pour_da"
    "y_all\030\037 \001(\004B\020\272\304\023\014\344\273\212\346\227\245\346\212\225\346\263\250\022$\n\rpour_we"
    "ek_all\030  \001(\004B\r\272\304\023\t\345\221\250\346\212\225\346\263\250\022%\n\016pour_mont"
    "h_all\030! \001(\004B\r\272\304\023\t\346\234\210\346\212\225\346\263\250\022+\n\013sys_win_da"
    "y\030\" \001(\003B\026\272\304\023\022\347\263\273\347\273\237\344\273\212\346\227\245\347\233\210\345\210\251\022)\n\014sys_w"
    "in_week\030# \001(\003B\023\272\304\023\017\347\263\273\347\273\237\345\221\250\347\233\210\345\210\251\022*\n\rsy"
    "s_win_month\030$ \001(\003B\023\272\304\023\017\347\263\273\347\273\237\346\234\210\347\233\210\345\210\251\022!"
    "\n\007fee_day\030% \001(\004B\020\272\304\023\014\346\257\217\346\227\245\346\212\275\346\260\264\022\"\n\010fee"
    "_week\030& \001(\004B\020\272\304\023\014\346\257\217\345\221\250\346\212\275\346\260\264\022#\n\tfee_mon"
    "th\030\' \001(\004B\020\272\304\023\014\346\257\217\346\234\210\346\212\275\346\260\264\022\'\n\rcommision_"
    "all\030( \001(\004B\020\272\304\023\014\344\275\243\351\207\221\346\200\273\351\242\235\022.\n\016commision"
    "_take\030) \001(\004B\026\272\304\023\022\345\217\226\345\207\272\344\275\243\351\207\221\346\200\273\351\242\235\022\'\n\rc"
    "ommision_day\030* \001(\004B\020\272\304\023\014\346\257\217\346\227\245\344\275\243\351\207\221\022(\n\016"
    "commision_week\030+ \001(\004B\020\272\304\023\014\346\257\217\345\221\250\344\275\243\351\207\221\022)"
    "\n\017commision_month\030, \001(\004B\020\272\304\023\014\346\257\217\346\234\210\344\275\243\351\207"
    "\221\0220\n\nmax_online\030- \001(\004B\034\272\304\023\030\345\275\223\347\204\266\346\234\200\345\244\247\345"
    "\234\250\347\272\277\344\272\272\346\225\260\022%\n\016win_cost_value\030. \001(\004B\r\272\304\023"
    "\t\345\207\272\345\267\256\345\200\274\022)\n\017day_money_value\030/ \001(\004B\020\272\304\023"
    "\014\345\275\223\346\227\245\345\272\223\345\255\230\022!\n\007pay_day\0300 \001(\004B\020\272\304\023\014\346\257\217\346"
    "\227\245\344\273\230\350\264\271\022\"\n\010pay_week\0301 \001(\004B\020\272\304\023\014\346\257\217\345\221\250\344\273"
    "\230\350\264\271\022#\n\tpay_month\0302 \001(\004B\020\272\304\023\014\346\257\217\346\234\210\344\273\230\350\264"
    "\271\022\"\n\010draw_day\0303 \001(\004B\020\272\304\023\014\346\257\217\346\227\245\345\207\272\346\254\276\022#\n"
    "\tdraw_week\0304 \001(\004B\020\272\304\023\014\346\257\217\345\221\250\345\207\272\346\254\276\022$\n\ndr"
    "aw_month\0305 \001(\004B\020\272\304\023\014\346\257\217\346\234\210\345\207\272\346\254\276\022.\n\013trd_"
    "pay_day\0306 \001(\004B\031\272\304\023\025\346\257\217\346\227\245\347\254\254\344\270\211\346\226\271\346\224\257\344\273\230"
    "\022/\n\014trd_pay_week\0307 \001(\004B\031\272\304\023\025\346\257\217\345\221\250\347\254\254\344\270\211"
    "\346\226\271\346\224\257\344\273\230\0220\n\rtrd_pay_month\0308 \001(\004B\031\272\304\023\025\346\257"
    "\217\346\234\210\347\254\254\344\270\211\346\226\271\346\224\257\344\273\230\022(\n\013vip_pay_day\0309 \001(\004"
    "B\023\272\304\023\017\346\257\217\346\227\245vip\346\224\257\344\273\230\022)\n\014vip_pay_week\030: "
    "\001(\004B\023\272\304\023\017\346\257\217\345\221\250vip\346\224\257\344\273\230\022*\n\rvip_pay_mont"
    "h\030; \001(\004B\023\272\304\023\017\346\257\217\346\234\210vip\346\224\257\344\273\230\022/\n\017zhuangzh"
    "ang_day\030< \001(\004B\026\272\304\023\022\346\257\217\346\227\245\345\205\205\345\200\274\350\275\254\350\264\246\0220\n"
    "\020zhuangzhang_week\030= \001(\004B\026\272\304\023\022\346\257\217\345\221\250\345\205\205\345\200"
    "\274\350\275\254\350\264\246\0221\n\021zhuangzhang_month\030> \001(\004B\026\272\304\023\022"
    "\346\257\217\346\234\210\345\205\205\345\200\274\350\275\254\350\264\246\022\"\n\010give_day\030\? \001(\004B\020\272\304"
    "\023\014\346\257\217\346\227\245\350\265\240\351\200\201\022#\n\tgive_week\030@ \001(\004B\020\272\304\023\014\346"
    "\257\217\345\221\250\350\265\240\351\200\201\022$\n\ngive_month\030A \001(\004B\020\272\304\023\014\346\257\217"
    "\346\234\210\350\265\240\351\200\201\022\"\n\010all_give\030B \001(\004B\020\272\304\023\014\350\265\240\351\200\201\346"
    "\200\273\351\242\235\022)\n\017all_vip_zhuanru\030C \001(\004B\020\272\304\023\014VIP\346"
    "\200\273\350\275\254\345\205\245\022.\n\021today_vip_zhuanru\030D \001(\004B\023\272\304\023"
    "\017VIP\344\273\212\346\227\245\350\275\254\345\205\245\022*\n\020week_vip_zhuanru\030E \001"
    "(\004B\020\272\304\023\014VIP\345\221\250\350\275\254\345\205\245\022+\n\021month_vip_zhuanr"
    "u\030F \001(\004B\020\272\304\023\014VIP\346\234\210\350\275\254\345\205\245\022*\n\020all_vip_zhu"
    "anchu\030G \001(\004B\020\272\304\023\014VIP\346\200\273\350\275\254\345\207\272\022/\n\022today_v"
    "ip_zhuanchu\030H \001(\004B\023\272\304\023\017VIP\344\273\212\346\227\245\350\275\254\345\207\272\022+"
    "\n\021week_vip_zhuanchu\030I \001(\004B\020\272\304\023\014VIP\345\221\250\350\275\254"
    "\345\207\272\022,\n\022month_vip_zhuanchu\030J \001(\004B\020\272\304\023\014VIP"
    "\346\234\210\350\275\254\345\207\272\"\247\002\n\014tbRedeemCode\022 \n\002id\030\001 \001(\tB\024"
    "\300\202\024\002\220\301\024\200\001\310\202\024\200\001\272\304\023\002ID\022\036\n\004gold\030\002 \001(\004B\020\272\304\023\014"
    "\347\202\271\345\215\241\351\242\235\345\272\246\022%\n\013create_time\030\003 \001(\004B\020\272\304\023\014\345"
    "\210\233\345\273\272\346\227\266\351\227\264\022.\n\tcode_name\030\005 \001(\tB\033\300\202\024\003\220\301\024\200"
    "\001\310\202\024\200\001\272\304\023\t\344\273\243\345\217\267\345\220\215\0221\n\005state\030\006 \001(\rB\"\272\304\023\036"
    "\347\212\266\346\200\201:0=\346\234\252\344\275\277\347\224\250,1=\345\267\262\344\275\277\347\224\250\022\'\n\007user_i"
    "d\030\007 \001(\004B\026\300\202\024\003\272\304\023\016\344\275\277\347\224\250\347\216\251\345\256\266ID\022\"\n\010use_t"
    "ime\030\010 \001(\004B\020\272\304\023\014\344\275\277\347\224\250\346\227\266\351\227\264\"\301\002\n\033LogRedee"
    "mCodeRechargeRecord\022\034\n\010event_id\030\001 \001(\004B\n\300"
    "\202\024\002\272\304\023\002ID\022\020\n\010sequence\030\002 \001(\r\022\034\n\010bus_name\030"
    "\003 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022(\n\nevent_time\030\004 \001(\tB\024\220"
    "\301\024\200\001\310\202\024\200\001\272\304\023\006\346\227\266\351\227\264\022$\n\007user_id\030\005 \001(\004B\023\300\202"
    "\024\003\272\304\023\013\345\205\205\345\200\274\350\200\205ID\0224\n\tuser_name\030\006 \001(\tB!\300\202"
    "\024\003\220\301\024\200\001\310\202\024\200\001\272\304\023\017\345\205\205\345\200\274\350\200\205\346\230\265\347\247\260\022 \n\006amoun"
    "t\030\024 \001(\004B\020\272\304\023\014\345\205\205\345\200\274\351\207\221\351\242\235\022,\n\006status\030\025 \001("
    "\004B\034\272\304\023\030\347\212\266\346\200\201:0=\346\210\220\345\212\237 1=\345\244\261\350\264\245\"B\n\014GameR"
    "oomStat\022\017\n\007cur_fee\030\001 \001(\004\022\020\n\010cur_pour\030\002 \001"
    "(\004\022\017\n\007cur_win\030\003 \001(\003\"3\n\022GamePlayerPourInf"
    "o\022\017\n\007user_id\030\001 \001(\004\022\014\n\004pour\030\002 \001(\003\"D\n\021Game"
    "TablePourInfo\022/\n\tpour_info\030\001 \003(\0132\034.proto"
    "_ff.GamePlayerPourInfo*Y\n\021Proto_AccountT"
    "ype\022\r\n\tE_VISITOR\020\000\022\r\n\tE_ACCOUNT\020\001\022\014\n\010E_W"
    "ECHAT\020\002\022\013\n\007E_PHONE\020\003\022\013\n\007E_ROBOT\020\n*)\n\rPro"
    "to_SexType\022\n\n\006E_MALE\020\000\022\014\n\010E_FEMALE\020\001*d\n\016"
    "Proto_PlatType\022\017\n\013E_PLAT_NONE\020\000\022\022\n\016E_PLA"
    "T_ANDROID\020\001\022\016\n\nE_PLAT_IOS\020\002\022\r\n\tE_PLAT_WP"
    "\020\003\022\016\n\nE_PLAT_MAX\020\004*]\n\021Proto_NetworkType\022"
    "\020\n\014E_NETWORK_2G\020\000\022\020\n\014E_NETWORK_3G\020\001\022\020\n\014E"
    "_NETWORK_4G\020\002\022\022\n\016E_NETWORK_WIFI\020\003*`\n\027Pro"
    "to_PlayerCreateState\022\023\n\017E_CREATE_SUCESS\020"
    "\000\022\030\n\024E_CREATE_REGIST_NAME\020\001\022\026\n\022E_CREATE_"
    "WAIT_NAME\020\002*\213\001\n\020Proto_AgentLevel\022\031\n\025E_AG"
    "ENT_LEVEL_GENERAL\020\000\022\025\n\021E_AGENT_LEVEL_MAX"
    "\020\001\022\025\n\021E_AGENT_LEVEL_ONE\020\002\022\025\n\021E_AGENT_LEV"
    "EL_TWO\020\003\022\027\n\023E_AGENT_LEVEL_THREE\020\004*H\n\017enS"
    "nsMailStatus\022\027\n\023EN_SNS_MAIL_NO_READ\020\000\022\034\n"
    "\030EN_SNS_MAIL_ALREADY_READ\020\001*\234\003\n\030EnumGive"
    "BankJettonStatus\022%\n!ENUM_GIVE_BANK_JETTO"
    "N_STATUS_NONE\020\000\022/\n+ENUM_GIVE_BANK_JETTON"
    "_STATUS_DEL_MONEY_FAIL\020\001\0222\n.ENUM_GIVE_BA"
    "NK_JETTON_STATUS_DEL_MONEY_SUCCESS\020\002\022/\n+"
    "ENUM_GIVE_BANK_JETTON_STATUS_ADD_MONEY_F"
    "AIL\020\003\022(\n$ENUM_GIVE_BANK_JETTON_STATUS_SU"
    "CCESS\020\004\022\'\n#ENUM_GIVE_BANK_JETTON_STATUS_"
    "CANCEL\020\005\022/\n+ENUM_GIVE_BANK_JETTON_STATUS"
    "_CANCEL_SUCCESS\020\006\022\?\n;ENUM_GIVE_BANK_JETT"
    "ON_STATUS_CANCEL_FAILED_RECHARGE_SUCCESS"
    "\020\007*\314\003\n\013enConstType\022\021\n\rEN_CONST_NONE\020\000\022:\n"
    "\031EN_CONST_USER_INIT_JETTON\020\001\032\033\202}\030\347\216\251\345\256\266\345"
    "\210\235\345\247\213\350\265\240\351\200\201\351\207\221\345\270\201\0222\n\027EN_CONST_USER_INIT_"
    "FACE\020\002\032\025\202}\022\347\216\251\345\256\266\345\210\235\345\247\213\345\244\264\345\203\217\022\?\n\036EN_CONS"
    "T_USER_INIT_BANK_JETTON\020\003\032\033\202}\030\347\216\251\345\256\266\345\210\235\345"
    "\247\213\351\223\266\350\241\214\345\257\206\347\240\201\022Q\n\032EN_CONST_USER_ACH_WITH"
    "_FEE\020\004\0321\202}.=0 \346\212\275\346\260\264\347\256\227\344\270\252\346\265\201\346\260\264\357\274\214 =1 \346"
    "\212\275\346\260\264\344\270\215\347\256\227\346\265\201\346\260\264\022b\n\033EN_CONST_USER_FEE_W"
    "ITH_POUR\020\005\032A\202}>=0\346\227\266\344\270\272\344\270\215\345\212\240\346\234\254\351\207\221\347\232\204\346\212"
    "\275\346\260\264\357\274\214 =1\346\227\266\344\270\272\345\212\240\344\270\212\346\234\254\351\207\221\347\232\204\346\212\275\346\260\264\022B\n"
    "\033EN_CONST_USER_MIN_BANK_DRAW\020\006\032!\202}\036\351\235\236VI"
    "P\350\275\254VIP\346\234\200\345\260\217\350\275\254\350\264\246\351\242\235\345\272\246*f\n\021eAccountMon"
    "eyType\022\031\n\025E_ACCOUNT_TYPE_JETTON\020\000\022\036\n\032E_A"
    "CCOUNT_TYPE_BANK_JETTON\020\001\022\026\n\022E_ACCOUNT_T"
    "YPE_MAX\020\002*\352\002\n\020eChangeMoneyType\022\031\n\025E_CHAG"
    "EMONEY_GAME_ADD\020\000\022\034\n\030E_CHAGEMONEY_GAME_R"
    "EMOVE\020\001\022\034\n\030E_CHAGEMONEY_GAME_ADD_GM\020\002\022\037\n"
    "\033E_CHAGEMONEY_GAME_REMOVE_GM\020\003\022\'\n#E_CHAG"
    "EMONEY_BANK_SAVE_MONEY_REMOVE\020\004\022#\n\037E_CHA"
    "GEMONEY_BANK_GET_MONEY_ADD\020\005\022\031\n\025E_CHAGEM"
    "ONEY_MAIL_ADD\020\006\022,\n(E_CHAGEMONEY_GIVE_JET"
    "TON_TO_OTHER_REMOVE\020\007\022,\n(E_CHAGEMONEY_OT"
    "HER_GEVE_JETTON_TO_ME_ADD\020\010\022\031\n\025E_CHAGEMO"
    "NEY_TYPE_MAX\020\t*\247\003\n\016eOperationType\022-\n)E_U"
    "SER_JETTON_OPER_TYPE_GAME_BALANCED_WIN\020\000"
    "\022.\n*E_USER_JETTON_OPER_TYPE_GAME_BALANCE"
    "D_LOST\020\001\022$\n E_USER_JETTON_OPER_TYPE_EXCH"
    "ANGE\020\002\022$\n E_USER_JETTON_OPER_TYPE_TRANSF"
    "ER\020\003\022$\n E_USER_JETTON_OPER_TYPE_RECHARGE"
    "\020\004\022,\n(E_USER_JETTON_OPER_TYPE_WEB_DEDUCT"
    "_NONEY\020\005\022*\n&E_USER_JETTON_OPER_TYPE_WEB_"
    "GIVE_MONEY\020\006\022\'\n#E_USER_JETTON_OPER_TYPE_"
    "GIVE_JETTON\020\007\022 \n\034E_USER_JETTON_OPER_TYPE"
    "_DRAW\020\010\022\037\n\033E_USER_JETTON_OPER_TYPE_MAX\020\t"
    "*3\n\017eDrawReasonType\022 \n\034E_RECHARGE_PAY_TY"
    "PE_VIP_DRAW\020\001*\223\002\n\022eRechargeResonType\022$\n "
    "E_RECHARGE_PAY_TYPE_VIP_RECHARGE\020\001\0220\n,E_"
    "RECHARGE_PAY_TYPE_WEB_ZHUANGZHANG_PLATFO"
    "RM\020\002\022!\n\035E_RECHARGE_PAY_TYPE_POINTCARD\020\003\022"
    "\036\n\032E_RECHARGE_PAY_TYPE_ALIPAY\020\004\022\036\n\032E_REC"
    "HARGE_PAY_TYPE_TENPAY\020\005\022\035\n\031E_RECHARGE_PA"
    "Y_TYPE_APPLE\020\006\022#\n\037E_RECHARGE_PAY_TYPE_YI"
    "NGYONGBAO\020\007*\233\001\n\036eGameBalanceOperationWin"
    "Reason\022\'\n#E_GAME_BALANCE_REASON_PLAY_GAM"
    "E_WIN\020\000\022-\n)E_GAME_BALANCE_REASON_TYPE_DO"
    "_LOTTERY_WIN\020\001\022!\n\035E_GAME_BALANCE_REASON_"
    "WIN_MAX\020\002*\237\001\n\037eGameBalanceOperationLostR"
    "eason\022(\n$E_GAME_BALANCE_REASON_PLAY_GAME"
    "_LOST\020\000\022.\n*E_GAME_BALANCE_REASON_TYPE_DO"
    "_LOTTERY_LOST\020\001\022\"\n\036E_GAME_BALANCE_REASON"
    "_LOST_MAX\020\002*\321\004\n\020eGiveMoneyReason\022\"\n\036E_GI"
    "VE_MONEY_REASON_WEB_SYSTEM\020\000\022\037\n\033E_GIVE_M"
    "ONEY_REASON_PROMOTE\020\001\022&\n\"E_GIVE_MONEY_RE"
    "ASON_FIRST_RECHARGE\020\002\022 \n\034E_GIVE_MONEY_RE"
    "ASON_BUY_PROP\020\003\022\033\n\027E_GIVE_MONEY_SHARE_GA"
    "ME\020\004\022$\n E_GIVE_MONEY_REASON_RECLAIM_PROP"
    "\020\005\022&\n\"E_GIVE_MONEY_REASON_FIRST_REGISTER"
    "\020\006\0226\n2E_GIVE_MONEY_REASON_PLAT_USER_CHAN"
    "GE_TO_AGENT_USER\020\007\022#\n\037E_GIVE_MONEY_REASO"
    "N_FINISH_TASK\020\010\022\"\n\036E_GIVE_MONEY_REASON_R"
    "ELIF_FUND\020\t\022/\n+E_GIVE_MONEY_REASON_EVERY"
    "DAY_LOGIN_COMMERCE\020\n\022*\n&E_GIVE_MONEY_REA"
    "SON_COMPLETE_USER_INFO\020\013\022 \n\034E_GIVE_MONEY"
    "_REASON_TOOL_CMD\020\014\022&\n\"E_GIVE_MONEY_REASO"
    "N_PROMOTE_PROFIT\020\r\022\033\n\027E_GIVE_MONEY_REASO"
    "N_MAX\020\016*u\n\024eMoneyExchangeReason\022 \n\034E_EXC"
    "HANGE_REASON_SAVE_MONEY\020\000\022 \n\034E_EXCHANGE_"
    "REASON_DRAW_MONEY\020\001\022\031\n\025E_EXCHANGE_REASON"
    "_MAX\020\002*\327\001\n\024eMoneyTransferReason\022\032\n\026E_TRA"
    "NSFER_REASON_USER\020\000\022\037\n\033E_TRANSFER_REASON"
    "_FROM_USER\020\001\022!\n\035E_TRANSFER_REASON_VIP_ZH"
    "UANRU\020\002\022\"\n\036E_TRANSFER_REASON_VIP_ZHUANCH"
    "U\020\003\022 \n\034E_TRANSFER_REASON_VIP_TO_VIP\020\004\022\031\n"
    "\025E_TRANSFER_REASON_MAX\020\005*X\n\nenRankType\022\024"
    "\n\020E_RANK_TYPE_NONE\020\000\022\024\n\020E_RANK_TYPE_GOLD"
    "\020\001\022\036\n\032E_RANK_TYPE_TODAY_WIN_GOLD\020\002*E\n\014Ev"
    "entLogType\022 \n\034EN_EVENTLOG_GIVE_BANK_JETT"
    "ON\020\001\022\023\n\017EN_EVENTLOG_MAX\020\024*\210\001\n\017WhiteBlack"
    "State\022\032\n\026WHITE_BLACK_STATE_NONE\020\000\022\034\n\030WHI"
    "TE_BLACK_STATE_USEING\020\001\022\035\n\031WHITE_BLACK_S"
    "TATE_TIMEOUT\020\002\022\034\n\030WHITE_BLACK_STATE_FINI"
    "SH\020\003*\\\n\024WhiteBlackRosterType\022!\n\035WHITE_BL"
    "ACK_ROSTER_TYPE_BLACK\020\000\022!\n\035WHITE_BLACK_R"
    "OSTER_TYPE_WHITE\020\001*\241\001\n\031GMCtrlGiveDataCon"
    "trolType\0220\n,GM_CTRL_GIVE_DATA_STATE_GIVE"
    "_CAIJING_BY_RATE\020\000\022&\n\"GM_CTRL_GIVE_DATA_"
    "STATE_GIVE_BONUS\020\001\022*\n&GM_CTRL_GIVE_DATA_"
    "STATE_GIVE_FREE_GAME\020\002*\245\001\n\023GMCtrlGiveDat"
    "aState\022 \n\034GM_CTRL_GIVE_DATA_STATE_NONE\020\000"
    "\022#\n\037GM_CTRL_GIVE_DATA_STATE_WAITING\020\001\022#\n"
    "\037GM_CTRL_GIVE_DATA_STATE_TIMEOUT\020\002\022\"\n\036GM"
    "_CTRL_GIVE_DATA_STATE_FINISH\020\003*\361\001\n\031GMCtr"
    "lGiveDataJackpotType\022*\n&GM_CTRL_GIVE_DAT"
    "A_JACKPOT_TYPE_GENERAL\020\000\022)\n%GM_CTRL_GIVE"
    "_DATA_JACKPOT_TYPE_LITTLE\020\001\022)\n%GM_CTRL_G"
    "IVE_DATA_JACKPOT_TYPE_MIDDLE\020\002\022&\n\"GM_CTR"
    "L_GIVE_DATA_JACKPOT_TYPE_BIG\020\003\022*\n&GM_CTR"
    "L_GIVE_DATA_JACKPOT_TYPE_TOO_BIG\020\004", 25034);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_common.proto", &protobuf_RegisterTypes);
  GameServerRoomInfo::default_instance_ = new GameServerRoomInfo();
  tbServerMgr::default_instance_ = new tbServerMgr();
  tbContractMgr::default_instance_ = new tbContractMgr();
  tbAccountTable::default_instance_ = new tbAccountTable();
  ItemData::default_instance_ = new ItemData();
  SingleMailInfo::default_instance_ = new SingleMailInfo();
  UserSpecialMailData::default_instance_ = new UserSpecialMailData();
  UserMailInfo::default_instance_ = new UserMailInfo();
  tbUserMailInfo::default_instance_ = new tbUserMailInfo();
  tbUserMailDetail::default_instance_ = new tbUserMailDetail();
  UserMailDetailInfo::default_instance_ = new UserMailDetailInfo();
  tbGiveBankJetton::default_instance_ = new tbGiveBankJetton();
  UserMiscData::default_instance_ = new UserMiscData();
  tbUserDetailData::default_instance_ = new tbUserDetailData();
  UserSimpleMiscData::default_instance_ = new UserSimpleMiscData();
  tbUserSimpleData::default_instance_ = new tbUserSimpleData();
  GamePlayerWealthData::default_instance_ = new GamePlayerWealthData();
  GamePlayerDetailData::default_instance_ = new GamePlayerDetailData();
  GamePlayerAchievementData::default_instance_ = new GamePlayerAchievementData();
  UserSimpleData::default_instance_ = new UserSimpleData();
  UserBankInfo::default_instance_ = new UserBankInfo();
  tbUserMiscInfo::default_instance_ = new tbUserMiscInfo();
  RankCommonInfo::default_instance_ = new RankCommonInfo();
  RankCommonScore::default_instance_ = new RankCommonScore();
  RankCommonBody::default_instance_ = new RankCommonBody();
  tbRankCommon::default_instance_ = new tbRankCommon();
  RobotCommonData::default_instance_ = new RobotCommonData();
  RobotCommonBody::default_instance_ = new RobotCommonBody();
  tbGameRobot::default_instance_ = new tbGameRobot();
  EventLogData::default_instance_ = new EventLogData();
  tbEventLog::default_instance_ = new tbEventLog();
  LoginCommonData::default_instance_ = new LoginCommonData();
  LogMoneyDetail::default_instance_ = new LogMoneyDetail();
  LogGameRecordDetail::default_instance_ = new LogGameRecordDetail();
  LogGameDetail::default_instance_ = new LogGameDetail();
  tbLogGameDay::default_instance_ = new tbLogGameDay();
  tbGameUserManagerData::default_instance_ = new tbGameUserManagerData();
  tbMachineManagerData::default_instance_ = new tbMachineManagerData();
  Sheet_tbGameUserManagerData::default_instance_ = new Sheet_tbGameUserManagerData();
  tbGmCtrlGiveCtrlData::default_instance_ = new tbGmCtrlGiveCtrlData();
  Sheet_tbGmCtrlGiveCtrlData::default_instance_ = new Sheet_tbGmCtrlGiveCtrlData();
  LogVipRechargeRecord::default_instance_ = new LogVipRechargeRecord();
  LogZhuangRecord::default_instance_ = new LogZhuangRecord();
  LogRechargeOrder::default_instance_ = new LogRechargeOrder();
  LogGiveMoneyRecord::default_instance_ = new LogGiveMoneyRecord();
  tbLogSystemDay::default_instance_ = new tbLogSystemDay();
  tbRedeemCode::default_instance_ = new tbRedeemCode();
  LogRedeemCodeRechargeRecord::default_instance_ = new LogRedeemCodeRechargeRecord();
  GameRoomStat::default_instance_ = new GameRoomStat();
  GamePlayerPourInfo::default_instance_ = new GamePlayerPourInfo();
  GameTablePourInfo::default_instance_ = new GameTablePourInfo();
  GameServerRoomInfo::default_instance_->InitAsDefaultInstance();
  tbServerMgr::default_instance_->InitAsDefaultInstance();
  tbContractMgr::default_instance_->InitAsDefaultInstance();
  tbAccountTable::default_instance_->InitAsDefaultInstance();
  ItemData::default_instance_->InitAsDefaultInstance();
  SingleMailInfo::default_instance_->InitAsDefaultInstance();
  UserSpecialMailData::default_instance_->InitAsDefaultInstance();
  UserMailInfo::default_instance_->InitAsDefaultInstance();
  tbUserMailInfo::default_instance_->InitAsDefaultInstance();
  tbUserMailDetail::default_instance_->InitAsDefaultInstance();
  UserMailDetailInfo::default_instance_->InitAsDefaultInstance();
  tbGiveBankJetton::default_instance_->InitAsDefaultInstance();
  UserMiscData::default_instance_->InitAsDefaultInstance();
  tbUserDetailData::default_instance_->InitAsDefaultInstance();
  UserSimpleMiscData::default_instance_->InitAsDefaultInstance();
  tbUserSimpleData::default_instance_->InitAsDefaultInstance();
  GamePlayerWealthData::default_instance_->InitAsDefaultInstance();
  GamePlayerDetailData::default_instance_->InitAsDefaultInstance();
  GamePlayerAchievementData::default_instance_->InitAsDefaultInstance();
  UserSimpleData::default_instance_->InitAsDefaultInstance();
  UserBankInfo::default_instance_->InitAsDefaultInstance();
  tbUserMiscInfo::default_instance_->InitAsDefaultInstance();
  RankCommonInfo::default_instance_->InitAsDefaultInstance();
  RankCommonScore::default_instance_->InitAsDefaultInstance();
  RankCommonBody::default_instance_->InitAsDefaultInstance();
  tbRankCommon::default_instance_->InitAsDefaultInstance();
  RobotCommonData::default_instance_->InitAsDefaultInstance();
  RobotCommonBody::default_instance_->InitAsDefaultInstance();
  tbGameRobot::default_instance_->InitAsDefaultInstance();
  EventLogData::default_instance_->InitAsDefaultInstance();
  tbEventLog::default_instance_->InitAsDefaultInstance();
  LoginCommonData::default_instance_->InitAsDefaultInstance();
  LogMoneyDetail::default_instance_->InitAsDefaultInstance();
  LogGameRecordDetail::default_instance_->InitAsDefaultInstance();
  LogGameDetail::default_instance_->InitAsDefaultInstance();
  tbLogGameDay::default_instance_->InitAsDefaultInstance();
  tbGameUserManagerData::default_instance_->InitAsDefaultInstance();
  tbMachineManagerData::default_instance_->InitAsDefaultInstance();
  Sheet_tbGameUserManagerData::default_instance_->InitAsDefaultInstance();
  tbGmCtrlGiveCtrlData::default_instance_->InitAsDefaultInstance();
  Sheet_tbGmCtrlGiveCtrlData::default_instance_->InitAsDefaultInstance();
  LogVipRechargeRecord::default_instance_->InitAsDefaultInstance();
  LogZhuangRecord::default_instance_->InitAsDefaultInstance();
  LogRechargeOrder::default_instance_->InitAsDefaultInstance();
  LogGiveMoneyRecord::default_instance_->InitAsDefaultInstance();
  tbLogSystemDay::default_instance_->InitAsDefaultInstance();
  tbRedeemCode::default_instance_->InitAsDefaultInstance();
  LogRedeemCodeRechargeRecord::default_instance_->InitAsDefaultInstance();
  GameRoomStat::default_instance_->InitAsDefaultInstance();
  GamePlayerPourInfo::default_instance_->InitAsDefaultInstance();
  GameTablePourInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fcommon_2eproto {
  StaticDescriptorInitializer_proto_5fcommon_2eproto() {
    protobuf_AddDesc_proto_5fcommon_2eproto();
  }
} static_descriptor_initializer_proto_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_AccountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_AccountType_descriptor_;
}
bool Proto_AccountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_SexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SexType_descriptor_;
}
bool Proto_SexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_PlatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_PlatType_descriptor_;
}
bool Proto_PlatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_NetworkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_NetworkType_descriptor_;
}
bool Proto_NetworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_PlayerCreateState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_PlayerCreateState_descriptor_;
}
bool Proto_PlayerCreateState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Proto_AgentLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_AgentLevel_descriptor_;
}
bool Proto_AgentLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enSnsMailStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enSnsMailStatus_descriptor_;
}
bool enSnsMailStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumGiveBankJettonStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumGiveBankJettonStatus_descriptor_;
}
bool EnumGiveBankJettonStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enConstType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enConstType_descriptor_;
}
bool enConstType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eAccountMoneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eAccountMoneyType_descriptor_;
}
bool eAccountMoneyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eChangeMoneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eChangeMoneyType_descriptor_;
}
bool eChangeMoneyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eOperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eOperationType_descriptor_;
}
bool eOperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eDrawReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eDrawReasonType_descriptor_;
}
bool eDrawReasonType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRechargeResonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRechargeResonType_descriptor_;
}
bool eRechargeResonType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGameBalanceOperationWinReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGameBalanceOperationWinReason_descriptor_;
}
bool eGameBalanceOperationWinReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGameBalanceOperationLostReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGameBalanceOperationLostReason_descriptor_;
}
bool eGameBalanceOperationLostReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGiveMoneyReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGiveMoneyReason_descriptor_;
}
bool eGiveMoneyReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMoneyExchangeReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMoneyExchangeReason_descriptor_;
}
bool eMoneyExchangeReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMoneyTransferReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMoneyTransferReason_descriptor_;
}
bool eMoneyTransferReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enRankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enRankType_descriptor_;
}
bool enRankType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventLogType_descriptor_;
}
bool EventLogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WhiteBlackState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiteBlackState_descriptor_;
}
bool WhiteBlackState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WhiteBlackRosterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiteBlackRosterType_descriptor_;
}
bool WhiteBlackRosterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataControlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCtrlGiveDataControlType_descriptor_;
}
bool GMCtrlGiveDataControlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCtrlGiveDataState_descriptor_;
}
bool GMCtrlGiveDataState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataJackpotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCtrlGiveDataJackpotType_descriptor_;
}
bool GMCtrlGiveDataJackpotType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerRoomInfo::kGameIdFieldNumber;
const int GameServerRoomInfo::kRoomIdFieldNumber;
const int GameServerRoomInfo::kRoomNameFieldNumber;
const int GameServerRoomInfo::kEnterMinFieldNumber;
const int GameServerRoomInfo::kEnterMaxFieldNumber;
const int GameServerRoomInfo::kOnlineCountFieldNumber;
const int GameServerRoomInfo::kBusIdFieldNumber;
const int GameServerRoomInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

GameServerRoomInfo::GameServerRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerRoomInfo::InitAsDefaultInstance() {
}

GameServerRoomInfo::GameServerRoomInfo(const GameServerRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enter_min_ = GOOGLE_ULONGLONG(0);
  enter_max_ = GOOGLE_ULONGLONG(0);
  online_count_ = 0u;
  bus_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerRoomInfo::~GameServerRoomInfo() {
  SharedDtor();
}

void GameServerRoomInfo::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void GameServerRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerRoomInfo_descriptor_;
}

const GameServerRoomInfo& GameServerRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

GameServerRoomInfo* GameServerRoomInfo::default_instance_ = NULL;

GameServerRoomInfo* GameServerRoomInfo::New() const {
  return new GameServerRoomInfo;
}

void GameServerRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    room_id_ = 0u;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    enter_min_ = GOOGLE_ULONGLONG(0);
    enter_max_ = GOOGLE_ULONGLONG(0);
    online_count_ = 0u;
    bus_id_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }

      // optional string room_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enter_min;
        break;
      }

      // optional uint64 enter_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_min_)));
          set_has_enter_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enter_max;
        break;
      }

      // optional uint64 enter_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_max_)));
          set_has_enter_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online_count;
        break;
      }

      // optional uint32 online_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_count_)));
          set_has_online_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bus_id;
        break;
      }

      // optional uint32 bus_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_name(), output);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->enter_min(), output);
  }

  // optional uint64 enter_max = 5;
  if (has_enter_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->enter_max(), output);
  }

  // optional uint32 online_count = 6;
  if (has_online_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->online_count(), output);
  }

  // optional uint32 bus_id = 7;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bus_id(), output);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // optional uint64 enter_min = 4;
  if (has_enter_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->enter_min(), target);
  }

  // optional uint64 enter_max = 5;
  if (has_enter_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->enter_max(), target);
  }

  // optional uint32 online_count = 6;
  if (has_online_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->online_count(), target);
  }

  // optional uint32 bus_id = 7;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bus_id(), target);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional string room_name = 3;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional uint64 enter_min = 4;
    if (has_enter_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_min());
    }

    // optional uint64 enter_max = 5;
    if (has_enter_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_max());
    }

    // optional uint32 online_count = 6;
    if (has_online_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_count());
    }

    // optional uint32 bus_id = 7;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

    // optional uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerRoomInfo::MergeFrom(const GameServerRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_enter_min()) {
      set_enter_min(from.enter_min());
    }
    if (from.has_enter_max()) {
      set_enter_max(from.enter_max());
    }
    if (from.has_online_count()) {
      set_online_count(from.online_count());
    }
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRoomInfo::CopyFrom(const GameServerRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRoomInfo::IsInitialized() const {

  return true;
}

void GameServerRoomInfo::Swap(GameServerRoomInfo* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(enter_min_, other->enter_min_);
    std::swap(enter_max_, other->enter_max_);
    std::swap(online_count_, other->online_count_);
    std::swap(bus_id_, other->bus_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerRoomInfo_descriptor_;
  metadata.reflection = GameServerRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbServerMgr::kIdFieldNumber;
const int tbServerMgr::kContractFieldNumber;
const int tbServerMgr::kMachineAddrFieldNumber;
const int tbServerMgr::kIpFieldNumber;
const int tbServerMgr::kBusNameFieldNumber;
const int tbServerMgr::kServerDescFieldNumber;
const int tbServerMgr::kCurCountFieldNumber;
const int tbServerMgr::kLastLoginTimeFieldNumber;
const int tbServerMgr::kLastLogoutTimeFieldNumber;
const int tbServerMgr::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

tbServerMgr::tbServerMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbServerMgr::InitAsDefaultInstance() {
}

tbServerMgr::tbServerMgr(const tbServerMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbServerMgr::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_count_ = 0u;
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbServerMgr::~tbServerMgr() {
  SharedDtor();
}

void tbServerMgr::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete server_desc_;
  }
  if (this != default_instance_) {
  }
}

void tbServerMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbServerMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbServerMgr_descriptor_;
}

const tbServerMgr& tbServerMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbServerMgr* tbServerMgr::default_instance_ = NULL;

tbServerMgr* tbServerMgr::New() const {
  return new tbServerMgr;
}

void tbServerMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_server_desc()) {
      if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
        server_desc_->clear();
      }
    }
    cur_count_ = 0u;
    last_login_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_logout_time_ = GOOGLE_ULONGLONG(0);
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbServerMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // optional string contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_server_desc;
        break;
      }

      // optional string server_desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_desc().data(), this->server_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cur_count;
        break;
      }

      // optional uint32 cur_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_count_)));
          set_has_cur_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_logout_time;
        break;
      }

      // optional uint64 last_logout_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbServerMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contract(), output);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_addr(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bus_name(), output);
  }

  // optional string server_desc = 6;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->server_desc(), output);
  }

  // optional uint32 cur_count = 7;
  if (has_cur_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_count(), output);
  }

  // optional uint64 last_login_time = 8;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_login_time(), output);
  }

  // optional uint64 last_logout_time = 9;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->last_logout_time(), output);
  }

  // optional uint64 create_time = 10;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbServerMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_addr(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bus_name(), target);
  }

  // optional string server_desc = 6;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->server_desc(), target);
  }

  // optional uint32 cur_count = 7;
  if (has_cur_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_count(), target);
  }

  // optional uint64 last_login_time = 8;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_login_time(), target);
  }

  // optional uint64 last_logout_time = 9;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->last_logout_time(), target);
  }

  // optional uint64 create_time = 10;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbServerMgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string contract = 2;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional string machine_addr = 3;
    if (has_machine_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string bus_name = 5;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string server_desc = 6;
    if (has_server_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_desc());
    }

    // optional uint32 cur_count = 7;
    if (has_cur_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_count());
    }

    // optional uint64 last_login_time = 8;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 last_logout_time = 9;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout_time());
    }

    // optional uint64 create_time = 10;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbServerMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbServerMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbServerMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbServerMgr::MergeFrom(const tbServerMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_server_desc()) {
      set_server_desc(from.server_desc());
    }
    if (from.has_cur_count()) {
      set_cur_count(from.cur_count());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbServerMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbServerMgr::CopyFrom(const tbServerMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbServerMgr::IsInitialized() const {

  return true;
}

void tbServerMgr::Swap(tbServerMgr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contract_, other->contract_);
    std::swap(machine_addr_, other->machine_addr_);
    std::swap(ip_, other->ip_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(server_desc_, other->server_desc_);
    std::swap(cur_count_, other->cur_count_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbServerMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbServerMgr_descriptor_;
  metadata.reflection = tbServerMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbContractMgr::kIdFieldNumber;
const int tbContractMgr::kContractFieldNumber;
const int tbContractMgr::kMachineAddrFieldNumber;
const int tbContractMgr::kIpFieldNumber;
const int tbContractMgr::kServerDescFieldNumber;
#endif  // !_MSC_VER

tbContractMgr::tbContractMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbContractMgr::InitAsDefaultInstance() {
}

tbContractMgr::tbContractMgr(const tbContractMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbContractMgr::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbContractMgr::~tbContractMgr() {
  SharedDtor();
}

void tbContractMgr::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete server_desc_;
  }
  if (this != default_instance_) {
  }
}

void tbContractMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbContractMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbContractMgr_descriptor_;
}

const tbContractMgr& tbContractMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbContractMgr* tbContractMgr::default_instance_ = NULL;

tbContractMgr* tbContractMgr::New() const {
  return new tbContractMgr;
}

void tbContractMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_server_desc()) {
      if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
        server_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbContractMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // optional string contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_desc;
        break;
      }

      // optional string server_desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_desc().data(), this->server_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbContractMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contract(), output);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_addr(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string server_desc = 5;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbContractMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_addr(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string server_desc = 5;
  if (has_server_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_desc().data(), this->server_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbContractMgr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string contract = 2;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional string machine_addr = 3;
    if (has_machine_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string server_desc = 5;
    if (has_server_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbContractMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbContractMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbContractMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbContractMgr::MergeFrom(const tbContractMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_server_desc()) {
      set_server_desc(from.server_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbContractMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbContractMgr::CopyFrom(const tbContractMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbContractMgr::IsInitialized() const {

  return true;
}

void tbContractMgr::Swap(tbContractMgr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(contract_, other->contract_);
    std::swap(machine_addr_, other->machine_addr_);
    std::swap(ip_, other->ip_);
    std::swap(server_desc_, other->server_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbContractMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbContractMgr_descriptor_;
  metadata.reflection = tbContractMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbAccountTable::kPlayerIdFieldNumber;
const int tbAccountTable::kAccountFieldNumber;
const int tbAccountTable::kPasswordFieldNumber;
const int tbAccountTable::kAccountTypeFieldNumber;
const int tbAccountTable::kDeviceIdFieldNumber;
const int tbAccountTable::kPhonenumFieldNumber;
const int tbAccountTable::kRealPlayerIdFieldNumber;
#endif  // !_MSC_VER

tbAccountTable::tbAccountTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbAccountTable::InitAsDefaultInstance() {
}

tbAccountTable::tbAccountTable(const tbAccountTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbAccountTable::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_type_ = 0u;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenum_ = GOOGLE_ULONGLONG(0);
  real_player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbAccountTable::~tbAccountTable() {
  SharedDtor();
}

void tbAccountTable::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void tbAccountTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbAccountTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbAccountTable_descriptor_;
}

const tbAccountTable& tbAccountTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbAccountTable* tbAccountTable::default_instance_ = NULL;

tbAccountTable* tbAccountTable::New() const {
  return new tbAccountTable;
}

void tbAccountTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    account_type_ = 0u;
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    phonenum_ = GOOGLE_ULONGLONG(0);
    real_player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbAccountTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_type;
        break;
      }

      // optional uint32 account_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_id;
        break;
      }

      // optional string device_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_phonenum;
        break;
      }

      // optional uint64 phonenum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phonenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_real_player_id;
        break;
      }

      // optional uint64 real_player_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &real_player_id_)));
          set_has_real_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbAccountTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional uint32 account_type = 4;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_type(), output);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_id(), output);
  }

  // optional uint64 phonenum = 6;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->phonenum(), output);
  }

  // optional uint64 real_player_id = 7;
  if (has_real_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->real_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbAccountTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional uint32 account_type = 4;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_type(), target);
  }

  // optional string device_id = 5;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_id(), target);
  }

  // optional uint64 phonenum = 6;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->phonenum(), target);
  }

  // optional uint64 real_player_id = 7;
  if (has_real_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->real_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbAccountTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 account_type = 4;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // optional string device_id = 5;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional uint64 phonenum = 6;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phonenum());
    }

    // optional uint64 real_player_id = 7;
    if (has_real_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->real_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbAccountTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbAccountTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbAccountTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbAccountTable::MergeFrom(const tbAccountTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_real_player_id()) {
      set_real_player_id(from.real_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbAccountTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbAccountTable::CopyFrom(const tbAccountTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbAccountTable::IsInitialized() const {

  return true;
}

void tbAccountTable::Swap(tbAccountTable* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(account_type_, other->account_type_);
    std::swap(device_id_, other->device_id_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(real_player_id_, other->real_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbAccountTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbAccountTable_descriptor_;
  metadata.reflection = tbAccountTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemData::kItemIdFieldNumber;
const int ItemData::kItemNumFieldNumber;
#endif  // !_MSC_VER

ItemData::ItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemData::InitAsDefaultInstance() {
}

ItemData::ItemData(const ItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemData::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemData::~ItemData() {
  SharedDtor();
}

void ItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemData_descriptor_;
}

const ItemData& ItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

ItemData* ItemData::default_instance_ = NULL;

ItemData* ItemData::New() const {
  return new ItemData;
}

void ItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional int32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemData::MergeFrom(const ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemData::CopyFrom(const ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {

  return true;
}

void ItemData::Swap(ItemData* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemData_descriptor_;
  metadata.reflection = ItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleMailInfo::kIdFieldNumber;
const int SingleMailInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

SingleMailInfo::SingleMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleMailInfo::InitAsDefaultInstance() {
}

SingleMailInfo::SingleMailInfo(const SingleMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleMailInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleMailInfo::~SingleMailInfo() {
  SharedDtor();
}

void SingleMailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleMailInfo_descriptor_;
}

const SingleMailInfo& SingleMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

SingleMailInfo* SingleMailInfo::default_instance_ = NULL;

SingleMailInfo* SingleMailInfo::New() const {
  return new SingleMailInfo;
}

void SingleMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleMailInfo::MergeFrom(const SingleMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMailInfo::CopyFrom(const SingleMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMailInfo::IsInitialized() const {

  return true;
}

void SingleMailInfo::Swap(SingleMailInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleMailInfo_descriptor_;
  metadata.reflection = SingleMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSpecialMailData::kStaticIdFieldNumber;
const int UserSpecialMailData::kTimeFieldNumber;
#endif  // !_MSC_VER

UserSpecialMailData::UserSpecialMailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSpecialMailData::InitAsDefaultInstance() {
}

UserSpecialMailData::UserSpecialMailData(const UserSpecialMailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSpecialMailData::SharedCtor() {
  _cached_size_ = 0;
  static_id_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSpecialMailData::~UserSpecialMailData() {
  SharedDtor();
}

void UserSpecialMailData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSpecialMailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSpecialMailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSpecialMailData_descriptor_;
}

const UserSpecialMailData& UserSpecialMailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

UserSpecialMailData* UserSpecialMailData::default_instance_ = NULL;

UserSpecialMailData* UserSpecialMailData::New() const {
  return new UserSpecialMailData;
}

void UserSpecialMailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    static_id_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSpecialMailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 static_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &static_id_)));
          set_has_static_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSpecialMailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 static_id = 1;
  if (has_static_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->static_id(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSpecialMailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 static_id = 1;
  if (has_static_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->static_id(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSpecialMailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 static_id = 1;
    if (has_static_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->static_id());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSpecialMailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSpecialMailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSpecialMailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSpecialMailData::MergeFrom(const UserSpecialMailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_static_id()) {
      set_static_id(from.static_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSpecialMailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSpecialMailData::CopyFrom(const UserSpecialMailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSpecialMailData::IsInitialized() const {

  return true;
}

void UserSpecialMailData::Swap(UserSpecialMailData* other) {
  if (other != this) {
    std::swap(static_id_, other->static_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSpecialMailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSpecialMailData_descriptor_;
  metadata.reflection = UserSpecialMailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMailInfo::kSimpleMailFieldNumber;
const int UserMailInfo::kReceiveDataFieldNumber;
const int UserMailInfo::kDelRoleMailFieldNumber;
#endif  // !_MSC_VER

UserMailInfo::UserMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMailInfo::InitAsDefaultInstance() {
}

UserMailInfo::UserMailInfo(const UserMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMailInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMailInfo::~UserMailInfo() {
  SharedDtor();
}

void UserMailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMailInfo_descriptor_;
}

const UserMailInfo& UserMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

UserMailInfo* UserMailInfo::default_instance_ = NULL;

UserMailInfo* UserMailInfo::New() const {
  return new UserMailInfo;
}

void UserMailInfo::Clear() {
  simple_mail_.Clear();
  receive_data_.Clear();
  del_role_mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SingleMailInfo simple_mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_simple_mail;
        if (input->ExpectTag(18)) goto parse_receive_data;
        break;
      }

      // repeated .proto_ff.UserSpecialMailData receive_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receive_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receive_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_receive_data;
        if (input->ExpectTag(32)) goto parse_del_role_mail;
        break;
      }

      // repeated uint64 del_role_mail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_role_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_del_role_mail())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_role_mail())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_del_role_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SingleMailInfo simple_mail = 1;
  for (int i = 0; i < this->simple_mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple_mail(i), output);
  }

  // repeated .proto_ff.UserSpecialMailData receive_data = 2;
  for (int i = 0; i < this->receive_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->receive_data(i), output);
  }

  // repeated uint64 del_role_mail = 4;
  for (int i = 0; i < this->del_role_mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->del_role_mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SingleMailInfo simple_mail = 1;
  for (int i = 0; i < this->simple_mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple_mail(i), target);
  }

  // repeated .proto_ff.UserSpecialMailData receive_data = 2;
  for (int i = 0; i < this->receive_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->receive_data(i), target);
  }

  // repeated uint64 del_role_mail = 4;
  for (int i = 0; i < this->del_role_mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->del_role_mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMailInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.SingleMailInfo simple_mail = 1;
  total_size += 1 * this->simple_mail_size();
  for (int i = 0; i < this->simple_mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_mail(i));
  }

  // repeated .proto_ff.UserSpecialMailData receive_data = 2;
  total_size += 1 * this->receive_data_size();
  for (int i = 0; i < this->receive_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receive_data(i));
  }

  // repeated uint64 del_role_mail = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_role_mail_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_role_mail(i));
    }
    total_size += 1 * this->del_role_mail_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMailInfo::MergeFrom(const UserMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_mail_.MergeFrom(from.simple_mail_);
  receive_data_.MergeFrom(from.receive_data_);
  del_role_mail_.MergeFrom(from.del_role_mail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMailInfo::CopyFrom(const UserMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMailInfo::IsInitialized() const {

  return true;
}

void UserMailInfo::Swap(UserMailInfo* other) {
  if (other != this) {
    simple_mail_.Swap(&other->simple_mail_);
    receive_data_.Swap(&other->receive_data_);
    del_role_mail_.Swap(&other->del_role_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMailInfo_descriptor_;
  metadata.reflection = UserMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbUserMailInfo::kUserIdFieldNumber;
const int tbUserMailInfo::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

tbUserMailInfo::tbUserMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbUserMailInfo::InitAsDefaultInstance() {
  base_info_ = const_cast< ::proto_ff::UserMailInfo*>(&::proto_ff::UserMailInfo::default_instance());
}

tbUserMailInfo::tbUserMailInfo(const tbUserMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbUserMailInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbUserMailInfo::~tbUserMailInfo() {
  SharedDtor();
}

void tbUserMailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void tbUserMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbUserMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbUserMailInfo_descriptor_;
}

const tbUserMailInfo& tbUserMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbUserMailInfo* tbUserMailInfo::default_instance_ = NULL;

tbUserMailInfo* tbUserMailInfo::New() const {
  return new tbUserMailInfo;
}

void tbUserMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::proto_ff::UserMailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbUserMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        break;
      }

      // optional .proto_ff.UserMailInfo base_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbUserMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_ff.UserMailInfo base_info = 2;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbUserMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_ff.UserMailInfo base_info = 2;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbUserMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_ff.UserMailInfo base_info = 2;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbUserMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbUserMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbUserMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbUserMailInfo::MergeFrom(const tbUserMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::proto_ff::UserMailInfo::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbUserMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbUserMailInfo::CopyFrom(const tbUserMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbUserMailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbUserMailInfo::Swap(tbUserMailInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbUserMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbUserMailInfo_descriptor_;
  metadata.reflection = tbUserMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbUserMailDetail::kIdFieldNumber;
const int tbUserMailDetail::kUserIdFieldNumber;
const int tbUserMailDetail::kSendNameFieldNumber;
const int tbUserMailDetail::kStaticIdFieldNumber;
const int tbUserMailDetail::kContentFieldNumber;
const int tbUserMailDetail::kTitleFieldNumber;
const int tbUserMailDetail::kSendTimeFieldNumber;
const int tbUserMailDetail::kMailNameFieldNumber;
const int tbUserMailDetail::kAddGoldFieldNumber;
#endif  // !_MSC_VER

tbUserMailDetail::tbUserMailDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbUserMailDetail::InitAsDefaultInstance() {
}

tbUserMailDetail::tbUserMailDetail(const tbUserMailDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbUserMailDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  static_id_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_time_ = GOOGLE_ULONGLONG(0);
  add_gold_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbUserMailDetail::~tbUserMailDetail() {
  SharedDtor();
}

void tbUserMailDetail::SharedDtor() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void tbUserMailDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbUserMailDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbUserMailDetail_descriptor_;
}

const tbUserMailDetail& tbUserMailDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbUserMailDetail* tbUserMailDetail::default_instance_ = NULL;

tbUserMailDetail* tbUserMailDetail::New() const {
  return new tbUserMailDetail;
}

void tbUserMailDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    static_id_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    send_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    add_gold_ = GOOGLE_LONGLONG(0);
  }
  mail_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbUserMailDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_name;
        break;
      }

      // optional string send_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_name().data(), this->send_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_static_id;
        break;
      }

      // optional int32 static_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_static_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &static_id_)));
          set_has_static_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_send_time;
        break;
      }

      // optional uint64 send_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mail_name;
        break;
      }

      // repeated string mail_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mail_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mail_name(this->mail_name_size() - 1).data(),
            this->mail_name(this->mail_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mail_name;
        if (input->ExpectTag(72)) goto parse_add_gold;
        break;
      }

      // optional int64 add_gold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_gold_)));
          set_has_add_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbUserMailDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string send_name = 3;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->send_name(), output);
  }

  // optional int32 static_id = 4;
  if (has_static_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->static_id(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }

  // optional uint64 send_time = 7;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->send_time(), output);
  }

  // repeated string mail_name = 8;
  for (int i = 0; i < this->mail_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mail_name(i).data(), this->mail_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mail_name(i), output);
  }

  // optional int64 add_gold = 9;
  if (has_add_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->add_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbUserMailDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string send_name = 3;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->send_name(), target);
  }

  // optional int32 static_id = 4;
  if (has_static_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->static_id(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }

  // optional uint64 send_time = 7;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->send_time(), target);
  }

  // repeated string mail_name = 8;
  for (int i = 0; i < this->mail_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mail_name(i).data(), this->mail_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->mail_name(i), target);
  }

  // optional int64 add_gold = 9;
  if (has_add_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->add_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbUserMailDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string send_name = 3;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_name());
    }

    // optional int32 static_id = 4;
    if (has_static_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->static_id());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint64 send_time = 7;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 add_gold = 9;
    if (has_add_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_gold());
    }

  }
  // repeated string mail_name = 8;
  total_size += 1 * this->mail_name_size();
  for (int i = 0; i < this->mail_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mail_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbUserMailDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbUserMailDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbUserMailDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbUserMailDetail::MergeFrom(const tbUserMailDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_name_.MergeFrom(from.mail_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_static_id()) {
      set_static_id(from.static_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_add_gold()) {
      set_add_gold(from.add_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbUserMailDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbUserMailDetail::CopyFrom(const tbUserMailDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbUserMailDetail::IsInitialized() const {

  return true;
}

void tbUserMailDetail::Swap(tbUserMailDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(send_name_, other->send_name_);
    std::swap(static_id_, other->static_id_);
    std::swap(content_, other->content_);
    std::swap(title_, other->title_);
    std::swap(send_time_, other->send_time_);
    mail_name_.Swap(&other->mail_name_);
    std::swap(add_gold_, other->add_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbUserMailDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbUserMailDetail_descriptor_;
  metadata.reflection = tbUserMailDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMailDetailInfo::kSimpleMailFieldNumber;
#endif  // !_MSC_VER

UserMailDetailInfo::UserMailDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMailDetailInfo::InitAsDefaultInstance() {
}

UserMailDetailInfo::UserMailDetailInfo(const UserMailDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMailDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMailDetailInfo::~UserMailDetailInfo() {
  SharedDtor();
}

void UserMailDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMailDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMailDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMailDetailInfo_descriptor_;
}

const UserMailDetailInfo& UserMailDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

UserMailDetailInfo* UserMailDetailInfo::default_instance_ = NULL;

UserMailDetailInfo* UserMailDetailInfo::New() const {
  return new UserMailDetailInfo;
}

void UserMailDetailInfo::Clear() {
  simple_mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMailDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.tbUserMailDetail simple_mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_simple_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMailDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.tbUserMailDetail simple_mail = 1;
  for (int i = 0; i < this->simple_mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple_mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMailDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.tbUserMailDetail simple_mail = 1;
  for (int i = 0; i < this->simple_mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple_mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMailDetailInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.tbUserMailDetail simple_mail = 1;
  total_size += 1 * this->simple_mail_size();
  for (int i = 0; i < this->simple_mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_mail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMailDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMailDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMailDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMailDetailInfo::MergeFrom(const UserMailDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_mail_.MergeFrom(from.simple_mail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMailDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMailDetailInfo::CopyFrom(const UserMailDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMailDetailInfo::IsInitialized() const {

  return true;
}

void UserMailDetailInfo::Swap(UserMailDetailInfo* other) {
  if (other != this) {
    simple_mail_.Swap(&other->simple_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMailDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMailDetailInfo_descriptor_;
  metadata.reflection = UserMailDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbGiveBankJetton::kIdFieldNumber;
const int tbGiveBankJetton::kUserIdFieldNumber;
const int tbGiveBankJetton::kUserNameFieldNumber;
const int tbGiveBankJetton::kUserVipLevelFieldNumber;
const int tbGiveBankJetton::kGiveUserIdFieldNumber;
const int tbGiveBankJetton::kGiveUserNameFieldNumber;
const int tbGiveBankJetton::kGiveJettonFieldNumber;
const int tbGiveBankJetton::kGiveUserVipLevelFieldNumber;
const int tbGiveBankJetton::kStatusFieldNumber;
const int tbGiveBankJetton::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

tbGiveBankJetton::tbGiveBankJetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbGiveBankJetton::InitAsDefaultInstance() {
}

tbGiveBankJetton::tbGiveBankJetton(const tbGiveBankJetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbGiveBankJetton::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_vip_level_ = GOOGLE_ULONGLONG(0);
  give_user_id_ = GOOGLE_ULONGLONG(0);
  give_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  give_jetton_ = GOOGLE_ULONGLONG(0);
  give_user_vip_level_ = 0u;
  status_ = 0u;
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbGiveBankJetton::~tbGiveBankJetton() {
  SharedDtor();
}

void tbGiveBankJetton::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (give_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete give_user_name_;
  }
  if (this != default_instance_) {
  }
}

void tbGiveBankJetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbGiveBankJetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbGiveBankJetton_descriptor_;
}

const tbGiveBankJetton& tbGiveBankJetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbGiveBankJetton* tbGiveBankJetton::default_instance_ = NULL;

tbGiveBankJetton* tbGiveBankJetton::New() const {
  return new tbGiveBankJetton;
}

void tbGiveBankJetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    user_vip_level_ = GOOGLE_ULONGLONG(0);
    give_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_give_user_name()) {
      if (give_user_name_ != &::google::protobuf::internal::kEmptyString) {
        give_user_name_->clear();
      }
    }
    give_jetton_ = GOOGLE_ULONGLONG(0);
    give_user_vip_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0u;
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbGiveBankJetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_vip_level;
        break;
      }

      // optional uint64 user_vip_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_vip_level_)));
          set_has_user_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_give_user_id;
        break;
      }

      // optional uint64 give_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &give_user_id_)));
          set_has_give_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_give_user_name;
        break;
      }

      // optional string give_user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_give_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_give_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->give_user_name().data(), this->give_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_give_jetton;
        break;
      }

      // optional uint64 give_jetton = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &give_jetton_)));
          set_has_give_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_give_user_vip_level;
        break;
      }

      // optional uint32 give_user_vip_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_user_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &give_user_vip_level_)));
          set_has_give_user_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // optional uint32 status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbGiveBankJetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional uint64 user_vip_level = 4;
  if (has_user_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->user_vip_level(), output);
  }

  // optional uint64 give_user_id = 5;
  if (has_give_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->give_user_id(), output);
  }

  // optional string give_user_name = 6;
  if (has_give_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->give_user_name().data(), this->give_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->give_user_name(), output);
  }

  // optional uint64 give_jetton = 7;
  if (has_give_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->give_jetton(), output);
  }

  // optional uint32 give_user_vip_level = 8;
  if (has_give_user_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->give_user_vip_level(), output);
  }

  // optional uint32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->status(), output);
  }

  // optional uint64 create_time = 10;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbGiveBankJetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional uint64 user_vip_level = 4;
  if (has_user_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->user_vip_level(), target);
  }

  // optional uint64 give_user_id = 5;
  if (has_give_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->give_user_id(), target);
  }

  // optional string give_user_name = 6;
  if (has_give_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->give_user_name().data(), this->give_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->give_user_name(), target);
  }

  // optional uint64 give_jetton = 7;
  if (has_give_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->give_jetton(), target);
  }

  // optional uint32 give_user_vip_level = 8;
  if (has_give_user_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->give_user_vip_level(), target);
  }

  // optional uint32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->status(), target);
  }

  // optional uint64 create_time = 10;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbGiveBankJetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 user_vip_level = 4;
    if (has_user_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_vip_level());
    }

    // optional uint64 give_user_id = 5;
    if (has_give_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->give_user_id());
    }

    // optional string give_user_name = 6;
    if (has_give_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->give_user_name());
    }

    // optional uint64 give_jetton = 7;
    if (has_give_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->give_jetton());
    }

    // optional uint32 give_user_vip_level = 8;
    if (has_give_user_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->give_user_vip_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 create_time = 10;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbGiveBankJetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbGiveBankJetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbGiveBankJetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbGiveBankJetton::MergeFrom(const tbGiveBankJetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_vip_level()) {
      set_user_vip_level(from.user_vip_level());
    }
    if (from.has_give_user_id()) {
      set_give_user_id(from.give_user_id());
    }
    if (from.has_give_user_name()) {
      set_give_user_name(from.give_user_name());
    }
    if (from.has_give_jetton()) {
      set_give_jetton(from.give_jetton());
    }
    if (from.has_give_user_vip_level()) {
      set_give_user_vip_level(from.give_user_vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbGiveBankJetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbGiveBankJetton::CopyFrom(const tbGiveBankJetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbGiveBankJetton::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbGiveBankJetton::Swap(tbGiveBankJetton* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(user_vip_level_, other->user_vip_level_);
    std::swap(give_user_id_, other->give_user_id_);
    std::swap(give_user_name_, other->give_user_name_);
    std::swap(give_jetton_, other->give_jetton_);
    std::swap(give_user_vip_level_, other->give_user_vip_level_);
    std::swap(status_, other->status_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbGiveBankJetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbGiveBankJetton_descriptor_;
  metadata.reflection = tbGiveBankJetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMiscData::kTmpPhoneNumFieldNumber;
const int UserMiscData::kTmpAuthCodeFieldNumber;
const int UserMiscData::kAuthCodeStampFieldNumber;
const int UserMiscData::kTmpCodeTypeFieldNumber;
const int UserMiscData::kTmpCodeSuccessFieldNumber;
const int UserMiscData::kTmpRedeemcardRechargeCountFieldNumber;
#endif  // !_MSC_VER

UserMiscData::UserMiscData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMiscData::InitAsDefaultInstance() {
}

UserMiscData::UserMiscData(const UserMiscData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMiscData::SharedCtor() {
  _cached_size_ = 0;
  tmp_phone_num_ = GOOGLE_ULONGLONG(0);
  tmp_auth_code_ = 0u;
  auth_code_stamp_ = GOOGLE_ULONGLONG(0);
  tmp_code_type_ = 0;
  tmp_code_success_ = false;
  tmp_redeemcard_recharge_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMiscData::~UserMiscData() {
  SharedDtor();
}

void UserMiscData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMiscData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMiscData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMiscData_descriptor_;
}

const UserMiscData& UserMiscData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

UserMiscData* UserMiscData::default_instance_ = NULL;

UserMiscData* UserMiscData::New() const {
  return new UserMiscData;
}

void UserMiscData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmp_phone_num_ = GOOGLE_ULONGLONG(0);
    tmp_auth_code_ = 0u;
    auth_code_stamp_ = GOOGLE_ULONGLONG(0);
    tmp_code_type_ = 0;
    tmp_code_success_ = false;
    tmp_redeemcard_recharge_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMiscData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tmp_phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tmp_phone_num_)));
          set_has_tmp_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tmp_auth_code;
        break;
      }

      // optional uint32 tmp_auth_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_auth_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmp_auth_code_)));
          set_has_tmp_auth_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auth_code_stamp;
        break;
      }

      // optional uint64 auth_code_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_code_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auth_code_stamp_)));
          set_has_auth_code_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tmp_code_type;
        break;
      }

      // optional int32 tmp_code_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmp_code_type_)));
          set_has_tmp_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tmp_code_success;
        break;
      }

      // optional bool tmp_code_success = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_code_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tmp_code_success_)));
          set_has_tmp_code_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tmp_redeemcard_recharge_count;
        break;
      }

      // optional int32 tmp_redeemcard_recharge_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_redeemcard_recharge_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmp_redeemcard_recharge_count_)));
          set_has_tmp_redeemcard_recharge_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMiscData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tmp_phone_num = 1;
  if (has_tmp_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tmp_phone_num(), output);
  }

  // optional uint32 tmp_auth_code = 2;
  if (has_tmp_auth_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tmp_auth_code(), output);
  }

  // optional uint64 auth_code_stamp = 3;
  if (has_auth_code_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->auth_code_stamp(), output);
  }

  // optional int32 tmp_code_type = 4;
  if (has_tmp_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tmp_code_type(), output);
  }

  // optional bool tmp_code_success = 5;
  if (has_tmp_code_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tmp_code_success(), output);
  }

  // optional int32 tmp_redeemcard_recharge_count = 6;
  if (has_tmp_redeemcard_recharge_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tmp_redeemcard_recharge_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMiscData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tmp_phone_num = 1;
  if (has_tmp_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tmp_phone_num(), target);
  }

  // optional uint32 tmp_auth_code = 2;
  if (has_tmp_auth_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tmp_auth_code(), target);
  }

  // optional uint64 auth_code_stamp = 3;
  if (has_auth_code_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->auth_code_stamp(), target);
  }

  // optional int32 tmp_code_type = 4;
  if (has_tmp_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tmp_code_type(), target);
  }

  // optional bool tmp_code_success = 5;
  if (has_tmp_code_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tmp_code_success(), target);
  }

  // optional int32 tmp_redeemcard_recharge_count = 6;
  if (has_tmp_redeemcard_recharge_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tmp_redeemcard_recharge_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMiscData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tmp_phone_num = 1;
    if (has_tmp_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tmp_phone_num());
    }

    // optional uint32 tmp_auth_code = 2;
    if (has_tmp_auth_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmp_auth_code());
    }

    // optional uint64 auth_code_stamp = 3;
    if (has_auth_code_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auth_code_stamp());
    }

    // optional int32 tmp_code_type = 4;
    if (has_tmp_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmp_code_type());
    }

    // optional bool tmp_code_success = 5;
    if (has_tmp_code_success()) {
      total_size += 1 + 1;
    }

    // optional int32 tmp_redeemcard_recharge_count = 6;
    if (has_tmp_redeemcard_recharge_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmp_redeemcard_recharge_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMiscData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMiscData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMiscData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMiscData::MergeFrom(const UserMiscData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmp_phone_num()) {
      set_tmp_phone_num(from.tmp_phone_num());
    }
    if (from.has_tmp_auth_code()) {
      set_tmp_auth_code(from.tmp_auth_code());
    }
    if (from.has_auth_code_stamp()) {
      set_auth_code_stamp(from.auth_code_stamp());
    }
    if (from.has_tmp_code_type()) {
      set_tmp_code_type(from.tmp_code_type());
    }
    if (from.has_tmp_code_success()) {
      set_tmp_code_success(from.tmp_code_success());
    }
    if (from.has_tmp_redeemcard_recharge_count()) {
      set_tmp_redeemcard_recharge_count(from.tmp_redeemcard_recharge_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMiscData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMiscData::CopyFrom(const UserMiscData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMiscData::IsInitialized() const {

  return true;
}

void UserMiscData::Swap(UserMiscData* other) {
  if (other != this) {
    std::swap(tmp_phone_num_, other->tmp_phone_num_);
    std::swap(tmp_auth_code_, other->tmp_auth_code_);
    std::swap(auth_code_stamp_, other->auth_code_stamp_);
    std::swap(tmp_code_type_, other->tmp_code_type_);
    std::swap(tmp_code_success_, other->tmp_code_success_);
    std::swap(tmp_redeemcard_recharge_count_, other->tmp_redeemcard_recharge_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMiscData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMiscData_descriptor_;
  metadata.reflection = UserMiscData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbUserDetailData::kUseridFieldNumber;
const int tbUserDetailData::kNicknameFieldNumber;
const int tbUserDetailData::kFaceidFieldNumber;
const int tbUserDetailData::kRegdateFieldNumber;
const int tbUserDetailData::kGenderFieldNumber;
const int tbUserDetailData::kAgeFieldNumber;
const int tbUserDetailData::kEmailFieldNumber;
const int tbUserDetailData::kPhonenumFieldNumber;
const int tbUserDetailData::kJettonFieldNumber;
const int tbUserDetailData::kCountryFieldNumber;
const int tbUserDetailData::kProvinceFieldNumber;
const int tbUserDetailData::kCityFieldNumber;
const int tbUserDetailData::kIsrobotFieldNumber;
const int tbUserDetailData::kBankPasswordFieldNumber;
const int tbUserDetailData::kBankJettonFieldNumber;
const int tbUserDetailData::kIpFieldNumber;
const int tbUserDetailData::kLastLoginTimeFieldNumber;
const int tbUserDetailData::kLastLogoutTimeFieldNumber;
const int tbUserDetailData::kAreadIdFieldNumber;
const int tbUserDetailData::kChannelIdFieldNumber;
const int tbUserDetailData::kPlatformOsFieldNumber;
const int tbUserDetailData::kPhoneModelFieldNumber;
const int tbUserDetailData::kFirstRechargeFieldNumber;
const int tbUserDetailData::kAgentIdFieldNumber;
const int tbUserDetailData::kReferrerIdFieldNumber;
const int tbUserDetailData::kVipLevelFieldNumber;
const int tbUserDetailData::kMiscDataFieldNumber;
const int tbUserDetailData::kOnlineFieldNumber;
const int tbUserDetailData::kGameIdFieldNumber;
const int tbUserDetailData::kRoomIdFieldNumber;
const int tbUserDetailData::kAllWinFieldNumber;
const int tbUserDetailData::kAllRechargeFieldNumber;
const int tbUserDetailData::kAllGiveFieldNumber;
const int tbUserDetailData::kAllDrawFieldNumber;
const int tbUserDetailData::kTodayWinFieldNumber;
const int tbUserDetailData::kTodayRechargeFieldNumber;
const int tbUserDetailData::kTodayGiveFieldNumber;
const int tbUserDetailData::kTodayDrawFieldNumber;
const int tbUserDetailData::kWeekWinFieldNumber;
const int tbUserDetailData::kWeekRechargeFieldNumber;
const int tbUserDetailData::kWeekGiveFieldNumber;
const int tbUserDetailData::kWeekDrawFieldNumber;
const int tbUserDetailData::kMonthWinFieldNumber;
const int tbUserDetailData::kMonthRechargeFieldNumber;
const int tbUserDetailData::kMonthGiveFieldNumber;
const int tbUserDetailData::kMonthDrawFieldNumber;
const int tbUserDetailData::kIsBanFieldNumber;
const int tbUserDetailData::kNoTransferFieldNumber;
const int tbUserDetailData::kRegIpFieldNumber;
const int tbUserDetailData::kDeviceIdFieldNumber;
const int tbUserDetailData::kRegDeviceIdFieldNumber;
const int tbUserDetailData::kShowUseridFieldNumber;
const int tbUserDetailData::kAllVipZhuanruFieldNumber;
const int tbUserDetailData::kTodayVipZhuanruFieldNumber;
const int tbUserDetailData::kWeekVipZhuanruFieldNumber;
const int tbUserDetailData::kMonthVipZhuanruFieldNumber;
const int tbUserDetailData::kAllVipZhuanchuFieldNumber;
const int tbUserDetailData::kTodayVipZhuanchuFieldNumber;
const int tbUserDetailData::kWeekVipZhuanchuFieldNumber;
const int tbUserDetailData::kMonthVipZhuanchuFieldNumber;
#endif  // !_MSC_VER

tbUserDetailData::tbUserDetailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbUserDetailData::InitAsDefaultInstance() {
  misc_data_ = const_cast< ::proto_ff::UserMiscData*>(&::proto_ff::UserMiscData::default_instance());
}

tbUserDetailData::tbUserDetailData(const tbUserDetailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbUserDetailData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faceid_ = 0u;
  regdate_ = GOOGLE_ULONGLONG(0);
  gender_ = 0u;
  age_ = 0u;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenum_ = GOOGLE_ULONGLONG(0);
  jetton_ = GOOGLE_ULONGLONG(0);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrobot_ = false;
  bank_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_login_time_ = GOOGLE_ULONGLONG(0);
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  aread_id_ = 0u;
  channel_id_ = 0u;
  platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  first_recharge_ = false;
  agent_id_ = GOOGLE_ULONGLONG(0);
  referrer_id_ = GOOGLE_ULONGLONG(0);
  vip_level_ = 0u;
  misc_data_ = NULL;
  online_ = false;
  game_id_ = 0u;
  room_id_ = 0u;
  all_win_ = GOOGLE_LONGLONG(0);
  all_recharge_ = GOOGLE_ULONGLONG(0);
  all_give_ = GOOGLE_ULONGLONG(0);
  all_draw_ = GOOGLE_ULONGLONG(0);
  today_win_ = GOOGLE_LONGLONG(0);
  today_recharge_ = GOOGLE_ULONGLONG(0);
  today_give_ = GOOGLE_ULONGLONG(0);
  today_draw_ = GOOGLE_ULONGLONG(0);
  week_win_ = GOOGLE_LONGLONG(0);
  week_recharge_ = GOOGLE_ULONGLONG(0);
  week_give_ = GOOGLE_ULONGLONG(0);
  week_draw_ = GOOGLE_ULONGLONG(0);
  month_win_ = GOOGLE_LONGLONG(0);
  month_recharge_ = GOOGLE_ULONGLONG(0);
  month_give_ = GOOGLE_ULONGLONG(0);
  month_draw_ = GOOGLE_ULONGLONG(0);
  is_ban_ = 0u;
  no_transfer_ = 0u;
  reg_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reg_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_userid_ = GOOGLE_ULONGLONG(0);
  all_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  today_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  week_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  month_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  all_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  today_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  week_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  month_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbUserDetailData::~tbUserDetailData() {
  SharedDtor();
}

void tbUserDetailData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_password_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_os_;
  }
  if (phone_model_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_model_;
  }
  if (reg_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete reg_ip_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (reg_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete reg_device_id_;
  }
  if (this != default_instance_) {
    delete misc_data_;
  }
}

void tbUserDetailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbUserDetailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbUserDetailData_descriptor_;
}

const tbUserDetailData& tbUserDetailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbUserDetailData* tbUserDetailData::default_instance_ = NULL;

tbUserDetailData* tbUserDetailData::New() const {
  return new tbUserDetailData;
}

void tbUserDetailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    faceid_ = 0u;
    regdate_ = GOOGLE_ULONGLONG(0);
    gender_ = 0u;
    age_ = 0u;
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    phonenum_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    jetton_ = GOOGLE_ULONGLONG(0);
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::kEmptyString) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
    isrobot_ = false;
    if (has_bank_password()) {
      if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
        bank_password_->clear();
      }
    }
    bank_jetton_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    last_login_time_ = GOOGLE_ULONGLONG(0);
    last_logout_time_ = GOOGLE_ULONGLONG(0);
    aread_id_ = 0u;
    channel_id_ = 0u;
    if (has_platform_os()) {
      if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
        platform_os_->clear();
      }
    }
    if (has_phone_model()) {
      if (phone_model_ != &::google::protobuf::internal::kEmptyString) {
        phone_model_->clear();
      }
    }
    first_recharge_ = false;
    agent_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    referrer_id_ = GOOGLE_ULONGLONG(0);
    vip_level_ = 0u;
    if (has_misc_data()) {
      if (misc_data_ != NULL) misc_data_->::proto_ff::UserMiscData::Clear();
    }
    online_ = false;
    game_id_ = 0u;
    room_id_ = 0u;
    all_win_ = GOOGLE_LONGLONG(0);
    all_recharge_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    all_give_ = GOOGLE_ULONGLONG(0);
    all_draw_ = GOOGLE_ULONGLONG(0);
    today_win_ = GOOGLE_LONGLONG(0);
    today_recharge_ = GOOGLE_ULONGLONG(0);
    today_give_ = GOOGLE_ULONGLONG(0);
    today_draw_ = GOOGLE_ULONGLONG(0);
    week_win_ = GOOGLE_LONGLONG(0);
    week_recharge_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    week_give_ = GOOGLE_ULONGLONG(0);
    week_draw_ = GOOGLE_ULONGLONG(0);
    month_win_ = GOOGLE_LONGLONG(0);
    month_recharge_ = GOOGLE_ULONGLONG(0);
    month_give_ = GOOGLE_ULONGLONG(0);
    month_draw_ = GOOGLE_ULONGLONG(0);
    is_ban_ = 0u;
    no_transfer_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_reg_ip()) {
      if (reg_ip_ != &::google::protobuf::internal::kEmptyString) {
        reg_ip_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_reg_device_id()) {
      if (reg_device_id_ != &::google::protobuf::internal::kEmptyString) {
        reg_device_id_->clear();
      }
    }
    show_userid_ = GOOGLE_ULONGLONG(0);
    all_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
    today_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
    week_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
    month_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    all_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
    today_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
    week_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
    month_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbUserDetailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_faceid;
        break;
      }

      // optional uint32 faceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_regdate;
        break;
      }

      // optional uint64 regdate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &regdate_)));
          set_has_regdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_age;
        break;
      }

      // optional uint32 age = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // optional string email = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_phonenum;
        break;
      }

      // optional uint64 phonenum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phonenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jetton;
        break;
      }

      // optional uint64 jetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_country;
        break;
      }

      // optional string country = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_province;
        break;
      }

      // optional string province = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_city;
        break;
      }

      // optional string city = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isrobot;
        break;
      }

      // optional bool isrobot = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bank_password;
        break;
      }

      // optional string bank_password = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_password().data(), this->bank_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bank_jetton;
        break;
      }

      // optional uint64 bank_jetton = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_jetton_)));
          set_has_bank_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_ip;
        break;
      }

      // optional string ip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_last_login_time;
        break;
      }

      // optional uint64 last_login_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_last_logout_time;
        break;
      }

      // optional uint64 last_logout_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_aread_id;
        break;
      }

      // optional uint32 aread_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aread_id_)));
          set_has_aread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_platform_os;
        break;
      }

      // optional string platform_os = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform_os().data(), this->platform_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_phone_model;
        break;
      }

      // optional string phone_model = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_model().data(), this->phone_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_first_recharge;
        break;
      }

      // optional bool first_recharge = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_recharge_)));
          set_has_first_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_agent_id;
        break;
      }

      // optional uint64 agent_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_referrer_id;
        break;
      }

      // optional uint64 referrer_id = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referrer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &referrer_id_)));
          set_has_referrer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_misc_data;
        break;
      }

      // optional .proto_ff.UserMiscData misc_data = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_misc_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misc_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_online;
        break;
      }

      // optional bool online = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_all_win;
        break;
      }

      // optional int64 all_win = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_win_)));
          set_has_all_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_all_recharge;
        break;
      }

      // optional uint64 all_recharge = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_recharge_)));
          set_has_all_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_all_give;
        break;
      }

      // optional uint64 all_give = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_give_)));
          set_has_all_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_all_draw;
        break;
      }

      // optional uint64 all_draw = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_draw_)));
          set_has_all_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_today_win;
        break;
      }

      // optional int64 today_win = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_win_)));
          set_has_today_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_today_recharge;
        break;
      }

      // optional uint64 today_recharge = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_recharge_)));
          set_has_today_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_today_give;
        break;
      }

      // optional uint64 today_give = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_give_)));
          set_has_today_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_today_draw;
        break;
      }

      // optional uint64 today_draw = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_draw_)));
          set_has_today_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_week_win;
        break;
      }

      // optional int64 week_win = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &week_win_)));
          set_has_week_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_week_recharge;
        break;
      }

      // optional uint64 week_recharge = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_recharge_)));
          set_has_week_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_week_give;
        break;
      }

      // optional uint64 week_give = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_give_)));
          set_has_week_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_week_draw;
        break;
      }

      // optional uint64 week_draw = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_draw_)));
          set_has_week_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_month_win;
        break;
      }

      // optional int64 month_win = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &month_win_)));
          set_has_month_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_month_recharge;
        break;
      }

      // optional uint64 month_recharge = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &month_recharge_)));
          set_has_month_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_month_give;
        break;
      }

      // optional uint64 month_give = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &month_give_)));
          set_has_month_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_month_draw;
        break;
      }

      // optional uint64 month_draw = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &month_draw_)));
          set_has_month_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_is_ban;
        break;
      }

      // optional uint32 is_ban = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ban_)));
          set_has_is_ban();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_no_transfer;
        break;
      }

      // optional uint32 no_transfer = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_transfer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &no_transfer_)));
          set_has_no_transfer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_reg_ip;
        break;
      }

      // optional string reg_ip = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reg_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reg_ip().data(), this->reg_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_device_id;
        break;
      }

      // optional string device_id = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_reg_device_id;
        break;
      }

      // optional string reg_device_id = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reg_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reg_device_id().data(), this->reg_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_show_userid;
        break;
      }

      // optional uint64 show_userid = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_userid_)));
          set_has_show_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_all_vip_zhuanru;
        break;
      }

      // optional uint64 all_vip_zhuanru = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_vip_zhuanru_)));
          set_has_all_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_today_vip_zhuanru;
        break;
      }

      // optional uint64 today_vip_zhuanru = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_vip_zhuanru_)));
          set_has_today_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_week_vip_zhuanru;
        break;
      }

      // optional uint64 week_vip_zhuanru = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_vip_zhuanru_)));
          set_has_week_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_month_vip_zhuanru;
        break;
      }

      // optional uint64 month_vip_zhuanru = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &month_vip_zhuanru_)));
          set_has_month_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_all_vip_zhuanchu;
        break;
      }

      // optional uint64 all_vip_zhuanchu = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_vip_zhuanchu_)));
          set_has_all_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_today_vip_zhuanchu;
        break;
      }

      // optional uint64 today_vip_zhuanchu = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_vip_zhuanchu_)));
          set_has_today_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_week_vip_zhuanchu;
        break;
      }

      // optional uint64 week_vip_zhuanchu = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_vip_zhuanchu_)));
          set_has_week_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_month_vip_zhuanchu;
        break;
      }

      // optional uint64 month_vip_zhuanchu = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &month_vip_zhuanchu_)));
          set_has_month_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbUserDetailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 faceid = 3;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->faceid(), output);
  }

  // optional uint64 regdate = 4;
  if (has_regdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->regdate(), output);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gender(), output);
  }

  // optional uint32 age = 6;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->age(), output);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->email(), output);
  }

  // optional uint64 phonenum = 8;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->phonenum(), output);
  }

  // optional uint64 jetton = 9;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->jetton(), output);
  }

  // optional string country = 10;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->country(), output);
  }

  // optional string province = 11;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->province(), output);
  }

  // optional string city = 12;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->city(), output);
  }

  // optional bool isrobot = 13;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isrobot(), output);
  }

  // optional string bank_password = 14;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->bank_password(), output);
  }

  // optional uint64 bank_jetton = 15;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->bank_jetton(), output);
  }

  // optional string ip = 16;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->ip(), output);
  }

  // optional uint64 last_login_time = 17;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->last_login_time(), output);
  }

  // optional uint64 last_logout_time = 18;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->last_logout_time(), output);
  }

  // optional uint32 aread_id = 19;
  if (has_aread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->aread_id(), output);
  }

  // optional uint32 channel_id = 20;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->channel_id(), output);
  }

  // optional string platform_os = 21;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->platform_os(), output);
  }

  // optional string phone_model = 22;
  if (has_phone_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_model().data(), this->phone_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->phone_model(), output);
  }

  // optional bool first_recharge = 23;
  if (has_first_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->first_recharge(), output);
  }

  // optional uint64 agent_id = 24;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->agent_id(), output);
  }

  // optional uint64 referrer_id = 25;
  if (has_referrer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->referrer_id(), output);
  }

  // optional uint32 vip_level = 26;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->vip_level(), output);
  }

  // optional .proto_ff.UserMiscData misc_data = 27;
  if (has_misc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->misc_data(), output);
  }

  // optional bool online = 28;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->online(), output);
  }

  // optional uint32 game_id = 29;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->game_id(), output);
  }

  // optional uint32 room_id = 30;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->room_id(), output);
  }

  // optional int64 all_win = 31;
  if (has_all_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->all_win(), output);
  }

  // optional uint64 all_recharge = 32;
  if (has_all_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->all_recharge(), output);
  }

  // optional uint64 all_give = 33;
  if (has_all_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->all_give(), output);
  }

  // optional uint64 all_draw = 34;
  if (has_all_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->all_draw(), output);
  }

  // optional int64 today_win = 35;
  if (has_today_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->today_win(), output);
  }

  // optional uint64 today_recharge = 36;
  if (has_today_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->today_recharge(), output);
  }

  // optional uint64 today_give = 37;
  if (has_today_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->today_give(), output);
  }

  // optional uint64 today_draw = 38;
  if (has_today_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->today_draw(), output);
  }

  // optional int64 week_win = 39;
  if (has_week_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->week_win(), output);
  }

  // optional uint64 week_recharge = 40;
  if (has_week_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->week_recharge(), output);
  }

  // optional uint64 week_give = 41;
  if (has_week_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(41, this->week_give(), output);
  }

  // optional uint64 week_draw = 42;
  if (has_week_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(42, this->week_draw(), output);
  }

  // optional int64 month_win = 43;
  if (has_month_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->month_win(), output);
  }

  // optional uint64 month_recharge = 44;
  if (has_month_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->month_recharge(), output);
  }

  // optional uint64 month_give = 45;
  if (has_month_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->month_give(), output);
  }

  // optional uint64 month_draw = 46;
  if (has_month_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(46, this->month_draw(), output);
  }

  // optional uint32 is_ban = 47;
  if (has_is_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->is_ban(), output);
  }

  // optional uint32 no_transfer = 48;
  if (has_no_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->no_transfer(), output);
  }

  // optional string reg_ip = 49;
  if (has_reg_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reg_ip().data(), this->reg_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      49, this->reg_ip(), output);
  }

  // optional string device_id = 50;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->device_id(), output);
  }

  // optional string reg_device_id = 51;
  if (has_reg_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reg_device_id().data(), this->reg_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->reg_device_id(), output);
  }

  // optional uint64 show_userid = 52;
  if (has_show_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->show_userid(), output);
  }

  // optional uint64 all_vip_zhuanru = 53;
  if (has_all_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->all_vip_zhuanru(), output);
  }

  // optional uint64 today_vip_zhuanru = 54;
  if (has_today_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(54, this->today_vip_zhuanru(), output);
  }

  // optional uint64 week_vip_zhuanru = 55;
  if (has_week_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(55, this->week_vip_zhuanru(), output);
  }

  // optional uint64 month_vip_zhuanru = 56;
  if (has_month_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(56, this->month_vip_zhuanru(), output);
  }

  // optional uint64 all_vip_zhuanchu = 57;
  if (has_all_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(57, this->all_vip_zhuanchu(), output);
  }

  // optional uint64 today_vip_zhuanchu = 58;
  if (has_today_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(58, this->today_vip_zhuanchu(), output);
  }

  // optional uint64 week_vip_zhuanchu = 59;
  if (has_week_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(59, this->week_vip_zhuanchu(), output);
  }

  // optional uint64 month_vip_zhuanchu = 60;
  if (has_month_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->month_vip_zhuanchu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbUserDetailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 faceid = 3;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->faceid(), target);
  }

  // optional uint64 regdate = 4;
  if (has_regdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->regdate(), target);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gender(), target);
  }

  // optional uint32 age = 6;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->age(), target);
  }

  // optional string email = 7;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  // optional uint64 phonenum = 8;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->phonenum(), target);
  }

  // optional uint64 jetton = 9;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->jetton(), target);
  }

  // optional string country = 10;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->country(), target);
  }

  // optional string province = 11;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->province(), target);
  }

  // optional string city = 12;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->city(), target);
  }

  // optional bool isrobot = 13;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isrobot(), target);
  }

  // optional string bank_password = 14;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bank_password(), target);
  }

  // optional uint64 bank_jetton = 15;
  if (has_bank_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->bank_jetton(), target);
  }

  // optional string ip = 16;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->ip(), target);
  }

  // optional uint64 last_login_time = 17;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->last_login_time(), target);
  }

  // optional uint64 last_logout_time = 18;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->last_logout_time(), target);
  }

  // optional uint32 aread_id = 19;
  if (has_aread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->aread_id(), target);
  }

  // optional uint32 channel_id = 20;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->channel_id(), target);
  }

  // optional string platform_os = 21;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->platform_os(), target);
  }

  // optional string phone_model = 22;
  if (has_phone_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_model().data(), this->phone_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->phone_model(), target);
  }

  // optional bool first_recharge = 23;
  if (has_first_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->first_recharge(), target);
  }

  // optional uint64 agent_id = 24;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->agent_id(), target);
  }

  // optional uint64 referrer_id = 25;
  if (has_referrer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->referrer_id(), target);
  }

  // optional uint32 vip_level = 26;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->vip_level(), target);
  }

  // optional .proto_ff.UserMiscData misc_data = 27;
  if (has_misc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->misc_data(), target);
  }

  // optional bool online = 28;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->online(), target);
  }

  // optional uint32 game_id = 29;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->game_id(), target);
  }

  // optional uint32 room_id = 30;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->room_id(), target);
  }

  // optional int64 all_win = 31;
  if (has_all_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->all_win(), target);
  }

  // optional uint64 all_recharge = 32;
  if (has_all_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->all_recharge(), target);
  }

  // optional uint64 all_give = 33;
  if (has_all_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->all_give(), target);
  }

  // optional uint64 all_draw = 34;
  if (has_all_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->all_draw(), target);
  }

  // optional int64 today_win = 35;
  if (has_today_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->today_win(), target);
  }

  // optional uint64 today_recharge = 36;
  if (has_today_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->today_recharge(), target);
  }

  // optional uint64 today_give = 37;
  if (has_today_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->today_give(), target);
  }

  // optional uint64 today_draw = 38;
  if (has_today_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->today_draw(), target);
  }

  // optional int64 week_win = 39;
  if (has_week_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->week_win(), target);
  }

  // optional uint64 week_recharge = 40;
  if (has_week_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->week_recharge(), target);
  }

  // optional uint64 week_give = 41;
  if (has_week_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(41, this->week_give(), target);
  }

  // optional uint64 week_draw = 42;
  if (has_week_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(42, this->week_draw(), target);
  }

  // optional int64 month_win = 43;
  if (has_month_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->month_win(), target);
  }

  // optional uint64 month_recharge = 44;
  if (has_month_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->month_recharge(), target);
  }

  // optional uint64 month_give = 45;
  if (has_month_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->month_give(), target);
  }

  // optional uint64 month_draw = 46;
  if (has_month_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(46, this->month_draw(), target);
  }

  // optional uint32 is_ban = 47;
  if (has_is_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->is_ban(), target);
  }

  // optional uint32 no_transfer = 48;
  if (has_no_transfer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->no_transfer(), target);
  }

  // optional string reg_ip = 49;
  if (has_reg_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reg_ip().data(), this->reg_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->reg_ip(), target);
  }

  // optional string device_id = 50;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->device_id(), target);
  }

  // optional string reg_device_id = 51;
  if (has_reg_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reg_device_id().data(), this->reg_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->reg_device_id(), target);
  }

  // optional uint64 show_userid = 52;
  if (has_show_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->show_userid(), target);
  }

  // optional uint64 all_vip_zhuanru = 53;
  if (has_all_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->all_vip_zhuanru(), target);
  }

  // optional uint64 today_vip_zhuanru = 54;
  if (has_today_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(54, this->today_vip_zhuanru(), target);
  }

  // optional uint64 week_vip_zhuanru = 55;
  if (has_week_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(55, this->week_vip_zhuanru(), target);
  }

  // optional uint64 month_vip_zhuanru = 56;
  if (has_month_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(56, this->month_vip_zhuanru(), target);
  }

  // optional uint64 all_vip_zhuanchu = 57;
  if (has_all_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(57, this->all_vip_zhuanchu(), target);
  }

  // optional uint64 today_vip_zhuanchu = 58;
  if (has_today_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(58, this->today_vip_zhuanchu(), target);
  }

  // optional uint64 week_vip_zhuanchu = 59;
  if (has_week_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(59, this->week_vip_zhuanchu(), target);
  }

  // optional uint64 month_vip_zhuanchu = 60;
  if (has_month_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->month_vip_zhuanchu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbUserDetailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 faceid = 3;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faceid());
    }

    // optional uint64 regdate = 4;
    if (has_regdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->regdate());
    }

    // optional uint32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 age = 6;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional string email = 7;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional uint64 phonenum = 8;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phonenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 jetton = 9;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton());
    }

    // optional string country = 10;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string province = 11;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 12;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional bool isrobot = 13;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

    // optional string bank_password = 14;
    if (has_bank_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_password());
    }

    // optional uint64 bank_jetton = 15;
    if (has_bank_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_jetton());
    }

    // optional string ip = 16;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 last_login_time = 17;
    if (has_last_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_login_time());
    }

    // optional uint64 last_logout_time = 18;
    if (has_last_logout_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_logout_time());
    }

    // optional uint32 aread_id = 19;
    if (has_aread_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aread_id());
    }

    // optional uint32 channel_id = 20;
    if (has_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string platform_os = 21;
    if (has_platform_os()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_os());
    }

    // optional string phone_model = 22;
    if (has_phone_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_model());
    }

    // optional bool first_recharge = 23;
    if (has_first_recharge()) {
      total_size += 2 + 1;
    }

    // optional uint64 agent_id = 24;
    if (has_agent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agent_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 referrer_id = 25;
    if (has_referrer_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->referrer_id());
    }

    // optional uint32 vip_level = 26;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional .proto_ff.UserMiscData misc_data = 27;
    if (has_misc_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misc_data());
    }

    // optional bool online = 28;
    if (has_online()) {
      total_size += 2 + 1;
    }

    // optional uint32 game_id = 29;
    if (has_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 30;
    if (has_room_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional int64 all_win = 31;
    if (has_all_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_win());
    }

    // optional uint64 all_recharge = 32;
    if (has_all_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_recharge());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 all_give = 33;
    if (has_all_give()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_give());
    }

    // optional uint64 all_draw = 34;
    if (has_all_draw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_draw());
    }

    // optional int64 today_win = 35;
    if (has_today_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_win());
    }

    // optional uint64 today_recharge = 36;
    if (has_today_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_recharge());
    }

    // optional uint64 today_give = 37;
    if (has_today_give()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_give());
    }

    // optional uint64 today_draw = 38;
    if (has_today_draw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_draw());
    }

    // optional int64 week_win = 39;
    if (has_week_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->week_win());
    }

    // optional uint64 week_recharge = 40;
    if (has_week_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_recharge());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint64 week_give = 41;
    if (has_week_give()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_give());
    }

    // optional uint64 week_draw = 42;
    if (has_week_draw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_draw());
    }

    // optional int64 month_win = 43;
    if (has_month_win()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->month_win());
    }

    // optional uint64 month_recharge = 44;
    if (has_month_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->month_recharge());
    }

    // optional uint64 month_give = 45;
    if (has_month_give()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->month_give());
    }

    // optional uint64 month_draw = 46;
    if (has_month_draw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->month_draw());
    }

    // optional uint32 is_ban = 47;
    if (has_is_ban()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ban());
    }

    // optional uint32 no_transfer = 48;
    if (has_no_transfer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->no_transfer());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string reg_ip = 49;
    if (has_reg_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reg_ip());
    }

    // optional string device_id = 50;
    if (has_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string reg_device_id = 51;
    if (has_reg_device_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reg_device_id());
    }

    // optional uint64 show_userid = 52;
    if (has_show_userid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_userid());
    }

    // optional uint64 all_vip_zhuanru = 53;
    if (has_all_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_vip_zhuanru());
    }

    // optional uint64 today_vip_zhuanru = 54;
    if (has_today_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_vip_zhuanru());
    }

    // optional uint64 week_vip_zhuanru = 55;
    if (has_week_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_vip_zhuanru());
    }

    // optional uint64 month_vip_zhuanru = 56;
    if (has_month_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->month_vip_zhuanru());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint64 all_vip_zhuanchu = 57;
    if (has_all_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_vip_zhuanchu());
    }

    // optional uint64 today_vip_zhuanchu = 58;
    if (has_today_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_vip_zhuanchu());
    }

    // optional uint64 week_vip_zhuanchu = 59;
    if (has_week_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_vip_zhuanchu());
    }

    // optional uint64 month_vip_zhuanchu = 60;
    if (has_month_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->month_vip_zhuanchu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbUserDetailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbUserDetailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbUserDetailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbUserDetailData::MergeFrom(const tbUserDetailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_regdate()) {
      set_regdate(from.regdate());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_bank_password()) {
      set_bank_password(from.bank_password());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_aread_id()) {
      set_aread_id(from.aread_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_platform_os()) {
      set_platform_os(from.platform_os());
    }
    if (from.has_phone_model()) {
      set_phone_model(from.phone_model());
    }
    if (from.has_first_recharge()) {
      set_first_recharge(from.first_recharge());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_referrer_id()) {
      set_referrer_id(from.referrer_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_misc_data()) {
      mutable_misc_data()->::proto_ff::UserMiscData::MergeFrom(from.misc_data());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_all_win()) {
      set_all_win(from.all_win());
    }
    if (from.has_all_recharge()) {
      set_all_recharge(from.all_recharge());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_all_give()) {
      set_all_give(from.all_give());
    }
    if (from.has_all_draw()) {
      set_all_draw(from.all_draw());
    }
    if (from.has_today_win()) {
      set_today_win(from.today_win());
    }
    if (from.has_today_recharge()) {
      set_today_recharge(from.today_recharge());
    }
    if (from.has_today_give()) {
      set_today_give(from.today_give());
    }
    if (from.has_today_draw()) {
      set_today_draw(from.today_draw());
    }
    if (from.has_week_win()) {
      set_week_win(from.week_win());
    }
    if (from.has_week_recharge()) {
      set_week_recharge(from.week_recharge());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_week_give()) {
      set_week_give(from.week_give());
    }
    if (from.has_week_draw()) {
      set_week_draw(from.week_draw());
    }
    if (from.has_month_win()) {
      set_month_win(from.month_win());
    }
    if (from.has_month_recharge()) {
      set_month_recharge(from.month_recharge());
    }
    if (from.has_month_give()) {
      set_month_give(from.month_give());
    }
    if (from.has_month_draw()) {
      set_month_draw(from.month_draw());
    }
    if (from.has_is_ban()) {
      set_is_ban(from.is_ban());
    }
    if (from.has_no_transfer()) {
      set_no_transfer(from.no_transfer());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_reg_ip()) {
      set_reg_ip(from.reg_ip());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_reg_device_id()) {
      set_reg_device_id(from.reg_device_id());
    }
    if (from.has_show_userid()) {
      set_show_userid(from.show_userid());
    }
    if (from.has_all_vip_zhuanru()) {
      set_all_vip_zhuanru(from.all_vip_zhuanru());
    }
    if (from.has_today_vip_zhuanru()) {
      set_today_vip_zhuanru(from.today_vip_zhuanru());
    }
    if (from.has_week_vip_zhuanru()) {
      set_week_vip_zhuanru(from.week_vip_zhuanru());
    }
    if (from.has_month_vip_zhuanru()) {
      set_month_vip_zhuanru(from.month_vip_zhuanru());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_all_vip_zhuanchu()) {
      set_all_vip_zhuanchu(from.all_vip_zhuanchu());
    }
    if (from.has_today_vip_zhuanchu()) {
      set_today_vip_zhuanchu(from.today_vip_zhuanchu());
    }
    if (from.has_week_vip_zhuanchu()) {
      set_week_vip_zhuanchu(from.week_vip_zhuanchu());
    }
    if (from.has_month_vip_zhuanchu()) {
      set_month_vip_zhuanchu(from.month_vip_zhuanchu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbUserDetailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbUserDetailData::CopyFrom(const tbUserDetailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbUserDetailData::IsInitialized() const {

  return true;
}

void tbUserDetailData::Swap(tbUserDetailData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(faceid_, other->faceid_);
    std::swap(regdate_, other->regdate_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(email_, other->email_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(jetton_, other->jetton_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(bank_password_, other->bank_password_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(ip_, other->ip_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(aread_id_, other->aread_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(platform_os_, other->platform_os_);
    std::swap(phone_model_, other->phone_model_);
    std::swap(first_recharge_, other->first_recharge_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(referrer_id_, other->referrer_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(misc_data_, other->misc_data_);
    std::swap(online_, other->online_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(all_win_, other->all_win_);
    std::swap(all_recharge_, other->all_recharge_);
    std::swap(all_give_, other->all_give_);
    std::swap(all_draw_, other->all_draw_);
    std::swap(today_win_, other->today_win_);
    std::swap(today_recharge_, other->today_recharge_);
    std::swap(today_give_, other->today_give_);
    std::swap(today_draw_, other->today_draw_);
    std::swap(week_win_, other->week_win_);
    std::swap(week_recharge_, other->week_recharge_);
    std::swap(week_give_, other->week_give_);
    std::swap(week_draw_, other->week_draw_);
    std::swap(month_win_, other->month_win_);
    std::swap(month_recharge_, other->month_recharge_);
    std::swap(month_give_, other->month_give_);
    std::swap(month_draw_, other->month_draw_);
    std::swap(is_ban_, other->is_ban_);
    std::swap(no_transfer_, other->no_transfer_);
    std::swap(reg_ip_, other->reg_ip_);
    std::swap(device_id_, other->device_id_);
    std::swap(reg_device_id_, other->reg_device_id_);
    std::swap(show_userid_, other->show_userid_);
    std::swap(all_vip_zhuanru_, other->all_vip_zhuanru_);
    std::swap(today_vip_zhuanru_, other->today_vip_zhuanru_);
    std::swap(week_vip_zhuanru_, other->week_vip_zhuanru_);
    std::swap(month_vip_zhuanru_, other->month_vip_zhuanru_);
    std::swap(all_vip_zhuanchu_, other->all_vip_zhuanchu_);
    std::swap(today_vip_zhuanchu_, other->today_vip_zhuanchu_);
    std::swap(week_vip_zhuanchu_, other->week_vip_zhuanchu_);
    std::swap(month_vip_zhuanchu_, other->month_vip_zhuanchu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbUserDetailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbUserDetailData_descriptor_;
  metadata.reflection = tbUserDetailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSimpleMiscData::kLastValidPlayerTimeFieldNumber;
const int UserSimpleMiscData::kLastPayPlayerTimeFieldNumber;
#endif  // !_MSC_VER

UserSimpleMiscData::UserSimpleMiscData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSimpleMiscData::InitAsDefaultInstance() {
}

UserSimpleMiscData::UserSimpleMiscData(const UserSimpleMiscData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSimpleMiscData::SharedCtor() {
  _cached_size_ = 0;
  last_valid_player_time_ = GOOGLE_ULONGLONG(0);
  last_pay_player_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSimpleMiscData::~UserSimpleMiscData() {
  SharedDtor();
}

void UserSimpleMiscData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSimpleMiscData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSimpleMiscData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSimpleMiscData_descriptor_;
}

const UserSimpleMiscData& UserSimpleMiscData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

UserSimpleMiscData* UserSimpleMiscData::default_instance_ = NULL;

UserSimpleMiscData* UserSimpleMiscData::New() const {
  return new UserSimpleMiscData;
}

void UserSimpleMiscData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_valid_player_time_ = GOOGLE_ULONGLONG(0);
    last_pay_player_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSimpleMiscData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_valid_player_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_valid_player_time_)));
          set_has_last_valid_player_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_pay_player_time;
        break;
      }

      // optional uint64 last_pay_player_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_pay_player_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_pay_player_time_)));
          set_has_last_pay_player_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSimpleMiscData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_valid_player_time = 1;
  if (has_last_valid_player_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_valid_player_time(), output);
  }

  // optional uint64 last_pay_player_time = 2;
  if (has_last_pay_player_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_pay_player_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSimpleMiscData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 last_valid_player_time = 1;
  if (has_last_valid_player_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_valid_player_time(), target);
  }

  // optional uint64 last_pay_player_time = 2;
  if (has_last_pay_player_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_pay_player_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSimpleMiscData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_valid_player_time = 1;
    if (has_last_valid_player_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_valid_player_time());
    }

    // optional uint64 last_pay_player_time = 2;
    if (has_last_pay_player_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_pay_player_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSimpleMiscData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSimpleMiscData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSimpleMiscData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSimpleMiscData::MergeFrom(const UserSimpleMiscData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_valid_player_time()) {
      set_last_valid_player_time(from.last_valid_player_time());
    }
    if (from.has_last_pay_player_time()) {
      set_last_pay_player_time(from.last_pay_player_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSimpleMiscData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSimpleMiscData::CopyFrom(const UserSimpleMiscData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSimpleMiscData::IsInitialized() const {

  return true;
}

void UserSimpleMiscData::Swap(UserSimpleMiscData* other) {
  if (other != this) {
    std::swap(last_valid_player_time_, other->last_valid_player_time_);
    std::swap(last_pay_player_time_, other->last_pay_player_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSimpleMiscData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSimpleMiscData_descriptor_;
  metadata.reflection = UserSimpleMiscData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbUserSimpleData::kUseridFieldNumber;
const int tbUserSimpleData::kNicknameFieldNumber;
const int tbUserSimpleData::kFaceFieldNumber;
const int tbUserSimpleData::kGenderFieldNumber;
const int tbUserSimpleData::kAgeFieldNumber;
const int tbUserSimpleData::kAgentidFieldNumber;
const int tbUserSimpleData::kCreateTimeFieldNumber;
const int tbUserSimpleData::kIsRobotFieldNumber;
const int tbUserSimpleData::kAgentLevelFieldNumber;
const int tbUserSimpleData::kAchDayFieldNumber;
const int tbUserSimpleData::kAchWeekFieldNumber;
const int tbUserSimpleData::kAchMonthFieldNumber;
const int tbUserSimpleData::kAchAllFieldNumber;
const int tbUserSimpleData::kAchTeamDayFieldNumber;
const int tbUserSimpleData::kAchTeamWeekFieldNumber;
const int tbUserSimpleData::kAchTeamMonthFieldNumber;
const int tbUserSimpleData::kAchTeamAllFieldNumber;
const int tbUserSimpleData::kTeamUserNumFieldNumber;
const int tbUserSimpleData::kNewUserDayFieldNumber;
const int tbUserSimpleData::kActivityUserDayFieldNumber;
const int tbUserSimpleData::kGetrateFieldNumber;
const int tbUserSimpleData::kTaxGetrateFieldNumber;
const int tbUserSimpleData::kTakemoneyFieldNumber;
const int tbUserSimpleData::kTaxTakemoneyFieldNumber;
const int tbUserSimpleData::kAllTakemoneyFieldNumber;
const int tbUserSimpleData::kAllFeeFieldNumber;
const int tbUserSimpleData::kShowUseridFieldNumber;
const int tbUserSimpleData::kVipLevelFieldNumber;
const int tbUserSimpleData::kMiscDataFieldNumber;
#endif  // !_MSC_VER

tbUserSimpleData::tbUserSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbUserSimpleData::InitAsDefaultInstance() {
  misc_data_ = const_cast< ::proto_ff::UserSimpleMiscData*>(&::proto_ff::UserSimpleMiscData::default_instance());
}

tbUserSimpleData::tbUserSimpleData(const tbUserSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbUserSimpleData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = 0u;
  gender_ = 0u;
  age_ = 0u;
  agentid_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  is_robot_ = false;
  agent_level_ = 0u;
  ach_day_ = GOOGLE_ULONGLONG(0);
  ach_week_ = GOOGLE_ULONGLONG(0);
  ach_month_ = GOOGLE_ULONGLONG(0);
  ach_all_ = GOOGLE_ULONGLONG(0);
  ach_team_day_ = GOOGLE_ULONGLONG(0);
  ach_team_week_ = GOOGLE_ULONGLONG(0);
  ach_team_month_ = GOOGLE_ULONGLONG(0);
  ach_team_all_ = GOOGLE_ULONGLONG(0);
  team_user_num_ = GOOGLE_ULONGLONG(0);
  new_user_day_ = GOOGLE_ULONGLONG(0);
  activity_user_day_ = GOOGLE_ULONGLONG(0);
  getrate_ = 0u;
  tax_getrate_ = 0u;
  takemoney_ = 0u;
  tax_takemoney_ = 0u;
  all_takemoney_ = GOOGLE_ULONGLONG(0);
  all_fee_ = GOOGLE_ULONGLONG(0);
  show_userid_ = GOOGLE_ULONGLONG(0);
  vip_level_ = GOOGLE_ULONGLONG(0);
  misc_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbUserSimpleData::~tbUserSimpleData() {
  SharedDtor();
}

void tbUserSimpleData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
    delete misc_data_;
  }
}

void tbUserSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbUserSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbUserSimpleData_descriptor_;
}

const tbUserSimpleData& tbUserSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbUserSimpleData* tbUserSimpleData::default_instance_ = NULL;

tbUserSimpleData* tbUserSimpleData::New() const {
  return new tbUserSimpleData;
}

void tbUserSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    face_ = 0u;
    gender_ = 0u;
    age_ = 0u;
    agentid_ = GOOGLE_ULONGLONG(0);
    create_time_ = GOOGLE_ULONGLONG(0);
    is_robot_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    agent_level_ = 0u;
    ach_day_ = GOOGLE_ULONGLONG(0);
    ach_week_ = GOOGLE_ULONGLONG(0);
    ach_month_ = GOOGLE_ULONGLONG(0);
    ach_all_ = GOOGLE_ULONGLONG(0);
    ach_team_day_ = GOOGLE_ULONGLONG(0);
    ach_team_week_ = GOOGLE_ULONGLONG(0);
    ach_team_month_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    ach_team_all_ = GOOGLE_ULONGLONG(0);
    team_user_num_ = GOOGLE_ULONGLONG(0);
    new_user_day_ = GOOGLE_ULONGLONG(0);
    activity_user_day_ = GOOGLE_ULONGLONG(0);
    getrate_ = 0u;
    tax_getrate_ = 0u;
    takemoney_ = 0u;
    tax_takemoney_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    all_takemoney_ = GOOGLE_ULONGLONG(0);
    all_fee_ = GOOGLE_ULONGLONG(0);
    show_userid_ = GOOGLE_ULONGLONG(0);
    vip_level_ = GOOGLE_ULONGLONG(0);
    if (has_misc_data()) {
      if (misc_data_ != NULL) misc_data_->::proto_ff::UserSimpleMiscData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbUserSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face;
        break;
      }

      // optional uint32 face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_age;
        break;
      }

      // optional uint32 age = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agentid;
        break;
      }

      // optional uint64 agentid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agentid_)));
          set_has_agentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_robot;
        break;
      }

      // optional bool is_robot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_agent_level;
        break;
      }

      // optional uint32 agent_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agent_level_)));
          set_has_agent_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ach_day;
        break;
      }

      // optional uint64 ach_day = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_day_)));
          set_has_ach_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ach_week;
        break;
      }

      // optional uint64 ach_week = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_week_)));
          set_has_ach_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ach_month;
        break;
      }

      // optional uint64 ach_month = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_month_)));
          set_has_ach_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ach_all;
        break;
      }

      // optional uint64 ach_all = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_all_)));
          set_has_ach_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ach_team_day;
        break;
      }

      // optional uint64 ach_team_day = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_team_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_team_day_)));
          set_has_ach_team_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ach_team_week;
        break;
      }

      // optional uint64 ach_team_week = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_team_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_team_week_)));
          set_has_ach_team_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_ach_team_month;
        break;
      }

      // optional uint64 ach_team_month = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_team_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_team_month_)));
          set_has_ach_team_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ach_team_all;
        break;
      }

      // optional uint64 ach_team_all = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ach_team_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ach_team_all_)));
          set_has_ach_team_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_team_user_num;
        break;
      }

      // optional uint64 team_user_num = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_user_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_user_num_)));
          set_has_team_user_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_new_user_day;
        break;
      }

      // optional uint64 new_user_day = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_user_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_user_day_)));
          set_has_new_user_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_activity_user_day;
        break;
      }

      // optional uint64 activity_user_day = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_user_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_user_day_)));
          set_has_activity_user_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_getrate;
        break;
      }

      // optional uint32 getrate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getrate_)));
          set_has_getrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_tax_getrate;
        break;
      }

      // optional uint32 tax_getrate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_getrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_getrate_)));
          set_has_tax_getrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_takemoney;
        break;
      }

      // optional uint32 takemoney = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_takemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &takemoney_)));
          set_has_takemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tax_takemoney;
        break;
      }

      // optional uint32 tax_takemoney = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_takemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tax_takemoney_)));
          set_has_tax_takemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_all_takemoney;
        break;
      }

      // optional uint64 all_takemoney = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_takemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_takemoney_)));
          set_has_all_takemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_all_fee;
        break;
      }

      // optional uint64 all_fee = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_fee_)));
          set_has_all_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_show_userid;
        break;
      }

      // optional uint64 show_userid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_userid_)));
          set_has_show_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_vip_level;
        break;
      }

      // optional uint64 vip_level = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_misc_data;
        break;
      }

      // optional .proto_ff.UserSimpleMiscData misc_data = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_misc_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_misc_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbUserSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->face(), output);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->age(), output);
  }

  // optional uint64 agentid = 6;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->agentid(), output);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->create_time(), output);
  }

  // optional bool is_robot = 8;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_robot(), output);
  }

  // optional uint32 agent_level = 9;
  if (has_agent_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->agent_level(), output);
  }

  // optional uint64 ach_day = 10;
  if (has_ach_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ach_day(), output);
  }

  // optional uint64 ach_week = 11;
  if (has_ach_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ach_week(), output);
  }

  // optional uint64 ach_month = 12;
  if (has_ach_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ach_month(), output);
  }

  // optional uint64 ach_all = 13;
  if (has_ach_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->ach_all(), output);
  }

  // optional uint64 ach_team_day = 14;
  if (has_ach_team_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->ach_team_day(), output);
  }

  // optional uint64 ach_team_week = 15;
  if (has_ach_team_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->ach_team_week(), output);
  }

  // optional uint64 ach_team_month = 17;
  if (has_ach_team_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->ach_team_month(), output);
  }

  // optional uint64 ach_team_all = 18;
  if (has_ach_team_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->ach_team_all(), output);
  }

  // optional uint64 team_user_num = 19;
  if (has_team_user_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->team_user_num(), output);
  }

  // optional uint64 new_user_day = 20;
  if (has_new_user_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->new_user_day(), output);
  }

  // optional uint64 activity_user_day = 21;
  if (has_activity_user_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->activity_user_day(), output);
  }

  // optional uint32 getrate = 22;
  if (has_getrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->getrate(), output);
  }

  // optional uint32 tax_getrate = 23;
  if (has_tax_getrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->tax_getrate(), output);
  }

  // optional uint32 takemoney = 24;
  if (has_takemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->takemoney(), output);
  }

  // optional uint32 tax_takemoney = 25;
  if (has_tax_takemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tax_takemoney(), output);
  }

  // optional uint64 all_takemoney = 26;
  if (has_all_takemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->all_takemoney(), output);
  }

  // optional uint64 all_fee = 27;
  if (has_all_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->all_fee(), output);
  }

  // optional uint64 show_userid = 28;
  if (has_show_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->show_userid(), output);
  }

  // optional uint64 vip_level = 29;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->vip_level(), output);
  }

  // optional .proto_ff.UserSimpleMiscData misc_data = 30;
  if (has_misc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->misc_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbUserSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->face(), target);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->age(), target);
  }

  // optional uint64 agentid = 6;
  if (has_agentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->agentid(), target);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->create_time(), target);
  }

  // optional bool is_robot = 8;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_robot(), target);
  }

  // optional uint32 agent_level = 9;
  if (has_agent_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->agent_level(), target);
  }

  // optional uint64 ach_day = 10;
  if (has_ach_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ach_day(), target);
  }

  // optional uint64 ach_week = 11;
  if (has_ach_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ach_week(), target);
  }

  // optional uint64 ach_month = 12;
  if (has_ach_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ach_month(), target);
  }

  // optional uint64 ach_all = 13;
  if (has_ach_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->ach_all(), target);
  }

  // optional uint64 ach_team_day = 14;
  if (has_ach_team_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->ach_team_day(), target);
  }

  // optional uint64 ach_team_week = 15;
  if (has_ach_team_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->ach_team_week(), target);
  }

  // optional uint64 ach_team_month = 17;
  if (has_ach_team_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->ach_team_month(), target);
  }

  // optional uint64 ach_team_all = 18;
  if (has_ach_team_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->ach_team_all(), target);
  }

  // optional uint64 team_user_num = 19;
  if (has_team_user_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->team_user_num(), target);
  }

  // optional uint64 new_user_day = 20;
  if (has_new_user_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->new_user_day(), target);
  }

  // optional uint64 activity_user_day = 21;
  if (has_activity_user_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->activity_user_day(), target);
  }

  // optional uint32 getrate = 22;
  if (has_getrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->getrate(), target);
  }

  // optional uint32 tax_getrate = 23;
  if (has_tax_getrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->tax_getrate(), target);
  }

  // optional uint32 takemoney = 24;
  if (has_takemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->takemoney(), target);
  }

  // optional uint32 tax_takemoney = 25;
  if (has_tax_takemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tax_takemoney(), target);
  }

  // optional uint64 all_takemoney = 26;
  if (has_all_takemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->all_takemoney(), target);
  }

  // optional uint64 all_fee = 27;
  if (has_all_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->all_fee(), target);
  }

  // optional uint64 show_userid = 28;
  if (has_show_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->show_userid(), target);
  }

  // optional uint64 vip_level = 29;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->vip_level(), target);
  }

  // optional .proto_ff.UserSimpleMiscData misc_data = 30;
  if (has_misc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->misc_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbUserSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint64 agentid = 6;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agentid());
    }

    // optional uint64 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional bool is_robot = 8;
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 agent_level = 9;
    if (has_agent_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agent_level());
    }

    // optional uint64 ach_day = 10;
    if (has_ach_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_day());
    }

    // optional uint64 ach_week = 11;
    if (has_ach_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_week());
    }

    // optional uint64 ach_month = 12;
    if (has_ach_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_month());
    }

    // optional uint64 ach_all = 13;
    if (has_ach_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_all());
    }

    // optional uint64 ach_team_day = 14;
    if (has_ach_team_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_team_day());
    }

    // optional uint64 ach_team_week = 15;
    if (has_ach_team_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_team_week());
    }

    // optional uint64 ach_team_month = 17;
    if (has_ach_team_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_team_month());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 ach_team_all = 18;
    if (has_ach_team_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ach_team_all());
    }

    // optional uint64 team_user_num = 19;
    if (has_team_user_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_user_num());
    }

    // optional uint64 new_user_day = 20;
    if (has_new_user_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_user_day());
    }

    // optional uint64 activity_user_day = 21;
    if (has_activity_user_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_user_day());
    }

    // optional uint32 getrate = 22;
    if (has_getrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getrate());
    }

    // optional uint32 tax_getrate = 23;
    if (has_tax_getrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax_getrate());
    }

    // optional uint32 takemoney = 24;
    if (has_takemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->takemoney());
    }

    // optional uint32 tax_takemoney = 25;
    if (has_tax_takemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tax_takemoney());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 all_takemoney = 26;
    if (has_all_takemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_takemoney());
    }

    // optional uint64 all_fee = 27;
    if (has_all_fee()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_fee());
    }

    // optional uint64 show_userid = 28;
    if (has_show_userid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_userid());
    }

    // optional uint64 vip_level = 29;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vip_level());
    }

    // optional .proto_ff.UserSimpleMiscData misc_data = 30;
    if (has_misc_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misc_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbUserSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbUserSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbUserSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbUserSimpleData::MergeFrom(const tbUserSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_agent_level()) {
      set_agent_level(from.agent_level());
    }
    if (from.has_ach_day()) {
      set_ach_day(from.ach_day());
    }
    if (from.has_ach_week()) {
      set_ach_week(from.ach_week());
    }
    if (from.has_ach_month()) {
      set_ach_month(from.ach_month());
    }
    if (from.has_ach_all()) {
      set_ach_all(from.ach_all());
    }
    if (from.has_ach_team_day()) {
      set_ach_team_day(from.ach_team_day());
    }
    if (from.has_ach_team_week()) {
      set_ach_team_week(from.ach_team_week());
    }
    if (from.has_ach_team_month()) {
      set_ach_team_month(from.ach_team_month());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ach_team_all()) {
      set_ach_team_all(from.ach_team_all());
    }
    if (from.has_team_user_num()) {
      set_team_user_num(from.team_user_num());
    }
    if (from.has_new_user_day()) {
      set_new_user_day(from.new_user_day());
    }
    if (from.has_activity_user_day()) {
      set_activity_user_day(from.activity_user_day());
    }
    if (from.has_getrate()) {
      set_getrate(from.getrate());
    }
    if (from.has_tax_getrate()) {
      set_tax_getrate(from.tax_getrate());
    }
    if (from.has_takemoney()) {
      set_takemoney(from.takemoney());
    }
    if (from.has_tax_takemoney()) {
      set_tax_takemoney(from.tax_takemoney());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_all_takemoney()) {
      set_all_takemoney(from.all_takemoney());
    }
    if (from.has_all_fee()) {
      set_all_fee(from.all_fee());
    }
    if (from.has_show_userid()) {
      set_show_userid(from.show_userid());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_misc_data()) {
      mutable_misc_data()->::proto_ff::UserSimpleMiscData::MergeFrom(from.misc_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbUserSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbUserSimpleData::CopyFrom(const tbUserSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbUserSimpleData::IsInitialized() const {

  return true;
}

void tbUserSimpleData::Swap(tbUserSimpleData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(face_, other->face_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(agentid_, other->agentid_);
    std::swap(create_time_, other->create_time_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(agent_level_, other->agent_level_);
    std::swap(ach_day_, other->ach_day_);
    std::swap(ach_week_, other->ach_week_);
    std::swap(ach_month_, other->ach_month_);
    std::swap(ach_all_, other->ach_all_);
    std::swap(ach_team_day_, other->ach_team_day_);
    std::swap(ach_team_week_, other->ach_team_week_);
    std::swap(ach_team_month_, other->ach_team_month_);
    std::swap(ach_team_all_, other->ach_team_all_);
    std::swap(team_user_num_, other->team_user_num_);
    std::swap(new_user_day_, other->new_user_day_);
    std::swap(activity_user_day_, other->activity_user_day_);
    std::swap(getrate_, other->getrate_);
    std::swap(tax_getrate_, other->tax_getrate_);
    std::swap(takemoney_, other->takemoney_);
    std::swap(tax_takemoney_, other->tax_takemoney_);
    std::swap(all_takemoney_, other->all_takemoney_);
    std::swap(all_fee_, other->all_fee_);
    std::swap(show_userid_, other->show_userid_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(misc_data_, other->misc_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbUserSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbUserSimpleData_descriptor_;
  metadata.reflection = tbUserSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerWealthData::kPlayerIdFieldNumber;
const int GamePlayerWealthData::kRechargeFieldNumber;
const int GamePlayerWealthData::kTotalLostFieldNumber;
const int GamePlayerWealthData::kTotalWinFieldNumber;
const int GamePlayerWealthData::kThisGameLostFieldNumber;
const int GamePlayerWealthData::kThisGameWinFieldNumber;
#endif  // !_MSC_VER

GamePlayerWealthData::GamePlayerWealthData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerWealthData::InitAsDefaultInstance() {
}

GamePlayerWealthData::GamePlayerWealthData(const GamePlayerWealthData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerWealthData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  recharge_ = GOOGLE_LONGLONG(0);
  total_lost_ = GOOGLE_LONGLONG(0);
  total_win_ = GOOGLE_LONGLONG(0);
  this_game_lost_ = GOOGLE_LONGLONG(0);
  this_game_win_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerWealthData::~GamePlayerWealthData() {
  SharedDtor();
}

void GamePlayerWealthData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerWealthData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerWealthData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerWealthData_descriptor_;
}

const GamePlayerWealthData& GamePlayerWealthData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

GamePlayerWealthData* GamePlayerWealthData::default_instance_ = NULL;

GamePlayerWealthData* GamePlayerWealthData::New() const {
  return new GamePlayerWealthData;
}

void GamePlayerWealthData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    recharge_ = GOOGLE_LONGLONG(0);
    total_lost_ = GOOGLE_LONGLONG(0);
    total_win_ = GOOGLE_LONGLONG(0);
    this_game_lost_ = GOOGLE_LONGLONG(0);
    this_game_win_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerWealthData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // optional int64 recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_lost;
        break;
      }

      // optional int64 total_lost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_lost_)));
          set_has_total_lost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_win;
        break;
      }

      // optional int64 total_win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_this_game_lost;
        break;
      }

      // optional int64 this_game_lost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_this_game_lost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &this_game_lost_)));
          set_has_this_game_lost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_this_game_win;
        break;
      }

      // optional int64 this_game_win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_this_game_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &this_game_win_)));
          set_has_this_game_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerWealthData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional int64 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->recharge(), output);
  }

  // optional int64 total_lost = 3;
  if (has_total_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_lost(), output);
  }

  // optional int64 total_win = 4;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_win(), output);
  }

  // optional int64 this_game_lost = 5;
  if (has_this_game_lost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->this_game_lost(), output);
  }

  // optional int64 this_game_win = 6;
  if (has_this_game_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->this_game_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerWealthData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional int64 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->recharge(), target);
  }

  // optional int64 total_lost = 3;
  if (has_total_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_lost(), target);
  }

  // optional int64 total_win = 4;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_win(), target);
  }

  // optional int64 this_game_lost = 5;
  if (has_this_game_lost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->this_game_lost(), target);
  }

  // optional int64 this_game_win = 6;
  if (has_this_game_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->this_game_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerWealthData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int64 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recharge());
    }

    // optional int64 total_lost = 3;
    if (has_total_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_lost());
    }

    // optional int64 total_win = 4;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_win());
    }

    // optional int64 this_game_lost = 5;
    if (has_this_game_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->this_game_lost());
    }

    // optional int64 this_game_win = 6;
    if (has_this_game_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->this_game_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerWealthData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerWealthData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerWealthData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerWealthData::MergeFrom(const GamePlayerWealthData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_total_lost()) {
      set_total_lost(from.total_lost());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
    if (from.has_this_game_lost()) {
      set_this_game_lost(from.this_game_lost());
    }
    if (from.has_this_game_win()) {
      set_this_game_win(from.this_game_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerWealthData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerWealthData::CopyFrom(const GamePlayerWealthData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerWealthData::IsInitialized() const {

  return true;
}

void GamePlayerWealthData::Swap(GamePlayerWealthData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(recharge_, other->recharge_);
    std::swap(total_lost_, other->total_lost_);
    std::swap(total_win_, other->total_win_);
    std::swap(this_game_lost_, other->this_game_lost_);
    std::swap(this_game_win_, other->this_game_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerWealthData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerWealthData_descriptor_;
  metadata.reflection = GamePlayerWealthData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerDetailData::kPlayerIdFieldNumber;
const int GamePlayerDetailData::kCurMoneyFieldNumber;
const int GamePlayerDetailData::kVipLevelFieldNumber;
const int GamePlayerDetailData::kSexFieldNumber;
const int GamePlayerDetailData::kChairIdFieldNumber;
const int GamePlayerDetailData::kNickNameFieldNumber;
const int GamePlayerDetailData::kFaceFieldNumber;
const int GamePlayerDetailData::kIsRobotFieldNumber;
#endif  // !_MSC_VER

GamePlayerDetailData::GamePlayerDetailData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerDetailData::InitAsDefaultInstance() {
}

GamePlayerDetailData::GamePlayerDetailData(const GamePlayerDetailData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerDetailData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  cur_money_ = GOOGLE_LONGLONG(0);
  vip_level_ = 0u;
  sex_ = 0u;
  chair_id_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = 0u;
  isrobot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerDetailData::~GamePlayerDetailData() {
  SharedDtor();
}

void GamePlayerDetailData::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void GamePlayerDetailData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerDetailData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerDetailData_descriptor_;
}

const GamePlayerDetailData& GamePlayerDetailData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

GamePlayerDetailData* GamePlayerDetailData::default_instance_ = NULL;

GamePlayerDetailData* GamePlayerDetailData::New() const {
  return new GamePlayerDetailData;
}

void GamePlayerDetailData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    cur_money_ = GOOGLE_LONGLONG(0);
    vip_level_ = 0u;
    sex_ = 0u;
    chair_id_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    face_ = 0u;
    isrobot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerDetailData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_money;
        break;
      }

      // optional int64 cur_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chair_id;
        break;
      }

      // optional int32 chair_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_face;
        break;
      }

      // optional uint32 face = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isRobot;
        break;
      }

      // optional bool isRobot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerDetailData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional int64 cur_money = 2;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cur_money(), output);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip_level(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional int32 chair_id = 5;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chair_id(), output);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nick_name(), output);
  }

  // optional uint32 face = 7;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->face(), output);
  }

  // optional bool isRobot = 8;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isrobot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerDetailData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional int64 cur_money = 2;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cur_money(), target);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip_level(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional int32 chair_id = 5;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chair_id(), target);
  }

  // optional string nick_name = 6;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nick_name(), target);
  }

  // optional uint32 face = 7;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->face(), target);
  }

  // optional bool isRobot = 8;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isrobot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerDetailData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int64 cur_money = 2;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_money());
    }

    // optional uint32 vip_level = 3;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional int32 chair_id = 5;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chair_id());
    }

    // optional string nick_name = 6;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 face = 7;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional bool isRobot = 8;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerDetailData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerDetailData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerDetailData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerDetailData::MergeFrom(const GamePlayerDetailData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerDetailData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerDetailData::CopyFrom(const GamePlayerDetailData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerDetailData::IsInitialized() const {

  return true;
}

void GamePlayerDetailData::Swap(GamePlayerDetailData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(cur_money_, other->cur_money_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(sex_, other->sex_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(face_, other->face_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerDetailData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerDetailData_descriptor_;
  metadata.reflection = GamePlayerDetailData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerAchievementData::kCurAchFieldNumber;
const int GamePlayerAchievementData::kCurFeeFieldNumber;
#endif  // !_MSC_VER

GamePlayerAchievementData::GamePlayerAchievementData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerAchievementData::InitAsDefaultInstance() {
}

GamePlayerAchievementData::GamePlayerAchievementData(const GamePlayerAchievementData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerAchievementData::SharedCtor() {
  _cached_size_ = 0;
  cur_ach_ = GOOGLE_ULONGLONG(0);
  cur_fee_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerAchievementData::~GamePlayerAchievementData() {
  SharedDtor();
}

void GamePlayerAchievementData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerAchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerAchievementData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerAchievementData_descriptor_;
}

const GamePlayerAchievementData& GamePlayerAchievementData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

GamePlayerAchievementData* GamePlayerAchievementData::default_instance_ = NULL;

GamePlayerAchievementData* GamePlayerAchievementData::New() const {
  return new GamePlayerAchievementData;
}

void GamePlayerAchievementData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_ach_ = GOOGLE_ULONGLONG(0);
    cur_fee_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerAchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_ach = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_ach_)));
          set_has_cur_ach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_fee;
        break;
      }

      // optional uint64 cur_fee = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_fee_)));
          set_has_cur_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerAchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_ach = 2;
  if (has_cur_ach()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_ach(), output);
  }

  // optional uint64 cur_fee = 3;
  if (has_cur_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_fee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerAchievementData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_ach = 2;
  if (has_cur_ach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_ach(), target);
  }

  // optional uint64 cur_fee = 3;
  if (has_cur_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_fee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerAchievementData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_ach = 2;
    if (has_cur_ach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_ach());
    }

    // optional uint64 cur_fee = 3;
    if (has_cur_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_fee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerAchievementData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerAchievementData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerAchievementData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerAchievementData::MergeFrom(const GamePlayerAchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_ach()) {
      set_cur_ach(from.cur_ach());
    }
    if (from.has_cur_fee()) {
      set_cur_fee(from.cur_fee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerAchievementData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerAchievementData::CopyFrom(const GamePlayerAchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerAchievementData::IsInitialized() const {

  return true;
}

void GamePlayerAchievementData::Swap(GamePlayerAchievementData* other) {
  if (other != this) {
    std::swap(cur_ach_, other->cur_ach_);
    std::swap(cur_fee_, other->cur_fee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerAchievementData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerAchievementData_descriptor_;
  metadata.reflection = GamePlayerAchievementData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSimpleData::kUseridFieldNumber;
const int UserSimpleData::kNicknameFieldNumber;
const int UserSimpleData::kFaceFieldNumber;
const int UserSimpleData::kGenderFieldNumber;
const int UserSimpleData::kAgeFieldNumber;
const int UserSimpleData::kShowUseridFieldNumber;
const int UserSimpleData::kVipLevelFieldNumber;
#endif  // !_MSC_VER

UserSimpleData::UserSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSimpleData::InitAsDefaultInstance() {
}

UserSimpleData::UserSimpleData(const UserSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSimpleData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = 0u;
  gender_ = 0u;
  age_ = 0u;
  show_userid_ = GOOGLE_ULONGLONG(0);
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSimpleData::~UserSimpleData() {
  SharedDtor();
}

void UserSimpleData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void UserSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSimpleData_descriptor_;
}

const UserSimpleData& UserSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

UserSimpleData* UserSimpleData::default_instance_ = NULL;

UserSimpleData* UserSimpleData::New() const {
  return new UserSimpleData;
}

void UserSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    face_ = 0u;
    gender_ = 0u;
    age_ = 0u;
    show_userid_ = GOOGLE_ULONGLONG(0);
    vip_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face;
        break;
      }

      // optional uint32 face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_age;
        break;
      }

      // optional uint32 age = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_show_userid;
        break;
      }

      // optional uint64 show_userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_userid_)));
          set_has_show_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->face(), output);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->age(), output);
  }

  // optional uint64 show_userid = 6;
  if (has_show_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->show_userid(), output);
  }

  // optional uint32 vip_level = 7;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->face(), target);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->age(), target);
  }

  // optional uint64 show_userid = 6;
  if (has_show_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->show_userid(), target);
  }

  // optional uint32 vip_level = 7;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint64 show_userid = 6;
    if (has_show_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_userid());
    }

    // optional uint32 vip_level = 7;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSimpleData::MergeFrom(const UserSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_show_userid()) {
      set_show_userid(from.show_userid());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSimpleData::CopyFrom(const UserSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSimpleData::IsInitialized() const {

  return true;
}

void UserSimpleData::Swap(UserSimpleData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(face_, other->face_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(show_userid_, other->show_userid_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSimpleData_descriptor_;
  metadata.reflection = UserSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBankInfo::kRecordIdFieldNumber;
#endif  // !_MSC_VER

UserBankInfo::UserBankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserBankInfo::InitAsDefaultInstance() {
}

UserBankInfo::UserBankInfo(const UserBankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserBankInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBankInfo::~UserBankInfo() {
  SharedDtor();
}

void UserBankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserBankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBankInfo_descriptor_;
}

const UserBankInfo& UserBankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

UserBankInfo* UserBankInfo::default_instance_ = NULL;

UserBankInfo* UserBankInfo::New() const {
  return new UserBankInfo;
}

void UserBankInfo::Clear() {
  record_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 record_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_record_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_record_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_record_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 record_id = 1;
  for (int i = 0; i < this->record_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->record_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserBankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 record_id = 1;
  for (int i = 0; i < this->record_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->record_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserBankInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint64 record_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->record_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->record_id(i));
    }
    total_size += 1 * this->record_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBankInfo::MergeFrom(const UserBankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_id_.MergeFrom(from.record_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBankInfo::CopyFrom(const UserBankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBankInfo::IsInitialized() const {

  return true;
}

void UserBankInfo::Swap(UserBankInfo* other) {
  if (other != this) {
    record_id_.Swap(&other->record_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBankInfo_descriptor_;
  metadata.reflection = UserBankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbUserMiscInfo::kUserIdFieldNumber;
const int tbUserMiscInfo::kBankInfoFieldNumber;
#endif  // !_MSC_VER

tbUserMiscInfo::tbUserMiscInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbUserMiscInfo::InitAsDefaultInstance() {
  bank_info_ = const_cast< ::proto_ff::UserBankInfo*>(&::proto_ff::UserBankInfo::default_instance());
}

tbUserMiscInfo::tbUserMiscInfo(const tbUserMiscInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbUserMiscInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  bank_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbUserMiscInfo::~tbUserMiscInfo() {
  SharedDtor();
}

void tbUserMiscInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bank_info_;
  }
}

void tbUserMiscInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbUserMiscInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbUserMiscInfo_descriptor_;
}

const tbUserMiscInfo& tbUserMiscInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbUserMiscInfo* tbUserMiscInfo::default_instance_ = NULL;

tbUserMiscInfo* tbUserMiscInfo::New() const {
  return new tbUserMiscInfo;
}

void tbUserMiscInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_bank_info()) {
      if (bank_info_ != NULL) bank_info_->::proto_ff::UserBankInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbUserMiscInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bank_info;
        break;
      }

      // optional .proto_ff.UserBankInfo bank_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bank_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbUserMiscInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_ff.UserBankInfo bank_info = 2;
  if (has_bank_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bank_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbUserMiscInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_ff.UserBankInfo bank_info = 2;
  if (has_bank_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bank_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbUserMiscInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_ff.UserBankInfo bank_info = 2;
    if (has_bank_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bank_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbUserMiscInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbUserMiscInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbUserMiscInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbUserMiscInfo::MergeFrom(const tbUserMiscInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_bank_info()) {
      mutable_bank_info()->::proto_ff::UserBankInfo::MergeFrom(from.bank_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbUserMiscInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbUserMiscInfo::CopyFrom(const tbUserMiscInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbUserMiscInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tbUserMiscInfo::Swap(tbUserMiscInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(bank_info_, other->bank_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbUserMiscInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbUserMiscInfo_descriptor_;
  metadata.reflection = tbUserMiscInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankCommonInfo::kIdFieldNumber;
const int RankCommonInfo::kRankFieldNumber;
#endif  // !_MSC_VER

RankCommonInfo::RankCommonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankCommonInfo::InitAsDefaultInstance() {
}

RankCommonInfo::RankCommonInfo(const RankCommonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankCommonInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankCommonInfo::~RankCommonInfo() {
  SharedDtor();
}

void RankCommonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankCommonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankCommonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankCommonInfo_descriptor_;
}

const RankCommonInfo& RankCommonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

RankCommonInfo* RankCommonInfo::default_instance_ = NULL;

RankCommonInfo* RankCommonInfo::New() const {
  return new RankCommonInfo;
}

void RankCommonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankCommonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankCommonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankCommonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankCommonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankCommonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankCommonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankCommonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankCommonInfo::MergeFrom(const RankCommonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankCommonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankCommonInfo::CopyFrom(const RankCommonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankCommonInfo::IsInitialized() const {

  return true;
}

void RankCommonInfo::Swap(RankCommonInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankCommonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankCommonInfo_descriptor_;
  metadata.reflection = RankCommonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankCommonScore::kIdFieldNumber;
const int RankCommonScore::kScoreFieldNumber;
#endif  // !_MSC_VER

RankCommonScore::RankCommonScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankCommonScore::InitAsDefaultInstance() {
}

RankCommonScore::RankCommonScore(const RankCommonScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankCommonScore::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  score_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankCommonScore::~RankCommonScore() {
  SharedDtor();
}

void RankCommonScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankCommonScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankCommonScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankCommonScore_descriptor_;
}

const RankCommonScore& RankCommonScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

RankCommonScore* RankCommonScore::default_instance_ = NULL;

RankCommonScore* RankCommonScore::New() const {
  return new RankCommonScore;
}

void RankCommonScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    score_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankCommonScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint64 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankCommonScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankCommonScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankCommonScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankCommonScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankCommonScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankCommonScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankCommonScore::MergeFrom(const RankCommonScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankCommonScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankCommonScore::CopyFrom(const RankCommonScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankCommonScore::IsInitialized() const {

  return true;
}

void RankCommonScore::Swap(RankCommonScore* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankCommonScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankCommonScore_descriptor_;
  metadata.reflection = RankCommonScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankCommonBody::kScoreListFieldNumber;
const int RankCommonBody::kInfoListFieldNumber;
#endif  // !_MSC_VER

RankCommonBody::RankCommonBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankCommonBody::InitAsDefaultInstance() {
}

RankCommonBody::RankCommonBody(const RankCommonBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankCommonBody::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankCommonBody::~RankCommonBody() {
  SharedDtor();
}

void RankCommonBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankCommonBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankCommonBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankCommonBody_descriptor_;
}

const RankCommonBody& RankCommonBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

RankCommonBody* RankCommonBody::default_instance_ = NULL;

RankCommonBody* RankCommonBody::New() const {
  return new RankCommonBody;
}

void RankCommonBody::Clear() {
  score_list_.Clear();
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankCommonBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RankCommonScore score_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_score_list;
        if (input->ExpectTag(18)) goto parse_info_list;
        break;
      }

      // repeated .proto_ff.RankCommonInfo info_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankCommonBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RankCommonScore score_list = 1;
  for (int i = 0; i < this->score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_list(i), output);
  }

  // repeated .proto_ff.RankCommonInfo info_list = 2;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankCommonBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RankCommonScore score_list = 1;
  for (int i = 0; i < this->score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score_list(i), target);
  }

  // repeated .proto_ff.RankCommonInfo info_list = 2;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankCommonBody::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RankCommonScore score_list = 1;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  // repeated .proto_ff.RankCommonInfo info_list = 2;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankCommonBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankCommonBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankCommonBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankCommonBody::MergeFrom(const RankCommonBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_list_.MergeFrom(from.score_list_);
  info_list_.MergeFrom(from.info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankCommonBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankCommonBody::CopyFrom(const RankCommonBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankCommonBody::IsInitialized() const {

  return true;
}

void RankCommonBody::Swap(RankCommonBody* other) {
  if (other != this) {
    score_list_.Swap(&other->score_list_);
    info_list_.Swap(&other->info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankCommonBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankCommonBody_descriptor_;
  metadata.reflection = RankCommonBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbRankCommon::kId4DbFieldNumber;
const int tbRankCommon::kBodyFieldNumber;
#endif  // !_MSC_VER

tbRankCommon::tbRankCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbRankCommon::InitAsDefaultInstance() {
  body_ = const_cast< ::proto_ff::RankCommonBody*>(&::proto_ff::RankCommonBody::default_instance());
}

tbRankCommon::tbRankCommon(const tbRankCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbRankCommon::SharedCtor() {
  _cached_size_ = 0;
  id4db_ = 0;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbRankCommon::~tbRankCommon() {
  SharedDtor();
}

void tbRankCommon::SharedDtor() {
  if (this != default_instance_) {
    delete body_;
  }
}

void tbRankCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbRankCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbRankCommon_descriptor_;
}

const tbRankCommon& tbRankCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbRankCommon* tbRankCommon::default_instance_ = NULL;

tbRankCommon* tbRankCommon::New() const {
  return new tbRankCommon;
}

void tbRankCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id4db_ = 0;
    if (has_body()) {
      if (body_ != NULL) body_->::proto_ff::RankCommonBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbRankCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id4db = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id4db_)));
          set_has_id4db();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional .proto_ff.RankCommonBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbRankCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id4db = 1;
  if (has_id4db()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id4db(), output);
  }

  // optional .proto_ff.RankCommonBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbRankCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id4db = 1;
  if (has_id4db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id4db(), target);
  }

  // optional .proto_ff.RankCommonBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbRankCommon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id4db = 1;
    if (has_id4db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id4db());
    }

    // optional .proto_ff.RankCommonBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbRankCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbRankCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbRankCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbRankCommon::MergeFrom(const tbRankCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id4db()) {
      set_id4db(from.id4db());
    }
    if (from.has_body()) {
      mutable_body()->::proto_ff::RankCommonBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbRankCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbRankCommon::CopyFrom(const tbRankCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbRankCommon::IsInitialized() const {

  return true;
}

void tbRankCommon::Swap(tbRankCommon* other) {
  if (other != this) {
    std::swap(id4db_, other->id4db_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbRankCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbRankCommon_descriptor_;
  metadata.reflection = tbRankCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotCommonData::kRobotIdFieldNumber;
const int RobotCommonData::kNicknameFieldNumber;
const int RobotCommonData::kFaceIdFieldNumber;
const int RobotCommonData::kAgeFieldNumber;
const int RobotCommonData::kGenderFieldNumber;
const int RobotCommonData::kJettonFieldNumber;
const int RobotCommonData::kIsUseFieldNumber;
#endif  // !_MSC_VER

RobotCommonData::RobotCommonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotCommonData::InitAsDefaultInstance() {
}

RobotCommonData::RobotCommonData(const RobotCommonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotCommonData::SharedCtor() {
  _cached_size_ = 0;
  robot_id_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_id_ = 0u;
  age_ = 0u;
  gender_ = 0u;
  jetton_ = GOOGLE_ULONGLONG(0);
  is_use_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotCommonData::~RobotCommonData() {
  SharedDtor();
}

void RobotCommonData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void RobotCommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotCommonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotCommonData_descriptor_;
}

const RobotCommonData& RobotCommonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

RobotCommonData* RobotCommonData::default_instance_ = NULL;

RobotCommonData* RobotCommonData::New() const {
  return new RobotCommonData;
}

void RobotCommonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    robot_id_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    face_id_ = 0u;
    age_ = 0u;
    gender_ = 0u;
    jetton_ = GOOGLE_ULONGLONG(0);
    is_use_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotCommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 robot_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face_id;
        break;
      }

      // optional uint32 face_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_age;
        break;
      }

      // optional uint32 age = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jetton;
        break;
      }

      // optional uint64 jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_use;
        break;
      }

      // optional bool is_use = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_use_)));
          set_has_is_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotCommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 robot_id = 1;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->robot_id(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 face_id = 3;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->face_id(), output);
  }

  // optional uint32 age = 4;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->age(), output);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gender(), output);
  }

  // optional uint64 jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->jetton(), output);
  }

  // optional bool is_use = 7;
  if (has_is_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotCommonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 robot_id = 1;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->robot_id(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 face_id = 3;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->face_id(), target);
  }

  // optional uint32 age = 4;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->age(), target);
  }

  // optional uint32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gender(), target);
  }

  // optional uint64 jetton = 6;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->jetton(), target);
  }

  // optional bool is_use = 7;
  if (has_is_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotCommonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 robot_id = 1;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->robot_id());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 face_id = 3;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

    // optional uint32 age = 4;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint64 jetton = 6;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton());
    }

    // optional bool is_use = 7;
    if (has_is_use()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotCommonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotCommonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotCommonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotCommonData::MergeFrom(const RobotCommonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_is_use()) {
      set_is_use(from.is_use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotCommonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommonData::CopyFrom(const RobotCommonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommonData::IsInitialized() const {

  return true;
}

void RobotCommonData::Swap(RobotCommonData* other) {
  if (other != this) {
    std::swap(robot_id_, other->robot_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(face_id_, other->face_id_);
    std::swap(age_, other->age_);
    std::swap(gender_, other->gender_);
    std::swap(jetton_, other->jetton_);
    std::swap(is_use_, other->is_use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotCommonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotCommonData_descriptor_;
  metadata.reflection = RobotCommonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotCommonBody::kRobotDataFieldNumber;
#endif  // !_MSC_VER

RobotCommonBody::RobotCommonBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotCommonBody::InitAsDefaultInstance() {
}

RobotCommonBody::RobotCommonBody(const RobotCommonBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotCommonBody::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotCommonBody::~RobotCommonBody() {
  SharedDtor();
}

void RobotCommonBody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotCommonBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotCommonBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotCommonBody_descriptor_;
}

const RobotCommonBody& RobotCommonBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

RobotCommonBody* RobotCommonBody::default_instance_ = NULL;

RobotCommonBody* RobotCommonBody::New() const {
  return new RobotCommonBody;
}

void RobotCommonBody::Clear() {
  robot_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobotCommonBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RobotCommonData robot_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_robot_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotCommonBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RobotCommonData robot_data = 1;
  for (int i = 0; i < this->robot_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robot_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotCommonBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RobotCommonData robot_data = 1;
  for (int i = 0; i < this->robot_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robot_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotCommonBody::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RobotCommonData robot_data = 1;
  total_size += 1 * this->robot_data_size();
  for (int i = 0; i < this->robot_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robot_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotCommonBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotCommonBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotCommonBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobotCommonBody::MergeFrom(const RobotCommonBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  robot_data_.MergeFrom(from.robot_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobotCommonBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommonBody::CopyFrom(const RobotCommonBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommonBody::IsInitialized() const {

  return true;
}

void RobotCommonBody::Swap(RobotCommonBody* other) {
  if (other != this) {
    robot_data_.Swap(&other->robot_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobotCommonBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotCommonBody_descriptor_;
  metadata.reflection = RobotCommonBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbGameRobot::kId4DbFieldNumber;
const int tbGameRobot::kBodyFieldNumber;
#endif  // !_MSC_VER

tbGameRobot::tbGameRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbGameRobot::InitAsDefaultInstance() {
  body_ = const_cast< ::proto_ff::RobotCommonBody*>(&::proto_ff::RobotCommonBody::default_instance());
}

tbGameRobot::tbGameRobot(const tbGameRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbGameRobot::SharedCtor() {
  _cached_size_ = 0;
  id4db_ = 0;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbGameRobot::~tbGameRobot() {
  SharedDtor();
}

void tbGameRobot::SharedDtor() {
  if (this != default_instance_) {
    delete body_;
  }
}

void tbGameRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbGameRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbGameRobot_descriptor_;
}

const tbGameRobot& tbGameRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbGameRobot* tbGameRobot::default_instance_ = NULL;

tbGameRobot* tbGameRobot::New() const {
  return new tbGameRobot;
}

void tbGameRobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id4db_ = 0;
    if (has_body()) {
      if (body_ != NULL) body_->::proto_ff::RobotCommonBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbGameRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id4db = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id4db_)));
          set_has_id4db();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional .proto_ff.RobotCommonBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbGameRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id4db = 1;
  if (has_id4db()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id4db(), output);
  }

  // optional .proto_ff.RobotCommonBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbGameRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id4db = 1;
  if (has_id4db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id4db(), target);
  }

  // optional .proto_ff.RobotCommonBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbGameRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id4db = 1;
    if (has_id4db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id4db());
    }

    // optional .proto_ff.RobotCommonBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbGameRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbGameRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbGameRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbGameRobot::MergeFrom(const tbGameRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id4db()) {
      set_id4db(from.id4db());
    }
    if (from.has_body()) {
      mutable_body()->::proto_ff::RobotCommonBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbGameRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbGameRobot::CopyFrom(const tbGameRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbGameRobot::IsInitialized() const {

  return true;
}

void tbGameRobot::Swap(tbGameRobot* other) {
  if (other != this) {
    std::swap(id4db_, other->id4db_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbGameRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbGameRobot_descriptor_;
  metadata.reflection = tbGameRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventLogData::kEventTypeFieldNumber;
#endif  // !_MSC_VER

EventLogData::EventLogData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventLogData::InitAsDefaultInstance() {
}

EventLogData::EventLogData(const EventLogData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventLogData::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventLogData::~EventLogData() {
  SharedDtor();
}

void EventLogData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventLogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventLogData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventLogData_descriptor_;
}

const EventLogData& EventLogData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

EventLogData* EventLogData::default_instance_ = NULL;

EventLogData* EventLogData::New() const {
  return new EventLogData;
}

void EventLogData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventLogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.EventLogType event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::EventLogType_IsValid(value)) {
            set_event_type(static_cast< ::proto_ff::EventLogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventLogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.EventLogType event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventLogData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.EventLogType event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventLogData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.EventLogType event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLogData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventLogData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventLogData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventLogData::MergeFrom(const EventLogData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventLogData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventLogData::CopyFrom(const EventLogData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLogData::IsInitialized() const {

  return true;
}

void EventLogData::Swap(EventLogData* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventLogData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventLogData_descriptor_;
  metadata.reflection = EventLogData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbEventLog::kUserIdFieldNumber;
const int tbEventLog::kEventIdFieldNumber;
const int tbEventLog::kCreateTimeFieldNumber;
const int tbEventLog::kExpireTimeFieldNumber;
const int tbEventLog::kDataFieldNumber;
#endif  // !_MSC_VER

tbEventLog::tbEventLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbEventLog::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::EventLogData*>(&::proto_ff::EventLogData::default_instance());
}

tbEventLog::tbEventLog(const tbEventLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbEventLog::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  event_id_ = GOOGLE_ULONGLONG(0);
  create_time_ = 0;
  expire_time_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbEventLog::~tbEventLog() {
  SharedDtor();
}

void tbEventLog::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void tbEventLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbEventLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbEventLog_descriptor_;
}

const tbEventLog& tbEventLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbEventLog* tbEventLog::default_instance_ = NULL;

tbEventLog* tbEventLog::New() const {
  return new tbEventLog;
}

void tbEventLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    event_id_ = GOOGLE_ULONGLONG(0);
    create_time_ = 0;
    expire_time_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::EventLogData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbEventLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional uint64 event_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // optional int32 create_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expire_time;
        break;
      }

      // optional int32 expire_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .proto_ff.EventLogData data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbEventLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_id(), output);
  }

  // optional int32 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->create_time(), output);
  }

  // optional int32 expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expire_time(), output);
  }

  // optional .proto_ff.EventLogData data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbEventLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_id(), target);
  }

  // optional int32 create_time = 3;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->create_time(), target);
  }

  // optional int32 expire_time = 4;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->expire_time(), target);
  }

  // optional .proto_ff.EventLogData data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbEventLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional int32 create_time = 3;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_time());
    }

    // optional int32 expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_time());
    }

    // optional .proto_ff.EventLogData data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbEventLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbEventLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbEventLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbEventLog::MergeFrom(const tbEventLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::EventLogData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbEventLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbEventLog::CopyFrom(const tbEventLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbEventLog::IsInitialized() const {

  return true;
}

void tbEventLog::Swap(tbEventLog* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbEventLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbEventLog_descriptor_;
  metadata.reflection = tbEventLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginCommonData::kAreadIdFieldNumber;
const int LoginCommonData::kAgentIdFieldNumber;
const int LoginCommonData::kChannelIdFieldNumber;
const int LoginCommonData::kReferralCodeFieldNumber;
const int LoginCommonData::kPlatformOsFieldNumber;
const int LoginCommonData::kCountryFieldNumber;
const int LoginCommonData::kProvinceFieldNumber;
const int LoginCommonData::kCityFieldNumber;
const int LoginCommonData::kIpFieldNumber;
const int LoginCommonData::kPhoneModeFieldNumber;
const int LoginCommonData::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

LoginCommonData::LoginCommonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginCommonData::InitAsDefaultInstance() {
}

LoginCommonData::LoginCommonData(const LoginCommonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginCommonData::SharedCtor() {
  _cached_size_ = 0;
  aread_id_ = 0u;
  agent_id_ = GOOGLE_ULONGLONG(0);
  channel_id_ = 0u;
  referral_code_ = 0u;
  platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginCommonData::~LoginCommonData() {
  SharedDtor();
}

void LoginCommonData::SharedDtor() {
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_os_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_mode_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void LoginCommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginCommonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginCommonData_descriptor_;
}

const LoginCommonData& LoginCommonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LoginCommonData* LoginCommonData::default_instance_ = NULL;

LoginCommonData* LoginCommonData::New() const {
  return new LoginCommonData;
}

void LoginCommonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aread_id_ = 0u;
    agent_id_ = GOOGLE_ULONGLONG(0);
    channel_id_ = 0u;
    referral_code_ = 0u;
    if (has_platform_os()) {
      if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
        platform_os_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::kEmptyString) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_phone_mode()) {
      if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
        phone_mode_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginCommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 aread_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aread_id_)));
          set_has_aread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agent_id;
        break;
      }

      // optional uint64 agent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_referral_code;
        break;
      }

      // optional uint32 referral_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referral_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &referral_code_)));
          set_has_referral_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform_os;
        break;
      }

      // optional string platform_os = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform_os().data(), this->platform_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_country;
        break;
      }

      // optional string country = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_province;
        break;
      }

      // optional string province = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_city;
        break;
      }

      // optional string city = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_phone_mode;
        break;
      }

      // optional string phone_mode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_mode().data(), this->phone_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_device_id;
        break;
      }

      // optional string device_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginCommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 aread_id = 1;
  if (has_aread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aread_id(), output);
  }

  // optional uint64 agent_id = 2;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->agent_id(), output);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // optional uint32 referral_code = 4;
  if (has_referral_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->referral_code(), output);
  }

  // optional string platform_os = 5;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform_os(), output);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->country(), output);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->province(), output);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->city(), output);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ip(), output);
  }

  // optional string phone_mode = 10;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_mode().data(), this->phone_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->phone_mode(), output);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginCommonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 aread_id = 1;
  if (has_aread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aread_id(), target);
  }

  // optional uint64 agent_id = 2;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->agent_id(), target);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // optional uint32 referral_code = 4;
  if (has_referral_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->referral_code(), target);
  }

  // optional string platform_os = 5;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform_os(), target);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->province(), target);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->city(), target);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  // optional string phone_mode = 10;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_mode().data(), this->phone_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->phone_mode(), target);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginCommonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 aread_id = 1;
    if (has_aread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aread_id());
    }

    // optional uint64 agent_id = 2;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agent_id());
    }

    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 referral_code = 4;
    if (has_referral_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->referral_code());
    }

    // optional string platform_os = 5;
    if (has_platform_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_os());
    }

    // optional string country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string province = 7;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 8;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string phone_mode = 10;
    if (has_phone_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_mode());
    }

    // optional string device_id = 11;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginCommonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginCommonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginCommonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginCommonData::MergeFrom(const LoginCommonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aread_id()) {
      set_aread_id(from.aread_id());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_referral_code()) {
      set_referral_code(from.referral_code());
    }
    if (from.has_platform_os()) {
      set_platform_os(from.platform_os());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_phone_mode()) {
      set_phone_mode(from.phone_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginCommonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginCommonData::CopyFrom(const LoginCommonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginCommonData::IsInitialized() const {

  return true;
}

void LoginCommonData::Swap(LoginCommonData* other) {
  if (other != this) {
    std::swap(aread_id_, other->aread_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(referral_code_, other->referral_code_);
    std::swap(platform_os_, other->platform_os_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(ip_, other->ip_);
    std::swap(phone_mode_, other->phone_mode_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginCommonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginCommonData_descriptor_;
  metadata.reflection = LoginCommonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogMoneyDetail::kEventIdFieldNumber;
const int LogMoneyDetail::kSequenceFieldNumber;
const int LogMoneyDetail::kBusNameFieldNumber;
const int LogMoneyDetail::kEventTimeFieldNumber;
const int LogMoneyDetail::kUserIdFieldNumber;
const int LogMoneyDetail::kUserNameFieldNumber;
const int LogMoneyDetail::kGameIdFieldNumber;
const int LogMoneyDetail::kRoomIdFieldNumber;
const int LogMoneyDetail::kDeskIdFieldNumber;
const int LogMoneyDetail::kChairIdFieldNumber;
const int LogMoneyDetail::kAccountTypeFieldNumber;
const int LogMoneyDetail::kOptTypeFieldNumber;
const int LogMoneyDetail::kOptReasonFieldNumber;
const int LogMoneyDetail::kAllJettonFieldNumber;
const int LogMoneyDetail::kJettonFieldNumber;
const int LogMoneyDetail::kBankJettonFieldNumber;
const int LogMoneyDetail::kChangeCountFieldNumber;
const int LogMoneyDetail::kAgentIdFieldNumber;
const int LogMoneyDetail::kIpFieldNumber;
const int LogMoneyDetail::kRecordIdFieldNumber;
#endif  // !_MSC_VER

LogMoneyDetail::LogMoneyDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogMoneyDetail::InitAsDefaultInstance() {
}

LogMoneyDetail::LogMoneyDetail(const LogMoneyDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogMoneyDetail::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  chair_id_ = 0u;
  account_type_ = 0u;
  opt_type_ = 0u;
  opt_reason_ = 0u;
  all_jetton_ = GOOGLE_ULONGLONG(0);
  jetton_ = GOOGLE_ULONGLONG(0);
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  change_count_ = GOOGLE_ULONGLONG(0);
  agent_id_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMoneyDetail::~LogMoneyDetail() {
  SharedDtor();
}

void LogMoneyDetail::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LogMoneyDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMoneyDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMoneyDetail_descriptor_;
}

const LogMoneyDetail& LogMoneyDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogMoneyDetail* LogMoneyDetail::default_instance_ = NULL;

LogMoneyDetail* LogMoneyDetail::New() const {
  return new LogMoneyDetail;
}

void LogMoneyDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    game_id_ = 0u;
    room_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    desk_id_ = 0u;
    chair_id_ = 0u;
    account_type_ = 0u;
    opt_type_ = 0u;
    opt_reason_ = 0u;
    all_jetton_ = GOOGLE_ULONGLONG(0);
    jetton_ = GOOGLE_ULONGLONG(0);
    bank_jetton_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    change_count_ = GOOGLE_ULONGLONG(0);
    agent_id_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    record_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogMoneyDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_account_type;
        break;
      }

      // optional uint32 account_type = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_opt_type;
        break;
      }

      // optional uint32 opt_type = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_opt_reason;
        break;
      }

      // optional uint32 opt_reason = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_reason_)));
          set_has_opt_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_all_jetton;
        break;
      }

      // optional uint64 all_jetton = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_jetton_)));
          set_has_all_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_jetton;
        break;
      }

      // optional uint64 jetton = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_bank_jetton;
        break;
      }

      // optional uint64 bank_jetton = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_jetton_)));
          set_has_bank_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_change_count;
        break;
      }

      // optional uint64 change_count = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &change_count_)));
          set_has_change_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_agent_id;
        break;
      }

      // optional uint64 agent_id = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_ip;
        break;
      }

      // optional string ip = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_record_id;
        break;
      }

      // optional uint64 record_id = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMoneyDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional uint32 game_id = 20;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->game_id(), output);
  }

  // optional uint32 room_id = 21;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->room_id(), output);
  }

  // optional uint32 desk_id = 22;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->desk_id(), output);
  }

  // optional uint32 chair_id = 23;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->chair_id(), output);
  }

  // optional uint32 account_type = 24;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->account_type(), output);
  }

  // optional uint32 opt_type = 26;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->opt_type(), output);
  }

  // optional uint32 opt_reason = 27;
  if (has_opt_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->opt_reason(), output);
  }

  // optional uint64 all_jetton = 28;
  if (has_all_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->all_jetton(), output);
  }

  // optional uint64 jetton = 29;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->jetton(), output);
  }

  // optional uint64 bank_jetton = 30;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->bank_jetton(), output);
  }

  // optional uint64 change_count = 31;
  if (has_change_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->change_count(), output);
  }

  // optional uint64 agent_id = 32;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->agent_id(), output);
  }

  // optional string ip = 33;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->ip(), output);
  }

  // optional uint64 record_id = 34;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->record_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogMoneyDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional uint32 game_id = 20;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->game_id(), target);
  }

  // optional uint32 room_id = 21;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->room_id(), target);
  }

  // optional uint32 desk_id = 22;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->desk_id(), target);
  }

  // optional uint32 chair_id = 23;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->chair_id(), target);
  }

  // optional uint32 account_type = 24;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->account_type(), target);
  }

  // optional uint32 opt_type = 26;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->opt_type(), target);
  }

  // optional uint32 opt_reason = 27;
  if (has_opt_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->opt_reason(), target);
  }

  // optional uint64 all_jetton = 28;
  if (has_all_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->all_jetton(), target);
  }

  // optional uint64 jetton = 29;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->jetton(), target);
  }

  // optional uint64 bank_jetton = 30;
  if (has_bank_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->bank_jetton(), target);
  }

  // optional uint64 change_count = 31;
  if (has_change_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->change_count(), target);
  }

  // optional uint64 agent_id = 32;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->agent_id(), target);
  }

  // optional string ip = 33;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->ip(), target);
  }

  // optional uint64 record_id = 34;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->record_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogMoneyDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint32 game_id = 20;
    if (has_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 21;
    if (has_room_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 desk_id = 22;
    if (has_desk_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional uint32 chair_id = 23;
    if (has_chair_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint32 account_type = 24;
    if (has_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // optional uint32 opt_type = 26;
    if (has_opt_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_type());
    }

    // optional uint32 opt_reason = 27;
    if (has_opt_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_reason());
    }

    // optional uint64 all_jetton = 28;
    if (has_all_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_jetton());
    }

    // optional uint64 jetton = 29;
    if (has_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton());
    }

    // optional uint64 bank_jetton = 30;
    if (has_bank_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_jetton());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 change_count = 31;
    if (has_change_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->change_count());
    }

    // optional uint64 agent_id = 32;
    if (has_agent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agent_id());
    }

    // optional string ip = 33;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 record_id = 34;
    if (has_record_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMoneyDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogMoneyDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogMoneyDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogMoneyDetail::MergeFrom(const LogMoneyDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_opt_reason()) {
      set_opt_reason(from.opt_reason());
    }
    if (from.has_all_jetton()) {
      set_all_jetton(from.all_jetton());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_change_count()) {
      set_change_count(from.change_count());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogMoneyDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMoneyDetail::CopyFrom(const LogMoneyDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMoneyDetail::IsInitialized() const {

  return true;
}

void LogMoneyDetail::Swap(LogMoneyDetail* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(account_type_, other->account_type_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(opt_reason_, other->opt_reason_);
    std::swap(all_jetton_, other->all_jetton_);
    std::swap(jetton_, other->jetton_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(change_count_, other->change_count_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(ip_, other->ip_);
    std::swap(record_id_, other->record_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogMoneyDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMoneyDetail_descriptor_;
  metadata.reflection = LogMoneyDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogGameRecordDetail::kEventIdFieldNumber;
const int LogGameRecordDetail::kSequenceFieldNumber;
const int LogGameRecordDetail::kBusNameFieldNumber;
const int LogGameRecordDetail::kEventTimeFieldNumber;
const int LogGameRecordDetail::kUserIdFieldNumber;
const int LogGameRecordDetail::kUserNameFieldNumber;
const int LogGameRecordDetail::kRecordIdFieldNumber;
const int LogGameRecordDetail::kGameIdFieldNumber;
const int LogGameRecordDetail::kRoomIdFieldNumber;
const int LogGameRecordDetail::kDeskIdFieldNumber;
const int LogGameRecordDetail::kChairIdFieldNumber;
const int LogGameRecordDetail::kResultInfoFieldNumber;
const int LogGameRecordDetail::kPourJettonFieldNumber;
const int LogGameRecordDetail::kWinJettonFieldNumber;
const int LogGameRecordDetail::kTaxJettonFieldNumber;
const int LogGameRecordDetail::kWinListFieldNumber;
const int LogGameRecordDetail::kLostListFieldNumber;
#endif  // !_MSC_VER

LogGameRecordDetail::LogGameRecordDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogGameRecordDetail::InitAsDefaultInstance() {
}

LogGameRecordDetail::LogGameRecordDetail(const LogGameRecordDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogGameRecordDetail::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  chair_id_ = 0u;
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pour_jetton_ = GOOGLE_ULONGLONG(0);
  win_jetton_ = GOOGLE_LONGLONG(0);
  tax_jetton_ = GOOGLE_ULONGLONG(0);
  win_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lost_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogGameRecordDetail::~LogGameRecordDetail() {
  SharedDtor();
}

void LogGameRecordDetail::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (win_list_ != &::google::protobuf::internal::kEmptyString) {
    delete win_list_;
  }
  if (lost_list_ != &::google::protobuf::internal::kEmptyString) {
    delete lost_list_;
  }
  if (this != default_instance_) {
  }
}

void LogGameRecordDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogGameRecordDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogGameRecordDetail_descriptor_;
}

const LogGameRecordDetail& LogGameRecordDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogGameRecordDetail* LogGameRecordDetail::default_instance_ = NULL;

LogGameRecordDetail* LogGameRecordDetail::New() const {
  return new LogGameRecordDetail;
}

void LogGameRecordDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    record_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    room_id_ = 0u;
    desk_id_ = 0u;
    chair_id_ = 0u;
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
    pour_jetton_ = GOOGLE_ULONGLONG(0);
    win_jetton_ = GOOGLE_LONGLONG(0);
    tax_jetton_ = GOOGLE_ULONGLONG(0);
    if (has_win_list()) {
      if (win_list_ != &::google::protobuf::internal::kEmptyString) {
        win_list_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_lost_list()) {
      if (lost_list_ != &::google::protobuf::internal::kEmptyString) {
        lost_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogGameRecordDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_record_id;
        break;
      }

      // optional uint64 record_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_result_info;
        break;
      }

      // optional string result_info = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_pour_jetton;
        break;
      }

      // optional uint64 pour_jetton = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_jetton_)));
          set_has_pour_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_win_jetton;
        break;
      }

      // optional int64 win_jetton = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_jetton_)));
          set_has_win_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_tax_jetton;
        break;
      }

      // optional uint64 tax_jetton = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tax_jetton_)));
          set_has_tax_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_win_list;
        break;
      }

      // optional string win_list = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_win_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->win_list().data(), this->win_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_lost_list;
        break;
      }

      // optional string lost_list = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lost_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lost_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lost_list().data(), this->lost_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogGameRecordDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional uint64 record_id = 20;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->record_id(), output);
  }

  // optional uint32 game_id = 21;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->game_id(), output);
  }

  // optional uint32 room_id = 22;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->room_id(), output);
  }

  // optional uint32 desk_id = 23;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->desk_id(), output);
  }

  // optional uint32 chair_id = 24;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->chair_id(), output);
  }

  // optional string result_info = 25;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->result_info(), output);
  }

  // optional uint64 pour_jetton = 26;
  if (has_pour_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->pour_jetton(), output);
  }

  // optional int64 win_jetton = 27;
  if (has_win_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->win_jetton(), output);
  }

  // optional uint64 tax_jetton = 28;
  if (has_tax_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->tax_jetton(), output);
  }

  // optional string win_list = 29;
  if (has_win_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_list().data(), this->win_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->win_list(), output);
  }

  // optional string lost_list = 30;
  if (has_lost_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lost_list().data(), this->lost_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->lost_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogGameRecordDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional uint64 record_id = 20;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->record_id(), target);
  }

  // optional uint32 game_id = 21;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->game_id(), target);
  }

  // optional uint32 room_id = 22;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->room_id(), target);
  }

  // optional uint32 desk_id = 23;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->desk_id(), target);
  }

  // optional uint32 chair_id = 24;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->chair_id(), target);
  }

  // optional string result_info = 25;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->result_info(), target);
  }

  // optional uint64 pour_jetton = 26;
  if (has_pour_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->pour_jetton(), target);
  }

  // optional int64 win_jetton = 27;
  if (has_win_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->win_jetton(), target);
  }

  // optional uint64 tax_jetton = 28;
  if (has_tax_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->tax_jetton(), target);
  }

  // optional string win_list = 29;
  if (has_win_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_list().data(), this->win_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->win_list(), target);
  }

  // optional string lost_list = 30;
  if (has_lost_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lost_list().data(), this->lost_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->lost_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogGameRecordDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 record_id = 20;
    if (has_record_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_id());
    }

    // optional uint32 game_id = 21;
    if (has_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 room_id = 22;
    if (has_room_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 23;
    if (has_desk_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional uint32 chair_id = 24;
    if (has_chair_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional string result_info = 25;
    if (has_result_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }

    // optional uint64 pour_jetton = 26;
    if (has_pour_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour_jetton());
    }

    // optional int64 win_jetton = 27;
    if (has_win_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_jetton());
    }

    // optional uint64 tax_jetton = 28;
    if (has_tax_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tax_jetton());
    }

    // optional string win_list = 29;
    if (has_win_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->win_list());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string lost_list = 30;
    if (has_lost_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lost_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogGameRecordDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogGameRecordDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogGameRecordDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogGameRecordDetail::MergeFrom(const LogGameRecordDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_pour_jetton()) {
      set_pour_jetton(from.pour_jetton());
    }
    if (from.has_win_jetton()) {
      set_win_jetton(from.win_jetton());
    }
    if (from.has_tax_jetton()) {
      set_tax_jetton(from.tax_jetton());
    }
    if (from.has_win_list()) {
      set_win_list(from.win_list());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lost_list()) {
      set_lost_list(from.lost_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogGameRecordDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogGameRecordDetail::CopyFrom(const LogGameRecordDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogGameRecordDetail::IsInitialized() const {

  return true;
}

void LogGameRecordDetail::Swap(LogGameRecordDetail* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(record_id_, other->record_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(result_info_, other->result_info_);
    std::swap(pour_jetton_, other->pour_jetton_);
    std::swap(win_jetton_, other->win_jetton_);
    std::swap(tax_jetton_, other->tax_jetton_);
    std::swap(win_list_, other->win_list_);
    std::swap(lost_list_, other->lost_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogGameRecordDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogGameRecordDetail_descriptor_;
  metadata.reflection = LogGameRecordDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogGameDetail::kEventIdFieldNumber;
const int LogGameDetail::kSequenceFieldNumber;
const int LogGameDetail::kBusNameFieldNumber;
const int LogGameDetail::kEventTimeFieldNumber;
const int LogGameDetail::kUserIdFieldNumber;
const int LogGameDetail::kUserNameFieldNumber;
const int LogGameDetail::kRecordIdFieldNumber;
const int LogGameDetail::kGameIdFieldNumber;
const int LogGameDetail::kRoomIdFieldNumber;
const int LogGameDetail::kDeskIdFieldNumber;
const int LogGameDetail::kBetInfoFieldNumber;
const int LogGameDetail::kResultInfoFieldNumber;
const int LogGameDetail::kGameTimeFieldNumber;
#endif  // !_MSC_VER

LogGameDetail::LogGameDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogGameDetail::InitAsDefaultInstance() {
}

LogGameDetail::LogGameDetail(const LogGameDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogGameDetail::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  bet_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogGameDetail::~LogGameDetail() {
  SharedDtor();
}

void LogGameDetail::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (bet_info_ != &::google::protobuf::internal::kEmptyString) {
    delete bet_info_;
  }
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (this != default_instance_) {
  }
}

void LogGameDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogGameDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogGameDetail_descriptor_;
}

const LogGameDetail& LogGameDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogGameDetail* LogGameDetail::default_instance_ = NULL;

LogGameDetail* LogGameDetail::New() const {
  return new LogGameDetail;
}

void LogGameDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    record_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    room_id_ = 0u;
    desk_id_ = 0u;
    if (has_bet_info()) {
      if (bet_info_ != &::google::protobuf::internal::kEmptyString) {
        bet_info_->clear();
      }
    }
    if (has_result_info()) {
      if (result_info_ != &::google::protobuf::internal::kEmptyString) {
        result_info_->clear();
      }
    }
    game_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogGameDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_record_id;
        break;
      }

      // optional uint64 record_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_bet_info;
        break;
      }

      // optional string bet_info = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bet_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bet_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bet_info().data(), this->bet_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_result_info;
        break;
      }

      // optional string result_info = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result_info().data(), this->result_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_game_time;
        break;
      }

      // optional uint64 game_time = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_time_)));
          set_has_game_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogGameDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional uint64 record_id = 20;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->record_id(), output);
  }

  // optional uint32 game_id = 21;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->game_id(), output);
  }

  // optional uint32 room_id = 22;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->room_id(), output);
  }

  // optional uint32 desk_id = 23;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->desk_id(), output);
  }

  // optional string bet_info = 24;
  if (has_bet_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bet_info().data(), this->bet_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->bet_info(), output);
  }

  // optional string result_info = 25;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->result_info(), output);
  }

  // optional uint64 game_time = 26;
  if (has_game_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->game_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogGameDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional uint64 record_id = 20;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->record_id(), target);
  }

  // optional uint32 game_id = 21;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->game_id(), target);
  }

  // optional uint32 room_id = 22;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->room_id(), target);
  }

  // optional uint32 desk_id = 23;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->desk_id(), target);
  }

  // optional string bet_info = 24;
  if (has_bet_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bet_info().data(), this->bet_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->bet_info(), target);
  }

  // optional string result_info = 25;
  if (has_result_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result_info().data(), this->result_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->result_info(), target);
  }

  // optional uint64 game_time = 26;
  if (has_game_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->game_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogGameDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 record_id = 20;
    if (has_record_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_id());
    }

    // optional uint32 game_id = 21;
    if (has_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 room_id = 22;
    if (has_room_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 23;
    if (has_desk_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional string bet_info = 24;
    if (has_bet_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bet_info());
    }

    // optional string result_info = 25;
    if (has_result_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result_info());
    }

    // optional uint64 game_time = 26;
    if (has_game_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogGameDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogGameDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogGameDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogGameDetail::MergeFrom(const LogGameDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_bet_info()) {
      set_bet_info(from.bet_info());
    }
    if (from.has_result_info()) {
      set_result_info(from.result_info());
    }
    if (from.has_game_time()) {
      set_game_time(from.game_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogGameDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogGameDetail::CopyFrom(const LogGameDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogGameDetail::IsInitialized() const {

  return true;
}

void LogGameDetail::Swap(LogGameDetail* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(record_id_, other->record_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(bet_info_, other->bet_info_);
    std::swap(result_info_, other->result_info_);
    std::swap(game_time_, other->game_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogGameDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogGameDetail_descriptor_;
  metadata.reflection = LogGameDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbLogGameDay::kDateIdFieldNumber;
const int tbLogGameDay::kGameIdFieldNumber;
const int tbLogGameDay::kRoomIdFieldNumber;
const int tbLogGameDay::kAllPourFieldNumber;
const int tbLogGameDay::kPourDayFieldNumber;
const int tbLogGameDay::kPourWeekFieldNumber;
const int tbLogGameDay::kPourMonthFieldNumber;
const int tbLogGameDay::kAllWinFieldNumber;
const int tbLogGameDay::kWinDayFieldNumber;
const int tbLogGameDay::kWinWeekFieldNumber;
const int tbLogGameDay::kWinMonthFieldNumber;
const int tbLogGameDay::kAllFeeFieldNumber;
const int tbLogGameDay::kFeeDayFieldNumber;
const int tbLogGameDay::kFeeWeekFieldNumber;
const int tbLogGameDay::kFeeMonthFieldNumber;
const int tbLogGameDay::kStatTimeFieldNumber;
#endif  // !_MSC_VER

tbLogGameDay::tbLogGameDay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbLogGameDay::InitAsDefaultInstance() {
}

tbLogGameDay::tbLogGameDay(const tbLogGameDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbLogGameDay::SharedCtor() {
  _cached_size_ = 0;
  date_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_id_ = 0u;
  room_id_ = 0u;
  all_pour_ = GOOGLE_ULONGLONG(0);
  pour_day_ = GOOGLE_ULONGLONG(0);
  pour_week_ = GOOGLE_ULONGLONG(0);
  pour_month_ = GOOGLE_ULONGLONG(0);
  all_win_ = GOOGLE_LONGLONG(0);
  win_day_ = GOOGLE_LONGLONG(0);
  win_week_ = GOOGLE_LONGLONG(0);
  win_month_ = GOOGLE_LONGLONG(0);
  all_fee_ = GOOGLE_ULONGLONG(0);
  fee_day_ = GOOGLE_ULONGLONG(0);
  fee_week_ = GOOGLE_ULONGLONG(0);
  fee_month_ = GOOGLE_ULONGLONG(0);
  stat_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbLogGameDay::~tbLogGameDay() {
  SharedDtor();
}

void tbLogGameDay::SharedDtor() {
  if (date_id_ != &::google::protobuf::internal::kEmptyString) {
    delete date_id_;
  }
  if (stat_time_ != &::google::protobuf::internal::kEmptyString) {
    delete stat_time_;
  }
  if (this != default_instance_) {
  }
}

void tbLogGameDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbLogGameDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbLogGameDay_descriptor_;
}

const tbLogGameDay& tbLogGameDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbLogGameDay* tbLogGameDay::default_instance_ = NULL;

tbLogGameDay* tbLogGameDay::New() const {
  return new tbLogGameDay;
}

void tbLogGameDay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_date_id()) {
      if (date_id_ != &::google::protobuf::internal::kEmptyString) {
        date_id_->clear();
      }
    }
    game_id_ = 0u;
    room_id_ = 0u;
    all_pour_ = GOOGLE_ULONGLONG(0);
    pour_day_ = GOOGLE_ULONGLONG(0);
    pour_week_ = GOOGLE_ULONGLONG(0);
    pour_month_ = GOOGLE_ULONGLONG(0);
    all_win_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_day_ = GOOGLE_LONGLONG(0);
    win_week_ = GOOGLE_LONGLONG(0);
    win_month_ = GOOGLE_LONGLONG(0);
    all_fee_ = GOOGLE_ULONGLONG(0);
    fee_day_ = GOOGLE_ULONGLONG(0);
    fee_week_ = GOOGLE_ULONGLONG(0);
    fee_month_ = GOOGLE_ULONGLONG(0);
    if (has_stat_time()) {
      if (stat_time_ != &::google::protobuf::internal::kEmptyString) {
        stat_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbLogGameDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string date_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_id().data(), this->date_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_all_pour;
        break;
      }

      // optional uint64 all_pour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_pour_)));
          set_has_all_pour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pour_day;
        break;
      }

      // optional uint64 pour_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_day_)));
          set_has_pour_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pour_week;
        break;
      }

      // optional uint64 pour_week = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_week_)));
          set_has_pour_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pour_month;
        break;
      }

      // optional uint64 pour_month = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_month_)));
          set_has_pour_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_all_win;
        break;
      }

      // optional int64 all_win = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_win_)));
          set_has_all_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_day;
        break;
      }

      // optional int64 win_day = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_day_)));
          set_has_win_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_win_week;
        break;
      }

      // optional int64 win_week = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_week_)));
          set_has_win_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_win_month;
        break;
      }

      // optional int64 win_month = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_month_)));
          set_has_win_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_all_fee;
        break;
      }

      // optional uint64 all_fee = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_fee_)));
          set_has_all_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fee_day;
        break;
      }

      // optional uint64 fee_day = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_day_)));
          set_has_fee_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fee_week;
        break;
      }

      // optional uint64 fee_week = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_week_)));
          set_has_fee_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fee_month;
        break;
      }

      // optional uint64 fee_month = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_month_)));
          set_has_fee_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_stat_time;
        break;
      }

      // optional string stat_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stat_time().data(), this->stat_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbLogGameDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string date_id = 1;
  if (has_date_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_id().data(), this->date_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->date_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint64 all_pour = 4;
  if (has_all_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->all_pour(), output);
  }

  // optional uint64 pour_day = 5;
  if (has_pour_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->pour_day(), output);
  }

  // optional uint64 pour_week = 6;
  if (has_pour_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pour_week(), output);
  }

  // optional uint64 pour_month = 7;
  if (has_pour_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->pour_month(), output);
  }

  // optional int64 all_win = 8;
  if (has_all_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->all_win(), output);
  }

  // optional int64 win_day = 9;
  if (has_win_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->win_day(), output);
  }

  // optional int64 win_week = 10;
  if (has_win_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->win_week(), output);
  }

  // optional int64 win_month = 11;
  if (has_win_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->win_month(), output);
  }

  // optional uint64 all_fee = 12;
  if (has_all_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->all_fee(), output);
  }

  // optional uint64 fee_day = 13;
  if (has_fee_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->fee_day(), output);
  }

  // optional uint64 fee_week = 14;
  if (has_fee_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->fee_week(), output);
  }

  // optional uint64 fee_month = 15;
  if (has_fee_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->fee_month(), output);
  }

  // optional string stat_time = 16;
  if (has_stat_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stat_time().data(), this->stat_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->stat_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbLogGameDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string date_id = 1;
  if (has_date_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_id().data(), this->date_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint64 all_pour = 4;
  if (has_all_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->all_pour(), target);
  }

  // optional uint64 pour_day = 5;
  if (has_pour_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->pour_day(), target);
  }

  // optional uint64 pour_week = 6;
  if (has_pour_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->pour_week(), target);
  }

  // optional uint64 pour_month = 7;
  if (has_pour_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->pour_month(), target);
  }

  // optional int64 all_win = 8;
  if (has_all_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->all_win(), target);
  }

  // optional int64 win_day = 9;
  if (has_win_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->win_day(), target);
  }

  // optional int64 win_week = 10;
  if (has_win_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->win_week(), target);
  }

  // optional int64 win_month = 11;
  if (has_win_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->win_month(), target);
  }

  // optional uint64 all_fee = 12;
  if (has_all_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->all_fee(), target);
  }

  // optional uint64 fee_day = 13;
  if (has_fee_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->fee_day(), target);
  }

  // optional uint64 fee_week = 14;
  if (has_fee_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->fee_week(), target);
  }

  // optional uint64 fee_month = 15;
  if (has_fee_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->fee_month(), target);
  }

  // optional string stat_time = 16;
  if (has_stat_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stat_time().data(), this->stat_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->stat_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbLogGameDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string date_id = 1;
    if (has_date_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint64 all_pour = 4;
    if (has_all_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_pour());
    }

    // optional uint64 pour_day = 5;
    if (has_pour_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour_day());
    }

    // optional uint64 pour_week = 6;
    if (has_pour_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour_week());
    }

    // optional uint64 pour_month = 7;
    if (has_pour_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour_month());
    }

    // optional int64 all_win = 8;
    if (has_all_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_win());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 win_day = 9;
    if (has_win_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_day());
    }

    // optional int64 win_week = 10;
    if (has_win_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_week());
    }

    // optional int64 win_month = 11;
    if (has_win_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->win_month());
    }

    // optional uint64 all_fee = 12;
    if (has_all_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_fee());
    }

    // optional uint64 fee_day = 13;
    if (has_fee_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_day());
    }

    // optional uint64 fee_week = 14;
    if (has_fee_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_week());
    }

    // optional uint64 fee_month = 15;
    if (has_fee_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_month());
    }

    // optional string stat_time = 16;
    if (has_stat_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stat_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbLogGameDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbLogGameDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbLogGameDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbLogGameDay::MergeFrom(const tbLogGameDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date_id()) {
      set_date_id(from.date_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_all_pour()) {
      set_all_pour(from.all_pour());
    }
    if (from.has_pour_day()) {
      set_pour_day(from.pour_day());
    }
    if (from.has_pour_week()) {
      set_pour_week(from.pour_week());
    }
    if (from.has_pour_month()) {
      set_pour_month(from.pour_month());
    }
    if (from.has_all_win()) {
      set_all_win(from.all_win());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_day()) {
      set_win_day(from.win_day());
    }
    if (from.has_win_week()) {
      set_win_week(from.win_week());
    }
    if (from.has_win_month()) {
      set_win_month(from.win_month());
    }
    if (from.has_all_fee()) {
      set_all_fee(from.all_fee());
    }
    if (from.has_fee_day()) {
      set_fee_day(from.fee_day());
    }
    if (from.has_fee_week()) {
      set_fee_week(from.fee_week());
    }
    if (from.has_fee_month()) {
      set_fee_month(from.fee_month());
    }
    if (from.has_stat_time()) {
      set_stat_time(from.stat_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbLogGameDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbLogGameDay::CopyFrom(const tbLogGameDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbLogGameDay::IsInitialized() const {

  return true;
}

void tbLogGameDay::Swap(tbLogGameDay* other) {
  if (other != this) {
    std::swap(date_id_, other->date_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(all_pour_, other->all_pour_);
    std::swap(pour_day_, other->pour_day_);
    std::swap(pour_week_, other->pour_week_);
    std::swap(pour_month_, other->pour_month_);
    std::swap(all_win_, other->all_win_);
    std::swap(win_day_, other->win_day_);
    std::swap(win_week_, other->win_week_);
    std::swap(win_month_, other->win_month_);
    std::swap(all_fee_, other->all_fee_);
    std::swap(fee_day_, other->fee_day_);
    std::swap(fee_week_, other->fee_week_);
    std::swap(fee_month_, other->fee_month_);
    std::swap(stat_time_, other->stat_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbLogGameDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbLogGameDay_descriptor_;
  metadata.reflection = tbLogGameDay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbGameUserManagerData::kIdFieldNumber;
const int tbGameUserManagerData::kUserIdFieldNumber;
const int tbGameUserManagerData::kUserNameFieldNumber;
const int tbGameUserManagerData::kCreateDateFieldNumber;
const int tbGameUserManagerData::kRosterTypeFieldNumber;
const int tbGameUserManagerData::kStartTimeFieldNumber;
const int tbGameUserManagerData::kEndTimeFieldNumber;
const int tbGameUserManagerData::kGameIdFieldNumber;
const int tbGameUserManagerData::kRoomIdFieldNumber;
const int tbGameUserManagerData::kStateFieldNumber;
const int tbGameUserManagerData::kOptMarkFieldNumber;
const int tbGameUserManagerData::kRateMarkFieldNumber;
const int tbGameUserManagerData::kControlLevelFieldNumber;
const int tbGameUserManagerData::kMaxWinJettonFieldNumber;
const int tbGameUserManagerData::kCurWinFieldNumber;
#endif  // !_MSC_VER

tbGameUserManagerData::tbGameUserManagerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbGameUserManagerData::InitAsDefaultInstance() {
}

tbGameUserManagerData::tbGameUserManagerData(const tbGameUserManagerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbGameUserManagerData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roster_type_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  state_ = 0u;
  opt_mark_ = GOOGLE_LONGLONG(0);
  rate_mark_ = 0;
  control_level_ = 0;
  max_win_jetton_ = GOOGLE_ULONGLONG(0);
  cur_win_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbGameUserManagerData::~tbGameUserManagerData() {
  SharedDtor();
}

void tbGameUserManagerData::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    delete create_date_;
  }
  if (this != default_instance_) {
  }
}

void tbGameUserManagerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbGameUserManagerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbGameUserManagerData_descriptor_;
}

const tbGameUserManagerData& tbGameUserManagerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbGameUserManagerData* tbGameUserManagerData::default_instance_ = NULL;

tbGameUserManagerData* tbGameUserManagerData::New() const {
  return new tbGameUserManagerData;
}

void tbGameUserManagerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_create_date()) {
      if (create_date_ != &::google::protobuf::internal::kEmptyString) {
        create_date_->clear();
      }
    }
    roster_type_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    room_id_ = 0u;
    state_ = 0u;
    opt_mark_ = GOOGLE_LONGLONG(0);
    rate_mark_ = 0;
    control_level_ = 0;
    max_win_jetton_ = GOOGLE_ULONGLONG(0);
    cur_win_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbGameUserManagerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_create_date;
        break;
      }

      // optional string create_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_date().data(), this->create_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roster_type;
        break;
      }

      // optional uint32 roster_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roster_type_)));
          set_has_roster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // optional uint32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_opt_mark;
        break;
      }

      // optional int64 opt_mark = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opt_mark_)));
          set_has_opt_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_rate_mark;
        break;
      }

      // optional float rate_mark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_mark_)));
          set_has_rate_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_control_level;
        break;
      }

      // optional int32 control_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_level_)));
          set_has_control_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_win_jetton;
        break;
      }

      // optional uint64 max_win_jetton = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_win_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_win_jetton_)));
          set_has_max_win_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cur_win;
        break;
      }

      // optional int64 cur_win = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_win_)));
          set_has_cur_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbGameUserManagerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional string create_date = 4;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_date().data(), this->create_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->create_date(), output);
  }

  // optional uint32 roster_type = 5;
  if (has_roster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->roster_type(), output);
  }

  // optional uint64 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->start_time(), output);
  }

  // optional uint64 end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->end_time(), output);
  }

  // optional uint32 game_id = 8;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_id(), output);
  }

  // optional uint32 room_id = 9;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->room_id(), output);
  }

  // optional uint32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->state(), output);
  }

  // optional int64 opt_mark = 11;
  if (has_opt_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->opt_mark(), output);
  }

  // optional float rate_mark = 12;
  if (has_rate_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->rate_mark(), output);
  }

  // optional int32 control_level = 13;
  if (has_control_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->control_level(), output);
  }

  // optional uint64 max_win_jetton = 14;
  if (has_max_win_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->max_win_jetton(), output);
  }

  // optional int64 cur_win = 15;
  if (has_cur_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->cur_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbGameUserManagerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string create_date = 4;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_date().data(), this->create_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->create_date(), target);
  }

  // optional uint32 roster_type = 5;
  if (has_roster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->roster_type(), target);
  }

  // optional uint64 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->start_time(), target);
  }

  // optional uint64 end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->end_time(), target);
  }

  // optional uint32 game_id = 8;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_id(), target);
  }

  // optional uint32 room_id = 9;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->room_id(), target);
  }

  // optional uint32 state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->state(), target);
  }

  // optional int64 opt_mark = 11;
  if (has_opt_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->opt_mark(), target);
  }

  // optional float rate_mark = 12;
  if (has_rate_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->rate_mark(), target);
  }

  // optional int32 control_level = 13;
  if (has_control_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->control_level(), target);
  }

  // optional uint64 max_win_jetton = 14;
  if (has_max_win_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->max_win_jetton(), target);
  }

  // optional int64 cur_win = 15;
  if (has_cur_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->cur_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbGameUserManagerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string create_date = 4;
    if (has_create_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_date());
    }

    // optional uint32 roster_type = 5;
    if (has_roster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roster_type());
    }

    // optional uint64 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint32 game_id = 8;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 room_id = 9;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional int64 opt_mark = 11;
    if (has_opt_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opt_mark());
    }

    // optional float rate_mark = 12;
    if (has_rate_mark()) {
      total_size += 1 + 4;
    }

    // optional int32 control_level = 13;
    if (has_control_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_level());
    }

    // optional uint64 max_win_jetton = 14;
    if (has_max_win_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_win_jetton());
    }

    // optional int64 cur_win = 15;
    if (has_cur_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbGameUserManagerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbGameUserManagerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbGameUserManagerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbGameUserManagerData::MergeFrom(const tbGameUserManagerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_create_date()) {
      set_create_date(from.create_date());
    }
    if (from.has_roster_type()) {
      set_roster_type(from.roster_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_opt_mark()) {
      set_opt_mark(from.opt_mark());
    }
    if (from.has_rate_mark()) {
      set_rate_mark(from.rate_mark());
    }
    if (from.has_control_level()) {
      set_control_level(from.control_level());
    }
    if (from.has_max_win_jetton()) {
      set_max_win_jetton(from.max_win_jetton());
    }
    if (from.has_cur_win()) {
      set_cur_win(from.cur_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbGameUserManagerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbGameUserManagerData::CopyFrom(const tbGameUserManagerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbGameUserManagerData::IsInitialized() const {

  return true;
}

void tbGameUserManagerData::Swap(tbGameUserManagerData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(create_date_, other->create_date_);
    std::swap(roster_type_, other->roster_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(state_, other->state_);
    std::swap(opt_mark_, other->opt_mark_);
    std::swap(rate_mark_, other->rate_mark_);
    std::swap(control_level_, other->control_level_);
    std::swap(max_win_jetton_, other->max_win_jetton_);
    std::swap(cur_win_, other->cur_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbGameUserManagerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbGameUserManagerData_descriptor_;
  metadata.reflection = tbGameUserManagerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbMachineManagerData::kIdFieldNumber;
const int tbMachineManagerData::kDeviceIdFieldNumber;
const int tbMachineManagerData::kCreateDateFieldNumber;
const int tbMachineManagerData::kRosterTypeFieldNumber;
const int tbMachineManagerData::kStartTimeFieldNumber;
const int tbMachineManagerData::kEndTimeFieldNumber;
const int tbMachineManagerData::kGameIdFieldNumber;
const int tbMachineManagerData::kRoomIdFieldNumber;
const int tbMachineManagerData::kStateFieldNumber;
const int tbMachineManagerData::kOptMarkFieldNumber;
const int tbMachineManagerData::kRateMarkFieldNumber;
const int tbMachineManagerData::kControlLevelFieldNumber;
const int tbMachineManagerData::kMaxWinJettonFieldNumber;
const int tbMachineManagerData::kCurWinFieldNumber;
#endif  // !_MSC_VER

tbMachineManagerData::tbMachineManagerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbMachineManagerData::InitAsDefaultInstance() {
}

tbMachineManagerData::tbMachineManagerData(const tbMachineManagerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbMachineManagerData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roster_type_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  state_ = 0u;
  opt_mark_ = GOOGLE_LONGLONG(0);
  rate_mark_ = 0;
  control_level_ = 0;
  max_win_jetton_ = GOOGLE_ULONGLONG(0);
  cur_win_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbMachineManagerData::~tbMachineManagerData() {
  SharedDtor();
}

void tbMachineManagerData::SharedDtor() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    delete create_date_;
  }
  if (this != default_instance_) {
  }
}

void tbMachineManagerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbMachineManagerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbMachineManagerData_descriptor_;
}

const tbMachineManagerData& tbMachineManagerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbMachineManagerData* tbMachineManagerData::default_instance_ = NULL;

tbMachineManagerData* tbMachineManagerData::New() const {
  return new tbMachineManagerData;
}

void tbMachineManagerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_create_date()) {
      if (create_date_ != &::google::protobuf::internal::kEmptyString) {
        create_date_->clear();
      }
    }
    roster_type_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    state_ = 0u;
    opt_mark_ = GOOGLE_LONGLONG(0);
    rate_mark_ = 0;
    control_level_ = 0;
    max_win_jetton_ = GOOGLE_ULONGLONG(0);
    cur_win_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbMachineManagerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_id;
        break;
      }

      // optional string device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_create_date;
        break;
      }

      // optional string create_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_date().data(), this->create_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roster_type;
        break;
      }

      // optional uint32 roster_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roster_type_)));
          set_has_roster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // optional uint32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_opt_mark;
        break;
      }

      // optional int64 opt_mark = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opt_mark_)));
          set_has_opt_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_rate_mark;
        break;
      }

      // optional float rate_mark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_mark_)));
          set_has_rate_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_control_level;
        break;
      }

      // optional int32 control_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_level_)));
          set_has_control_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_win_jetton;
        break;
      }

      // optional uint64 max_win_jetton = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_win_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_win_jetton_)));
          set_has_max_win_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cur_win;
        break;
      }

      // optional int64 cur_win = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_win_)));
          set_has_cur_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbMachineManagerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_id(), output);
  }

  // optional string create_date = 4;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_date().data(), this->create_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->create_date(), output);
  }

  // optional uint32 roster_type = 5;
  if (has_roster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->roster_type(), output);
  }

  // optional uint64 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->start_time(), output);
  }

  // optional uint64 end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->end_time(), output);
  }

  // optional uint32 game_id = 8;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_id(), output);
  }

  // optional uint32 room_id = 9;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->room_id(), output);
  }

  // optional uint32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->state(), output);
  }

  // optional int64 opt_mark = 11;
  if (has_opt_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->opt_mark(), output);
  }

  // optional float rate_mark = 12;
  if (has_rate_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->rate_mark(), output);
  }

  // optional int32 control_level = 13;
  if (has_control_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->control_level(), output);
  }

  // optional uint64 max_win_jetton = 14;
  if (has_max_win_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->max_win_jetton(), output);
  }

  // optional int64 cur_win = 15;
  if (has_cur_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->cur_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbMachineManagerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_id(), target);
  }

  // optional string create_date = 4;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_date().data(), this->create_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->create_date(), target);
  }

  // optional uint32 roster_type = 5;
  if (has_roster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->roster_type(), target);
  }

  // optional uint64 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->start_time(), target);
  }

  // optional uint64 end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->end_time(), target);
  }

  // optional uint32 game_id = 8;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_id(), target);
  }

  // optional uint32 room_id = 9;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->room_id(), target);
  }

  // optional uint32 state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->state(), target);
  }

  // optional int64 opt_mark = 11;
  if (has_opt_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->opt_mark(), target);
  }

  // optional float rate_mark = 12;
  if (has_rate_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->rate_mark(), target);
  }

  // optional int32 control_level = 13;
  if (has_control_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->control_level(), target);
  }

  // optional uint64 max_win_jetton = 14;
  if (has_max_win_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->max_win_jetton(), target);
  }

  // optional int64 cur_win = 15;
  if (has_cur_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->cur_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbMachineManagerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string create_date = 4;
    if (has_create_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_date());
    }

    // optional uint32 roster_type = 5;
    if (has_roster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roster_type());
    }

    // optional uint64 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint32 game_id = 8;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 9;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional int64 opt_mark = 11;
    if (has_opt_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opt_mark());
    }

    // optional float rate_mark = 12;
    if (has_rate_mark()) {
      total_size += 1 + 4;
    }

    // optional int32 control_level = 13;
    if (has_control_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_level());
    }

    // optional uint64 max_win_jetton = 14;
    if (has_max_win_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_win_jetton());
    }

    // optional int64 cur_win = 15;
    if (has_cur_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbMachineManagerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbMachineManagerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbMachineManagerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbMachineManagerData::MergeFrom(const tbMachineManagerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_create_date()) {
      set_create_date(from.create_date());
    }
    if (from.has_roster_type()) {
      set_roster_type(from.roster_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_opt_mark()) {
      set_opt_mark(from.opt_mark());
    }
    if (from.has_rate_mark()) {
      set_rate_mark(from.rate_mark());
    }
    if (from.has_control_level()) {
      set_control_level(from.control_level());
    }
    if (from.has_max_win_jetton()) {
      set_max_win_jetton(from.max_win_jetton());
    }
    if (from.has_cur_win()) {
      set_cur_win(from.cur_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbMachineManagerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbMachineManagerData::CopyFrom(const tbMachineManagerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbMachineManagerData::IsInitialized() const {

  return true;
}

void tbMachineManagerData::Swap(tbMachineManagerData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(device_id_, other->device_id_);
    std::swap(create_date_, other->create_date_);
    std::swap(roster_type_, other->roster_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(state_, other->state_);
    std::swap(opt_mark_, other->opt_mark_);
    std::swap(rate_mark_, other->rate_mark_);
    std::swap(control_level_, other->control_level_);
    std::swap(max_win_jetton_, other->max_win_jetton_);
    std::swap(cur_win_, other->cur_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbMachineManagerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbMachineManagerData_descriptor_;
  metadata.reflection = tbMachineManagerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_tbGameUserManagerData::kTbGameUserManagerDataListFieldNumber;
#endif  // !_MSC_VER

Sheet_tbGameUserManagerData::Sheet_tbGameUserManagerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_tbGameUserManagerData::InitAsDefaultInstance() {
}

Sheet_tbGameUserManagerData::Sheet_tbGameUserManagerData(const Sheet_tbGameUserManagerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_tbGameUserManagerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_tbGameUserManagerData::~Sheet_tbGameUserManagerData() {
  SharedDtor();
}

void Sheet_tbGameUserManagerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_tbGameUserManagerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_tbGameUserManagerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_tbGameUserManagerData_descriptor_;
}

const Sheet_tbGameUserManagerData& Sheet_tbGameUserManagerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

Sheet_tbGameUserManagerData* Sheet_tbGameUserManagerData::default_instance_ = NULL;

Sheet_tbGameUserManagerData* Sheet_tbGameUserManagerData::New() const {
  return new Sheet_tbGameUserManagerData;
}

void Sheet_tbGameUserManagerData::Clear() {
  tbgameusermanagerdata_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_tbGameUserManagerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.tbGameUserManagerData tbGameUserManagerData_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbGameUserManagerData_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tbgameusermanagerdata_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tbGameUserManagerData_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_tbGameUserManagerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.tbGameUserManagerData tbGameUserManagerData_List = 1;
  for (int i = 0; i < this->tbgameusermanagerdata_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tbgameusermanagerdata_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_tbGameUserManagerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.tbGameUserManagerData tbGameUserManagerData_List = 1;
  for (int i = 0; i < this->tbgameusermanagerdata_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tbgameusermanagerdata_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_tbGameUserManagerData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.tbGameUserManagerData tbGameUserManagerData_List = 1;
  total_size += 1 * this->tbgameusermanagerdata_list_size();
  for (int i = 0; i < this->tbgameusermanagerdata_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tbgameusermanagerdata_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_tbGameUserManagerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_tbGameUserManagerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_tbGameUserManagerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_tbGameUserManagerData::MergeFrom(const Sheet_tbGameUserManagerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbgameusermanagerdata_list_.MergeFrom(from.tbgameusermanagerdata_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_tbGameUserManagerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_tbGameUserManagerData::CopyFrom(const Sheet_tbGameUserManagerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_tbGameUserManagerData::IsInitialized() const {

  return true;
}

void Sheet_tbGameUserManagerData::Swap(Sheet_tbGameUserManagerData* other) {
  if (other != this) {
    tbgameusermanagerdata_list_.Swap(&other->tbgameusermanagerdata_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_tbGameUserManagerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_tbGameUserManagerData_descriptor_;
  metadata.reflection = Sheet_tbGameUserManagerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbGmCtrlGiveCtrlData::kIdFieldNumber;
const int tbGmCtrlGiveCtrlData::kUserIdFieldNumber;
const int tbGmCtrlGiveCtrlData::kUserNameFieldNumber;
const int tbGmCtrlGiveCtrlData::kCreateDateFieldNumber;
const int tbGmCtrlGiveCtrlData::kControlTypeFieldNumber;
const int tbGmCtrlGiveCtrlData::kStartTimeFieldNumber;
const int tbGmCtrlGiveCtrlData::kEndTimeFieldNumber;
const int tbGmCtrlGiveCtrlData::kGameIdFieldNumber;
const int tbGmCtrlGiveCtrlData::kStateFieldNumber;
const int tbGmCtrlGiveCtrlData::kJackpotTypeFieldNumber;
const int tbGmCtrlGiveCtrlData::kJackpotRateFieldNumber;
const int tbGmCtrlGiveCtrlData::kJackpotJettonFieldNumber;
#endif  // !_MSC_VER

tbGmCtrlGiveCtrlData::tbGmCtrlGiveCtrlData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbGmCtrlGiveCtrlData::InitAsDefaultInstance() {
}

tbGmCtrlGiveCtrlData::tbGmCtrlGiveCtrlData(const tbGmCtrlGiveCtrlData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbGmCtrlGiveCtrlData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  control_type_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  state_ = 0u;
  jackpot_type_ = 0;
  jackpot_rate_ = 0;
  jackpot_jetton_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbGmCtrlGiveCtrlData::~tbGmCtrlGiveCtrlData() {
  SharedDtor();
}

void tbGmCtrlGiveCtrlData::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    delete create_date_;
  }
  if (this != default_instance_) {
  }
}

void tbGmCtrlGiveCtrlData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbGmCtrlGiveCtrlData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbGmCtrlGiveCtrlData_descriptor_;
}

const tbGmCtrlGiveCtrlData& tbGmCtrlGiveCtrlData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbGmCtrlGiveCtrlData* tbGmCtrlGiveCtrlData::default_instance_ = NULL;

tbGmCtrlGiveCtrlData* tbGmCtrlGiveCtrlData::New() const {
  return new tbGmCtrlGiveCtrlData;
}

void tbGmCtrlGiveCtrlData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_create_date()) {
      if (create_date_ != &::google::protobuf::internal::kEmptyString) {
        create_date_->clear();
      }
    }
    control_type_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    state_ = 0u;
    jackpot_type_ = 0;
    jackpot_rate_ = 0;
    jackpot_jetton_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbGmCtrlGiveCtrlData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_create_date;
        break;
      }

      // optional string create_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_create_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->create_date().data(), this->create_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_control_type;
        break;
      }

      // optional uint32 control_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_type_)));
          set_has_control_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional uint32 state = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_jackpot_type;
        break;
      }

      // optional int32 jackpot_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jackpot_type_)));
          set_has_jackpot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_jackpot_rate;
        break;
      }

      // optional float jackpot_rate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jackpot_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jackpot_rate_)));
          set_has_jackpot_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_jackpot_jetton;
        break;
      }

      // optional uint64 jackpot_jetton = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jackpot_jetton_)));
          set_has_jackpot_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbGmCtrlGiveCtrlData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional string create_date = 4;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_date().data(), this->create_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->create_date(), output);
  }

  // optional uint32 control_type = 5;
  if (has_control_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->control_type(), output);
  }

  // optional uint64 start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->start_time(), output);
  }

  // optional uint64 end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->end_time(), output);
  }

  // optional uint32 game_id = 8;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->game_id(), output);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->state(), output);
  }

  // optional int32 jackpot_type = 10;
  if (has_jackpot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->jackpot_type(), output);
  }

  // optional float jackpot_rate = 11;
  if (has_jackpot_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->jackpot_rate(), output);
  }

  // optional uint64 jackpot_jetton = 12;
  if (has_jackpot_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->jackpot_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbGmCtrlGiveCtrlData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional string create_date = 4;
  if (has_create_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->create_date().data(), this->create_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->create_date(), target);
  }

  // optional uint32 control_type = 5;
  if (has_control_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->control_type(), target);
  }

  // optional uint64 start_time = 6;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->start_time(), target);
  }

  // optional uint64 end_time = 7;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->end_time(), target);
  }

  // optional uint32 game_id = 8;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->game_id(), target);
  }

  // optional uint32 state = 9;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->state(), target);
  }

  // optional int32 jackpot_type = 10;
  if (has_jackpot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->jackpot_type(), target);
  }

  // optional float jackpot_rate = 11;
  if (has_jackpot_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->jackpot_rate(), target);
  }

  // optional uint64 jackpot_jetton = 12;
  if (has_jackpot_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->jackpot_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbGmCtrlGiveCtrlData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string create_date = 4;
    if (has_create_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->create_date());
    }

    // optional uint32 control_type = 5;
    if (has_control_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_type());
    }

    // optional uint64 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint32 game_id = 8;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 state = 9;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional int32 jackpot_type = 10;
    if (has_jackpot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jackpot_type());
    }

    // optional float jackpot_rate = 11;
    if (has_jackpot_rate()) {
      total_size += 1 + 4;
    }

    // optional uint64 jackpot_jetton = 12;
    if (has_jackpot_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jackpot_jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbGmCtrlGiveCtrlData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbGmCtrlGiveCtrlData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbGmCtrlGiveCtrlData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbGmCtrlGiveCtrlData::MergeFrom(const tbGmCtrlGiveCtrlData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_create_date()) {
      set_create_date(from.create_date());
    }
    if (from.has_control_type()) {
      set_control_type(from.control_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_jackpot_type()) {
      set_jackpot_type(from.jackpot_type());
    }
    if (from.has_jackpot_rate()) {
      set_jackpot_rate(from.jackpot_rate());
    }
    if (from.has_jackpot_jetton()) {
      set_jackpot_jetton(from.jackpot_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbGmCtrlGiveCtrlData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbGmCtrlGiveCtrlData::CopyFrom(const tbGmCtrlGiveCtrlData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbGmCtrlGiveCtrlData::IsInitialized() const {

  return true;
}

void tbGmCtrlGiveCtrlData::Swap(tbGmCtrlGiveCtrlData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(create_date_, other->create_date_);
    std::swap(control_type_, other->control_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(game_id_, other->game_id_);
    std::swap(state_, other->state_);
    std::swap(jackpot_type_, other->jackpot_type_);
    std::swap(jackpot_rate_, other->jackpot_rate_);
    std::swap(jackpot_jetton_, other->jackpot_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbGmCtrlGiveCtrlData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbGmCtrlGiveCtrlData_descriptor_;
  metadata.reflection = tbGmCtrlGiveCtrlData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_tbGmCtrlGiveCtrlData::kTbGmCtrlGiveCtrlDataListFieldNumber;
#endif  // !_MSC_VER

Sheet_tbGmCtrlGiveCtrlData::Sheet_tbGmCtrlGiveCtrlData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_tbGmCtrlGiveCtrlData::InitAsDefaultInstance() {
}

Sheet_tbGmCtrlGiveCtrlData::Sheet_tbGmCtrlGiveCtrlData(const Sheet_tbGmCtrlGiveCtrlData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_tbGmCtrlGiveCtrlData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_tbGmCtrlGiveCtrlData::~Sheet_tbGmCtrlGiveCtrlData() {
  SharedDtor();
}

void Sheet_tbGmCtrlGiveCtrlData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_tbGmCtrlGiveCtrlData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_tbGmCtrlGiveCtrlData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_tbGmCtrlGiveCtrlData_descriptor_;
}

const Sheet_tbGmCtrlGiveCtrlData& Sheet_tbGmCtrlGiveCtrlData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

Sheet_tbGmCtrlGiveCtrlData* Sheet_tbGmCtrlGiveCtrlData::default_instance_ = NULL;

Sheet_tbGmCtrlGiveCtrlData* Sheet_tbGmCtrlGiveCtrlData::New() const {
  return new Sheet_tbGmCtrlGiveCtrlData;
}

void Sheet_tbGmCtrlGiveCtrlData::Clear() {
  tbgmctrlgivectrldata_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_tbGmCtrlGiveCtrlData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.tbGmCtrlGiveCtrlData tbGmCtrlGiveCtrlData_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tbGmCtrlGiveCtrlData_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tbgmctrlgivectrldata_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tbGmCtrlGiveCtrlData_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_tbGmCtrlGiveCtrlData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.tbGmCtrlGiveCtrlData tbGmCtrlGiveCtrlData_List = 1;
  for (int i = 0; i < this->tbgmctrlgivectrldata_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tbgmctrlgivectrldata_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_tbGmCtrlGiveCtrlData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.tbGmCtrlGiveCtrlData tbGmCtrlGiveCtrlData_List = 1;
  for (int i = 0; i < this->tbgmctrlgivectrldata_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tbgmctrlgivectrldata_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_tbGmCtrlGiveCtrlData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.tbGmCtrlGiveCtrlData tbGmCtrlGiveCtrlData_List = 1;
  total_size += 1 * this->tbgmctrlgivectrldata_list_size();
  for (int i = 0; i < this->tbgmctrlgivectrldata_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tbgmctrlgivectrldata_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_tbGmCtrlGiveCtrlData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_tbGmCtrlGiveCtrlData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_tbGmCtrlGiveCtrlData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_tbGmCtrlGiveCtrlData::MergeFrom(const Sheet_tbGmCtrlGiveCtrlData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tbgmctrlgivectrldata_list_.MergeFrom(from.tbgmctrlgivectrldata_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_tbGmCtrlGiveCtrlData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_tbGmCtrlGiveCtrlData::CopyFrom(const Sheet_tbGmCtrlGiveCtrlData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_tbGmCtrlGiveCtrlData::IsInitialized() const {

  return true;
}

void Sheet_tbGmCtrlGiveCtrlData::Swap(Sheet_tbGmCtrlGiveCtrlData* other) {
  if (other != this) {
    tbgmctrlgivectrldata_list_.Swap(&other->tbgmctrlgivectrldata_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_tbGmCtrlGiveCtrlData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_tbGmCtrlGiveCtrlData_descriptor_;
  metadata.reflection = Sheet_tbGmCtrlGiveCtrlData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogVipRechargeRecord::kEventIdFieldNumber;
const int LogVipRechargeRecord::kSequenceFieldNumber;
const int LogVipRechargeRecord::kBusNameFieldNumber;
const int LogVipRechargeRecord::kEventTimeFieldNumber;
const int LogVipRechargeRecord::kUserIdFieldNumber;
const int LogVipRechargeRecord::kUserNameFieldNumber;
const int LogVipRechargeRecord::kAmountFieldNumber;
const int LogVipRechargeRecord::kRechargeIdFieldNumber;
const int LogVipRechargeRecord::kRechargeNameFieldNumber;
const int LogVipRechargeRecord::kStatusFieldNumber;
#endif  // !_MSC_VER

LogVipRechargeRecord::LogVipRechargeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogVipRechargeRecord::InitAsDefaultInstance() {
}

LogVipRechargeRecord::LogVipRechargeRecord(const LogVipRechargeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogVipRechargeRecord::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  recharge_id_ = 0u;
  recharge_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogVipRechargeRecord::~LogVipRechargeRecord() {
  SharedDtor();
}

void LogVipRechargeRecord::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (recharge_name_ != &::google::protobuf::internal::kEmptyString) {
    delete recharge_name_;
  }
  if (this != default_instance_) {
  }
}

void LogVipRechargeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogVipRechargeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogVipRechargeRecord_descriptor_;
}

const LogVipRechargeRecord& LogVipRechargeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogVipRechargeRecord* LogVipRechargeRecord::default_instance_ = NULL;

LogVipRechargeRecord* LogVipRechargeRecord::New() const {
  return new LogVipRechargeRecord;
}

void LogVipRechargeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    recharge_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_recharge_name()) {
      if (recharge_name_ != &::google::protobuf::internal::kEmptyString) {
        recharge_name_->clear();
      }
    }
    status_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogVipRechargeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_recharge_id;
        break;
      }

      // optional uint32 recharge_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_id_)));
          set_has_recharge_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_recharge_name;
        break;
      }

      // optional string recharge_name = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recharge_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recharge_name().data(), this->recharge_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_status;
        break;
      }

      // optional uint64 status = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogVipRechargeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional uint64 amount = 20;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->amount(), output);
  }

  // optional uint32 recharge_id = 21;
  if (has_recharge_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->recharge_id(), output);
  }

  // optional string recharge_name = 22;
  if (has_recharge_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recharge_name().data(), this->recharge_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->recharge_name(), output);
  }

  // optional uint64 status = 23;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogVipRechargeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional uint64 amount = 20;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->amount(), target);
  }

  // optional uint32 recharge_id = 21;
  if (has_recharge_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->recharge_id(), target);
  }

  // optional string recharge_name = 22;
  if (has_recharge_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recharge_name().data(), this->recharge_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->recharge_name(), target);
  }

  // optional uint64 status = 23;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogVipRechargeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 amount = 20;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 recharge_id = 21;
    if (has_recharge_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string recharge_name = 22;
    if (has_recharge_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recharge_name());
    }

    // optional uint64 status = 23;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogVipRechargeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogVipRechargeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogVipRechargeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogVipRechargeRecord::MergeFrom(const LogVipRechargeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_recharge_id()) {
      set_recharge_id(from.recharge_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recharge_name()) {
      set_recharge_name(from.recharge_name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogVipRechargeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogVipRechargeRecord::CopyFrom(const LogVipRechargeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogVipRechargeRecord::IsInitialized() const {

  return true;
}

void LogVipRechargeRecord::Swap(LogVipRechargeRecord* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(amount_, other->amount_);
    std::swap(recharge_id_, other->recharge_id_);
    std::swap(recharge_name_, other->recharge_name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogVipRechargeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogVipRechargeRecord_descriptor_;
  metadata.reflection = LogVipRechargeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogZhuangRecord::kEventIdFieldNumber;
const int LogZhuangRecord::kSequenceFieldNumber;
const int LogZhuangRecord::kBusNameFieldNumber;
const int LogZhuangRecord::kEventTimeFieldNumber;
const int LogZhuangRecord::kUserIdFieldNumber;
const int LogZhuangRecord::kUserNameFieldNumber;
const int LogZhuangRecord::kAmountFieldNumber;
const int LogZhuangRecord::kStatusFieldNumber;
#endif  // !_MSC_VER

LogZhuangRecord::LogZhuangRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogZhuangRecord::InitAsDefaultInstance() {
}

LogZhuangRecord::LogZhuangRecord(const LogZhuangRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogZhuangRecord::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_LONGLONG(0);
  status_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogZhuangRecord::~LogZhuangRecord() {
  SharedDtor();
}

void LogZhuangRecord::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void LogZhuangRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogZhuangRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogZhuangRecord_descriptor_;
}

const LogZhuangRecord& LogZhuangRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogZhuangRecord* LogZhuangRecord::default_instance_ = NULL;

LogZhuangRecord* LogZhuangRecord::New() const {
  return new LogZhuangRecord;
}

void LogZhuangRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    amount_ = GOOGLE_LONGLONG(0);
    status_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogZhuangRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_amount;
        break;
      }

      // optional int64 amount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_status;
        break;
      }

      // optional uint64 status = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogZhuangRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional int64 amount = 20;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->amount(), output);
  }

  // optional uint64 status = 21;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogZhuangRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional int64 amount = 20;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->amount(), target);
  }

  // optional uint64 status = 21;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogZhuangRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int64 amount = 20;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

    // optional uint64 status = 21;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogZhuangRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogZhuangRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogZhuangRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogZhuangRecord::MergeFrom(const LogZhuangRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogZhuangRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogZhuangRecord::CopyFrom(const LogZhuangRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogZhuangRecord::IsInitialized() const {

  return true;
}

void LogZhuangRecord::Swap(LogZhuangRecord* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(amount_, other->amount_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogZhuangRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogZhuangRecord_descriptor_;
  metadata.reflection = LogZhuangRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogRechargeOrder::kEventIdFieldNumber;
const int LogRechargeOrder::kSequenceFieldNumber;
const int LogRechargeOrder::kBusNameFieldNumber;
const int LogRechargeOrder::kEventTimeFieldNumber;
const int LogRechargeOrder::kUserIdFieldNumber;
const int LogRechargeOrder::kUserNameFieldNumber;
const int LogRechargeOrder::kOrderIdFieldNumber;
const int LogRechargeOrder::kPayIdFieldNumber;
const int LogRechargeOrder::kPayChannelFieldNumber;
const int LogRechargeOrder::kPayTypeFieldNumber;
const int LogRechargeOrder::kChOrderIdFieldNumber;
const int LogRechargeOrder::kStateFieldNumber;
#endif  // !_MSC_VER

LogRechargeOrder::LogRechargeOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogRechargeOrder::InitAsDefaultInstance() {
}

LogRechargeOrder::LogRechargeOrder(const LogRechargeOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogRechargeOrder::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pay_id_ = 0u;
  pay_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pay_type_ = 0u;
  ch_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRechargeOrder::~LogRechargeOrder() {
  SharedDtor();
}

void LogRechargeOrder::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (pay_channel_ != &::google::protobuf::internal::kEmptyString) {
    delete pay_channel_;
  }
  if (ch_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ch_order_id_;
  }
  if (this != default_instance_) {
  }
}

void LogRechargeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRechargeOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRechargeOrder_descriptor_;
}

const LogRechargeOrder& LogRechargeOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogRechargeOrder* LogRechargeOrder::default_instance_ = NULL;

LogRechargeOrder* LogRechargeOrder::New() const {
  return new LogRechargeOrder;
}

void LogRechargeOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    pay_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pay_channel()) {
      if (pay_channel_ != &::google::protobuf::internal::kEmptyString) {
        pay_channel_->clear();
      }
    }
    pay_type_ = 0u;
    if (has_ch_order_id()) {
      if (ch_order_id_ != &::google::protobuf::internal::kEmptyString) {
        ch_order_id_->clear();
      }
    }
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRechargeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_order_id;
        break;
      }

      // optional string order_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_pay_id;
        break;
      }

      // optional uint32 pay_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_id_)));
          set_has_pay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_pay_channel;
        break;
      }

      // optional string pay_channel = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pay_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pay_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pay_channel().data(), this->pay_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_pay_type;
        break;
      }

      // optional uint32 pay_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_type_)));
          set_has_pay_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_ch_order_id;
        break;
      }

      // optional string ch_order_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ch_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ch_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ch_order_id().data(), this->ch_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_state;
        break;
      }

      // optional uint32 state = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRechargeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional string order_id = 20;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->order_id(), output);
  }

  // optional uint32 pay_id = 21;
  if (has_pay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->pay_id(), output);
  }

  // optional string pay_channel = 22;
  if (has_pay_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_channel().data(), this->pay_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->pay_channel(), output);
  }

  // optional uint32 pay_type = 23;
  if (has_pay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->pay_type(), output);
  }

  // optional string ch_order_id = 24;
  if (has_ch_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ch_order_id().data(), this->ch_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->ch_order_id(), output);
  }

  // optional uint32 state = 25;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogRechargeOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional string order_id = 20;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->order_id(), target);
  }

  // optional uint32 pay_id = 21;
  if (has_pay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->pay_id(), target);
  }

  // optional string pay_channel = 22;
  if (has_pay_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pay_channel().data(), this->pay_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->pay_channel(), target);
  }

  // optional uint32 pay_type = 23;
  if (has_pay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->pay_type(), target);
  }

  // optional string ch_order_id = 24;
  if (has_ch_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ch_order_id().data(), this->ch_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->ch_order_id(), target);
  }

  // optional uint32 state = 25;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogRechargeOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string order_id = 20;
    if (has_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional uint32 pay_id = 21;
    if (has_pay_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string pay_channel = 22;
    if (has_pay_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pay_channel());
    }

    // optional uint32 pay_type = 23;
    if (has_pay_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_type());
    }

    // optional string ch_order_id = 24;
    if (has_ch_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ch_order_id());
    }

    // optional uint32 state = 25;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRechargeOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRechargeOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRechargeOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRechargeOrder::MergeFrom(const LogRechargeOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_pay_id()) {
      set_pay_id(from.pay_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pay_channel()) {
      set_pay_channel(from.pay_channel());
    }
    if (from.has_pay_type()) {
      set_pay_type(from.pay_type());
    }
    if (from.has_ch_order_id()) {
      set_ch_order_id(from.ch_order_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRechargeOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRechargeOrder::CopyFrom(const LogRechargeOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRechargeOrder::IsInitialized() const {

  return true;
}

void LogRechargeOrder::Swap(LogRechargeOrder* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(order_id_, other->order_id_);
    std::swap(pay_id_, other->pay_id_);
    std::swap(pay_channel_, other->pay_channel_);
    std::swap(pay_type_, other->pay_type_);
    std::swap(ch_order_id_, other->ch_order_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRechargeOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRechargeOrder_descriptor_;
  metadata.reflection = LogRechargeOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogGiveMoneyRecord::kEventIdFieldNumber;
const int LogGiveMoneyRecord::kSequenceFieldNumber;
const int LogGiveMoneyRecord::kBusNameFieldNumber;
const int LogGiveMoneyRecord::kEventTimeFieldNumber;
const int LogGiveMoneyRecord::kUserIdFieldNumber;
const int LogGiveMoneyRecord::kUserNameFieldNumber;
const int LogGiveMoneyRecord::kTypeFieldNumber;
const int LogGiveMoneyRecord::kAmountFieldNumber;
const int LogGiveMoneyRecord::kStatusFieldNumber;
#endif  // !_MSC_VER

LogGiveMoneyRecord::LogGiveMoneyRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogGiveMoneyRecord::InitAsDefaultInstance() {
}

LogGiveMoneyRecord::LogGiveMoneyRecord(const LogGiveMoneyRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogGiveMoneyRecord::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  status_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogGiveMoneyRecord::~LogGiveMoneyRecord() {
  SharedDtor();
}

void LogGiveMoneyRecord::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void LogGiveMoneyRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogGiveMoneyRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogGiveMoneyRecord_descriptor_;
}

const LogGiveMoneyRecord& LogGiveMoneyRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogGiveMoneyRecord* LogGiveMoneyRecord::default_instance_ = NULL;

LogGiveMoneyRecord* LogGiveMoneyRecord::New() const {
  return new LogGiveMoneyRecord;
}

void LogGiveMoneyRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    type_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogGiveMoneyRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_type;
        break;
      }

      // optional uint32 type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_status;
        break;
      }

      // optional uint64 status = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogGiveMoneyRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional uint32 type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->type(), output);
  }

  // optional uint64 amount = 21;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->amount(), output);
  }

  // optional uint64 status = 22;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogGiveMoneyRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional uint32 type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->type(), target);
  }

  // optional uint64 amount = 21;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->amount(), target);
  }

  // optional uint64 status = 22;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogGiveMoneyRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint32 type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 amount = 21;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 status = 22;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogGiveMoneyRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogGiveMoneyRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogGiveMoneyRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogGiveMoneyRecord::MergeFrom(const LogGiveMoneyRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogGiveMoneyRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogGiveMoneyRecord::CopyFrom(const LogGiveMoneyRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogGiveMoneyRecord::IsInitialized() const {

  return true;
}

void LogGiveMoneyRecord::Swap(LogGiveMoneyRecord* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(type_, other->type_);
    std::swap(amount_, other->amount_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogGiveMoneyRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogGiveMoneyRecord_descriptor_;
  metadata.reflection = LogGiveMoneyRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbLogSystemDay::kDateIdFieldNumber;
const int tbLogSystemDay::kActivePlayerFieldNumber;
const int tbLogSystemDay::kLoginCountFieldNumber;
const int tbLogSystemDay::kValidPlayerFieldNumber;
const int tbLogSystemDay::kNewPlayerFieldNumber;
const int tbLogSystemDay::kPayPlayerFieldNumber;
const int tbLogSystemDay::kPayTimesFieldNumber;
const int tbLogSystemDay::kPayAllFieldNumber;
const int tbLogSystemDay::kNewPayPlayerFieldNumber;
const int tbLogSystemDay::kNewPayAllFieldNumber;
const int tbLogSystemDay::kCommissionAllFieldNumber;
const int tbLogSystemDay::kAllFeeFieldNumber;
const int tbLogSystemDay::kAllPourFieldNumber;
const int tbLogSystemDay::kAllWinFieldNumber;
const int tbLogSystemDay::kJettonInitFieldNumber;
const int tbLogSystemDay::kAllDrawFieldNumber;
const int tbLogSystemDay::kJettonInFieldNumber;
const int tbLogSystemDay::kJettonOutFieldNumber;
const int tbLogSystemDay::kSysAwardFieldNumber;
const int tbLogSystemDay::kPlayerJettonFieldNumber;
const int tbLogSystemDay::kTrdPayAllFieldNumber;
const int tbLogSystemDay::kVipPayAllFieldNumber;
const int tbLogSystemDay::kZhuangzhangAllFieldNumber;
const int tbLogSystemDay::kActivityAwardFieldNumber;
const int tbLogSystemDay::kAllBankJettonFieldNumber;
const int tbLogSystemDay::kFreezeJettonFieldNumber;
const int tbLogSystemDay::kAllJettonFieldNumber;
const int tbLogSystemDay::kAllPlayerFieldNumber;
const int tbLogSystemDay::kActiveSevenFieldNumber;
const int tbLogSystemDay::kActiveThirtyFieldNumber;
const int tbLogSystemDay::kPourDayAllFieldNumber;
const int tbLogSystemDay::kPourWeekAllFieldNumber;
const int tbLogSystemDay::kPourMonthAllFieldNumber;
const int tbLogSystemDay::kSysWinDayFieldNumber;
const int tbLogSystemDay::kSysWinWeekFieldNumber;
const int tbLogSystemDay::kSysWinMonthFieldNumber;
const int tbLogSystemDay::kFeeDayFieldNumber;
const int tbLogSystemDay::kFeeWeekFieldNumber;
const int tbLogSystemDay::kFeeMonthFieldNumber;
const int tbLogSystemDay::kCommisionAllFieldNumber;
const int tbLogSystemDay::kCommisionTakeFieldNumber;
const int tbLogSystemDay::kCommisionDayFieldNumber;
const int tbLogSystemDay::kCommisionWeekFieldNumber;
const int tbLogSystemDay::kCommisionMonthFieldNumber;
const int tbLogSystemDay::kMaxOnlineFieldNumber;
const int tbLogSystemDay::kWinCostValueFieldNumber;
const int tbLogSystemDay::kDayMoneyValueFieldNumber;
const int tbLogSystemDay::kPayDayFieldNumber;
const int tbLogSystemDay::kPayWeekFieldNumber;
const int tbLogSystemDay::kPayMonthFieldNumber;
const int tbLogSystemDay::kDrawDayFieldNumber;
const int tbLogSystemDay::kDrawWeekFieldNumber;
const int tbLogSystemDay::kDrawMonthFieldNumber;
const int tbLogSystemDay::kTrdPayDayFieldNumber;
const int tbLogSystemDay::kTrdPayWeekFieldNumber;
const int tbLogSystemDay::kTrdPayMonthFieldNumber;
const int tbLogSystemDay::kVipPayDayFieldNumber;
const int tbLogSystemDay::kVipPayWeekFieldNumber;
const int tbLogSystemDay::kVipPayMonthFieldNumber;
const int tbLogSystemDay::kZhuangzhangDayFieldNumber;
const int tbLogSystemDay::kZhuangzhangWeekFieldNumber;
const int tbLogSystemDay::kZhuangzhangMonthFieldNumber;
const int tbLogSystemDay::kGiveDayFieldNumber;
const int tbLogSystemDay::kGiveWeekFieldNumber;
const int tbLogSystemDay::kGiveMonthFieldNumber;
const int tbLogSystemDay::kAllGiveFieldNumber;
const int tbLogSystemDay::kAllVipZhuanruFieldNumber;
const int tbLogSystemDay::kTodayVipZhuanruFieldNumber;
const int tbLogSystemDay::kWeekVipZhuanruFieldNumber;
const int tbLogSystemDay::kMonthVipZhuanruFieldNumber;
const int tbLogSystemDay::kAllVipZhuanchuFieldNumber;
const int tbLogSystemDay::kTodayVipZhuanchuFieldNumber;
const int tbLogSystemDay::kWeekVipZhuanchuFieldNumber;
const int tbLogSystemDay::kMonthVipZhuanchuFieldNumber;
#endif  // !_MSC_VER

tbLogSystemDay::tbLogSystemDay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbLogSystemDay::InitAsDefaultInstance() {
}

tbLogSystemDay::tbLogSystemDay(const tbLogSystemDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbLogSystemDay::SharedCtor() {
  _cached_size_ = 0;
  date_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  active_player_ = 0u;
  login_count_ = 0u;
  valid_player_ = 0u;
  new_player_ = 0u;
  pay_player_ = 0u;
  pay_times_ = 0u;
  pay_all_ = GOOGLE_ULONGLONG(0);
  new_pay_player_ = 0u;
  new_pay_all_ = 0u;
  commission_all_ = GOOGLE_ULONGLONG(0);
  all_fee_ = GOOGLE_ULONGLONG(0);
  all_pour_ = GOOGLE_ULONGLONG(0);
  all_win_ = GOOGLE_LONGLONG(0);
  jetton_init_ = GOOGLE_ULONGLONG(0);
  all_draw_ = GOOGLE_ULONGLONG(0);
  jetton_in_ = GOOGLE_ULONGLONG(0);
  jetton_out_ = GOOGLE_ULONGLONG(0);
  sys_award_ = GOOGLE_ULONGLONG(0);
  player_jetton_ = GOOGLE_ULONGLONG(0);
  trd_pay_all_ = GOOGLE_ULONGLONG(0);
  vip_pay_all_ = GOOGLE_ULONGLONG(0);
  zhuangzhang_all_ = GOOGLE_ULONGLONG(0);
  activity_award_ = GOOGLE_ULONGLONG(0);
  all_bank_jetton_ = GOOGLE_ULONGLONG(0);
  freeze_jetton_ = GOOGLE_ULONGLONG(0);
  all_jetton_ = GOOGLE_ULONGLONG(0);
  all_player_ = GOOGLE_ULONGLONG(0);
  active_seven_ = GOOGLE_ULONGLONG(0);
  active_thirty_ = GOOGLE_ULONGLONG(0);
  pour_day_all_ = GOOGLE_ULONGLONG(0);
  pour_week_all_ = GOOGLE_ULONGLONG(0);
  pour_month_all_ = GOOGLE_ULONGLONG(0);
  sys_win_day_ = GOOGLE_LONGLONG(0);
  sys_win_week_ = GOOGLE_LONGLONG(0);
  sys_win_month_ = GOOGLE_LONGLONG(0);
  fee_day_ = GOOGLE_ULONGLONG(0);
  fee_week_ = GOOGLE_ULONGLONG(0);
  fee_month_ = GOOGLE_ULONGLONG(0);
  commision_all_ = GOOGLE_ULONGLONG(0);
  commision_take_ = GOOGLE_ULONGLONG(0);
  commision_day_ = GOOGLE_ULONGLONG(0);
  commision_week_ = GOOGLE_ULONGLONG(0);
  commision_month_ = GOOGLE_ULONGLONG(0);
  max_online_ = GOOGLE_ULONGLONG(0);
  win_cost_value_ = GOOGLE_ULONGLONG(0);
  day_money_value_ = GOOGLE_ULONGLONG(0);
  pay_day_ = GOOGLE_ULONGLONG(0);
  pay_week_ = GOOGLE_ULONGLONG(0);
  pay_month_ = GOOGLE_ULONGLONG(0);
  draw_day_ = GOOGLE_ULONGLONG(0);
  draw_week_ = GOOGLE_ULONGLONG(0);
  draw_month_ = GOOGLE_ULONGLONG(0);
  trd_pay_day_ = GOOGLE_ULONGLONG(0);
  trd_pay_week_ = GOOGLE_ULONGLONG(0);
  trd_pay_month_ = GOOGLE_ULONGLONG(0);
  vip_pay_day_ = GOOGLE_ULONGLONG(0);
  vip_pay_week_ = GOOGLE_ULONGLONG(0);
  vip_pay_month_ = GOOGLE_ULONGLONG(0);
  zhuangzhang_day_ = GOOGLE_ULONGLONG(0);
  zhuangzhang_week_ = GOOGLE_ULONGLONG(0);
  zhuangzhang_month_ = GOOGLE_ULONGLONG(0);
  give_day_ = GOOGLE_ULONGLONG(0);
  give_week_ = GOOGLE_ULONGLONG(0);
  give_month_ = GOOGLE_ULONGLONG(0);
  all_give_ = GOOGLE_ULONGLONG(0);
  all_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  today_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  week_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  month_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  all_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  today_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  week_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  month_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbLogSystemDay::~tbLogSystemDay() {
  SharedDtor();
}

void tbLogSystemDay::SharedDtor() {
  if (date_id_ != &::google::protobuf::internal::kEmptyString) {
    delete date_id_;
  }
  if (this != default_instance_) {
  }
}

void tbLogSystemDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbLogSystemDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbLogSystemDay_descriptor_;
}

const tbLogSystemDay& tbLogSystemDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbLogSystemDay* tbLogSystemDay::default_instance_ = NULL;

tbLogSystemDay* tbLogSystemDay::New() const {
  return new tbLogSystemDay;
}

void tbLogSystemDay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_date_id()) {
      if (date_id_ != &::google::protobuf::internal::kEmptyString) {
        date_id_->clear();
      }
    }
    active_player_ = 0u;
    login_count_ = 0u;
    valid_player_ = 0u;
    new_player_ = 0u;
    pay_player_ = 0u;
    pay_times_ = 0u;
    pay_all_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    new_pay_player_ = 0u;
    new_pay_all_ = 0u;
    commission_all_ = GOOGLE_ULONGLONG(0);
    all_fee_ = GOOGLE_ULONGLONG(0);
    all_pour_ = GOOGLE_ULONGLONG(0);
    all_win_ = GOOGLE_LONGLONG(0);
    jetton_init_ = GOOGLE_ULONGLONG(0);
    all_draw_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    jetton_in_ = GOOGLE_ULONGLONG(0);
    jetton_out_ = GOOGLE_ULONGLONG(0);
    sys_award_ = GOOGLE_ULONGLONG(0);
    player_jetton_ = GOOGLE_ULONGLONG(0);
    trd_pay_all_ = GOOGLE_ULONGLONG(0);
    vip_pay_all_ = GOOGLE_ULONGLONG(0);
    zhuangzhang_all_ = GOOGLE_ULONGLONG(0);
    activity_award_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    all_bank_jetton_ = GOOGLE_ULONGLONG(0);
    freeze_jetton_ = GOOGLE_ULONGLONG(0);
    all_jetton_ = GOOGLE_ULONGLONG(0);
    all_player_ = GOOGLE_ULONGLONG(0);
    active_seven_ = GOOGLE_ULONGLONG(0);
    active_thirty_ = GOOGLE_ULONGLONG(0);
    pour_day_all_ = GOOGLE_ULONGLONG(0);
    pour_week_all_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    pour_month_all_ = GOOGLE_ULONGLONG(0);
    sys_win_day_ = GOOGLE_LONGLONG(0);
    sys_win_week_ = GOOGLE_LONGLONG(0);
    sys_win_month_ = GOOGLE_LONGLONG(0);
    fee_day_ = GOOGLE_ULONGLONG(0);
    fee_week_ = GOOGLE_ULONGLONG(0);
    fee_month_ = GOOGLE_ULONGLONG(0);
    commision_all_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    commision_take_ = GOOGLE_ULONGLONG(0);
    commision_day_ = GOOGLE_ULONGLONG(0);
    commision_week_ = GOOGLE_ULONGLONG(0);
    commision_month_ = GOOGLE_ULONGLONG(0);
    max_online_ = GOOGLE_ULONGLONG(0);
    win_cost_value_ = GOOGLE_ULONGLONG(0);
    day_money_value_ = GOOGLE_ULONGLONG(0);
    pay_day_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    pay_week_ = GOOGLE_ULONGLONG(0);
    pay_month_ = GOOGLE_ULONGLONG(0);
    draw_day_ = GOOGLE_ULONGLONG(0);
    draw_week_ = GOOGLE_ULONGLONG(0);
    draw_month_ = GOOGLE_ULONGLONG(0);
    trd_pay_day_ = GOOGLE_ULONGLONG(0);
    trd_pay_week_ = GOOGLE_ULONGLONG(0);
    trd_pay_month_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    vip_pay_day_ = GOOGLE_ULONGLONG(0);
    vip_pay_week_ = GOOGLE_ULONGLONG(0);
    vip_pay_month_ = GOOGLE_ULONGLONG(0);
    zhuangzhang_day_ = GOOGLE_ULONGLONG(0);
    zhuangzhang_week_ = GOOGLE_ULONGLONG(0);
    zhuangzhang_month_ = GOOGLE_ULONGLONG(0);
    give_day_ = GOOGLE_ULONGLONG(0);
    give_week_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    give_month_ = GOOGLE_ULONGLONG(0);
    all_give_ = GOOGLE_ULONGLONG(0);
    all_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
    today_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
    week_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
    month_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
    all_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
    today_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    week_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
    month_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbLogSystemDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string date_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date_id().data(), this->date_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_player;
        break;
      }

      // optional uint32 active_player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_player_)));
          set_has_active_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_count;
        break;
      }

      // optional uint32 login_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_count_)));
          set_has_login_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valid_player;
        break;
      }

      // optional uint32 valid_player = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_player_)));
          set_has_valid_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_player;
        break;
      }

      // optional uint32 new_player = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_player_)));
          set_has_new_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pay_player;
        break;
      }

      // optional uint32 pay_player = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_player_)));
          set_has_pay_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pay_times;
        break;
      }

      // optional uint32 pay_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pay_times_)));
          set_has_pay_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pay_all;
        break;
      }

      // optional uint64 pay_all = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pay_all_)));
          set_has_pay_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_new_pay_player;
        break;
      }

      // optional uint32 new_pay_player = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_pay_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_pay_player_)));
          set_has_new_pay_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_commission_all;
        break;
      }

      // optional uint64 commission_all = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commission_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commission_all_)));
          set_has_commission_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_all_fee;
        break;
      }

      // optional uint64 all_fee = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_fee_)));
          set_has_all_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_all_pour;
        break;
      }

      // optional uint64 all_pour = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_pour_)));
          set_has_all_pour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_all_win;
        break;
      }

      // optional int64 all_win = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_win_)));
          set_has_all_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_jetton_init;
        break;
      }

      // optional uint64 jetton_init = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_init:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_init_)));
          set_has_jetton_init();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_all_draw;
        break;
      }

      // optional uint64 all_draw = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_draw_)));
          set_has_all_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_jetton_in;
        break;
      }

      // optional uint64 jetton_in = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_in_)));
          set_has_jetton_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_jetton_out;
        break;
      }

      // optional uint64 jetton_out = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_out_)));
          set_has_jetton_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sys_award;
        break;
      }

      // optional uint64 sys_award = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sys_award_)));
          set_has_sys_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_player_jetton;
        break;
      }

      // optional uint64 player_jetton = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_jetton_)));
          set_has_player_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_trd_pay_all;
        break;
      }

      // optional uint64 trd_pay_all = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trd_pay_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trd_pay_all_)));
          set_has_trd_pay_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vip_pay_all;
        break;
      }

      // optional uint64 vip_pay_all = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_pay_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vip_pay_all_)));
          set_has_vip_pay_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_zhuangzhang_all;
        break;
      }

      // optional uint64 zhuangzhang_all = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhuangzhang_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zhuangzhang_all_)));
          set_has_zhuangzhang_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_activity_award;
        break;
      }

      // optional uint64 activity_award = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activity_award_)));
          set_has_activity_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_all_bank_jetton;
        break;
      }

      // optional uint64 all_bank_jetton = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_bank_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_bank_jetton_)));
          set_has_all_bank_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_freeze_jetton;
        break;
      }

      // optional uint64 freeze_jetton = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeze_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freeze_jetton_)));
          set_has_freeze_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_all_jetton;
        break;
      }

      // optional uint64 all_jetton = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_jetton_)));
          set_has_all_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_all_player;
        break;
      }

      // optional uint64 all_player = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_player_)));
          set_has_all_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_active_seven;
        break;
      }

      // optional uint64 active_seven = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_seven:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_seven_)));
          set_has_active_seven();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_active_thirty;
        break;
      }

      // optional uint64 active_thirty = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_thirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_thirty_)));
          set_has_active_thirty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_pour_day_all;
        break;
      }

      // optional uint64 pour_day_all = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_day_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_day_all_)));
          set_has_pour_day_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_pour_week_all;
        break;
      }

      // optional uint64 pour_week_all = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_week_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_week_all_)));
          set_has_pour_week_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_pour_month_all;
        break;
      }

      // optional uint64 pour_month_all = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_month_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pour_month_all_)));
          set_has_pour_month_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_sys_win_day;
        break;
      }

      // optional int64 sys_win_day = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_win_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_win_day_)));
          set_has_sys_win_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_sys_win_week;
        break;
      }

      // optional int64 sys_win_week = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_win_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_win_week_)));
          set_has_sys_win_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_sys_win_month;
        break;
      }

      // optional int64 sys_win_month = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_win_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sys_win_month_)));
          set_has_sys_win_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_fee_day;
        break;
      }

      // optional uint64 fee_day = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_day_)));
          set_has_fee_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_fee_week;
        break;
      }

      // optional uint64 fee_week = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_week_)));
          set_has_fee_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_fee_month;
        break;
      }

      // optional uint64 fee_month = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_month_)));
          set_has_fee_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_commision_all;
        break;
      }

      // optional uint64 commision_all = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commision_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commision_all_)));
          set_has_commision_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_commision_take;
        break;
      }

      // optional uint64 commision_take = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commision_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commision_take_)));
          set_has_commision_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_commision_day;
        break;
      }

      // optional uint64 commision_day = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commision_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commision_day_)));
          set_has_commision_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_commision_week;
        break;
      }

      // optional uint64 commision_week = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commision_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commision_week_)));
          set_has_commision_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_commision_month;
        break;
      }

      // optional uint64 commision_month = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commision_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commision_month_)));
          set_has_commision_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_max_online;
        break;
      }

      // optional uint64 max_online = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_online_)));
          set_has_max_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_win_cost_value;
        break;
      }

      // optional uint64 win_cost_value = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_cost_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &win_cost_value_)));
          set_has_win_cost_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_day_money_value;
        break;
      }

      // optional uint64 day_money_value = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_money_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &day_money_value_)));
          set_has_day_money_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_pay_day;
        break;
      }

      // optional uint64 pay_day = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pay_day_)));
          set_has_pay_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_pay_week;
        break;
      }

      // optional uint64 pay_week = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pay_week_)));
          set_has_pay_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_pay_month;
        break;
      }

      // optional uint64 pay_month = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pay_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pay_month_)));
          set_has_pay_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_draw_day;
        break;
      }

      // optional uint64 draw_day = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &draw_day_)));
          set_has_draw_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_draw_week;
        break;
      }

      // optional uint64 draw_week = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &draw_week_)));
          set_has_draw_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_draw_month;
        break;
      }

      // optional uint64 draw_month = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &draw_month_)));
          set_has_draw_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_trd_pay_day;
        break;
      }

      // optional uint64 trd_pay_day = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trd_pay_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trd_pay_day_)));
          set_has_trd_pay_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_trd_pay_week;
        break;
      }

      // optional uint64 trd_pay_week = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trd_pay_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trd_pay_week_)));
          set_has_trd_pay_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_trd_pay_month;
        break;
      }

      // optional uint64 trd_pay_month = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trd_pay_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trd_pay_month_)));
          set_has_trd_pay_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_vip_pay_day;
        break;
      }

      // optional uint64 vip_pay_day = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_pay_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vip_pay_day_)));
          set_has_vip_pay_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_vip_pay_week;
        break;
      }

      // optional uint64 vip_pay_week = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_pay_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vip_pay_week_)));
          set_has_vip_pay_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_vip_pay_month;
        break;
      }

      // optional uint64 vip_pay_month = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_pay_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vip_pay_month_)));
          set_has_vip_pay_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_zhuangzhang_day;
        break;
      }

      // optional uint64 zhuangzhang_day = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhuangzhang_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zhuangzhang_day_)));
          set_has_zhuangzhang_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_zhuangzhang_week;
        break;
      }

      // optional uint64 zhuangzhang_week = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhuangzhang_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zhuangzhang_week_)));
          set_has_zhuangzhang_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_zhuangzhang_month;
        break;
      }

      // optional uint64 zhuangzhang_month = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhuangzhang_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zhuangzhang_month_)));
          set_has_zhuangzhang_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_give_day;
        break;
      }

      // optional uint64 give_day = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &give_day_)));
          set_has_give_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_give_week;
        break;
      }

      // optional uint64 give_week = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &give_week_)));
          set_has_give_week();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_give_month;
        break;
      }

      // optional uint64 give_month = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_give_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &give_month_)));
          set_has_give_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_all_give;
        break;
      }

      // optional uint64 all_give = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_give_)));
          set_has_all_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_all_vip_zhuanru;
        break;
      }

      // optional uint64 all_vip_zhuanru = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_vip_zhuanru_)));
          set_has_all_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_today_vip_zhuanru;
        break;
      }

      // optional uint64 today_vip_zhuanru = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_vip_zhuanru_)));
          set_has_today_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_week_vip_zhuanru;
        break;
      }

      // optional uint64 week_vip_zhuanru = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_vip_zhuanru_)));
          set_has_week_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_month_vip_zhuanru;
        break;
      }

      // optional uint64 month_vip_zhuanru = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_vip_zhuanru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &month_vip_zhuanru_)));
          set_has_month_vip_zhuanru();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_all_vip_zhuanchu;
        break;
      }

      // optional uint64 all_vip_zhuanchu = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &all_vip_zhuanchu_)));
          set_has_all_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_today_vip_zhuanchu;
        break;
      }

      // optional uint64 today_vip_zhuanchu = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_vip_zhuanchu_)));
          set_has_today_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_week_vip_zhuanchu;
        break;
      }

      // optional uint64 week_vip_zhuanchu = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_vip_zhuanchu_)));
          set_has_week_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_month_vip_zhuanchu;
        break;
      }

      // optional uint64 month_vip_zhuanchu = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month_vip_zhuanchu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &month_vip_zhuanchu_)));
          set_has_month_vip_zhuanchu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_new_pay_all;
        break;
      }

      // optional uint32 new_pay_all = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_pay_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_pay_all_)));
          set_has_new_pay_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbLogSystemDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string date_id = 1;
  if (has_date_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_id().data(), this->date_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->date_id(), output);
  }

  // optional uint32 active_player = 2;
  if (has_active_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_player(), output);
  }

  // optional uint32 login_count = 3;
  if (has_login_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->login_count(), output);
  }

  // optional uint32 valid_player = 4;
  if (has_valid_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->valid_player(), output);
  }

  // optional uint32 new_player = 5;
  if (has_new_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->new_player(), output);
  }

  // optional uint32 pay_player = 6;
  if (has_pay_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pay_player(), output);
  }

  // optional uint32 pay_times = 7;
  if (has_pay_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pay_times(), output);
  }

  // optional uint64 pay_all = 8;
  if (has_pay_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->pay_all(), output);
  }

  // optional uint32 new_pay_player = 9;
  if (has_new_pay_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->new_pay_player(), output);
  }

  // optional uint64 commission_all = 10;
  if (has_commission_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->commission_all(), output);
  }

  // optional uint64 all_fee = 11;
  if (has_all_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->all_fee(), output);
  }

  // optional uint64 all_pour = 12;
  if (has_all_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->all_pour(), output);
  }

  // optional int64 all_win = 13;
  if (has_all_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->all_win(), output);
  }

  // optional uint64 jetton_init = 14;
  if (has_jetton_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->jetton_init(), output);
  }

  // optional uint64 all_draw = 15;
  if (has_all_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->all_draw(), output);
  }

  // optional uint64 jetton_in = 16;
  if (has_jetton_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->jetton_in(), output);
  }

  // optional uint64 jetton_out = 17;
  if (has_jetton_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->jetton_out(), output);
  }

  // optional uint64 sys_award = 18;
  if (has_sys_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->sys_award(), output);
  }

  // optional uint64 player_jetton = 19;
  if (has_player_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->player_jetton(), output);
  }

  // optional uint64 trd_pay_all = 20;
  if (has_trd_pay_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->trd_pay_all(), output);
  }

  // optional uint64 vip_pay_all = 21;
  if (has_vip_pay_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->vip_pay_all(), output);
  }

  // optional uint64 zhuangzhang_all = 22;
  if (has_zhuangzhang_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->zhuangzhang_all(), output);
  }

  // optional uint64 activity_award = 23;
  if (has_activity_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->activity_award(), output);
  }

  // optional uint64 all_bank_jetton = 25;
  if (has_all_bank_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->all_bank_jetton(), output);
  }

  // optional uint64 freeze_jetton = 26;
  if (has_freeze_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->freeze_jetton(), output);
  }

  // optional uint64 all_jetton = 27;
  if (has_all_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->all_jetton(), output);
  }

  // optional uint64 all_player = 28;
  if (has_all_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->all_player(), output);
  }

  // optional uint64 active_seven = 29;
  if (has_active_seven()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->active_seven(), output);
  }

  // optional uint64 active_thirty = 30;
  if (has_active_thirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->active_thirty(), output);
  }

  // optional uint64 pour_day_all = 31;
  if (has_pour_day_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->pour_day_all(), output);
  }

  // optional uint64 pour_week_all = 32;
  if (has_pour_week_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->pour_week_all(), output);
  }

  // optional uint64 pour_month_all = 33;
  if (has_pour_month_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->pour_month_all(), output);
  }

  // optional int64 sys_win_day = 34;
  if (has_sys_win_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->sys_win_day(), output);
  }

  // optional int64 sys_win_week = 35;
  if (has_sys_win_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->sys_win_week(), output);
  }

  // optional int64 sys_win_month = 36;
  if (has_sys_win_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->sys_win_month(), output);
  }

  // optional uint64 fee_day = 37;
  if (has_fee_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->fee_day(), output);
  }

  // optional uint64 fee_week = 38;
  if (has_fee_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->fee_week(), output);
  }

  // optional uint64 fee_month = 39;
  if (has_fee_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(39, this->fee_month(), output);
  }

  // optional uint64 commision_all = 40;
  if (has_commision_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->commision_all(), output);
  }

  // optional uint64 commision_take = 41;
  if (has_commision_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(41, this->commision_take(), output);
  }

  // optional uint64 commision_day = 42;
  if (has_commision_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(42, this->commision_day(), output);
  }

  // optional uint64 commision_week = 43;
  if (has_commision_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(43, this->commision_week(), output);
  }

  // optional uint64 commision_month = 44;
  if (has_commision_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->commision_month(), output);
  }

  // optional uint64 max_online = 45;
  if (has_max_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->max_online(), output);
  }

  // optional uint64 win_cost_value = 46;
  if (has_win_cost_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(46, this->win_cost_value(), output);
  }

  // optional uint64 day_money_value = 47;
  if (has_day_money_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(47, this->day_money_value(), output);
  }

  // optional uint64 pay_day = 48;
  if (has_pay_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(48, this->pay_day(), output);
  }

  // optional uint64 pay_week = 49;
  if (has_pay_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(49, this->pay_week(), output);
  }

  // optional uint64 pay_month = 50;
  if (has_pay_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->pay_month(), output);
  }

  // optional uint64 draw_day = 51;
  if (has_draw_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(51, this->draw_day(), output);
  }

  // optional uint64 draw_week = 52;
  if (has_draw_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->draw_week(), output);
  }

  // optional uint64 draw_month = 53;
  if (has_draw_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->draw_month(), output);
  }

  // optional uint64 trd_pay_day = 54;
  if (has_trd_pay_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(54, this->trd_pay_day(), output);
  }

  // optional uint64 trd_pay_week = 55;
  if (has_trd_pay_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(55, this->trd_pay_week(), output);
  }

  // optional uint64 trd_pay_month = 56;
  if (has_trd_pay_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(56, this->trd_pay_month(), output);
  }

  // optional uint64 vip_pay_day = 57;
  if (has_vip_pay_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(57, this->vip_pay_day(), output);
  }

  // optional uint64 vip_pay_week = 58;
  if (has_vip_pay_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(58, this->vip_pay_week(), output);
  }

  // optional uint64 vip_pay_month = 59;
  if (has_vip_pay_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(59, this->vip_pay_month(), output);
  }

  // optional uint64 zhuangzhang_day = 60;
  if (has_zhuangzhang_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(60, this->zhuangzhang_day(), output);
  }

  // optional uint64 zhuangzhang_week = 61;
  if (has_zhuangzhang_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(61, this->zhuangzhang_week(), output);
  }

  // optional uint64 zhuangzhang_month = 62;
  if (has_zhuangzhang_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(62, this->zhuangzhang_month(), output);
  }

  // optional uint64 give_day = 63;
  if (has_give_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(63, this->give_day(), output);
  }

  // optional uint64 give_week = 64;
  if (has_give_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(64, this->give_week(), output);
  }

  // optional uint64 give_month = 65;
  if (has_give_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(65, this->give_month(), output);
  }

  // optional uint64 all_give = 66;
  if (has_all_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(66, this->all_give(), output);
  }

  // optional uint64 all_vip_zhuanru = 67;
  if (has_all_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(67, this->all_vip_zhuanru(), output);
  }

  // optional uint64 today_vip_zhuanru = 68;
  if (has_today_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(68, this->today_vip_zhuanru(), output);
  }

  // optional uint64 week_vip_zhuanru = 69;
  if (has_week_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(69, this->week_vip_zhuanru(), output);
  }

  // optional uint64 month_vip_zhuanru = 70;
  if (has_month_vip_zhuanru()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(70, this->month_vip_zhuanru(), output);
  }

  // optional uint64 all_vip_zhuanchu = 71;
  if (has_all_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(71, this->all_vip_zhuanchu(), output);
  }

  // optional uint64 today_vip_zhuanchu = 72;
  if (has_today_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(72, this->today_vip_zhuanchu(), output);
  }

  // optional uint64 week_vip_zhuanchu = 73;
  if (has_week_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(73, this->week_vip_zhuanchu(), output);
  }

  // optional uint64 month_vip_zhuanchu = 74;
  if (has_month_vip_zhuanchu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(74, this->month_vip_zhuanchu(), output);
  }

  // optional uint32 new_pay_all = 100;
  if (has_new_pay_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->new_pay_all(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbLogSystemDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string date_id = 1;
  if (has_date_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date_id().data(), this->date_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date_id(), target);
  }

  // optional uint32 active_player = 2;
  if (has_active_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_player(), target);
  }

  // optional uint32 login_count = 3;
  if (has_login_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->login_count(), target);
  }

  // optional uint32 valid_player = 4;
  if (has_valid_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->valid_player(), target);
  }

  // optional uint32 new_player = 5;
  if (has_new_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->new_player(), target);
  }

  // optional uint32 pay_player = 6;
  if (has_pay_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pay_player(), target);
  }

  // optional uint32 pay_times = 7;
  if (has_pay_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pay_times(), target);
  }

  // optional uint64 pay_all = 8;
  if (has_pay_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->pay_all(), target);
  }

  // optional uint32 new_pay_player = 9;
  if (has_new_pay_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->new_pay_player(), target);
  }

  // optional uint64 commission_all = 10;
  if (has_commission_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->commission_all(), target);
  }

  // optional uint64 all_fee = 11;
  if (has_all_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->all_fee(), target);
  }

  // optional uint64 all_pour = 12;
  if (has_all_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->all_pour(), target);
  }

  // optional int64 all_win = 13;
  if (has_all_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->all_win(), target);
  }

  // optional uint64 jetton_init = 14;
  if (has_jetton_init()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->jetton_init(), target);
  }

  // optional uint64 all_draw = 15;
  if (has_all_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->all_draw(), target);
  }

  // optional uint64 jetton_in = 16;
  if (has_jetton_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->jetton_in(), target);
  }

  // optional uint64 jetton_out = 17;
  if (has_jetton_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->jetton_out(), target);
  }

  // optional uint64 sys_award = 18;
  if (has_sys_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->sys_award(), target);
  }

  // optional uint64 player_jetton = 19;
  if (has_player_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->player_jetton(), target);
  }

  // optional uint64 trd_pay_all = 20;
  if (has_trd_pay_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->trd_pay_all(), target);
  }

  // optional uint64 vip_pay_all = 21;
  if (has_vip_pay_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->vip_pay_all(), target);
  }

  // optional uint64 zhuangzhang_all = 22;
  if (has_zhuangzhang_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->zhuangzhang_all(), target);
  }

  // optional uint64 activity_award = 23;
  if (has_activity_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->activity_award(), target);
  }

  // optional uint64 all_bank_jetton = 25;
  if (has_all_bank_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->all_bank_jetton(), target);
  }

  // optional uint64 freeze_jetton = 26;
  if (has_freeze_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->freeze_jetton(), target);
  }

  // optional uint64 all_jetton = 27;
  if (has_all_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->all_jetton(), target);
  }

  // optional uint64 all_player = 28;
  if (has_all_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->all_player(), target);
  }

  // optional uint64 active_seven = 29;
  if (has_active_seven()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->active_seven(), target);
  }

  // optional uint64 active_thirty = 30;
  if (has_active_thirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->active_thirty(), target);
  }

  // optional uint64 pour_day_all = 31;
  if (has_pour_day_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->pour_day_all(), target);
  }

  // optional uint64 pour_week_all = 32;
  if (has_pour_week_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->pour_week_all(), target);
  }

  // optional uint64 pour_month_all = 33;
  if (has_pour_month_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->pour_month_all(), target);
  }

  // optional int64 sys_win_day = 34;
  if (has_sys_win_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->sys_win_day(), target);
  }

  // optional int64 sys_win_week = 35;
  if (has_sys_win_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->sys_win_week(), target);
  }

  // optional int64 sys_win_month = 36;
  if (has_sys_win_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->sys_win_month(), target);
  }

  // optional uint64 fee_day = 37;
  if (has_fee_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->fee_day(), target);
  }

  // optional uint64 fee_week = 38;
  if (has_fee_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->fee_week(), target);
  }

  // optional uint64 fee_month = 39;
  if (has_fee_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(39, this->fee_month(), target);
  }

  // optional uint64 commision_all = 40;
  if (has_commision_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->commision_all(), target);
  }

  // optional uint64 commision_take = 41;
  if (has_commision_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(41, this->commision_take(), target);
  }

  // optional uint64 commision_day = 42;
  if (has_commision_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(42, this->commision_day(), target);
  }

  // optional uint64 commision_week = 43;
  if (has_commision_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(43, this->commision_week(), target);
  }

  // optional uint64 commision_month = 44;
  if (has_commision_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->commision_month(), target);
  }

  // optional uint64 max_online = 45;
  if (has_max_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->max_online(), target);
  }

  // optional uint64 win_cost_value = 46;
  if (has_win_cost_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(46, this->win_cost_value(), target);
  }

  // optional uint64 day_money_value = 47;
  if (has_day_money_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(47, this->day_money_value(), target);
  }

  // optional uint64 pay_day = 48;
  if (has_pay_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(48, this->pay_day(), target);
  }

  // optional uint64 pay_week = 49;
  if (has_pay_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(49, this->pay_week(), target);
  }

  // optional uint64 pay_month = 50;
  if (has_pay_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->pay_month(), target);
  }

  // optional uint64 draw_day = 51;
  if (has_draw_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(51, this->draw_day(), target);
  }

  // optional uint64 draw_week = 52;
  if (has_draw_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->draw_week(), target);
  }

  // optional uint64 draw_month = 53;
  if (has_draw_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->draw_month(), target);
  }

  // optional uint64 trd_pay_day = 54;
  if (has_trd_pay_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(54, this->trd_pay_day(), target);
  }

  // optional uint64 trd_pay_week = 55;
  if (has_trd_pay_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(55, this->trd_pay_week(), target);
  }

  // optional uint64 trd_pay_month = 56;
  if (has_trd_pay_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(56, this->trd_pay_month(), target);
  }

  // optional uint64 vip_pay_day = 57;
  if (has_vip_pay_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(57, this->vip_pay_day(), target);
  }

  // optional uint64 vip_pay_week = 58;
  if (has_vip_pay_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(58, this->vip_pay_week(), target);
  }

  // optional uint64 vip_pay_month = 59;
  if (has_vip_pay_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(59, this->vip_pay_month(), target);
  }

  // optional uint64 zhuangzhang_day = 60;
  if (has_zhuangzhang_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(60, this->zhuangzhang_day(), target);
  }

  // optional uint64 zhuangzhang_week = 61;
  if (has_zhuangzhang_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(61, this->zhuangzhang_week(), target);
  }

  // optional uint64 zhuangzhang_month = 62;
  if (has_zhuangzhang_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(62, this->zhuangzhang_month(), target);
  }

  // optional uint64 give_day = 63;
  if (has_give_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(63, this->give_day(), target);
  }

  // optional uint64 give_week = 64;
  if (has_give_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(64, this->give_week(), target);
  }

  // optional uint64 give_month = 65;
  if (has_give_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(65, this->give_month(), target);
  }

  // optional uint64 all_give = 66;
  if (has_all_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(66, this->all_give(), target);
  }

  // optional uint64 all_vip_zhuanru = 67;
  if (has_all_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(67, this->all_vip_zhuanru(), target);
  }

  // optional uint64 today_vip_zhuanru = 68;
  if (has_today_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(68, this->today_vip_zhuanru(), target);
  }

  // optional uint64 week_vip_zhuanru = 69;
  if (has_week_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(69, this->week_vip_zhuanru(), target);
  }

  // optional uint64 month_vip_zhuanru = 70;
  if (has_month_vip_zhuanru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(70, this->month_vip_zhuanru(), target);
  }

  // optional uint64 all_vip_zhuanchu = 71;
  if (has_all_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(71, this->all_vip_zhuanchu(), target);
  }

  // optional uint64 today_vip_zhuanchu = 72;
  if (has_today_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(72, this->today_vip_zhuanchu(), target);
  }

  // optional uint64 week_vip_zhuanchu = 73;
  if (has_week_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(73, this->week_vip_zhuanchu(), target);
  }

  // optional uint64 month_vip_zhuanchu = 74;
  if (has_month_vip_zhuanchu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(74, this->month_vip_zhuanchu(), target);
  }

  // optional uint32 new_pay_all = 100;
  if (has_new_pay_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->new_pay_all(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbLogSystemDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string date_id = 1;
    if (has_date_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_id());
    }

    // optional uint32 active_player = 2;
    if (has_active_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_player());
    }

    // optional uint32 login_count = 3;
    if (has_login_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_count());
    }

    // optional uint32 valid_player = 4;
    if (has_valid_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_player());
    }

    // optional uint32 new_player = 5;
    if (has_new_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_player());
    }

    // optional uint32 pay_player = 6;
    if (has_pay_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_player());
    }

    // optional uint32 pay_times = 7;
    if (has_pay_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pay_times());
    }

    // optional uint64 pay_all = 8;
    if (has_pay_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pay_all());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 new_pay_player = 9;
    if (has_new_pay_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_pay_player());
    }

    // optional uint32 new_pay_all = 100;
    if (has_new_pay_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_pay_all());
    }

    // optional uint64 commission_all = 10;
    if (has_commission_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commission_all());
    }

    // optional uint64 all_fee = 11;
    if (has_all_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_fee());
    }

    // optional uint64 all_pour = 12;
    if (has_all_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_pour());
    }

    // optional int64 all_win = 13;
    if (has_all_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->all_win());
    }

    // optional uint64 jetton_init = 14;
    if (has_jetton_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton_init());
    }

    // optional uint64 all_draw = 15;
    if (has_all_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_draw());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 jetton_in = 16;
    if (has_jetton_in()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton_in());
    }

    // optional uint64 jetton_out = 17;
    if (has_jetton_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton_out());
    }

    // optional uint64 sys_award = 18;
    if (has_sys_award()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sys_award());
    }

    // optional uint64 player_jetton = 19;
    if (has_player_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_jetton());
    }

    // optional uint64 trd_pay_all = 20;
    if (has_trd_pay_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trd_pay_all());
    }

    // optional uint64 vip_pay_all = 21;
    if (has_vip_pay_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vip_pay_all());
    }

    // optional uint64 zhuangzhang_all = 22;
    if (has_zhuangzhang_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zhuangzhang_all());
    }

    // optional uint64 activity_award = 23;
    if (has_activity_award()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activity_award());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 all_bank_jetton = 25;
    if (has_all_bank_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_bank_jetton());
    }

    // optional uint64 freeze_jetton = 26;
    if (has_freeze_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freeze_jetton());
    }

    // optional uint64 all_jetton = 27;
    if (has_all_jetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_jetton());
    }

    // optional uint64 all_player = 28;
    if (has_all_player()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_player());
    }

    // optional uint64 active_seven = 29;
    if (has_active_seven()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_seven());
    }

    // optional uint64 active_thirty = 30;
    if (has_active_thirty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_thirty());
    }

    // optional uint64 pour_day_all = 31;
    if (has_pour_day_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour_day_all());
    }

    // optional uint64 pour_week_all = 32;
    if (has_pour_week_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour_week_all());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 pour_month_all = 33;
    if (has_pour_month_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pour_month_all());
    }

    // optional int64 sys_win_day = 34;
    if (has_sys_win_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_win_day());
    }

    // optional int64 sys_win_week = 35;
    if (has_sys_win_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_win_week());
    }

    // optional int64 sys_win_month = 36;
    if (has_sys_win_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sys_win_month());
    }

    // optional uint64 fee_day = 37;
    if (has_fee_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_day());
    }

    // optional uint64 fee_week = 38;
    if (has_fee_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_week());
    }

    // optional uint64 fee_month = 39;
    if (has_fee_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee_month());
    }

    // optional uint64 commision_all = 40;
    if (has_commision_all()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commision_all());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint64 commision_take = 41;
    if (has_commision_take()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commision_take());
    }

    // optional uint64 commision_day = 42;
    if (has_commision_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commision_day());
    }

    // optional uint64 commision_week = 43;
    if (has_commision_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commision_week());
    }

    // optional uint64 commision_month = 44;
    if (has_commision_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->commision_month());
    }

    // optional uint64 max_online = 45;
    if (has_max_online()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_online());
    }

    // optional uint64 win_cost_value = 46;
    if (has_win_cost_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->win_cost_value());
    }

    // optional uint64 day_money_value = 47;
    if (has_day_money_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->day_money_value());
    }

    // optional uint64 pay_day = 48;
    if (has_pay_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pay_day());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint64 pay_week = 49;
    if (has_pay_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pay_week());
    }

    // optional uint64 pay_month = 50;
    if (has_pay_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pay_month());
    }

    // optional uint64 draw_day = 51;
    if (has_draw_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->draw_day());
    }

    // optional uint64 draw_week = 52;
    if (has_draw_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->draw_week());
    }

    // optional uint64 draw_month = 53;
    if (has_draw_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->draw_month());
    }

    // optional uint64 trd_pay_day = 54;
    if (has_trd_pay_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trd_pay_day());
    }

    // optional uint64 trd_pay_week = 55;
    if (has_trd_pay_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trd_pay_week());
    }

    // optional uint64 trd_pay_month = 56;
    if (has_trd_pay_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trd_pay_month());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint64 vip_pay_day = 57;
    if (has_vip_pay_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vip_pay_day());
    }

    // optional uint64 vip_pay_week = 58;
    if (has_vip_pay_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vip_pay_week());
    }

    // optional uint64 vip_pay_month = 59;
    if (has_vip_pay_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vip_pay_month());
    }

    // optional uint64 zhuangzhang_day = 60;
    if (has_zhuangzhang_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zhuangzhang_day());
    }

    // optional uint64 zhuangzhang_week = 61;
    if (has_zhuangzhang_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zhuangzhang_week());
    }

    // optional uint64 zhuangzhang_month = 62;
    if (has_zhuangzhang_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zhuangzhang_month());
    }

    // optional uint64 give_day = 63;
    if (has_give_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->give_day());
    }

    // optional uint64 give_week = 64;
    if (has_give_week()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->give_week());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint64 give_month = 65;
    if (has_give_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->give_month());
    }

    // optional uint64 all_give = 66;
    if (has_all_give()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_give());
    }

    // optional uint64 all_vip_zhuanru = 67;
    if (has_all_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_vip_zhuanru());
    }

    // optional uint64 today_vip_zhuanru = 68;
    if (has_today_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_vip_zhuanru());
    }

    // optional uint64 week_vip_zhuanru = 69;
    if (has_week_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_vip_zhuanru());
    }

    // optional uint64 month_vip_zhuanru = 70;
    if (has_month_vip_zhuanru()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->month_vip_zhuanru());
    }

    // optional uint64 all_vip_zhuanchu = 71;
    if (has_all_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->all_vip_zhuanchu());
    }

    // optional uint64 today_vip_zhuanchu = 72;
    if (has_today_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_vip_zhuanchu());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional uint64 week_vip_zhuanchu = 73;
    if (has_week_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_vip_zhuanchu());
    }

    // optional uint64 month_vip_zhuanchu = 74;
    if (has_month_vip_zhuanchu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->month_vip_zhuanchu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbLogSystemDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbLogSystemDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbLogSystemDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbLogSystemDay::MergeFrom(const tbLogSystemDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date_id()) {
      set_date_id(from.date_id());
    }
    if (from.has_active_player()) {
      set_active_player(from.active_player());
    }
    if (from.has_login_count()) {
      set_login_count(from.login_count());
    }
    if (from.has_valid_player()) {
      set_valid_player(from.valid_player());
    }
    if (from.has_new_player()) {
      set_new_player(from.new_player());
    }
    if (from.has_pay_player()) {
      set_pay_player(from.pay_player());
    }
    if (from.has_pay_times()) {
      set_pay_times(from.pay_times());
    }
    if (from.has_pay_all()) {
      set_pay_all(from.pay_all());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_new_pay_player()) {
      set_new_pay_player(from.new_pay_player());
    }
    if (from.has_new_pay_all()) {
      set_new_pay_all(from.new_pay_all());
    }
    if (from.has_commission_all()) {
      set_commission_all(from.commission_all());
    }
    if (from.has_all_fee()) {
      set_all_fee(from.all_fee());
    }
    if (from.has_all_pour()) {
      set_all_pour(from.all_pour());
    }
    if (from.has_all_win()) {
      set_all_win(from.all_win());
    }
    if (from.has_jetton_init()) {
      set_jetton_init(from.jetton_init());
    }
    if (from.has_all_draw()) {
      set_all_draw(from.all_draw());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_jetton_in()) {
      set_jetton_in(from.jetton_in());
    }
    if (from.has_jetton_out()) {
      set_jetton_out(from.jetton_out());
    }
    if (from.has_sys_award()) {
      set_sys_award(from.sys_award());
    }
    if (from.has_player_jetton()) {
      set_player_jetton(from.player_jetton());
    }
    if (from.has_trd_pay_all()) {
      set_trd_pay_all(from.trd_pay_all());
    }
    if (from.has_vip_pay_all()) {
      set_vip_pay_all(from.vip_pay_all());
    }
    if (from.has_zhuangzhang_all()) {
      set_zhuangzhang_all(from.zhuangzhang_all());
    }
    if (from.has_activity_award()) {
      set_activity_award(from.activity_award());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_all_bank_jetton()) {
      set_all_bank_jetton(from.all_bank_jetton());
    }
    if (from.has_freeze_jetton()) {
      set_freeze_jetton(from.freeze_jetton());
    }
    if (from.has_all_jetton()) {
      set_all_jetton(from.all_jetton());
    }
    if (from.has_all_player()) {
      set_all_player(from.all_player());
    }
    if (from.has_active_seven()) {
      set_active_seven(from.active_seven());
    }
    if (from.has_active_thirty()) {
      set_active_thirty(from.active_thirty());
    }
    if (from.has_pour_day_all()) {
      set_pour_day_all(from.pour_day_all());
    }
    if (from.has_pour_week_all()) {
      set_pour_week_all(from.pour_week_all());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_pour_month_all()) {
      set_pour_month_all(from.pour_month_all());
    }
    if (from.has_sys_win_day()) {
      set_sys_win_day(from.sys_win_day());
    }
    if (from.has_sys_win_week()) {
      set_sys_win_week(from.sys_win_week());
    }
    if (from.has_sys_win_month()) {
      set_sys_win_month(from.sys_win_month());
    }
    if (from.has_fee_day()) {
      set_fee_day(from.fee_day());
    }
    if (from.has_fee_week()) {
      set_fee_week(from.fee_week());
    }
    if (from.has_fee_month()) {
      set_fee_month(from.fee_month());
    }
    if (from.has_commision_all()) {
      set_commision_all(from.commision_all());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_commision_take()) {
      set_commision_take(from.commision_take());
    }
    if (from.has_commision_day()) {
      set_commision_day(from.commision_day());
    }
    if (from.has_commision_week()) {
      set_commision_week(from.commision_week());
    }
    if (from.has_commision_month()) {
      set_commision_month(from.commision_month());
    }
    if (from.has_max_online()) {
      set_max_online(from.max_online());
    }
    if (from.has_win_cost_value()) {
      set_win_cost_value(from.win_cost_value());
    }
    if (from.has_day_money_value()) {
      set_day_money_value(from.day_money_value());
    }
    if (from.has_pay_day()) {
      set_pay_day(from.pay_day());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_pay_week()) {
      set_pay_week(from.pay_week());
    }
    if (from.has_pay_month()) {
      set_pay_month(from.pay_month());
    }
    if (from.has_draw_day()) {
      set_draw_day(from.draw_day());
    }
    if (from.has_draw_week()) {
      set_draw_week(from.draw_week());
    }
    if (from.has_draw_month()) {
      set_draw_month(from.draw_month());
    }
    if (from.has_trd_pay_day()) {
      set_trd_pay_day(from.trd_pay_day());
    }
    if (from.has_trd_pay_week()) {
      set_trd_pay_week(from.trd_pay_week());
    }
    if (from.has_trd_pay_month()) {
      set_trd_pay_month(from.trd_pay_month());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_vip_pay_day()) {
      set_vip_pay_day(from.vip_pay_day());
    }
    if (from.has_vip_pay_week()) {
      set_vip_pay_week(from.vip_pay_week());
    }
    if (from.has_vip_pay_month()) {
      set_vip_pay_month(from.vip_pay_month());
    }
    if (from.has_zhuangzhang_day()) {
      set_zhuangzhang_day(from.zhuangzhang_day());
    }
    if (from.has_zhuangzhang_week()) {
      set_zhuangzhang_week(from.zhuangzhang_week());
    }
    if (from.has_zhuangzhang_month()) {
      set_zhuangzhang_month(from.zhuangzhang_month());
    }
    if (from.has_give_day()) {
      set_give_day(from.give_day());
    }
    if (from.has_give_week()) {
      set_give_week(from.give_week());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_give_month()) {
      set_give_month(from.give_month());
    }
    if (from.has_all_give()) {
      set_all_give(from.all_give());
    }
    if (from.has_all_vip_zhuanru()) {
      set_all_vip_zhuanru(from.all_vip_zhuanru());
    }
    if (from.has_today_vip_zhuanru()) {
      set_today_vip_zhuanru(from.today_vip_zhuanru());
    }
    if (from.has_week_vip_zhuanru()) {
      set_week_vip_zhuanru(from.week_vip_zhuanru());
    }
    if (from.has_month_vip_zhuanru()) {
      set_month_vip_zhuanru(from.month_vip_zhuanru());
    }
    if (from.has_all_vip_zhuanchu()) {
      set_all_vip_zhuanchu(from.all_vip_zhuanchu());
    }
    if (from.has_today_vip_zhuanchu()) {
      set_today_vip_zhuanchu(from.today_vip_zhuanchu());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_week_vip_zhuanchu()) {
      set_week_vip_zhuanchu(from.week_vip_zhuanchu());
    }
    if (from.has_month_vip_zhuanchu()) {
      set_month_vip_zhuanchu(from.month_vip_zhuanchu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbLogSystemDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbLogSystemDay::CopyFrom(const tbLogSystemDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbLogSystemDay::IsInitialized() const {

  return true;
}

void tbLogSystemDay::Swap(tbLogSystemDay* other) {
  if (other != this) {
    std::swap(date_id_, other->date_id_);
    std::swap(active_player_, other->active_player_);
    std::swap(login_count_, other->login_count_);
    std::swap(valid_player_, other->valid_player_);
    std::swap(new_player_, other->new_player_);
    std::swap(pay_player_, other->pay_player_);
    std::swap(pay_times_, other->pay_times_);
    std::swap(pay_all_, other->pay_all_);
    std::swap(new_pay_player_, other->new_pay_player_);
    std::swap(new_pay_all_, other->new_pay_all_);
    std::swap(commission_all_, other->commission_all_);
    std::swap(all_fee_, other->all_fee_);
    std::swap(all_pour_, other->all_pour_);
    std::swap(all_win_, other->all_win_);
    std::swap(jetton_init_, other->jetton_init_);
    std::swap(all_draw_, other->all_draw_);
    std::swap(jetton_in_, other->jetton_in_);
    std::swap(jetton_out_, other->jetton_out_);
    std::swap(sys_award_, other->sys_award_);
    std::swap(player_jetton_, other->player_jetton_);
    std::swap(trd_pay_all_, other->trd_pay_all_);
    std::swap(vip_pay_all_, other->vip_pay_all_);
    std::swap(zhuangzhang_all_, other->zhuangzhang_all_);
    std::swap(activity_award_, other->activity_award_);
    std::swap(all_bank_jetton_, other->all_bank_jetton_);
    std::swap(freeze_jetton_, other->freeze_jetton_);
    std::swap(all_jetton_, other->all_jetton_);
    std::swap(all_player_, other->all_player_);
    std::swap(active_seven_, other->active_seven_);
    std::swap(active_thirty_, other->active_thirty_);
    std::swap(pour_day_all_, other->pour_day_all_);
    std::swap(pour_week_all_, other->pour_week_all_);
    std::swap(pour_month_all_, other->pour_month_all_);
    std::swap(sys_win_day_, other->sys_win_day_);
    std::swap(sys_win_week_, other->sys_win_week_);
    std::swap(sys_win_month_, other->sys_win_month_);
    std::swap(fee_day_, other->fee_day_);
    std::swap(fee_week_, other->fee_week_);
    std::swap(fee_month_, other->fee_month_);
    std::swap(commision_all_, other->commision_all_);
    std::swap(commision_take_, other->commision_take_);
    std::swap(commision_day_, other->commision_day_);
    std::swap(commision_week_, other->commision_week_);
    std::swap(commision_month_, other->commision_month_);
    std::swap(max_online_, other->max_online_);
    std::swap(win_cost_value_, other->win_cost_value_);
    std::swap(day_money_value_, other->day_money_value_);
    std::swap(pay_day_, other->pay_day_);
    std::swap(pay_week_, other->pay_week_);
    std::swap(pay_month_, other->pay_month_);
    std::swap(draw_day_, other->draw_day_);
    std::swap(draw_week_, other->draw_week_);
    std::swap(draw_month_, other->draw_month_);
    std::swap(trd_pay_day_, other->trd_pay_day_);
    std::swap(trd_pay_week_, other->trd_pay_week_);
    std::swap(trd_pay_month_, other->trd_pay_month_);
    std::swap(vip_pay_day_, other->vip_pay_day_);
    std::swap(vip_pay_week_, other->vip_pay_week_);
    std::swap(vip_pay_month_, other->vip_pay_month_);
    std::swap(zhuangzhang_day_, other->zhuangzhang_day_);
    std::swap(zhuangzhang_week_, other->zhuangzhang_week_);
    std::swap(zhuangzhang_month_, other->zhuangzhang_month_);
    std::swap(give_day_, other->give_day_);
    std::swap(give_week_, other->give_week_);
    std::swap(give_month_, other->give_month_);
    std::swap(all_give_, other->all_give_);
    std::swap(all_vip_zhuanru_, other->all_vip_zhuanru_);
    std::swap(today_vip_zhuanru_, other->today_vip_zhuanru_);
    std::swap(week_vip_zhuanru_, other->week_vip_zhuanru_);
    std::swap(month_vip_zhuanru_, other->month_vip_zhuanru_);
    std::swap(all_vip_zhuanchu_, other->all_vip_zhuanchu_);
    std::swap(today_vip_zhuanchu_, other->today_vip_zhuanchu_);
    std::swap(week_vip_zhuanchu_, other->week_vip_zhuanchu_);
    std::swap(month_vip_zhuanchu_, other->month_vip_zhuanchu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbLogSystemDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbLogSystemDay_descriptor_;
  metadata.reflection = tbLogSystemDay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tbRedeemCode::kIdFieldNumber;
const int tbRedeemCode::kGoldFieldNumber;
const int tbRedeemCode::kCreateTimeFieldNumber;
const int tbRedeemCode::kCodeNameFieldNumber;
const int tbRedeemCode::kStateFieldNumber;
const int tbRedeemCode::kUserIdFieldNumber;
const int tbRedeemCode::kUseTimeFieldNumber;
#endif  // !_MSC_VER

tbRedeemCode::tbRedeemCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tbRedeemCode::InitAsDefaultInstance() {
}

tbRedeemCode::tbRedeemCode(const tbRedeemCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tbRedeemCode::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  code_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  user_id_ = GOOGLE_ULONGLONG(0);
  use_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tbRedeemCode::~tbRedeemCode() {
  SharedDtor();
}

void tbRedeemCode::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (code_name_ != &::google::protobuf::internal::kEmptyString) {
    delete code_name_;
  }
  if (this != default_instance_) {
  }
}

void tbRedeemCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tbRedeemCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tbRedeemCode_descriptor_;
}

const tbRedeemCode& tbRedeemCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

tbRedeemCode* tbRedeemCode::default_instance_ = NULL;

tbRedeemCode* tbRedeemCode::New() const {
  return new tbRedeemCode;
}

void tbRedeemCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    gold_ = GOOGLE_ULONGLONG(0);
    create_time_ = GOOGLE_ULONGLONG(0);
    if (has_code_name()) {
      if (code_name_ != &::google::protobuf::internal::kEmptyString) {
        code_name_->clear();
      }
    }
    state_ = 0u;
    user_id_ = GOOGLE_ULONGLONG(0);
    use_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tbRedeemCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_code_name;
        break;
      }

      // optional string code_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_name().data(), this->code_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional uint32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_use_time;
        break;
      }

      // optional uint64 use_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tbRedeemCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional uint64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gold(), output);
  }

  // optional uint64 create_time = 3;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->create_time(), output);
  }

  // optional string code_name = 5;
  if (has_code_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_name().data(), this->code_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->code_name(), output);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->state(), output);
  }

  // optional uint64 user_id = 7;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->user_id(), output);
  }

  // optional uint64 use_time = 8;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->use_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tbRedeemCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gold(), target);
  }

  // optional uint64 create_time = 3;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->create_time(), target);
  }

  // optional string code_name = 5;
  if (has_code_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_name().data(), this->code_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->code_name(), target);
  }

  // optional uint32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->state(), target);
  }

  // optional uint64 user_id = 7;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->user_id(), target);
  }

  // optional uint64 use_time = 8;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->use_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tbRedeemCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 create_time = 3;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional string code_name = 5;
    if (has_code_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_name());
    }

    // optional uint32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 user_id = 7;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 use_time = 8;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->use_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tbRedeemCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tbRedeemCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tbRedeemCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tbRedeemCode::MergeFrom(const tbRedeemCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_code_name()) {
      set_code_name(from.code_name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tbRedeemCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tbRedeemCode::CopyFrom(const tbRedeemCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tbRedeemCode::IsInitialized() const {

  return true;
}

void tbRedeemCode::Swap(tbRedeemCode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gold_, other->gold_);
    std::swap(create_time_, other->create_time_);
    std::swap(code_name_, other->code_name_);
    std::swap(state_, other->state_);
    std::swap(user_id_, other->user_id_);
    std::swap(use_time_, other->use_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tbRedeemCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tbRedeemCode_descriptor_;
  metadata.reflection = tbRedeemCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogRedeemCodeRechargeRecord::kEventIdFieldNumber;
const int LogRedeemCodeRechargeRecord::kSequenceFieldNumber;
const int LogRedeemCodeRechargeRecord::kBusNameFieldNumber;
const int LogRedeemCodeRechargeRecord::kEventTimeFieldNumber;
const int LogRedeemCodeRechargeRecord::kUserIdFieldNumber;
const int LogRedeemCodeRechargeRecord::kUserNameFieldNumber;
const int LogRedeemCodeRechargeRecord::kAmountFieldNumber;
const int LogRedeemCodeRechargeRecord::kStatusFieldNumber;
#endif  // !_MSC_VER

LogRedeemCodeRechargeRecord::LogRedeemCodeRechargeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogRedeemCodeRechargeRecord::InitAsDefaultInstance() {
}

LogRedeemCodeRechargeRecord::LogRedeemCodeRechargeRecord(const LogRedeemCodeRechargeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogRedeemCodeRechargeRecord::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = GOOGLE_ULONGLONG(0);
  sequence_ = 0u;
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  status_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRedeemCodeRechargeRecord::~LogRedeemCodeRechargeRecord() {
  SharedDtor();
}

void LogRedeemCodeRechargeRecord::SharedDtor() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void LogRedeemCodeRechargeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRedeemCodeRechargeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRedeemCodeRechargeRecord_descriptor_;
}

const LogRedeemCodeRechargeRecord& LogRedeemCodeRechargeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

LogRedeemCodeRechargeRecord* LogRedeemCodeRechargeRecord::default_instance_ = NULL;

LogRedeemCodeRechargeRecord* LogRedeemCodeRechargeRecord::New() const {
  return new LogRedeemCodeRechargeRecord;
}

void LogRedeemCodeRechargeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = GOOGLE_ULONGLONG(0);
    sequence_ = 0u;
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
    if (has_event_time()) {
      if (event_time_ != &::google::protobuf::internal::kEmptyString) {
        event_time_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    status_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRedeemCodeRechargeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_time;
        break;
      }

      // optional string event_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_time().data(), this->event_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_status;
        break;
      }

      // optional uint64 status = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogRedeemCodeRechargeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_id(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bus_name(), output);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_time(), output);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->user_id(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional uint64 amount = 20;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->amount(), output);
  }

  // optional uint64 status = 21;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogRedeemCodeRechargeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // optional string bus_name = 3;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bus_name(), target);
  }

  // optional string event_time = 4;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_time().data(), this->event_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_time(), target);
  }

  // optional uint64 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->user_id(), target);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_name(), target);
  }

  // optional uint64 amount = 20;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->amount(), target);
  }

  // optional uint64 status = 21;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogRedeemCodeRechargeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string bus_name = 3;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

    // optional string event_time = 4;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_time());
    }

    // optional uint64 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 amount = 20;
    if (has_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 status = 21;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRedeemCodeRechargeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRedeemCodeRechargeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRedeemCodeRechargeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRedeemCodeRechargeRecord::MergeFrom(const LogRedeemCodeRechargeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRedeemCodeRechargeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRedeemCodeRechargeRecord::CopyFrom(const LogRedeemCodeRechargeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRedeemCodeRechargeRecord::IsInitialized() const {

  return true;
}

void LogRedeemCodeRechargeRecord::Swap(LogRedeemCodeRechargeRecord* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(sequence_, other->sequence_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(event_time_, other->event_time_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(amount_, other->amount_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRedeemCodeRechargeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRedeemCodeRechargeRecord_descriptor_;
  metadata.reflection = LogRedeemCodeRechargeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomStat::kCurFeeFieldNumber;
const int GameRoomStat::kCurPourFieldNumber;
const int GameRoomStat::kCurWinFieldNumber;
#endif  // !_MSC_VER

GameRoomStat::GameRoomStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomStat::InitAsDefaultInstance() {
}

GameRoomStat::GameRoomStat(const GameRoomStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomStat::SharedCtor() {
  _cached_size_ = 0;
  cur_fee_ = GOOGLE_ULONGLONG(0);
  cur_pour_ = GOOGLE_ULONGLONG(0);
  cur_win_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomStat::~GameRoomStat() {
  SharedDtor();
}

void GameRoomStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRoomStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomStat_descriptor_;
}

const GameRoomStat& GameRoomStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

GameRoomStat* GameRoomStat::default_instance_ = NULL;

GameRoomStat* GameRoomStat::New() const {
  return new GameRoomStat;
}

void GameRoomStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_fee_ = GOOGLE_ULONGLONG(0);
    cur_pour_ = GOOGLE_ULONGLONG(0);
    cur_win_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_fee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_fee_)));
          set_has_cur_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_pour;
        break;
      }

      // optional uint64 cur_pour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_pour_)));
          set_has_cur_pour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_win;
        break;
      }

      // optional int64 cur_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_win_)));
          set_has_cur_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_fee = 1;
  if (has_cur_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cur_fee(), output);
  }

  // optional uint64 cur_pour = 2;
  if (has_cur_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_pour(), output);
  }

  // optional int64 cur_win = 3;
  if (has_cur_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_fee = 1;
  if (has_cur_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cur_fee(), target);
  }

  // optional uint64 cur_pour = 2;
  if (has_cur_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_pour(), target);
  }

  // optional int64 cur_win = 3;
  if (has_cur_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_fee = 1;
    if (has_cur_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_fee());
    }

    // optional uint64 cur_pour = 2;
    if (has_cur_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_pour());
    }

    // optional int64 cur_win = 3;
    if (has_cur_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_win());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomStat::MergeFrom(const GameRoomStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_fee()) {
      set_cur_fee(from.cur_fee());
    }
    if (from.has_cur_pour()) {
      set_cur_pour(from.cur_pour());
    }
    if (from.has_cur_win()) {
      set_cur_win(from.cur_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomStat::CopyFrom(const GameRoomStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomStat::IsInitialized() const {

  return true;
}

void GameRoomStat::Swap(GameRoomStat* other) {
  if (other != this) {
    std::swap(cur_fee_, other->cur_fee_);
    std::swap(cur_pour_, other->cur_pour_);
    std::swap(cur_win_, other->cur_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomStat_descriptor_;
  metadata.reflection = GameRoomStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerPourInfo::kUserIdFieldNumber;
const int GamePlayerPourInfo::kPourFieldNumber;
#endif  // !_MSC_VER

GamePlayerPourInfo::GamePlayerPourInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerPourInfo::InitAsDefaultInstance() {
}

GamePlayerPourInfo::GamePlayerPourInfo(const GamePlayerPourInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerPourInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  pour_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerPourInfo::~GamePlayerPourInfo() {
  SharedDtor();
}

void GamePlayerPourInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerPourInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerPourInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerPourInfo_descriptor_;
}

const GamePlayerPourInfo& GamePlayerPourInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

GamePlayerPourInfo* GamePlayerPourInfo::default_instance_ = NULL;

GamePlayerPourInfo* GamePlayerPourInfo::New() const {
  return new GamePlayerPourInfo;
}

void GamePlayerPourInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    pour_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerPourInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pour;
        break;
      }

      // optional int64 pour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pour_)));
          set_has_pour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerPourInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int64 pour = 2;
  if (has_pour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pour(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerPourInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int64 pour = 2;
  if (has_pour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pour(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerPourInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int64 pour = 2;
    if (has_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pour());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerPourInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerPourInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerPourInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerPourInfo::MergeFrom(const GamePlayerPourInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_pour()) {
      set_pour(from.pour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerPourInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerPourInfo::CopyFrom(const GamePlayerPourInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerPourInfo::IsInitialized() const {

  return true;
}

void GamePlayerPourInfo::Swap(GamePlayerPourInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(pour_, other->pour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerPourInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerPourInfo_descriptor_;
  metadata.reflection = GamePlayerPourInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTablePourInfo::kPourInfoFieldNumber;
#endif  // !_MSC_VER

GameTablePourInfo::GameTablePourInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameTablePourInfo::InitAsDefaultInstance() {
}

GameTablePourInfo::GameTablePourInfo(const GameTablePourInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameTablePourInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTablePourInfo::~GameTablePourInfo() {
  SharedDtor();
}

void GameTablePourInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTablePourInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTablePourInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTablePourInfo_descriptor_;
}

const GameTablePourInfo& GameTablePourInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcommon_2eproto();
  return *default_instance_;
}

GameTablePourInfo* GameTablePourInfo::default_instance_ = NULL;

GameTablePourInfo* GameTablePourInfo::New() const {
  return new GameTablePourInfo;
}

void GameTablePourInfo::Clear() {
  pour_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTablePourInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GamePlayerPourInfo pour_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pour_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pour_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pour_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameTablePourInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GamePlayerPourInfo pour_info = 1;
  for (int i = 0; i < this->pour_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pour_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameTablePourInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GamePlayerPourInfo pour_info = 1;
  for (int i = 0; i < this->pour_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pour_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameTablePourInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GamePlayerPourInfo pour_info = 1;
  total_size += 1 * this->pour_info_size();
  for (int i = 0; i < this->pour_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pour_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTablePourInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTablePourInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTablePourInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTablePourInfo::MergeFrom(const GameTablePourInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pour_info_.MergeFrom(from.pour_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTablePourInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTablePourInfo::CopyFrom(const GameTablePourInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTablePourInfo::IsInitialized() const {

  return true;
}

void GameTablePourInfo::Swap(GameTablePourInfo* other) {
  if (other != this) {
    pour_info_.Swap(&other->pour_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTablePourInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTablePourInfo_descriptor_;
  metadata.reflection = GameTablePourInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
