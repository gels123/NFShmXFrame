// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResMeta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ResMeta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* MailDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_MailDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_MailDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConstDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConstDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_NameDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_NameDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GameRoomDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GameRoomDesc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enMailID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameRoomStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ResMeta_2eproto() {
  protobuf_AddDesc_ResMeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ResMeta.proto");
  GOOGLE_CHECK(file != NULL);
  MailDesc_descriptor_ = file->message_type(0);
  static const int MailDesc_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, start_time_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, end_time_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, add_gold_),
  };
  MailDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailDesc_descriptor_,
      MailDesc::default_instance_,
      MailDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailDesc));
  Sheet_MailDesc_descriptor_ = file->message_type(1);
  static const int Sheet_MailDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MailDesc, maildesc_list_),
  };
  Sheet_MailDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_MailDesc_descriptor_,
      Sheet_MailDesc::default_instance_,
      Sheet_MailDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MailDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_MailDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_MailDesc));
  ConstDesc_descriptor_ = file->message_type(2);
  static const int ConstDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, type_name_),
  };
  ConstDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstDesc_descriptor_,
      ConstDesc::default_instance_,
      ConstDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstDesc));
  Sheet_ConstDesc_descriptor_ = file->message_type(3);
  static const int Sheet_ConstDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConstDesc, constdesc_list_),
  };
  Sheet_ConstDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConstDesc_descriptor_,
      Sheet_ConstDesc::default_instance_,
      Sheet_ConstDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConstDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConstDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConstDesc));
  NameDesc_descriptor_ = file->message_type(4);
  static const int NameDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, name_),
  };
  NameDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameDesc_descriptor_,
      NameDesc::default_instance_,
      NameDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameDesc));
  Sheet_NameDesc_descriptor_ = file->message_type(5);
  static const int Sheet_NameDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NameDesc, namedesc_list_),
  };
  Sheet_NameDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_NameDesc_descriptor_,
      Sheet_NameDesc::default_instance_,
      Sheet_NameDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NameDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_NameDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_NameDesc));
  GameRoomDesc_descriptor_ = file->message_type(6);
  static const int GameRoomDesc_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, sitenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, deskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, maxpeople_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, enter_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, enter_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, auto_chair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, is_exp_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, exp_scene_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, robot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, roomlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, starttime_),
  };
  GameRoomDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomDesc_descriptor_,
      GameRoomDesc::default_instance_,
      GameRoomDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomDesc));
  Sheet_GameRoomDesc_descriptor_ = file->message_type(7);
  static const int Sheet_GameRoomDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GameRoomDesc, gameroomdesc_list_),
  };
  Sheet_GameRoomDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GameRoomDesc_descriptor_,
      Sheet_GameRoomDesc::default_instance_,
      Sheet_GameRoomDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GameRoomDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GameRoomDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GameRoomDesc));
  enMailID_descriptor_ = file->enum_type(0);
  GameRoomStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ResMeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailDesc_descriptor_, &MailDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_MailDesc_descriptor_, &Sheet_MailDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstDesc_descriptor_, &ConstDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConstDesc_descriptor_, &Sheet_ConstDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameDesc_descriptor_, &NameDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_NameDesc_descriptor_, &Sheet_NameDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomDesc_descriptor_, &GameRoomDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GameRoomDesc_descriptor_, &Sheet_GameRoomDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ResMeta_2eproto() {
  delete MailDesc::default_instance_;
  delete MailDesc_reflection_;
  delete Sheet_MailDesc::default_instance_;
  delete Sheet_MailDesc_reflection_;
  delete ConstDesc::default_instance_;
  delete ConstDesc_reflection_;
  delete Sheet_ConstDesc::default_instance_;
  delete Sheet_ConstDesc_reflection_;
  delete NameDesc::default_instance_;
  delete NameDesc_reflection_;
  delete Sheet_NameDesc::default_instance_;
  delete Sheet_NameDesc_reflection_;
  delete GameRoomDesc::default_instance_;
  delete GameRoomDesc_reflection_;
  delete Sheet_GameRoomDesc::default_instance_;
  delete Sheet_GameRoomDesc_reflection_;
}

void protobuf_AddDesc_ResMeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rResMeta.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\022proto_common.proto\"\254\003\n\010MailDes"
    "c\022\"\n\002id\030\001 \002(\005B\026\272\304\023\006\347\274\226\345\217\267\300\202\024\002\230\304\023\001\250\304\023\001\022!\n"
    "\005title\030\002 \001(\tB\022\272\304\023\006\346\240\207\351\242\230\220\301\024@\310\202\024@\022\030\n\004type"
    "\030\003 \002(\005B\n\272\304\023\006\347\261\273\345\236\213\022%\n\007content\030\004 \001(\tB\024\272\304\023"
    "\006\345\206\205\345\256\271\220\301\024\200\004\310\202\024\200\004\022(\n\tsend_name\030\005 \001(\tB\025\272\304"
    "\023\t\345\217\221\344\273\266\344\272\272\220\301\024 \310\202\024 \0220\n\016start_time_str\030\006 "
    "\001(\tB\030\272\304\023\014\347\224\237\346\225\210\346\227\266\351\227\264\220\301\024 \310\202\024 \022.\n\014end_tim"
    "e_str\030\007 \001(\tB\030\272\304\023\014\347\273\223\346\235\237\346\227\266\351\227\264\220\301\024 \310\202\024 \0224\n"
    "\nstart_time\030\010 \001(\004B \272\304\023\030\347\224\237\346\225\210\346\227\266\351\227\264--197"
    "0\350\256\241\347\256\227\260\304\023\001\0222\n\010end_time\030\t \001(\004B \272\304\023\030\347\273\223\346\235"
    "\237\346\227\266\351\227\264--1970\350\256\241\347\256\227\260\304\023\001\022\"\n\010add_gold\030\013 \001("
    "\005B\020\272\304\023\014\350\265\240\351\200\201\351\207\221\345\270\201\"B\n\016Sheet_MailDesc\0220\n"
    "\rMailDesc_List\030\001 \003(\0132\022.proto_ff.MailDesc"
    "B\005\210\301\024\310\001\"\254\001\n\tConstDesc\022,\n\002id\030\001 \001(\005B \302\377\024\006\347"
    "\274\226\345\217\267\272\304\023\006\347\274\226\345\217\267\300\202\024\002\230\304\023\001\250\304\023\001\0223\n\005value\030\002 \001"
    "(\tB$\302\377\024\t\345\270\270\351\207\217\345\200\274\272\304\023\t\345\270\270\351\207\217\345\200\274\220\301\024\200\001\310\202\024\200\001"
    "\022<\n\ttype_name\030\003 \001(\tB)\302\377\024\014\347\261\273\345\236\213\345\220\215\347\247\260\272\304\023"
    "\014\347\261\273\345\236\213\345\220\215\347\247\260\230\301\024\001\310\202\024\200\001\"D\n\017Sheet_ConstDes"
    "c\0221\n\016ConstDesc_List\030\001 \003(\0132\023.proto_ff.Con"
    "stDescB\004\210\301\024d\"h\n\010NameDesc\022,\n\002id\030\001 \001(\004B \302\377"
    "\024\006\347\274\226\345\217\267\272\304\023\006\347\274\226\345\217\267\300\202\024\002\230\304\023\001\250\304\023\001\022.\n\004name\030\002"
    " \001(\tB \302\377\024\006\345\220\215\345\255\227\272\304\023\006\345\220\215\345\255\227\300\202\024\003\220\301\024@\310\202\024@\"A"
    "\n\016Sheet_NameDesc\022/\n\rNameDesc_List\030\001 \003(\0132"
    "\022.proto_ff.NameDescB\004\210\301\024d\"\243\006\n\014GameRoomDe"
    "sc\022 \n\006RoomID\030\001 \001(\005B\020\300\202\024\002\272\304\023\010\346\210\277\351\227\264ID\022\034\n\006"
    "GameID\030\002 \001(\005B\014\272\304\023\010\346\270\270\346\210\217ID\022)\n\010GameName\030\003"
    " \001(\tB\027\220\301\024\200\001\310\202\024\200\001\272\304\023\t\346\270\270\346\210\217\345\220\215\022\"\n\010RoomTyp"
    "e\030\004 \001(\005B\020\272\304\023\014\346\210\277\351\227\264\347\261\273\345\236\213\022)\n\010RoomName\030\005 "
    "\001(\tB\027\220\301\024\200\001\310\202\024\200\001\272\304\023\t\346\210\277\351\227\264\345\220\215\022\036\n\007SiteNum\030"
    "\006 \001(\005B\r\272\304\023\t\345\272\247\344\275\215\346\225\260\022 \n\tDeskCount\030\007 \001(\005B"
    "\r\272\304\023\t\346\241\214\345\255\220\346\225\260\022&\n\tMaxPeople\030\010 \001(\005B\023\272\304\023\017\346"
    "\234\200\345\244\247\347\216\251\345\256\266\346\225\260\022#\n\tenter_min\030\t \001(\003B\020\272\304\023\014\346"
    "\234\200\345\260\217\347\255\271\347\240\201\022#\n\tenter_max\030\n \001(\003B\020\272\304\023\014\346\234\200\345"
    "\244\247\347\255\271\347\240\201\0229\n\nauto_chair\030\013 \001(\005B%\272\304\023!\351\200\211\344\275\215"
    "\347\275\256:0=\347\263\273\347\273\237\351\200\211,1=\346\211\213\345\212\250\351\200\211\022;\n\014is_exp_sc"
    "ene\030\014 \001(\005B%\272\304\023!\344\275\223\351\252\214\345\234\272:0=\351\207\221\345\270\201\345\234\272,1=\344"
    "\275\223\351\252\214\345\234\272\022+\n\016exp_scene_gold\030\r \001(\003B\023\272\304\023\017\344\275"
    "\223\351\252\214\345\234\272\351\207\221\345\270\201\022#\n\trobot_num\030\016 \001(\005B\020\272\304\023\014\346\234"
    "\272\345\231\250\344\272\272\346\225\260\022u\n\006status\030\017 \001(\005Be\272\304\023a\346\270\270\346\210\217\345\274"
    "\200\345\205\263\357\274\2321 \345\274\200\345\220\257 2 \345\205\263\351\227\255\346\270\270\346\210\217\350\277\220\350\241\214 3\345\205"
    "\263\351\227\255\346\270\270\346\210\217\344\271\237\344\270\215\350\277\220\350\241\214 4.\346\225\254\350\257\267\346\234\237\345\276\205 5 "
    "\344\270\215\345\217\257\350\247\201\022#\n\tRoomLevel\030\020 \001(\005B\020\272\304\023\014\346\210\277\351\227\264"
    "\347\255\211\347\272\247\022\032\n\003Tax\030\021 \001(\005B\r\272\304\023\t\346\212\275\346\260\264\347\216\207\022#\n\tSt"
    "artTime\030\022 \001(\005B\020\272\304\023\014\345\274\200\345\220\257\346\227\266\351\227\264\"M\n\022Sheet"
    "_GameRoomDesc\0227\n\021GameRoomDesc_List\030\001 \003(\013"
    "2\026.proto_ff.GameRoomDescB\004\210\301\024d*\037\n\010enMail"
    "ID\022\023\n\017EN_MAIL_ID_TEST\020\001*\260\001\n\016GameRoomStat"
    "us\022\031\n\025GAME_ROOM_STATUS_OPEN\020\001\022\"\n\036GAME_RO"
    "OM_STATUS_CLOSE_AND_EXE\020\002\022&\n\"GAME_ROOM_S"
    "TATUS_CLOSE_AND_NOT_EXE\020\003\022\031\n\025GAME_ROOM_S"
    "TATUS_WAIT\020\004\022\034\n\030GAME_ROOM_STATUS_NOT_SEE"
    "\020\005", 2082);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ResMeta.proto", &protobuf_RegisterTypes);
  MailDesc::default_instance_ = new MailDesc();
  Sheet_MailDesc::default_instance_ = new Sheet_MailDesc();
  ConstDesc::default_instance_ = new ConstDesc();
  Sheet_ConstDesc::default_instance_ = new Sheet_ConstDesc();
  NameDesc::default_instance_ = new NameDesc();
  Sheet_NameDesc::default_instance_ = new Sheet_NameDesc();
  GameRoomDesc::default_instance_ = new GameRoomDesc();
  Sheet_GameRoomDesc::default_instance_ = new Sheet_GameRoomDesc();
  MailDesc::default_instance_->InitAsDefaultInstance();
  Sheet_MailDesc::default_instance_->InitAsDefaultInstance();
  ConstDesc::default_instance_->InitAsDefaultInstance();
  Sheet_ConstDesc::default_instance_->InitAsDefaultInstance();
  NameDesc::default_instance_->InitAsDefaultInstance();
  Sheet_NameDesc::default_instance_->InitAsDefaultInstance();
  GameRoomDesc::default_instance_->InitAsDefaultInstance();
  Sheet_GameRoomDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ResMeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ResMeta_2eproto {
  StaticDescriptorInitializer_ResMeta_2eproto() {
    protobuf_AddDesc_ResMeta_2eproto();
  }
} static_descriptor_initializer_ResMeta_2eproto_;
const ::google::protobuf::EnumDescriptor* enMailID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enMailID_descriptor_;
}
bool enMailID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameRoomStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomStatus_descriptor_;
}
bool GameRoomStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MailDesc::kIdFieldNumber;
const int MailDesc::kTitleFieldNumber;
const int MailDesc::kTypeFieldNumber;
const int MailDesc::kContentFieldNumber;
const int MailDesc::kSendNameFieldNumber;
const int MailDesc::kStartTimeStrFieldNumber;
const int MailDesc::kEndTimeStrFieldNumber;
const int MailDesc::kStartTimeFieldNumber;
const int MailDesc::kEndTimeFieldNumber;
const int MailDesc::kAddGoldFieldNumber;
#endif  // !_MSC_VER

MailDesc::MailDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailDesc::InitAsDefaultInstance() {
}

MailDesc::MailDesc(const MailDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_time_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  add_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailDesc::~MailDesc() {
  SharedDtor();
}

void MailDesc::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (start_time_str_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_str_;
  }
  if (end_time_str_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_str_;
  }
  if (this != default_instance_) {
  }
}

void MailDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailDesc_descriptor_;
}

const MailDesc& MailDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

MailDesc* MailDesc::default_instance_ = NULL;

MailDesc* MailDesc::New() const {
  return new MailDesc;
}

void MailDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    if (has_start_time_str()) {
      if (start_time_str_ != &::google::protobuf::internal::kEmptyString) {
        start_time_str_->clear();
      }
    }
    if (has_end_time_str()) {
      if (end_time_str_ != &::google::protobuf::internal::kEmptyString) {
        end_time_str_->clear();
      }
    }
    start_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_time_ = GOOGLE_ULONGLONG(0);
    add_gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_send_name;
        break;
      }

      // optional string send_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_name().data(), this->send_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_start_time_str;
        break;
      }

      // optional string start_time_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time_str().data(), this->start_time_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_end_time_str;
        break;
      }

      // optional string end_time_str = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_time_str().data(), this->end_time_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_add_gold;
        break;
      }

      // optional int32 add_gold = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_gold_)));
          set_has_add_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional string send_name = 5;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->send_name(), output);
  }

  // optional string start_time_str = 6;
  if (has_start_time_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time_str().data(), this->start_time_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->start_time_str(), output);
  }

  // optional string end_time_str = 7;
  if (has_end_time_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time_str().data(), this->end_time_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->end_time_str(), output);
  }

  // optional uint64 start_time = 8;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->start_time(), output);
  }

  // optional uint64 end_time = 9;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->end_time(), output);
  }

  // optional int32 add_gold = 11;
  if (has_add_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->add_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional string send_name = 5;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->send_name(), target);
  }

  // optional string start_time_str = 6;
  if (has_start_time_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time_str().data(), this->start_time_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->start_time_str(), target);
  }

  // optional string end_time_str = 7;
  if (has_end_time_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time_str().data(), this->end_time_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->end_time_str(), target);
  }

  // optional uint64 start_time = 8;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->start_time(), target);
  }

  // optional uint64 end_time = 9;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->end_time(), target);
  }

  // optional int32 add_gold = 11;
  if (has_add_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->add_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string send_name = 5;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_name());
    }

    // optional string start_time_str = 6;
    if (has_start_time_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time_str());
    }

    // optional string end_time_str = 7;
    if (has_end_time_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time_str());
    }

    // optional uint64 start_time = 8;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 end_time = 9;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional int32 add_gold = 11;
    if (has_add_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailDesc::MergeFrom(const MailDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_start_time_str()) {
      set_start_time_str(from.start_time_str());
    }
    if (from.has_end_time_str()) {
      set_end_time_str(from.end_time_str());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_add_gold()) {
      set_add_gold(from.add_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailDesc::CopyFrom(const MailDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void MailDesc::Swap(MailDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(send_name_, other->send_name_);
    std::swap(start_time_str_, other->start_time_str_);
    std::swap(end_time_str_, other->end_time_str_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(add_gold_, other->add_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailDesc_descriptor_;
  metadata.reflection = MailDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_MailDesc::kMailDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_MailDesc::Sheet_MailDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_MailDesc::InitAsDefaultInstance() {
}

Sheet_MailDesc::Sheet_MailDesc(const Sheet_MailDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_MailDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_MailDesc::~Sheet_MailDesc() {
  SharedDtor();
}

void Sheet_MailDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_MailDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_MailDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_MailDesc_descriptor_;
}

const Sheet_MailDesc& Sheet_MailDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

Sheet_MailDesc* Sheet_MailDesc::default_instance_ = NULL;

Sheet_MailDesc* Sheet_MailDesc::New() const {
  return new Sheet_MailDesc;
}

void Sheet_MailDesc::Clear() {
  maildesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_MailDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MailDesc MailDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maildesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MailDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_MailDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MailDesc MailDesc_List = 1;
  for (int i = 0; i < this->maildesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maildesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_MailDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MailDesc MailDesc_List = 1;
  for (int i = 0; i < this->maildesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maildesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_MailDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MailDesc MailDesc_List = 1;
  total_size += 1 * this->maildesc_list_size();
  for (int i = 0; i < this->maildesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maildesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_MailDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_MailDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_MailDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_MailDesc::MergeFrom(const Sheet_MailDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  maildesc_list_.MergeFrom(from.maildesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_MailDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_MailDesc::CopyFrom(const Sheet_MailDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_MailDesc::IsInitialized() const {

  for (int i = 0; i < maildesc_list_size(); i++) {
    if (!this->maildesc_list(i).IsInitialized()) return false;
  }
  return true;
}

void Sheet_MailDesc::Swap(Sheet_MailDesc* other) {
  if (other != this) {
    maildesc_list_.Swap(&other->maildesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_MailDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_MailDesc_descriptor_;
  metadata.reflection = Sheet_MailDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConstDesc::kIdFieldNumber;
const int ConstDesc::kValueFieldNumber;
const int ConstDesc::kTypeNameFieldNumber;
#endif  // !_MSC_VER

ConstDesc::ConstDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConstDesc::InitAsDefaultInstance() {
}

ConstDesc::ConstDesc(const ConstDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConstDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstDesc::~ConstDesc() {
  SharedDtor();
}

void ConstDesc::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (type_name_ != &::google::protobuf::internal::kEmptyString) {
    delete type_name_;
  }
  if (this != default_instance_) {
  }
}

void ConstDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstDesc_descriptor_;
}

const ConstDesc& ConstDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

ConstDesc* ConstDesc::default_instance_ = NULL;

ConstDesc* ConstDesc::New() const {
  return new ConstDesc;
}

void ConstDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::kEmptyString) {
        type_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConstDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type_name;
        break;
      }

      // optional string type_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConstDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConstDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string type_name = 3;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConstDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string type_name = 3;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstDesc::MergeFrom(const ConstDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConstDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstDesc::CopyFrom(const ConstDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstDesc::IsInitialized() const {

  return true;
}

void ConstDesc::Swap(ConstDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(type_name_, other->type_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConstDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstDesc_descriptor_;
  metadata.reflection = ConstDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConstDesc::kConstDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConstDesc::Sheet_ConstDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConstDesc::InitAsDefaultInstance() {
}

Sheet_ConstDesc::Sheet_ConstDesc(const Sheet_ConstDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConstDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConstDesc::~Sheet_ConstDesc() {
  SharedDtor();
}

void Sheet_ConstDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConstDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConstDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConstDesc_descriptor_;
}

const Sheet_ConstDesc& Sheet_ConstDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

Sheet_ConstDesc* Sheet_ConstDesc::default_instance_ = NULL;

Sheet_ConstDesc* Sheet_ConstDesc::New() const {
  return new Sheet_ConstDesc;
}

void Sheet_ConstDesc::Clear() {
  constdesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConstDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constdesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ConstDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConstDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
  for (int i = 0; i < this->constdesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->constdesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConstDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
  for (int i = 0; i < this->constdesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->constdesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConstDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ConstDesc ConstDesc_List = 1;
  total_size += 1 * this->constdesc_list_size();
  for (int i = 0; i < this->constdesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constdesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConstDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConstDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConstDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConstDesc::MergeFrom(const Sheet_ConstDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  constdesc_list_.MergeFrom(from.constdesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConstDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConstDesc::CopyFrom(const Sheet_ConstDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConstDesc::IsInitialized() const {

  return true;
}

void Sheet_ConstDesc::Swap(Sheet_ConstDesc* other) {
  if (other != this) {
    constdesc_list_.Swap(&other->constdesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConstDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConstDesc_descriptor_;
  metadata.reflection = Sheet_ConstDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NameDesc::kIdFieldNumber;
const int NameDesc::kNameFieldNumber;
#endif  // !_MSC_VER

NameDesc::NameDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameDesc::InitAsDefaultInstance() {
}

NameDesc::NameDesc(const NameDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameDesc::~NameDesc() {
  SharedDtor();
}

void NameDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NameDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameDesc_descriptor_;
}

const NameDesc& NameDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

NameDesc* NameDesc::default_instance_ = NULL;

NameDesc* NameDesc::New() const {
  return new NameDesc;
}

void NameDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameDesc::MergeFrom(const NameDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameDesc::CopyFrom(const NameDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameDesc::IsInitialized() const {

  return true;
}

void NameDesc::Swap(NameDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameDesc_descriptor_;
  metadata.reflection = NameDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_NameDesc::kNameDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_NameDesc::Sheet_NameDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_NameDesc::InitAsDefaultInstance() {
}

Sheet_NameDesc::Sheet_NameDesc(const Sheet_NameDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_NameDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_NameDesc::~Sheet_NameDesc() {
  SharedDtor();
}

void Sheet_NameDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_NameDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_NameDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_NameDesc_descriptor_;
}

const Sheet_NameDesc& Sheet_NameDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

Sheet_NameDesc* Sheet_NameDesc::default_instance_ = NULL;

Sheet_NameDesc* Sheet_NameDesc::New() const {
  return new Sheet_NameDesc;
}

void Sheet_NameDesc::Clear() {
  namedesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_NameDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.NameDesc NameDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NameDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_namedesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_NameDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_NameDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.NameDesc NameDesc_List = 1;
  for (int i = 0; i < this->namedesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->namedesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_NameDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.NameDesc NameDesc_List = 1;
  for (int i = 0; i < this->namedesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->namedesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_NameDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.NameDesc NameDesc_List = 1;
  total_size += 1 * this->namedesc_list_size();
  for (int i = 0; i < this->namedesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->namedesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_NameDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_NameDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_NameDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_NameDesc::MergeFrom(const Sheet_NameDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  namedesc_list_.MergeFrom(from.namedesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_NameDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_NameDesc::CopyFrom(const Sheet_NameDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_NameDesc::IsInitialized() const {

  return true;
}

void Sheet_NameDesc::Swap(Sheet_NameDesc* other) {
  if (other != this) {
    namedesc_list_.Swap(&other->namedesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_NameDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_NameDesc_descriptor_;
  metadata.reflection = Sheet_NameDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomDesc::kRoomIDFieldNumber;
const int GameRoomDesc::kGameIDFieldNumber;
const int GameRoomDesc::kGameNameFieldNumber;
const int GameRoomDesc::kRoomTypeFieldNumber;
const int GameRoomDesc::kRoomNameFieldNumber;
const int GameRoomDesc::kSiteNumFieldNumber;
const int GameRoomDesc::kDeskCountFieldNumber;
const int GameRoomDesc::kMaxPeopleFieldNumber;
const int GameRoomDesc::kEnterMinFieldNumber;
const int GameRoomDesc::kEnterMaxFieldNumber;
const int GameRoomDesc::kAutoChairFieldNumber;
const int GameRoomDesc::kIsExpSceneFieldNumber;
const int GameRoomDesc::kExpSceneGoldFieldNumber;
const int GameRoomDesc::kRobotNumFieldNumber;
const int GameRoomDesc::kStatusFieldNumber;
const int GameRoomDesc::kRoomLevelFieldNumber;
const int GameRoomDesc::kTaxFieldNumber;
const int GameRoomDesc::kStartTimeFieldNumber;
#endif  // !_MSC_VER

GameRoomDesc::GameRoomDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomDesc::InitAsDefaultInstance() {
}

GameRoomDesc::GameRoomDesc(const GameRoomDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomDesc::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  gameid_ = 0;
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roomtype_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sitenum_ = 0;
  deskcount_ = 0;
  maxpeople_ = 0;
  enter_min_ = GOOGLE_LONGLONG(0);
  enter_max_ = GOOGLE_LONGLONG(0);
  auto_chair_ = 0;
  is_exp_scene_ = 0;
  exp_scene_gold_ = GOOGLE_LONGLONG(0);
  robot_num_ = 0;
  status_ = 0;
  roomlevel_ = 0;
  tax_ = 0;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomDesc::~GameRoomDesc() {
  SharedDtor();
}

void GameRoomDesc::SharedDtor() {
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete gamename_;
  }
  if (roomname_ != &::google::protobuf::internal::kEmptyString) {
    delete roomname_;
  }
  if (this != default_instance_) {
  }
}

void GameRoomDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomDesc_descriptor_;
}

const GameRoomDesc& GameRoomDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

GameRoomDesc* GameRoomDesc::default_instance_ = NULL;

GameRoomDesc* GameRoomDesc::New() const {
  return new GameRoomDesc;
}

void GameRoomDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    gameid_ = 0;
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::kEmptyString) {
        gamename_->clear();
      }
    }
    roomtype_ = 0;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::kEmptyString) {
        roomname_->clear();
      }
    }
    sitenum_ = 0;
    deskcount_ = 0;
    maxpeople_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enter_min_ = GOOGLE_LONGLONG(0);
    enter_max_ = GOOGLE_LONGLONG(0);
    auto_chair_ = 0;
    is_exp_scene_ = 0;
    exp_scene_gold_ = GOOGLE_LONGLONG(0);
    robot_num_ = 0;
    status_ = 0;
    roomlevel_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    tax_ = 0;
    starttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GameID;
        break;
      }

      // optional int32 GameID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GameName;
        break;
      }

      // optional string GameName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RoomType;
        break;
      }

      // optional int32 RoomType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoomName;
        break;
      }

      // optional string RoomName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SiteNum;
        break;
      }

      // optional int32 SiteNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SiteNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sitenum_)));
          set_has_sitenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DeskCount;
        break;
      }

      // optional int32 DeskCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MaxPeople;
        break;
      }

      // optional int32 MaxPeople = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxPeople:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpeople_)));
          set_has_maxpeople();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_enter_min;
        break;
      }

      // optional int64 enter_min = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enter_min_)));
          set_has_enter_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_enter_max;
        break;
      }

      // optional int64 enter_max = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enter_max_)));
          set_has_enter_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_auto_chair;
        break;
      }

      // optional int32 auto_chair = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_chair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_chair_)));
          set_has_auto_chair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_exp_scene;
        break;
      }

      // optional int32 is_exp_scene = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_exp_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_exp_scene_)));
          set_has_is_exp_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_exp_scene_gold;
        break;
      }

      // optional int64 exp_scene_gold = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_scene_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_scene_gold_)));
          set_has_exp_scene_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_robot_num;
        break;
      }

      // optional int32 robot_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_num_)));
          set_has_robot_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_status;
        break;
      }

      // optional int32 status = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_RoomLevel;
        break;
      }

      // optional int32 RoomLevel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomlevel_)));
          set_has_roomlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_Tax;
        break;
      }

      // optional int32 Tax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_StartTime;
        break;
      }

      // optional int32 StartTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 GameID = 2;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameid(), output);
  }

  // optional string GameName = 3;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gamename(), output);
  }

  // optional int32 RoomType = 4;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->roomtype(), output);
  }

  // optional string RoomName = 5;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->roomname(), output);
  }

  // optional int32 SiteNum = 6;
  if (has_sitenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sitenum(), output);
  }

  // optional int32 DeskCount = 7;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->deskcount(), output);
  }

  // optional int32 MaxPeople = 8;
  if (has_maxpeople()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxpeople(), output);
  }

  // optional int64 enter_min = 9;
  if (has_enter_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->enter_min(), output);
  }

  // optional int64 enter_max = 10;
  if (has_enter_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->enter_max(), output);
  }

  // optional int32 auto_chair = 11;
  if (has_auto_chair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->auto_chair(), output);
  }

  // optional int32 is_exp_scene = 12;
  if (has_is_exp_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_exp_scene(), output);
  }

  // optional int64 exp_scene_gold = 13;
  if (has_exp_scene_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->exp_scene_gold(), output);
  }

  // optional int32 robot_num = 14;
  if (has_robot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->robot_num(), output);
  }

  // optional int32 status = 15;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->status(), output);
  }

  // optional int32 RoomLevel = 16;
  if (has_roomlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->roomlevel(), output);
  }

  // optional int32 Tax = 17;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tax(), output);
  }

  // optional int32 StartTime = 18;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 GameID = 2;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameid(), target);
  }

  // optional string GameName = 3;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamename(), target);
  }

  // optional int32 RoomType = 4;
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->roomtype(), target);
  }

  // optional string RoomName = 5;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->roomname(), target);
  }

  // optional int32 SiteNum = 6;
  if (has_sitenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sitenum(), target);
  }

  // optional int32 DeskCount = 7;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->deskcount(), target);
  }

  // optional int32 MaxPeople = 8;
  if (has_maxpeople()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxpeople(), target);
  }

  // optional int64 enter_min = 9;
  if (has_enter_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->enter_min(), target);
  }

  // optional int64 enter_max = 10;
  if (has_enter_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->enter_max(), target);
  }

  // optional int32 auto_chair = 11;
  if (has_auto_chair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->auto_chair(), target);
  }

  // optional int32 is_exp_scene = 12;
  if (has_is_exp_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_exp_scene(), target);
  }

  // optional int64 exp_scene_gold = 13;
  if (has_exp_scene_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->exp_scene_gold(), target);
  }

  // optional int32 robot_num = 14;
  if (has_robot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->robot_num(), target);
  }

  // optional int32 status = 15;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->status(), target);
  }

  // optional int32 RoomLevel = 16;
  if (has_roomlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->roomlevel(), target);
  }

  // optional int32 Tax = 17;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tax(), target);
  }

  // optional int32 StartTime = 18;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 GameID = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional string GameName = 3;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }

    // optional int32 RoomType = 4;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // optional string RoomName = 5;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional int32 SiteNum = 6;
    if (has_sitenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sitenum());
    }

    // optional int32 DeskCount = 7;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

    // optional int32 MaxPeople = 8;
    if (has_maxpeople()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpeople());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 enter_min = 9;
    if (has_enter_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enter_min());
    }

    // optional int64 enter_max = 10;
    if (has_enter_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enter_max());
    }

    // optional int32 auto_chair = 11;
    if (has_auto_chair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_chair());
    }

    // optional int32 is_exp_scene = 12;
    if (has_is_exp_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_exp_scene());
    }

    // optional int64 exp_scene_gold = 13;
    if (has_exp_scene_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp_scene_gold());
    }

    // optional int32 robot_num = 14;
    if (has_robot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_num());
    }

    // optional int32 status = 15;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 RoomLevel = 16;
    if (has_roomlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomlevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 Tax = 17;
    if (has_tax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // optional int32 StartTime = 18;
    if (has_starttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomDesc::MergeFrom(const GameRoomDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_sitenum()) {
      set_sitenum(from.sitenum());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
    if (from.has_maxpeople()) {
      set_maxpeople(from.maxpeople());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enter_min()) {
      set_enter_min(from.enter_min());
    }
    if (from.has_enter_max()) {
      set_enter_max(from.enter_max());
    }
    if (from.has_auto_chair()) {
      set_auto_chair(from.auto_chair());
    }
    if (from.has_is_exp_scene()) {
      set_is_exp_scene(from.is_exp_scene());
    }
    if (from.has_exp_scene_gold()) {
      set_exp_scene_gold(from.exp_scene_gold());
    }
    if (from.has_robot_num()) {
      set_robot_num(from.robot_num());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_roomlevel()) {
      set_roomlevel(from.roomlevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomDesc::CopyFrom(const GameRoomDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomDesc::IsInitialized() const {

  return true;
}

void GameRoomDesc::Swap(GameRoomDesc* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(gameid_, other->gameid_);
    std::swap(gamename_, other->gamename_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomname_, other->roomname_);
    std::swap(sitenum_, other->sitenum_);
    std::swap(deskcount_, other->deskcount_);
    std::swap(maxpeople_, other->maxpeople_);
    std::swap(enter_min_, other->enter_min_);
    std::swap(enter_max_, other->enter_max_);
    std::swap(auto_chair_, other->auto_chair_);
    std::swap(is_exp_scene_, other->is_exp_scene_);
    std::swap(exp_scene_gold_, other->exp_scene_gold_);
    std::swap(robot_num_, other->robot_num_);
    std::swap(status_, other->status_);
    std::swap(roomlevel_, other->roomlevel_);
    std::swap(tax_, other->tax_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomDesc_descriptor_;
  metadata.reflection = GameRoomDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GameRoomDesc::kGameRoomDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_GameRoomDesc::Sheet_GameRoomDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GameRoomDesc::InitAsDefaultInstance() {
}

Sheet_GameRoomDesc::Sheet_GameRoomDesc(const Sheet_GameRoomDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GameRoomDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GameRoomDesc::~Sheet_GameRoomDesc() {
  SharedDtor();
}

void Sheet_GameRoomDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GameRoomDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GameRoomDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GameRoomDesc_descriptor_;
}

const Sheet_GameRoomDesc& Sheet_GameRoomDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResMeta_2eproto();
  return *default_instance_;
}

Sheet_GameRoomDesc* Sheet_GameRoomDesc::default_instance_ = NULL;

Sheet_GameRoomDesc* Sheet_GameRoomDesc::New() const {
  return new Sheet_GameRoomDesc;
}

void Sheet_GameRoomDesc::Clear() {
  gameroomdesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GameRoomDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GameRoomDesc GameRoomDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameRoomDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameroomdesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GameRoomDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GameRoomDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GameRoomDesc GameRoomDesc_List = 1;
  for (int i = 0; i < this->gameroomdesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gameroomdesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GameRoomDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GameRoomDesc GameRoomDesc_List = 1;
  for (int i = 0; i < this->gameroomdesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gameroomdesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GameRoomDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GameRoomDesc GameRoomDesc_List = 1;
  total_size += 1 * this->gameroomdesc_list_size();
  for (int i = 0; i < this->gameroomdesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameroomdesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GameRoomDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GameRoomDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GameRoomDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GameRoomDesc::MergeFrom(const Sheet_GameRoomDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameroomdesc_list_.MergeFrom(from.gameroomdesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GameRoomDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GameRoomDesc::CopyFrom(const Sheet_GameRoomDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GameRoomDesc::IsInitialized() const {

  return true;
}

void Sheet_GameRoomDesc::Swap(Sheet_GameRoomDesc* other) {
  if (other != this) {
    gameroomdesc_list_.Swap(&other->gameroomdesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GameRoomDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GameRoomDesc_descriptor_;
  metadata.reflection = Sheet_GameRoomDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
