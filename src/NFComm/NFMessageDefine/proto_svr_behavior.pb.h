// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_behavior.proto

#ifndef PROTOBUF_proto_5fsvr_5fbehavior_2eproto__INCLUDED
#define PROTOBUF_proto_5fsvr_5fbehavior_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "proto_common.pb.h"
#include "proto_kernel.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fsvr_5fbehavior_2eproto();
void protobuf_AssignDesc_proto_5fsvr_5fbehavior_2eproto();
void protobuf_ShutdownFile_proto_5fsvr_5fbehavior_2eproto();

class AccountRegisterFlow;
class AccountLoginFlow;

// ===================================================================

class AccountRegisterFlow : public ::google::protobuf::Message {
 public:
  AccountRegisterFlow();
  virtual ~AccountRegisterFlow();

  AccountRegisterFlow(const AccountRegisterFlow& from);

  inline AccountRegisterFlow& operator=(const AccountRegisterFlow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountRegisterFlow& default_instance();

  void Swap(AccountRegisterFlow* other);

  // implements Message ----------------------------------------------

  AccountRegisterFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountRegisterFlow& from);
  void MergeFrom(const AccountRegisterFlow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string account = 20;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 20;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string ip = 21;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 21;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 result = 22;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 22;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.AccountRegisterFlow)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::int32 result_;
  ::std::string* user_name_;
  ::std::string* account_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fbehavior_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fbehavior_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fbehavior_2eproto();

  void InitAsDefaultInstance();
  static AccountRegisterFlow* default_instance_;
};
// -------------------------------------------------------------------

class AccountLoginFlow : public ::google::protobuf::Message {
 public:
  AccountLoginFlow();
  virtual ~AccountLoginFlow();

  AccountLoginFlow(const AccountLoginFlow& from);

  inline AccountLoginFlow& operator=(const AccountLoginFlow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountLoginFlow& default_instance();

  void Swap(AccountLoginFlow* other);

  // implements Message ----------------------------------------------

  AccountLoginFlow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountLoginFlow& from);
  void MergeFrom(const AccountLoginFlow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string account = 20;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 20;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string ip = 21;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 21;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 result = 22;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 22;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.AccountLoginFlow)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::int32 result_;
  ::std::string* user_name_;
  ::std::string* account_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fbehavior_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fbehavior_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fbehavior_2eproto();

  void InitAsDefaultInstance();
  static AccountLoginFlow* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountRegisterFlow

// optional uint64 event_id = 1;
inline bool AccountRegisterFlow::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountRegisterFlow::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountRegisterFlow::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountRegisterFlow::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 AccountRegisterFlow::event_id() const {
  return event_id_;
}
inline void AccountRegisterFlow::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool AccountRegisterFlow::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountRegisterFlow::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountRegisterFlow::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountRegisterFlow::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 AccountRegisterFlow::sequence() const {
  return sequence_;
}
inline void AccountRegisterFlow::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool AccountRegisterFlow::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountRegisterFlow::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountRegisterFlow::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountRegisterFlow::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& AccountRegisterFlow::bus_name() const {
  return *bus_name_;
}
inline void AccountRegisterFlow::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void AccountRegisterFlow::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void AccountRegisterFlow::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRegisterFlow::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* AccountRegisterFlow::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRegisterFlow::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool AccountRegisterFlow::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountRegisterFlow::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountRegisterFlow::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountRegisterFlow::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& AccountRegisterFlow::event_time() const {
  return *event_time_;
}
inline void AccountRegisterFlow::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void AccountRegisterFlow::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void AccountRegisterFlow::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRegisterFlow::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* AccountRegisterFlow::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRegisterFlow::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool AccountRegisterFlow::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountRegisterFlow::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountRegisterFlow::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountRegisterFlow::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 AccountRegisterFlow::user_id() const {
  return user_id_;
}
inline void AccountRegisterFlow::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool AccountRegisterFlow::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountRegisterFlow::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountRegisterFlow::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountRegisterFlow::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& AccountRegisterFlow::user_name() const {
  return *user_name_;
}
inline void AccountRegisterFlow::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void AccountRegisterFlow::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void AccountRegisterFlow::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRegisterFlow::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* AccountRegisterFlow::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRegisterFlow::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string account = 20;
inline bool AccountRegisterFlow::has_account() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountRegisterFlow::set_has_account() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountRegisterFlow::clear_has_account() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountRegisterFlow::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountRegisterFlow::account() const {
  return *account_;
}
inline void AccountRegisterFlow::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountRegisterFlow::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountRegisterFlow::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRegisterFlow::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* AccountRegisterFlow::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRegisterFlow::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 21;
inline bool AccountRegisterFlow::has_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountRegisterFlow::set_has_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountRegisterFlow::clear_has_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountRegisterFlow::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AccountRegisterFlow::ip() const {
  return *ip_;
}
inline void AccountRegisterFlow::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AccountRegisterFlow::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AccountRegisterFlow::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountRegisterFlow::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* AccountRegisterFlow::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountRegisterFlow::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 result = 22;
inline bool AccountRegisterFlow::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountRegisterFlow::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountRegisterFlow::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountRegisterFlow::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AccountRegisterFlow::result() const {
  return result_;
}
inline void AccountRegisterFlow::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AccountLoginFlow

// optional uint64 event_id = 1;
inline bool AccountLoginFlow::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountLoginFlow::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountLoginFlow::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountLoginFlow::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 AccountLoginFlow::event_id() const {
  return event_id_;
}
inline void AccountLoginFlow::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool AccountLoginFlow::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountLoginFlow::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountLoginFlow::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountLoginFlow::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 AccountLoginFlow::sequence() const {
  return sequence_;
}
inline void AccountLoginFlow::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool AccountLoginFlow::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountLoginFlow::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountLoginFlow::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountLoginFlow::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& AccountLoginFlow::bus_name() const {
  return *bus_name_;
}
inline void AccountLoginFlow::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void AccountLoginFlow::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void AccountLoginFlow::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginFlow::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* AccountLoginFlow::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginFlow::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool AccountLoginFlow::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountLoginFlow::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountLoginFlow::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountLoginFlow::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& AccountLoginFlow::event_time() const {
  return *event_time_;
}
inline void AccountLoginFlow::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void AccountLoginFlow::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void AccountLoginFlow::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginFlow::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* AccountLoginFlow::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginFlow::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool AccountLoginFlow::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountLoginFlow::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountLoginFlow::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountLoginFlow::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 AccountLoginFlow::user_id() const {
  return user_id_;
}
inline void AccountLoginFlow::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool AccountLoginFlow::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountLoginFlow::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountLoginFlow::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountLoginFlow::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& AccountLoginFlow::user_name() const {
  return *user_name_;
}
inline void AccountLoginFlow::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void AccountLoginFlow::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void AccountLoginFlow::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginFlow::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* AccountLoginFlow::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginFlow::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string account = 20;
inline bool AccountLoginFlow::has_account() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountLoginFlow::set_has_account() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountLoginFlow::clear_has_account() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountLoginFlow::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& AccountLoginFlow::account() const {
  return *account_;
}
inline void AccountLoginFlow::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountLoginFlow::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void AccountLoginFlow::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginFlow::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* AccountLoginFlow::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginFlow::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 21;
inline bool AccountLoginFlow::has_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountLoginFlow::set_has_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountLoginFlow::clear_has_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountLoginFlow::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AccountLoginFlow::ip() const {
  return *ip_;
}
inline void AccountLoginFlow::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AccountLoginFlow::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AccountLoginFlow::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountLoginFlow::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* AccountLoginFlow::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountLoginFlow::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 result = 22;
inline bool AccountLoginFlow::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountLoginFlow::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountLoginFlow::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountLoginFlow::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AccountLoginFlow::result() const {
  return result_;
}
inline void AccountLoginFlow::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fsvr_5fbehavior_2eproto__INCLUDED
