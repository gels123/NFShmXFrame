// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_common.proto

#ifndef PROTOBUF_proto_5fcommon_2eproto__INCLUDED
#define PROTOBUF_proto_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fcommon_2eproto();
void protobuf_AssignDesc_proto_5fcommon_2eproto();
void protobuf_ShutdownFile_proto_5fcommon_2eproto();

class GameServerRoomInfo;
class tbServerMgr;
class tbContractMgr;
class tbAccountTable;
class ItemData;
class SingleMailInfo;
class UserSpecialMailData;
class UserMailInfo;
class tbUserMailInfo;
class tbUserMailDetail;
class UserMailDetailInfo;
class tbGiveBankJetton;
class UserMiscData;
class tbUserDetailData;
class UserSimpleMiscData;
class tbUserSimpleData;
class GamePlayerWealthData;
class GamePlayerDetailData;
class GamePlayerAchievementData;
class UserSimpleData;
class UserBankInfo;
class tbUserMiscInfo;
class RankCommonInfo;
class RankCommonScore;
class RankCommonBody;
class tbRankCommon;
class RobotCommonData;
class RobotCommonBody;
class tbGameRobot;
class EventLogData;
class tbEventLog;
class LoginCommonData;
class LogMoneyDetail;
class LogGameRecordDetail;
class LogGameDetail;
class tbLogGameDay;
class tbGameUserManagerData;
class tbMachineManagerData;
class Sheet_tbGameUserManagerData;
class tbGmCtrlGiveCtrlData;
class Sheet_tbGmCtrlGiveCtrlData;
class LogVipRechargeRecord;
class LogZhuangRecord;
class LogRechargeOrder;
class LogGiveMoneyRecord;
class tbLogSystemDay;
class tbRedeemCode;
class LogRedeemCodeRechargeRecord;
class GameRoomStat;
class GamePlayerPourInfo;
class GameTablePourInfo;

enum Proto_AccountType {
  E_VISITOR = 0,
  E_ACCOUNT = 1,
  E_WECHAT = 2,
  E_PHONE = 3,
  E_ROBOT = 10
};
bool Proto_AccountType_IsValid(int value);
const Proto_AccountType Proto_AccountType_MIN = E_VISITOR;
const Proto_AccountType Proto_AccountType_MAX = E_ROBOT;
const int Proto_AccountType_ARRAYSIZE = Proto_AccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_AccountType_descriptor();
inline const ::std::string& Proto_AccountType_Name(Proto_AccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_AccountType_descriptor(), value);
}
inline bool Proto_AccountType_Parse(
    const ::std::string& name, Proto_AccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_AccountType>(
    Proto_AccountType_descriptor(), name, value);
}
enum Proto_SexType {
  E_MALE = 0,
  E_FEMALE = 1
};
bool Proto_SexType_IsValid(int value);
const Proto_SexType Proto_SexType_MIN = E_MALE;
const Proto_SexType Proto_SexType_MAX = E_FEMALE;
const int Proto_SexType_ARRAYSIZE = Proto_SexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_SexType_descriptor();
inline const ::std::string& Proto_SexType_Name(Proto_SexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_SexType_descriptor(), value);
}
inline bool Proto_SexType_Parse(
    const ::std::string& name, Proto_SexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_SexType>(
    Proto_SexType_descriptor(), name, value);
}
enum Proto_PlatType {
  E_PLAT_NONE = 0,
  E_PLAT_ANDROID = 1,
  E_PLAT_IOS = 2,
  E_PLAT_WP = 3,
  E_PLAT_MAX = 4
};
bool Proto_PlatType_IsValid(int value);
const Proto_PlatType Proto_PlatType_MIN = E_PLAT_NONE;
const Proto_PlatType Proto_PlatType_MAX = E_PLAT_MAX;
const int Proto_PlatType_ARRAYSIZE = Proto_PlatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_PlatType_descriptor();
inline const ::std::string& Proto_PlatType_Name(Proto_PlatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_PlatType_descriptor(), value);
}
inline bool Proto_PlatType_Parse(
    const ::std::string& name, Proto_PlatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_PlatType>(
    Proto_PlatType_descriptor(), name, value);
}
enum Proto_NetworkType {
  E_NETWORK_2G = 0,
  E_NETWORK_3G = 1,
  E_NETWORK_4G = 2,
  E_NETWORK_WIFI = 3
};
bool Proto_NetworkType_IsValid(int value);
const Proto_NetworkType Proto_NetworkType_MIN = E_NETWORK_2G;
const Proto_NetworkType Proto_NetworkType_MAX = E_NETWORK_WIFI;
const int Proto_NetworkType_ARRAYSIZE = Proto_NetworkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_NetworkType_descriptor();
inline const ::std::string& Proto_NetworkType_Name(Proto_NetworkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_NetworkType_descriptor(), value);
}
inline bool Proto_NetworkType_Parse(
    const ::std::string& name, Proto_NetworkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_NetworkType>(
    Proto_NetworkType_descriptor(), name, value);
}
enum Proto_PlayerCreateState {
  E_CREATE_SUCESS = 0,
  E_CREATE_REGIST_NAME = 1,
  E_CREATE_WAIT_NAME = 2
};
bool Proto_PlayerCreateState_IsValid(int value);
const Proto_PlayerCreateState Proto_PlayerCreateState_MIN = E_CREATE_SUCESS;
const Proto_PlayerCreateState Proto_PlayerCreateState_MAX = E_CREATE_WAIT_NAME;
const int Proto_PlayerCreateState_ARRAYSIZE = Proto_PlayerCreateState_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_PlayerCreateState_descriptor();
inline const ::std::string& Proto_PlayerCreateState_Name(Proto_PlayerCreateState value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_PlayerCreateState_descriptor(), value);
}
inline bool Proto_PlayerCreateState_Parse(
    const ::std::string& name, Proto_PlayerCreateState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_PlayerCreateState>(
    Proto_PlayerCreateState_descriptor(), name, value);
}
enum Proto_AgentLevel {
  E_AGENT_LEVEL_GENERAL = 0,
  E_AGENT_LEVEL_MAX = 1,
  E_AGENT_LEVEL_ONE = 2,
  E_AGENT_LEVEL_TWO = 3,
  E_AGENT_LEVEL_THREE = 4
};
bool Proto_AgentLevel_IsValid(int value);
const Proto_AgentLevel Proto_AgentLevel_MIN = E_AGENT_LEVEL_GENERAL;
const Proto_AgentLevel Proto_AgentLevel_MAX = E_AGENT_LEVEL_THREE;
const int Proto_AgentLevel_ARRAYSIZE = Proto_AgentLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_AgentLevel_descriptor();
inline const ::std::string& Proto_AgentLevel_Name(Proto_AgentLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_AgentLevel_descriptor(), value);
}
inline bool Proto_AgentLevel_Parse(
    const ::std::string& name, Proto_AgentLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_AgentLevel>(
    Proto_AgentLevel_descriptor(), name, value);
}
enum enSnsMailStatus {
  EN_SNS_MAIL_NO_READ = 0,
  EN_SNS_MAIL_ALREADY_READ = 1
};
bool enSnsMailStatus_IsValid(int value);
const enSnsMailStatus enSnsMailStatus_MIN = EN_SNS_MAIL_NO_READ;
const enSnsMailStatus enSnsMailStatus_MAX = EN_SNS_MAIL_ALREADY_READ;
const int enSnsMailStatus_ARRAYSIZE = enSnsMailStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* enSnsMailStatus_descriptor();
inline const ::std::string& enSnsMailStatus_Name(enSnsMailStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    enSnsMailStatus_descriptor(), value);
}
inline bool enSnsMailStatus_Parse(
    const ::std::string& name, enSnsMailStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enSnsMailStatus>(
    enSnsMailStatus_descriptor(), name, value);
}
enum EnumGiveBankJettonStatus {
  ENUM_GIVE_BANK_JETTON_STATUS_NONE = 0,
  ENUM_GIVE_BANK_JETTON_STATUS_DEL_MONEY_FAIL = 1,
  ENUM_GIVE_BANK_JETTON_STATUS_DEL_MONEY_SUCCESS = 2,
  ENUM_GIVE_BANK_JETTON_STATUS_ADD_MONEY_FAIL = 3,
  ENUM_GIVE_BANK_JETTON_STATUS_SUCCESS = 4,
  ENUM_GIVE_BANK_JETTON_STATUS_CANCEL = 5,
  ENUM_GIVE_BANK_JETTON_STATUS_CANCEL_SUCCESS = 6,
  ENUM_GIVE_BANK_JETTON_STATUS_CANCEL_FAILED_RECHARGE_SUCCESS = 7
};
bool EnumGiveBankJettonStatus_IsValid(int value);
const EnumGiveBankJettonStatus EnumGiveBankJettonStatus_MIN = ENUM_GIVE_BANK_JETTON_STATUS_NONE;
const EnumGiveBankJettonStatus EnumGiveBankJettonStatus_MAX = ENUM_GIVE_BANK_JETTON_STATUS_CANCEL_FAILED_RECHARGE_SUCCESS;
const int EnumGiveBankJettonStatus_ARRAYSIZE = EnumGiveBankJettonStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumGiveBankJettonStatus_descriptor();
inline const ::std::string& EnumGiveBankJettonStatus_Name(EnumGiveBankJettonStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumGiveBankJettonStatus_descriptor(), value);
}
inline bool EnumGiveBankJettonStatus_Parse(
    const ::std::string& name, EnumGiveBankJettonStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumGiveBankJettonStatus>(
    EnumGiveBankJettonStatus_descriptor(), name, value);
}
enum enConstType {
  EN_CONST_NONE = 0,
  EN_CONST_USER_INIT_JETTON = 1,
  EN_CONST_USER_INIT_FACE = 2,
  EN_CONST_USER_INIT_BANK_JETTON = 3,
  EN_CONST_USER_ACH_WITH_FEE = 4,
  EN_CONST_USER_FEE_WITH_POUR = 5,
  EN_CONST_USER_MIN_BANK_DRAW = 6
};
bool enConstType_IsValid(int value);
const enConstType enConstType_MIN = EN_CONST_NONE;
const enConstType enConstType_MAX = EN_CONST_USER_MIN_BANK_DRAW;
const int enConstType_ARRAYSIZE = enConstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enConstType_descriptor();
inline const ::std::string& enConstType_Name(enConstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enConstType_descriptor(), value);
}
inline bool enConstType_Parse(
    const ::std::string& name, enConstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enConstType>(
    enConstType_descriptor(), name, value);
}
enum eAccountMoneyType {
  E_ACCOUNT_TYPE_JETTON = 0,
  E_ACCOUNT_TYPE_BANK_JETTON = 1,
  E_ACCOUNT_TYPE_MAX = 2
};
bool eAccountMoneyType_IsValid(int value);
const eAccountMoneyType eAccountMoneyType_MIN = E_ACCOUNT_TYPE_JETTON;
const eAccountMoneyType eAccountMoneyType_MAX = E_ACCOUNT_TYPE_MAX;
const int eAccountMoneyType_ARRAYSIZE = eAccountMoneyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eAccountMoneyType_descriptor();
inline const ::std::string& eAccountMoneyType_Name(eAccountMoneyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eAccountMoneyType_descriptor(), value);
}
inline bool eAccountMoneyType_Parse(
    const ::std::string& name, eAccountMoneyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eAccountMoneyType>(
    eAccountMoneyType_descriptor(), name, value);
}
enum eChangeMoneyType {
  E_CHAGEMONEY_GAME_ADD = 0,
  E_CHAGEMONEY_GAME_REMOVE = 1,
  E_CHAGEMONEY_GAME_ADD_GM = 2,
  E_CHAGEMONEY_GAME_REMOVE_GM = 3,
  E_CHAGEMONEY_BANK_SAVE_MONEY_REMOVE = 4,
  E_CHAGEMONEY_BANK_GET_MONEY_ADD = 5,
  E_CHAGEMONEY_MAIL_ADD = 6,
  E_CHAGEMONEY_GIVE_JETTON_TO_OTHER_REMOVE = 7,
  E_CHAGEMONEY_OTHER_GEVE_JETTON_TO_ME_ADD = 8,
  E_CHAGEMONEY_TYPE_MAX = 9
};
bool eChangeMoneyType_IsValid(int value);
const eChangeMoneyType eChangeMoneyType_MIN = E_CHAGEMONEY_GAME_ADD;
const eChangeMoneyType eChangeMoneyType_MAX = E_CHAGEMONEY_TYPE_MAX;
const int eChangeMoneyType_ARRAYSIZE = eChangeMoneyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eChangeMoneyType_descriptor();
inline const ::std::string& eChangeMoneyType_Name(eChangeMoneyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eChangeMoneyType_descriptor(), value);
}
inline bool eChangeMoneyType_Parse(
    const ::std::string& name, eChangeMoneyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eChangeMoneyType>(
    eChangeMoneyType_descriptor(), name, value);
}
enum eOperationType {
  E_USER_JETTON_OPER_TYPE_GAME_BALANCED_WIN = 0,
  E_USER_JETTON_OPER_TYPE_GAME_BALANCED_LOST = 1,
  E_USER_JETTON_OPER_TYPE_EXCHANGE = 2,
  E_USER_JETTON_OPER_TYPE_TRANSFER = 3,
  E_USER_JETTON_OPER_TYPE_RECHARGE = 4,
  E_USER_JETTON_OPER_TYPE_WEB_DEDUCT_NONEY = 5,
  E_USER_JETTON_OPER_TYPE_WEB_GIVE_MONEY = 6,
  E_USER_JETTON_OPER_TYPE_GIVE_JETTON = 7,
  E_USER_JETTON_OPER_TYPE_DRAW = 8,
  E_USER_JETTON_OPER_TYPE_MAX = 9
};
bool eOperationType_IsValid(int value);
const eOperationType eOperationType_MIN = E_USER_JETTON_OPER_TYPE_GAME_BALANCED_WIN;
const eOperationType eOperationType_MAX = E_USER_JETTON_OPER_TYPE_MAX;
const int eOperationType_ARRAYSIZE = eOperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eOperationType_descriptor();
inline const ::std::string& eOperationType_Name(eOperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eOperationType_descriptor(), value);
}
inline bool eOperationType_Parse(
    const ::std::string& name, eOperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eOperationType>(
    eOperationType_descriptor(), name, value);
}
enum eDrawReasonType {
  E_RECHARGE_PAY_TYPE_VIP_DRAW = 1
};
bool eDrawReasonType_IsValid(int value);
const eDrawReasonType eDrawReasonType_MIN = E_RECHARGE_PAY_TYPE_VIP_DRAW;
const eDrawReasonType eDrawReasonType_MAX = E_RECHARGE_PAY_TYPE_VIP_DRAW;
const int eDrawReasonType_ARRAYSIZE = eDrawReasonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eDrawReasonType_descriptor();
inline const ::std::string& eDrawReasonType_Name(eDrawReasonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eDrawReasonType_descriptor(), value);
}
inline bool eDrawReasonType_Parse(
    const ::std::string& name, eDrawReasonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eDrawReasonType>(
    eDrawReasonType_descriptor(), name, value);
}
enum eRechargeResonType {
  E_RECHARGE_PAY_TYPE_VIP_RECHARGE = 1,
  E_RECHARGE_PAY_TYPE_WEB_ZHUANGZHANG_PLATFORM = 2,
  E_RECHARGE_PAY_TYPE_POINTCARD = 3,
  E_RECHARGE_PAY_TYPE_ALIPAY = 4,
  E_RECHARGE_PAY_TYPE_TENPAY = 5,
  E_RECHARGE_PAY_TYPE_APPLE = 6,
  E_RECHARGE_PAY_TYPE_YINGYONGBAO = 7
};
bool eRechargeResonType_IsValid(int value);
const eRechargeResonType eRechargeResonType_MIN = E_RECHARGE_PAY_TYPE_VIP_RECHARGE;
const eRechargeResonType eRechargeResonType_MAX = E_RECHARGE_PAY_TYPE_YINGYONGBAO;
const int eRechargeResonType_ARRAYSIZE = eRechargeResonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRechargeResonType_descriptor();
inline const ::std::string& eRechargeResonType_Name(eRechargeResonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRechargeResonType_descriptor(), value);
}
inline bool eRechargeResonType_Parse(
    const ::std::string& name, eRechargeResonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRechargeResonType>(
    eRechargeResonType_descriptor(), name, value);
}
enum eGameBalanceOperationWinReason {
  E_GAME_BALANCE_REASON_PLAY_GAME_WIN = 0,
  E_GAME_BALANCE_REASON_TYPE_DO_LOTTERY_WIN = 1,
  E_GAME_BALANCE_REASON_WIN_MAX = 2
};
bool eGameBalanceOperationWinReason_IsValid(int value);
const eGameBalanceOperationWinReason eGameBalanceOperationWinReason_MIN = E_GAME_BALANCE_REASON_PLAY_GAME_WIN;
const eGameBalanceOperationWinReason eGameBalanceOperationWinReason_MAX = E_GAME_BALANCE_REASON_WIN_MAX;
const int eGameBalanceOperationWinReason_ARRAYSIZE = eGameBalanceOperationWinReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* eGameBalanceOperationWinReason_descriptor();
inline const ::std::string& eGameBalanceOperationWinReason_Name(eGameBalanceOperationWinReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    eGameBalanceOperationWinReason_descriptor(), value);
}
inline bool eGameBalanceOperationWinReason_Parse(
    const ::std::string& name, eGameBalanceOperationWinReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eGameBalanceOperationWinReason>(
    eGameBalanceOperationWinReason_descriptor(), name, value);
}
enum eGameBalanceOperationLostReason {
  E_GAME_BALANCE_REASON_PLAY_GAME_LOST = 0,
  E_GAME_BALANCE_REASON_TYPE_DO_LOTTERY_LOST = 1,
  E_GAME_BALANCE_REASON_LOST_MAX = 2
};
bool eGameBalanceOperationLostReason_IsValid(int value);
const eGameBalanceOperationLostReason eGameBalanceOperationLostReason_MIN = E_GAME_BALANCE_REASON_PLAY_GAME_LOST;
const eGameBalanceOperationLostReason eGameBalanceOperationLostReason_MAX = E_GAME_BALANCE_REASON_LOST_MAX;
const int eGameBalanceOperationLostReason_ARRAYSIZE = eGameBalanceOperationLostReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* eGameBalanceOperationLostReason_descriptor();
inline const ::std::string& eGameBalanceOperationLostReason_Name(eGameBalanceOperationLostReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    eGameBalanceOperationLostReason_descriptor(), value);
}
inline bool eGameBalanceOperationLostReason_Parse(
    const ::std::string& name, eGameBalanceOperationLostReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eGameBalanceOperationLostReason>(
    eGameBalanceOperationLostReason_descriptor(), name, value);
}
enum eGiveMoneyReason {
  E_GIVE_MONEY_REASON_WEB_SYSTEM = 0,
  E_GIVE_MONEY_REASON_PROMOTE = 1,
  E_GIVE_MONEY_REASON_FIRST_RECHARGE = 2,
  E_GIVE_MONEY_REASON_BUY_PROP = 3,
  E_GIVE_MONEY_SHARE_GAME = 4,
  E_GIVE_MONEY_REASON_RECLAIM_PROP = 5,
  E_GIVE_MONEY_REASON_FIRST_REGISTER = 6,
  E_GIVE_MONEY_REASON_PLAT_USER_CHANGE_TO_AGENT_USER = 7,
  E_GIVE_MONEY_REASON_FINISH_TASK = 8,
  E_GIVE_MONEY_REASON_RELIF_FUND = 9,
  E_GIVE_MONEY_REASON_EVERYDAY_LOGIN_COMMERCE = 10,
  E_GIVE_MONEY_REASON_COMPLETE_USER_INFO = 11,
  E_GIVE_MONEY_REASON_TOOL_CMD = 12,
  E_GIVE_MONEY_REASON_PROMOTE_PROFIT = 13,
  E_GIVE_MONEY_REASON_MAX = 14
};
bool eGiveMoneyReason_IsValid(int value);
const eGiveMoneyReason eGiveMoneyReason_MIN = E_GIVE_MONEY_REASON_WEB_SYSTEM;
const eGiveMoneyReason eGiveMoneyReason_MAX = E_GIVE_MONEY_REASON_MAX;
const int eGiveMoneyReason_ARRAYSIZE = eGiveMoneyReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* eGiveMoneyReason_descriptor();
inline const ::std::string& eGiveMoneyReason_Name(eGiveMoneyReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    eGiveMoneyReason_descriptor(), value);
}
inline bool eGiveMoneyReason_Parse(
    const ::std::string& name, eGiveMoneyReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eGiveMoneyReason>(
    eGiveMoneyReason_descriptor(), name, value);
}
enum eMoneyExchangeReason {
  E_EXCHANGE_REASON_SAVE_MONEY = 0,
  E_EXCHANGE_REASON_DRAW_MONEY = 1,
  E_EXCHANGE_REASON_MAX = 2
};
bool eMoneyExchangeReason_IsValid(int value);
const eMoneyExchangeReason eMoneyExchangeReason_MIN = E_EXCHANGE_REASON_SAVE_MONEY;
const eMoneyExchangeReason eMoneyExchangeReason_MAX = E_EXCHANGE_REASON_MAX;
const int eMoneyExchangeReason_ARRAYSIZE = eMoneyExchangeReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMoneyExchangeReason_descriptor();
inline const ::std::string& eMoneyExchangeReason_Name(eMoneyExchangeReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMoneyExchangeReason_descriptor(), value);
}
inline bool eMoneyExchangeReason_Parse(
    const ::std::string& name, eMoneyExchangeReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMoneyExchangeReason>(
    eMoneyExchangeReason_descriptor(), name, value);
}
enum eMoneyTransferReason {
  E_TRANSFER_REASON_USER = 0,
  E_TRANSFER_REASON_FROM_USER = 1,
  E_TRANSFER_REASON_VIP_ZHUANRU = 2,
  E_TRANSFER_REASON_VIP_ZHUANCHU = 3,
  E_TRANSFER_REASON_VIP_TO_VIP = 4,
  E_TRANSFER_REASON_MAX = 5
};
bool eMoneyTransferReason_IsValid(int value);
const eMoneyTransferReason eMoneyTransferReason_MIN = E_TRANSFER_REASON_USER;
const eMoneyTransferReason eMoneyTransferReason_MAX = E_TRANSFER_REASON_MAX;
const int eMoneyTransferReason_ARRAYSIZE = eMoneyTransferReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMoneyTransferReason_descriptor();
inline const ::std::string& eMoneyTransferReason_Name(eMoneyTransferReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMoneyTransferReason_descriptor(), value);
}
inline bool eMoneyTransferReason_Parse(
    const ::std::string& name, eMoneyTransferReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMoneyTransferReason>(
    eMoneyTransferReason_descriptor(), name, value);
}
enum enRankType {
  E_RANK_TYPE_NONE = 0,
  E_RANK_TYPE_GOLD = 1,
  E_RANK_TYPE_TODAY_WIN_GOLD = 2
};
bool enRankType_IsValid(int value);
const enRankType enRankType_MIN = E_RANK_TYPE_NONE;
const enRankType enRankType_MAX = E_RANK_TYPE_TODAY_WIN_GOLD;
const int enRankType_ARRAYSIZE = enRankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enRankType_descriptor();
inline const ::std::string& enRankType_Name(enRankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enRankType_descriptor(), value);
}
inline bool enRankType_Parse(
    const ::std::string& name, enRankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enRankType>(
    enRankType_descriptor(), name, value);
}
enum EventLogType {
  EN_EVENTLOG_GIVE_BANK_JETTON = 1,
  EN_EVENTLOG_MAX = 20
};
bool EventLogType_IsValid(int value);
const EventLogType EventLogType_MIN = EN_EVENTLOG_GIVE_BANK_JETTON;
const EventLogType EventLogType_MAX = EN_EVENTLOG_MAX;
const int EventLogType_ARRAYSIZE = EventLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventLogType_descriptor();
inline const ::std::string& EventLogType_Name(EventLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventLogType_descriptor(), value);
}
inline bool EventLogType_Parse(
    const ::std::string& name, EventLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventLogType>(
    EventLogType_descriptor(), name, value);
}
enum WhiteBlackState {
  WHITE_BLACK_STATE_NONE = 0,
  WHITE_BLACK_STATE_USEING = 1,
  WHITE_BLACK_STATE_TIMEOUT = 2,
  WHITE_BLACK_STATE_FINISH = 3
};
bool WhiteBlackState_IsValid(int value);
const WhiteBlackState WhiteBlackState_MIN = WHITE_BLACK_STATE_NONE;
const WhiteBlackState WhiteBlackState_MAX = WHITE_BLACK_STATE_FINISH;
const int WhiteBlackState_ARRAYSIZE = WhiteBlackState_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhiteBlackState_descriptor();
inline const ::std::string& WhiteBlackState_Name(WhiteBlackState value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhiteBlackState_descriptor(), value);
}
inline bool WhiteBlackState_Parse(
    const ::std::string& name, WhiteBlackState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhiteBlackState>(
    WhiteBlackState_descriptor(), name, value);
}
enum WhiteBlackRosterType {
  WHITE_BLACK_ROSTER_TYPE_BLACK = 0,
  WHITE_BLACK_ROSTER_TYPE_WHITE = 1
};
bool WhiteBlackRosterType_IsValid(int value);
const WhiteBlackRosterType WhiteBlackRosterType_MIN = WHITE_BLACK_ROSTER_TYPE_BLACK;
const WhiteBlackRosterType WhiteBlackRosterType_MAX = WHITE_BLACK_ROSTER_TYPE_WHITE;
const int WhiteBlackRosterType_ARRAYSIZE = WhiteBlackRosterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WhiteBlackRosterType_descriptor();
inline const ::std::string& WhiteBlackRosterType_Name(WhiteBlackRosterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WhiteBlackRosterType_descriptor(), value);
}
inline bool WhiteBlackRosterType_Parse(
    const ::std::string& name, WhiteBlackRosterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WhiteBlackRosterType>(
    WhiteBlackRosterType_descriptor(), name, value);
}
enum GMCtrlGiveDataControlType {
  GM_CTRL_GIVE_DATA_STATE_GIVE_CAIJING_BY_RATE = 0,
  GM_CTRL_GIVE_DATA_STATE_GIVE_BONUS = 1,
  GM_CTRL_GIVE_DATA_STATE_GIVE_FREE_GAME = 2
};
bool GMCtrlGiveDataControlType_IsValid(int value);
const GMCtrlGiveDataControlType GMCtrlGiveDataControlType_MIN = GM_CTRL_GIVE_DATA_STATE_GIVE_CAIJING_BY_RATE;
const GMCtrlGiveDataControlType GMCtrlGiveDataControlType_MAX = GM_CTRL_GIVE_DATA_STATE_GIVE_FREE_GAME;
const int GMCtrlGiveDataControlType_ARRAYSIZE = GMCtrlGiveDataControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataControlType_descriptor();
inline const ::std::string& GMCtrlGiveDataControlType_Name(GMCtrlGiveDataControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GMCtrlGiveDataControlType_descriptor(), value);
}
inline bool GMCtrlGiveDataControlType_Parse(
    const ::std::string& name, GMCtrlGiveDataControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GMCtrlGiveDataControlType>(
    GMCtrlGiveDataControlType_descriptor(), name, value);
}
enum GMCtrlGiveDataState {
  GM_CTRL_GIVE_DATA_STATE_NONE = 0,
  GM_CTRL_GIVE_DATA_STATE_WAITING = 1,
  GM_CTRL_GIVE_DATA_STATE_TIMEOUT = 2,
  GM_CTRL_GIVE_DATA_STATE_FINISH = 3
};
bool GMCtrlGiveDataState_IsValid(int value);
const GMCtrlGiveDataState GMCtrlGiveDataState_MIN = GM_CTRL_GIVE_DATA_STATE_NONE;
const GMCtrlGiveDataState GMCtrlGiveDataState_MAX = GM_CTRL_GIVE_DATA_STATE_FINISH;
const int GMCtrlGiveDataState_ARRAYSIZE = GMCtrlGiveDataState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataState_descriptor();
inline const ::std::string& GMCtrlGiveDataState_Name(GMCtrlGiveDataState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GMCtrlGiveDataState_descriptor(), value);
}
inline bool GMCtrlGiveDataState_Parse(
    const ::std::string& name, GMCtrlGiveDataState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GMCtrlGiveDataState>(
    GMCtrlGiveDataState_descriptor(), name, value);
}
enum GMCtrlGiveDataJackpotType {
  GM_CTRL_GIVE_DATA_JACKPOT_TYPE_GENERAL = 0,
  GM_CTRL_GIVE_DATA_JACKPOT_TYPE_LITTLE = 1,
  GM_CTRL_GIVE_DATA_JACKPOT_TYPE_MIDDLE = 2,
  GM_CTRL_GIVE_DATA_JACKPOT_TYPE_BIG = 3,
  GM_CTRL_GIVE_DATA_JACKPOT_TYPE_TOO_BIG = 4
};
bool GMCtrlGiveDataJackpotType_IsValid(int value);
const GMCtrlGiveDataJackpotType GMCtrlGiveDataJackpotType_MIN = GM_CTRL_GIVE_DATA_JACKPOT_TYPE_GENERAL;
const GMCtrlGiveDataJackpotType GMCtrlGiveDataJackpotType_MAX = GM_CTRL_GIVE_DATA_JACKPOT_TYPE_TOO_BIG;
const int GMCtrlGiveDataJackpotType_ARRAYSIZE = GMCtrlGiveDataJackpotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GMCtrlGiveDataJackpotType_descriptor();
inline const ::std::string& GMCtrlGiveDataJackpotType_Name(GMCtrlGiveDataJackpotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GMCtrlGiveDataJackpotType_descriptor(), value);
}
inline bool GMCtrlGiveDataJackpotType_Parse(
    const ::std::string& name, GMCtrlGiveDataJackpotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GMCtrlGiveDataJackpotType>(
    GMCtrlGiveDataJackpotType_descriptor(), name, value);
}
// ===================================================================

class GameServerRoomInfo : public ::google::protobuf::Message {
 public:
  GameServerRoomInfo();
  virtual ~GameServerRoomInfo();

  GameServerRoomInfo(const GameServerRoomInfo& from);

  inline GameServerRoomInfo& operator=(const GameServerRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServerRoomInfo& default_instance();

  void Swap(GameServerRoomInfo* other);

  // implements Message ----------------------------------------------

  GameServerRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameServerRoomInfo& from);
  void MergeFrom(const GameServerRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 game_id = 1;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional string room_name = 3;
  inline bool has_room_name() const;
  inline void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  inline const ::std::string& room_name() const;
  inline void set_room_name(const ::std::string& value);
  inline void set_room_name(const char* value);
  inline void set_room_name(const char* value, size_t size);
  inline ::std::string* mutable_room_name();
  inline ::std::string* release_room_name();
  inline void set_allocated_room_name(::std::string* room_name);

  // optional uint64 enter_min = 4;
  inline bool has_enter_min() const;
  inline void clear_enter_min();
  static const int kEnterMinFieldNumber = 4;
  inline ::google::protobuf::uint64 enter_min() const;
  inline void set_enter_min(::google::protobuf::uint64 value);

  // optional uint64 enter_max = 5;
  inline bool has_enter_max() const;
  inline void clear_enter_max();
  static const int kEnterMaxFieldNumber = 5;
  inline ::google::protobuf::uint64 enter_max() const;
  inline void set_enter_max(::google::protobuf::uint64 value);

  // optional uint32 online_count = 6;
  inline bool has_online_count() const;
  inline void clear_online_count();
  static const int kOnlineCountFieldNumber = 6;
  inline ::google::protobuf::uint32 online_count() const;
  inline void set_online_count(::google::protobuf::uint32 value);

  // optional uint32 bus_id = 7;
  inline bool has_bus_id() const;
  inline void clear_bus_id();
  static const int kBusIdFieldNumber = 7;
  inline ::google::protobuf::uint32 bus_id() const;
  inline void set_bus_id(::google::protobuf::uint32 value);

  // optional uint32 status = 8;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GameServerRoomInfo)
 private:
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_name();
  inline void clear_has_room_name();
  inline void set_has_enter_min();
  inline void clear_has_enter_min();
  inline void set_has_enter_max();
  inline void clear_has_enter_max();
  inline void set_has_online_count();
  inline void clear_has_online_count();
  inline void set_has_bus_id();
  inline void clear_has_bus_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 room_id_;
  ::std::string* room_name_;
  ::google::protobuf::uint64 enter_min_;
  ::google::protobuf::uint64 enter_max_;
  ::google::protobuf::uint32 online_count_;
  ::google::protobuf::uint32 bus_id_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GameServerRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class tbServerMgr : public ::google::protobuf::Message {
 public:
  tbServerMgr();
  virtual ~tbServerMgr();

  tbServerMgr(const tbServerMgr& from);

  inline tbServerMgr& operator=(const tbServerMgr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbServerMgr& default_instance();

  void Swap(tbServerMgr* other);

  // implements Message ----------------------------------------------

  tbServerMgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbServerMgr& from);
  void MergeFrom(const tbServerMgr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string contract = 2;
  inline bool has_contract() const;
  inline void clear_contract();
  static const int kContractFieldNumber = 2;
  inline const ::std::string& contract() const;
  inline void set_contract(const ::std::string& value);
  inline void set_contract(const char* value);
  inline void set_contract(const char* value, size_t size);
  inline ::std::string* mutable_contract();
  inline ::std::string* release_contract();
  inline void set_allocated_contract(::std::string* contract);

  // optional string machine_addr = 3;
  inline bool has_machine_addr() const;
  inline void clear_machine_addr();
  static const int kMachineAddrFieldNumber = 3;
  inline const ::std::string& machine_addr() const;
  inline void set_machine_addr(const ::std::string& value);
  inline void set_machine_addr(const char* value);
  inline void set_machine_addr(const char* value, size_t size);
  inline ::std::string* mutable_machine_addr();
  inline ::std::string* release_machine_addr();
  inline void set_allocated_machine_addr(::std::string* machine_addr);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string bus_name = 5;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 5;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string server_desc = 6;
  inline bool has_server_desc() const;
  inline void clear_server_desc();
  static const int kServerDescFieldNumber = 6;
  inline const ::std::string& server_desc() const;
  inline void set_server_desc(const ::std::string& value);
  inline void set_server_desc(const char* value);
  inline void set_server_desc(const char* value, size_t size);
  inline ::std::string* mutable_server_desc();
  inline ::std::string* release_server_desc();
  inline void set_allocated_server_desc(::std::string* server_desc);

  // optional uint32 cur_count = 7;
  inline bool has_cur_count() const;
  inline void clear_cur_count();
  static const int kCurCountFieldNumber = 7;
  inline ::google::protobuf::uint32 cur_count() const;
  inline void set_cur_count(::google::protobuf::uint32 value);

  // optional uint64 last_login_time = 8;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint64 value);

  // optional uint64 last_logout_time = 9;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint64 value);

  // optional uint64 create_time = 10;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbServerMgr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contract();
  inline void clear_has_contract();
  inline void set_has_machine_addr();
  inline void clear_has_machine_addr();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_server_desc();
  inline void clear_has_server_desc();
  inline void set_has_cur_count();
  inline void clear_has_cur_count();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* contract_;
  ::std::string* machine_addr_;
  ::std::string* ip_;
  ::std::string* bus_name_;
  ::std::string* server_desc_;
  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint64 last_logout_time_;
  ::google::protobuf::uint64 create_time_;
  ::google::protobuf::uint32 cur_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbServerMgr* default_instance_;
};
// -------------------------------------------------------------------

class tbContractMgr : public ::google::protobuf::Message {
 public:
  tbContractMgr();
  virtual ~tbContractMgr();

  tbContractMgr(const tbContractMgr& from);

  inline tbContractMgr& operator=(const tbContractMgr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbContractMgr& default_instance();

  void Swap(tbContractMgr* other);

  // implements Message ----------------------------------------------

  tbContractMgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbContractMgr& from);
  void MergeFrom(const tbContractMgr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string contract = 2;
  inline bool has_contract() const;
  inline void clear_contract();
  static const int kContractFieldNumber = 2;
  inline const ::std::string& contract() const;
  inline void set_contract(const ::std::string& value);
  inline void set_contract(const char* value);
  inline void set_contract(const char* value, size_t size);
  inline ::std::string* mutable_contract();
  inline ::std::string* release_contract();
  inline void set_allocated_contract(::std::string* contract);

  // optional string machine_addr = 3;
  inline bool has_machine_addr() const;
  inline void clear_machine_addr();
  static const int kMachineAddrFieldNumber = 3;
  inline const ::std::string& machine_addr() const;
  inline void set_machine_addr(const ::std::string& value);
  inline void set_machine_addr(const char* value);
  inline void set_machine_addr(const char* value, size_t size);
  inline ::std::string* mutable_machine_addr();
  inline ::std::string* release_machine_addr();
  inline void set_allocated_machine_addr(::std::string* machine_addr);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string server_desc = 5;
  inline bool has_server_desc() const;
  inline void clear_server_desc();
  static const int kServerDescFieldNumber = 5;
  inline const ::std::string& server_desc() const;
  inline void set_server_desc(const ::std::string& value);
  inline void set_server_desc(const char* value);
  inline void set_server_desc(const char* value, size_t size);
  inline ::std::string* mutable_server_desc();
  inline ::std::string* release_server_desc();
  inline void set_allocated_server_desc(::std::string* server_desc);

  // @@protoc_insertion_point(class_scope:proto_ff.tbContractMgr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contract();
  inline void clear_has_contract();
  inline void set_has_machine_addr();
  inline void clear_has_machine_addr();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_server_desc();
  inline void clear_has_server_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* contract_;
  ::std::string* machine_addr_;
  ::std::string* ip_;
  ::std::string* server_desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbContractMgr* default_instance_;
};
// -------------------------------------------------------------------

class tbAccountTable : public ::google::protobuf::Message {
 public:
  tbAccountTable();
  virtual ~tbAccountTable();

  tbAccountTable(const tbAccountTable& from);

  inline tbAccountTable& operator=(const tbAccountTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbAccountTable& default_instance();

  void Swap(tbAccountTable* other);

  // implements Message ----------------------------------------------

  tbAccountTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbAccountTable& from);
  void MergeFrom(const tbAccountTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional uint32 account_type = 4;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // optional string device_id = 5;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 5;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional uint64 phonenum = 6;
  inline bool has_phonenum() const;
  inline void clear_phonenum();
  static const int kPhonenumFieldNumber = 6;
  inline ::google::protobuf::uint64 phonenum() const;
  inline void set_phonenum(::google::protobuf::uint64 value);

  // optional uint64 real_player_id = 7;
  inline bool has_real_player_id() const;
  inline void clear_real_player_id();
  static const int kRealPlayerIdFieldNumber = 7;
  inline ::google::protobuf::uint64 real_player_id() const;
  inline void set_real_player_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbAccountTable)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_phonenum();
  inline void clear_has_phonenum();
  inline void set_has_real_player_id();
  inline void clear_has_real_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::std::string* account_;
  ::std::string* password_;
  ::std::string* device_id_;
  ::google::protobuf::uint64 phonenum_;
  ::google::protobuf::uint64 real_player_id_;
  ::google::protobuf::uint32 account_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbAccountTable* default_instance_;
};
// -------------------------------------------------------------------

class ItemData : public ::google::protobuf::Message {
 public:
  ItemData();
  virtual ~ItemData();

  ItemData(const ItemData& from);

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemData& default_instance();

  void Swap(ItemData* other);

  // implements Message ----------------------------------------------

  ItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.ItemData)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static ItemData* default_instance_;
};
// -------------------------------------------------------------------

class SingleMailInfo : public ::google::protobuf::Message {
 public:
  SingleMailInfo();
  virtual ~SingleMailInfo();

  SingleMailInfo(const SingleMailInfo& from);

  inline SingleMailInfo& operator=(const SingleMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleMailInfo& default_instance();

  void Swap(SingleMailInfo* other);

  // implements Message ----------------------------------------------

  SingleMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleMailInfo& from);
  void MergeFrom(const SingleMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SingleMailInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static SingleMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserSpecialMailData : public ::google::protobuf::Message {
 public:
  UserSpecialMailData();
  virtual ~UserSpecialMailData();

  UserSpecialMailData(const UserSpecialMailData& from);

  inline UserSpecialMailData& operator=(const UserSpecialMailData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSpecialMailData& default_instance();

  void Swap(UserSpecialMailData* other);

  // implements Message ----------------------------------------------

  UserSpecialMailData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSpecialMailData& from);
  void MergeFrom(const UserSpecialMailData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 static_id = 1;
  inline bool has_static_id() const;
  inline void clear_static_id();
  static const int kStaticIdFieldNumber = 1;
  inline ::google::protobuf::int32 static_id() const;
  inline void set_static_id(::google::protobuf::int32 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.UserSpecialMailData)
 private:
  inline void set_has_static_id();
  inline void clear_has_static_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 static_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static UserSpecialMailData* default_instance_;
};
// -------------------------------------------------------------------

class UserMailInfo : public ::google::protobuf::Message {
 public:
  UserMailInfo();
  virtual ~UserMailInfo();

  UserMailInfo(const UserMailInfo& from);

  inline UserMailInfo& operator=(const UserMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMailInfo& default_instance();

  void Swap(UserMailInfo* other);

  // implements Message ----------------------------------------------

  UserMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserMailInfo& from);
  void MergeFrom(const UserMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.SingleMailInfo simple_mail = 1;
  inline int simple_mail_size() const;
  inline void clear_simple_mail();
  static const int kSimpleMailFieldNumber = 1;
  inline const ::proto_ff::SingleMailInfo& simple_mail(int index) const;
  inline ::proto_ff::SingleMailInfo* mutable_simple_mail(int index);
  inline ::proto_ff::SingleMailInfo* add_simple_mail();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SingleMailInfo >&
      simple_mail() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SingleMailInfo >*
      mutable_simple_mail();

  // repeated .proto_ff.UserSpecialMailData receive_data = 2;
  inline int receive_data_size() const;
  inline void clear_receive_data();
  static const int kReceiveDataFieldNumber = 2;
  inline const ::proto_ff::UserSpecialMailData& receive_data(int index) const;
  inline ::proto_ff::UserSpecialMailData* mutable_receive_data(int index);
  inline ::proto_ff::UserSpecialMailData* add_receive_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSpecialMailData >&
      receive_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSpecialMailData >*
      mutable_receive_data();

  // repeated uint64 del_role_mail = 4;
  inline int del_role_mail_size() const;
  inline void clear_del_role_mail();
  static const int kDelRoleMailFieldNumber = 4;
  inline ::google::protobuf::uint64 del_role_mail(int index) const;
  inline void set_del_role_mail(int index, ::google::protobuf::uint64 value);
  inline void add_del_role_mail(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      del_role_mail() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_del_role_mail();

  // @@protoc_insertion_point(class_scope:proto_ff.UserMailInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::SingleMailInfo > simple_mail_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSpecialMailData > receive_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > del_role_mail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static UserMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class tbUserMailInfo : public ::google::protobuf::Message {
 public:
  tbUserMailInfo();
  virtual ~tbUserMailInfo();

  tbUserMailInfo(const tbUserMailInfo& from);

  inline tbUserMailInfo& operator=(const tbUserMailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbUserMailInfo& default_instance();

  void Swap(tbUserMailInfo* other);

  // implements Message ----------------------------------------------

  tbUserMailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbUserMailInfo& from);
  void MergeFrom(const tbUserMailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional .proto_ff.UserMailInfo base_info = 2;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::proto_ff::UserMailInfo& base_info() const;
  inline ::proto_ff::UserMailInfo* mutable_base_info();
  inline ::proto_ff::UserMailInfo* release_base_info();
  inline void set_allocated_base_info(::proto_ff::UserMailInfo* base_info);

  // @@protoc_insertion_point(class_scope:proto_ff.tbUserMailInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_base_info();
  inline void clear_has_base_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::proto_ff::UserMailInfo* base_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbUserMailInfo* default_instance_;
};
// -------------------------------------------------------------------

class tbUserMailDetail : public ::google::protobuf::Message {
 public:
  tbUserMailDetail();
  virtual ~tbUserMailDetail();

  tbUserMailDetail(const tbUserMailDetail& from);

  inline tbUserMailDetail& operator=(const tbUserMailDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbUserMailDetail& default_instance();

  void Swap(tbUserMailDetail* other);

  // implements Message ----------------------------------------------

  tbUserMailDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbUserMailDetail& from);
  void MergeFrom(const tbUserMailDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string send_name = 3;
  inline bool has_send_name() const;
  inline void clear_send_name();
  static const int kSendNameFieldNumber = 3;
  inline const ::std::string& send_name() const;
  inline void set_send_name(const ::std::string& value);
  inline void set_send_name(const char* value);
  inline void set_send_name(const char* value, size_t size);
  inline ::std::string* mutable_send_name();
  inline ::std::string* release_send_name();
  inline void set_allocated_send_name(::std::string* send_name);

  // optional int32 static_id = 4;
  inline bool has_static_id() const;
  inline void clear_static_id();
  static const int kStaticIdFieldNumber = 4;
  inline ::google::protobuf::int32 static_id() const;
  inline void set_static_id(::google::protobuf::int32 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional uint64 send_time = 7;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 send_time() const;
  inline void set_send_time(::google::protobuf::uint64 value);

  // repeated string mail_name = 8;
  inline int mail_name_size() const;
  inline void clear_mail_name();
  static const int kMailNameFieldNumber = 8;
  inline const ::std::string& mail_name(int index) const;
  inline ::std::string* mutable_mail_name(int index);
  inline void set_mail_name(int index, const ::std::string& value);
  inline void set_mail_name(int index, const char* value);
  inline void set_mail_name(int index, const char* value, size_t size);
  inline ::std::string* add_mail_name();
  inline void add_mail_name(const ::std::string& value);
  inline void add_mail_name(const char* value);
  inline void add_mail_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mail_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mail_name();

  // optional int64 add_gold = 9;
  inline bool has_add_gold() const;
  inline void clear_add_gold();
  static const int kAddGoldFieldNumber = 9;
  inline ::google::protobuf::int64 add_gold() const;
  inline void set_add_gold(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbUserMailDetail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_send_name();
  inline void clear_has_send_name();
  inline void set_has_static_id();
  inline void clear_has_static_id();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_add_gold();
  inline void clear_has_add_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* send_name_;
  ::std::string* content_;
  ::std::string* title_;
  ::google::protobuf::uint64 send_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mail_name_;
  ::google::protobuf::int64 add_gold_;
  ::google::protobuf::int32 static_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbUserMailDetail* default_instance_;
};
// -------------------------------------------------------------------

class UserMailDetailInfo : public ::google::protobuf::Message {
 public:
  UserMailDetailInfo();
  virtual ~UserMailDetailInfo();

  UserMailDetailInfo(const UserMailDetailInfo& from);

  inline UserMailDetailInfo& operator=(const UserMailDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMailDetailInfo& default_instance();

  void Swap(UserMailDetailInfo* other);

  // implements Message ----------------------------------------------

  UserMailDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserMailDetailInfo& from);
  void MergeFrom(const UserMailDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.tbUserMailDetail simple_mail = 1;
  inline int simple_mail_size() const;
  inline void clear_simple_mail();
  static const int kSimpleMailFieldNumber = 1;
  inline const ::proto_ff::tbUserMailDetail& simple_mail(int index) const;
  inline ::proto_ff::tbUserMailDetail* mutable_simple_mail(int index);
  inline ::proto_ff::tbUserMailDetail* add_simple_mail();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tbUserMailDetail >&
      simple_mail() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tbUserMailDetail >*
      mutable_simple_mail();

  // @@protoc_insertion_point(class_scope:proto_ff.UserMailDetailInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::tbUserMailDetail > simple_mail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static UserMailDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class tbGiveBankJetton : public ::google::protobuf::Message {
 public:
  tbGiveBankJetton();
  virtual ~tbGiveBankJetton();

  tbGiveBankJetton(const tbGiveBankJetton& from);

  inline tbGiveBankJetton& operator=(const tbGiveBankJetton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbGiveBankJetton& default_instance();

  void Swap(tbGiveBankJetton* other);

  // implements Message ----------------------------------------------

  tbGiveBankJetton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbGiveBankJetton& from);
  void MergeFrom(const tbGiveBankJetton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint64 user_vip_level = 4;
  inline bool has_user_vip_level() const;
  inline void clear_user_vip_level();
  static const int kUserVipLevelFieldNumber = 4;
  inline ::google::protobuf::uint64 user_vip_level() const;
  inline void set_user_vip_level(::google::protobuf::uint64 value);

  // optional uint64 give_user_id = 5;
  inline bool has_give_user_id() const;
  inline void clear_give_user_id();
  static const int kGiveUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 give_user_id() const;
  inline void set_give_user_id(::google::protobuf::uint64 value);

  // optional string give_user_name = 6;
  inline bool has_give_user_name() const;
  inline void clear_give_user_name();
  static const int kGiveUserNameFieldNumber = 6;
  inline const ::std::string& give_user_name() const;
  inline void set_give_user_name(const ::std::string& value);
  inline void set_give_user_name(const char* value);
  inline void set_give_user_name(const char* value, size_t size);
  inline ::std::string* mutable_give_user_name();
  inline ::std::string* release_give_user_name();
  inline void set_allocated_give_user_name(::std::string* give_user_name);

  // optional uint64 give_jetton = 7;
  inline bool has_give_jetton() const;
  inline void clear_give_jetton();
  static const int kGiveJettonFieldNumber = 7;
  inline ::google::protobuf::uint64 give_jetton() const;
  inline void set_give_jetton(::google::protobuf::uint64 value);

  // optional uint32 give_user_vip_level = 8;
  inline bool has_give_user_vip_level() const;
  inline void clear_give_user_vip_level();
  static const int kGiveUserVipLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 give_user_vip_level() const;
  inline void set_give_user_vip_level(::google::protobuf::uint32 value);

  // optional uint32 status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint64 create_time = 10;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbGiveBankJetton)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_user_vip_level();
  inline void clear_has_user_vip_level();
  inline void set_has_give_user_id();
  inline void clear_has_give_user_id();
  inline void set_has_give_user_name();
  inline void clear_has_give_user_name();
  inline void set_has_give_jetton();
  inline void clear_has_give_jetton();
  inline void set_has_give_user_vip_level();
  inline void clear_has_give_user_vip_level();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::google::protobuf::uint64 user_vip_level_;
  ::google::protobuf::uint64 give_user_id_;
  ::std::string* give_user_name_;
  ::google::protobuf::uint64 give_jetton_;
  ::google::protobuf::uint32 give_user_vip_level_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint64 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbGiveBankJetton* default_instance_;
};
// -------------------------------------------------------------------

class UserMiscData : public ::google::protobuf::Message {
 public:
  UserMiscData();
  virtual ~UserMiscData();

  UserMiscData(const UserMiscData& from);

  inline UserMiscData& operator=(const UserMiscData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMiscData& default_instance();

  void Swap(UserMiscData* other);

  // implements Message ----------------------------------------------

  UserMiscData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserMiscData& from);
  void MergeFrom(const UserMiscData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 tmp_phone_num = 1;
  inline bool has_tmp_phone_num() const;
  inline void clear_tmp_phone_num();
  static const int kTmpPhoneNumFieldNumber = 1;
  inline ::google::protobuf::uint64 tmp_phone_num() const;
  inline void set_tmp_phone_num(::google::protobuf::uint64 value);

  // optional uint32 tmp_auth_code = 2;
  inline bool has_tmp_auth_code() const;
  inline void clear_tmp_auth_code();
  static const int kTmpAuthCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 tmp_auth_code() const;
  inline void set_tmp_auth_code(::google::protobuf::uint32 value);

  // optional uint64 auth_code_stamp = 3;
  inline bool has_auth_code_stamp() const;
  inline void clear_auth_code_stamp();
  static const int kAuthCodeStampFieldNumber = 3;
  inline ::google::protobuf::uint64 auth_code_stamp() const;
  inline void set_auth_code_stamp(::google::protobuf::uint64 value);

  // optional int32 tmp_code_type = 4;
  inline bool has_tmp_code_type() const;
  inline void clear_tmp_code_type();
  static const int kTmpCodeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 tmp_code_type() const;
  inline void set_tmp_code_type(::google::protobuf::int32 value);

  // optional bool tmp_code_success = 5;
  inline bool has_tmp_code_success() const;
  inline void clear_tmp_code_success();
  static const int kTmpCodeSuccessFieldNumber = 5;
  inline bool tmp_code_success() const;
  inline void set_tmp_code_success(bool value);

  // optional int32 tmp_redeemcard_recharge_count = 6;
  inline bool has_tmp_redeemcard_recharge_count() const;
  inline void clear_tmp_redeemcard_recharge_count();
  static const int kTmpRedeemcardRechargeCountFieldNumber = 6;
  inline ::google::protobuf::int32 tmp_redeemcard_recharge_count() const;
  inline void set_tmp_redeemcard_recharge_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.UserMiscData)
 private:
  inline void set_has_tmp_phone_num();
  inline void clear_has_tmp_phone_num();
  inline void set_has_tmp_auth_code();
  inline void clear_has_tmp_auth_code();
  inline void set_has_auth_code_stamp();
  inline void clear_has_auth_code_stamp();
  inline void set_has_tmp_code_type();
  inline void clear_has_tmp_code_type();
  inline void set_has_tmp_code_success();
  inline void clear_has_tmp_code_success();
  inline void set_has_tmp_redeemcard_recharge_count();
  inline void clear_has_tmp_redeemcard_recharge_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 tmp_phone_num_;
  ::google::protobuf::uint64 auth_code_stamp_;
  ::google::protobuf::uint32 tmp_auth_code_;
  ::google::protobuf::int32 tmp_code_type_;
  bool tmp_code_success_;
  ::google::protobuf::int32 tmp_redeemcard_recharge_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static UserMiscData* default_instance_;
};
// -------------------------------------------------------------------

class tbUserDetailData : public ::google::protobuf::Message {
 public:
  tbUserDetailData();
  virtual ~tbUserDetailData();

  tbUserDetailData(const tbUserDetailData& from);

  inline tbUserDetailData& operator=(const tbUserDetailData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbUserDetailData& default_instance();

  void Swap(tbUserDetailData* other);

  // implements Message ----------------------------------------------

  tbUserDetailData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbUserDetailData& from);
  void MergeFrom(const tbUserDetailData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 faceid = 3;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 3;
  inline ::google::protobuf::uint32 faceid() const;
  inline void set_faceid(::google::protobuf::uint32 value);

  // optional uint64 regdate = 4;
  inline bool has_regdate() const;
  inline void clear_regdate();
  static const int kRegdateFieldNumber = 4;
  inline ::google::protobuf::uint64 regdate() const;
  inline void set_regdate(::google::protobuf::uint64 value);

  // optional uint32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 age = 6;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 6;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional string email = 7;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 7;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional uint64 phonenum = 8;
  inline bool has_phonenum() const;
  inline void clear_phonenum();
  static const int kPhonenumFieldNumber = 8;
  inline ::google::protobuf::uint64 phonenum() const;
  inline void set_phonenum(::google::protobuf::uint64 value);

  // optional uint64 jetton = 9;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 9;
  inline ::google::protobuf::uint64 jetton() const;
  inline void set_jetton(::google::protobuf::uint64 value);

  // optional string country = 10;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 10;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string province = 11;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 11;
  inline const ::std::string& province() const;
  inline void set_province(const ::std::string& value);
  inline void set_province(const char* value);
  inline void set_province(const char* value, size_t size);
  inline ::std::string* mutable_province();
  inline ::std::string* release_province();
  inline void set_allocated_province(::std::string* province);

  // optional string city = 12;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 12;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional bool isrobot = 13;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsrobotFieldNumber = 13;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // optional string bank_password = 14;
  inline bool has_bank_password() const;
  inline void clear_bank_password();
  static const int kBankPasswordFieldNumber = 14;
  inline const ::std::string& bank_password() const;
  inline void set_bank_password(const ::std::string& value);
  inline void set_bank_password(const char* value);
  inline void set_bank_password(const char* value, size_t size);
  inline ::std::string* mutable_bank_password();
  inline ::std::string* release_bank_password();
  inline void set_allocated_bank_password(::std::string* bank_password);

  // optional uint64 bank_jetton = 15;
  inline bool has_bank_jetton() const;
  inline void clear_bank_jetton();
  static const int kBankJettonFieldNumber = 15;
  inline ::google::protobuf::uint64 bank_jetton() const;
  inline void set_bank_jetton(::google::protobuf::uint64 value);

  // optional string ip = 16;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 16;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 last_login_time = 17;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 17;
  inline ::google::protobuf::uint64 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint64 value);

  // optional uint64 last_logout_time = 18;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 18;
  inline ::google::protobuf::uint64 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint64 value);

  // optional uint32 aread_id = 19;
  inline bool has_aread_id() const;
  inline void clear_aread_id();
  static const int kAreadIdFieldNumber = 19;
  inline ::google::protobuf::uint32 aread_id() const;
  inline void set_aread_id(::google::protobuf::uint32 value);

  // optional uint32 channel_id = 20;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 20;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional string platform_os = 21;
  inline bool has_platform_os() const;
  inline void clear_platform_os();
  static const int kPlatformOsFieldNumber = 21;
  inline const ::std::string& platform_os() const;
  inline void set_platform_os(const ::std::string& value);
  inline void set_platform_os(const char* value);
  inline void set_platform_os(const char* value, size_t size);
  inline ::std::string* mutable_platform_os();
  inline ::std::string* release_platform_os();
  inline void set_allocated_platform_os(::std::string* platform_os);

  // optional string phone_model = 22;
  inline bool has_phone_model() const;
  inline void clear_phone_model();
  static const int kPhoneModelFieldNumber = 22;
  inline const ::std::string& phone_model() const;
  inline void set_phone_model(const ::std::string& value);
  inline void set_phone_model(const char* value);
  inline void set_phone_model(const char* value, size_t size);
  inline ::std::string* mutable_phone_model();
  inline ::std::string* release_phone_model();
  inline void set_allocated_phone_model(::std::string* phone_model);

  // optional bool first_recharge = 23;
  inline bool has_first_recharge() const;
  inline void clear_first_recharge();
  static const int kFirstRechargeFieldNumber = 23;
  inline bool first_recharge() const;
  inline void set_first_recharge(bool value);

  // optional uint64 agent_id = 24;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 24;
  inline ::google::protobuf::uint64 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint64 value);

  // optional uint64 referrer_id = 25;
  inline bool has_referrer_id() const;
  inline void clear_referrer_id();
  static const int kReferrerIdFieldNumber = 25;
  inline ::google::protobuf::uint64 referrer_id() const;
  inline void set_referrer_id(::google::protobuf::uint64 value);

  // optional uint32 vip_level = 26;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 26;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional .proto_ff.UserMiscData misc_data = 27;
  inline bool has_misc_data() const;
  inline void clear_misc_data();
  static const int kMiscDataFieldNumber = 27;
  inline const ::proto_ff::UserMiscData& misc_data() const;
  inline ::proto_ff::UserMiscData* mutable_misc_data();
  inline ::proto_ff::UserMiscData* release_misc_data();
  inline void set_allocated_misc_data(::proto_ff::UserMiscData* misc_data);

  // optional bool online = 28;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 28;
  inline bool online() const;
  inline void set_online(bool value);

  // optional uint32 game_id = 29;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 29;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 30;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 30;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional int64 all_win = 31;
  inline bool has_all_win() const;
  inline void clear_all_win();
  static const int kAllWinFieldNumber = 31;
  inline ::google::protobuf::int64 all_win() const;
  inline void set_all_win(::google::protobuf::int64 value);

  // optional uint64 all_recharge = 32;
  inline bool has_all_recharge() const;
  inline void clear_all_recharge();
  static const int kAllRechargeFieldNumber = 32;
  inline ::google::protobuf::uint64 all_recharge() const;
  inline void set_all_recharge(::google::protobuf::uint64 value);

  // optional uint64 all_give = 33;
  inline bool has_all_give() const;
  inline void clear_all_give();
  static const int kAllGiveFieldNumber = 33;
  inline ::google::protobuf::uint64 all_give() const;
  inline void set_all_give(::google::protobuf::uint64 value);

  // optional uint64 all_draw = 34;
  inline bool has_all_draw() const;
  inline void clear_all_draw();
  static const int kAllDrawFieldNumber = 34;
  inline ::google::protobuf::uint64 all_draw() const;
  inline void set_all_draw(::google::protobuf::uint64 value);

  // optional int64 today_win = 35;
  inline bool has_today_win() const;
  inline void clear_today_win();
  static const int kTodayWinFieldNumber = 35;
  inline ::google::protobuf::int64 today_win() const;
  inline void set_today_win(::google::protobuf::int64 value);

  // optional uint64 today_recharge = 36;
  inline bool has_today_recharge() const;
  inline void clear_today_recharge();
  static const int kTodayRechargeFieldNumber = 36;
  inline ::google::protobuf::uint64 today_recharge() const;
  inline void set_today_recharge(::google::protobuf::uint64 value);

  // optional uint64 today_give = 37;
  inline bool has_today_give() const;
  inline void clear_today_give();
  static const int kTodayGiveFieldNumber = 37;
  inline ::google::protobuf::uint64 today_give() const;
  inline void set_today_give(::google::protobuf::uint64 value);

  // optional uint64 today_draw = 38;
  inline bool has_today_draw() const;
  inline void clear_today_draw();
  static const int kTodayDrawFieldNumber = 38;
  inline ::google::protobuf::uint64 today_draw() const;
  inline void set_today_draw(::google::protobuf::uint64 value);

  // optional int64 week_win = 39;
  inline bool has_week_win() const;
  inline void clear_week_win();
  static const int kWeekWinFieldNumber = 39;
  inline ::google::protobuf::int64 week_win() const;
  inline void set_week_win(::google::protobuf::int64 value);

  // optional uint64 week_recharge = 40;
  inline bool has_week_recharge() const;
  inline void clear_week_recharge();
  static const int kWeekRechargeFieldNumber = 40;
  inline ::google::protobuf::uint64 week_recharge() const;
  inline void set_week_recharge(::google::protobuf::uint64 value);

  // optional uint64 week_give = 41;
  inline bool has_week_give() const;
  inline void clear_week_give();
  static const int kWeekGiveFieldNumber = 41;
  inline ::google::protobuf::uint64 week_give() const;
  inline void set_week_give(::google::protobuf::uint64 value);

  // optional uint64 week_draw = 42;
  inline bool has_week_draw() const;
  inline void clear_week_draw();
  static const int kWeekDrawFieldNumber = 42;
  inline ::google::protobuf::uint64 week_draw() const;
  inline void set_week_draw(::google::protobuf::uint64 value);

  // optional int64 month_win = 43;
  inline bool has_month_win() const;
  inline void clear_month_win();
  static const int kMonthWinFieldNumber = 43;
  inline ::google::protobuf::int64 month_win() const;
  inline void set_month_win(::google::protobuf::int64 value);

  // optional uint64 month_recharge = 44;
  inline bool has_month_recharge() const;
  inline void clear_month_recharge();
  static const int kMonthRechargeFieldNumber = 44;
  inline ::google::protobuf::uint64 month_recharge() const;
  inline void set_month_recharge(::google::protobuf::uint64 value);

  // optional uint64 month_give = 45;
  inline bool has_month_give() const;
  inline void clear_month_give();
  static const int kMonthGiveFieldNumber = 45;
  inline ::google::protobuf::uint64 month_give() const;
  inline void set_month_give(::google::protobuf::uint64 value);

  // optional uint64 month_draw = 46;
  inline bool has_month_draw() const;
  inline void clear_month_draw();
  static const int kMonthDrawFieldNumber = 46;
  inline ::google::protobuf::uint64 month_draw() const;
  inline void set_month_draw(::google::protobuf::uint64 value);

  // optional uint32 is_ban = 47;
  inline bool has_is_ban() const;
  inline void clear_is_ban();
  static const int kIsBanFieldNumber = 47;
  inline ::google::protobuf::uint32 is_ban() const;
  inline void set_is_ban(::google::protobuf::uint32 value);

  // optional uint32 no_transfer = 48;
  inline bool has_no_transfer() const;
  inline void clear_no_transfer();
  static const int kNoTransferFieldNumber = 48;
  inline ::google::protobuf::uint32 no_transfer() const;
  inline void set_no_transfer(::google::protobuf::uint32 value);

  // optional string reg_ip = 49;
  inline bool has_reg_ip() const;
  inline void clear_reg_ip();
  static const int kRegIpFieldNumber = 49;
  inline const ::std::string& reg_ip() const;
  inline void set_reg_ip(const ::std::string& value);
  inline void set_reg_ip(const char* value);
  inline void set_reg_ip(const char* value, size_t size);
  inline ::std::string* mutable_reg_ip();
  inline ::std::string* release_reg_ip();
  inline void set_allocated_reg_ip(::std::string* reg_ip);

  // optional string device_id = 50;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 50;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional string reg_device_id = 51;
  inline bool has_reg_device_id() const;
  inline void clear_reg_device_id();
  static const int kRegDeviceIdFieldNumber = 51;
  inline const ::std::string& reg_device_id() const;
  inline void set_reg_device_id(const ::std::string& value);
  inline void set_reg_device_id(const char* value);
  inline void set_reg_device_id(const char* value, size_t size);
  inline ::std::string* mutable_reg_device_id();
  inline ::std::string* release_reg_device_id();
  inline void set_allocated_reg_device_id(::std::string* reg_device_id);

  // optional uint64 show_userid = 52;
  inline bool has_show_userid() const;
  inline void clear_show_userid();
  static const int kShowUseridFieldNumber = 52;
  inline ::google::protobuf::uint64 show_userid() const;
  inline void set_show_userid(::google::protobuf::uint64 value);

  // optional uint64 all_vip_zhuanru = 53;
  inline bool has_all_vip_zhuanru() const;
  inline void clear_all_vip_zhuanru();
  static const int kAllVipZhuanruFieldNumber = 53;
  inline ::google::protobuf::uint64 all_vip_zhuanru() const;
  inline void set_all_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 today_vip_zhuanru = 54;
  inline bool has_today_vip_zhuanru() const;
  inline void clear_today_vip_zhuanru();
  static const int kTodayVipZhuanruFieldNumber = 54;
  inline ::google::protobuf::uint64 today_vip_zhuanru() const;
  inline void set_today_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 week_vip_zhuanru = 55;
  inline bool has_week_vip_zhuanru() const;
  inline void clear_week_vip_zhuanru();
  static const int kWeekVipZhuanruFieldNumber = 55;
  inline ::google::protobuf::uint64 week_vip_zhuanru() const;
  inline void set_week_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 month_vip_zhuanru = 56;
  inline bool has_month_vip_zhuanru() const;
  inline void clear_month_vip_zhuanru();
  static const int kMonthVipZhuanruFieldNumber = 56;
  inline ::google::protobuf::uint64 month_vip_zhuanru() const;
  inline void set_month_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 all_vip_zhuanchu = 57;
  inline bool has_all_vip_zhuanchu() const;
  inline void clear_all_vip_zhuanchu();
  static const int kAllVipZhuanchuFieldNumber = 57;
  inline ::google::protobuf::uint64 all_vip_zhuanchu() const;
  inline void set_all_vip_zhuanchu(::google::protobuf::uint64 value);

  // optional uint64 today_vip_zhuanchu = 58;
  inline bool has_today_vip_zhuanchu() const;
  inline void clear_today_vip_zhuanchu();
  static const int kTodayVipZhuanchuFieldNumber = 58;
  inline ::google::protobuf::uint64 today_vip_zhuanchu() const;
  inline void set_today_vip_zhuanchu(::google::protobuf::uint64 value);

  // optional uint64 week_vip_zhuanchu = 59;
  inline bool has_week_vip_zhuanchu() const;
  inline void clear_week_vip_zhuanchu();
  static const int kWeekVipZhuanchuFieldNumber = 59;
  inline ::google::protobuf::uint64 week_vip_zhuanchu() const;
  inline void set_week_vip_zhuanchu(::google::protobuf::uint64 value);

  // optional uint64 month_vip_zhuanchu = 60;
  inline bool has_month_vip_zhuanchu() const;
  inline void clear_month_vip_zhuanchu();
  static const int kMonthVipZhuanchuFieldNumber = 60;
  inline ::google::protobuf::uint64 month_vip_zhuanchu() const;
  inline void set_month_vip_zhuanchu(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbUserDetailData)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_regdate();
  inline void clear_has_regdate();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_phonenum();
  inline void clear_has_phonenum();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  inline void set_has_bank_password();
  inline void clear_has_bank_password();
  inline void set_has_bank_jetton();
  inline void clear_has_bank_jetton();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_aread_id();
  inline void clear_has_aread_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_platform_os();
  inline void clear_has_platform_os();
  inline void set_has_phone_model();
  inline void clear_has_phone_model();
  inline void set_has_first_recharge();
  inline void clear_has_first_recharge();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_referrer_id();
  inline void clear_has_referrer_id();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_misc_data();
  inline void clear_has_misc_data();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_all_win();
  inline void clear_has_all_win();
  inline void set_has_all_recharge();
  inline void clear_has_all_recharge();
  inline void set_has_all_give();
  inline void clear_has_all_give();
  inline void set_has_all_draw();
  inline void clear_has_all_draw();
  inline void set_has_today_win();
  inline void clear_has_today_win();
  inline void set_has_today_recharge();
  inline void clear_has_today_recharge();
  inline void set_has_today_give();
  inline void clear_has_today_give();
  inline void set_has_today_draw();
  inline void clear_has_today_draw();
  inline void set_has_week_win();
  inline void clear_has_week_win();
  inline void set_has_week_recharge();
  inline void clear_has_week_recharge();
  inline void set_has_week_give();
  inline void clear_has_week_give();
  inline void set_has_week_draw();
  inline void clear_has_week_draw();
  inline void set_has_month_win();
  inline void clear_has_month_win();
  inline void set_has_month_recharge();
  inline void clear_has_month_recharge();
  inline void set_has_month_give();
  inline void clear_has_month_give();
  inline void set_has_month_draw();
  inline void clear_has_month_draw();
  inline void set_has_is_ban();
  inline void clear_has_is_ban();
  inline void set_has_no_transfer();
  inline void clear_has_no_transfer();
  inline void set_has_reg_ip();
  inline void clear_has_reg_ip();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_reg_device_id();
  inline void clear_has_reg_device_id();
  inline void set_has_show_userid();
  inline void clear_has_show_userid();
  inline void set_has_all_vip_zhuanru();
  inline void clear_has_all_vip_zhuanru();
  inline void set_has_today_vip_zhuanru();
  inline void clear_has_today_vip_zhuanru();
  inline void set_has_week_vip_zhuanru();
  inline void clear_has_week_vip_zhuanru();
  inline void set_has_month_vip_zhuanru();
  inline void clear_has_month_vip_zhuanru();
  inline void set_has_all_vip_zhuanchu();
  inline void clear_has_all_vip_zhuanchu();
  inline void set_has_today_vip_zhuanchu();
  inline void clear_has_today_vip_zhuanchu();
  inline void set_has_week_vip_zhuanchu();
  inline void clear_has_week_vip_zhuanchu();
  inline void set_has_month_vip_zhuanchu();
  inline void clear_has_month_vip_zhuanchu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 userid_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 faceid_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint64 regdate_;
  ::std::string* email_;
  ::google::protobuf::uint64 phonenum_;
  ::google::protobuf::uint64 jetton_;
  ::std::string* country_;
  ::std::string* province_;
  ::std::string* city_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 aread_id_;
  ::std::string* bank_password_;
  ::google::protobuf::uint64 bank_jetton_;
  ::std::string* ip_;
  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint64 last_logout_time_;
  ::std::string* platform_os_;
  ::google::protobuf::uint32 channel_id_;
  bool isrobot_;
  bool first_recharge_;
  bool online_;
  ::std::string* phone_model_;
  ::google::protobuf::uint64 agent_id_;
  ::google::protobuf::uint64 referrer_id_;
  ::proto_ff::UserMiscData* misc_data_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::int64 all_win_;
  ::google::protobuf::uint64 all_recharge_;
  ::google::protobuf::uint64 all_give_;
  ::google::protobuf::uint64 all_draw_;
  ::google::protobuf::int64 today_win_;
  ::google::protobuf::uint64 today_recharge_;
  ::google::protobuf::uint64 today_give_;
  ::google::protobuf::uint64 today_draw_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 is_ban_;
  ::google::protobuf::int64 week_win_;
  ::google::protobuf::uint64 week_recharge_;
  ::google::protobuf::uint64 week_give_;
  ::google::protobuf::uint64 week_draw_;
  ::google::protobuf::int64 month_win_;
  ::google::protobuf::uint64 month_recharge_;
  ::google::protobuf::uint64 month_give_;
  ::google::protobuf::uint64 month_draw_;
  ::std::string* reg_ip_;
  ::std::string* device_id_;
  ::std::string* reg_device_id_;
  ::google::protobuf::uint64 show_userid_;
  ::google::protobuf::uint64 all_vip_zhuanru_;
  ::google::protobuf::uint64 today_vip_zhuanru_;
  ::google::protobuf::uint64 week_vip_zhuanru_;
  ::google::protobuf::uint64 month_vip_zhuanru_;
  ::google::protobuf::uint64 all_vip_zhuanchu_;
  ::google::protobuf::uint64 today_vip_zhuanchu_;
  ::google::protobuf::uint64 week_vip_zhuanchu_;
  ::google::protobuf::uint64 month_vip_zhuanchu_;
  ::google::protobuf::uint32 no_transfer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(60 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbUserDetailData* default_instance_;
};
// -------------------------------------------------------------------

class UserSimpleMiscData : public ::google::protobuf::Message {
 public:
  UserSimpleMiscData();
  virtual ~UserSimpleMiscData();

  UserSimpleMiscData(const UserSimpleMiscData& from);

  inline UserSimpleMiscData& operator=(const UserSimpleMiscData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSimpleMiscData& default_instance();

  void Swap(UserSimpleMiscData* other);

  // implements Message ----------------------------------------------

  UserSimpleMiscData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSimpleMiscData& from);
  void MergeFrom(const UserSimpleMiscData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 last_valid_player_time = 1;
  inline bool has_last_valid_player_time() const;
  inline void clear_last_valid_player_time();
  static const int kLastValidPlayerTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 last_valid_player_time() const;
  inline void set_last_valid_player_time(::google::protobuf::uint64 value);

  // optional uint64 last_pay_player_time = 2;
  inline bool has_last_pay_player_time() const;
  inline void clear_last_pay_player_time();
  static const int kLastPayPlayerTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 last_pay_player_time() const;
  inline void set_last_pay_player_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.UserSimpleMiscData)
 private:
  inline void set_has_last_valid_player_time();
  inline void clear_has_last_valid_player_time();
  inline void set_has_last_pay_player_time();
  inline void clear_has_last_pay_player_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 last_valid_player_time_;
  ::google::protobuf::uint64 last_pay_player_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static UserSimpleMiscData* default_instance_;
};
// -------------------------------------------------------------------

class tbUserSimpleData : public ::google::protobuf::Message {
 public:
  tbUserSimpleData();
  virtual ~tbUserSimpleData();

  tbUserSimpleData(const tbUserSimpleData& from);

  inline tbUserSimpleData& operator=(const tbUserSimpleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbUserSimpleData& default_instance();

  void Swap(tbUserSimpleData* other);

  // implements Message ----------------------------------------------

  tbUserSimpleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbUserSimpleData& from);
  void MergeFrom(const tbUserSimpleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 face = 3;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 3;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 age = 5;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 5;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional uint64 agentid = 6;
  inline bool has_agentid() const;
  inline void clear_agentid();
  static const int kAgentidFieldNumber = 6;
  inline ::google::protobuf::uint64 agentid() const;
  inline void set_agentid(::google::protobuf::uint64 value);

  // optional uint64 create_time = 7;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // optional bool is_robot = 8;
  inline bool has_is_robot() const;
  inline void clear_is_robot();
  static const int kIsRobotFieldNumber = 8;
  inline bool is_robot() const;
  inline void set_is_robot(bool value);

  // optional uint32 agent_level = 9;
  inline bool has_agent_level() const;
  inline void clear_agent_level();
  static const int kAgentLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 agent_level() const;
  inline void set_agent_level(::google::protobuf::uint32 value);

  // optional uint64 ach_day = 10;
  inline bool has_ach_day() const;
  inline void clear_ach_day();
  static const int kAchDayFieldNumber = 10;
  inline ::google::protobuf::uint64 ach_day() const;
  inline void set_ach_day(::google::protobuf::uint64 value);

  // optional uint64 ach_week = 11;
  inline bool has_ach_week() const;
  inline void clear_ach_week();
  static const int kAchWeekFieldNumber = 11;
  inline ::google::protobuf::uint64 ach_week() const;
  inline void set_ach_week(::google::protobuf::uint64 value);

  // optional uint64 ach_month = 12;
  inline bool has_ach_month() const;
  inline void clear_ach_month();
  static const int kAchMonthFieldNumber = 12;
  inline ::google::protobuf::uint64 ach_month() const;
  inline void set_ach_month(::google::protobuf::uint64 value);

  // optional uint64 ach_all = 13;
  inline bool has_ach_all() const;
  inline void clear_ach_all();
  static const int kAchAllFieldNumber = 13;
  inline ::google::protobuf::uint64 ach_all() const;
  inline void set_ach_all(::google::protobuf::uint64 value);

  // optional uint64 ach_team_day = 14;
  inline bool has_ach_team_day() const;
  inline void clear_ach_team_day();
  static const int kAchTeamDayFieldNumber = 14;
  inline ::google::protobuf::uint64 ach_team_day() const;
  inline void set_ach_team_day(::google::protobuf::uint64 value);

  // optional uint64 ach_team_week = 15;
  inline bool has_ach_team_week() const;
  inline void clear_ach_team_week();
  static const int kAchTeamWeekFieldNumber = 15;
  inline ::google::protobuf::uint64 ach_team_week() const;
  inline void set_ach_team_week(::google::protobuf::uint64 value);

  // optional uint64 ach_team_month = 17;
  inline bool has_ach_team_month() const;
  inline void clear_ach_team_month();
  static const int kAchTeamMonthFieldNumber = 17;
  inline ::google::protobuf::uint64 ach_team_month() const;
  inline void set_ach_team_month(::google::protobuf::uint64 value);

  // optional uint64 ach_team_all = 18;
  inline bool has_ach_team_all() const;
  inline void clear_ach_team_all();
  static const int kAchTeamAllFieldNumber = 18;
  inline ::google::protobuf::uint64 ach_team_all() const;
  inline void set_ach_team_all(::google::protobuf::uint64 value);

  // optional uint64 team_user_num = 19;
  inline bool has_team_user_num() const;
  inline void clear_team_user_num();
  static const int kTeamUserNumFieldNumber = 19;
  inline ::google::protobuf::uint64 team_user_num() const;
  inline void set_team_user_num(::google::protobuf::uint64 value);

  // optional uint64 new_user_day = 20;
  inline bool has_new_user_day() const;
  inline void clear_new_user_day();
  static const int kNewUserDayFieldNumber = 20;
  inline ::google::protobuf::uint64 new_user_day() const;
  inline void set_new_user_day(::google::protobuf::uint64 value);

  // optional uint64 activity_user_day = 21;
  inline bool has_activity_user_day() const;
  inline void clear_activity_user_day();
  static const int kActivityUserDayFieldNumber = 21;
  inline ::google::protobuf::uint64 activity_user_day() const;
  inline void set_activity_user_day(::google::protobuf::uint64 value);

  // optional uint32 getrate = 22;
  inline bool has_getrate() const;
  inline void clear_getrate();
  static const int kGetrateFieldNumber = 22;
  inline ::google::protobuf::uint32 getrate() const;
  inline void set_getrate(::google::protobuf::uint32 value);

  // optional uint32 tax_getrate = 23;
  inline bool has_tax_getrate() const;
  inline void clear_tax_getrate();
  static const int kTaxGetrateFieldNumber = 23;
  inline ::google::protobuf::uint32 tax_getrate() const;
  inline void set_tax_getrate(::google::protobuf::uint32 value);

  // optional uint32 takemoney = 24;
  inline bool has_takemoney() const;
  inline void clear_takemoney();
  static const int kTakemoneyFieldNumber = 24;
  inline ::google::protobuf::uint32 takemoney() const;
  inline void set_takemoney(::google::protobuf::uint32 value);

  // optional uint32 tax_takemoney = 25;
  inline bool has_tax_takemoney() const;
  inline void clear_tax_takemoney();
  static const int kTaxTakemoneyFieldNumber = 25;
  inline ::google::protobuf::uint32 tax_takemoney() const;
  inline void set_tax_takemoney(::google::protobuf::uint32 value);

  // optional uint64 all_takemoney = 26;
  inline bool has_all_takemoney() const;
  inline void clear_all_takemoney();
  static const int kAllTakemoneyFieldNumber = 26;
  inline ::google::protobuf::uint64 all_takemoney() const;
  inline void set_all_takemoney(::google::protobuf::uint64 value);

  // optional uint64 all_fee = 27;
  inline bool has_all_fee() const;
  inline void clear_all_fee();
  static const int kAllFeeFieldNumber = 27;
  inline ::google::protobuf::uint64 all_fee() const;
  inline void set_all_fee(::google::protobuf::uint64 value);

  // optional uint64 show_userid = 28;
  inline bool has_show_userid() const;
  inline void clear_show_userid();
  static const int kShowUseridFieldNumber = 28;
  inline ::google::protobuf::uint64 show_userid() const;
  inline void set_show_userid(::google::protobuf::uint64 value);

  // optional uint64 vip_level = 29;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 29;
  inline ::google::protobuf::uint64 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint64 value);

  // optional .proto_ff.UserSimpleMiscData misc_data = 30;
  inline bool has_misc_data() const;
  inline void clear_misc_data();
  static const int kMiscDataFieldNumber = 30;
  inline const ::proto_ff::UserSimpleMiscData& misc_data() const;
  inline ::proto_ff::UserSimpleMiscData* mutable_misc_data();
  inline ::proto_ff::UserSimpleMiscData* release_misc_data();
  inline void set_allocated_misc_data(::proto_ff::UserSimpleMiscData* misc_data);

  // @@protoc_insertion_point(class_scope:proto_ff.tbUserSimpleData)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_agentid();
  inline void clear_has_agentid();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_is_robot();
  inline void clear_has_is_robot();
  inline void set_has_agent_level();
  inline void clear_has_agent_level();
  inline void set_has_ach_day();
  inline void clear_has_ach_day();
  inline void set_has_ach_week();
  inline void clear_has_ach_week();
  inline void set_has_ach_month();
  inline void clear_has_ach_month();
  inline void set_has_ach_all();
  inline void clear_has_ach_all();
  inline void set_has_ach_team_day();
  inline void clear_has_ach_team_day();
  inline void set_has_ach_team_week();
  inline void clear_has_ach_team_week();
  inline void set_has_ach_team_month();
  inline void clear_has_ach_team_month();
  inline void set_has_ach_team_all();
  inline void clear_has_ach_team_all();
  inline void set_has_team_user_num();
  inline void clear_has_team_user_num();
  inline void set_has_new_user_day();
  inline void clear_has_new_user_day();
  inline void set_has_activity_user_day();
  inline void clear_has_activity_user_day();
  inline void set_has_getrate();
  inline void clear_has_getrate();
  inline void set_has_tax_getrate();
  inline void clear_has_tax_getrate();
  inline void set_has_takemoney();
  inline void clear_has_takemoney();
  inline void set_has_tax_takemoney();
  inline void clear_has_tax_takemoney();
  inline void set_has_all_takemoney();
  inline void clear_has_all_takemoney();
  inline void set_has_all_fee();
  inline void clear_has_all_fee();
  inline void set_has_show_userid();
  inline void clear_has_show_userid();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_misc_data();
  inline void clear_has_misc_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 userid_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint64 agentid_;
  ::google::protobuf::uint32 age_;
  bool is_robot_;
  ::google::protobuf::uint64 create_time_;
  ::google::protobuf::uint64 ach_day_;
  ::google::protobuf::uint64 ach_week_;
  ::google::protobuf::uint64 ach_month_;
  ::google::protobuf::uint64 ach_all_;
  ::google::protobuf::uint64 ach_team_day_;
  ::google::protobuf::uint64 ach_team_week_;
  ::google::protobuf::uint32 agent_level_;
  ::google::protobuf::uint32 getrate_;
  ::google::protobuf::uint64 ach_team_month_;
  ::google::protobuf::uint64 ach_team_all_;
  ::google::protobuf::uint64 team_user_num_;
  ::google::protobuf::uint64 new_user_day_;
  ::google::protobuf::uint64 activity_user_day_;
  ::google::protobuf::uint32 tax_getrate_;
  ::google::protobuf::uint32 takemoney_;
  ::google::protobuf::uint64 all_takemoney_;
  ::google::protobuf::uint64 all_fee_;
  ::google::protobuf::uint64 show_userid_;
  ::google::protobuf::uint64 vip_level_;
  ::proto_ff::UserSimpleMiscData* misc_data_;
  ::google::protobuf::uint32 tax_takemoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbUserSimpleData* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayerWealthData : public ::google::protobuf::Message {
 public:
  GamePlayerWealthData();
  virtual ~GamePlayerWealthData();

  GamePlayerWealthData(const GamePlayerWealthData& from);

  inline GamePlayerWealthData& operator=(const GamePlayerWealthData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePlayerWealthData& default_instance();

  void Swap(GamePlayerWealthData* other);

  // implements Message ----------------------------------------------

  GamePlayerWealthData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamePlayerWealthData& from);
  void MergeFrom(const GamePlayerWealthData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional int64 recharge = 2;
  inline bool has_recharge() const;
  inline void clear_recharge();
  static const int kRechargeFieldNumber = 2;
  inline ::google::protobuf::int64 recharge() const;
  inline void set_recharge(::google::protobuf::int64 value);

  // optional int64 total_lost = 3;
  inline bool has_total_lost() const;
  inline void clear_total_lost();
  static const int kTotalLostFieldNumber = 3;
  inline ::google::protobuf::int64 total_lost() const;
  inline void set_total_lost(::google::protobuf::int64 value);

  // optional int64 total_win = 4;
  inline bool has_total_win() const;
  inline void clear_total_win();
  static const int kTotalWinFieldNumber = 4;
  inline ::google::protobuf::int64 total_win() const;
  inline void set_total_win(::google::protobuf::int64 value);

  // optional int64 this_game_lost = 5;
  inline bool has_this_game_lost() const;
  inline void clear_this_game_lost();
  static const int kThisGameLostFieldNumber = 5;
  inline ::google::protobuf::int64 this_game_lost() const;
  inline void set_this_game_lost(::google::protobuf::int64 value);

  // optional int64 this_game_win = 6;
  inline bool has_this_game_win() const;
  inline void clear_this_game_win();
  static const int kThisGameWinFieldNumber = 6;
  inline ::google::protobuf::int64 this_game_win() const;
  inline void set_this_game_win(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GamePlayerWealthData)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_recharge();
  inline void clear_has_recharge();
  inline void set_has_total_lost();
  inline void clear_has_total_lost();
  inline void set_has_total_win();
  inline void clear_has_total_win();
  inline void set_has_this_game_lost();
  inline void clear_has_this_game_lost();
  inline void set_has_this_game_win();
  inline void clear_has_this_game_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::int64 recharge_;
  ::google::protobuf::int64 total_lost_;
  ::google::protobuf::int64 total_win_;
  ::google::protobuf::int64 this_game_lost_;
  ::google::protobuf::int64 this_game_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GamePlayerWealthData* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayerDetailData : public ::google::protobuf::Message {
 public:
  GamePlayerDetailData();
  virtual ~GamePlayerDetailData();

  GamePlayerDetailData(const GamePlayerDetailData& from);

  inline GamePlayerDetailData& operator=(const GamePlayerDetailData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePlayerDetailData& default_instance();

  void Swap(GamePlayerDetailData* other);

  // implements Message ----------------------------------------------

  GamePlayerDetailData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamePlayerDetailData& from);
  void MergeFrom(const GamePlayerDetailData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional int64 cur_money = 2;
  inline bool has_cur_money() const;
  inline void clear_cur_money();
  static const int kCurMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 cur_money() const;
  inline void set_cur_money(::google::protobuf::int64 value);

  // optional uint32 vip_level = 3;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional int32 chair_id = 5;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 5;
  inline ::google::protobuf::int32 chair_id() const;
  inline void set_chair_id(::google::protobuf::int32 value);

  // optional string nick_name = 6;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 6;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional uint32 face = 7;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 7;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional bool isRobot = 8;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 8;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // @@protoc_insertion_point(class_scope:proto_ff.GamePlayerDetailData)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_cur_money();
  inline void clear_has_cur_money();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::int64 cur_money_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 sex_;
  ::std::string* nick_name_;
  ::google::protobuf::int32 chair_id_;
  ::google::protobuf::uint32 face_;
  bool isrobot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GamePlayerDetailData* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayerAchievementData : public ::google::protobuf::Message {
 public:
  GamePlayerAchievementData();
  virtual ~GamePlayerAchievementData();

  GamePlayerAchievementData(const GamePlayerAchievementData& from);

  inline GamePlayerAchievementData& operator=(const GamePlayerAchievementData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePlayerAchievementData& default_instance();

  void Swap(GamePlayerAchievementData* other);

  // implements Message ----------------------------------------------

  GamePlayerAchievementData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamePlayerAchievementData& from);
  void MergeFrom(const GamePlayerAchievementData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cur_ach = 2;
  inline bool has_cur_ach() const;
  inline void clear_cur_ach();
  static const int kCurAchFieldNumber = 2;
  inline ::google::protobuf::uint64 cur_ach() const;
  inline void set_cur_ach(::google::protobuf::uint64 value);

  // optional uint64 cur_fee = 3;
  inline bool has_cur_fee() const;
  inline void clear_cur_fee();
  static const int kCurFeeFieldNumber = 3;
  inline ::google::protobuf::uint64 cur_fee() const;
  inline void set_cur_fee(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GamePlayerAchievementData)
 private:
  inline void set_has_cur_ach();
  inline void clear_has_cur_ach();
  inline void set_has_cur_fee();
  inline void clear_has_cur_fee();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cur_ach_;
  ::google::protobuf::uint64 cur_fee_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GamePlayerAchievementData* default_instance_;
};
// -------------------------------------------------------------------

class UserSimpleData : public ::google::protobuf::Message {
 public:
  UserSimpleData();
  virtual ~UserSimpleData();

  UserSimpleData(const UserSimpleData& from);

  inline UserSimpleData& operator=(const UserSimpleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSimpleData& default_instance();

  void Swap(UserSimpleData* other);

  // implements Message ----------------------------------------------

  UserSimpleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSimpleData& from);
  void MergeFrom(const UserSimpleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 face = 3;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 3;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint32 age = 5;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 5;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional uint64 show_userid = 6;
  inline bool has_show_userid() const;
  inline void clear_show_userid();
  static const int kShowUseridFieldNumber = 6;
  inline ::google::protobuf::uint64 show_userid() const;
  inline void set_show_userid(::google::protobuf::uint64 value);

  // optional uint32 vip_level = 7;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.UserSimpleData)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_show_userid();
  inline void clear_has_show_userid();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 userid_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 gender_;
  ::google::protobuf::uint64 show_userid_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static UserSimpleData* default_instance_;
};
// -------------------------------------------------------------------

class UserBankInfo : public ::google::protobuf::Message {
 public:
  UserBankInfo();
  virtual ~UserBankInfo();

  UserBankInfo(const UserBankInfo& from);

  inline UserBankInfo& operator=(const UserBankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBankInfo& default_instance();

  void Swap(UserBankInfo* other);

  // implements Message ----------------------------------------------

  UserBankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBankInfo& from);
  void MergeFrom(const UserBankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 record_id = 1;
  inline int record_id_size() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 1;
  inline ::google::protobuf::uint64 record_id(int index) const;
  inline void set_record_id(int index, ::google::protobuf::uint64 value);
  inline void add_record_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      record_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_record_id();

  // @@protoc_insertion_point(class_scope:proto_ff.UserBankInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > record_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static UserBankInfo* default_instance_;
};
// -------------------------------------------------------------------

class tbUserMiscInfo : public ::google::protobuf::Message {
 public:
  tbUserMiscInfo();
  virtual ~tbUserMiscInfo();

  tbUserMiscInfo(const tbUserMiscInfo& from);

  inline tbUserMiscInfo& operator=(const tbUserMiscInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbUserMiscInfo& default_instance();

  void Swap(tbUserMiscInfo* other);

  // implements Message ----------------------------------------------

  tbUserMiscInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbUserMiscInfo& from);
  void MergeFrom(const tbUserMiscInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional .proto_ff.UserBankInfo bank_info = 2;
  inline bool has_bank_info() const;
  inline void clear_bank_info();
  static const int kBankInfoFieldNumber = 2;
  inline const ::proto_ff::UserBankInfo& bank_info() const;
  inline ::proto_ff::UserBankInfo* mutable_bank_info();
  inline ::proto_ff::UserBankInfo* release_bank_info();
  inline void set_allocated_bank_info(::proto_ff::UserBankInfo* bank_info);

  // @@protoc_insertion_point(class_scope:proto_ff.tbUserMiscInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_bank_info();
  inline void clear_has_bank_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::proto_ff::UserBankInfo* bank_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbUserMiscInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankCommonInfo : public ::google::protobuf::Message {
 public:
  RankCommonInfo();
  virtual ~RankCommonInfo();

  RankCommonInfo(const RankCommonInfo& from);

  inline RankCommonInfo& operator=(const RankCommonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankCommonInfo& default_instance();

  void Swap(RankCommonInfo* other);

  // implements Message ----------------------------------------------

  RankCommonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankCommonInfo& from);
  void MergeFrom(const RankCommonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RankCommonInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static RankCommonInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankCommonScore : public ::google::protobuf::Message {
 public:
  RankCommonScore();
  virtual ~RankCommonScore();

  RankCommonScore(const RankCommonScore& from);

  inline RankCommonScore& operator=(const RankCommonScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankCommonScore& default_instance();

  void Swap(RankCommonScore* other);

  // implements Message ----------------------------------------------

  RankCommonScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankCommonScore& from);
  void MergeFrom(const RankCommonScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RankCommonScore)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static RankCommonScore* default_instance_;
};
// -------------------------------------------------------------------

class RankCommonBody : public ::google::protobuf::Message {
 public:
  RankCommonBody();
  virtual ~RankCommonBody();

  RankCommonBody(const RankCommonBody& from);

  inline RankCommonBody& operator=(const RankCommonBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankCommonBody& default_instance();

  void Swap(RankCommonBody* other);

  // implements Message ----------------------------------------------

  RankCommonBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankCommonBody& from);
  void MergeFrom(const RankCommonBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RankCommonScore score_list = 1;
  inline int score_list_size() const;
  inline void clear_score_list();
  static const int kScoreListFieldNumber = 1;
  inline const ::proto_ff::RankCommonScore& score_list(int index) const;
  inline ::proto_ff::RankCommonScore* mutable_score_list(int index);
  inline ::proto_ff::RankCommonScore* add_score_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonScore >&
      score_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonScore >*
      mutable_score_list();

  // repeated .proto_ff.RankCommonInfo info_list = 2;
  inline int info_list_size() const;
  inline void clear_info_list();
  static const int kInfoListFieldNumber = 2;
  inline const ::proto_ff::RankCommonInfo& info_list(int index) const;
  inline ::proto_ff::RankCommonInfo* mutable_info_list(int index);
  inline ::proto_ff::RankCommonInfo* add_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonInfo >&
      info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonInfo >*
      mutable_info_list();

  // @@protoc_insertion_point(class_scope:proto_ff.RankCommonBody)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonScore > score_list_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonInfo > info_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static RankCommonBody* default_instance_;
};
// -------------------------------------------------------------------

class tbRankCommon : public ::google::protobuf::Message {
 public:
  tbRankCommon();
  virtual ~tbRankCommon();

  tbRankCommon(const tbRankCommon& from);

  inline tbRankCommon& operator=(const tbRankCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbRankCommon& default_instance();

  void Swap(tbRankCommon* other);

  // implements Message ----------------------------------------------

  tbRankCommon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbRankCommon& from);
  void MergeFrom(const tbRankCommon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id4db = 1;
  inline bool has_id4db() const;
  inline void clear_id4db();
  static const int kId4DbFieldNumber = 1;
  inline ::google::protobuf::int32 id4db() const;
  inline void set_id4db(::google::protobuf::int32 value);

  // optional .proto_ff.RankCommonBody body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::proto_ff::RankCommonBody& body() const;
  inline ::proto_ff::RankCommonBody* mutable_body();
  inline ::proto_ff::RankCommonBody* release_body();
  inline void set_allocated_body(::proto_ff::RankCommonBody* body);

  // @@protoc_insertion_point(class_scope:proto_ff.tbRankCommon)
 private:
  inline void set_has_id4db();
  inline void clear_has_id4db();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RankCommonBody* body_;
  ::google::protobuf::int32 id4db_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbRankCommon* default_instance_;
};
// -------------------------------------------------------------------

class RobotCommonData : public ::google::protobuf::Message {
 public:
  RobotCommonData();
  virtual ~RobotCommonData();

  RobotCommonData(const RobotCommonData& from);

  inline RobotCommonData& operator=(const RobotCommonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotCommonData& default_instance();

  void Swap(RobotCommonData* other);

  // implements Message ----------------------------------------------

  RobotCommonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotCommonData& from);
  void MergeFrom(const RobotCommonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 robot_id = 1;
  inline bool has_robot_id() const;
  inline void clear_robot_id();
  static const int kRobotIdFieldNumber = 1;
  inline ::google::protobuf::uint64 robot_id() const;
  inline void set_robot_id(::google::protobuf::uint64 value);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional uint32 face_id = 3;
  inline bool has_face_id() const;
  inline void clear_face_id();
  static const int kFaceIdFieldNumber = 3;
  inline ::google::protobuf::uint32 face_id() const;
  inline void set_face_id(::google::protobuf::uint32 value);

  // optional uint32 age = 4;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 4;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional uint32 gender = 5;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline ::google::protobuf::uint32 gender() const;
  inline void set_gender(::google::protobuf::uint32 value);

  // optional uint64 jetton = 6;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 6;
  inline ::google::protobuf::uint64 jetton() const;
  inline void set_jetton(::google::protobuf::uint64 value);

  // optional bool is_use = 7;
  inline bool has_is_use() const;
  inline void clear_is_use();
  static const int kIsUseFieldNumber = 7;
  inline bool is_use() const;
  inline void set_is_use(bool value);

  // @@protoc_insertion_point(class_scope:proto_ff.RobotCommonData)
 private:
  inline void set_has_robot_id();
  inline void clear_has_robot_id();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_face_id();
  inline void clear_has_face_id();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_is_use();
  inline void clear_has_is_use();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 robot_id_;
  ::std::string* nickname_;
  ::google::protobuf::uint32 face_id_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint64 jetton_;
  ::google::protobuf::uint32 gender_;
  bool is_use_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static RobotCommonData* default_instance_;
};
// -------------------------------------------------------------------

class RobotCommonBody : public ::google::protobuf::Message {
 public:
  RobotCommonBody();
  virtual ~RobotCommonBody();

  RobotCommonBody(const RobotCommonBody& from);

  inline RobotCommonBody& operator=(const RobotCommonBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotCommonBody& default_instance();

  void Swap(RobotCommonBody* other);

  // implements Message ----------------------------------------------

  RobotCommonBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotCommonBody& from);
  void MergeFrom(const RobotCommonBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RobotCommonData robot_data = 1;
  inline int robot_data_size() const;
  inline void clear_robot_data();
  static const int kRobotDataFieldNumber = 1;
  inline const ::proto_ff::RobotCommonData& robot_data(int index) const;
  inline ::proto_ff::RobotCommonData* mutable_robot_data(int index);
  inline ::proto_ff::RobotCommonData* add_robot_data();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RobotCommonData >&
      robot_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RobotCommonData >*
      mutable_robot_data();

  // @@protoc_insertion_point(class_scope:proto_ff.RobotCommonBody)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RobotCommonData > robot_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static RobotCommonBody* default_instance_;
};
// -------------------------------------------------------------------

class tbGameRobot : public ::google::protobuf::Message {
 public:
  tbGameRobot();
  virtual ~tbGameRobot();

  tbGameRobot(const tbGameRobot& from);

  inline tbGameRobot& operator=(const tbGameRobot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbGameRobot& default_instance();

  void Swap(tbGameRobot* other);

  // implements Message ----------------------------------------------

  tbGameRobot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbGameRobot& from);
  void MergeFrom(const tbGameRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id4db = 1;
  inline bool has_id4db() const;
  inline void clear_id4db();
  static const int kId4DbFieldNumber = 1;
  inline ::google::protobuf::int32 id4db() const;
  inline void set_id4db(::google::protobuf::int32 value);

  // optional .proto_ff.RobotCommonBody body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::proto_ff::RobotCommonBody& body() const;
  inline ::proto_ff::RobotCommonBody* mutable_body();
  inline ::proto_ff::RobotCommonBody* release_body();
  inline void set_allocated_body(::proto_ff::RobotCommonBody* body);

  // @@protoc_insertion_point(class_scope:proto_ff.tbGameRobot)
 private:
  inline void set_has_id4db();
  inline void clear_has_id4db();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RobotCommonBody* body_;
  ::google::protobuf::int32 id4db_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbGameRobot* default_instance_;
};
// -------------------------------------------------------------------

class EventLogData : public ::google::protobuf::Message {
 public:
  EventLogData();
  virtual ~EventLogData();

  EventLogData(const EventLogData& from);

  inline EventLogData& operator=(const EventLogData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLogData& default_instance();

  void Swap(EventLogData* other);

  // implements Message ----------------------------------------------

  EventLogData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventLogData& from);
  void MergeFrom(const EventLogData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.EventLogType event_type = 1;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  inline ::proto_ff::EventLogType event_type() const;
  inline void set_event_type(::proto_ff::EventLogType value);

  // @@protoc_insertion_point(class_scope:proto_ff.EventLogData)
 private:
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static EventLogData* default_instance_;
};
// -------------------------------------------------------------------

class tbEventLog : public ::google::protobuf::Message {
 public:
  tbEventLog();
  virtual ~tbEventLog();

  tbEventLog(const tbEventLog& from);

  inline tbEventLog& operator=(const tbEventLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbEventLog& default_instance();

  void Swap(tbEventLog* other);

  // implements Message ----------------------------------------------

  tbEventLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbEventLog& from);
  void MergeFrom(const tbEventLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional int32 create_time = 3;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // optional int32 expire_time = 4;
  inline bool has_expire_time() const;
  inline void clear_expire_time();
  static const int kExpireTimeFieldNumber = 4;
  inline ::google::protobuf::int32 expire_time() const;
  inline void set_expire_time(::google::protobuf::int32 value);

  // optional .proto_ff.EventLogData data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::proto_ff::EventLogData& data() const;
  inline ::proto_ff::EventLogData* mutable_data();
  inline ::proto_ff::EventLogData* release_data();
  inline void set_allocated_data(::proto_ff::EventLogData* data);

  // @@protoc_insertion_point(class_scope:proto_ff.tbEventLog)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_expire_time();
  inline void clear_has_expire_time();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 event_id_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int32 expire_time_;
  ::proto_ff::EventLogData* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbEventLog* default_instance_;
};
// -------------------------------------------------------------------

class LoginCommonData : public ::google::protobuf::Message {
 public:
  LoginCommonData();
  virtual ~LoginCommonData();

  LoginCommonData(const LoginCommonData& from);

  inline LoginCommonData& operator=(const LoginCommonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginCommonData& default_instance();

  void Swap(LoginCommonData* other);

  // implements Message ----------------------------------------------

  LoginCommonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginCommonData& from);
  void MergeFrom(const LoginCommonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 aread_id = 1;
  inline bool has_aread_id() const;
  inline void clear_aread_id();
  static const int kAreadIdFieldNumber = 1;
  inline ::google::protobuf::uint32 aread_id() const;
  inline void set_aread_id(::google::protobuf::uint32 value);

  // optional uint64 agent_id = 2;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline ::google::protobuf::uint64 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint64 value);

  // optional uint32 channel_id = 3;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  inline ::google::protobuf::uint32 channel_id() const;
  inline void set_channel_id(::google::protobuf::uint32 value);

  // optional uint32 referral_code = 4;
  inline bool has_referral_code() const;
  inline void clear_referral_code();
  static const int kReferralCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 referral_code() const;
  inline void set_referral_code(::google::protobuf::uint32 value);

  // optional string platform_os = 5;
  inline bool has_platform_os() const;
  inline void clear_platform_os();
  static const int kPlatformOsFieldNumber = 5;
  inline const ::std::string& platform_os() const;
  inline void set_platform_os(const ::std::string& value);
  inline void set_platform_os(const char* value);
  inline void set_platform_os(const char* value, size_t size);
  inline ::std::string* mutable_platform_os();
  inline ::std::string* release_platform_os();
  inline void set_allocated_platform_os(::std::string* platform_os);

  // optional string country = 6;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 6;
  inline const ::std::string& country() const;
  inline void set_country(const ::std::string& value);
  inline void set_country(const char* value);
  inline void set_country(const char* value, size_t size);
  inline ::std::string* mutable_country();
  inline ::std::string* release_country();
  inline void set_allocated_country(::std::string* country);

  // optional string province = 7;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 7;
  inline const ::std::string& province() const;
  inline void set_province(const ::std::string& value);
  inline void set_province(const char* value);
  inline void set_province(const char* value, size_t size);
  inline ::std::string* mutable_province();
  inline ::std::string* release_province();
  inline void set_allocated_province(::std::string* province);

  // optional string city = 8;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 8;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string ip = 9;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 9;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string phone_mode = 10;
  inline bool has_phone_mode() const;
  inline void clear_phone_mode();
  static const int kPhoneModeFieldNumber = 10;
  inline const ::std::string& phone_mode() const;
  inline void set_phone_mode(const ::std::string& value);
  inline void set_phone_mode(const char* value);
  inline void set_phone_mode(const char* value, size_t size);
  inline ::std::string* mutable_phone_mode();
  inline ::std::string* release_phone_mode();
  inline void set_allocated_phone_mode(::std::string* phone_mode);

  // optional string device_id = 11;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 11;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // @@protoc_insertion_point(class_scope:proto_ff.LoginCommonData)
 private:
  inline void set_has_aread_id();
  inline void clear_has_aread_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_referral_code();
  inline void clear_has_referral_code();
  inline void set_has_platform_os();
  inline void clear_has_platform_os();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_phone_mode();
  inline void clear_has_phone_mode();
  inline void set_has_device_id();
  inline void clear_has_device_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 agent_id_;
  ::google::protobuf::uint32 aread_id_;
  ::google::protobuf::uint32 channel_id_;
  ::std::string* platform_os_;
  ::std::string* country_;
  ::std::string* province_;
  ::std::string* city_;
  ::std::string* ip_;
  ::std::string* phone_mode_;
  ::std::string* device_id_;
  ::google::protobuf::uint32 referral_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LoginCommonData* default_instance_;
};
// -------------------------------------------------------------------

class LogMoneyDetail : public ::google::protobuf::Message {
 public:
  LogMoneyDetail();
  virtual ~LogMoneyDetail();

  LogMoneyDetail(const LogMoneyDetail& from);

  inline LogMoneyDetail& operator=(const LogMoneyDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogMoneyDetail& default_instance();

  void Swap(LogMoneyDetail* other);

  // implements Message ----------------------------------------------

  LogMoneyDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogMoneyDetail& from);
  void MergeFrom(const LogMoneyDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint32 game_id = 20;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 20;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 21;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 21;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional uint32 desk_id = 22;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 22;
  inline ::google::protobuf::uint32 desk_id() const;
  inline void set_desk_id(::google::protobuf::uint32 value);

  // optional uint32 chair_id = 23;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 23;
  inline ::google::protobuf::uint32 chair_id() const;
  inline void set_chair_id(::google::protobuf::uint32 value);

  // optional uint32 account_type = 24;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 24;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // optional uint32 opt_type = 26;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 26;
  inline ::google::protobuf::uint32 opt_type() const;
  inline void set_opt_type(::google::protobuf::uint32 value);

  // optional uint32 opt_reason = 27;
  inline bool has_opt_reason() const;
  inline void clear_opt_reason();
  static const int kOptReasonFieldNumber = 27;
  inline ::google::protobuf::uint32 opt_reason() const;
  inline void set_opt_reason(::google::protobuf::uint32 value);

  // optional uint64 all_jetton = 28;
  inline bool has_all_jetton() const;
  inline void clear_all_jetton();
  static const int kAllJettonFieldNumber = 28;
  inline ::google::protobuf::uint64 all_jetton() const;
  inline void set_all_jetton(::google::protobuf::uint64 value);

  // optional uint64 jetton = 29;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 29;
  inline ::google::protobuf::uint64 jetton() const;
  inline void set_jetton(::google::protobuf::uint64 value);

  // optional uint64 bank_jetton = 30;
  inline bool has_bank_jetton() const;
  inline void clear_bank_jetton();
  static const int kBankJettonFieldNumber = 30;
  inline ::google::protobuf::uint64 bank_jetton() const;
  inline void set_bank_jetton(::google::protobuf::uint64 value);

  // optional uint64 change_count = 31;
  inline bool has_change_count() const;
  inline void clear_change_count();
  static const int kChangeCountFieldNumber = 31;
  inline ::google::protobuf::uint64 change_count() const;
  inline void set_change_count(::google::protobuf::uint64 value);

  // optional uint64 agent_id = 32;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 32;
  inline ::google::protobuf::uint64 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint64 value);

  // optional string ip = 33;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 33;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 record_id = 34;
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 34;
  inline ::google::protobuf::uint64 record_id() const;
  inline void set_record_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LogMoneyDetail)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_opt_reason();
  inline void clear_has_opt_reason();
  inline void set_has_all_jetton();
  inline void clear_has_all_jetton();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_bank_jetton();
  inline void clear_has_bank_jetton();
  inline void set_has_change_count();
  inline void clear_has_change_count();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_record_id();
  inline void clear_has_record_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 desk_id_;
  ::google::protobuf::uint32 chair_id_;
  ::google::protobuf::uint32 account_type_;
  ::google::protobuf::uint32 opt_type_;
  ::google::protobuf::uint32 opt_reason_;
  ::google::protobuf::uint64 all_jetton_;
  ::google::protobuf::uint64 jetton_;
  ::google::protobuf::uint64 bank_jetton_;
  ::google::protobuf::uint64 change_count_;
  ::google::protobuf::uint64 agent_id_;
  ::std::string* ip_;
  ::google::protobuf::uint64 record_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogMoneyDetail* default_instance_;
};
// -------------------------------------------------------------------

class LogGameRecordDetail : public ::google::protobuf::Message {
 public:
  LogGameRecordDetail();
  virtual ~LogGameRecordDetail();

  LogGameRecordDetail(const LogGameRecordDetail& from);

  inline LogGameRecordDetail& operator=(const LogGameRecordDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGameRecordDetail& default_instance();

  void Swap(LogGameRecordDetail* other);

  // implements Message ----------------------------------------------

  LogGameRecordDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGameRecordDetail& from);
  void MergeFrom(const LogGameRecordDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint64 record_id = 20;
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 20;
  inline ::google::protobuf::uint64 record_id() const;
  inline void set_record_id(::google::protobuf::uint64 value);

  // optional uint32 game_id = 21;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 21;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 22;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 22;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional uint32 desk_id = 23;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 23;
  inline ::google::protobuf::uint32 desk_id() const;
  inline void set_desk_id(::google::protobuf::uint32 value);

  // optional uint32 chair_id = 24;
  inline bool has_chair_id() const;
  inline void clear_chair_id();
  static const int kChairIdFieldNumber = 24;
  inline ::google::protobuf::uint32 chair_id() const;
  inline void set_chair_id(::google::protobuf::uint32 value);

  // optional string result_info = 25;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 25;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const char* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  inline void set_allocated_result_info(::std::string* result_info);

  // optional uint64 pour_jetton = 26;
  inline bool has_pour_jetton() const;
  inline void clear_pour_jetton();
  static const int kPourJettonFieldNumber = 26;
  inline ::google::protobuf::uint64 pour_jetton() const;
  inline void set_pour_jetton(::google::protobuf::uint64 value);

  // optional int64 win_jetton = 27;
  inline bool has_win_jetton() const;
  inline void clear_win_jetton();
  static const int kWinJettonFieldNumber = 27;
  inline ::google::protobuf::int64 win_jetton() const;
  inline void set_win_jetton(::google::protobuf::int64 value);

  // optional uint64 tax_jetton = 28;
  inline bool has_tax_jetton() const;
  inline void clear_tax_jetton();
  static const int kTaxJettonFieldNumber = 28;
  inline ::google::protobuf::uint64 tax_jetton() const;
  inline void set_tax_jetton(::google::protobuf::uint64 value);

  // optional string win_list = 29;
  inline bool has_win_list() const;
  inline void clear_win_list();
  static const int kWinListFieldNumber = 29;
  inline const ::std::string& win_list() const;
  inline void set_win_list(const ::std::string& value);
  inline void set_win_list(const char* value);
  inline void set_win_list(const char* value, size_t size);
  inline ::std::string* mutable_win_list();
  inline ::std::string* release_win_list();
  inline void set_allocated_win_list(::std::string* win_list);

  // optional string lost_list = 30;
  inline bool has_lost_list() const;
  inline void clear_lost_list();
  static const int kLostListFieldNumber = 30;
  inline const ::std::string& lost_list() const;
  inline void set_lost_list(const ::std::string& value);
  inline void set_lost_list(const char* value);
  inline void set_lost_list(const char* value, size_t size);
  inline ::std::string* mutable_lost_list();
  inline ::std::string* release_lost_list();
  inline void set_allocated_lost_list(::std::string* lost_list);

  // @@protoc_insertion_point(class_scope:proto_ff.LogGameRecordDetail)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_record_id();
  inline void clear_has_record_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_chair_id();
  inline void clear_has_chair_id();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_pour_jetton();
  inline void clear_has_pour_jetton();
  inline void set_has_win_jetton();
  inline void clear_has_win_jetton();
  inline void set_has_tax_jetton();
  inline void clear_has_tax_jetton();
  inline void set_has_win_list();
  inline void clear_has_win_list();
  inline void set_has_lost_list();
  inline void clear_has_lost_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 game_id_;
  ::std::string* user_name_;
  ::google::protobuf::uint64 record_id_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 desk_id_;
  ::std::string* result_info_;
  ::google::protobuf::uint64 pour_jetton_;
  ::google::protobuf::int64 win_jetton_;
  ::google::protobuf::uint64 tax_jetton_;
  ::std::string* win_list_;
  ::std::string* lost_list_;
  ::google::protobuf::uint32 chair_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogGameRecordDetail* default_instance_;
};
// -------------------------------------------------------------------

class LogGameDetail : public ::google::protobuf::Message {
 public:
  LogGameDetail();
  virtual ~LogGameDetail();

  LogGameDetail(const LogGameDetail& from);

  inline LogGameDetail& operator=(const LogGameDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGameDetail& default_instance();

  void Swap(LogGameDetail* other);

  // implements Message ----------------------------------------------

  LogGameDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGameDetail& from);
  void MergeFrom(const LogGameDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint64 record_id = 20;
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 20;
  inline ::google::protobuf::uint64 record_id() const;
  inline void set_record_id(::google::protobuf::uint64 value);

  // optional uint32 game_id = 21;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 21;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 22;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 22;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional uint32 desk_id = 23;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 23;
  inline ::google::protobuf::uint32 desk_id() const;
  inline void set_desk_id(::google::protobuf::uint32 value);

  // optional string bet_info = 24;
  inline bool has_bet_info() const;
  inline void clear_bet_info();
  static const int kBetInfoFieldNumber = 24;
  inline const ::std::string& bet_info() const;
  inline void set_bet_info(const ::std::string& value);
  inline void set_bet_info(const char* value);
  inline void set_bet_info(const char* value, size_t size);
  inline ::std::string* mutable_bet_info();
  inline ::std::string* release_bet_info();
  inline void set_allocated_bet_info(::std::string* bet_info);

  // optional string result_info = 25;
  inline bool has_result_info() const;
  inline void clear_result_info();
  static const int kResultInfoFieldNumber = 25;
  inline const ::std::string& result_info() const;
  inline void set_result_info(const ::std::string& value);
  inline void set_result_info(const char* value);
  inline void set_result_info(const char* value, size_t size);
  inline ::std::string* mutable_result_info();
  inline ::std::string* release_result_info();
  inline void set_allocated_result_info(::std::string* result_info);

  // optional uint64 game_time = 26;
  inline bool has_game_time() const;
  inline void clear_game_time();
  static const int kGameTimeFieldNumber = 26;
  inline ::google::protobuf::uint64 game_time() const;
  inline void set_game_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LogGameDetail)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_record_id();
  inline void clear_has_record_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_bet_info();
  inline void clear_has_bet_info();
  inline void set_has_result_info();
  inline void clear_has_result_info();
  inline void set_has_game_time();
  inline void clear_has_game_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 game_id_;
  ::std::string* user_name_;
  ::google::protobuf::uint64 record_id_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 desk_id_;
  ::std::string* bet_info_;
  ::std::string* result_info_;
  ::google::protobuf::uint64 game_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogGameDetail* default_instance_;
};
// -------------------------------------------------------------------

class tbLogGameDay : public ::google::protobuf::Message {
 public:
  tbLogGameDay();
  virtual ~tbLogGameDay();

  tbLogGameDay(const tbLogGameDay& from);

  inline tbLogGameDay& operator=(const tbLogGameDay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbLogGameDay& default_instance();

  void Swap(tbLogGameDay* other);

  // implements Message ----------------------------------------------

  tbLogGameDay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbLogGameDay& from);
  void MergeFrom(const tbLogGameDay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string date_id = 1;
  inline bool has_date_id() const;
  inline void clear_date_id();
  static const int kDateIdFieldNumber = 1;
  inline const ::std::string& date_id() const;
  inline void set_date_id(const ::std::string& value);
  inline void set_date_id(const char* value);
  inline void set_date_id(const char* value, size_t size);
  inline ::std::string* mutable_date_id();
  inline ::std::string* release_date_id();
  inline void set_allocated_date_id(::std::string* date_id);

  // optional uint32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional uint64 all_pour = 4;
  inline bool has_all_pour() const;
  inline void clear_all_pour();
  static const int kAllPourFieldNumber = 4;
  inline ::google::protobuf::uint64 all_pour() const;
  inline void set_all_pour(::google::protobuf::uint64 value);

  // optional uint64 pour_day = 5;
  inline bool has_pour_day() const;
  inline void clear_pour_day();
  static const int kPourDayFieldNumber = 5;
  inline ::google::protobuf::uint64 pour_day() const;
  inline void set_pour_day(::google::protobuf::uint64 value);

  // optional uint64 pour_week = 6;
  inline bool has_pour_week() const;
  inline void clear_pour_week();
  static const int kPourWeekFieldNumber = 6;
  inline ::google::protobuf::uint64 pour_week() const;
  inline void set_pour_week(::google::protobuf::uint64 value);

  // optional uint64 pour_month = 7;
  inline bool has_pour_month() const;
  inline void clear_pour_month();
  static const int kPourMonthFieldNumber = 7;
  inline ::google::protobuf::uint64 pour_month() const;
  inline void set_pour_month(::google::protobuf::uint64 value);

  // optional int64 all_win = 8;
  inline bool has_all_win() const;
  inline void clear_all_win();
  static const int kAllWinFieldNumber = 8;
  inline ::google::protobuf::int64 all_win() const;
  inline void set_all_win(::google::protobuf::int64 value);

  // optional int64 win_day = 9;
  inline bool has_win_day() const;
  inline void clear_win_day();
  static const int kWinDayFieldNumber = 9;
  inline ::google::protobuf::int64 win_day() const;
  inline void set_win_day(::google::protobuf::int64 value);

  // optional int64 win_week = 10;
  inline bool has_win_week() const;
  inline void clear_win_week();
  static const int kWinWeekFieldNumber = 10;
  inline ::google::protobuf::int64 win_week() const;
  inline void set_win_week(::google::protobuf::int64 value);

  // optional int64 win_month = 11;
  inline bool has_win_month() const;
  inline void clear_win_month();
  static const int kWinMonthFieldNumber = 11;
  inline ::google::protobuf::int64 win_month() const;
  inline void set_win_month(::google::protobuf::int64 value);

  // optional uint64 all_fee = 12;
  inline bool has_all_fee() const;
  inline void clear_all_fee();
  static const int kAllFeeFieldNumber = 12;
  inline ::google::protobuf::uint64 all_fee() const;
  inline void set_all_fee(::google::protobuf::uint64 value);

  // optional uint64 fee_day = 13;
  inline bool has_fee_day() const;
  inline void clear_fee_day();
  static const int kFeeDayFieldNumber = 13;
  inline ::google::protobuf::uint64 fee_day() const;
  inline void set_fee_day(::google::protobuf::uint64 value);

  // optional uint64 fee_week = 14;
  inline bool has_fee_week() const;
  inline void clear_fee_week();
  static const int kFeeWeekFieldNumber = 14;
  inline ::google::protobuf::uint64 fee_week() const;
  inline void set_fee_week(::google::protobuf::uint64 value);

  // optional uint64 fee_month = 15;
  inline bool has_fee_month() const;
  inline void clear_fee_month();
  static const int kFeeMonthFieldNumber = 15;
  inline ::google::protobuf::uint64 fee_month() const;
  inline void set_fee_month(::google::protobuf::uint64 value);

  // optional string stat_time = 16;
  inline bool has_stat_time() const;
  inline void clear_stat_time();
  static const int kStatTimeFieldNumber = 16;
  inline const ::std::string& stat_time() const;
  inline void set_stat_time(const ::std::string& value);
  inline void set_stat_time(const char* value);
  inline void set_stat_time(const char* value, size_t size);
  inline ::std::string* mutable_stat_time();
  inline ::std::string* release_stat_time();
  inline void set_allocated_stat_time(::std::string* stat_time);

  // @@protoc_insertion_point(class_scope:proto_ff.tbLogGameDay)
 private:
  inline void set_has_date_id();
  inline void clear_has_date_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_all_pour();
  inline void clear_has_all_pour();
  inline void set_has_pour_day();
  inline void clear_has_pour_day();
  inline void set_has_pour_week();
  inline void clear_has_pour_week();
  inline void set_has_pour_month();
  inline void clear_has_pour_month();
  inline void set_has_all_win();
  inline void clear_has_all_win();
  inline void set_has_win_day();
  inline void clear_has_win_day();
  inline void set_has_win_week();
  inline void clear_has_win_week();
  inline void set_has_win_month();
  inline void clear_has_win_month();
  inline void set_has_all_fee();
  inline void clear_has_all_fee();
  inline void set_has_fee_day();
  inline void clear_has_fee_day();
  inline void set_has_fee_week();
  inline void clear_has_fee_week();
  inline void set_has_fee_month();
  inline void clear_has_fee_month();
  inline void set_has_stat_time();
  inline void clear_has_stat_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* date_id_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint64 all_pour_;
  ::google::protobuf::uint64 pour_day_;
  ::google::protobuf::uint64 pour_week_;
  ::google::protobuf::uint64 pour_month_;
  ::google::protobuf::int64 all_win_;
  ::google::protobuf::int64 win_day_;
  ::google::protobuf::int64 win_week_;
  ::google::protobuf::int64 win_month_;
  ::google::protobuf::uint64 all_fee_;
  ::google::protobuf::uint64 fee_day_;
  ::google::protobuf::uint64 fee_week_;
  ::google::protobuf::uint64 fee_month_;
  ::std::string* stat_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbLogGameDay* default_instance_;
};
// -------------------------------------------------------------------

class tbGameUserManagerData : public ::google::protobuf::Message {
 public:
  tbGameUserManagerData();
  virtual ~tbGameUserManagerData();

  tbGameUserManagerData(const tbGameUserManagerData& from);

  inline tbGameUserManagerData& operator=(const tbGameUserManagerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbGameUserManagerData& default_instance();

  void Swap(tbGameUserManagerData* other);

  // implements Message ----------------------------------------------

  tbGameUserManagerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbGameUserManagerData& from);
  void MergeFrom(const tbGameUserManagerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string create_date = 4;
  inline bool has_create_date() const;
  inline void clear_create_date();
  static const int kCreateDateFieldNumber = 4;
  inline const ::std::string& create_date() const;
  inline void set_create_date(const ::std::string& value);
  inline void set_create_date(const char* value);
  inline void set_create_date(const char* value, size_t size);
  inline ::std::string* mutable_create_date();
  inline ::std::string* release_create_date();
  inline void set_allocated_create_date(::std::string* create_date);

  // optional uint32 roster_type = 5;
  inline bool has_roster_type() const;
  inline void clear_roster_type();
  static const int kRosterTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 roster_type() const;
  inline void set_roster_type(::google::protobuf::uint32 value);

  // optional uint64 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 7;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional uint32 game_id = 8;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 8;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 9;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 9;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional uint32 state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional int64 opt_mark = 11;
  inline bool has_opt_mark() const;
  inline void clear_opt_mark();
  static const int kOptMarkFieldNumber = 11;
  inline ::google::protobuf::int64 opt_mark() const;
  inline void set_opt_mark(::google::protobuf::int64 value);

  // optional float rate_mark = 12;
  inline bool has_rate_mark() const;
  inline void clear_rate_mark();
  static const int kRateMarkFieldNumber = 12;
  inline float rate_mark() const;
  inline void set_rate_mark(float value);

  // optional int32 control_level = 13;
  inline bool has_control_level() const;
  inline void clear_control_level();
  static const int kControlLevelFieldNumber = 13;
  inline ::google::protobuf::int32 control_level() const;
  inline void set_control_level(::google::protobuf::int32 value);

  // optional uint64 max_win_jetton = 14;
  inline bool has_max_win_jetton() const;
  inline void clear_max_win_jetton();
  static const int kMaxWinJettonFieldNumber = 14;
  inline ::google::protobuf::uint64 max_win_jetton() const;
  inline void set_max_win_jetton(::google::protobuf::uint64 value);

  // optional int64 cur_win = 15;
  inline bool has_cur_win() const;
  inline void clear_cur_win();
  static const int kCurWinFieldNumber = 15;
  inline ::google::protobuf::int64 cur_win() const;
  inline void set_cur_win(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbGameUserManagerData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_create_date();
  inline void clear_has_create_date();
  inline void set_has_roster_type();
  inline void clear_has_roster_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_opt_mark();
  inline void clear_has_opt_mark();
  inline void set_has_rate_mark();
  inline void clear_has_rate_mark();
  inline void set_has_control_level();
  inline void clear_has_control_level();
  inline void set_has_max_win_jetton();
  inline void clear_has_max_win_jetton();
  inline void set_has_cur_win();
  inline void clear_has_cur_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::std::string* create_date_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint32 roster_type_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::int64 opt_mark_;
  float rate_mark_;
  ::google::protobuf::int32 control_level_;
  ::google::protobuf::uint64 max_win_jetton_;
  ::google::protobuf::int64 cur_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbGameUserManagerData* default_instance_;
};
// -------------------------------------------------------------------

class tbMachineManagerData : public ::google::protobuf::Message {
 public:
  tbMachineManagerData();
  virtual ~tbMachineManagerData();

  tbMachineManagerData(const tbMachineManagerData& from);

  inline tbMachineManagerData& operator=(const tbMachineManagerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbMachineManagerData& default_instance();

  void Swap(tbMachineManagerData* other);

  // implements Message ----------------------------------------------

  tbMachineManagerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbMachineManagerData& from);
  void MergeFrom(const tbMachineManagerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline const ::std::string& device_id() const;
  inline void set_device_id(const ::std::string& value);
  inline void set_device_id(const char* value);
  inline void set_device_id(const char* value, size_t size);
  inline ::std::string* mutable_device_id();
  inline ::std::string* release_device_id();
  inline void set_allocated_device_id(::std::string* device_id);

  // optional string create_date = 4;
  inline bool has_create_date() const;
  inline void clear_create_date();
  static const int kCreateDateFieldNumber = 4;
  inline const ::std::string& create_date() const;
  inline void set_create_date(const ::std::string& value);
  inline void set_create_date(const char* value);
  inline void set_create_date(const char* value, size_t size);
  inline ::std::string* mutable_create_date();
  inline ::std::string* release_create_date();
  inline void set_allocated_create_date(::std::string* create_date);

  // optional uint32 roster_type = 5;
  inline bool has_roster_type() const;
  inline void clear_roster_type();
  static const int kRosterTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 roster_type() const;
  inline void set_roster_type(::google::protobuf::uint32 value);

  // optional uint64 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 7;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional uint32 game_id = 8;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 8;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 room_id = 9;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 9;
  inline ::google::protobuf::uint32 room_id() const;
  inline void set_room_id(::google::protobuf::uint32 value);

  // optional uint32 state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional int64 opt_mark = 11;
  inline bool has_opt_mark() const;
  inline void clear_opt_mark();
  static const int kOptMarkFieldNumber = 11;
  inline ::google::protobuf::int64 opt_mark() const;
  inline void set_opt_mark(::google::protobuf::int64 value);

  // optional float rate_mark = 12;
  inline bool has_rate_mark() const;
  inline void clear_rate_mark();
  static const int kRateMarkFieldNumber = 12;
  inline float rate_mark() const;
  inline void set_rate_mark(float value);

  // optional int32 control_level = 13;
  inline bool has_control_level() const;
  inline void clear_control_level();
  static const int kControlLevelFieldNumber = 13;
  inline ::google::protobuf::int32 control_level() const;
  inline void set_control_level(::google::protobuf::int32 value);

  // optional uint64 max_win_jetton = 14;
  inline bool has_max_win_jetton() const;
  inline void clear_max_win_jetton();
  static const int kMaxWinJettonFieldNumber = 14;
  inline ::google::protobuf::uint64 max_win_jetton() const;
  inline void set_max_win_jetton(::google::protobuf::uint64 value);

  // optional int64 cur_win = 15;
  inline bool has_cur_win() const;
  inline void clear_cur_win();
  static const int kCurWinFieldNumber = 15;
  inline ::google::protobuf::int64 cur_win() const;
  inline void set_cur_win(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbMachineManagerData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_create_date();
  inline void clear_has_create_date();
  inline void set_has_roster_type();
  inline void clear_has_roster_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_opt_mark();
  inline void clear_has_opt_mark();
  inline void set_has_rate_mark();
  inline void clear_has_rate_mark();
  inline void set_has_control_level();
  inline void clear_has_control_level();
  inline void set_has_max_win_jetton();
  inline void clear_has_max_win_jetton();
  inline void set_has_cur_win();
  inline void clear_has_cur_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* device_id_;
  ::std::string* create_date_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint32 roster_type_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 room_id_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::int64 opt_mark_;
  float rate_mark_;
  ::google::protobuf::int32 control_level_;
  ::google::protobuf::uint64 max_win_jetton_;
  ::google::protobuf::int64 cur_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbMachineManagerData* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_tbGameUserManagerData : public ::google::protobuf::Message {
 public:
  Sheet_tbGameUserManagerData();
  virtual ~Sheet_tbGameUserManagerData();

  Sheet_tbGameUserManagerData(const Sheet_tbGameUserManagerData& from);

  inline Sheet_tbGameUserManagerData& operator=(const Sheet_tbGameUserManagerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_tbGameUserManagerData& default_instance();

  void Swap(Sheet_tbGameUserManagerData* other);

  // implements Message ----------------------------------------------

  Sheet_tbGameUserManagerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_tbGameUserManagerData& from);
  void MergeFrom(const Sheet_tbGameUserManagerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.tbGameUserManagerData tbGameUserManagerData_List = 1;
  inline int tbgameusermanagerdata_list_size() const;
  inline void clear_tbgameusermanagerdata_list();
  static const int kTbGameUserManagerDataListFieldNumber = 1;
  inline const ::proto_ff::tbGameUserManagerData& tbgameusermanagerdata_list(int index) const;
  inline ::proto_ff::tbGameUserManagerData* mutable_tbgameusermanagerdata_list(int index);
  inline ::proto_ff::tbGameUserManagerData* add_tbgameusermanagerdata_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGameUserManagerData >&
      tbgameusermanagerdata_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGameUserManagerData >*
      mutable_tbgameusermanagerdata_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_tbGameUserManagerData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGameUserManagerData > tbgameusermanagerdata_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Sheet_tbGameUserManagerData* default_instance_;
};
// -------------------------------------------------------------------

class tbGmCtrlGiveCtrlData : public ::google::protobuf::Message {
 public:
  tbGmCtrlGiveCtrlData();
  virtual ~tbGmCtrlGiveCtrlData();

  tbGmCtrlGiveCtrlData(const tbGmCtrlGiveCtrlData& from);

  inline tbGmCtrlGiveCtrlData& operator=(const tbGmCtrlGiveCtrlData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbGmCtrlGiveCtrlData& default_instance();

  void Swap(tbGmCtrlGiveCtrlData* other);

  // implements Message ----------------------------------------------

  tbGmCtrlGiveCtrlData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbGmCtrlGiveCtrlData& from);
  void MergeFrom(const tbGmCtrlGiveCtrlData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string create_date = 4;
  inline bool has_create_date() const;
  inline void clear_create_date();
  static const int kCreateDateFieldNumber = 4;
  inline const ::std::string& create_date() const;
  inline void set_create_date(const ::std::string& value);
  inline void set_create_date(const char* value);
  inline void set_create_date(const char* value, size_t size);
  inline ::std::string* mutable_create_date();
  inline ::std::string* release_create_date();
  inline void set_allocated_create_date(::std::string* create_date);

  // optional uint32 control_type = 5;
  inline bool has_control_type() const;
  inline void clear_control_type();
  static const int kControlTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 control_type() const;
  inline void set_control_type(::google::protobuf::uint32 value);

  // optional uint64 start_time = 6;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 start_time() const;
  inline void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 end_time = 7;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 end_time() const;
  inline void set_end_time(::google::protobuf::uint64 value);

  // optional uint32 game_id = 8;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 8;
  inline ::google::protobuf::uint32 game_id() const;
  inline void set_game_id(::google::protobuf::uint32 value);

  // optional uint32 state = 9;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 9;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional int32 jackpot_type = 10;
  inline bool has_jackpot_type() const;
  inline void clear_jackpot_type();
  static const int kJackpotTypeFieldNumber = 10;
  inline ::google::protobuf::int32 jackpot_type() const;
  inline void set_jackpot_type(::google::protobuf::int32 value);

  // optional float jackpot_rate = 11;
  inline bool has_jackpot_rate() const;
  inline void clear_jackpot_rate();
  static const int kJackpotRateFieldNumber = 11;
  inline float jackpot_rate() const;
  inline void set_jackpot_rate(float value);

  // optional uint64 jackpot_jetton = 12;
  inline bool has_jackpot_jetton() const;
  inline void clear_jackpot_jetton();
  static const int kJackpotJettonFieldNumber = 12;
  inline ::google::protobuf::uint64 jackpot_jetton() const;
  inline void set_jackpot_jetton(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbGmCtrlGiveCtrlData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_create_date();
  inline void clear_has_create_date();
  inline void set_has_control_type();
  inline void clear_has_control_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_jackpot_type();
  inline void clear_has_jackpot_type();
  inline void set_has_jackpot_rate();
  inline void clear_has_jackpot_rate();
  inline void set_has_jackpot_jetton();
  inline void clear_has_jackpot_jetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::std::string* create_date_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint32 control_type_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::int32 jackpot_type_;
  ::google::protobuf::uint64 jackpot_jetton_;
  float jackpot_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbGmCtrlGiveCtrlData* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_tbGmCtrlGiveCtrlData : public ::google::protobuf::Message {
 public:
  Sheet_tbGmCtrlGiveCtrlData();
  virtual ~Sheet_tbGmCtrlGiveCtrlData();

  Sheet_tbGmCtrlGiveCtrlData(const Sheet_tbGmCtrlGiveCtrlData& from);

  inline Sheet_tbGmCtrlGiveCtrlData& operator=(const Sheet_tbGmCtrlGiveCtrlData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_tbGmCtrlGiveCtrlData& default_instance();

  void Swap(Sheet_tbGmCtrlGiveCtrlData* other);

  // implements Message ----------------------------------------------

  Sheet_tbGmCtrlGiveCtrlData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_tbGmCtrlGiveCtrlData& from);
  void MergeFrom(const Sheet_tbGmCtrlGiveCtrlData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.tbGmCtrlGiveCtrlData tbGmCtrlGiveCtrlData_List = 1;
  inline int tbgmctrlgivectrldata_list_size() const;
  inline void clear_tbgmctrlgivectrldata_list();
  static const int kTbGmCtrlGiveCtrlDataListFieldNumber = 1;
  inline const ::proto_ff::tbGmCtrlGiveCtrlData& tbgmctrlgivectrldata_list(int index) const;
  inline ::proto_ff::tbGmCtrlGiveCtrlData* mutable_tbgmctrlgivectrldata_list(int index);
  inline ::proto_ff::tbGmCtrlGiveCtrlData* add_tbgmctrlgivectrldata_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGmCtrlGiveCtrlData >&
      tbgmctrlgivectrldata_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGmCtrlGiveCtrlData >*
      mutable_tbgmctrlgivectrldata_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_tbGmCtrlGiveCtrlData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGmCtrlGiveCtrlData > tbgmctrlgivectrldata_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Sheet_tbGmCtrlGiveCtrlData* default_instance_;
};
// -------------------------------------------------------------------

class LogVipRechargeRecord : public ::google::protobuf::Message {
 public:
  LogVipRechargeRecord();
  virtual ~LogVipRechargeRecord();

  LogVipRechargeRecord(const LogVipRechargeRecord& from);

  inline LogVipRechargeRecord& operator=(const LogVipRechargeRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogVipRechargeRecord& default_instance();

  void Swap(LogVipRechargeRecord* other);

  // implements Message ----------------------------------------------

  LogVipRechargeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogVipRechargeRecord& from);
  void MergeFrom(const LogVipRechargeRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint64 amount = 20;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 20;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional uint32 recharge_id = 21;
  inline bool has_recharge_id() const;
  inline void clear_recharge_id();
  static const int kRechargeIdFieldNumber = 21;
  inline ::google::protobuf::uint32 recharge_id() const;
  inline void set_recharge_id(::google::protobuf::uint32 value);

  // optional string recharge_name = 22;
  inline bool has_recharge_name() const;
  inline void clear_recharge_name();
  static const int kRechargeNameFieldNumber = 22;
  inline const ::std::string& recharge_name() const;
  inline void set_recharge_name(const ::std::string& value);
  inline void set_recharge_name(const char* value);
  inline void set_recharge_name(const char* value, size_t size);
  inline ::std::string* mutable_recharge_name();
  inline ::std::string* release_recharge_name();
  inline void set_allocated_recharge_name(::std::string* recharge_name);

  // optional uint64 status = 23;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 23;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LogVipRechargeRecord)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_recharge_id();
  inline void clear_has_recharge_id();
  inline void set_has_recharge_name();
  inline void clear_has_recharge_name();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 recharge_id_;
  ::std::string* user_name_;
  ::google::protobuf::uint64 amount_;
  ::std::string* recharge_name_;
  ::google::protobuf::uint64 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogVipRechargeRecord* default_instance_;
};
// -------------------------------------------------------------------

class LogZhuangRecord : public ::google::protobuf::Message {
 public:
  LogZhuangRecord();
  virtual ~LogZhuangRecord();

  LogZhuangRecord(const LogZhuangRecord& from);

  inline LogZhuangRecord& operator=(const LogZhuangRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogZhuangRecord& default_instance();

  void Swap(LogZhuangRecord* other);

  // implements Message ----------------------------------------------

  LogZhuangRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogZhuangRecord& from);
  void MergeFrom(const LogZhuangRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional int64 amount = 20;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 20;
  inline ::google::protobuf::int64 amount() const;
  inline void set_amount(::google::protobuf::int64 value);

  // optional uint64 status = 21;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 21;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LogZhuangRecord)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::google::protobuf::int64 amount_;
  ::google::protobuf::uint64 status_;
  ::google::protobuf::uint32 sequence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogZhuangRecord* default_instance_;
};
// -------------------------------------------------------------------

class LogRechargeOrder : public ::google::protobuf::Message {
 public:
  LogRechargeOrder();
  virtual ~LogRechargeOrder();

  LogRechargeOrder(const LogRechargeOrder& from);

  inline LogRechargeOrder& operator=(const LogRechargeOrder& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRechargeOrder& default_instance();

  void Swap(LogRechargeOrder* other);

  // implements Message ----------------------------------------------

  LogRechargeOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRechargeOrder& from);
  void MergeFrom(const LogRechargeOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string order_id = 20;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 20;
  inline const ::std::string& order_id() const;
  inline void set_order_id(const ::std::string& value);
  inline void set_order_id(const char* value);
  inline void set_order_id(const char* value, size_t size);
  inline ::std::string* mutable_order_id();
  inline ::std::string* release_order_id();
  inline void set_allocated_order_id(::std::string* order_id);

  // optional uint32 pay_id = 21;
  inline bool has_pay_id() const;
  inline void clear_pay_id();
  static const int kPayIdFieldNumber = 21;
  inline ::google::protobuf::uint32 pay_id() const;
  inline void set_pay_id(::google::protobuf::uint32 value);

  // optional string pay_channel = 22;
  inline bool has_pay_channel() const;
  inline void clear_pay_channel();
  static const int kPayChannelFieldNumber = 22;
  inline const ::std::string& pay_channel() const;
  inline void set_pay_channel(const ::std::string& value);
  inline void set_pay_channel(const char* value);
  inline void set_pay_channel(const char* value, size_t size);
  inline ::std::string* mutable_pay_channel();
  inline ::std::string* release_pay_channel();
  inline void set_allocated_pay_channel(::std::string* pay_channel);

  // optional uint32 pay_type = 23;
  inline bool has_pay_type() const;
  inline void clear_pay_type();
  static const int kPayTypeFieldNumber = 23;
  inline ::google::protobuf::uint32 pay_type() const;
  inline void set_pay_type(::google::protobuf::uint32 value);

  // optional string ch_order_id = 24;
  inline bool has_ch_order_id() const;
  inline void clear_ch_order_id();
  static const int kChOrderIdFieldNumber = 24;
  inline const ::std::string& ch_order_id() const;
  inline void set_ch_order_id(const ::std::string& value);
  inline void set_ch_order_id(const char* value);
  inline void set_ch_order_id(const char* value, size_t size);
  inline ::std::string* mutable_ch_order_id();
  inline ::std::string* release_ch_order_id();
  inline void set_allocated_ch_order_id(::std::string* ch_order_id);

  // optional uint32 state = 25;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 25;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LogRechargeOrder)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_pay_id();
  inline void clear_has_pay_id();
  inline void set_has_pay_channel();
  inline void clear_has_pay_channel();
  inline void set_has_pay_type();
  inline void clear_has_pay_type();
  inline void set_has_ch_order_id();
  inline void clear_has_ch_order_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 pay_id_;
  ::std::string* user_name_;
  ::std::string* order_id_;
  ::std::string* pay_channel_;
  ::std::string* ch_order_id_;
  ::google::protobuf::uint32 pay_type_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogRechargeOrder* default_instance_;
};
// -------------------------------------------------------------------

class LogGiveMoneyRecord : public ::google::protobuf::Message {
 public:
  LogGiveMoneyRecord();
  virtual ~LogGiveMoneyRecord();

  LogGiveMoneyRecord(const LogGiveMoneyRecord& from);

  inline LogGiveMoneyRecord& operator=(const LogGiveMoneyRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogGiveMoneyRecord& default_instance();

  void Swap(LogGiveMoneyRecord* other);

  // implements Message ----------------------------------------------

  LogGiveMoneyRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogGiveMoneyRecord& from);
  void MergeFrom(const LogGiveMoneyRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint32 type = 20;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 20;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 amount = 21;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 21;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional uint64 status = 22;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 22;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LogGiveMoneyRecord)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogGiveMoneyRecord* default_instance_;
};
// -------------------------------------------------------------------

class tbLogSystemDay : public ::google::protobuf::Message {
 public:
  tbLogSystemDay();
  virtual ~tbLogSystemDay();

  tbLogSystemDay(const tbLogSystemDay& from);

  inline tbLogSystemDay& operator=(const tbLogSystemDay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbLogSystemDay& default_instance();

  void Swap(tbLogSystemDay* other);

  // implements Message ----------------------------------------------

  tbLogSystemDay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbLogSystemDay& from);
  void MergeFrom(const tbLogSystemDay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string date_id = 1;
  inline bool has_date_id() const;
  inline void clear_date_id();
  static const int kDateIdFieldNumber = 1;
  inline const ::std::string& date_id() const;
  inline void set_date_id(const ::std::string& value);
  inline void set_date_id(const char* value);
  inline void set_date_id(const char* value, size_t size);
  inline ::std::string* mutable_date_id();
  inline ::std::string* release_date_id();
  inline void set_allocated_date_id(::std::string* date_id);

  // optional uint32 active_player = 2;
  inline bool has_active_player() const;
  inline void clear_active_player();
  static const int kActivePlayerFieldNumber = 2;
  inline ::google::protobuf::uint32 active_player() const;
  inline void set_active_player(::google::protobuf::uint32 value);

  // optional uint32 login_count = 3;
  inline bool has_login_count() const;
  inline void clear_login_count();
  static const int kLoginCountFieldNumber = 3;
  inline ::google::protobuf::uint32 login_count() const;
  inline void set_login_count(::google::protobuf::uint32 value);

  // optional uint32 valid_player = 4;
  inline bool has_valid_player() const;
  inline void clear_valid_player();
  static const int kValidPlayerFieldNumber = 4;
  inline ::google::protobuf::uint32 valid_player() const;
  inline void set_valid_player(::google::protobuf::uint32 value);

  // optional uint32 new_player = 5;
  inline bool has_new_player() const;
  inline void clear_new_player();
  static const int kNewPlayerFieldNumber = 5;
  inline ::google::protobuf::uint32 new_player() const;
  inline void set_new_player(::google::protobuf::uint32 value);

  // optional uint32 pay_player = 6;
  inline bool has_pay_player() const;
  inline void clear_pay_player();
  static const int kPayPlayerFieldNumber = 6;
  inline ::google::protobuf::uint32 pay_player() const;
  inline void set_pay_player(::google::protobuf::uint32 value);

  // optional uint32 pay_times = 7;
  inline bool has_pay_times() const;
  inline void clear_pay_times();
  static const int kPayTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 pay_times() const;
  inline void set_pay_times(::google::protobuf::uint32 value);

  // optional uint64 pay_all = 8;
  inline bool has_pay_all() const;
  inline void clear_pay_all();
  static const int kPayAllFieldNumber = 8;
  inline ::google::protobuf::uint64 pay_all() const;
  inline void set_pay_all(::google::protobuf::uint64 value);

  // optional uint32 new_pay_player = 9;
  inline bool has_new_pay_player() const;
  inline void clear_new_pay_player();
  static const int kNewPayPlayerFieldNumber = 9;
  inline ::google::protobuf::uint32 new_pay_player() const;
  inline void set_new_pay_player(::google::protobuf::uint32 value);

  // optional uint32 new_pay_all = 100;
  inline bool has_new_pay_all() const;
  inline void clear_new_pay_all();
  static const int kNewPayAllFieldNumber = 100;
  inline ::google::protobuf::uint32 new_pay_all() const;
  inline void set_new_pay_all(::google::protobuf::uint32 value);

  // optional uint64 commission_all = 10;
  inline bool has_commission_all() const;
  inline void clear_commission_all();
  static const int kCommissionAllFieldNumber = 10;
  inline ::google::protobuf::uint64 commission_all() const;
  inline void set_commission_all(::google::protobuf::uint64 value);

  // optional uint64 all_fee = 11;
  inline bool has_all_fee() const;
  inline void clear_all_fee();
  static const int kAllFeeFieldNumber = 11;
  inline ::google::protobuf::uint64 all_fee() const;
  inline void set_all_fee(::google::protobuf::uint64 value);

  // optional uint64 all_pour = 12;
  inline bool has_all_pour() const;
  inline void clear_all_pour();
  static const int kAllPourFieldNumber = 12;
  inline ::google::protobuf::uint64 all_pour() const;
  inline void set_all_pour(::google::protobuf::uint64 value);

  // optional int64 all_win = 13;
  inline bool has_all_win() const;
  inline void clear_all_win();
  static const int kAllWinFieldNumber = 13;
  inline ::google::protobuf::int64 all_win() const;
  inline void set_all_win(::google::protobuf::int64 value);

  // optional uint64 jetton_init = 14;
  inline bool has_jetton_init() const;
  inline void clear_jetton_init();
  static const int kJettonInitFieldNumber = 14;
  inline ::google::protobuf::uint64 jetton_init() const;
  inline void set_jetton_init(::google::protobuf::uint64 value);

  // optional uint64 all_draw = 15;
  inline bool has_all_draw() const;
  inline void clear_all_draw();
  static const int kAllDrawFieldNumber = 15;
  inline ::google::protobuf::uint64 all_draw() const;
  inline void set_all_draw(::google::protobuf::uint64 value);

  // optional uint64 jetton_in = 16;
  inline bool has_jetton_in() const;
  inline void clear_jetton_in();
  static const int kJettonInFieldNumber = 16;
  inline ::google::protobuf::uint64 jetton_in() const;
  inline void set_jetton_in(::google::protobuf::uint64 value);

  // optional uint64 jetton_out = 17;
  inline bool has_jetton_out() const;
  inline void clear_jetton_out();
  static const int kJettonOutFieldNumber = 17;
  inline ::google::protobuf::uint64 jetton_out() const;
  inline void set_jetton_out(::google::protobuf::uint64 value);

  // optional uint64 sys_award = 18;
  inline bool has_sys_award() const;
  inline void clear_sys_award();
  static const int kSysAwardFieldNumber = 18;
  inline ::google::protobuf::uint64 sys_award() const;
  inline void set_sys_award(::google::protobuf::uint64 value);

  // optional uint64 player_jetton = 19;
  inline bool has_player_jetton() const;
  inline void clear_player_jetton();
  static const int kPlayerJettonFieldNumber = 19;
  inline ::google::protobuf::uint64 player_jetton() const;
  inline void set_player_jetton(::google::protobuf::uint64 value);

  // optional uint64 trd_pay_all = 20;
  inline bool has_trd_pay_all() const;
  inline void clear_trd_pay_all();
  static const int kTrdPayAllFieldNumber = 20;
  inline ::google::protobuf::uint64 trd_pay_all() const;
  inline void set_trd_pay_all(::google::protobuf::uint64 value);

  // optional uint64 vip_pay_all = 21;
  inline bool has_vip_pay_all() const;
  inline void clear_vip_pay_all();
  static const int kVipPayAllFieldNumber = 21;
  inline ::google::protobuf::uint64 vip_pay_all() const;
  inline void set_vip_pay_all(::google::protobuf::uint64 value);

  // optional uint64 zhuangzhang_all = 22;
  inline bool has_zhuangzhang_all() const;
  inline void clear_zhuangzhang_all();
  static const int kZhuangzhangAllFieldNumber = 22;
  inline ::google::protobuf::uint64 zhuangzhang_all() const;
  inline void set_zhuangzhang_all(::google::protobuf::uint64 value);

  // optional uint64 activity_award = 23;
  inline bool has_activity_award() const;
  inline void clear_activity_award();
  static const int kActivityAwardFieldNumber = 23;
  inline ::google::protobuf::uint64 activity_award() const;
  inline void set_activity_award(::google::protobuf::uint64 value);

  // optional uint64 all_bank_jetton = 25;
  inline bool has_all_bank_jetton() const;
  inline void clear_all_bank_jetton();
  static const int kAllBankJettonFieldNumber = 25;
  inline ::google::protobuf::uint64 all_bank_jetton() const;
  inline void set_all_bank_jetton(::google::protobuf::uint64 value);

  // optional uint64 freeze_jetton = 26;
  inline bool has_freeze_jetton() const;
  inline void clear_freeze_jetton();
  static const int kFreezeJettonFieldNumber = 26;
  inline ::google::protobuf::uint64 freeze_jetton() const;
  inline void set_freeze_jetton(::google::protobuf::uint64 value);

  // optional uint64 all_jetton = 27;
  inline bool has_all_jetton() const;
  inline void clear_all_jetton();
  static const int kAllJettonFieldNumber = 27;
  inline ::google::protobuf::uint64 all_jetton() const;
  inline void set_all_jetton(::google::protobuf::uint64 value);

  // optional uint64 all_player = 28;
  inline bool has_all_player() const;
  inline void clear_all_player();
  static const int kAllPlayerFieldNumber = 28;
  inline ::google::protobuf::uint64 all_player() const;
  inline void set_all_player(::google::protobuf::uint64 value);

  // optional uint64 active_seven = 29;
  inline bool has_active_seven() const;
  inline void clear_active_seven();
  static const int kActiveSevenFieldNumber = 29;
  inline ::google::protobuf::uint64 active_seven() const;
  inline void set_active_seven(::google::protobuf::uint64 value);

  // optional uint64 active_thirty = 30;
  inline bool has_active_thirty() const;
  inline void clear_active_thirty();
  static const int kActiveThirtyFieldNumber = 30;
  inline ::google::protobuf::uint64 active_thirty() const;
  inline void set_active_thirty(::google::protobuf::uint64 value);

  // optional uint64 pour_day_all = 31;
  inline bool has_pour_day_all() const;
  inline void clear_pour_day_all();
  static const int kPourDayAllFieldNumber = 31;
  inline ::google::protobuf::uint64 pour_day_all() const;
  inline void set_pour_day_all(::google::protobuf::uint64 value);

  // optional uint64 pour_week_all = 32;
  inline bool has_pour_week_all() const;
  inline void clear_pour_week_all();
  static const int kPourWeekAllFieldNumber = 32;
  inline ::google::protobuf::uint64 pour_week_all() const;
  inline void set_pour_week_all(::google::protobuf::uint64 value);

  // optional uint64 pour_month_all = 33;
  inline bool has_pour_month_all() const;
  inline void clear_pour_month_all();
  static const int kPourMonthAllFieldNumber = 33;
  inline ::google::protobuf::uint64 pour_month_all() const;
  inline void set_pour_month_all(::google::protobuf::uint64 value);

  // optional int64 sys_win_day = 34;
  inline bool has_sys_win_day() const;
  inline void clear_sys_win_day();
  static const int kSysWinDayFieldNumber = 34;
  inline ::google::protobuf::int64 sys_win_day() const;
  inline void set_sys_win_day(::google::protobuf::int64 value);

  // optional int64 sys_win_week = 35;
  inline bool has_sys_win_week() const;
  inline void clear_sys_win_week();
  static const int kSysWinWeekFieldNumber = 35;
  inline ::google::protobuf::int64 sys_win_week() const;
  inline void set_sys_win_week(::google::protobuf::int64 value);

  // optional int64 sys_win_month = 36;
  inline bool has_sys_win_month() const;
  inline void clear_sys_win_month();
  static const int kSysWinMonthFieldNumber = 36;
  inline ::google::protobuf::int64 sys_win_month() const;
  inline void set_sys_win_month(::google::protobuf::int64 value);

  // optional uint64 fee_day = 37;
  inline bool has_fee_day() const;
  inline void clear_fee_day();
  static const int kFeeDayFieldNumber = 37;
  inline ::google::protobuf::uint64 fee_day() const;
  inline void set_fee_day(::google::protobuf::uint64 value);

  // optional uint64 fee_week = 38;
  inline bool has_fee_week() const;
  inline void clear_fee_week();
  static const int kFeeWeekFieldNumber = 38;
  inline ::google::protobuf::uint64 fee_week() const;
  inline void set_fee_week(::google::protobuf::uint64 value);

  // optional uint64 fee_month = 39;
  inline bool has_fee_month() const;
  inline void clear_fee_month();
  static const int kFeeMonthFieldNumber = 39;
  inline ::google::protobuf::uint64 fee_month() const;
  inline void set_fee_month(::google::protobuf::uint64 value);

  // optional uint64 commision_all = 40;
  inline bool has_commision_all() const;
  inline void clear_commision_all();
  static const int kCommisionAllFieldNumber = 40;
  inline ::google::protobuf::uint64 commision_all() const;
  inline void set_commision_all(::google::protobuf::uint64 value);

  // optional uint64 commision_take = 41;
  inline bool has_commision_take() const;
  inline void clear_commision_take();
  static const int kCommisionTakeFieldNumber = 41;
  inline ::google::protobuf::uint64 commision_take() const;
  inline void set_commision_take(::google::protobuf::uint64 value);

  // optional uint64 commision_day = 42;
  inline bool has_commision_day() const;
  inline void clear_commision_day();
  static const int kCommisionDayFieldNumber = 42;
  inline ::google::protobuf::uint64 commision_day() const;
  inline void set_commision_day(::google::protobuf::uint64 value);

  // optional uint64 commision_week = 43;
  inline bool has_commision_week() const;
  inline void clear_commision_week();
  static const int kCommisionWeekFieldNumber = 43;
  inline ::google::protobuf::uint64 commision_week() const;
  inline void set_commision_week(::google::protobuf::uint64 value);

  // optional uint64 commision_month = 44;
  inline bool has_commision_month() const;
  inline void clear_commision_month();
  static const int kCommisionMonthFieldNumber = 44;
  inline ::google::protobuf::uint64 commision_month() const;
  inline void set_commision_month(::google::protobuf::uint64 value);

  // optional uint64 max_online = 45;
  inline bool has_max_online() const;
  inline void clear_max_online();
  static const int kMaxOnlineFieldNumber = 45;
  inline ::google::protobuf::uint64 max_online() const;
  inline void set_max_online(::google::protobuf::uint64 value);

  // optional uint64 win_cost_value = 46;
  inline bool has_win_cost_value() const;
  inline void clear_win_cost_value();
  static const int kWinCostValueFieldNumber = 46;
  inline ::google::protobuf::uint64 win_cost_value() const;
  inline void set_win_cost_value(::google::protobuf::uint64 value);

  // optional uint64 day_money_value = 47;
  inline bool has_day_money_value() const;
  inline void clear_day_money_value();
  static const int kDayMoneyValueFieldNumber = 47;
  inline ::google::protobuf::uint64 day_money_value() const;
  inline void set_day_money_value(::google::protobuf::uint64 value);

  // optional uint64 pay_day = 48;
  inline bool has_pay_day() const;
  inline void clear_pay_day();
  static const int kPayDayFieldNumber = 48;
  inline ::google::protobuf::uint64 pay_day() const;
  inline void set_pay_day(::google::protobuf::uint64 value);

  // optional uint64 pay_week = 49;
  inline bool has_pay_week() const;
  inline void clear_pay_week();
  static const int kPayWeekFieldNumber = 49;
  inline ::google::protobuf::uint64 pay_week() const;
  inline void set_pay_week(::google::protobuf::uint64 value);

  // optional uint64 pay_month = 50;
  inline bool has_pay_month() const;
  inline void clear_pay_month();
  static const int kPayMonthFieldNumber = 50;
  inline ::google::protobuf::uint64 pay_month() const;
  inline void set_pay_month(::google::protobuf::uint64 value);

  // optional uint64 draw_day = 51;
  inline bool has_draw_day() const;
  inline void clear_draw_day();
  static const int kDrawDayFieldNumber = 51;
  inline ::google::protobuf::uint64 draw_day() const;
  inline void set_draw_day(::google::protobuf::uint64 value);

  // optional uint64 draw_week = 52;
  inline bool has_draw_week() const;
  inline void clear_draw_week();
  static const int kDrawWeekFieldNumber = 52;
  inline ::google::protobuf::uint64 draw_week() const;
  inline void set_draw_week(::google::protobuf::uint64 value);

  // optional uint64 draw_month = 53;
  inline bool has_draw_month() const;
  inline void clear_draw_month();
  static const int kDrawMonthFieldNumber = 53;
  inline ::google::protobuf::uint64 draw_month() const;
  inline void set_draw_month(::google::protobuf::uint64 value);

  // optional uint64 trd_pay_day = 54;
  inline bool has_trd_pay_day() const;
  inline void clear_trd_pay_day();
  static const int kTrdPayDayFieldNumber = 54;
  inline ::google::protobuf::uint64 trd_pay_day() const;
  inline void set_trd_pay_day(::google::protobuf::uint64 value);

  // optional uint64 trd_pay_week = 55;
  inline bool has_trd_pay_week() const;
  inline void clear_trd_pay_week();
  static const int kTrdPayWeekFieldNumber = 55;
  inline ::google::protobuf::uint64 trd_pay_week() const;
  inline void set_trd_pay_week(::google::protobuf::uint64 value);

  // optional uint64 trd_pay_month = 56;
  inline bool has_trd_pay_month() const;
  inline void clear_trd_pay_month();
  static const int kTrdPayMonthFieldNumber = 56;
  inline ::google::protobuf::uint64 trd_pay_month() const;
  inline void set_trd_pay_month(::google::protobuf::uint64 value);

  // optional uint64 vip_pay_day = 57;
  inline bool has_vip_pay_day() const;
  inline void clear_vip_pay_day();
  static const int kVipPayDayFieldNumber = 57;
  inline ::google::protobuf::uint64 vip_pay_day() const;
  inline void set_vip_pay_day(::google::protobuf::uint64 value);

  // optional uint64 vip_pay_week = 58;
  inline bool has_vip_pay_week() const;
  inline void clear_vip_pay_week();
  static const int kVipPayWeekFieldNumber = 58;
  inline ::google::protobuf::uint64 vip_pay_week() const;
  inline void set_vip_pay_week(::google::protobuf::uint64 value);

  // optional uint64 vip_pay_month = 59;
  inline bool has_vip_pay_month() const;
  inline void clear_vip_pay_month();
  static const int kVipPayMonthFieldNumber = 59;
  inline ::google::protobuf::uint64 vip_pay_month() const;
  inline void set_vip_pay_month(::google::protobuf::uint64 value);

  // optional uint64 zhuangzhang_day = 60;
  inline bool has_zhuangzhang_day() const;
  inline void clear_zhuangzhang_day();
  static const int kZhuangzhangDayFieldNumber = 60;
  inline ::google::protobuf::uint64 zhuangzhang_day() const;
  inline void set_zhuangzhang_day(::google::protobuf::uint64 value);

  // optional uint64 zhuangzhang_week = 61;
  inline bool has_zhuangzhang_week() const;
  inline void clear_zhuangzhang_week();
  static const int kZhuangzhangWeekFieldNumber = 61;
  inline ::google::protobuf::uint64 zhuangzhang_week() const;
  inline void set_zhuangzhang_week(::google::protobuf::uint64 value);

  // optional uint64 zhuangzhang_month = 62;
  inline bool has_zhuangzhang_month() const;
  inline void clear_zhuangzhang_month();
  static const int kZhuangzhangMonthFieldNumber = 62;
  inline ::google::protobuf::uint64 zhuangzhang_month() const;
  inline void set_zhuangzhang_month(::google::protobuf::uint64 value);

  // optional uint64 give_day = 63;
  inline bool has_give_day() const;
  inline void clear_give_day();
  static const int kGiveDayFieldNumber = 63;
  inline ::google::protobuf::uint64 give_day() const;
  inline void set_give_day(::google::protobuf::uint64 value);

  // optional uint64 give_week = 64;
  inline bool has_give_week() const;
  inline void clear_give_week();
  static const int kGiveWeekFieldNumber = 64;
  inline ::google::protobuf::uint64 give_week() const;
  inline void set_give_week(::google::protobuf::uint64 value);

  // optional uint64 give_month = 65;
  inline bool has_give_month() const;
  inline void clear_give_month();
  static const int kGiveMonthFieldNumber = 65;
  inline ::google::protobuf::uint64 give_month() const;
  inline void set_give_month(::google::protobuf::uint64 value);

  // optional uint64 all_give = 66;
  inline bool has_all_give() const;
  inline void clear_all_give();
  static const int kAllGiveFieldNumber = 66;
  inline ::google::protobuf::uint64 all_give() const;
  inline void set_all_give(::google::protobuf::uint64 value);

  // optional uint64 all_vip_zhuanru = 67;
  inline bool has_all_vip_zhuanru() const;
  inline void clear_all_vip_zhuanru();
  static const int kAllVipZhuanruFieldNumber = 67;
  inline ::google::protobuf::uint64 all_vip_zhuanru() const;
  inline void set_all_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 today_vip_zhuanru = 68;
  inline bool has_today_vip_zhuanru() const;
  inline void clear_today_vip_zhuanru();
  static const int kTodayVipZhuanruFieldNumber = 68;
  inline ::google::protobuf::uint64 today_vip_zhuanru() const;
  inline void set_today_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 week_vip_zhuanru = 69;
  inline bool has_week_vip_zhuanru() const;
  inline void clear_week_vip_zhuanru();
  static const int kWeekVipZhuanruFieldNumber = 69;
  inline ::google::protobuf::uint64 week_vip_zhuanru() const;
  inline void set_week_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 month_vip_zhuanru = 70;
  inline bool has_month_vip_zhuanru() const;
  inline void clear_month_vip_zhuanru();
  static const int kMonthVipZhuanruFieldNumber = 70;
  inline ::google::protobuf::uint64 month_vip_zhuanru() const;
  inline void set_month_vip_zhuanru(::google::protobuf::uint64 value);

  // optional uint64 all_vip_zhuanchu = 71;
  inline bool has_all_vip_zhuanchu() const;
  inline void clear_all_vip_zhuanchu();
  static const int kAllVipZhuanchuFieldNumber = 71;
  inline ::google::protobuf::uint64 all_vip_zhuanchu() const;
  inline void set_all_vip_zhuanchu(::google::protobuf::uint64 value);

  // optional uint64 today_vip_zhuanchu = 72;
  inline bool has_today_vip_zhuanchu() const;
  inline void clear_today_vip_zhuanchu();
  static const int kTodayVipZhuanchuFieldNumber = 72;
  inline ::google::protobuf::uint64 today_vip_zhuanchu() const;
  inline void set_today_vip_zhuanchu(::google::protobuf::uint64 value);

  // optional uint64 week_vip_zhuanchu = 73;
  inline bool has_week_vip_zhuanchu() const;
  inline void clear_week_vip_zhuanchu();
  static const int kWeekVipZhuanchuFieldNumber = 73;
  inline ::google::protobuf::uint64 week_vip_zhuanchu() const;
  inline void set_week_vip_zhuanchu(::google::protobuf::uint64 value);

  // optional uint64 month_vip_zhuanchu = 74;
  inline bool has_month_vip_zhuanchu() const;
  inline void clear_month_vip_zhuanchu();
  static const int kMonthVipZhuanchuFieldNumber = 74;
  inline ::google::protobuf::uint64 month_vip_zhuanchu() const;
  inline void set_month_vip_zhuanchu(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbLogSystemDay)
 private:
  inline void set_has_date_id();
  inline void clear_has_date_id();
  inline void set_has_active_player();
  inline void clear_has_active_player();
  inline void set_has_login_count();
  inline void clear_has_login_count();
  inline void set_has_valid_player();
  inline void clear_has_valid_player();
  inline void set_has_new_player();
  inline void clear_has_new_player();
  inline void set_has_pay_player();
  inline void clear_has_pay_player();
  inline void set_has_pay_times();
  inline void clear_has_pay_times();
  inline void set_has_pay_all();
  inline void clear_has_pay_all();
  inline void set_has_new_pay_player();
  inline void clear_has_new_pay_player();
  inline void set_has_new_pay_all();
  inline void clear_has_new_pay_all();
  inline void set_has_commission_all();
  inline void clear_has_commission_all();
  inline void set_has_all_fee();
  inline void clear_has_all_fee();
  inline void set_has_all_pour();
  inline void clear_has_all_pour();
  inline void set_has_all_win();
  inline void clear_has_all_win();
  inline void set_has_jetton_init();
  inline void clear_has_jetton_init();
  inline void set_has_all_draw();
  inline void clear_has_all_draw();
  inline void set_has_jetton_in();
  inline void clear_has_jetton_in();
  inline void set_has_jetton_out();
  inline void clear_has_jetton_out();
  inline void set_has_sys_award();
  inline void clear_has_sys_award();
  inline void set_has_player_jetton();
  inline void clear_has_player_jetton();
  inline void set_has_trd_pay_all();
  inline void clear_has_trd_pay_all();
  inline void set_has_vip_pay_all();
  inline void clear_has_vip_pay_all();
  inline void set_has_zhuangzhang_all();
  inline void clear_has_zhuangzhang_all();
  inline void set_has_activity_award();
  inline void clear_has_activity_award();
  inline void set_has_all_bank_jetton();
  inline void clear_has_all_bank_jetton();
  inline void set_has_freeze_jetton();
  inline void clear_has_freeze_jetton();
  inline void set_has_all_jetton();
  inline void clear_has_all_jetton();
  inline void set_has_all_player();
  inline void clear_has_all_player();
  inline void set_has_active_seven();
  inline void clear_has_active_seven();
  inline void set_has_active_thirty();
  inline void clear_has_active_thirty();
  inline void set_has_pour_day_all();
  inline void clear_has_pour_day_all();
  inline void set_has_pour_week_all();
  inline void clear_has_pour_week_all();
  inline void set_has_pour_month_all();
  inline void clear_has_pour_month_all();
  inline void set_has_sys_win_day();
  inline void clear_has_sys_win_day();
  inline void set_has_sys_win_week();
  inline void clear_has_sys_win_week();
  inline void set_has_sys_win_month();
  inline void clear_has_sys_win_month();
  inline void set_has_fee_day();
  inline void clear_has_fee_day();
  inline void set_has_fee_week();
  inline void clear_has_fee_week();
  inline void set_has_fee_month();
  inline void clear_has_fee_month();
  inline void set_has_commision_all();
  inline void clear_has_commision_all();
  inline void set_has_commision_take();
  inline void clear_has_commision_take();
  inline void set_has_commision_day();
  inline void clear_has_commision_day();
  inline void set_has_commision_week();
  inline void clear_has_commision_week();
  inline void set_has_commision_month();
  inline void clear_has_commision_month();
  inline void set_has_max_online();
  inline void clear_has_max_online();
  inline void set_has_win_cost_value();
  inline void clear_has_win_cost_value();
  inline void set_has_day_money_value();
  inline void clear_has_day_money_value();
  inline void set_has_pay_day();
  inline void clear_has_pay_day();
  inline void set_has_pay_week();
  inline void clear_has_pay_week();
  inline void set_has_pay_month();
  inline void clear_has_pay_month();
  inline void set_has_draw_day();
  inline void clear_has_draw_day();
  inline void set_has_draw_week();
  inline void clear_has_draw_week();
  inline void set_has_draw_month();
  inline void clear_has_draw_month();
  inline void set_has_trd_pay_day();
  inline void clear_has_trd_pay_day();
  inline void set_has_trd_pay_week();
  inline void clear_has_trd_pay_week();
  inline void set_has_trd_pay_month();
  inline void clear_has_trd_pay_month();
  inline void set_has_vip_pay_day();
  inline void clear_has_vip_pay_day();
  inline void set_has_vip_pay_week();
  inline void clear_has_vip_pay_week();
  inline void set_has_vip_pay_month();
  inline void clear_has_vip_pay_month();
  inline void set_has_zhuangzhang_day();
  inline void clear_has_zhuangzhang_day();
  inline void set_has_zhuangzhang_week();
  inline void clear_has_zhuangzhang_week();
  inline void set_has_zhuangzhang_month();
  inline void clear_has_zhuangzhang_month();
  inline void set_has_give_day();
  inline void clear_has_give_day();
  inline void set_has_give_week();
  inline void clear_has_give_week();
  inline void set_has_give_month();
  inline void clear_has_give_month();
  inline void set_has_all_give();
  inline void clear_has_all_give();
  inline void set_has_all_vip_zhuanru();
  inline void clear_has_all_vip_zhuanru();
  inline void set_has_today_vip_zhuanru();
  inline void clear_has_today_vip_zhuanru();
  inline void set_has_week_vip_zhuanru();
  inline void clear_has_week_vip_zhuanru();
  inline void set_has_month_vip_zhuanru();
  inline void clear_has_month_vip_zhuanru();
  inline void set_has_all_vip_zhuanchu();
  inline void clear_has_all_vip_zhuanchu();
  inline void set_has_today_vip_zhuanchu();
  inline void clear_has_today_vip_zhuanchu();
  inline void set_has_week_vip_zhuanchu();
  inline void clear_has_week_vip_zhuanchu();
  inline void set_has_month_vip_zhuanchu();
  inline void clear_has_month_vip_zhuanchu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* date_id_;
  ::google::protobuf::uint32 active_player_;
  ::google::protobuf::uint32 login_count_;
  ::google::protobuf::uint32 valid_player_;
  ::google::protobuf::uint32 new_player_;
  ::google::protobuf::uint32 pay_player_;
  ::google::protobuf::uint32 pay_times_;
  ::google::protobuf::uint64 pay_all_;
  ::google::protobuf::uint32 new_pay_player_;
  ::google::protobuf::uint32 new_pay_all_;
  ::google::protobuf::uint64 commission_all_;
  ::google::protobuf::uint64 all_fee_;
  ::google::protobuf::uint64 all_pour_;
  ::google::protobuf::int64 all_win_;
  ::google::protobuf::uint64 jetton_init_;
  ::google::protobuf::uint64 all_draw_;
  ::google::protobuf::uint64 jetton_in_;
  ::google::protobuf::uint64 jetton_out_;
  ::google::protobuf::uint64 sys_award_;
  ::google::protobuf::uint64 player_jetton_;
  ::google::protobuf::uint64 trd_pay_all_;
  ::google::protobuf::uint64 vip_pay_all_;
  ::google::protobuf::uint64 zhuangzhang_all_;
  ::google::protobuf::uint64 activity_award_;
  ::google::protobuf::uint64 all_bank_jetton_;
  ::google::protobuf::uint64 freeze_jetton_;
  ::google::protobuf::uint64 all_jetton_;
  ::google::protobuf::uint64 all_player_;
  ::google::protobuf::uint64 active_seven_;
  ::google::protobuf::uint64 active_thirty_;
  ::google::protobuf::uint64 pour_day_all_;
  ::google::protobuf::uint64 pour_week_all_;
  ::google::protobuf::uint64 pour_month_all_;
  ::google::protobuf::int64 sys_win_day_;
  ::google::protobuf::int64 sys_win_week_;
  ::google::protobuf::int64 sys_win_month_;
  ::google::protobuf::uint64 fee_day_;
  ::google::protobuf::uint64 fee_week_;
  ::google::protobuf::uint64 fee_month_;
  ::google::protobuf::uint64 commision_all_;
  ::google::protobuf::uint64 commision_take_;
  ::google::protobuf::uint64 commision_day_;
  ::google::protobuf::uint64 commision_week_;
  ::google::protobuf::uint64 commision_month_;
  ::google::protobuf::uint64 max_online_;
  ::google::protobuf::uint64 win_cost_value_;
  ::google::protobuf::uint64 day_money_value_;
  ::google::protobuf::uint64 pay_day_;
  ::google::protobuf::uint64 pay_week_;
  ::google::protobuf::uint64 pay_month_;
  ::google::protobuf::uint64 draw_day_;
  ::google::protobuf::uint64 draw_week_;
  ::google::protobuf::uint64 draw_month_;
  ::google::protobuf::uint64 trd_pay_day_;
  ::google::protobuf::uint64 trd_pay_week_;
  ::google::protobuf::uint64 trd_pay_month_;
  ::google::protobuf::uint64 vip_pay_day_;
  ::google::protobuf::uint64 vip_pay_week_;
  ::google::protobuf::uint64 vip_pay_month_;
  ::google::protobuf::uint64 zhuangzhang_day_;
  ::google::protobuf::uint64 zhuangzhang_week_;
  ::google::protobuf::uint64 zhuangzhang_month_;
  ::google::protobuf::uint64 give_day_;
  ::google::protobuf::uint64 give_week_;
  ::google::protobuf::uint64 give_month_;
  ::google::protobuf::uint64 all_give_;
  ::google::protobuf::uint64 all_vip_zhuanru_;
  ::google::protobuf::uint64 today_vip_zhuanru_;
  ::google::protobuf::uint64 week_vip_zhuanru_;
  ::google::protobuf::uint64 month_vip_zhuanru_;
  ::google::protobuf::uint64 all_vip_zhuanchu_;
  ::google::protobuf::uint64 today_vip_zhuanchu_;
  ::google::protobuf::uint64 week_vip_zhuanchu_;
  ::google::protobuf::uint64 month_vip_zhuanchu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(74 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbLogSystemDay* default_instance_;
};
// -------------------------------------------------------------------

class tbRedeemCode : public ::google::protobuf::Message {
 public:
  tbRedeemCode();
  virtual ~tbRedeemCode();

  tbRedeemCode(const tbRedeemCode& from);

  inline tbRedeemCode& operator=(const tbRedeemCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tbRedeemCode& default_instance();

  void Swap(tbRedeemCode* other);

  // implements Message ----------------------------------------------

  tbRedeemCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tbRedeemCode& from);
  void MergeFrom(const tbRedeemCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional uint64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::uint64 gold() const;
  inline void set_gold(::google::protobuf::uint64 value);

  // optional uint64 create_time = 3;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // optional string code_name = 5;
  inline bool has_code_name() const;
  inline void clear_code_name();
  static const int kCodeNameFieldNumber = 5;
  inline const ::std::string& code_name() const;
  inline void set_code_name(const ::std::string& value);
  inline void set_code_name(const char* value);
  inline void set_code_name(const char* value, size_t size);
  inline ::std::string* mutable_code_name();
  inline ::std::string* release_code_name();
  inline void set_allocated_code_name(::std::string* code_name);

  // optional uint32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint64 user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 use_time = 8;
  inline bool has_use_time() const;
  inline void clear_use_time();
  static const int kUseTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 use_time() const;
  inline void set_use_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.tbRedeemCode)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_code_name();
  inline void clear_has_code_name();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_use_time();
  inline void clear_has_use_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::uint64 gold_;
  ::google::protobuf::uint64 create_time_;
  ::std::string* code_name_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 use_time_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static tbRedeemCode* default_instance_;
};
// -------------------------------------------------------------------

class LogRedeemCodeRechargeRecord : public ::google::protobuf::Message {
 public:
  LogRedeemCodeRechargeRecord();
  virtual ~LogRedeemCodeRechargeRecord();

  LogRedeemCodeRechargeRecord(const LogRedeemCodeRechargeRecord& from);

  inline LogRedeemCodeRechargeRecord& operator=(const LogRedeemCodeRechargeRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRedeemCodeRechargeRecord& default_instance();

  void Swap(LogRedeemCodeRechargeRecord* other);

  // implements Message ----------------------------------------------

  LogRedeemCodeRechargeRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogRedeemCodeRechargeRecord& from);
  void MergeFrom(const LogRedeemCodeRechargeRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint64 event_id() const;
  inline void set_event_id(::google::protobuf::uint64 value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string bus_name = 3;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 3;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string event_time = 4;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 4;
  inline const ::std::string& event_time() const;
  inline void set_event_time(const ::std::string& value);
  inline void set_event_time(const char* value);
  inline void set_event_time(const char* value, size_t size);
  inline ::std::string* mutable_event_time();
  inline ::std::string* release_event_time();
  inline void set_allocated_event_time(::std::string* event_time);

  // optional uint64 user_id = 5;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint64 amount = 20;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 20;
  inline ::google::protobuf::uint64 amount() const;
  inline void set_amount(::google::protobuf::uint64 value);

  // optional uint64 status = 21;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 21;
  inline ::google::protobuf::uint64 status() const;
  inline void set_status(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LogRedeemCodeRechargeRecord)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_id_;
  ::std::string* bus_name_;
  ::std::string* event_time_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint64 status_;
  ::google::protobuf::uint32 sequence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static LogRedeemCodeRechargeRecord* default_instance_;
};
// -------------------------------------------------------------------

class GameRoomStat : public ::google::protobuf::Message {
 public:
  GameRoomStat();
  virtual ~GameRoomStat();

  GameRoomStat(const GameRoomStat& from);

  inline GameRoomStat& operator=(const GameRoomStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRoomStat& default_instance();

  void Swap(GameRoomStat* other);

  // implements Message ----------------------------------------------

  GameRoomStat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameRoomStat& from);
  void MergeFrom(const GameRoomStat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cur_fee = 1;
  inline bool has_cur_fee() const;
  inline void clear_cur_fee();
  static const int kCurFeeFieldNumber = 1;
  inline ::google::protobuf::uint64 cur_fee() const;
  inline void set_cur_fee(::google::protobuf::uint64 value);

  // optional uint64 cur_pour = 2;
  inline bool has_cur_pour() const;
  inline void clear_cur_pour();
  static const int kCurPourFieldNumber = 2;
  inline ::google::protobuf::uint64 cur_pour() const;
  inline void set_cur_pour(::google::protobuf::uint64 value);

  // optional int64 cur_win = 3;
  inline bool has_cur_win() const;
  inline void clear_cur_win();
  static const int kCurWinFieldNumber = 3;
  inline ::google::protobuf::int64 cur_win() const;
  inline void set_cur_win(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GameRoomStat)
 private:
  inline void set_has_cur_fee();
  inline void clear_has_cur_fee();
  inline void set_has_cur_pour();
  inline void clear_has_cur_pour();
  inline void set_has_cur_win();
  inline void clear_has_cur_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cur_fee_;
  ::google::protobuf::uint64 cur_pour_;
  ::google::protobuf::int64 cur_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GameRoomStat* default_instance_;
};
// -------------------------------------------------------------------

class GamePlayerPourInfo : public ::google::protobuf::Message {
 public:
  GamePlayerPourInfo();
  virtual ~GamePlayerPourInfo();

  GamePlayerPourInfo(const GamePlayerPourInfo& from);

  inline GamePlayerPourInfo& operator=(const GamePlayerPourInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePlayerPourInfo& default_instance();

  void Swap(GamePlayerPourInfo* other);

  // implements Message ----------------------------------------------

  GamePlayerPourInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamePlayerPourInfo& from);
  void MergeFrom(const GamePlayerPourInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional int64 pour = 2;
  inline bool has_pour() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 2;
  inline ::google::protobuf::int64 pour() const;
  inline void set_pour(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GamePlayerPourInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_pour();
  inline void clear_has_pour();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int64 pour_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GamePlayerPourInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameTablePourInfo : public ::google::protobuf::Message {
 public:
  GameTablePourInfo();
  virtual ~GameTablePourInfo();

  GameTablePourInfo(const GameTablePourInfo& from);

  inline GameTablePourInfo& operator=(const GameTablePourInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTablePourInfo& default_instance();

  void Swap(GameTablePourInfo* other);

  // implements Message ----------------------------------------------

  GameTablePourInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameTablePourInfo& from);
  void MergeFrom(const GameTablePourInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GamePlayerPourInfo pour_info = 1;
  inline int pour_info_size() const;
  inline void clear_pour_info();
  static const int kPourInfoFieldNumber = 1;
  inline const ::proto_ff::GamePlayerPourInfo& pour_info(int index) const;
  inline ::proto_ff::GamePlayerPourInfo* mutable_pour_info(int index);
  inline ::proto_ff::GamePlayerPourInfo* add_pour_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GamePlayerPourInfo >&
      pour_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GamePlayerPourInfo >*
      mutable_pour_info();

  // @@protoc_insertion_point(class_scope:proto_ff.GameTablePourInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GamePlayerPourInfo > pour_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static GameTablePourInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// GameServerRoomInfo

// optional uint32 game_id = 1;
inline bool GameServerRoomInfo::has_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameServerRoomInfo::set_has_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameServerRoomInfo::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameServerRoomInfo::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 GameServerRoomInfo::game_id() const {
  return game_id_;
}
inline void GameServerRoomInfo::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 2;
inline bool GameServerRoomInfo::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameServerRoomInfo::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameServerRoomInfo::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameServerRoomInfo::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 GameServerRoomInfo::room_id() const {
  return room_id_;
}
inline void GameServerRoomInfo::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string room_name = 3;
inline bool GameServerRoomInfo::has_room_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameServerRoomInfo::set_has_room_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameServerRoomInfo::clear_has_room_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameServerRoomInfo::clear_room_name() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    room_name_->clear();
  }
  clear_has_room_name();
}
inline const ::std::string& GameServerRoomInfo::room_name() const {
  return *room_name_;
}
inline void GameServerRoomInfo::set_room_name(const ::std::string& value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void GameServerRoomInfo::set_room_name(const char* value) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(value);
}
inline void GameServerRoomInfo::set_room_name(const char* value, size_t size) {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  room_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameServerRoomInfo::mutable_room_name() {
  set_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    room_name_ = new ::std::string;
  }
  return room_name_;
}
inline ::std::string* GameServerRoomInfo::release_room_name() {
  clear_has_room_name();
  if (room_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = room_name_;
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameServerRoomInfo::set_allocated_room_name(::std::string* room_name) {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (room_name) {
    set_has_room_name();
    room_name_ = room_name;
  } else {
    clear_has_room_name();
    room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 enter_min = 4;
inline bool GameServerRoomInfo::has_enter_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameServerRoomInfo::set_has_enter_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameServerRoomInfo::clear_has_enter_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameServerRoomInfo::clear_enter_min() {
  enter_min_ = GOOGLE_ULONGLONG(0);
  clear_has_enter_min();
}
inline ::google::protobuf::uint64 GameServerRoomInfo::enter_min() const {
  return enter_min_;
}
inline void GameServerRoomInfo::set_enter_min(::google::protobuf::uint64 value) {
  set_has_enter_min();
  enter_min_ = value;
}

// optional uint64 enter_max = 5;
inline bool GameServerRoomInfo::has_enter_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameServerRoomInfo::set_has_enter_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameServerRoomInfo::clear_has_enter_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameServerRoomInfo::clear_enter_max() {
  enter_max_ = GOOGLE_ULONGLONG(0);
  clear_has_enter_max();
}
inline ::google::protobuf::uint64 GameServerRoomInfo::enter_max() const {
  return enter_max_;
}
inline void GameServerRoomInfo::set_enter_max(::google::protobuf::uint64 value) {
  set_has_enter_max();
  enter_max_ = value;
}

// optional uint32 online_count = 6;
inline bool GameServerRoomInfo::has_online_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameServerRoomInfo::set_has_online_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameServerRoomInfo::clear_has_online_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameServerRoomInfo::clear_online_count() {
  online_count_ = 0u;
  clear_has_online_count();
}
inline ::google::protobuf::uint32 GameServerRoomInfo::online_count() const {
  return online_count_;
}
inline void GameServerRoomInfo::set_online_count(::google::protobuf::uint32 value) {
  set_has_online_count();
  online_count_ = value;
}

// optional uint32 bus_id = 7;
inline bool GameServerRoomInfo::has_bus_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameServerRoomInfo::set_has_bus_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameServerRoomInfo::clear_has_bus_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameServerRoomInfo::clear_bus_id() {
  bus_id_ = 0u;
  clear_has_bus_id();
}
inline ::google::protobuf::uint32 GameServerRoomInfo::bus_id() const {
  return bus_id_;
}
inline void GameServerRoomInfo::set_bus_id(::google::protobuf::uint32 value) {
  set_has_bus_id();
  bus_id_ = value;
}

// optional uint32 status = 8;
inline bool GameServerRoomInfo::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameServerRoomInfo::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameServerRoomInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameServerRoomInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 GameServerRoomInfo::status() const {
  return status_;
}
inline void GameServerRoomInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// tbServerMgr

// optional uint64 id = 1;
inline bool tbServerMgr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbServerMgr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbServerMgr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbServerMgr::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tbServerMgr::id() const {
  return id_;
}
inline void tbServerMgr::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string contract = 2;
inline bool tbServerMgr::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbServerMgr::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbServerMgr::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbServerMgr::clear_contract() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    contract_->clear();
  }
  clear_has_contract();
}
inline const ::std::string& tbServerMgr::contract() const {
  return *contract_;
}
inline void tbServerMgr::set_contract(const ::std::string& value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void tbServerMgr::set_contract(const char* value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void tbServerMgr::set_contract(const char* value, size_t size) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbServerMgr::mutable_contract() {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  return contract_;
}
inline ::std::string* tbServerMgr::release_contract() {
  clear_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_;
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbServerMgr::set_allocated_contract(::std::string* contract) {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (contract) {
    set_has_contract();
    contract_ = contract;
  } else {
    clear_has_contract();
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_addr = 3;
inline bool tbServerMgr::has_machine_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbServerMgr::set_has_machine_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbServerMgr::clear_has_machine_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbServerMgr::clear_machine_addr() {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    machine_addr_->clear();
  }
  clear_has_machine_addr();
}
inline const ::std::string& tbServerMgr::machine_addr() const {
  return *machine_addr_;
}
inline void tbServerMgr::set_machine_addr(const ::std::string& value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void tbServerMgr::set_machine_addr(const char* value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void tbServerMgr::set_machine_addr(const char* value, size_t size) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbServerMgr::mutable_machine_addr() {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  return machine_addr_;
}
inline ::std::string* tbServerMgr::release_machine_addr() {
  clear_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_addr_;
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbServerMgr::set_allocated_machine_addr(::std::string* machine_addr) {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (machine_addr) {
    set_has_machine_addr();
    machine_addr_ = machine_addr;
  } else {
    clear_has_machine_addr();
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 4;
inline bool tbServerMgr::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbServerMgr::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbServerMgr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbServerMgr::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& tbServerMgr::ip() const {
  return *ip_;
}
inline void tbServerMgr::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbServerMgr::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbServerMgr::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbServerMgr::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* tbServerMgr::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbServerMgr::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bus_name = 5;
inline bool tbServerMgr::has_bus_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbServerMgr::set_has_bus_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbServerMgr::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbServerMgr::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& tbServerMgr::bus_name() const {
  return *bus_name_;
}
inline void tbServerMgr::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void tbServerMgr::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void tbServerMgr::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbServerMgr::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* tbServerMgr::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbServerMgr::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_desc = 6;
inline bool tbServerMgr::has_server_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbServerMgr::set_has_server_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbServerMgr::clear_has_server_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbServerMgr::clear_server_desc() {
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    server_desc_->clear();
  }
  clear_has_server_desc();
}
inline const ::std::string& tbServerMgr::server_desc() const {
  return *server_desc_;
}
inline void tbServerMgr::set_server_desc(const ::std::string& value) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(value);
}
inline void tbServerMgr::set_server_desc(const char* value) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(value);
}
inline void tbServerMgr::set_server_desc(const char* value, size_t size) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbServerMgr::mutable_server_desc() {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  return server_desc_;
}
inline ::std::string* tbServerMgr::release_server_desc() {
  clear_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_desc_;
    server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbServerMgr::set_allocated_server_desc(::std::string* server_desc) {
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete server_desc_;
  }
  if (server_desc) {
    set_has_server_desc();
    server_desc_ = server_desc;
  } else {
    clear_has_server_desc();
    server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cur_count = 7;
inline bool tbServerMgr::has_cur_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbServerMgr::set_has_cur_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbServerMgr::clear_has_cur_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbServerMgr::clear_cur_count() {
  cur_count_ = 0u;
  clear_has_cur_count();
}
inline ::google::protobuf::uint32 tbServerMgr::cur_count() const {
  return cur_count_;
}
inline void tbServerMgr::set_cur_count(::google::protobuf::uint32 value) {
  set_has_cur_count();
  cur_count_ = value;
}

// optional uint64 last_login_time = 8;
inline bool tbServerMgr::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbServerMgr::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbServerMgr::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbServerMgr::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::uint64 tbServerMgr::last_login_time() const {
  return last_login_time_;
}
inline void tbServerMgr::set_last_login_time(::google::protobuf::uint64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint64 last_logout_time = 9;
inline bool tbServerMgr::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbServerMgr::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbServerMgr::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbServerMgr::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint64 tbServerMgr::last_logout_time() const {
  return last_logout_time_;
}
inline void tbServerMgr::set_last_logout_time(::google::protobuf::uint64 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// optional uint64 create_time = 10;
inline bool tbServerMgr::has_create_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbServerMgr::set_has_create_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbServerMgr::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbServerMgr::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 tbServerMgr::create_time() const {
  return create_time_;
}
inline void tbServerMgr::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// tbContractMgr

// optional uint64 id = 1;
inline bool tbContractMgr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbContractMgr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbContractMgr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbContractMgr::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tbContractMgr::id() const {
  return id_;
}
inline void tbContractMgr::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string contract = 2;
inline bool tbContractMgr::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbContractMgr::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbContractMgr::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbContractMgr::clear_contract() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    contract_->clear();
  }
  clear_has_contract();
}
inline const ::std::string& tbContractMgr::contract() const {
  return *contract_;
}
inline void tbContractMgr::set_contract(const ::std::string& value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void tbContractMgr::set_contract(const char* value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void tbContractMgr::set_contract(const char* value, size_t size) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbContractMgr::mutable_contract() {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  return contract_;
}
inline ::std::string* tbContractMgr::release_contract() {
  clear_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_;
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbContractMgr::set_allocated_contract(::std::string* contract) {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (contract) {
    set_has_contract();
    contract_ = contract;
  } else {
    clear_has_contract();
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_addr = 3;
inline bool tbContractMgr::has_machine_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbContractMgr::set_has_machine_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbContractMgr::clear_has_machine_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbContractMgr::clear_machine_addr() {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    machine_addr_->clear();
  }
  clear_has_machine_addr();
}
inline const ::std::string& tbContractMgr::machine_addr() const {
  return *machine_addr_;
}
inline void tbContractMgr::set_machine_addr(const ::std::string& value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void tbContractMgr::set_machine_addr(const char* value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void tbContractMgr::set_machine_addr(const char* value, size_t size) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbContractMgr::mutable_machine_addr() {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  return machine_addr_;
}
inline ::std::string* tbContractMgr::release_machine_addr() {
  clear_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_addr_;
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbContractMgr::set_allocated_machine_addr(::std::string* machine_addr) {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (machine_addr) {
    set_has_machine_addr();
    machine_addr_ = machine_addr;
  } else {
    clear_has_machine_addr();
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 4;
inline bool tbContractMgr::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbContractMgr::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbContractMgr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbContractMgr::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& tbContractMgr::ip() const {
  return *ip_;
}
inline void tbContractMgr::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbContractMgr::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbContractMgr::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbContractMgr::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* tbContractMgr::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbContractMgr::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_desc = 5;
inline bool tbContractMgr::has_server_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbContractMgr::set_has_server_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbContractMgr::clear_has_server_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbContractMgr::clear_server_desc() {
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    server_desc_->clear();
  }
  clear_has_server_desc();
}
inline const ::std::string& tbContractMgr::server_desc() const {
  return *server_desc_;
}
inline void tbContractMgr::set_server_desc(const ::std::string& value) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(value);
}
inline void tbContractMgr::set_server_desc(const char* value) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(value);
}
inline void tbContractMgr::set_server_desc(const char* value, size_t size) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbContractMgr::mutable_server_desc() {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  return server_desc_;
}
inline ::std::string* tbContractMgr::release_server_desc() {
  clear_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_desc_;
    server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbContractMgr::set_allocated_server_desc(::std::string* server_desc) {
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete server_desc_;
  }
  if (server_desc) {
    set_has_server_desc();
    server_desc_ = server_desc;
  } else {
    clear_has_server_desc();
    server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// tbAccountTable

// optional uint64 player_id = 1;
inline bool tbAccountTable::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbAccountTable::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbAccountTable::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbAccountTable::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 tbAccountTable::player_id() const {
  return player_id_;
}
inline void tbAccountTable::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional string account = 2;
inline bool tbAccountTable::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbAccountTable::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbAccountTable::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbAccountTable::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& tbAccountTable::account() const {
  return *account_;
}
inline void tbAccountTable::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void tbAccountTable::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void tbAccountTable::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbAccountTable::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* tbAccountTable::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbAccountTable::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 3;
inline bool tbAccountTable::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbAccountTable::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbAccountTable::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbAccountTable::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& tbAccountTable::password() const {
  return *password_;
}
inline void tbAccountTable::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void tbAccountTable::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void tbAccountTable::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbAccountTable::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* tbAccountTable::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbAccountTable::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 account_type = 4;
inline bool tbAccountTable::has_account_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbAccountTable::set_has_account_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbAccountTable::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbAccountTable::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 tbAccountTable::account_type() const {
  return account_type_;
}
inline void tbAccountTable::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
}

// optional string device_id = 5;
inline bool tbAccountTable::has_device_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbAccountTable::set_has_device_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbAccountTable::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbAccountTable::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& tbAccountTable::device_id() const {
  return *device_id_;
}
inline void tbAccountTable::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbAccountTable::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbAccountTable::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbAccountTable::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* tbAccountTable::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbAccountTable::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 phonenum = 6;
inline bool tbAccountTable::has_phonenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbAccountTable::set_has_phonenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbAccountTable::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbAccountTable::clear_phonenum() {
  phonenum_ = GOOGLE_ULONGLONG(0);
  clear_has_phonenum();
}
inline ::google::protobuf::uint64 tbAccountTable::phonenum() const {
  return phonenum_;
}
inline void tbAccountTable::set_phonenum(::google::protobuf::uint64 value) {
  set_has_phonenum();
  phonenum_ = value;
}

// optional uint64 real_player_id = 7;
inline bool tbAccountTable::has_real_player_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbAccountTable::set_has_real_player_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbAccountTable::clear_has_real_player_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbAccountTable::clear_real_player_id() {
  real_player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_real_player_id();
}
inline ::google::protobuf::uint64 tbAccountTable::real_player_id() const {
  return real_player_id_;
}
inline void tbAccountTable::set_real_player_id(::google::protobuf::uint64 value) {
  set_has_real_player_id();
  real_player_id_ = value;
}

// -------------------------------------------------------------------

// ItemData

// optional int32 item_id = 1;
inline bool ItemData::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemData::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemData::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemData::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 ItemData::item_id() const {
  return item_id_;
}
inline void ItemData::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_num = 2;
inline bool ItemData::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemData::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemData::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemData::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 ItemData::item_num() const {
  return item_num_;
}
inline void ItemData::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
}

// -------------------------------------------------------------------

// SingleMailInfo

// optional uint64 id = 1;
inline bool SingleMailInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleMailInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleMailInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleMailInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SingleMailInfo::id() const {
  return id_;
}
inline void SingleMailInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 status = 3;
inline bool SingleMailInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleMailInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleMailInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleMailInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 SingleMailInfo::status() const {
  return status_;
}
inline void SingleMailInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// UserSpecialMailData

// optional int32 static_id = 1;
inline bool UserSpecialMailData::has_static_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSpecialMailData::set_has_static_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSpecialMailData::clear_has_static_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSpecialMailData::clear_static_id() {
  static_id_ = 0;
  clear_has_static_id();
}
inline ::google::protobuf::int32 UserSpecialMailData::static_id() const {
  return static_id_;
}
inline void UserSpecialMailData::set_static_id(::google::protobuf::int32 value) {
  set_has_static_id();
  static_id_ = value;
}

// optional uint64 time = 2;
inline bool UserSpecialMailData::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSpecialMailData::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSpecialMailData::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSpecialMailData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 UserSpecialMailData::time() const {
  return time_;
}
inline void UserSpecialMailData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// UserMailInfo

// repeated .proto_ff.SingleMailInfo simple_mail = 1;
inline int UserMailInfo::simple_mail_size() const {
  return simple_mail_.size();
}
inline void UserMailInfo::clear_simple_mail() {
  simple_mail_.Clear();
}
inline const ::proto_ff::SingleMailInfo& UserMailInfo::simple_mail(int index) const {
  return simple_mail_.Get(index);
}
inline ::proto_ff::SingleMailInfo* UserMailInfo::mutable_simple_mail(int index) {
  return simple_mail_.Mutable(index);
}
inline ::proto_ff::SingleMailInfo* UserMailInfo::add_simple_mail() {
  return simple_mail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SingleMailInfo >&
UserMailInfo::simple_mail() const {
  return simple_mail_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SingleMailInfo >*
UserMailInfo::mutable_simple_mail() {
  return &simple_mail_;
}

// repeated .proto_ff.UserSpecialMailData receive_data = 2;
inline int UserMailInfo::receive_data_size() const {
  return receive_data_.size();
}
inline void UserMailInfo::clear_receive_data() {
  receive_data_.Clear();
}
inline const ::proto_ff::UserSpecialMailData& UserMailInfo::receive_data(int index) const {
  return receive_data_.Get(index);
}
inline ::proto_ff::UserSpecialMailData* UserMailInfo::mutable_receive_data(int index) {
  return receive_data_.Mutable(index);
}
inline ::proto_ff::UserSpecialMailData* UserMailInfo::add_receive_data() {
  return receive_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSpecialMailData >&
UserMailInfo::receive_data() const {
  return receive_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSpecialMailData >*
UserMailInfo::mutable_receive_data() {
  return &receive_data_;
}

// repeated uint64 del_role_mail = 4;
inline int UserMailInfo::del_role_mail_size() const {
  return del_role_mail_.size();
}
inline void UserMailInfo::clear_del_role_mail() {
  del_role_mail_.Clear();
}
inline ::google::protobuf::uint64 UserMailInfo::del_role_mail(int index) const {
  return del_role_mail_.Get(index);
}
inline void UserMailInfo::set_del_role_mail(int index, ::google::protobuf::uint64 value) {
  del_role_mail_.Set(index, value);
}
inline void UserMailInfo::add_del_role_mail(::google::protobuf::uint64 value) {
  del_role_mail_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserMailInfo::del_role_mail() const {
  return del_role_mail_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserMailInfo::mutable_del_role_mail() {
  return &del_role_mail_;
}

// -------------------------------------------------------------------

// tbUserMailInfo

// required uint64 user_id = 1;
inline bool tbUserMailInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbUserMailInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbUserMailInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbUserMailInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbUserMailInfo::user_id() const {
  return user_id_;
}
inline void tbUserMailInfo::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .proto_ff.UserMailInfo base_info = 2;
inline bool tbUserMailInfo::has_base_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbUserMailInfo::set_has_base_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbUserMailInfo::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbUserMailInfo::clear_base_info() {
  if (base_info_ != NULL) base_info_->::proto_ff::UserMailInfo::Clear();
  clear_has_base_info();
}
inline const ::proto_ff::UserMailInfo& tbUserMailInfo::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::proto_ff::UserMailInfo* tbUserMailInfo::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::proto_ff::UserMailInfo;
  return base_info_;
}
inline ::proto_ff::UserMailInfo* tbUserMailInfo::release_base_info() {
  clear_has_base_info();
  ::proto_ff::UserMailInfo* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void tbUserMailInfo::set_allocated_base_info(::proto_ff::UserMailInfo* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// -------------------------------------------------------------------

// tbUserMailDetail

// optional uint64 id = 1;
inline bool tbUserMailDetail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbUserMailDetail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbUserMailDetail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbUserMailDetail::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tbUserMailDetail::id() const {
  return id_;
}
inline void tbUserMailDetail::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 user_id = 2;
inline bool tbUserMailDetail::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbUserMailDetail::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbUserMailDetail::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbUserMailDetail::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbUserMailDetail::user_id() const {
  return user_id_;
}
inline void tbUserMailDetail::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string send_name = 3;
inline bool tbUserMailDetail::has_send_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbUserMailDetail::set_has_send_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbUserMailDetail::clear_has_send_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbUserMailDetail::clear_send_name() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    send_name_->clear();
  }
  clear_has_send_name();
}
inline const ::std::string& tbUserMailDetail::send_name() const {
  return *send_name_;
}
inline void tbUserMailDetail::set_send_name(const ::std::string& value) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(value);
}
inline void tbUserMailDetail::set_send_name(const char* value) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(value);
}
inline void tbUserMailDetail::set_send_name(const char* value, size_t size) {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  send_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserMailDetail::mutable_send_name() {
  set_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    send_name_ = new ::std::string;
  }
  return send_name_;
}
inline ::std::string* tbUserMailDetail::release_send_name() {
  clear_has_send_name();
  if (send_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_name_;
    send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserMailDetail::set_allocated_send_name(::std::string* send_name) {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (send_name) {
    set_has_send_name();
    send_name_ = send_name;
  } else {
    clear_has_send_name();
    send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 static_id = 4;
inline bool tbUserMailDetail::has_static_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbUserMailDetail::set_has_static_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbUserMailDetail::clear_has_static_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbUserMailDetail::clear_static_id() {
  static_id_ = 0;
  clear_has_static_id();
}
inline ::google::protobuf::int32 tbUserMailDetail::static_id() const {
  return static_id_;
}
inline void tbUserMailDetail::set_static_id(::google::protobuf::int32 value) {
  set_has_static_id();
  static_id_ = value;
}

// optional string content = 5;
inline bool tbUserMailDetail::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbUserMailDetail::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbUserMailDetail::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbUserMailDetail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& tbUserMailDetail::content() const {
  return *content_;
}
inline void tbUserMailDetail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void tbUserMailDetail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void tbUserMailDetail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserMailDetail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* tbUserMailDetail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserMailDetail::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 6;
inline bool tbUserMailDetail::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbUserMailDetail::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbUserMailDetail::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbUserMailDetail::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& tbUserMailDetail::title() const {
  return *title_;
}
inline void tbUserMailDetail::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void tbUserMailDetail::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void tbUserMailDetail::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserMailDetail::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* tbUserMailDetail::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserMailDetail::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 send_time = 7;
inline bool tbUserMailDetail::has_send_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbUserMailDetail::set_has_send_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbUserMailDetail::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbUserMailDetail::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
inline ::google::protobuf::uint64 tbUserMailDetail::send_time() const {
  return send_time_;
}
inline void tbUserMailDetail::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
}

// repeated string mail_name = 8;
inline int tbUserMailDetail::mail_name_size() const {
  return mail_name_.size();
}
inline void tbUserMailDetail::clear_mail_name() {
  mail_name_.Clear();
}
inline const ::std::string& tbUserMailDetail::mail_name(int index) const {
  return mail_name_.Get(index);
}
inline ::std::string* tbUserMailDetail::mutable_mail_name(int index) {
  return mail_name_.Mutable(index);
}
inline void tbUserMailDetail::set_mail_name(int index, const ::std::string& value) {
  mail_name_.Mutable(index)->assign(value);
}
inline void tbUserMailDetail::set_mail_name(int index, const char* value) {
  mail_name_.Mutable(index)->assign(value);
}
inline void tbUserMailDetail::set_mail_name(int index, const char* value, size_t size) {
  mail_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserMailDetail::add_mail_name() {
  return mail_name_.Add();
}
inline void tbUserMailDetail::add_mail_name(const ::std::string& value) {
  mail_name_.Add()->assign(value);
}
inline void tbUserMailDetail::add_mail_name(const char* value) {
  mail_name_.Add()->assign(value);
}
inline void tbUserMailDetail::add_mail_name(const char* value, size_t size) {
  mail_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tbUserMailDetail::mail_name() const {
  return mail_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tbUserMailDetail::mutable_mail_name() {
  return &mail_name_;
}

// optional int64 add_gold = 9;
inline bool tbUserMailDetail::has_add_gold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbUserMailDetail::set_has_add_gold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbUserMailDetail::clear_has_add_gold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbUserMailDetail::clear_add_gold() {
  add_gold_ = GOOGLE_LONGLONG(0);
  clear_has_add_gold();
}
inline ::google::protobuf::int64 tbUserMailDetail::add_gold() const {
  return add_gold_;
}
inline void tbUserMailDetail::set_add_gold(::google::protobuf::int64 value) {
  set_has_add_gold();
  add_gold_ = value;
}

// -------------------------------------------------------------------

// UserMailDetailInfo

// repeated .proto_ff.tbUserMailDetail simple_mail = 1;
inline int UserMailDetailInfo::simple_mail_size() const {
  return simple_mail_.size();
}
inline void UserMailDetailInfo::clear_simple_mail() {
  simple_mail_.Clear();
}
inline const ::proto_ff::tbUserMailDetail& UserMailDetailInfo::simple_mail(int index) const {
  return simple_mail_.Get(index);
}
inline ::proto_ff::tbUserMailDetail* UserMailDetailInfo::mutable_simple_mail(int index) {
  return simple_mail_.Mutable(index);
}
inline ::proto_ff::tbUserMailDetail* UserMailDetailInfo::add_simple_mail() {
  return simple_mail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tbUserMailDetail >&
UserMailDetailInfo::simple_mail() const {
  return simple_mail_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tbUserMailDetail >*
UserMailDetailInfo::mutable_simple_mail() {
  return &simple_mail_;
}

// -------------------------------------------------------------------

// tbGiveBankJetton

// required uint64 id = 1;
inline bool tbGiveBankJetton::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbGiveBankJetton::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbGiveBankJetton::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbGiveBankJetton::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tbGiveBankJetton::id() const {
  return id_;
}
inline void tbGiveBankJetton::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 user_id = 2;
inline bool tbGiveBankJetton::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbGiveBankJetton::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbGiveBankJetton::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbGiveBankJetton::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbGiveBankJetton::user_id() const {
  return user_id_;
}
inline void tbGiveBankJetton::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 3;
inline bool tbGiveBankJetton::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbGiveBankJetton::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbGiveBankJetton::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbGiveBankJetton::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& tbGiveBankJetton::user_name() const {
  return *user_name_;
}
inline void tbGiveBankJetton::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void tbGiveBankJetton::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void tbGiveBankJetton::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbGiveBankJetton::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* tbGiveBankJetton::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbGiveBankJetton::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_vip_level = 4;
inline bool tbGiveBankJetton::has_user_vip_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbGiveBankJetton::set_has_user_vip_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbGiveBankJetton::clear_has_user_vip_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbGiveBankJetton::clear_user_vip_level() {
  user_vip_level_ = GOOGLE_ULONGLONG(0);
  clear_has_user_vip_level();
}
inline ::google::protobuf::uint64 tbGiveBankJetton::user_vip_level() const {
  return user_vip_level_;
}
inline void tbGiveBankJetton::set_user_vip_level(::google::protobuf::uint64 value) {
  set_has_user_vip_level();
  user_vip_level_ = value;
}

// optional uint64 give_user_id = 5;
inline bool tbGiveBankJetton::has_give_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbGiveBankJetton::set_has_give_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbGiveBankJetton::clear_has_give_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbGiveBankJetton::clear_give_user_id() {
  give_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_give_user_id();
}
inline ::google::protobuf::uint64 tbGiveBankJetton::give_user_id() const {
  return give_user_id_;
}
inline void tbGiveBankJetton::set_give_user_id(::google::protobuf::uint64 value) {
  set_has_give_user_id();
  give_user_id_ = value;
}

// optional string give_user_name = 6;
inline bool tbGiveBankJetton::has_give_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbGiveBankJetton::set_has_give_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbGiveBankJetton::clear_has_give_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbGiveBankJetton::clear_give_user_name() {
  if (give_user_name_ != &::google::protobuf::internal::kEmptyString) {
    give_user_name_->clear();
  }
  clear_has_give_user_name();
}
inline const ::std::string& tbGiveBankJetton::give_user_name() const {
  return *give_user_name_;
}
inline void tbGiveBankJetton::set_give_user_name(const ::std::string& value) {
  set_has_give_user_name();
  if (give_user_name_ == &::google::protobuf::internal::kEmptyString) {
    give_user_name_ = new ::std::string;
  }
  give_user_name_->assign(value);
}
inline void tbGiveBankJetton::set_give_user_name(const char* value) {
  set_has_give_user_name();
  if (give_user_name_ == &::google::protobuf::internal::kEmptyString) {
    give_user_name_ = new ::std::string;
  }
  give_user_name_->assign(value);
}
inline void tbGiveBankJetton::set_give_user_name(const char* value, size_t size) {
  set_has_give_user_name();
  if (give_user_name_ == &::google::protobuf::internal::kEmptyString) {
    give_user_name_ = new ::std::string;
  }
  give_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbGiveBankJetton::mutable_give_user_name() {
  set_has_give_user_name();
  if (give_user_name_ == &::google::protobuf::internal::kEmptyString) {
    give_user_name_ = new ::std::string;
  }
  return give_user_name_;
}
inline ::std::string* tbGiveBankJetton::release_give_user_name() {
  clear_has_give_user_name();
  if (give_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = give_user_name_;
    give_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbGiveBankJetton::set_allocated_give_user_name(::std::string* give_user_name) {
  if (give_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete give_user_name_;
  }
  if (give_user_name) {
    set_has_give_user_name();
    give_user_name_ = give_user_name;
  } else {
    clear_has_give_user_name();
    give_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 give_jetton = 7;
inline bool tbGiveBankJetton::has_give_jetton() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbGiveBankJetton::set_has_give_jetton() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbGiveBankJetton::clear_has_give_jetton() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbGiveBankJetton::clear_give_jetton() {
  give_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_give_jetton();
}
inline ::google::protobuf::uint64 tbGiveBankJetton::give_jetton() const {
  return give_jetton_;
}
inline void tbGiveBankJetton::set_give_jetton(::google::protobuf::uint64 value) {
  set_has_give_jetton();
  give_jetton_ = value;
}

// optional uint32 give_user_vip_level = 8;
inline bool tbGiveBankJetton::has_give_user_vip_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbGiveBankJetton::set_has_give_user_vip_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbGiveBankJetton::clear_has_give_user_vip_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbGiveBankJetton::clear_give_user_vip_level() {
  give_user_vip_level_ = 0u;
  clear_has_give_user_vip_level();
}
inline ::google::protobuf::uint32 tbGiveBankJetton::give_user_vip_level() const {
  return give_user_vip_level_;
}
inline void tbGiveBankJetton::set_give_user_vip_level(::google::protobuf::uint32 value) {
  set_has_give_user_vip_level();
  give_user_vip_level_ = value;
}

// optional uint32 status = 9;
inline bool tbGiveBankJetton::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbGiveBankJetton::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbGiveBankJetton::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbGiveBankJetton::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 tbGiveBankJetton::status() const {
  return status_;
}
inline void tbGiveBankJetton::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint64 create_time = 10;
inline bool tbGiveBankJetton::has_create_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbGiveBankJetton::set_has_create_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbGiveBankJetton::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbGiveBankJetton::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 tbGiveBankJetton::create_time() const {
  return create_time_;
}
inline void tbGiveBankJetton::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// UserMiscData

// optional uint64 tmp_phone_num = 1;
inline bool UserMiscData::has_tmp_phone_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMiscData::set_has_tmp_phone_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMiscData::clear_has_tmp_phone_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMiscData::clear_tmp_phone_num() {
  tmp_phone_num_ = GOOGLE_ULONGLONG(0);
  clear_has_tmp_phone_num();
}
inline ::google::protobuf::uint64 UserMiscData::tmp_phone_num() const {
  return tmp_phone_num_;
}
inline void UserMiscData::set_tmp_phone_num(::google::protobuf::uint64 value) {
  set_has_tmp_phone_num();
  tmp_phone_num_ = value;
}

// optional uint32 tmp_auth_code = 2;
inline bool UserMiscData::has_tmp_auth_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMiscData::set_has_tmp_auth_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMiscData::clear_has_tmp_auth_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMiscData::clear_tmp_auth_code() {
  tmp_auth_code_ = 0u;
  clear_has_tmp_auth_code();
}
inline ::google::protobuf::uint32 UserMiscData::tmp_auth_code() const {
  return tmp_auth_code_;
}
inline void UserMiscData::set_tmp_auth_code(::google::protobuf::uint32 value) {
  set_has_tmp_auth_code();
  tmp_auth_code_ = value;
}

// optional uint64 auth_code_stamp = 3;
inline bool UserMiscData::has_auth_code_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMiscData::set_has_auth_code_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMiscData::clear_has_auth_code_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMiscData::clear_auth_code_stamp() {
  auth_code_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_auth_code_stamp();
}
inline ::google::protobuf::uint64 UserMiscData::auth_code_stamp() const {
  return auth_code_stamp_;
}
inline void UserMiscData::set_auth_code_stamp(::google::protobuf::uint64 value) {
  set_has_auth_code_stamp();
  auth_code_stamp_ = value;
}

// optional int32 tmp_code_type = 4;
inline bool UserMiscData::has_tmp_code_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMiscData::set_has_tmp_code_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMiscData::clear_has_tmp_code_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMiscData::clear_tmp_code_type() {
  tmp_code_type_ = 0;
  clear_has_tmp_code_type();
}
inline ::google::protobuf::int32 UserMiscData::tmp_code_type() const {
  return tmp_code_type_;
}
inline void UserMiscData::set_tmp_code_type(::google::protobuf::int32 value) {
  set_has_tmp_code_type();
  tmp_code_type_ = value;
}

// optional bool tmp_code_success = 5;
inline bool UserMiscData::has_tmp_code_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMiscData::set_has_tmp_code_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMiscData::clear_has_tmp_code_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMiscData::clear_tmp_code_success() {
  tmp_code_success_ = false;
  clear_has_tmp_code_success();
}
inline bool UserMiscData::tmp_code_success() const {
  return tmp_code_success_;
}
inline void UserMiscData::set_tmp_code_success(bool value) {
  set_has_tmp_code_success();
  tmp_code_success_ = value;
}

// optional int32 tmp_redeemcard_recharge_count = 6;
inline bool UserMiscData::has_tmp_redeemcard_recharge_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserMiscData::set_has_tmp_redeemcard_recharge_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserMiscData::clear_has_tmp_redeemcard_recharge_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserMiscData::clear_tmp_redeemcard_recharge_count() {
  tmp_redeemcard_recharge_count_ = 0;
  clear_has_tmp_redeemcard_recharge_count();
}
inline ::google::protobuf::int32 UserMiscData::tmp_redeemcard_recharge_count() const {
  return tmp_redeemcard_recharge_count_;
}
inline void UserMiscData::set_tmp_redeemcard_recharge_count(::google::protobuf::int32 value) {
  set_has_tmp_redeemcard_recharge_count();
  tmp_redeemcard_recharge_count_ = value;
}

// -------------------------------------------------------------------

// tbUserDetailData

// optional uint64 userid = 1;
inline bool tbUserDetailData::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbUserDetailData::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbUserDetailData::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbUserDetailData::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 tbUserDetailData::userid() const {
  return userid_;
}
inline void tbUserDetailData::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string nickname = 2;
inline bool tbUserDetailData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbUserDetailData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbUserDetailData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbUserDetailData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& tbUserDetailData::nickname() const {
  return *nickname_;
}
inline void tbUserDetailData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbUserDetailData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbUserDetailData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* tbUserDetailData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 faceid = 3;
inline bool tbUserDetailData::has_faceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbUserDetailData::set_has_faceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbUserDetailData::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbUserDetailData::clear_faceid() {
  faceid_ = 0u;
  clear_has_faceid();
}
inline ::google::protobuf::uint32 tbUserDetailData::faceid() const {
  return faceid_;
}
inline void tbUserDetailData::set_faceid(::google::protobuf::uint32 value) {
  set_has_faceid();
  faceid_ = value;
}

// optional uint64 regdate = 4;
inline bool tbUserDetailData::has_regdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbUserDetailData::set_has_regdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbUserDetailData::clear_has_regdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbUserDetailData::clear_regdate() {
  regdate_ = GOOGLE_ULONGLONG(0);
  clear_has_regdate();
}
inline ::google::protobuf::uint64 tbUserDetailData::regdate() const {
  return regdate_;
}
inline void tbUserDetailData::set_regdate(::google::protobuf::uint64 value) {
  set_has_regdate();
  regdate_ = value;
}

// optional uint32 gender = 5;
inline bool tbUserDetailData::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbUserDetailData::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbUserDetailData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbUserDetailData::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 tbUserDetailData::gender() const {
  return gender_;
}
inline void tbUserDetailData::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint32 age = 6;
inline bool tbUserDetailData::has_age() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbUserDetailData::set_has_age() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbUserDetailData::clear_has_age() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbUserDetailData::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 tbUserDetailData::age() const {
  return age_;
}
inline void tbUserDetailData::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional string email = 7;
inline bool tbUserDetailData::has_email() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbUserDetailData::set_has_email() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbUserDetailData::clear_has_email() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbUserDetailData::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& tbUserDetailData::email() const {
  return *email_;
}
inline void tbUserDetailData::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void tbUserDetailData::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void tbUserDetailData::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* tbUserDetailData::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 phonenum = 8;
inline bool tbUserDetailData::has_phonenum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbUserDetailData::set_has_phonenum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbUserDetailData::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbUserDetailData::clear_phonenum() {
  phonenum_ = GOOGLE_ULONGLONG(0);
  clear_has_phonenum();
}
inline ::google::protobuf::uint64 tbUserDetailData::phonenum() const {
  return phonenum_;
}
inline void tbUserDetailData::set_phonenum(::google::protobuf::uint64 value) {
  set_has_phonenum();
  phonenum_ = value;
}

// optional uint64 jetton = 9;
inline bool tbUserDetailData::has_jetton() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbUserDetailData::set_has_jetton() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbUserDetailData::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbUserDetailData::clear_jetton() {
  jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton();
}
inline ::google::protobuf::uint64 tbUserDetailData::jetton() const {
  return jetton_;
}
inline void tbUserDetailData::set_jetton(::google::protobuf::uint64 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional string country = 10;
inline bool tbUserDetailData::has_country() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbUserDetailData::set_has_country() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbUserDetailData::clear_has_country() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbUserDetailData::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& tbUserDetailData::country() const {
  return *country_;
}
inline void tbUserDetailData::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void tbUserDetailData::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void tbUserDetailData::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* tbUserDetailData::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string province = 11;
inline bool tbUserDetailData::has_province() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbUserDetailData::set_has_province() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbUserDetailData::clear_has_province() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbUserDetailData::clear_province() {
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    province_->clear();
  }
  clear_has_province();
}
inline const ::std::string& tbUserDetailData::province() const {
  return *province_;
}
inline void tbUserDetailData::set_province(const ::std::string& value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  province_->assign(value);
}
inline void tbUserDetailData::set_province(const char* value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  province_->assign(value);
}
inline void tbUserDetailData::set_province(const char* value, size_t size) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  province_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_province() {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  return province_;
}
inline ::std::string* tbUserDetailData::release_province() {
  clear_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = province_;
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_province(::std::string* province) {
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (province) {
    set_has_province();
    province_ = province;
  } else {
    clear_has_province();
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 12;
inline bool tbUserDetailData::has_city() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tbUserDetailData::set_has_city() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tbUserDetailData::clear_has_city() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tbUserDetailData::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& tbUserDetailData::city() const {
  return *city_;
}
inline void tbUserDetailData::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void tbUserDetailData::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void tbUserDetailData::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* tbUserDetailData::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool isrobot = 13;
inline bool tbUserDetailData::has_isrobot() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tbUserDetailData::set_has_isrobot() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tbUserDetailData::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tbUserDetailData::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool tbUserDetailData::isrobot() const {
  return isrobot_;
}
inline void tbUserDetailData::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// optional string bank_password = 14;
inline bool tbUserDetailData::has_bank_password() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tbUserDetailData::set_has_bank_password() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tbUserDetailData::clear_has_bank_password() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tbUserDetailData::clear_bank_password() {
  if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
    bank_password_->clear();
  }
  clear_has_bank_password();
}
inline const ::std::string& tbUserDetailData::bank_password() const {
  return *bank_password_;
}
inline void tbUserDetailData::set_bank_password(const ::std::string& value) {
  set_has_bank_password();
  if (bank_password_ == &::google::protobuf::internal::kEmptyString) {
    bank_password_ = new ::std::string;
  }
  bank_password_->assign(value);
}
inline void tbUserDetailData::set_bank_password(const char* value) {
  set_has_bank_password();
  if (bank_password_ == &::google::protobuf::internal::kEmptyString) {
    bank_password_ = new ::std::string;
  }
  bank_password_->assign(value);
}
inline void tbUserDetailData::set_bank_password(const char* value, size_t size) {
  set_has_bank_password();
  if (bank_password_ == &::google::protobuf::internal::kEmptyString) {
    bank_password_ = new ::std::string;
  }
  bank_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_bank_password() {
  set_has_bank_password();
  if (bank_password_ == &::google::protobuf::internal::kEmptyString) {
    bank_password_ = new ::std::string;
  }
  return bank_password_;
}
inline ::std::string* tbUserDetailData::release_bank_password() {
  clear_has_bank_password();
  if (bank_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bank_password_;
    bank_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_bank_password(::std::string* bank_password) {
  if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_password_;
  }
  if (bank_password) {
    set_has_bank_password();
    bank_password_ = bank_password;
  } else {
    clear_has_bank_password();
    bank_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 bank_jetton = 15;
inline bool tbUserDetailData::has_bank_jetton() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tbUserDetailData::set_has_bank_jetton() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tbUserDetailData::clear_has_bank_jetton() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tbUserDetailData::clear_bank_jetton() {
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_bank_jetton();
}
inline ::google::protobuf::uint64 tbUserDetailData::bank_jetton() const {
  return bank_jetton_;
}
inline void tbUserDetailData::set_bank_jetton(::google::protobuf::uint64 value) {
  set_has_bank_jetton();
  bank_jetton_ = value;
}

// optional string ip = 16;
inline bool tbUserDetailData::has_ip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tbUserDetailData::set_has_ip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tbUserDetailData::clear_has_ip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tbUserDetailData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& tbUserDetailData::ip() const {
  return *ip_;
}
inline void tbUserDetailData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbUserDetailData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void tbUserDetailData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* tbUserDetailData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 last_login_time = 17;
inline bool tbUserDetailData::has_last_login_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tbUserDetailData::set_has_last_login_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tbUserDetailData::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tbUserDetailData::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::uint64 tbUserDetailData::last_login_time() const {
  return last_login_time_;
}
inline void tbUserDetailData::set_last_login_time(::google::protobuf::uint64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint64 last_logout_time = 18;
inline bool tbUserDetailData::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tbUserDetailData::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tbUserDetailData::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tbUserDetailData::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint64 tbUserDetailData::last_logout_time() const {
  return last_logout_time_;
}
inline void tbUserDetailData::set_last_logout_time(::google::protobuf::uint64 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// optional uint32 aread_id = 19;
inline bool tbUserDetailData::has_aread_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tbUserDetailData::set_has_aread_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tbUserDetailData::clear_has_aread_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tbUserDetailData::clear_aread_id() {
  aread_id_ = 0u;
  clear_has_aread_id();
}
inline ::google::protobuf::uint32 tbUserDetailData::aread_id() const {
  return aread_id_;
}
inline void tbUserDetailData::set_aread_id(::google::protobuf::uint32 value) {
  set_has_aread_id();
  aread_id_ = value;
}

// optional uint32 channel_id = 20;
inline bool tbUserDetailData::has_channel_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void tbUserDetailData::set_has_channel_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void tbUserDetailData::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void tbUserDetailData::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 tbUserDetailData::channel_id() const {
  return channel_id_;
}
inline void tbUserDetailData::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional string platform_os = 21;
inline bool tbUserDetailData::has_platform_os() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tbUserDetailData::set_has_platform_os() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tbUserDetailData::clear_has_platform_os() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tbUserDetailData::clear_platform_os() {
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    platform_os_->clear();
  }
  clear_has_platform_os();
}
inline const ::std::string& tbUserDetailData::platform_os() const {
  return *platform_os_;
}
inline void tbUserDetailData::set_platform_os(const ::std::string& value) {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  platform_os_->assign(value);
}
inline void tbUserDetailData::set_platform_os(const char* value) {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  platform_os_->assign(value);
}
inline void tbUserDetailData::set_platform_os(const char* value, size_t size) {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  platform_os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_platform_os() {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  return platform_os_;
}
inline ::std::string* tbUserDetailData::release_platform_os() {
  clear_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_os_;
    platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_platform_os(::std::string* platform_os) {
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_os_;
  }
  if (platform_os) {
    set_has_platform_os();
    platform_os_ = platform_os;
  } else {
    clear_has_platform_os();
    platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone_model = 22;
inline bool tbUserDetailData::has_phone_model() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void tbUserDetailData::set_has_phone_model() {
  _has_bits_[0] |= 0x00200000u;
}
inline void tbUserDetailData::clear_has_phone_model() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void tbUserDetailData::clear_phone_model() {
  if (phone_model_ != &::google::protobuf::internal::kEmptyString) {
    phone_model_->clear();
  }
  clear_has_phone_model();
}
inline const ::std::string& tbUserDetailData::phone_model() const {
  return *phone_model_;
}
inline void tbUserDetailData::set_phone_model(const ::std::string& value) {
  set_has_phone_model();
  if (phone_model_ == &::google::protobuf::internal::kEmptyString) {
    phone_model_ = new ::std::string;
  }
  phone_model_->assign(value);
}
inline void tbUserDetailData::set_phone_model(const char* value) {
  set_has_phone_model();
  if (phone_model_ == &::google::protobuf::internal::kEmptyString) {
    phone_model_ = new ::std::string;
  }
  phone_model_->assign(value);
}
inline void tbUserDetailData::set_phone_model(const char* value, size_t size) {
  set_has_phone_model();
  if (phone_model_ == &::google::protobuf::internal::kEmptyString) {
    phone_model_ = new ::std::string;
  }
  phone_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_phone_model() {
  set_has_phone_model();
  if (phone_model_ == &::google::protobuf::internal::kEmptyString) {
    phone_model_ = new ::std::string;
  }
  return phone_model_;
}
inline ::std::string* tbUserDetailData::release_phone_model() {
  clear_has_phone_model();
  if (phone_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_model_;
    phone_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_phone_model(::std::string* phone_model) {
  if (phone_model_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_model_;
  }
  if (phone_model) {
    set_has_phone_model();
    phone_model_ = phone_model;
  } else {
    clear_has_phone_model();
    phone_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool first_recharge = 23;
inline bool tbUserDetailData::has_first_recharge() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tbUserDetailData::set_has_first_recharge() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tbUserDetailData::clear_has_first_recharge() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tbUserDetailData::clear_first_recharge() {
  first_recharge_ = false;
  clear_has_first_recharge();
}
inline bool tbUserDetailData::first_recharge() const {
  return first_recharge_;
}
inline void tbUserDetailData::set_first_recharge(bool value) {
  set_has_first_recharge();
  first_recharge_ = value;
}

// optional uint64 agent_id = 24;
inline bool tbUserDetailData::has_agent_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tbUserDetailData::set_has_agent_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tbUserDetailData::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tbUserDetailData::clear_agent_id() {
  agent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_agent_id();
}
inline ::google::protobuf::uint64 tbUserDetailData::agent_id() const {
  return agent_id_;
}
inline void tbUserDetailData::set_agent_id(::google::protobuf::uint64 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// optional uint64 referrer_id = 25;
inline bool tbUserDetailData::has_referrer_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void tbUserDetailData::set_has_referrer_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void tbUserDetailData::clear_has_referrer_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void tbUserDetailData::clear_referrer_id() {
  referrer_id_ = GOOGLE_ULONGLONG(0);
  clear_has_referrer_id();
}
inline ::google::protobuf::uint64 tbUserDetailData::referrer_id() const {
  return referrer_id_;
}
inline void tbUserDetailData::set_referrer_id(::google::protobuf::uint64 value) {
  set_has_referrer_id();
  referrer_id_ = value;
}

// optional uint32 vip_level = 26;
inline bool tbUserDetailData::has_vip_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void tbUserDetailData::set_has_vip_level() {
  _has_bits_[0] |= 0x02000000u;
}
inline void tbUserDetailData::clear_has_vip_level() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void tbUserDetailData::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 tbUserDetailData::vip_level() const {
  return vip_level_;
}
inline void tbUserDetailData::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional .proto_ff.UserMiscData misc_data = 27;
inline bool tbUserDetailData::has_misc_data() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void tbUserDetailData::set_has_misc_data() {
  _has_bits_[0] |= 0x04000000u;
}
inline void tbUserDetailData::clear_has_misc_data() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void tbUserDetailData::clear_misc_data() {
  if (misc_data_ != NULL) misc_data_->::proto_ff::UserMiscData::Clear();
  clear_has_misc_data();
}
inline const ::proto_ff::UserMiscData& tbUserDetailData::misc_data() const {
  return misc_data_ != NULL ? *misc_data_ : *default_instance_->misc_data_;
}
inline ::proto_ff::UserMiscData* tbUserDetailData::mutable_misc_data() {
  set_has_misc_data();
  if (misc_data_ == NULL) misc_data_ = new ::proto_ff::UserMiscData;
  return misc_data_;
}
inline ::proto_ff::UserMiscData* tbUserDetailData::release_misc_data() {
  clear_has_misc_data();
  ::proto_ff::UserMiscData* temp = misc_data_;
  misc_data_ = NULL;
  return temp;
}
inline void tbUserDetailData::set_allocated_misc_data(::proto_ff::UserMiscData* misc_data) {
  delete misc_data_;
  misc_data_ = misc_data;
  if (misc_data) {
    set_has_misc_data();
  } else {
    clear_has_misc_data();
  }
}

// optional bool online = 28;
inline bool tbUserDetailData::has_online() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void tbUserDetailData::set_has_online() {
  _has_bits_[0] |= 0x08000000u;
}
inline void tbUserDetailData::clear_has_online() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void tbUserDetailData::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool tbUserDetailData::online() const {
  return online_;
}
inline void tbUserDetailData::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// optional uint32 game_id = 29;
inline bool tbUserDetailData::has_game_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void tbUserDetailData::set_has_game_id() {
  _has_bits_[0] |= 0x10000000u;
}
inline void tbUserDetailData::clear_has_game_id() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void tbUserDetailData::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 tbUserDetailData::game_id() const {
  return game_id_;
}
inline void tbUserDetailData::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 30;
inline bool tbUserDetailData::has_room_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void tbUserDetailData::set_has_room_id() {
  _has_bits_[0] |= 0x20000000u;
}
inline void tbUserDetailData::clear_has_room_id() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void tbUserDetailData::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 tbUserDetailData::room_id() const {
  return room_id_;
}
inline void tbUserDetailData::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int64 all_win = 31;
inline bool tbUserDetailData::has_all_win() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void tbUserDetailData::set_has_all_win() {
  _has_bits_[0] |= 0x40000000u;
}
inline void tbUserDetailData::clear_has_all_win() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void tbUserDetailData::clear_all_win() {
  all_win_ = GOOGLE_LONGLONG(0);
  clear_has_all_win();
}
inline ::google::protobuf::int64 tbUserDetailData::all_win() const {
  return all_win_;
}
inline void tbUserDetailData::set_all_win(::google::protobuf::int64 value) {
  set_has_all_win();
  all_win_ = value;
}

// optional uint64 all_recharge = 32;
inline bool tbUserDetailData::has_all_recharge() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void tbUserDetailData::set_has_all_recharge() {
  _has_bits_[0] |= 0x80000000u;
}
inline void tbUserDetailData::clear_has_all_recharge() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void tbUserDetailData::clear_all_recharge() {
  all_recharge_ = GOOGLE_ULONGLONG(0);
  clear_has_all_recharge();
}
inline ::google::protobuf::uint64 tbUserDetailData::all_recharge() const {
  return all_recharge_;
}
inline void tbUserDetailData::set_all_recharge(::google::protobuf::uint64 value) {
  set_has_all_recharge();
  all_recharge_ = value;
}

// optional uint64 all_give = 33;
inline bool tbUserDetailData::has_all_give() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void tbUserDetailData::set_has_all_give() {
  _has_bits_[1] |= 0x00000001u;
}
inline void tbUserDetailData::clear_has_all_give() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void tbUserDetailData::clear_all_give() {
  all_give_ = GOOGLE_ULONGLONG(0);
  clear_has_all_give();
}
inline ::google::protobuf::uint64 tbUserDetailData::all_give() const {
  return all_give_;
}
inline void tbUserDetailData::set_all_give(::google::protobuf::uint64 value) {
  set_has_all_give();
  all_give_ = value;
}

// optional uint64 all_draw = 34;
inline bool tbUserDetailData::has_all_draw() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void tbUserDetailData::set_has_all_draw() {
  _has_bits_[1] |= 0x00000002u;
}
inline void tbUserDetailData::clear_has_all_draw() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void tbUserDetailData::clear_all_draw() {
  all_draw_ = GOOGLE_ULONGLONG(0);
  clear_has_all_draw();
}
inline ::google::protobuf::uint64 tbUserDetailData::all_draw() const {
  return all_draw_;
}
inline void tbUserDetailData::set_all_draw(::google::protobuf::uint64 value) {
  set_has_all_draw();
  all_draw_ = value;
}

// optional int64 today_win = 35;
inline bool tbUserDetailData::has_today_win() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void tbUserDetailData::set_has_today_win() {
  _has_bits_[1] |= 0x00000004u;
}
inline void tbUserDetailData::clear_has_today_win() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void tbUserDetailData::clear_today_win() {
  today_win_ = GOOGLE_LONGLONG(0);
  clear_has_today_win();
}
inline ::google::protobuf::int64 tbUserDetailData::today_win() const {
  return today_win_;
}
inline void tbUserDetailData::set_today_win(::google::protobuf::int64 value) {
  set_has_today_win();
  today_win_ = value;
}

// optional uint64 today_recharge = 36;
inline bool tbUserDetailData::has_today_recharge() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void tbUserDetailData::set_has_today_recharge() {
  _has_bits_[1] |= 0x00000008u;
}
inline void tbUserDetailData::clear_has_today_recharge() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void tbUserDetailData::clear_today_recharge() {
  today_recharge_ = GOOGLE_ULONGLONG(0);
  clear_has_today_recharge();
}
inline ::google::protobuf::uint64 tbUserDetailData::today_recharge() const {
  return today_recharge_;
}
inline void tbUserDetailData::set_today_recharge(::google::protobuf::uint64 value) {
  set_has_today_recharge();
  today_recharge_ = value;
}

// optional uint64 today_give = 37;
inline bool tbUserDetailData::has_today_give() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void tbUserDetailData::set_has_today_give() {
  _has_bits_[1] |= 0x00000010u;
}
inline void tbUserDetailData::clear_has_today_give() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void tbUserDetailData::clear_today_give() {
  today_give_ = GOOGLE_ULONGLONG(0);
  clear_has_today_give();
}
inline ::google::protobuf::uint64 tbUserDetailData::today_give() const {
  return today_give_;
}
inline void tbUserDetailData::set_today_give(::google::protobuf::uint64 value) {
  set_has_today_give();
  today_give_ = value;
}

// optional uint64 today_draw = 38;
inline bool tbUserDetailData::has_today_draw() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void tbUserDetailData::set_has_today_draw() {
  _has_bits_[1] |= 0x00000020u;
}
inline void tbUserDetailData::clear_has_today_draw() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void tbUserDetailData::clear_today_draw() {
  today_draw_ = GOOGLE_ULONGLONG(0);
  clear_has_today_draw();
}
inline ::google::protobuf::uint64 tbUserDetailData::today_draw() const {
  return today_draw_;
}
inline void tbUserDetailData::set_today_draw(::google::protobuf::uint64 value) {
  set_has_today_draw();
  today_draw_ = value;
}

// optional int64 week_win = 39;
inline bool tbUserDetailData::has_week_win() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void tbUserDetailData::set_has_week_win() {
  _has_bits_[1] |= 0x00000040u;
}
inline void tbUserDetailData::clear_has_week_win() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void tbUserDetailData::clear_week_win() {
  week_win_ = GOOGLE_LONGLONG(0);
  clear_has_week_win();
}
inline ::google::protobuf::int64 tbUserDetailData::week_win() const {
  return week_win_;
}
inline void tbUserDetailData::set_week_win(::google::protobuf::int64 value) {
  set_has_week_win();
  week_win_ = value;
}

// optional uint64 week_recharge = 40;
inline bool tbUserDetailData::has_week_recharge() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void tbUserDetailData::set_has_week_recharge() {
  _has_bits_[1] |= 0x00000080u;
}
inline void tbUserDetailData::clear_has_week_recharge() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void tbUserDetailData::clear_week_recharge() {
  week_recharge_ = GOOGLE_ULONGLONG(0);
  clear_has_week_recharge();
}
inline ::google::protobuf::uint64 tbUserDetailData::week_recharge() const {
  return week_recharge_;
}
inline void tbUserDetailData::set_week_recharge(::google::protobuf::uint64 value) {
  set_has_week_recharge();
  week_recharge_ = value;
}

// optional uint64 week_give = 41;
inline bool tbUserDetailData::has_week_give() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void tbUserDetailData::set_has_week_give() {
  _has_bits_[1] |= 0x00000100u;
}
inline void tbUserDetailData::clear_has_week_give() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void tbUserDetailData::clear_week_give() {
  week_give_ = GOOGLE_ULONGLONG(0);
  clear_has_week_give();
}
inline ::google::protobuf::uint64 tbUserDetailData::week_give() const {
  return week_give_;
}
inline void tbUserDetailData::set_week_give(::google::protobuf::uint64 value) {
  set_has_week_give();
  week_give_ = value;
}

// optional uint64 week_draw = 42;
inline bool tbUserDetailData::has_week_draw() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void tbUserDetailData::set_has_week_draw() {
  _has_bits_[1] |= 0x00000200u;
}
inline void tbUserDetailData::clear_has_week_draw() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void tbUserDetailData::clear_week_draw() {
  week_draw_ = GOOGLE_ULONGLONG(0);
  clear_has_week_draw();
}
inline ::google::protobuf::uint64 tbUserDetailData::week_draw() const {
  return week_draw_;
}
inline void tbUserDetailData::set_week_draw(::google::protobuf::uint64 value) {
  set_has_week_draw();
  week_draw_ = value;
}

// optional int64 month_win = 43;
inline bool tbUserDetailData::has_month_win() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void tbUserDetailData::set_has_month_win() {
  _has_bits_[1] |= 0x00000400u;
}
inline void tbUserDetailData::clear_has_month_win() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void tbUserDetailData::clear_month_win() {
  month_win_ = GOOGLE_LONGLONG(0);
  clear_has_month_win();
}
inline ::google::protobuf::int64 tbUserDetailData::month_win() const {
  return month_win_;
}
inline void tbUserDetailData::set_month_win(::google::protobuf::int64 value) {
  set_has_month_win();
  month_win_ = value;
}

// optional uint64 month_recharge = 44;
inline bool tbUserDetailData::has_month_recharge() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void tbUserDetailData::set_has_month_recharge() {
  _has_bits_[1] |= 0x00000800u;
}
inline void tbUserDetailData::clear_has_month_recharge() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void tbUserDetailData::clear_month_recharge() {
  month_recharge_ = GOOGLE_ULONGLONG(0);
  clear_has_month_recharge();
}
inline ::google::protobuf::uint64 tbUserDetailData::month_recharge() const {
  return month_recharge_;
}
inline void tbUserDetailData::set_month_recharge(::google::protobuf::uint64 value) {
  set_has_month_recharge();
  month_recharge_ = value;
}

// optional uint64 month_give = 45;
inline bool tbUserDetailData::has_month_give() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void tbUserDetailData::set_has_month_give() {
  _has_bits_[1] |= 0x00001000u;
}
inline void tbUserDetailData::clear_has_month_give() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void tbUserDetailData::clear_month_give() {
  month_give_ = GOOGLE_ULONGLONG(0);
  clear_has_month_give();
}
inline ::google::protobuf::uint64 tbUserDetailData::month_give() const {
  return month_give_;
}
inline void tbUserDetailData::set_month_give(::google::protobuf::uint64 value) {
  set_has_month_give();
  month_give_ = value;
}

// optional uint64 month_draw = 46;
inline bool tbUserDetailData::has_month_draw() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void tbUserDetailData::set_has_month_draw() {
  _has_bits_[1] |= 0x00002000u;
}
inline void tbUserDetailData::clear_has_month_draw() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void tbUserDetailData::clear_month_draw() {
  month_draw_ = GOOGLE_ULONGLONG(0);
  clear_has_month_draw();
}
inline ::google::protobuf::uint64 tbUserDetailData::month_draw() const {
  return month_draw_;
}
inline void tbUserDetailData::set_month_draw(::google::protobuf::uint64 value) {
  set_has_month_draw();
  month_draw_ = value;
}

// optional uint32 is_ban = 47;
inline bool tbUserDetailData::has_is_ban() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void tbUserDetailData::set_has_is_ban() {
  _has_bits_[1] |= 0x00004000u;
}
inline void tbUserDetailData::clear_has_is_ban() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void tbUserDetailData::clear_is_ban() {
  is_ban_ = 0u;
  clear_has_is_ban();
}
inline ::google::protobuf::uint32 tbUserDetailData::is_ban() const {
  return is_ban_;
}
inline void tbUserDetailData::set_is_ban(::google::protobuf::uint32 value) {
  set_has_is_ban();
  is_ban_ = value;
}

// optional uint32 no_transfer = 48;
inline bool tbUserDetailData::has_no_transfer() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void tbUserDetailData::set_has_no_transfer() {
  _has_bits_[1] |= 0x00008000u;
}
inline void tbUserDetailData::clear_has_no_transfer() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void tbUserDetailData::clear_no_transfer() {
  no_transfer_ = 0u;
  clear_has_no_transfer();
}
inline ::google::protobuf::uint32 tbUserDetailData::no_transfer() const {
  return no_transfer_;
}
inline void tbUserDetailData::set_no_transfer(::google::protobuf::uint32 value) {
  set_has_no_transfer();
  no_transfer_ = value;
}

// optional string reg_ip = 49;
inline bool tbUserDetailData::has_reg_ip() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void tbUserDetailData::set_has_reg_ip() {
  _has_bits_[1] |= 0x00010000u;
}
inline void tbUserDetailData::clear_has_reg_ip() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void tbUserDetailData::clear_reg_ip() {
  if (reg_ip_ != &::google::protobuf::internal::kEmptyString) {
    reg_ip_->clear();
  }
  clear_has_reg_ip();
}
inline const ::std::string& tbUserDetailData::reg_ip() const {
  return *reg_ip_;
}
inline void tbUserDetailData::set_reg_ip(const ::std::string& value) {
  set_has_reg_ip();
  if (reg_ip_ == &::google::protobuf::internal::kEmptyString) {
    reg_ip_ = new ::std::string;
  }
  reg_ip_->assign(value);
}
inline void tbUserDetailData::set_reg_ip(const char* value) {
  set_has_reg_ip();
  if (reg_ip_ == &::google::protobuf::internal::kEmptyString) {
    reg_ip_ = new ::std::string;
  }
  reg_ip_->assign(value);
}
inline void tbUserDetailData::set_reg_ip(const char* value, size_t size) {
  set_has_reg_ip();
  if (reg_ip_ == &::google::protobuf::internal::kEmptyString) {
    reg_ip_ = new ::std::string;
  }
  reg_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_reg_ip() {
  set_has_reg_ip();
  if (reg_ip_ == &::google::protobuf::internal::kEmptyString) {
    reg_ip_ = new ::std::string;
  }
  return reg_ip_;
}
inline ::std::string* tbUserDetailData::release_reg_ip() {
  clear_has_reg_ip();
  if (reg_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reg_ip_;
    reg_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_reg_ip(::std::string* reg_ip) {
  if (reg_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete reg_ip_;
  }
  if (reg_ip) {
    set_has_reg_ip();
    reg_ip_ = reg_ip;
  } else {
    clear_has_reg_ip();
    reg_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_id = 50;
inline bool tbUserDetailData::has_device_id() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void tbUserDetailData::set_has_device_id() {
  _has_bits_[1] |= 0x00020000u;
}
inline void tbUserDetailData::clear_has_device_id() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void tbUserDetailData::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& tbUserDetailData::device_id() const {
  return *device_id_;
}
inline void tbUserDetailData::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbUserDetailData::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbUserDetailData::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* tbUserDetailData::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reg_device_id = 51;
inline bool tbUserDetailData::has_reg_device_id() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void tbUserDetailData::set_has_reg_device_id() {
  _has_bits_[1] |= 0x00040000u;
}
inline void tbUserDetailData::clear_has_reg_device_id() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void tbUserDetailData::clear_reg_device_id() {
  if (reg_device_id_ != &::google::protobuf::internal::kEmptyString) {
    reg_device_id_->clear();
  }
  clear_has_reg_device_id();
}
inline const ::std::string& tbUserDetailData::reg_device_id() const {
  return *reg_device_id_;
}
inline void tbUserDetailData::set_reg_device_id(const ::std::string& value) {
  set_has_reg_device_id();
  if (reg_device_id_ == &::google::protobuf::internal::kEmptyString) {
    reg_device_id_ = new ::std::string;
  }
  reg_device_id_->assign(value);
}
inline void tbUserDetailData::set_reg_device_id(const char* value) {
  set_has_reg_device_id();
  if (reg_device_id_ == &::google::protobuf::internal::kEmptyString) {
    reg_device_id_ = new ::std::string;
  }
  reg_device_id_->assign(value);
}
inline void tbUserDetailData::set_reg_device_id(const char* value, size_t size) {
  set_has_reg_device_id();
  if (reg_device_id_ == &::google::protobuf::internal::kEmptyString) {
    reg_device_id_ = new ::std::string;
  }
  reg_device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserDetailData::mutable_reg_device_id() {
  set_has_reg_device_id();
  if (reg_device_id_ == &::google::protobuf::internal::kEmptyString) {
    reg_device_id_ = new ::std::string;
  }
  return reg_device_id_;
}
inline ::std::string* tbUserDetailData::release_reg_device_id() {
  clear_has_reg_device_id();
  if (reg_device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reg_device_id_;
    reg_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserDetailData::set_allocated_reg_device_id(::std::string* reg_device_id) {
  if (reg_device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete reg_device_id_;
  }
  if (reg_device_id) {
    set_has_reg_device_id();
    reg_device_id_ = reg_device_id;
  } else {
    clear_has_reg_device_id();
    reg_device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 show_userid = 52;
inline bool tbUserDetailData::has_show_userid() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void tbUserDetailData::set_has_show_userid() {
  _has_bits_[1] |= 0x00080000u;
}
inline void tbUserDetailData::clear_has_show_userid() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void tbUserDetailData::clear_show_userid() {
  show_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_show_userid();
}
inline ::google::protobuf::uint64 tbUserDetailData::show_userid() const {
  return show_userid_;
}
inline void tbUserDetailData::set_show_userid(::google::protobuf::uint64 value) {
  set_has_show_userid();
  show_userid_ = value;
}

// optional uint64 all_vip_zhuanru = 53;
inline bool tbUserDetailData::has_all_vip_zhuanru() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void tbUserDetailData::set_has_all_vip_zhuanru() {
  _has_bits_[1] |= 0x00100000u;
}
inline void tbUserDetailData::clear_has_all_vip_zhuanru() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void tbUserDetailData::clear_all_vip_zhuanru() {
  all_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_all_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbUserDetailData::all_vip_zhuanru() const {
  return all_vip_zhuanru_;
}
inline void tbUserDetailData::set_all_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_all_vip_zhuanru();
  all_vip_zhuanru_ = value;
}

// optional uint64 today_vip_zhuanru = 54;
inline bool tbUserDetailData::has_today_vip_zhuanru() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void tbUserDetailData::set_has_today_vip_zhuanru() {
  _has_bits_[1] |= 0x00200000u;
}
inline void tbUserDetailData::clear_has_today_vip_zhuanru() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void tbUserDetailData::clear_today_vip_zhuanru() {
  today_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_today_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbUserDetailData::today_vip_zhuanru() const {
  return today_vip_zhuanru_;
}
inline void tbUserDetailData::set_today_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_today_vip_zhuanru();
  today_vip_zhuanru_ = value;
}

// optional uint64 week_vip_zhuanru = 55;
inline bool tbUserDetailData::has_week_vip_zhuanru() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void tbUserDetailData::set_has_week_vip_zhuanru() {
  _has_bits_[1] |= 0x00400000u;
}
inline void tbUserDetailData::clear_has_week_vip_zhuanru() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void tbUserDetailData::clear_week_vip_zhuanru() {
  week_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_week_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbUserDetailData::week_vip_zhuanru() const {
  return week_vip_zhuanru_;
}
inline void tbUserDetailData::set_week_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_week_vip_zhuanru();
  week_vip_zhuanru_ = value;
}

// optional uint64 month_vip_zhuanru = 56;
inline bool tbUserDetailData::has_month_vip_zhuanru() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void tbUserDetailData::set_has_month_vip_zhuanru() {
  _has_bits_[1] |= 0x00800000u;
}
inline void tbUserDetailData::clear_has_month_vip_zhuanru() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void tbUserDetailData::clear_month_vip_zhuanru() {
  month_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_month_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbUserDetailData::month_vip_zhuanru() const {
  return month_vip_zhuanru_;
}
inline void tbUserDetailData::set_month_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_month_vip_zhuanru();
  month_vip_zhuanru_ = value;
}

// optional uint64 all_vip_zhuanchu = 57;
inline bool tbUserDetailData::has_all_vip_zhuanchu() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void tbUserDetailData::set_has_all_vip_zhuanchu() {
  _has_bits_[1] |= 0x01000000u;
}
inline void tbUserDetailData::clear_has_all_vip_zhuanchu() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void tbUserDetailData::clear_all_vip_zhuanchu() {
  all_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_all_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbUserDetailData::all_vip_zhuanchu() const {
  return all_vip_zhuanchu_;
}
inline void tbUserDetailData::set_all_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_all_vip_zhuanchu();
  all_vip_zhuanchu_ = value;
}

// optional uint64 today_vip_zhuanchu = 58;
inline bool tbUserDetailData::has_today_vip_zhuanchu() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void tbUserDetailData::set_has_today_vip_zhuanchu() {
  _has_bits_[1] |= 0x02000000u;
}
inline void tbUserDetailData::clear_has_today_vip_zhuanchu() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void tbUserDetailData::clear_today_vip_zhuanchu() {
  today_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_today_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbUserDetailData::today_vip_zhuanchu() const {
  return today_vip_zhuanchu_;
}
inline void tbUserDetailData::set_today_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_today_vip_zhuanchu();
  today_vip_zhuanchu_ = value;
}

// optional uint64 week_vip_zhuanchu = 59;
inline bool tbUserDetailData::has_week_vip_zhuanchu() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void tbUserDetailData::set_has_week_vip_zhuanchu() {
  _has_bits_[1] |= 0x04000000u;
}
inline void tbUserDetailData::clear_has_week_vip_zhuanchu() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void tbUserDetailData::clear_week_vip_zhuanchu() {
  week_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_week_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbUserDetailData::week_vip_zhuanchu() const {
  return week_vip_zhuanchu_;
}
inline void tbUserDetailData::set_week_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_week_vip_zhuanchu();
  week_vip_zhuanchu_ = value;
}

// optional uint64 month_vip_zhuanchu = 60;
inline bool tbUserDetailData::has_month_vip_zhuanchu() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void tbUserDetailData::set_has_month_vip_zhuanchu() {
  _has_bits_[1] |= 0x08000000u;
}
inline void tbUserDetailData::clear_has_month_vip_zhuanchu() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void tbUserDetailData::clear_month_vip_zhuanchu() {
  month_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_month_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbUserDetailData::month_vip_zhuanchu() const {
  return month_vip_zhuanchu_;
}
inline void tbUserDetailData::set_month_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_month_vip_zhuanchu();
  month_vip_zhuanchu_ = value;
}

// -------------------------------------------------------------------

// UserSimpleMiscData

// optional uint64 last_valid_player_time = 1;
inline bool UserSimpleMiscData::has_last_valid_player_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSimpleMiscData::set_has_last_valid_player_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSimpleMiscData::clear_has_last_valid_player_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSimpleMiscData::clear_last_valid_player_time() {
  last_valid_player_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_valid_player_time();
}
inline ::google::protobuf::uint64 UserSimpleMiscData::last_valid_player_time() const {
  return last_valid_player_time_;
}
inline void UserSimpleMiscData::set_last_valid_player_time(::google::protobuf::uint64 value) {
  set_has_last_valid_player_time();
  last_valid_player_time_ = value;
}

// optional uint64 last_pay_player_time = 2;
inline bool UserSimpleMiscData::has_last_pay_player_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSimpleMiscData::set_has_last_pay_player_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSimpleMiscData::clear_has_last_pay_player_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSimpleMiscData::clear_last_pay_player_time() {
  last_pay_player_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_pay_player_time();
}
inline ::google::protobuf::uint64 UserSimpleMiscData::last_pay_player_time() const {
  return last_pay_player_time_;
}
inline void UserSimpleMiscData::set_last_pay_player_time(::google::protobuf::uint64 value) {
  set_has_last_pay_player_time();
  last_pay_player_time_ = value;
}

// -------------------------------------------------------------------

// tbUserSimpleData

// optional uint64 userid = 1;
inline bool tbUserSimpleData::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbUserSimpleData::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbUserSimpleData::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbUserSimpleData::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 tbUserSimpleData::userid() const {
  return userid_;
}
inline void tbUserSimpleData::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string nickname = 2;
inline bool tbUserSimpleData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbUserSimpleData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbUserSimpleData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbUserSimpleData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& tbUserSimpleData::nickname() const {
  return *nickname_;
}
inline void tbUserSimpleData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbUserSimpleData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void tbUserSimpleData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbUserSimpleData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* tbUserSimpleData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbUserSimpleData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 face = 3;
inline bool tbUserSimpleData::has_face() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbUserSimpleData::set_has_face() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbUserSimpleData::clear_has_face() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbUserSimpleData::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 tbUserSimpleData::face() const {
  return face_;
}
inline void tbUserSimpleData::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
}

// optional uint32 gender = 4;
inline bool tbUserSimpleData::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbUserSimpleData::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbUserSimpleData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbUserSimpleData::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 tbUserSimpleData::gender() const {
  return gender_;
}
inline void tbUserSimpleData::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint32 age = 5;
inline bool tbUserSimpleData::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbUserSimpleData::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbUserSimpleData::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbUserSimpleData::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 tbUserSimpleData::age() const {
  return age_;
}
inline void tbUserSimpleData::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional uint64 agentid = 6;
inline bool tbUserSimpleData::has_agentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbUserSimpleData::set_has_agentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbUserSimpleData::clear_has_agentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbUserSimpleData::clear_agentid() {
  agentid_ = GOOGLE_ULONGLONG(0);
  clear_has_agentid();
}
inline ::google::protobuf::uint64 tbUserSimpleData::agentid() const {
  return agentid_;
}
inline void tbUserSimpleData::set_agentid(::google::protobuf::uint64 value) {
  set_has_agentid();
  agentid_ = value;
}

// optional uint64 create_time = 7;
inline bool tbUserSimpleData::has_create_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbUserSimpleData::set_has_create_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbUserSimpleData::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbUserSimpleData::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 tbUserSimpleData::create_time() const {
  return create_time_;
}
inline void tbUserSimpleData::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional bool is_robot = 8;
inline bool tbUserSimpleData::has_is_robot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbUserSimpleData::set_has_is_robot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbUserSimpleData::clear_has_is_robot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbUserSimpleData::clear_is_robot() {
  is_robot_ = false;
  clear_has_is_robot();
}
inline bool tbUserSimpleData::is_robot() const {
  return is_robot_;
}
inline void tbUserSimpleData::set_is_robot(bool value) {
  set_has_is_robot();
  is_robot_ = value;
}

// optional uint32 agent_level = 9;
inline bool tbUserSimpleData::has_agent_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbUserSimpleData::set_has_agent_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbUserSimpleData::clear_has_agent_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbUserSimpleData::clear_agent_level() {
  agent_level_ = 0u;
  clear_has_agent_level();
}
inline ::google::protobuf::uint32 tbUserSimpleData::agent_level() const {
  return agent_level_;
}
inline void tbUserSimpleData::set_agent_level(::google::protobuf::uint32 value) {
  set_has_agent_level();
  agent_level_ = value;
}

// optional uint64 ach_day = 10;
inline bool tbUserSimpleData::has_ach_day() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbUserSimpleData::set_has_ach_day() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbUserSimpleData::clear_has_ach_day() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbUserSimpleData::clear_ach_day() {
  ach_day_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_day();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_day() const {
  return ach_day_;
}
inline void tbUserSimpleData::set_ach_day(::google::protobuf::uint64 value) {
  set_has_ach_day();
  ach_day_ = value;
}

// optional uint64 ach_week = 11;
inline bool tbUserSimpleData::has_ach_week() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbUserSimpleData::set_has_ach_week() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbUserSimpleData::clear_has_ach_week() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbUserSimpleData::clear_ach_week() {
  ach_week_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_week();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_week() const {
  return ach_week_;
}
inline void tbUserSimpleData::set_ach_week(::google::protobuf::uint64 value) {
  set_has_ach_week();
  ach_week_ = value;
}

// optional uint64 ach_month = 12;
inline bool tbUserSimpleData::has_ach_month() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tbUserSimpleData::set_has_ach_month() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tbUserSimpleData::clear_has_ach_month() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tbUserSimpleData::clear_ach_month() {
  ach_month_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_month();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_month() const {
  return ach_month_;
}
inline void tbUserSimpleData::set_ach_month(::google::protobuf::uint64 value) {
  set_has_ach_month();
  ach_month_ = value;
}

// optional uint64 ach_all = 13;
inline bool tbUserSimpleData::has_ach_all() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tbUserSimpleData::set_has_ach_all() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tbUserSimpleData::clear_has_ach_all() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tbUserSimpleData::clear_ach_all() {
  ach_all_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_all();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_all() const {
  return ach_all_;
}
inline void tbUserSimpleData::set_ach_all(::google::protobuf::uint64 value) {
  set_has_ach_all();
  ach_all_ = value;
}

// optional uint64 ach_team_day = 14;
inline bool tbUserSimpleData::has_ach_team_day() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tbUserSimpleData::set_has_ach_team_day() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tbUserSimpleData::clear_has_ach_team_day() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tbUserSimpleData::clear_ach_team_day() {
  ach_team_day_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_team_day();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_team_day() const {
  return ach_team_day_;
}
inline void tbUserSimpleData::set_ach_team_day(::google::protobuf::uint64 value) {
  set_has_ach_team_day();
  ach_team_day_ = value;
}

// optional uint64 ach_team_week = 15;
inline bool tbUserSimpleData::has_ach_team_week() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tbUserSimpleData::set_has_ach_team_week() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tbUserSimpleData::clear_has_ach_team_week() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tbUserSimpleData::clear_ach_team_week() {
  ach_team_week_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_team_week();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_team_week() const {
  return ach_team_week_;
}
inline void tbUserSimpleData::set_ach_team_week(::google::protobuf::uint64 value) {
  set_has_ach_team_week();
  ach_team_week_ = value;
}

// optional uint64 ach_team_month = 17;
inline bool tbUserSimpleData::has_ach_team_month() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tbUserSimpleData::set_has_ach_team_month() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tbUserSimpleData::clear_has_ach_team_month() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tbUserSimpleData::clear_ach_team_month() {
  ach_team_month_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_team_month();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_team_month() const {
  return ach_team_month_;
}
inline void tbUserSimpleData::set_ach_team_month(::google::protobuf::uint64 value) {
  set_has_ach_team_month();
  ach_team_month_ = value;
}

// optional uint64 ach_team_all = 18;
inline bool tbUserSimpleData::has_ach_team_all() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tbUserSimpleData::set_has_ach_team_all() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tbUserSimpleData::clear_has_ach_team_all() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tbUserSimpleData::clear_ach_team_all() {
  ach_team_all_ = GOOGLE_ULONGLONG(0);
  clear_has_ach_team_all();
}
inline ::google::protobuf::uint64 tbUserSimpleData::ach_team_all() const {
  return ach_team_all_;
}
inline void tbUserSimpleData::set_ach_team_all(::google::protobuf::uint64 value) {
  set_has_ach_team_all();
  ach_team_all_ = value;
}

// optional uint64 team_user_num = 19;
inline bool tbUserSimpleData::has_team_user_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tbUserSimpleData::set_has_team_user_num() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tbUserSimpleData::clear_has_team_user_num() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tbUserSimpleData::clear_team_user_num() {
  team_user_num_ = GOOGLE_ULONGLONG(0);
  clear_has_team_user_num();
}
inline ::google::protobuf::uint64 tbUserSimpleData::team_user_num() const {
  return team_user_num_;
}
inline void tbUserSimpleData::set_team_user_num(::google::protobuf::uint64 value) {
  set_has_team_user_num();
  team_user_num_ = value;
}

// optional uint64 new_user_day = 20;
inline bool tbUserSimpleData::has_new_user_day() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tbUserSimpleData::set_has_new_user_day() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tbUserSimpleData::clear_has_new_user_day() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tbUserSimpleData::clear_new_user_day() {
  new_user_day_ = GOOGLE_ULONGLONG(0);
  clear_has_new_user_day();
}
inline ::google::protobuf::uint64 tbUserSimpleData::new_user_day() const {
  return new_user_day_;
}
inline void tbUserSimpleData::set_new_user_day(::google::protobuf::uint64 value) {
  set_has_new_user_day();
  new_user_day_ = value;
}

// optional uint64 activity_user_day = 21;
inline bool tbUserSimpleData::has_activity_user_day() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void tbUserSimpleData::set_has_activity_user_day() {
  _has_bits_[0] |= 0x00080000u;
}
inline void tbUserSimpleData::clear_has_activity_user_day() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void tbUserSimpleData::clear_activity_user_day() {
  activity_user_day_ = GOOGLE_ULONGLONG(0);
  clear_has_activity_user_day();
}
inline ::google::protobuf::uint64 tbUserSimpleData::activity_user_day() const {
  return activity_user_day_;
}
inline void tbUserSimpleData::set_activity_user_day(::google::protobuf::uint64 value) {
  set_has_activity_user_day();
  activity_user_day_ = value;
}

// optional uint32 getrate = 22;
inline bool tbUserSimpleData::has_getrate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tbUserSimpleData::set_has_getrate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tbUserSimpleData::clear_has_getrate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tbUserSimpleData::clear_getrate() {
  getrate_ = 0u;
  clear_has_getrate();
}
inline ::google::protobuf::uint32 tbUserSimpleData::getrate() const {
  return getrate_;
}
inline void tbUserSimpleData::set_getrate(::google::protobuf::uint32 value) {
  set_has_getrate();
  getrate_ = value;
}

// optional uint32 tax_getrate = 23;
inline bool tbUserSimpleData::has_tax_getrate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void tbUserSimpleData::set_has_tax_getrate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void tbUserSimpleData::clear_has_tax_getrate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void tbUserSimpleData::clear_tax_getrate() {
  tax_getrate_ = 0u;
  clear_has_tax_getrate();
}
inline ::google::protobuf::uint32 tbUserSimpleData::tax_getrate() const {
  return tax_getrate_;
}
inline void tbUserSimpleData::set_tax_getrate(::google::protobuf::uint32 value) {
  set_has_tax_getrate();
  tax_getrate_ = value;
}

// optional uint32 takemoney = 24;
inline bool tbUserSimpleData::has_takemoney() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tbUserSimpleData::set_has_takemoney() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tbUserSimpleData::clear_has_takemoney() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tbUserSimpleData::clear_takemoney() {
  takemoney_ = 0u;
  clear_has_takemoney();
}
inline ::google::protobuf::uint32 tbUserSimpleData::takemoney() const {
  return takemoney_;
}
inline void tbUserSimpleData::set_takemoney(::google::protobuf::uint32 value) {
  set_has_takemoney();
  takemoney_ = value;
}

// optional uint32 tax_takemoney = 25;
inline bool tbUserSimpleData::has_tax_takemoney() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tbUserSimpleData::set_has_tax_takemoney() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tbUserSimpleData::clear_has_tax_takemoney() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tbUserSimpleData::clear_tax_takemoney() {
  tax_takemoney_ = 0u;
  clear_has_tax_takemoney();
}
inline ::google::protobuf::uint32 tbUserSimpleData::tax_takemoney() const {
  return tax_takemoney_;
}
inline void tbUserSimpleData::set_tax_takemoney(::google::protobuf::uint32 value) {
  set_has_tax_takemoney();
  tax_takemoney_ = value;
}

// optional uint64 all_takemoney = 26;
inline bool tbUserSimpleData::has_all_takemoney() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void tbUserSimpleData::set_has_all_takemoney() {
  _has_bits_[0] |= 0x01000000u;
}
inline void tbUserSimpleData::clear_has_all_takemoney() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void tbUserSimpleData::clear_all_takemoney() {
  all_takemoney_ = GOOGLE_ULONGLONG(0);
  clear_has_all_takemoney();
}
inline ::google::protobuf::uint64 tbUserSimpleData::all_takemoney() const {
  return all_takemoney_;
}
inline void tbUserSimpleData::set_all_takemoney(::google::protobuf::uint64 value) {
  set_has_all_takemoney();
  all_takemoney_ = value;
}

// optional uint64 all_fee = 27;
inline bool tbUserSimpleData::has_all_fee() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void tbUserSimpleData::set_has_all_fee() {
  _has_bits_[0] |= 0x02000000u;
}
inline void tbUserSimpleData::clear_has_all_fee() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void tbUserSimpleData::clear_all_fee() {
  all_fee_ = GOOGLE_ULONGLONG(0);
  clear_has_all_fee();
}
inline ::google::protobuf::uint64 tbUserSimpleData::all_fee() const {
  return all_fee_;
}
inline void tbUserSimpleData::set_all_fee(::google::protobuf::uint64 value) {
  set_has_all_fee();
  all_fee_ = value;
}

// optional uint64 show_userid = 28;
inline bool tbUserSimpleData::has_show_userid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void tbUserSimpleData::set_has_show_userid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void tbUserSimpleData::clear_has_show_userid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void tbUserSimpleData::clear_show_userid() {
  show_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_show_userid();
}
inline ::google::protobuf::uint64 tbUserSimpleData::show_userid() const {
  return show_userid_;
}
inline void tbUserSimpleData::set_show_userid(::google::protobuf::uint64 value) {
  set_has_show_userid();
  show_userid_ = value;
}

// optional uint64 vip_level = 29;
inline bool tbUserSimpleData::has_vip_level() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void tbUserSimpleData::set_has_vip_level() {
  _has_bits_[0] |= 0x08000000u;
}
inline void tbUserSimpleData::clear_has_vip_level() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void tbUserSimpleData::clear_vip_level() {
  vip_level_ = GOOGLE_ULONGLONG(0);
  clear_has_vip_level();
}
inline ::google::protobuf::uint64 tbUserSimpleData::vip_level() const {
  return vip_level_;
}
inline void tbUserSimpleData::set_vip_level(::google::protobuf::uint64 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional .proto_ff.UserSimpleMiscData misc_data = 30;
inline bool tbUserSimpleData::has_misc_data() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void tbUserSimpleData::set_has_misc_data() {
  _has_bits_[0] |= 0x10000000u;
}
inline void tbUserSimpleData::clear_has_misc_data() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void tbUserSimpleData::clear_misc_data() {
  if (misc_data_ != NULL) misc_data_->::proto_ff::UserSimpleMiscData::Clear();
  clear_has_misc_data();
}
inline const ::proto_ff::UserSimpleMiscData& tbUserSimpleData::misc_data() const {
  return misc_data_ != NULL ? *misc_data_ : *default_instance_->misc_data_;
}
inline ::proto_ff::UserSimpleMiscData* tbUserSimpleData::mutable_misc_data() {
  set_has_misc_data();
  if (misc_data_ == NULL) misc_data_ = new ::proto_ff::UserSimpleMiscData;
  return misc_data_;
}
inline ::proto_ff::UserSimpleMiscData* tbUserSimpleData::release_misc_data() {
  clear_has_misc_data();
  ::proto_ff::UserSimpleMiscData* temp = misc_data_;
  misc_data_ = NULL;
  return temp;
}
inline void tbUserSimpleData::set_allocated_misc_data(::proto_ff::UserSimpleMiscData* misc_data) {
  delete misc_data_;
  misc_data_ = misc_data;
  if (misc_data) {
    set_has_misc_data();
  } else {
    clear_has_misc_data();
  }
}

// -------------------------------------------------------------------

// GamePlayerWealthData

// optional uint64 player_id = 1;
inline bool GamePlayerWealthData::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayerWealthData::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayerWealthData::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayerWealthData::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 GamePlayerWealthData::player_id() const {
  return player_id_;
}
inline void GamePlayerWealthData::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 recharge = 2;
inline bool GamePlayerWealthData::has_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerWealthData::set_has_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerWealthData::clear_has_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerWealthData::clear_recharge() {
  recharge_ = GOOGLE_LONGLONG(0);
  clear_has_recharge();
}
inline ::google::protobuf::int64 GamePlayerWealthData::recharge() const {
  return recharge_;
}
inline void GamePlayerWealthData::set_recharge(::google::protobuf::int64 value) {
  set_has_recharge();
  recharge_ = value;
}

// optional int64 total_lost = 3;
inline bool GamePlayerWealthData::has_total_lost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamePlayerWealthData::set_has_total_lost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamePlayerWealthData::clear_has_total_lost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamePlayerWealthData::clear_total_lost() {
  total_lost_ = GOOGLE_LONGLONG(0);
  clear_has_total_lost();
}
inline ::google::protobuf::int64 GamePlayerWealthData::total_lost() const {
  return total_lost_;
}
inline void GamePlayerWealthData::set_total_lost(::google::protobuf::int64 value) {
  set_has_total_lost();
  total_lost_ = value;
}

// optional int64 total_win = 4;
inline bool GamePlayerWealthData::has_total_win() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamePlayerWealthData::set_has_total_win() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamePlayerWealthData::clear_has_total_win() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamePlayerWealthData::clear_total_win() {
  total_win_ = GOOGLE_LONGLONG(0);
  clear_has_total_win();
}
inline ::google::protobuf::int64 GamePlayerWealthData::total_win() const {
  return total_win_;
}
inline void GamePlayerWealthData::set_total_win(::google::protobuf::int64 value) {
  set_has_total_win();
  total_win_ = value;
}

// optional int64 this_game_lost = 5;
inline bool GamePlayerWealthData::has_this_game_lost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamePlayerWealthData::set_has_this_game_lost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamePlayerWealthData::clear_has_this_game_lost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamePlayerWealthData::clear_this_game_lost() {
  this_game_lost_ = GOOGLE_LONGLONG(0);
  clear_has_this_game_lost();
}
inline ::google::protobuf::int64 GamePlayerWealthData::this_game_lost() const {
  return this_game_lost_;
}
inline void GamePlayerWealthData::set_this_game_lost(::google::protobuf::int64 value) {
  set_has_this_game_lost();
  this_game_lost_ = value;
}

// optional int64 this_game_win = 6;
inline bool GamePlayerWealthData::has_this_game_win() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GamePlayerWealthData::set_has_this_game_win() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GamePlayerWealthData::clear_has_this_game_win() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GamePlayerWealthData::clear_this_game_win() {
  this_game_win_ = GOOGLE_LONGLONG(0);
  clear_has_this_game_win();
}
inline ::google::protobuf::int64 GamePlayerWealthData::this_game_win() const {
  return this_game_win_;
}
inline void GamePlayerWealthData::set_this_game_win(::google::protobuf::int64 value) {
  set_has_this_game_win();
  this_game_win_ = value;
}

// -------------------------------------------------------------------

// GamePlayerDetailData

// optional uint64 player_id = 1;
inline bool GamePlayerDetailData::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayerDetailData::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayerDetailData::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayerDetailData::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 GamePlayerDetailData::player_id() const {
  return player_id_;
}
inline void GamePlayerDetailData::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional int64 cur_money = 2;
inline bool GamePlayerDetailData::has_cur_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerDetailData::set_has_cur_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerDetailData::clear_has_cur_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerDetailData::clear_cur_money() {
  cur_money_ = GOOGLE_LONGLONG(0);
  clear_has_cur_money();
}
inline ::google::protobuf::int64 GamePlayerDetailData::cur_money() const {
  return cur_money_;
}
inline void GamePlayerDetailData::set_cur_money(::google::protobuf::int64 value) {
  set_has_cur_money();
  cur_money_ = value;
}

// optional uint32 vip_level = 3;
inline bool GamePlayerDetailData::has_vip_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamePlayerDetailData::set_has_vip_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamePlayerDetailData::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamePlayerDetailData::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 GamePlayerDetailData::vip_level() const {
  return vip_level_;
}
inline void GamePlayerDetailData::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 sex = 4;
inline bool GamePlayerDetailData::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamePlayerDetailData::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamePlayerDetailData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamePlayerDetailData::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 GamePlayerDetailData::sex() const {
  return sex_;
}
inline void GamePlayerDetailData::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 chair_id = 5;
inline bool GamePlayerDetailData::has_chair_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamePlayerDetailData::set_has_chair_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamePlayerDetailData::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamePlayerDetailData::clear_chair_id() {
  chair_id_ = 0;
  clear_has_chair_id();
}
inline ::google::protobuf::int32 GamePlayerDetailData::chair_id() const {
  return chair_id_;
}
inline void GamePlayerDetailData::set_chair_id(::google::protobuf::int32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional string nick_name = 6;
inline bool GamePlayerDetailData::has_nick_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GamePlayerDetailData::set_has_nick_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GamePlayerDetailData::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GamePlayerDetailData::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& GamePlayerDetailData::nick_name() const {
  return *nick_name_;
}
inline void GamePlayerDetailData::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void GamePlayerDetailData::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void GamePlayerDetailData::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GamePlayerDetailData::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* GamePlayerDetailData::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GamePlayerDetailData::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 face = 7;
inline bool GamePlayerDetailData::has_face() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GamePlayerDetailData::set_has_face() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GamePlayerDetailData::clear_has_face() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GamePlayerDetailData::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 GamePlayerDetailData::face() const {
  return face_;
}
inline void GamePlayerDetailData::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
}

// optional bool isRobot = 8;
inline bool GamePlayerDetailData::has_isrobot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GamePlayerDetailData::set_has_isrobot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GamePlayerDetailData::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GamePlayerDetailData::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool GamePlayerDetailData::isrobot() const {
  return isrobot_;
}
inline void GamePlayerDetailData::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// -------------------------------------------------------------------

// GamePlayerAchievementData

// optional uint64 cur_ach = 2;
inline bool GamePlayerAchievementData::has_cur_ach() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayerAchievementData::set_has_cur_ach() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayerAchievementData::clear_has_cur_ach() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayerAchievementData::clear_cur_ach() {
  cur_ach_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_ach();
}
inline ::google::protobuf::uint64 GamePlayerAchievementData::cur_ach() const {
  return cur_ach_;
}
inline void GamePlayerAchievementData::set_cur_ach(::google::protobuf::uint64 value) {
  set_has_cur_ach();
  cur_ach_ = value;
}

// optional uint64 cur_fee = 3;
inline bool GamePlayerAchievementData::has_cur_fee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerAchievementData::set_has_cur_fee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerAchievementData::clear_has_cur_fee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerAchievementData::clear_cur_fee() {
  cur_fee_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_fee();
}
inline ::google::protobuf::uint64 GamePlayerAchievementData::cur_fee() const {
  return cur_fee_;
}
inline void GamePlayerAchievementData::set_cur_fee(::google::protobuf::uint64 value) {
  set_has_cur_fee();
  cur_fee_ = value;
}

// -------------------------------------------------------------------

// UserSimpleData

// optional uint64 userid = 1;
inline bool UserSimpleData::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSimpleData::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSimpleData::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSimpleData::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 UserSimpleData::userid() const {
  return userid_;
}
inline void UserSimpleData::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string nickname = 2;
inline bool UserSimpleData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSimpleData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSimpleData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSimpleData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& UserSimpleData::nickname() const {
  return *nickname_;
}
inline void UserSimpleData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UserSimpleData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void UserSimpleData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserSimpleData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* UserSimpleData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserSimpleData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 face = 3;
inline bool UserSimpleData::has_face() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSimpleData::set_has_face() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSimpleData::clear_has_face() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSimpleData::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 UserSimpleData::face() const {
  return face_;
}
inline void UserSimpleData::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
}

// optional uint32 gender = 4;
inline bool UserSimpleData::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSimpleData::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSimpleData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSimpleData::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 UserSimpleData::gender() const {
  return gender_;
}
inline void UserSimpleData::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint32 age = 5;
inline bool UserSimpleData::has_age() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSimpleData::set_has_age() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSimpleData::clear_has_age() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSimpleData::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 UserSimpleData::age() const {
  return age_;
}
inline void UserSimpleData::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional uint64 show_userid = 6;
inline bool UserSimpleData::has_show_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserSimpleData::set_has_show_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserSimpleData::clear_has_show_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserSimpleData::clear_show_userid() {
  show_userid_ = GOOGLE_ULONGLONG(0);
  clear_has_show_userid();
}
inline ::google::protobuf::uint64 UserSimpleData::show_userid() const {
  return show_userid_;
}
inline void UserSimpleData::set_show_userid(::google::protobuf::uint64 value) {
  set_has_show_userid();
  show_userid_ = value;
}

// optional uint32 vip_level = 7;
inline bool UserSimpleData::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserSimpleData::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserSimpleData::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserSimpleData::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 UserSimpleData::vip_level() const {
  return vip_level_;
}
inline void UserSimpleData::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// UserBankInfo

// repeated uint64 record_id = 1;
inline int UserBankInfo::record_id_size() const {
  return record_id_.size();
}
inline void UserBankInfo::clear_record_id() {
  record_id_.Clear();
}
inline ::google::protobuf::uint64 UserBankInfo::record_id(int index) const {
  return record_id_.Get(index);
}
inline void UserBankInfo::set_record_id(int index, ::google::protobuf::uint64 value) {
  record_id_.Set(index, value);
}
inline void UserBankInfo::add_record_id(::google::protobuf::uint64 value) {
  record_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
UserBankInfo::record_id() const {
  return record_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
UserBankInfo::mutable_record_id() {
  return &record_id_;
}

// -------------------------------------------------------------------

// tbUserMiscInfo

// required uint64 user_id = 1;
inline bool tbUserMiscInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbUserMiscInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbUserMiscInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbUserMiscInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbUserMiscInfo::user_id() const {
  return user_id_;
}
inline void tbUserMiscInfo::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .proto_ff.UserBankInfo bank_info = 2;
inline bool tbUserMiscInfo::has_bank_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbUserMiscInfo::set_has_bank_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbUserMiscInfo::clear_has_bank_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbUserMiscInfo::clear_bank_info() {
  if (bank_info_ != NULL) bank_info_->::proto_ff::UserBankInfo::Clear();
  clear_has_bank_info();
}
inline const ::proto_ff::UserBankInfo& tbUserMiscInfo::bank_info() const {
  return bank_info_ != NULL ? *bank_info_ : *default_instance_->bank_info_;
}
inline ::proto_ff::UserBankInfo* tbUserMiscInfo::mutable_bank_info() {
  set_has_bank_info();
  if (bank_info_ == NULL) bank_info_ = new ::proto_ff::UserBankInfo;
  return bank_info_;
}
inline ::proto_ff::UserBankInfo* tbUserMiscInfo::release_bank_info() {
  clear_has_bank_info();
  ::proto_ff::UserBankInfo* temp = bank_info_;
  bank_info_ = NULL;
  return temp;
}
inline void tbUserMiscInfo::set_allocated_bank_info(::proto_ff::UserBankInfo* bank_info) {
  delete bank_info_;
  bank_info_ = bank_info;
  if (bank_info) {
    set_has_bank_info();
  } else {
    clear_has_bank_info();
  }
}

// -------------------------------------------------------------------

// RankCommonInfo

// optional uint64 id = 1;
inline bool RankCommonInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankCommonInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankCommonInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankCommonInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RankCommonInfo::id() const {
  return id_;
}
inline void RankCommonInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 rank = 2;
inline bool RankCommonInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankCommonInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankCommonInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankCommonInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 RankCommonInfo::rank() const {
  return rank_;
}
inline void RankCommonInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// RankCommonScore

// optional uint64 id = 1;
inline bool RankCommonScore::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankCommonScore::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankCommonScore::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankCommonScore::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RankCommonScore::id() const {
  return id_;
}
inline void RankCommonScore::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 score = 2;
inline bool RankCommonScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankCommonScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankCommonScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankCommonScore::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 RankCommonScore::score() const {
  return score_;
}
inline void RankCommonScore::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// RankCommonBody

// repeated .proto_ff.RankCommonScore score_list = 1;
inline int RankCommonBody::score_list_size() const {
  return score_list_.size();
}
inline void RankCommonBody::clear_score_list() {
  score_list_.Clear();
}
inline const ::proto_ff::RankCommonScore& RankCommonBody::score_list(int index) const {
  return score_list_.Get(index);
}
inline ::proto_ff::RankCommonScore* RankCommonBody::mutable_score_list(int index) {
  return score_list_.Mutable(index);
}
inline ::proto_ff::RankCommonScore* RankCommonBody::add_score_list() {
  return score_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonScore >&
RankCommonBody::score_list() const {
  return score_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonScore >*
RankCommonBody::mutable_score_list() {
  return &score_list_;
}

// repeated .proto_ff.RankCommonInfo info_list = 2;
inline int RankCommonBody::info_list_size() const {
  return info_list_.size();
}
inline void RankCommonBody::clear_info_list() {
  info_list_.Clear();
}
inline const ::proto_ff::RankCommonInfo& RankCommonBody::info_list(int index) const {
  return info_list_.Get(index);
}
inline ::proto_ff::RankCommonInfo* RankCommonBody::mutable_info_list(int index) {
  return info_list_.Mutable(index);
}
inline ::proto_ff::RankCommonInfo* RankCommonBody::add_info_list() {
  return info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonInfo >&
RankCommonBody::info_list() const {
  return info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RankCommonInfo >*
RankCommonBody::mutable_info_list() {
  return &info_list_;
}

// -------------------------------------------------------------------

// tbRankCommon

// optional int32 id4db = 1;
inline bool tbRankCommon::has_id4db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbRankCommon::set_has_id4db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbRankCommon::clear_has_id4db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbRankCommon::clear_id4db() {
  id4db_ = 0;
  clear_has_id4db();
}
inline ::google::protobuf::int32 tbRankCommon::id4db() const {
  return id4db_;
}
inline void tbRankCommon::set_id4db(::google::protobuf::int32 value) {
  set_has_id4db();
  id4db_ = value;
}

// optional .proto_ff.RankCommonBody body = 2;
inline bool tbRankCommon::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbRankCommon::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbRankCommon::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbRankCommon::clear_body() {
  if (body_ != NULL) body_->::proto_ff::RankCommonBody::Clear();
  clear_has_body();
}
inline const ::proto_ff::RankCommonBody& tbRankCommon::body() const {
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::proto_ff::RankCommonBody* tbRankCommon::mutable_body() {
  set_has_body();
  if (body_ == NULL) body_ = new ::proto_ff::RankCommonBody;
  return body_;
}
inline ::proto_ff::RankCommonBody* tbRankCommon::release_body() {
  clear_has_body();
  ::proto_ff::RankCommonBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline void tbRankCommon::set_allocated_body(::proto_ff::RankCommonBody* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
}

// -------------------------------------------------------------------

// RobotCommonData

// optional uint64 robot_id = 1;
inline bool RobotCommonData::has_robot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotCommonData::set_has_robot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotCommonData::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotCommonData::clear_robot_id() {
  robot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_robot_id();
}
inline ::google::protobuf::uint64 RobotCommonData::robot_id() const {
  return robot_id_;
}
inline void RobotCommonData::set_robot_id(::google::protobuf::uint64 value) {
  set_has_robot_id();
  robot_id_ = value;
}

// optional string nickname = 2;
inline bool RobotCommonData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotCommonData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotCommonData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotCommonData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RobotCommonData::nickname() const {
  return *nickname_;
}
inline void RobotCommonData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RobotCommonData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RobotCommonData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotCommonData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* RobotCommonData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RobotCommonData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 face_id = 3;
inline bool RobotCommonData::has_face_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotCommonData::set_has_face_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotCommonData::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotCommonData::clear_face_id() {
  face_id_ = 0u;
  clear_has_face_id();
}
inline ::google::protobuf::uint32 RobotCommonData::face_id() const {
  return face_id_;
}
inline void RobotCommonData::set_face_id(::google::protobuf::uint32 value) {
  set_has_face_id();
  face_id_ = value;
}

// optional uint32 age = 4;
inline bool RobotCommonData::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotCommonData::set_has_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotCommonData::clear_has_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotCommonData::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 RobotCommonData::age() const {
  return age_;
}
inline void RobotCommonData::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional uint32 gender = 5;
inline bool RobotCommonData::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotCommonData::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotCommonData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotCommonData::clear_gender() {
  gender_ = 0u;
  clear_has_gender();
}
inline ::google::protobuf::uint32 RobotCommonData::gender() const {
  return gender_;
}
inline void RobotCommonData::set_gender(::google::protobuf::uint32 value) {
  set_has_gender();
  gender_ = value;
}

// optional uint64 jetton = 6;
inline bool RobotCommonData::has_jetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RobotCommonData::set_has_jetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RobotCommonData::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RobotCommonData::clear_jetton() {
  jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton();
}
inline ::google::protobuf::uint64 RobotCommonData::jetton() const {
  return jetton_;
}
inline void RobotCommonData::set_jetton(::google::protobuf::uint64 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional bool is_use = 7;
inline bool RobotCommonData::has_is_use() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobotCommonData::set_has_is_use() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobotCommonData::clear_has_is_use() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobotCommonData::clear_is_use() {
  is_use_ = false;
  clear_has_is_use();
}
inline bool RobotCommonData::is_use() const {
  return is_use_;
}
inline void RobotCommonData::set_is_use(bool value) {
  set_has_is_use();
  is_use_ = value;
}

// -------------------------------------------------------------------

// RobotCommonBody

// repeated .proto_ff.RobotCommonData robot_data = 1;
inline int RobotCommonBody::robot_data_size() const {
  return robot_data_.size();
}
inline void RobotCommonBody::clear_robot_data() {
  robot_data_.Clear();
}
inline const ::proto_ff::RobotCommonData& RobotCommonBody::robot_data(int index) const {
  return robot_data_.Get(index);
}
inline ::proto_ff::RobotCommonData* RobotCommonBody::mutable_robot_data(int index) {
  return robot_data_.Mutable(index);
}
inline ::proto_ff::RobotCommonData* RobotCommonBody::add_robot_data() {
  return robot_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RobotCommonData >&
RobotCommonBody::robot_data() const {
  return robot_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RobotCommonData >*
RobotCommonBody::mutable_robot_data() {
  return &robot_data_;
}

// -------------------------------------------------------------------

// tbGameRobot

// optional int32 id4db = 1;
inline bool tbGameRobot::has_id4db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbGameRobot::set_has_id4db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbGameRobot::clear_has_id4db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbGameRobot::clear_id4db() {
  id4db_ = 0;
  clear_has_id4db();
}
inline ::google::protobuf::int32 tbGameRobot::id4db() const {
  return id4db_;
}
inline void tbGameRobot::set_id4db(::google::protobuf::int32 value) {
  set_has_id4db();
  id4db_ = value;
}

// optional .proto_ff.RobotCommonBody body = 2;
inline bool tbGameRobot::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbGameRobot::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbGameRobot::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbGameRobot::clear_body() {
  if (body_ != NULL) body_->::proto_ff::RobotCommonBody::Clear();
  clear_has_body();
}
inline const ::proto_ff::RobotCommonBody& tbGameRobot::body() const {
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::proto_ff::RobotCommonBody* tbGameRobot::mutable_body() {
  set_has_body();
  if (body_ == NULL) body_ = new ::proto_ff::RobotCommonBody;
  return body_;
}
inline ::proto_ff::RobotCommonBody* tbGameRobot::release_body() {
  clear_has_body();
  ::proto_ff::RobotCommonBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline void tbGameRobot::set_allocated_body(::proto_ff::RobotCommonBody* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
}

// -------------------------------------------------------------------

// EventLogData

// optional .proto_ff.EventLogType event_type = 1;
inline bool EventLogData::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventLogData::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventLogData::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventLogData::clear_event_type() {
  event_type_ = 1;
  clear_has_event_type();
}
inline ::proto_ff::EventLogType EventLogData::event_type() const {
  return static_cast< ::proto_ff::EventLogType >(event_type_);
}
inline void EventLogData::set_event_type(::proto_ff::EventLogType value) {
  assert(::proto_ff::EventLogType_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// tbEventLog

// optional uint64 user_id = 1;
inline bool tbEventLog::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbEventLog::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbEventLog::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbEventLog::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbEventLog::user_id() const {
  return user_id_;
}
inline void tbEventLog::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint64 event_id = 2;
inline bool tbEventLog::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbEventLog::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbEventLog::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbEventLog::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 tbEventLog::event_id() const {
  return event_id_;
}
inline void tbEventLog::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 create_time = 3;
inline bool tbEventLog::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbEventLog::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbEventLog::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbEventLog::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
}
inline ::google::protobuf::int32 tbEventLog::create_time() const {
  return create_time_;
}
inline void tbEventLog::set_create_time(::google::protobuf::int32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional int32 expire_time = 4;
inline bool tbEventLog::has_expire_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbEventLog::set_has_expire_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbEventLog::clear_has_expire_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbEventLog::clear_expire_time() {
  expire_time_ = 0;
  clear_has_expire_time();
}
inline ::google::protobuf::int32 tbEventLog::expire_time() const {
  return expire_time_;
}
inline void tbEventLog::set_expire_time(::google::protobuf::int32 value) {
  set_has_expire_time();
  expire_time_ = value;
}

// optional .proto_ff.EventLogData data = 5;
inline bool tbEventLog::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbEventLog::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbEventLog::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbEventLog::clear_data() {
  if (data_ != NULL) data_->::proto_ff::EventLogData::Clear();
  clear_has_data();
}
inline const ::proto_ff::EventLogData& tbEventLog::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::EventLogData* tbEventLog::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::EventLogData;
  return data_;
}
inline ::proto_ff::EventLogData* tbEventLog::release_data() {
  clear_has_data();
  ::proto_ff::EventLogData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void tbEventLog::set_allocated_data(::proto_ff::EventLogData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// LoginCommonData

// optional uint32 aread_id = 1;
inline bool LoginCommonData::has_aread_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginCommonData::set_has_aread_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginCommonData::clear_has_aread_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginCommonData::clear_aread_id() {
  aread_id_ = 0u;
  clear_has_aread_id();
}
inline ::google::protobuf::uint32 LoginCommonData::aread_id() const {
  return aread_id_;
}
inline void LoginCommonData::set_aread_id(::google::protobuf::uint32 value) {
  set_has_aread_id();
  aread_id_ = value;
}

// optional uint64 agent_id = 2;
inline bool LoginCommonData::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginCommonData::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginCommonData::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginCommonData::clear_agent_id() {
  agent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_agent_id();
}
inline ::google::protobuf::uint64 LoginCommonData::agent_id() const {
  return agent_id_;
}
inline void LoginCommonData::set_agent_id(::google::protobuf::uint64 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// optional uint32 channel_id = 3;
inline bool LoginCommonData::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginCommonData::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginCommonData::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginCommonData::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
inline ::google::protobuf::uint32 LoginCommonData::channel_id() const {
  return channel_id_;
}
inline void LoginCommonData::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
}

// optional uint32 referral_code = 4;
inline bool LoginCommonData::has_referral_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginCommonData::set_has_referral_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginCommonData::clear_has_referral_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginCommonData::clear_referral_code() {
  referral_code_ = 0u;
  clear_has_referral_code();
}
inline ::google::protobuf::uint32 LoginCommonData::referral_code() const {
  return referral_code_;
}
inline void LoginCommonData::set_referral_code(::google::protobuf::uint32 value) {
  set_has_referral_code();
  referral_code_ = value;
}

// optional string platform_os = 5;
inline bool LoginCommonData::has_platform_os() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginCommonData::set_has_platform_os() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginCommonData::clear_has_platform_os() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginCommonData::clear_platform_os() {
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    platform_os_->clear();
  }
  clear_has_platform_os();
}
inline const ::std::string& LoginCommonData::platform_os() const {
  return *platform_os_;
}
inline void LoginCommonData::set_platform_os(const ::std::string& value) {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  platform_os_->assign(value);
}
inline void LoginCommonData::set_platform_os(const char* value) {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  platform_os_->assign(value);
}
inline void LoginCommonData::set_platform_os(const char* value, size_t size) {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  platform_os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCommonData::mutable_platform_os() {
  set_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    platform_os_ = new ::std::string;
  }
  return platform_os_;
}
inline ::std::string* LoginCommonData::release_platform_os() {
  clear_has_platform_os();
  if (platform_os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_os_;
    platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCommonData::set_allocated_platform_os(::std::string* platform_os) {
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_os_;
  }
  if (platform_os) {
    set_has_platform_os();
    platform_os_ = platform_os;
  } else {
    clear_has_platform_os();
    platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string country = 6;
inline bool LoginCommonData::has_country() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginCommonData::set_has_country() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginCommonData::clear_has_country() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginCommonData::clear_country() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    country_->clear();
  }
  clear_has_country();
}
inline const ::std::string& LoginCommonData::country() const {
  return *country_;
}
inline void LoginCommonData::set_country(const ::std::string& value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void LoginCommonData::set_country(const char* value) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(value);
}
inline void LoginCommonData::set_country(const char* value, size_t size) {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  country_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCommonData::mutable_country() {
  set_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    country_ = new ::std::string;
  }
  return country_;
}
inline ::std::string* LoginCommonData::release_country() {
  clear_has_country();
  if (country_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = country_;
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCommonData::set_allocated_country(::std::string* country) {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (country) {
    set_has_country();
    country_ = country;
  } else {
    clear_has_country();
    country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string province = 7;
inline bool LoginCommonData::has_province() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoginCommonData::set_has_province() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoginCommonData::clear_has_province() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoginCommonData::clear_province() {
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    province_->clear();
  }
  clear_has_province();
}
inline const ::std::string& LoginCommonData::province() const {
  return *province_;
}
inline void LoginCommonData::set_province(const ::std::string& value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  province_->assign(value);
}
inline void LoginCommonData::set_province(const char* value) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  province_->assign(value);
}
inline void LoginCommonData::set_province(const char* value, size_t size) {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  province_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCommonData::mutable_province() {
  set_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    province_ = new ::std::string;
  }
  return province_;
}
inline ::std::string* LoginCommonData::release_province() {
  clear_has_province();
  if (province_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = province_;
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCommonData::set_allocated_province(::std::string* province) {
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (province) {
    set_has_province();
    province_ = province;
  } else {
    clear_has_province();
    province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 8;
inline bool LoginCommonData::has_city() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoginCommonData::set_has_city() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoginCommonData::clear_has_city() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoginCommonData::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& LoginCommonData::city() const {
  return *city_;
}
inline void LoginCommonData::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void LoginCommonData::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void LoginCommonData::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCommonData::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* LoginCommonData::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCommonData::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 9;
inline bool LoginCommonData::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LoginCommonData::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LoginCommonData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LoginCommonData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LoginCommonData::ip() const {
  return *ip_;
}
inline void LoginCommonData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginCommonData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LoginCommonData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCommonData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* LoginCommonData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCommonData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone_mode = 10;
inline bool LoginCommonData::has_phone_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LoginCommonData::set_has_phone_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LoginCommonData::clear_has_phone_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LoginCommonData::clear_phone_mode() {
  if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
    phone_mode_->clear();
  }
  clear_has_phone_mode();
}
inline const ::std::string& LoginCommonData::phone_mode() const {
  return *phone_mode_;
}
inline void LoginCommonData::set_phone_mode(const ::std::string& value) {
  set_has_phone_mode();
  if (phone_mode_ == &::google::protobuf::internal::kEmptyString) {
    phone_mode_ = new ::std::string;
  }
  phone_mode_->assign(value);
}
inline void LoginCommonData::set_phone_mode(const char* value) {
  set_has_phone_mode();
  if (phone_mode_ == &::google::protobuf::internal::kEmptyString) {
    phone_mode_ = new ::std::string;
  }
  phone_mode_->assign(value);
}
inline void LoginCommonData::set_phone_mode(const char* value, size_t size) {
  set_has_phone_mode();
  if (phone_mode_ == &::google::protobuf::internal::kEmptyString) {
    phone_mode_ = new ::std::string;
  }
  phone_mode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCommonData::mutable_phone_mode() {
  set_has_phone_mode();
  if (phone_mode_ == &::google::protobuf::internal::kEmptyString) {
    phone_mode_ = new ::std::string;
  }
  return phone_mode_;
}
inline ::std::string* LoginCommonData::release_phone_mode() {
  clear_has_phone_mode();
  if (phone_mode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_mode_;
    phone_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCommonData::set_allocated_phone_mode(::std::string* phone_mode) {
  if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_mode_;
  }
  if (phone_mode) {
    set_has_phone_mode();
    phone_mode_ = phone_mode;
  } else {
    clear_has_phone_mode();
    phone_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device_id = 11;
inline bool LoginCommonData::has_device_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LoginCommonData::set_has_device_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LoginCommonData::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LoginCommonData::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& LoginCommonData::device_id() const {
  return *device_id_;
}
inline void LoginCommonData::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void LoginCommonData::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void LoginCommonData::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCommonData::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* LoginCommonData::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCommonData::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LogMoneyDetail

// optional uint64 event_id = 1;
inline bool LogMoneyDetail::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMoneyDetail::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMoneyDetail::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMoneyDetail::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogMoneyDetail::event_id() const {
  return event_id_;
}
inline void LogMoneyDetail::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogMoneyDetail::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMoneyDetail::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMoneyDetail::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMoneyDetail::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogMoneyDetail::sequence() const {
  return sequence_;
}
inline void LogMoneyDetail::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogMoneyDetail::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMoneyDetail::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMoneyDetail::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMoneyDetail::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogMoneyDetail::bus_name() const {
  return *bus_name_;
}
inline void LogMoneyDetail::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogMoneyDetail::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogMoneyDetail::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyDetail::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogMoneyDetail::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMoneyDetail::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogMoneyDetail::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMoneyDetail::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMoneyDetail::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMoneyDetail::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogMoneyDetail::event_time() const {
  return *event_time_;
}
inline void LogMoneyDetail::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogMoneyDetail::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogMoneyDetail::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyDetail::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogMoneyDetail::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMoneyDetail::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogMoneyDetail::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMoneyDetail::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogMoneyDetail::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogMoneyDetail::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogMoneyDetail::user_id() const {
  return user_id_;
}
inline void LogMoneyDetail::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogMoneyDetail::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogMoneyDetail::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogMoneyDetail::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogMoneyDetail::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogMoneyDetail::user_name() const {
  return *user_name_;
}
inline void LogMoneyDetail::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogMoneyDetail::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogMoneyDetail::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyDetail::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogMoneyDetail::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMoneyDetail::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 game_id = 20;
inline bool LogMoneyDetail::has_game_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogMoneyDetail::set_has_game_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogMoneyDetail::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogMoneyDetail::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 LogMoneyDetail::game_id() const {
  return game_id_;
}
inline void LogMoneyDetail::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 21;
inline bool LogMoneyDetail::has_room_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogMoneyDetail::set_has_room_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogMoneyDetail::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogMoneyDetail::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 LogMoneyDetail::room_id() const {
  return room_id_;
}
inline void LogMoneyDetail::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional uint32 desk_id = 22;
inline bool LogMoneyDetail::has_desk_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogMoneyDetail::set_has_desk_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogMoneyDetail::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogMoneyDetail::clear_desk_id() {
  desk_id_ = 0u;
  clear_has_desk_id();
}
inline ::google::protobuf::uint32 LogMoneyDetail::desk_id() const {
  return desk_id_;
}
inline void LogMoneyDetail::set_desk_id(::google::protobuf::uint32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional uint32 chair_id = 23;
inline bool LogMoneyDetail::has_chair_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogMoneyDetail::set_has_chair_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogMoneyDetail::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogMoneyDetail::clear_chair_id() {
  chair_id_ = 0u;
  clear_has_chair_id();
}
inline ::google::protobuf::uint32 LogMoneyDetail::chair_id() const {
  return chair_id_;
}
inline void LogMoneyDetail::set_chair_id(::google::protobuf::uint32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional uint32 account_type = 24;
inline bool LogMoneyDetail::has_account_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogMoneyDetail::set_has_account_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogMoneyDetail::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogMoneyDetail::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 LogMoneyDetail::account_type() const {
  return account_type_;
}
inline void LogMoneyDetail::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
}

// optional uint32 opt_type = 26;
inline bool LogMoneyDetail::has_opt_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogMoneyDetail::set_has_opt_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogMoneyDetail::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogMoneyDetail::clear_opt_type() {
  opt_type_ = 0u;
  clear_has_opt_type();
}
inline ::google::protobuf::uint32 LogMoneyDetail::opt_type() const {
  return opt_type_;
}
inline void LogMoneyDetail::set_opt_type(::google::protobuf::uint32 value) {
  set_has_opt_type();
  opt_type_ = value;
}

// optional uint32 opt_reason = 27;
inline bool LogMoneyDetail::has_opt_reason() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogMoneyDetail::set_has_opt_reason() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogMoneyDetail::clear_has_opt_reason() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogMoneyDetail::clear_opt_reason() {
  opt_reason_ = 0u;
  clear_has_opt_reason();
}
inline ::google::protobuf::uint32 LogMoneyDetail::opt_reason() const {
  return opt_reason_;
}
inline void LogMoneyDetail::set_opt_reason(::google::protobuf::uint32 value) {
  set_has_opt_reason();
  opt_reason_ = value;
}

// optional uint64 all_jetton = 28;
inline bool LogMoneyDetail::has_all_jetton() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogMoneyDetail::set_has_all_jetton() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogMoneyDetail::clear_has_all_jetton() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogMoneyDetail::clear_all_jetton() {
  all_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_all_jetton();
}
inline ::google::protobuf::uint64 LogMoneyDetail::all_jetton() const {
  return all_jetton_;
}
inline void LogMoneyDetail::set_all_jetton(::google::protobuf::uint64 value) {
  set_has_all_jetton();
  all_jetton_ = value;
}

// optional uint64 jetton = 29;
inline bool LogMoneyDetail::has_jetton() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LogMoneyDetail::set_has_jetton() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LogMoneyDetail::clear_has_jetton() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LogMoneyDetail::clear_jetton() {
  jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton();
}
inline ::google::protobuf::uint64 LogMoneyDetail::jetton() const {
  return jetton_;
}
inline void LogMoneyDetail::set_jetton(::google::protobuf::uint64 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional uint64 bank_jetton = 30;
inline bool LogMoneyDetail::has_bank_jetton() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LogMoneyDetail::set_has_bank_jetton() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LogMoneyDetail::clear_has_bank_jetton() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LogMoneyDetail::clear_bank_jetton() {
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_bank_jetton();
}
inline ::google::protobuf::uint64 LogMoneyDetail::bank_jetton() const {
  return bank_jetton_;
}
inline void LogMoneyDetail::set_bank_jetton(::google::protobuf::uint64 value) {
  set_has_bank_jetton();
  bank_jetton_ = value;
}

// optional uint64 change_count = 31;
inline bool LogMoneyDetail::has_change_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LogMoneyDetail::set_has_change_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LogMoneyDetail::clear_has_change_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LogMoneyDetail::clear_change_count() {
  change_count_ = GOOGLE_ULONGLONG(0);
  clear_has_change_count();
}
inline ::google::protobuf::uint64 LogMoneyDetail::change_count() const {
  return change_count_;
}
inline void LogMoneyDetail::set_change_count(::google::protobuf::uint64 value) {
  set_has_change_count();
  change_count_ = value;
}

// optional uint64 agent_id = 32;
inline bool LogMoneyDetail::has_agent_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LogMoneyDetail::set_has_agent_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LogMoneyDetail::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LogMoneyDetail::clear_agent_id() {
  agent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_agent_id();
}
inline ::google::protobuf::uint64 LogMoneyDetail::agent_id() const {
  return agent_id_;
}
inline void LogMoneyDetail::set_agent_id(::google::protobuf::uint64 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// optional string ip = 33;
inline bool LogMoneyDetail::has_ip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LogMoneyDetail::set_has_ip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LogMoneyDetail::clear_has_ip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LogMoneyDetail::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& LogMoneyDetail::ip() const {
  return *ip_;
}
inline void LogMoneyDetail::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LogMoneyDetail::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void LogMoneyDetail::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMoneyDetail::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* LogMoneyDetail::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMoneyDetail::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 record_id = 34;
inline bool LogMoneyDetail::has_record_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LogMoneyDetail::set_has_record_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LogMoneyDetail::clear_has_record_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LogMoneyDetail::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
inline ::google::protobuf::uint64 LogMoneyDetail::record_id() const {
  return record_id_;
}
inline void LogMoneyDetail::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
}

// -------------------------------------------------------------------

// LogGameRecordDetail

// optional uint64 event_id = 1;
inline bool LogGameRecordDetail::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogGameRecordDetail::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogGameRecordDetail::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogGameRecordDetail::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogGameRecordDetail::event_id() const {
  return event_id_;
}
inline void LogGameRecordDetail::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogGameRecordDetail::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogGameRecordDetail::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogGameRecordDetail::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogGameRecordDetail::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogGameRecordDetail::sequence() const {
  return sequence_;
}
inline void LogGameRecordDetail::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogGameRecordDetail::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogGameRecordDetail::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogGameRecordDetail::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogGameRecordDetail::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogGameRecordDetail::bus_name() const {
  return *bus_name_;
}
inline void LogGameRecordDetail::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogGameRecordDetail::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogGameRecordDetail::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameRecordDetail::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogGameRecordDetail::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameRecordDetail::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogGameRecordDetail::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogGameRecordDetail::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogGameRecordDetail::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogGameRecordDetail::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogGameRecordDetail::event_time() const {
  return *event_time_;
}
inline void LogGameRecordDetail::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogGameRecordDetail::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogGameRecordDetail::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameRecordDetail::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogGameRecordDetail::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameRecordDetail::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogGameRecordDetail::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogGameRecordDetail::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogGameRecordDetail::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogGameRecordDetail::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogGameRecordDetail::user_id() const {
  return user_id_;
}
inline void LogGameRecordDetail::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogGameRecordDetail::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogGameRecordDetail::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogGameRecordDetail::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogGameRecordDetail::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogGameRecordDetail::user_name() const {
  return *user_name_;
}
inline void LogGameRecordDetail::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogGameRecordDetail::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogGameRecordDetail::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameRecordDetail::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogGameRecordDetail::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameRecordDetail::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 record_id = 20;
inline bool LogGameRecordDetail::has_record_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogGameRecordDetail::set_has_record_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogGameRecordDetail::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogGameRecordDetail::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
inline ::google::protobuf::uint64 LogGameRecordDetail::record_id() const {
  return record_id_;
}
inline void LogGameRecordDetail::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
}

// optional uint32 game_id = 21;
inline bool LogGameRecordDetail::has_game_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogGameRecordDetail::set_has_game_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogGameRecordDetail::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogGameRecordDetail::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 LogGameRecordDetail::game_id() const {
  return game_id_;
}
inline void LogGameRecordDetail::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 22;
inline bool LogGameRecordDetail::has_room_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogGameRecordDetail::set_has_room_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogGameRecordDetail::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogGameRecordDetail::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 LogGameRecordDetail::room_id() const {
  return room_id_;
}
inline void LogGameRecordDetail::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional uint32 desk_id = 23;
inline bool LogGameRecordDetail::has_desk_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogGameRecordDetail::set_has_desk_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogGameRecordDetail::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogGameRecordDetail::clear_desk_id() {
  desk_id_ = 0u;
  clear_has_desk_id();
}
inline ::google::protobuf::uint32 LogGameRecordDetail::desk_id() const {
  return desk_id_;
}
inline void LogGameRecordDetail::set_desk_id(::google::protobuf::uint32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional uint32 chair_id = 24;
inline bool LogGameRecordDetail::has_chair_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogGameRecordDetail::set_has_chair_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogGameRecordDetail::clear_has_chair_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogGameRecordDetail::clear_chair_id() {
  chair_id_ = 0u;
  clear_has_chair_id();
}
inline ::google::protobuf::uint32 LogGameRecordDetail::chair_id() const {
  return chair_id_;
}
inline void LogGameRecordDetail::set_chair_id(::google::protobuf::uint32 value) {
  set_has_chair_id();
  chair_id_ = value;
}

// optional string result_info = 25;
inline bool LogGameRecordDetail::has_result_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogGameRecordDetail::set_has_result_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogGameRecordDetail::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogGameRecordDetail::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& LogGameRecordDetail::result_info() const {
  return *result_info_;
}
inline void LogGameRecordDetail::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void LogGameRecordDetail::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void LogGameRecordDetail::set_result_info(const char* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameRecordDetail::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  return result_info_;
}
inline ::std::string* LogGameRecordDetail::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameRecordDetail::set_allocated_result_info(::std::string* result_info) {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (result_info) {
    set_has_result_info();
    result_info_ = result_info;
  } else {
    clear_has_result_info();
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 pour_jetton = 26;
inline bool LogGameRecordDetail::has_pour_jetton() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogGameRecordDetail::set_has_pour_jetton() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogGameRecordDetail::clear_has_pour_jetton() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogGameRecordDetail::clear_pour_jetton() {
  pour_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_pour_jetton();
}
inline ::google::protobuf::uint64 LogGameRecordDetail::pour_jetton() const {
  return pour_jetton_;
}
inline void LogGameRecordDetail::set_pour_jetton(::google::protobuf::uint64 value) {
  set_has_pour_jetton();
  pour_jetton_ = value;
}

// optional int64 win_jetton = 27;
inline bool LogGameRecordDetail::has_win_jetton() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogGameRecordDetail::set_has_win_jetton() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogGameRecordDetail::clear_has_win_jetton() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogGameRecordDetail::clear_win_jetton() {
  win_jetton_ = GOOGLE_LONGLONG(0);
  clear_has_win_jetton();
}
inline ::google::protobuf::int64 LogGameRecordDetail::win_jetton() const {
  return win_jetton_;
}
inline void LogGameRecordDetail::set_win_jetton(::google::protobuf::int64 value) {
  set_has_win_jetton();
  win_jetton_ = value;
}

// optional uint64 tax_jetton = 28;
inline bool LogGameRecordDetail::has_tax_jetton() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LogGameRecordDetail::set_has_tax_jetton() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LogGameRecordDetail::clear_has_tax_jetton() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LogGameRecordDetail::clear_tax_jetton() {
  tax_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_tax_jetton();
}
inline ::google::protobuf::uint64 LogGameRecordDetail::tax_jetton() const {
  return tax_jetton_;
}
inline void LogGameRecordDetail::set_tax_jetton(::google::protobuf::uint64 value) {
  set_has_tax_jetton();
  tax_jetton_ = value;
}

// optional string win_list = 29;
inline bool LogGameRecordDetail::has_win_list() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LogGameRecordDetail::set_has_win_list() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LogGameRecordDetail::clear_has_win_list() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LogGameRecordDetail::clear_win_list() {
  if (win_list_ != &::google::protobuf::internal::kEmptyString) {
    win_list_->clear();
  }
  clear_has_win_list();
}
inline const ::std::string& LogGameRecordDetail::win_list() const {
  return *win_list_;
}
inline void LogGameRecordDetail::set_win_list(const ::std::string& value) {
  set_has_win_list();
  if (win_list_ == &::google::protobuf::internal::kEmptyString) {
    win_list_ = new ::std::string;
  }
  win_list_->assign(value);
}
inline void LogGameRecordDetail::set_win_list(const char* value) {
  set_has_win_list();
  if (win_list_ == &::google::protobuf::internal::kEmptyString) {
    win_list_ = new ::std::string;
  }
  win_list_->assign(value);
}
inline void LogGameRecordDetail::set_win_list(const char* value, size_t size) {
  set_has_win_list();
  if (win_list_ == &::google::protobuf::internal::kEmptyString) {
    win_list_ = new ::std::string;
  }
  win_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameRecordDetail::mutable_win_list() {
  set_has_win_list();
  if (win_list_ == &::google::protobuf::internal::kEmptyString) {
    win_list_ = new ::std::string;
  }
  return win_list_;
}
inline ::std::string* LogGameRecordDetail::release_win_list() {
  clear_has_win_list();
  if (win_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = win_list_;
    win_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameRecordDetail::set_allocated_win_list(::std::string* win_list) {
  if (win_list_ != &::google::protobuf::internal::kEmptyString) {
    delete win_list_;
  }
  if (win_list) {
    set_has_win_list();
    win_list_ = win_list;
  } else {
    clear_has_win_list();
    win_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lost_list = 30;
inline bool LogGameRecordDetail::has_lost_list() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LogGameRecordDetail::set_has_lost_list() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LogGameRecordDetail::clear_has_lost_list() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LogGameRecordDetail::clear_lost_list() {
  if (lost_list_ != &::google::protobuf::internal::kEmptyString) {
    lost_list_->clear();
  }
  clear_has_lost_list();
}
inline const ::std::string& LogGameRecordDetail::lost_list() const {
  return *lost_list_;
}
inline void LogGameRecordDetail::set_lost_list(const ::std::string& value) {
  set_has_lost_list();
  if (lost_list_ == &::google::protobuf::internal::kEmptyString) {
    lost_list_ = new ::std::string;
  }
  lost_list_->assign(value);
}
inline void LogGameRecordDetail::set_lost_list(const char* value) {
  set_has_lost_list();
  if (lost_list_ == &::google::protobuf::internal::kEmptyString) {
    lost_list_ = new ::std::string;
  }
  lost_list_->assign(value);
}
inline void LogGameRecordDetail::set_lost_list(const char* value, size_t size) {
  set_has_lost_list();
  if (lost_list_ == &::google::protobuf::internal::kEmptyString) {
    lost_list_ = new ::std::string;
  }
  lost_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameRecordDetail::mutable_lost_list() {
  set_has_lost_list();
  if (lost_list_ == &::google::protobuf::internal::kEmptyString) {
    lost_list_ = new ::std::string;
  }
  return lost_list_;
}
inline ::std::string* LogGameRecordDetail::release_lost_list() {
  clear_has_lost_list();
  if (lost_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lost_list_;
    lost_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameRecordDetail::set_allocated_lost_list(::std::string* lost_list) {
  if (lost_list_ != &::google::protobuf::internal::kEmptyString) {
    delete lost_list_;
  }
  if (lost_list) {
    set_has_lost_list();
    lost_list_ = lost_list;
  } else {
    clear_has_lost_list();
    lost_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LogGameDetail

// optional uint64 event_id = 1;
inline bool LogGameDetail::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogGameDetail::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogGameDetail::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogGameDetail::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogGameDetail::event_id() const {
  return event_id_;
}
inline void LogGameDetail::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogGameDetail::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogGameDetail::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogGameDetail::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogGameDetail::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogGameDetail::sequence() const {
  return sequence_;
}
inline void LogGameDetail::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogGameDetail::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogGameDetail::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogGameDetail::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogGameDetail::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogGameDetail::bus_name() const {
  return *bus_name_;
}
inline void LogGameDetail::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogGameDetail::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogGameDetail::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameDetail::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogGameDetail::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameDetail::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogGameDetail::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogGameDetail::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogGameDetail::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogGameDetail::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogGameDetail::event_time() const {
  return *event_time_;
}
inline void LogGameDetail::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogGameDetail::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogGameDetail::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameDetail::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogGameDetail::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameDetail::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogGameDetail::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogGameDetail::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogGameDetail::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogGameDetail::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogGameDetail::user_id() const {
  return user_id_;
}
inline void LogGameDetail::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogGameDetail::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogGameDetail::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogGameDetail::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogGameDetail::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogGameDetail::user_name() const {
  return *user_name_;
}
inline void LogGameDetail::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogGameDetail::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogGameDetail::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameDetail::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogGameDetail::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameDetail::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 record_id = 20;
inline bool LogGameDetail::has_record_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogGameDetail::set_has_record_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogGameDetail::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogGameDetail::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
inline ::google::protobuf::uint64 LogGameDetail::record_id() const {
  return record_id_;
}
inline void LogGameDetail::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
}

// optional uint32 game_id = 21;
inline bool LogGameDetail::has_game_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogGameDetail::set_has_game_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogGameDetail::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogGameDetail::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 LogGameDetail::game_id() const {
  return game_id_;
}
inline void LogGameDetail::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 22;
inline bool LogGameDetail::has_room_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogGameDetail::set_has_room_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogGameDetail::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogGameDetail::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 LogGameDetail::room_id() const {
  return room_id_;
}
inline void LogGameDetail::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional uint32 desk_id = 23;
inline bool LogGameDetail::has_desk_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogGameDetail::set_has_desk_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogGameDetail::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogGameDetail::clear_desk_id() {
  desk_id_ = 0u;
  clear_has_desk_id();
}
inline ::google::protobuf::uint32 LogGameDetail::desk_id() const {
  return desk_id_;
}
inline void LogGameDetail::set_desk_id(::google::protobuf::uint32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional string bet_info = 24;
inline bool LogGameDetail::has_bet_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogGameDetail::set_has_bet_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogGameDetail::clear_has_bet_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogGameDetail::clear_bet_info() {
  if (bet_info_ != &::google::protobuf::internal::kEmptyString) {
    bet_info_->clear();
  }
  clear_has_bet_info();
}
inline const ::std::string& LogGameDetail::bet_info() const {
  return *bet_info_;
}
inline void LogGameDetail::set_bet_info(const ::std::string& value) {
  set_has_bet_info();
  if (bet_info_ == &::google::protobuf::internal::kEmptyString) {
    bet_info_ = new ::std::string;
  }
  bet_info_->assign(value);
}
inline void LogGameDetail::set_bet_info(const char* value) {
  set_has_bet_info();
  if (bet_info_ == &::google::protobuf::internal::kEmptyString) {
    bet_info_ = new ::std::string;
  }
  bet_info_->assign(value);
}
inline void LogGameDetail::set_bet_info(const char* value, size_t size) {
  set_has_bet_info();
  if (bet_info_ == &::google::protobuf::internal::kEmptyString) {
    bet_info_ = new ::std::string;
  }
  bet_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameDetail::mutable_bet_info() {
  set_has_bet_info();
  if (bet_info_ == &::google::protobuf::internal::kEmptyString) {
    bet_info_ = new ::std::string;
  }
  return bet_info_;
}
inline ::std::string* LogGameDetail::release_bet_info() {
  clear_has_bet_info();
  if (bet_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bet_info_;
    bet_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameDetail::set_allocated_bet_info(::std::string* bet_info) {
  if (bet_info_ != &::google::protobuf::internal::kEmptyString) {
    delete bet_info_;
  }
  if (bet_info) {
    set_has_bet_info();
    bet_info_ = bet_info;
  } else {
    clear_has_bet_info();
    bet_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string result_info = 25;
inline bool LogGameDetail::has_result_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogGameDetail::set_has_result_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogGameDetail::clear_has_result_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogGameDetail::clear_result_info() {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    result_info_->clear();
  }
  clear_has_result_info();
}
inline const ::std::string& LogGameDetail::result_info() const {
  return *result_info_;
}
inline void LogGameDetail::set_result_info(const ::std::string& value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void LogGameDetail::set_result_info(const char* value) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(value);
}
inline void LogGameDetail::set_result_info(const char* value, size_t size) {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  result_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGameDetail::mutable_result_info() {
  set_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    result_info_ = new ::std::string;
  }
  return result_info_;
}
inline ::std::string* LogGameDetail::release_result_info() {
  clear_has_result_info();
  if (result_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_info_;
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGameDetail::set_allocated_result_info(::std::string* result_info) {
  if (result_info_ != &::google::protobuf::internal::kEmptyString) {
    delete result_info_;
  }
  if (result_info) {
    set_has_result_info();
    result_info_ = result_info;
  } else {
    clear_has_result_info();
    result_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 game_time = 26;
inline bool LogGameDetail::has_game_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogGameDetail::set_has_game_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogGameDetail::clear_has_game_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogGameDetail::clear_game_time() {
  game_time_ = GOOGLE_ULONGLONG(0);
  clear_has_game_time();
}
inline ::google::protobuf::uint64 LogGameDetail::game_time() const {
  return game_time_;
}
inline void LogGameDetail::set_game_time(::google::protobuf::uint64 value) {
  set_has_game_time();
  game_time_ = value;
}

// -------------------------------------------------------------------

// tbLogGameDay

// optional string date_id = 1;
inline bool tbLogGameDay::has_date_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbLogGameDay::set_has_date_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbLogGameDay::clear_has_date_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbLogGameDay::clear_date_id() {
  if (date_id_ != &::google::protobuf::internal::kEmptyString) {
    date_id_->clear();
  }
  clear_has_date_id();
}
inline const ::std::string& tbLogGameDay::date_id() const {
  return *date_id_;
}
inline void tbLogGameDay::set_date_id(const ::std::string& value) {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  date_id_->assign(value);
}
inline void tbLogGameDay::set_date_id(const char* value) {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  date_id_->assign(value);
}
inline void tbLogGameDay::set_date_id(const char* value, size_t size) {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  date_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbLogGameDay::mutable_date_id() {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  return date_id_;
}
inline ::std::string* tbLogGameDay::release_date_id() {
  clear_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_id_;
    date_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbLogGameDay::set_allocated_date_id(::std::string* date_id) {
  if (date_id_ != &::google::protobuf::internal::kEmptyString) {
    delete date_id_;
  }
  if (date_id) {
    set_has_date_id();
    date_id_ = date_id;
  } else {
    clear_has_date_id();
    date_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 game_id = 2;
inline bool tbLogGameDay::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbLogGameDay::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbLogGameDay::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbLogGameDay::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 tbLogGameDay::game_id() const {
  return game_id_;
}
inline void tbLogGameDay::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 3;
inline bool tbLogGameDay::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbLogGameDay::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbLogGameDay::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbLogGameDay::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 tbLogGameDay::room_id() const {
  return room_id_;
}
inline void tbLogGameDay::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional uint64 all_pour = 4;
inline bool tbLogGameDay::has_all_pour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbLogGameDay::set_has_all_pour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbLogGameDay::clear_has_all_pour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbLogGameDay::clear_all_pour() {
  all_pour_ = GOOGLE_ULONGLONG(0);
  clear_has_all_pour();
}
inline ::google::protobuf::uint64 tbLogGameDay::all_pour() const {
  return all_pour_;
}
inline void tbLogGameDay::set_all_pour(::google::protobuf::uint64 value) {
  set_has_all_pour();
  all_pour_ = value;
}

// optional uint64 pour_day = 5;
inline bool tbLogGameDay::has_pour_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbLogGameDay::set_has_pour_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbLogGameDay::clear_has_pour_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbLogGameDay::clear_pour_day() {
  pour_day_ = GOOGLE_ULONGLONG(0);
  clear_has_pour_day();
}
inline ::google::protobuf::uint64 tbLogGameDay::pour_day() const {
  return pour_day_;
}
inline void tbLogGameDay::set_pour_day(::google::protobuf::uint64 value) {
  set_has_pour_day();
  pour_day_ = value;
}

// optional uint64 pour_week = 6;
inline bool tbLogGameDay::has_pour_week() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbLogGameDay::set_has_pour_week() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbLogGameDay::clear_has_pour_week() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbLogGameDay::clear_pour_week() {
  pour_week_ = GOOGLE_ULONGLONG(0);
  clear_has_pour_week();
}
inline ::google::protobuf::uint64 tbLogGameDay::pour_week() const {
  return pour_week_;
}
inline void tbLogGameDay::set_pour_week(::google::protobuf::uint64 value) {
  set_has_pour_week();
  pour_week_ = value;
}

// optional uint64 pour_month = 7;
inline bool tbLogGameDay::has_pour_month() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbLogGameDay::set_has_pour_month() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbLogGameDay::clear_has_pour_month() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbLogGameDay::clear_pour_month() {
  pour_month_ = GOOGLE_ULONGLONG(0);
  clear_has_pour_month();
}
inline ::google::protobuf::uint64 tbLogGameDay::pour_month() const {
  return pour_month_;
}
inline void tbLogGameDay::set_pour_month(::google::protobuf::uint64 value) {
  set_has_pour_month();
  pour_month_ = value;
}

// optional int64 all_win = 8;
inline bool tbLogGameDay::has_all_win() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbLogGameDay::set_has_all_win() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbLogGameDay::clear_has_all_win() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbLogGameDay::clear_all_win() {
  all_win_ = GOOGLE_LONGLONG(0);
  clear_has_all_win();
}
inline ::google::protobuf::int64 tbLogGameDay::all_win() const {
  return all_win_;
}
inline void tbLogGameDay::set_all_win(::google::protobuf::int64 value) {
  set_has_all_win();
  all_win_ = value;
}

// optional int64 win_day = 9;
inline bool tbLogGameDay::has_win_day() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbLogGameDay::set_has_win_day() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbLogGameDay::clear_has_win_day() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbLogGameDay::clear_win_day() {
  win_day_ = GOOGLE_LONGLONG(0);
  clear_has_win_day();
}
inline ::google::protobuf::int64 tbLogGameDay::win_day() const {
  return win_day_;
}
inline void tbLogGameDay::set_win_day(::google::protobuf::int64 value) {
  set_has_win_day();
  win_day_ = value;
}

// optional int64 win_week = 10;
inline bool tbLogGameDay::has_win_week() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbLogGameDay::set_has_win_week() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbLogGameDay::clear_has_win_week() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbLogGameDay::clear_win_week() {
  win_week_ = GOOGLE_LONGLONG(0);
  clear_has_win_week();
}
inline ::google::protobuf::int64 tbLogGameDay::win_week() const {
  return win_week_;
}
inline void tbLogGameDay::set_win_week(::google::protobuf::int64 value) {
  set_has_win_week();
  win_week_ = value;
}

// optional int64 win_month = 11;
inline bool tbLogGameDay::has_win_month() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbLogGameDay::set_has_win_month() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbLogGameDay::clear_has_win_month() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbLogGameDay::clear_win_month() {
  win_month_ = GOOGLE_LONGLONG(0);
  clear_has_win_month();
}
inline ::google::protobuf::int64 tbLogGameDay::win_month() const {
  return win_month_;
}
inline void tbLogGameDay::set_win_month(::google::protobuf::int64 value) {
  set_has_win_month();
  win_month_ = value;
}

// optional uint64 all_fee = 12;
inline bool tbLogGameDay::has_all_fee() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tbLogGameDay::set_has_all_fee() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tbLogGameDay::clear_has_all_fee() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tbLogGameDay::clear_all_fee() {
  all_fee_ = GOOGLE_ULONGLONG(0);
  clear_has_all_fee();
}
inline ::google::protobuf::uint64 tbLogGameDay::all_fee() const {
  return all_fee_;
}
inline void tbLogGameDay::set_all_fee(::google::protobuf::uint64 value) {
  set_has_all_fee();
  all_fee_ = value;
}

// optional uint64 fee_day = 13;
inline bool tbLogGameDay::has_fee_day() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tbLogGameDay::set_has_fee_day() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tbLogGameDay::clear_has_fee_day() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tbLogGameDay::clear_fee_day() {
  fee_day_ = GOOGLE_ULONGLONG(0);
  clear_has_fee_day();
}
inline ::google::protobuf::uint64 tbLogGameDay::fee_day() const {
  return fee_day_;
}
inline void tbLogGameDay::set_fee_day(::google::protobuf::uint64 value) {
  set_has_fee_day();
  fee_day_ = value;
}

// optional uint64 fee_week = 14;
inline bool tbLogGameDay::has_fee_week() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tbLogGameDay::set_has_fee_week() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tbLogGameDay::clear_has_fee_week() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tbLogGameDay::clear_fee_week() {
  fee_week_ = GOOGLE_ULONGLONG(0);
  clear_has_fee_week();
}
inline ::google::protobuf::uint64 tbLogGameDay::fee_week() const {
  return fee_week_;
}
inline void tbLogGameDay::set_fee_week(::google::protobuf::uint64 value) {
  set_has_fee_week();
  fee_week_ = value;
}

// optional uint64 fee_month = 15;
inline bool tbLogGameDay::has_fee_month() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tbLogGameDay::set_has_fee_month() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tbLogGameDay::clear_has_fee_month() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tbLogGameDay::clear_fee_month() {
  fee_month_ = GOOGLE_ULONGLONG(0);
  clear_has_fee_month();
}
inline ::google::protobuf::uint64 tbLogGameDay::fee_month() const {
  return fee_month_;
}
inline void tbLogGameDay::set_fee_month(::google::protobuf::uint64 value) {
  set_has_fee_month();
  fee_month_ = value;
}

// optional string stat_time = 16;
inline bool tbLogGameDay::has_stat_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tbLogGameDay::set_has_stat_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tbLogGameDay::clear_has_stat_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tbLogGameDay::clear_stat_time() {
  if (stat_time_ != &::google::protobuf::internal::kEmptyString) {
    stat_time_->clear();
  }
  clear_has_stat_time();
}
inline const ::std::string& tbLogGameDay::stat_time() const {
  return *stat_time_;
}
inline void tbLogGameDay::set_stat_time(const ::std::string& value) {
  set_has_stat_time();
  if (stat_time_ == &::google::protobuf::internal::kEmptyString) {
    stat_time_ = new ::std::string;
  }
  stat_time_->assign(value);
}
inline void tbLogGameDay::set_stat_time(const char* value) {
  set_has_stat_time();
  if (stat_time_ == &::google::protobuf::internal::kEmptyString) {
    stat_time_ = new ::std::string;
  }
  stat_time_->assign(value);
}
inline void tbLogGameDay::set_stat_time(const char* value, size_t size) {
  set_has_stat_time();
  if (stat_time_ == &::google::protobuf::internal::kEmptyString) {
    stat_time_ = new ::std::string;
  }
  stat_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbLogGameDay::mutable_stat_time() {
  set_has_stat_time();
  if (stat_time_ == &::google::protobuf::internal::kEmptyString) {
    stat_time_ = new ::std::string;
  }
  return stat_time_;
}
inline ::std::string* tbLogGameDay::release_stat_time() {
  clear_has_stat_time();
  if (stat_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stat_time_;
    stat_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbLogGameDay::set_allocated_stat_time(::std::string* stat_time) {
  if (stat_time_ != &::google::protobuf::internal::kEmptyString) {
    delete stat_time_;
  }
  if (stat_time) {
    set_has_stat_time();
    stat_time_ = stat_time;
  } else {
    clear_has_stat_time();
    stat_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// tbGameUserManagerData

// optional uint64 id = 1;
inline bool tbGameUserManagerData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbGameUserManagerData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbGameUserManagerData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbGameUserManagerData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tbGameUserManagerData::id() const {
  return id_;
}
inline void tbGameUserManagerData::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 user_id = 2;
inline bool tbGameUserManagerData::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbGameUserManagerData::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbGameUserManagerData::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbGameUserManagerData::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbGameUserManagerData::user_id() const {
  return user_id_;
}
inline void tbGameUserManagerData::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 3;
inline bool tbGameUserManagerData::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbGameUserManagerData::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbGameUserManagerData::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbGameUserManagerData::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& tbGameUserManagerData::user_name() const {
  return *user_name_;
}
inline void tbGameUserManagerData::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void tbGameUserManagerData::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void tbGameUserManagerData::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbGameUserManagerData::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* tbGameUserManagerData::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbGameUserManagerData::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string create_date = 4;
inline bool tbGameUserManagerData::has_create_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbGameUserManagerData::set_has_create_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbGameUserManagerData::clear_has_create_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbGameUserManagerData::clear_create_date() {
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    create_date_->clear();
  }
  clear_has_create_date();
}
inline const ::std::string& tbGameUserManagerData::create_date() const {
  return *create_date_;
}
inline void tbGameUserManagerData::set_create_date(const ::std::string& value) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(value);
}
inline void tbGameUserManagerData::set_create_date(const char* value) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(value);
}
inline void tbGameUserManagerData::set_create_date(const char* value, size_t size) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbGameUserManagerData::mutable_create_date() {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  return create_date_;
}
inline ::std::string* tbGameUserManagerData::release_create_date() {
  clear_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = create_date_;
    create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbGameUserManagerData::set_allocated_create_date(::std::string* create_date) {
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    delete create_date_;
  }
  if (create_date) {
    set_has_create_date();
    create_date_ = create_date;
  } else {
    clear_has_create_date();
    create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 roster_type = 5;
inline bool tbGameUserManagerData::has_roster_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbGameUserManagerData::set_has_roster_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbGameUserManagerData::clear_has_roster_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbGameUserManagerData::clear_roster_type() {
  roster_type_ = 0u;
  clear_has_roster_type();
}
inline ::google::protobuf::uint32 tbGameUserManagerData::roster_type() const {
  return roster_type_;
}
inline void tbGameUserManagerData::set_roster_type(::google::protobuf::uint32 value) {
  set_has_roster_type();
  roster_type_ = value;
}

// optional uint64 start_time = 6;
inline bool tbGameUserManagerData::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbGameUserManagerData::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbGameUserManagerData::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbGameUserManagerData::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 tbGameUserManagerData::start_time() const {
  return start_time_;
}
inline void tbGameUserManagerData::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint64 end_time = 7;
inline bool tbGameUserManagerData::has_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbGameUserManagerData::set_has_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbGameUserManagerData::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbGameUserManagerData::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 tbGameUserManagerData::end_time() const {
  return end_time_;
}
inline void tbGameUserManagerData::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 game_id = 8;
inline bool tbGameUserManagerData::has_game_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbGameUserManagerData::set_has_game_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbGameUserManagerData::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbGameUserManagerData::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 tbGameUserManagerData::game_id() const {
  return game_id_;
}
inline void tbGameUserManagerData::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 9;
inline bool tbGameUserManagerData::has_room_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbGameUserManagerData::set_has_room_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbGameUserManagerData::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbGameUserManagerData::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 tbGameUserManagerData::room_id() const {
  return room_id_;
}
inline void tbGameUserManagerData::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional uint32 state = 10;
inline bool tbGameUserManagerData::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbGameUserManagerData::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbGameUserManagerData::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbGameUserManagerData::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 tbGameUserManagerData::state() const {
  return state_;
}
inline void tbGameUserManagerData::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional int64 opt_mark = 11;
inline bool tbGameUserManagerData::has_opt_mark() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbGameUserManagerData::set_has_opt_mark() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbGameUserManagerData::clear_has_opt_mark() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbGameUserManagerData::clear_opt_mark() {
  opt_mark_ = GOOGLE_LONGLONG(0);
  clear_has_opt_mark();
}
inline ::google::protobuf::int64 tbGameUserManagerData::opt_mark() const {
  return opt_mark_;
}
inline void tbGameUserManagerData::set_opt_mark(::google::protobuf::int64 value) {
  set_has_opt_mark();
  opt_mark_ = value;
}

// optional float rate_mark = 12;
inline bool tbGameUserManagerData::has_rate_mark() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tbGameUserManagerData::set_has_rate_mark() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tbGameUserManagerData::clear_has_rate_mark() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tbGameUserManagerData::clear_rate_mark() {
  rate_mark_ = 0;
  clear_has_rate_mark();
}
inline float tbGameUserManagerData::rate_mark() const {
  return rate_mark_;
}
inline void tbGameUserManagerData::set_rate_mark(float value) {
  set_has_rate_mark();
  rate_mark_ = value;
}

// optional int32 control_level = 13;
inline bool tbGameUserManagerData::has_control_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tbGameUserManagerData::set_has_control_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tbGameUserManagerData::clear_has_control_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tbGameUserManagerData::clear_control_level() {
  control_level_ = 0;
  clear_has_control_level();
}
inline ::google::protobuf::int32 tbGameUserManagerData::control_level() const {
  return control_level_;
}
inline void tbGameUserManagerData::set_control_level(::google::protobuf::int32 value) {
  set_has_control_level();
  control_level_ = value;
}

// optional uint64 max_win_jetton = 14;
inline bool tbGameUserManagerData::has_max_win_jetton() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tbGameUserManagerData::set_has_max_win_jetton() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tbGameUserManagerData::clear_has_max_win_jetton() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tbGameUserManagerData::clear_max_win_jetton() {
  max_win_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_max_win_jetton();
}
inline ::google::protobuf::uint64 tbGameUserManagerData::max_win_jetton() const {
  return max_win_jetton_;
}
inline void tbGameUserManagerData::set_max_win_jetton(::google::protobuf::uint64 value) {
  set_has_max_win_jetton();
  max_win_jetton_ = value;
}

// optional int64 cur_win = 15;
inline bool tbGameUserManagerData::has_cur_win() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tbGameUserManagerData::set_has_cur_win() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tbGameUserManagerData::clear_has_cur_win() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tbGameUserManagerData::clear_cur_win() {
  cur_win_ = GOOGLE_LONGLONG(0);
  clear_has_cur_win();
}
inline ::google::protobuf::int64 tbGameUserManagerData::cur_win() const {
  return cur_win_;
}
inline void tbGameUserManagerData::set_cur_win(::google::protobuf::int64 value) {
  set_has_cur_win();
  cur_win_ = value;
}

// -------------------------------------------------------------------

// tbMachineManagerData

// optional uint64 id = 1;
inline bool tbMachineManagerData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbMachineManagerData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbMachineManagerData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbMachineManagerData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tbMachineManagerData::id() const {
  return id_;
}
inline void tbMachineManagerData::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string device_id = 2;
inline bool tbMachineManagerData::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbMachineManagerData::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbMachineManagerData::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbMachineManagerData::clear_device_id() {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    device_id_->clear();
  }
  clear_has_device_id();
}
inline const ::std::string& tbMachineManagerData::device_id() const {
  return *device_id_;
}
inline void tbMachineManagerData::set_device_id(const ::std::string& value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbMachineManagerData::set_device_id(const char* value) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(value);
}
inline void tbMachineManagerData::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  device_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbMachineManagerData::mutable_device_id() {
  set_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    device_id_ = new ::std::string;
  }
  return device_id_;
}
inline ::std::string* tbMachineManagerData::release_device_id() {
  clear_has_device_id();
  if (device_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_id_;
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbMachineManagerData::set_allocated_device_id(::std::string* device_id) {
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_id) {
    set_has_device_id();
    device_id_ = device_id;
  } else {
    clear_has_device_id();
    device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string create_date = 4;
inline bool tbMachineManagerData::has_create_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbMachineManagerData::set_has_create_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbMachineManagerData::clear_has_create_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbMachineManagerData::clear_create_date() {
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    create_date_->clear();
  }
  clear_has_create_date();
}
inline const ::std::string& tbMachineManagerData::create_date() const {
  return *create_date_;
}
inline void tbMachineManagerData::set_create_date(const ::std::string& value) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(value);
}
inline void tbMachineManagerData::set_create_date(const char* value) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(value);
}
inline void tbMachineManagerData::set_create_date(const char* value, size_t size) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbMachineManagerData::mutable_create_date() {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  return create_date_;
}
inline ::std::string* tbMachineManagerData::release_create_date() {
  clear_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = create_date_;
    create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbMachineManagerData::set_allocated_create_date(::std::string* create_date) {
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    delete create_date_;
  }
  if (create_date) {
    set_has_create_date();
    create_date_ = create_date;
  } else {
    clear_has_create_date();
    create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 roster_type = 5;
inline bool tbMachineManagerData::has_roster_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbMachineManagerData::set_has_roster_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbMachineManagerData::clear_has_roster_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbMachineManagerData::clear_roster_type() {
  roster_type_ = 0u;
  clear_has_roster_type();
}
inline ::google::protobuf::uint32 tbMachineManagerData::roster_type() const {
  return roster_type_;
}
inline void tbMachineManagerData::set_roster_type(::google::protobuf::uint32 value) {
  set_has_roster_type();
  roster_type_ = value;
}

// optional uint64 start_time = 6;
inline bool tbMachineManagerData::has_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbMachineManagerData::set_has_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbMachineManagerData::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbMachineManagerData::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 tbMachineManagerData::start_time() const {
  return start_time_;
}
inline void tbMachineManagerData::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint64 end_time = 7;
inline bool tbMachineManagerData::has_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbMachineManagerData::set_has_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbMachineManagerData::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbMachineManagerData::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 tbMachineManagerData::end_time() const {
  return end_time_;
}
inline void tbMachineManagerData::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 game_id = 8;
inline bool tbMachineManagerData::has_game_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbMachineManagerData::set_has_game_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbMachineManagerData::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbMachineManagerData::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 tbMachineManagerData::game_id() const {
  return game_id_;
}
inline void tbMachineManagerData::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 room_id = 9;
inline bool tbMachineManagerData::has_room_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbMachineManagerData::set_has_room_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbMachineManagerData::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbMachineManagerData::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
inline ::google::protobuf::uint32 tbMachineManagerData::room_id() const {
  return room_id_;
}
inline void tbMachineManagerData::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional uint32 state = 10;
inline bool tbMachineManagerData::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbMachineManagerData::set_has_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbMachineManagerData::clear_has_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbMachineManagerData::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 tbMachineManagerData::state() const {
  return state_;
}
inline void tbMachineManagerData::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional int64 opt_mark = 11;
inline bool tbMachineManagerData::has_opt_mark() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbMachineManagerData::set_has_opt_mark() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbMachineManagerData::clear_has_opt_mark() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbMachineManagerData::clear_opt_mark() {
  opt_mark_ = GOOGLE_LONGLONG(0);
  clear_has_opt_mark();
}
inline ::google::protobuf::int64 tbMachineManagerData::opt_mark() const {
  return opt_mark_;
}
inline void tbMachineManagerData::set_opt_mark(::google::protobuf::int64 value) {
  set_has_opt_mark();
  opt_mark_ = value;
}

// optional float rate_mark = 12;
inline bool tbMachineManagerData::has_rate_mark() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbMachineManagerData::set_has_rate_mark() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbMachineManagerData::clear_has_rate_mark() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbMachineManagerData::clear_rate_mark() {
  rate_mark_ = 0;
  clear_has_rate_mark();
}
inline float tbMachineManagerData::rate_mark() const {
  return rate_mark_;
}
inline void tbMachineManagerData::set_rate_mark(float value) {
  set_has_rate_mark();
  rate_mark_ = value;
}

// optional int32 control_level = 13;
inline bool tbMachineManagerData::has_control_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tbMachineManagerData::set_has_control_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tbMachineManagerData::clear_has_control_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tbMachineManagerData::clear_control_level() {
  control_level_ = 0;
  clear_has_control_level();
}
inline ::google::protobuf::int32 tbMachineManagerData::control_level() const {
  return control_level_;
}
inline void tbMachineManagerData::set_control_level(::google::protobuf::int32 value) {
  set_has_control_level();
  control_level_ = value;
}

// optional uint64 max_win_jetton = 14;
inline bool tbMachineManagerData::has_max_win_jetton() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tbMachineManagerData::set_has_max_win_jetton() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tbMachineManagerData::clear_has_max_win_jetton() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tbMachineManagerData::clear_max_win_jetton() {
  max_win_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_max_win_jetton();
}
inline ::google::protobuf::uint64 tbMachineManagerData::max_win_jetton() const {
  return max_win_jetton_;
}
inline void tbMachineManagerData::set_max_win_jetton(::google::protobuf::uint64 value) {
  set_has_max_win_jetton();
  max_win_jetton_ = value;
}

// optional int64 cur_win = 15;
inline bool tbMachineManagerData::has_cur_win() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tbMachineManagerData::set_has_cur_win() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tbMachineManagerData::clear_has_cur_win() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tbMachineManagerData::clear_cur_win() {
  cur_win_ = GOOGLE_LONGLONG(0);
  clear_has_cur_win();
}
inline ::google::protobuf::int64 tbMachineManagerData::cur_win() const {
  return cur_win_;
}
inline void tbMachineManagerData::set_cur_win(::google::protobuf::int64 value) {
  set_has_cur_win();
  cur_win_ = value;
}

// -------------------------------------------------------------------

// Sheet_tbGameUserManagerData

// repeated .proto_ff.tbGameUserManagerData tbGameUserManagerData_List = 1;
inline int Sheet_tbGameUserManagerData::tbgameusermanagerdata_list_size() const {
  return tbgameusermanagerdata_list_.size();
}
inline void Sheet_tbGameUserManagerData::clear_tbgameusermanagerdata_list() {
  tbgameusermanagerdata_list_.Clear();
}
inline const ::proto_ff::tbGameUserManagerData& Sheet_tbGameUserManagerData::tbgameusermanagerdata_list(int index) const {
  return tbgameusermanagerdata_list_.Get(index);
}
inline ::proto_ff::tbGameUserManagerData* Sheet_tbGameUserManagerData::mutable_tbgameusermanagerdata_list(int index) {
  return tbgameusermanagerdata_list_.Mutable(index);
}
inline ::proto_ff::tbGameUserManagerData* Sheet_tbGameUserManagerData::add_tbgameusermanagerdata_list() {
  return tbgameusermanagerdata_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGameUserManagerData >&
Sheet_tbGameUserManagerData::tbgameusermanagerdata_list() const {
  return tbgameusermanagerdata_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGameUserManagerData >*
Sheet_tbGameUserManagerData::mutable_tbgameusermanagerdata_list() {
  return &tbgameusermanagerdata_list_;
}

// -------------------------------------------------------------------

// tbGmCtrlGiveCtrlData

// optional uint64 id = 1;
inline bool tbGmCtrlGiveCtrlData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbGmCtrlGiveCtrlData::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 tbGmCtrlGiveCtrlData::id() const {
  return id_;
}
inline void tbGmCtrlGiveCtrlData::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 user_id = 2;
inline bool tbGmCtrlGiveCtrlData::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbGmCtrlGiveCtrlData::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbGmCtrlGiveCtrlData::user_id() const {
  return user_id_;
}
inline void tbGmCtrlGiveCtrlData::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 3;
inline bool tbGmCtrlGiveCtrlData::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbGmCtrlGiveCtrlData::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& tbGmCtrlGiveCtrlData::user_name() const {
  return *user_name_;
}
inline void tbGmCtrlGiveCtrlData::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void tbGmCtrlGiveCtrlData::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void tbGmCtrlGiveCtrlData::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbGmCtrlGiveCtrlData::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* tbGmCtrlGiveCtrlData::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbGmCtrlGiveCtrlData::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string create_date = 4;
inline bool tbGmCtrlGiveCtrlData::has_create_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_create_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_create_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbGmCtrlGiveCtrlData::clear_create_date() {
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    create_date_->clear();
  }
  clear_has_create_date();
}
inline const ::std::string& tbGmCtrlGiveCtrlData::create_date() const {
  return *create_date_;
}
inline void tbGmCtrlGiveCtrlData::set_create_date(const ::std::string& value) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(value);
}
inline void tbGmCtrlGiveCtrlData::set_create_date(const char* value) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(value);
}
inline void tbGmCtrlGiveCtrlData::set_create_date(const char* value, size_t size) {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  create_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbGmCtrlGiveCtrlData::mutable_create_date() {
  set_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    create_date_ = new ::std::string;
  }
  return create_date_;
}
inline ::std::string* tbGmCtrlGiveCtrlData::release_create_date() {
  clear_has_create_date();
  if (create_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = create_date_;
    create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbGmCtrlGiveCtrlData::set_allocated_create_date(::std::string* create_date) {
  if (create_date_ != &::google::protobuf::internal::kEmptyString) {
    delete create_date_;
  }
  if (create_date) {
    set_has_create_date();
    create_date_ = create_date;
  } else {
    clear_has_create_date();
    create_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 control_type = 5;
inline bool tbGmCtrlGiveCtrlData::has_control_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_control_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_control_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbGmCtrlGiveCtrlData::clear_control_type() {
  control_type_ = 0u;
  clear_has_control_type();
}
inline ::google::protobuf::uint32 tbGmCtrlGiveCtrlData::control_type() const {
  return control_type_;
}
inline void tbGmCtrlGiveCtrlData::set_control_type(::google::protobuf::uint32 value) {
  set_has_control_type();
  control_type_ = value;
}

// optional uint64 start_time = 6;
inline bool tbGmCtrlGiveCtrlData::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbGmCtrlGiveCtrlData::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 tbGmCtrlGiveCtrlData::start_time() const {
  return start_time_;
}
inline void tbGmCtrlGiveCtrlData::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional uint64 end_time = 7;
inline bool tbGmCtrlGiveCtrlData::has_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbGmCtrlGiveCtrlData::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 tbGmCtrlGiveCtrlData::end_time() const {
  return end_time_;
}
inline void tbGmCtrlGiveCtrlData::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional uint32 game_id = 8;
inline bool tbGmCtrlGiveCtrlData::has_game_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_game_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbGmCtrlGiveCtrlData::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
inline ::google::protobuf::uint32 tbGmCtrlGiveCtrlData::game_id() const {
  return game_id_;
}
inline void tbGmCtrlGiveCtrlData::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
}

// optional uint32 state = 9;
inline bool tbGmCtrlGiveCtrlData::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbGmCtrlGiveCtrlData::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 tbGmCtrlGiveCtrlData::state() const {
  return state_;
}
inline void tbGmCtrlGiveCtrlData::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 jackpot_type = 10;
inline bool tbGmCtrlGiveCtrlData::has_jackpot_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_jackpot_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_jackpot_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbGmCtrlGiveCtrlData::clear_jackpot_type() {
  jackpot_type_ = 0;
  clear_has_jackpot_type();
}
inline ::google::protobuf::int32 tbGmCtrlGiveCtrlData::jackpot_type() const {
  return jackpot_type_;
}
inline void tbGmCtrlGiveCtrlData::set_jackpot_type(::google::protobuf::int32 value) {
  set_has_jackpot_type();
  jackpot_type_ = value;
}

// optional float jackpot_rate = 11;
inline bool tbGmCtrlGiveCtrlData::has_jackpot_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_jackpot_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_jackpot_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbGmCtrlGiveCtrlData::clear_jackpot_rate() {
  jackpot_rate_ = 0;
  clear_has_jackpot_rate();
}
inline float tbGmCtrlGiveCtrlData::jackpot_rate() const {
  return jackpot_rate_;
}
inline void tbGmCtrlGiveCtrlData::set_jackpot_rate(float value) {
  set_has_jackpot_rate();
  jackpot_rate_ = value;
}

// optional uint64 jackpot_jetton = 12;
inline bool tbGmCtrlGiveCtrlData::has_jackpot_jetton() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tbGmCtrlGiveCtrlData::set_has_jackpot_jetton() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tbGmCtrlGiveCtrlData::clear_has_jackpot_jetton() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tbGmCtrlGiveCtrlData::clear_jackpot_jetton() {
  jackpot_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_jackpot_jetton();
}
inline ::google::protobuf::uint64 tbGmCtrlGiveCtrlData::jackpot_jetton() const {
  return jackpot_jetton_;
}
inline void tbGmCtrlGiveCtrlData::set_jackpot_jetton(::google::protobuf::uint64 value) {
  set_has_jackpot_jetton();
  jackpot_jetton_ = value;
}

// -------------------------------------------------------------------

// Sheet_tbGmCtrlGiveCtrlData

// repeated .proto_ff.tbGmCtrlGiveCtrlData tbGmCtrlGiveCtrlData_List = 1;
inline int Sheet_tbGmCtrlGiveCtrlData::tbgmctrlgivectrldata_list_size() const {
  return tbgmctrlgivectrldata_list_.size();
}
inline void Sheet_tbGmCtrlGiveCtrlData::clear_tbgmctrlgivectrldata_list() {
  tbgmctrlgivectrldata_list_.Clear();
}
inline const ::proto_ff::tbGmCtrlGiveCtrlData& Sheet_tbGmCtrlGiveCtrlData::tbgmctrlgivectrldata_list(int index) const {
  return tbgmctrlgivectrldata_list_.Get(index);
}
inline ::proto_ff::tbGmCtrlGiveCtrlData* Sheet_tbGmCtrlGiveCtrlData::mutable_tbgmctrlgivectrldata_list(int index) {
  return tbgmctrlgivectrldata_list_.Mutable(index);
}
inline ::proto_ff::tbGmCtrlGiveCtrlData* Sheet_tbGmCtrlGiveCtrlData::add_tbgmctrlgivectrldata_list() {
  return tbgmctrlgivectrldata_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGmCtrlGiveCtrlData >&
Sheet_tbGmCtrlGiveCtrlData::tbgmctrlgivectrldata_list() const {
  return tbgmctrlgivectrldata_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::tbGmCtrlGiveCtrlData >*
Sheet_tbGmCtrlGiveCtrlData::mutable_tbgmctrlgivectrldata_list() {
  return &tbgmctrlgivectrldata_list_;
}

// -------------------------------------------------------------------

// LogVipRechargeRecord

// optional uint64 event_id = 1;
inline bool LogVipRechargeRecord::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogVipRechargeRecord::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogVipRechargeRecord::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogVipRechargeRecord::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogVipRechargeRecord::event_id() const {
  return event_id_;
}
inline void LogVipRechargeRecord::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogVipRechargeRecord::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogVipRechargeRecord::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogVipRechargeRecord::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogVipRechargeRecord::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogVipRechargeRecord::sequence() const {
  return sequence_;
}
inline void LogVipRechargeRecord::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogVipRechargeRecord::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogVipRechargeRecord::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogVipRechargeRecord::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogVipRechargeRecord::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogVipRechargeRecord::bus_name() const {
  return *bus_name_;
}
inline void LogVipRechargeRecord::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogVipRechargeRecord::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogVipRechargeRecord::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogVipRechargeRecord::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogVipRechargeRecord::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogVipRechargeRecord::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogVipRechargeRecord::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogVipRechargeRecord::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogVipRechargeRecord::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogVipRechargeRecord::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogVipRechargeRecord::event_time() const {
  return *event_time_;
}
inline void LogVipRechargeRecord::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogVipRechargeRecord::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogVipRechargeRecord::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogVipRechargeRecord::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogVipRechargeRecord::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogVipRechargeRecord::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogVipRechargeRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogVipRechargeRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogVipRechargeRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogVipRechargeRecord::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogVipRechargeRecord::user_id() const {
  return user_id_;
}
inline void LogVipRechargeRecord::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogVipRechargeRecord::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogVipRechargeRecord::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogVipRechargeRecord::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogVipRechargeRecord::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogVipRechargeRecord::user_name() const {
  return *user_name_;
}
inline void LogVipRechargeRecord::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogVipRechargeRecord::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogVipRechargeRecord::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogVipRechargeRecord::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogVipRechargeRecord::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogVipRechargeRecord::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 amount = 20;
inline bool LogVipRechargeRecord::has_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogVipRechargeRecord::set_has_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogVipRechargeRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogVipRechargeRecord::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 LogVipRechargeRecord::amount() const {
  return amount_;
}
inline void LogVipRechargeRecord::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint32 recharge_id = 21;
inline bool LogVipRechargeRecord::has_recharge_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogVipRechargeRecord::set_has_recharge_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogVipRechargeRecord::clear_has_recharge_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogVipRechargeRecord::clear_recharge_id() {
  recharge_id_ = 0u;
  clear_has_recharge_id();
}
inline ::google::protobuf::uint32 LogVipRechargeRecord::recharge_id() const {
  return recharge_id_;
}
inline void LogVipRechargeRecord::set_recharge_id(::google::protobuf::uint32 value) {
  set_has_recharge_id();
  recharge_id_ = value;
}

// optional string recharge_name = 22;
inline bool LogVipRechargeRecord::has_recharge_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogVipRechargeRecord::set_has_recharge_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogVipRechargeRecord::clear_has_recharge_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogVipRechargeRecord::clear_recharge_name() {
  if (recharge_name_ != &::google::protobuf::internal::kEmptyString) {
    recharge_name_->clear();
  }
  clear_has_recharge_name();
}
inline const ::std::string& LogVipRechargeRecord::recharge_name() const {
  return *recharge_name_;
}
inline void LogVipRechargeRecord::set_recharge_name(const ::std::string& value) {
  set_has_recharge_name();
  if (recharge_name_ == &::google::protobuf::internal::kEmptyString) {
    recharge_name_ = new ::std::string;
  }
  recharge_name_->assign(value);
}
inline void LogVipRechargeRecord::set_recharge_name(const char* value) {
  set_has_recharge_name();
  if (recharge_name_ == &::google::protobuf::internal::kEmptyString) {
    recharge_name_ = new ::std::string;
  }
  recharge_name_->assign(value);
}
inline void LogVipRechargeRecord::set_recharge_name(const char* value, size_t size) {
  set_has_recharge_name();
  if (recharge_name_ == &::google::protobuf::internal::kEmptyString) {
    recharge_name_ = new ::std::string;
  }
  recharge_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogVipRechargeRecord::mutable_recharge_name() {
  set_has_recharge_name();
  if (recharge_name_ == &::google::protobuf::internal::kEmptyString) {
    recharge_name_ = new ::std::string;
  }
  return recharge_name_;
}
inline ::std::string* LogVipRechargeRecord::release_recharge_name() {
  clear_has_recharge_name();
  if (recharge_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recharge_name_;
    recharge_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogVipRechargeRecord::set_allocated_recharge_name(::std::string* recharge_name) {
  if (recharge_name_ != &::google::protobuf::internal::kEmptyString) {
    delete recharge_name_;
  }
  if (recharge_name) {
    set_has_recharge_name();
    recharge_name_ = recharge_name;
  } else {
    clear_has_recharge_name();
    recharge_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 status = 23;
inline bool LogVipRechargeRecord::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogVipRechargeRecord::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogVipRechargeRecord::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogVipRechargeRecord::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 LogVipRechargeRecord::status() const {
  return status_;
}
inline void LogVipRechargeRecord::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// LogZhuangRecord

// optional uint64 event_id = 1;
inline bool LogZhuangRecord::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogZhuangRecord::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogZhuangRecord::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogZhuangRecord::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogZhuangRecord::event_id() const {
  return event_id_;
}
inline void LogZhuangRecord::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogZhuangRecord::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogZhuangRecord::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogZhuangRecord::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogZhuangRecord::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogZhuangRecord::sequence() const {
  return sequence_;
}
inline void LogZhuangRecord::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogZhuangRecord::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogZhuangRecord::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogZhuangRecord::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogZhuangRecord::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogZhuangRecord::bus_name() const {
  return *bus_name_;
}
inline void LogZhuangRecord::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogZhuangRecord::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogZhuangRecord::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogZhuangRecord::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogZhuangRecord::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogZhuangRecord::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogZhuangRecord::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogZhuangRecord::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogZhuangRecord::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogZhuangRecord::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogZhuangRecord::event_time() const {
  return *event_time_;
}
inline void LogZhuangRecord::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogZhuangRecord::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogZhuangRecord::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogZhuangRecord::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogZhuangRecord::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogZhuangRecord::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogZhuangRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogZhuangRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogZhuangRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogZhuangRecord::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogZhuangRecord::user_id() const {
  return user_id_;
}
inline void LogZhuangRecord::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogZhuangRecord::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogZhuangRecord::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogZhuangRecord::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogZhuangRecord::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogZhuangRecord::user_name() const {
  return *user_name_;
}
inline void LogZhuangRecord::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogZhuangRecord::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogZhuangRecord::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogZhuangRecord::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogZhuangRecord::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogZhuangRecord::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 amount = 20;
inline bool LogZhuangRecord::has_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogZhuangRecord::set_has_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogZhuangRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogZhuangRecord::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::int64 LogZhuangRecord::amount() const {
  return amount_;
}
inline void LogZhuangRecord::set_amount(::google::protobuf::int64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint64 status = 21;
inline bool LogZhuangRecord::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogZhuangRecord::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogZhuangRecord::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogZhuangRecord::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 LogZhuangRecord::status() const {
  return status_;
}
inline void LogZhuangRecord::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// LogRechargeOrder

// optional uint64 event_id = 1;
inline bool LogRechargeOrder::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRechargeOrder::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRechargeOrder::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRechargeOrder::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogRechargeOrder::event_id() const {
  return event_id_;
}
inline void LogRechargeOrder::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogRechargeOrder::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRechargeOrder::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRechargeOrder::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRechargeOrder::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogRechargeOrder::sequence() const {
  return sequence_;
}
inline void LogRechargeOrder::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogRechargeOrder::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRechargeOrder::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRechargeOrder::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRechargeOrder::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogRechargeOrder::bus_name() const {
  return *bus_name_;
}
inline void LogRechargeOrder::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogRechargeOrder::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogRechargeOrder::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRechargeOrder::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogRechargeOrder::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRechargeOrder::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogRechargeOrder::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRechargeOrder::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRechargeOrder::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRechargeOrder::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogRechargeOrder::event_time() const {
  return *event_time_;
}
inline void LogRechargeOrder::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogRechargeOrder::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogRechargeOrder::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRechargeOrder::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogRechargeOrder::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRechargeOrder::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogRechargeOrder::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRechargeOrder::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRechargeOrder::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRechargeOrder::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogRechargeOrder::user_id() const {
  return user_id_;
}
inline void LogRechargeOrder::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogRechargeOrder::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogRechargeOrder::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogRechargeOrder::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogRechargeOrder::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogRechargeOrder::user_name() const {
  return *user_name_;
}
inline void LogRechargeOrder::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogRechargeOrder::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogRechargeOrder::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRechargeOrder::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogRechargeOrder::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRechargeOrder::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string order_id = 20;
inline bool LogRechargeOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogRechargeOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogRechargeOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogRechargeOrder::clear_order_id() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    order_id_->clear();
  }
  clear_has_order_id();
}
inline const ::std::string& LogRechargeOrder::order_id() const {
  return *order_id_;
}
inline void LogRechargeOrder::set_order_id(const ::std::string& value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void LogRechargeOrder::set_order_id(const char* value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void LogRechargeOrder::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRechargeOrder::mutable_order_id() {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  return order_id_;
}
inline ::std::string* LogRechargeOrder::release_order_id() {
  clear_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_id_;
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRechargeOrder::set_allocated_order_id(::std::string* order_id) {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (order_id) {
    set_has_order_id();
    order_id_ = order_id;
  } else {
    clear_has_order_id();
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pay_id = 21;
inline bool LogRechargeOrder::has_pay_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogRechargeOrder::set_has_pay_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogRechargeOrder::clear_has_pay_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogRechargeOrder::clear_pay_id() {
  pay_id_ = 0u;
  clear_has_pay_id();
}
inline ::google::protobuf::uint32 LogRechargeOrder::pay_id() const {
  return pay_id_;
}
inline void LogRechargeOrder::set_pay_id(::google::protobuf::uint32 value) {
  set_has_pay_id();
  pay_id_ = value;
}

// optional string pay_channel = 22;
inline bool LogRechargeOrder::has_pay_channel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogRechargeOrder::set_has_pay_channel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogRechargeOrder::clear_has_pay_channel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogRechargeOrder::clear_pay_channel() {
  if (pay_channel_ != &::google::protobuf::internal::kEmptyString) {
    pay_channel_->clear();
  }
  clear_has_pay_channel();
}
inline const ::std::string& LogRechargeOrder::pay_channel() const {
  return *pay_channel_;
}
inline void LogRechargeOrder::set_pay_channel(const ::std::string& value) {
  set_has_pay_channel();
  if (pay_channel_ == &::google::protobuf::internal::kEmptyString) {
    pay_channel_ = new ::std::string;
  }
  pay_channel_->assign(value);
}
inline void LogRechargeOrder::set_pay_channel(const char* value) {
  set_has_pay_channel();
  if (pay_channel_ == &::google::protobuf::internal::kEmptyString) {
    pay_channel_ = new ::std::string;
  }
  pay_channel_->assign(value);
}
inline void LogRechargeOrder::set_pay_channel(const char* value, size_t size) {
  set_has_pay_channel();
  if (pay_channel_ == &::google::protobuf::internal::kEmptyString) {
    pay_channel_ = new ::std::string;
  }
  pay_channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRechargeOrder::mutable_pay_channel() {
  set_has_pay_channel();
  if (pay_channel_ == &::google::protobuf::internal::kEmptyString) {
    pay_channel_ = new ::std::string;
  }
  return pay_channel_;
}
inline ::std::string* LogRechargeOrder::release_pay_channel() {
  clear_has_pay_channel();
  if (pay_channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pay_channel_;
    pay_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRechargeOrder::set_allocated_pay_channel(::std::string* pay_channel) {
  if (pay_channel_ != &::google::protobuf::internal::kEmptyString) {
    delete pay_channel_;
  }
  if (pay_channel) {
    set_has_pay_channel();
    pay_channel_ = pay_channel;
  } else {
    clear_has_pay_channel();
    pay_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pay_type = 23;
inline bool LogRechargeOrder::has_pay_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogRechargeOrder::set_has_pay_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogRechargeOrder::clear_has_pay_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogRechargeOrder::clear_pay_type() {
  pay_type_ = 0u;
  clear_has_pay_type();
}
inline ::google::protobuf::uint32 LogRechargeOrder::pay_type() const {
  return pay_type_;
}
inline void LogRechargeOrder::set_pay_type(::google::protobuf::uint32 value) {
  set_has_pay_type();
  pay_type_ = value;
}

// optional string ch_order_id = 24;
inline bool LogRechargeOrder::has_ch_order_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogRechargeOrder::set_has_ch_order_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogRechargeOrder::clear_has_ch_order_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogRechargeOrder::clear_ch_order_id() {
  if (ch_order_id_ != &::google::protobuf::internal::kEmptyString) {
    ch_order_id_->clear();
  }
  clear_has_ch_order_id();
}
inline const ::std::string& LogRechargeOrder::ch_order_id() const {
  return *ch_order_id_;
}
inline void LogRechargeOrder::set_ch_order_id(const ::std::string& value) {
  set_has_ch_order_id();
  if (ch_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ch_order_id_ = new ::std::string;
  }
  ch_order_id_->assign(value);
}
inline void LogRechargeOrder::set_ch_order_id(const char* value) {
  set_has_ch_order_id();
  if (ch_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ch_order_id_ = new ::std::string;
  }
  ch_order_id_->assign(value);
}
inline void LogRechargeOrder::set_ch_order_id(const char* value, size_t size) {
  set_has_ch_order_id();
  if (ch_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ch_order_id_ = new ::std::string;
  }
  ch_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRechargeOrder::mutable_ch_order_id() {
  set_has_ch_order_id();
  if (ch_order_id_ == &::google::protobuf::internal::kEmptyString) {
    ch_order_id_ = new ::std::string;
  }
  return ch_order_id_;
}
inline ::std::string* LogRechargeOrder::release_ch_order_id() {
  clear_has_ch_order_id();
  if (ch_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ch_order_id_;
    ch_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRechargeOrder::set_allocated_ch_order_id(::std::string* ch_order_id) {
  if (ch_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ch_order_id_;
  }
  if (ch_order_id) {
    set_has_ch_order_id();
    ch_order_id_ = ch_order_id;
  } else {
    clear_has_ch_order_id();
    ch_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 state = 25;
inline bool LogRechargeOrder::has_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogRechargeOrder::set_has_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogRechargeOrder::clear_has_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogRechargeOrder::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 LogRechargeOrder::state() const {
  return state_;
}
inline void LogRechargeOrder::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// LogGiveMoneyRecord

// optional uint64 event_id = 1;
inline bool LogGiveMoneyRecord::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogGiveMoneyRecord::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogGiveMoneyRecord::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogGiveMoneyRecord::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogGiveMoneyRecord::event_id() const {
  return event_id_;
}
inline void LogGiveMoneyRecord::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogGiveMoneyRecord::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogGiveMoneyRecord::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogGiveMoneyRecord::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogGiveMoneyRecord::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogGiveMoneyRecord::sequence() const {
  return sequence_;
}
inline void LogGiveMoneyRecord::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogGiveMoneyRecord::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogGiveMoneyRecord::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogGiveMoneyRecord::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogGiveMoneyRecord::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogGiveMoneyRecord::bus_name() const {
  return *bus_name_;
}
inline void LogGiveMoneyRecord::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogGiveMoneyRecord::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogGiveMoneyRecord::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGiveMoneyRecord::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogGiveMoneyRecord::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGiveMoneyRecord::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogGiveMoneyRecord::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogGiveMoneyRecord::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogGiveMoneyRecord::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogGiveMoneyRecord::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogGiveMoneyRecord::event_time() const {
  return *event_time_;
}
inline void LogGiveMoneyRecord::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogGiveMoneyRecord::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogGiveMoneyRecord::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGiveMoneyRecord::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogGiveMoneyRecord::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGiveMoneyRecord::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogGiveMoneyRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogGiveMoneyRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogGiveMoneyRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogGiveMoneyRecord::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogGiveMoneyRecord::user_id() const {
  return user_id_;
}
inline void LogGiveMoneyRecord::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogGiveMoneyRecord::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogGiveMoneyRecord::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogGiveMoneyRecord::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogGiveMoneyRecord::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogGiveMoneyRecord::user_name() const {
  return *user_name_;
}
inline void LogGiveMoneyRecord::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogGiveMoneyRecord::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogGiveMoneyRecord::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogGiveMoneyRecord::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogGiveMoneyRecord::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogGiveMoneyRecord::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 type = 20;
inline bool LogGiveMoneyRecord::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogGiveMoneyRecord::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogGiveMoneyRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogGiveMoneyRecord::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LogGiveMoneyRecord::type() const {
  return type_;
}
inline void LogGiveMoneyRecord::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint64 amount = 21;
inline bool LogGiveMoneyRecord::has_amount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogGiveMoneyRecord::set_has_amount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogGiveMoneyRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogGiveMoneyRecord::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 LogGiveMoneyRecord::amount() const {
  return amount_;
}
inline void LogGiveMoneyRecord::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint64 status = 22;
inline bool LogGiveMoneyRecord::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogGiveMoneyRecord::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogGiveMoneyRecord::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogGiveMoneyRecord::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 LogGiveMoneyRecord::status() const {
  return status_;
}
inline void LogGiveMoneyRecord::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// tbLogSystemDay

// optional string date_id = 1;
inline bool tbLogSystemDay::has_date_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbLogSystemDay::set_has_date_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbLogSystemDay::clear_has_date_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbLogSystemDay::clear_date_id() {
  if (date_id_ != &::google::protobuf::internal::kEmptyString) {
    date_id_->clear();
  }
  clear_has_date_id();
}
inline const ::std::string& tbLogSystemDay::date_id() const {
  return *date_id_;
}
inline void tbLogSystemDay::set_date_id(const ::std::string& value) {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  date_id_->assign(value);
}
inline void tbLogSystemDay::set_date_id(const char* value) {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  date_id_->assign(value);
}
inline void tbLogSystemDay::set_date_id(const char* value, size_t size) {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  date_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbLogSystemDay::mutable_date_id() {
  set_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    date_id_ = new ::std::string;
  }
  return date_id_;
}
inline ::std::string* tbLogSystemDay::release_date_id() {
  clear_has_date_id();
  if (date_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_id_;
    date_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbLogSystemDay::set_allocated_date_id(::std::string* date_id) {
  if (date_id_ != &::google::protobuf::internal::kEmptyString) {
    delete date_id_;
  }
  if (date_id) {
    set_has_date_id();
    date_id_ = date_id;
  } else {
    clear_has_date_id();
    date_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 active_player = 2;
inline bool tbLogSystemDay::has_active_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbLogSystemDay::set_has_active_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbLogSystemDay::clear_has_active_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbLogSystemDay::clear_active_player() {
  active_player_ = 0u;
  clear_has_active_player();
}
inline ::google::protobuf::uint32 tbLogSystemDay::active_player() const {
  return active_player_;
}
inline void tbLogSystemDay::set_active_player(::google::protobuf::uint32 value) {
  set_has_active_player();
  active_player_ = value;
}

// optional uint32 login_count = 3;
inline bool tbLogSystemDay::has_login_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbLogSystemDay::set_has_login_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbLogSystemDay::clear_has_login_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbLogSystemDay::clear_login_count() {
  login_count_ = 0u;
  clear_has_login_count();
}
inline ::google::protobuf::uint32 tbLogSystemDay::login_count() const {
  return login_count_;
}
inline void tbLogSystemDay::set_login_count(::google::protobuf::uint32 value) {
  set_has_login_count();
  login_count_ = value;
}

// optional uint32 valid_player = 4;
inline bool tbLogSystemDay::has_valid_player() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbLogSystemDay::set_has_valid_player() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbLogSystemDay::clear_has_valid_player() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbLogSystemDay::clear_valid_player() {
  valid_player_ = 0u;
  clear_has_valid_player();
}
inline ::google::protobuf::uint32 tbLogSystemDay::valid_player() const {
  return valid_player_;
}
inline void tbLogSystemDay::set_valid_player(::google::protobuf::uint32 value) {
  set_has_valid_player();
  valid_player_ = value;
}

// optional uint32 new_player = 5;
inline bool tbLogSystemDay::has_new_player() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbLogSystemDay::set_has_new_player() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbLogSystemDay::clear_has_new_player() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbLogSystemDay::clear_new_player() {
  new_player_ = 0u;
  clear_has_new_player();
}
inline ::google::protobuf::uint32 tbLogSystemDay::new_player() const {
  return new_player_;
}
inline void tbLogSystemDay::set_new_player(::google::protobuf::uint32 value) {
  set_has_new_player();
  new_player_ = value;
}

// optional uint32 pay_player = 6;
inline bool tbLogSystemDay::has_pay_player() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbLogSystemDay::set_has_pay_player() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbLogSystemDay::clear_has_pay_player() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbLogSystemDay::clear_pay_player() {
  pay_player_ = 0u;
  clear_has_pay_player();
}
inline ::google::protobuf::uint32 tbLogSystemDay::pay_player() const {
  return pay_player_;
}
inline void tbLogSystemDay::set_pay_player(::google::protobuf::uint32 value) {
  set_has_pay_player();
  pay_player_ = value;
}

// optional uint32 pay_times = 7;
inline bool tbLogSystemDay::has_pay_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbLogSystemDay::set_has_pay_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbLogSystemDay::clear_has_pay_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbLogSystemDay::clear_pay_times() {
  pay_times_ = 0u;
  clear_has_pay_times();
}
inline ::google::protobuf::uint32 tbLogSystemDay::pay_times() const {
  return pay_times_;
}
inline void tbLogSystemDay::set_pay_times(::google::protobuf::uint32 value) {
  set_has_pay_times();
  pay_times_ = value;
}

// optional uint64 pay_all = 8;
inline bool tbLogSystemDay::has_pay_all() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tbLogSystemDay::set_has_pay_all() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tbLogSystemDay::clear_has_pay_all() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tbLogSystemDay::clear_pay_all() {
  pay_all_ = GOOGLE_ULONGLONG(0);
  clear_has_pay_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::pay_all() const {
  return pay_all_;
}
inline void tbLogSystemDay::set_pay_all(::google::protobuf::uint64 value) {
  set_has_pay_all();
  pay_all_ = value;
}

// optional uint32 new_pay_player = 9;
inline bool tbLogSystemDay::has_new_pay_player() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tbLogSystemDay::set_has_new_pay_player() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tbLogSystemDay::clear_has_new_pay_player() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tbLogSystemDay::clear_new_pay_player() {
  new_pay_player_ = 0u;
  clear_has_new_pay_player();
}
inline ::google::protobuf::uint32 tbLogSystemDay::new_pay_player() const {
  return new_pay_player_;
}
inline void tbLogSystemDay::set_new_pay_player(::google::protobuf::uint32 value) {
  set_has_new_pay_player();
  new_pay_player_ = value;
}

// optional uint32 new_pay_all = 100;
inline bool tbLogSystemDay::has_new_pay_all() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tbLogSystemDay::set_has_new_pay_all() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tbLogSystemDay::clear_has_new_pay_all() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tbLogSystemDay::clear_new_pay_all() {
  new_pay_all_ = 0u;
  clear_has_new_pay_all();
}
inline ::google::protobuf::uint32 tbLogSystemDay::new_pay_all() const {
  return new_pay_all_;
}
inline void tbLogSystemDay::set_new_pay_all(::google::protobuf::uint32 value) {
  set_has_new_pay_all();
  new_pay_all_ = value;
}

// optional uint64 commission_all = 10;
inline bool tbLogSystemDay::has_commission_all() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tbLogSystemDay::set_has_commission_all() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tbLogSystemDay::clear_has_commission_all() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tbLogSystemDay::clear_commission_all() {
  commission_all_ = GOOGLE_ULONGLONG(0);
  clear_has_commission_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::commission_all() const {
  return commission_all_;
}
inline void tbLogSystemDay::set_commission_all(::google::protobuf::uint64 value) {
  set_has_commission_all();
  commission_all_ = value;
}

// optional uint64 all_fee = 11;
inline bool tbLogSystemDay::has_all_fee() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tbLogSystemDay::set_has_all_fee() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tbLogSystemDay::clear_has_all_fee() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tbLogSystemDay::clear_all_fee() {
  all_fee_ = GOOGLE_ULONGLONG(0);
  clear_has_all_fee();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_fee() const {
  return all_fee_;
}
inline void tbLogSystemDay::set_all_fee(::google::protobuf::uint64 value) {
  set_has_all_fee();
  all_fee_ = value;
}

// optional uint64 all_pour = 12;
inline bool tbLogSystemDay::has_all_pour() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tbLogSystemDay::set_has_all_pour() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tbLogSystemDay::clear_has_all_pour() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tbLogSystemDay::clear_all_pour() {
  all_pour_ = GOOGLE_ULONGLONG(0);
  clear_has_all_pour();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_pour() const {
  return all_pour_;
}
inline void tbLogSystemDay::set_all_pour(::google::protobuf::uint64 value) {
  set_has_all_pour();
  all_pour_ = value;
}

// optional int64 all_win = 13;
inline bool tbLogSystemDay::has_all_win() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tbLogSystemDay::set_has_all_win() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tbLogSystemDay::clear_has_all_win() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tbLogSystemDay::clear_all_win() {
  all_win_ = GOOGLE_LONGLONG(0);
  clear_has_all_win();
}
inline ::google::protobuf::int64 tbLogSystemDay::all_win() const {
  return all_win_;
}
inline void tbLogSystemDay::set_all_win(::google::protobuf::int64 value) {
  set_has_all_win();
  all_win_ = value;
}

// optional uint64 jetton_init = 14;
inline bool tbLogSystemDay::has_jetton_init() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tbLogSystemDay::set_has_jetton_init() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tbLogSystemDay::clear_has_jetton_init() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tbLogSystemDay::clear_jetton_init() {
  jetton_init_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton_init();
}
inline ::google::protobuf::uint64 tbLogSystemDay::jetton_init() const {
  return jetton_init_;
}
inline void tbLogSystemDay::set_jetton_init(::google::protobuf::uint64 value) {
  set_has_jetton_init();
  jetton_init_ = value;
}

// optional uint64 all_draw = 15;
inline bool tbLogSystemDay::has_all_draw() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tbLogSystemDay::set_has_all_draw() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tbLogSystemDay::clear_has_all_draw() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tbLogSystemDay::clear_all_draw() {
  all_draw_ = GOOGLE_ULONGLONG(0);
  clear_has_all_draw();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_draw() const {
  return all_draw_;
}
inline void tbLogSystemDay::set_all_draw(::google::protobuf::uint64 value) {
  set_has_all_draw();
  all_draw_ = value;
}

// optional uint64 jetton_in = 16;
inline bool tbLogSystemDay::has_jetton_in() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tbLogSystemDay::set_has_jetton_in() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tbLogSystemDay::clear_has_jetton_in() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tbLogSystemDay::clear_jetton_in() {
  jetton_in_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton_in();
}
inline ::google::protobuf::uint64 tbLogSystemDay::jetton_in() const {
  return jetton_in_;
}
inline void tbLogSystemDay::set_jetton_in(::google::protobuf::uint64 value) {
  set_has_jetton_in();
  jetton_in_ = value;
}

// optional uint64 jetton_out = 17;
inline bool tbLogSystemDay::has_jetton_out() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tbLogSystemDay::set_has_jetton_out() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tbLogSystemDay::clear_has_jetton_out() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tbLogSystemDay::clear_jetton_out() {
  jetton_out_ = GOOGLE_ULONGLONG(0);
  clear_has_jetton_out();
}
inline ::google::protobuf::uint64 tbLogSystemDay::jetton_out() const {
  return jetton_out_;
}
inline void tbLogSystemDay::set_jetton_out(::google::protobuf::uint64 value) {
  set_has_jetton_out();
  jetton_out_ = value;
}

// optional uint64 sys_award = 18;
inline bool tbLogSystemDay::has_sys_award() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tbLogSystemDay::set_has_sys_award() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tbLogSystemDay::clear_has_sys_award() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tbLogSystemDay::clear_sys_award() {
  sys_award_ = GOOGLE_ULONGLONG(0);
  clear_has_sys_award();
}
inline ::google::protobuf::uint64 tbLogSystemDay::sys_award() const {
  return sys_award_;
}
inline void tbLogSystemDay::set_sys_award(::google::protobuf::uint64 value) {
  set_has_sys_award();
  sys_award_ = value;
}

// optional uint64 player_jetton = 19;
inline bool tbLogSystemDay::has_player_jetton() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void tbLogSystemDay::set_has_player_jetton() {
  _has_bits_[0] |= 0x00080000u;
}
inline void tbLogSystemDay::clear_has_player_jetton() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void tbLogSystemDay::clear_player_jetton() {
  player_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_player_jetton();
}
inline ::google::protobuf::uint64 tbLogSystemDay::player_jetton() const {
  return player_jetton_;
}
inline void tbLogSystemDay::set_player_jetton(::google::protobuf::uint64 value) {
  set_has_player_jetton();
  player_jetton_ = value;
}

// optional uint64 trd_pay_all = 20;
inline bool tbLogSystemDay::has_trd_pay_all() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tbLogSystemDay::set_has_trd_pay_all() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tbLogSystemDay::clear_has_trd_pay_all() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tbLogSystemDay::clear_trd_pay_all() {
  trd_pay_all_ = GOOGLE_ULONGLONG(0);
  clear_has_trd_pay_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::trd_pay_all() const {
  return trd_pay_all_;
}
inline void tbLogSystemDay::set_trd_pay_all(::google::protobuf::uint64 value) {
  set_has_trd_pay_all();
  trd_pay_all_ = value;
}

// optional uint64 vip_pay_all = 21;
inline bool tbLogSystemDay::has_vip_pay_all() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void tbLogSystemDay::set_has_vip_pay_all() {
  _has_bits_[0] |= 0x00200000u;
}
inline void tbLogSystemDay::clear_has_vip_pay_all() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void tbLogSystemDay::clear_vip_pay_all() {
  vip_pay_all_ = GOOGLE_ULONGLONG(0);
  clear_has_vip_pay_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::vip_pay_all() const {
  return vip_pay_all_;
}
inline void tbLogSystemDay::set_vip_pay_all(::google::protobuf::uint64 value) {
  set_has_vip_pay_all();
  vip_pay_all_ = value;
}

// optional uint64 zhuangzhang_all = 22;
inline bool tbLogSystemDay::has_zhuangzhang_all() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tbLogSystemDay::set_has_zhuangzhang_all() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tbLogSystemDay::clear_has_zhuangzhang_all() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tbLogSystemDay::clear_zhuangzhang_all() {
  zhuangzhang_all_ = GOOGLE_ULONGLONG(0);
  clear_has_zhuangzhang_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::zhuangzhang_all() const {
  return zhuangzhang_all_;
}
inline void tbLogSystemDay::set_zhuangzhang_all(::google::protobuf::uint64 value) {
  set_has_zhuangzhang_all();
  zhuangzhang_all_ = value;
}

// optional uint64 activity_award = 23;
inline bool tbLogSystemDay::has_activity_award() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tbLogSystemDay::set_has_activity_award() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tbLogSystemDay::clear_has_activity_award() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tbLogSystemDay::clear_activity_award() {
  activity_award_ = GOOGLE_ULONGLONG(0);
  clear_has_activity_award();
}
inline ::google::protobuf::uint64 tbLogSystemDay::activity_award() const {
  return activity_award_;
}
inline void tbLogSystemDay::set_activity_award(::google::protobuf::uint64 value) {
  set_has_activity_award();
  activity_award_ = value;
}

// optional uint64 all_bank_jetton = 25;
inline bool tbLogSystemDay::has_all_bank_jetton() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void tbLogSystemDay::set_has_all_bank_jetton() {
  _has_bits_[0] |= 0x01000000u;
}
inline void tbLogSystemDay::clear_has_all_bank_jetton() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void tbLogSystemDay::clear_all_bank_jetton() {
  all_bank_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_all_bank_jetton();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_bank_jetton() const {
  return all_bank_jetton_;
}
inline void tbLogSystemDay::set_all_bank_jetton(::google::protobuf::uint64 value) {
  set_has_all_bank_jetton();
  all_bank_jetton_ = value;
}

// optional uint64 freeze_jetton = 26;
inline bool tbLogSystemDay::has_freeze_jetton() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void tbLogSystemDay::set_has_freeze_jetton() {
  _has_bits_[0] |= 0x02000000u;
}
inline void tbLogSystemDay::clear_has_freeze_jetton() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void tbLogSystemDay::clear_freeze_jetton() {
  freeze_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_freeze_jetton();
}
inline ::google::protobuf::uint64 tbLogSystemDay::freeze_jetton() const {
  return freeze_jetton_;
}
inline void tbLogSystemDay::set_freeze_jetton(::google::protobuf::uint64 value) {
  set_has_freeze_jetton();
  freeze_jetton_ = value;
}

// optional uint64 all_jetton = 27;
inline bool tbLogSystemDay::has_all_jetton() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void tbLogSystemDay::set_has_all_jetton() {
  _has_bits_[0] |= 0x04000000u;
}
inline void tbLogSystemDay::clear_has_all_jetton() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void tbLogSystemDay::clear_all_jetton() {
  all_jetton_ = GOOGLE_ULONGLONG(0);
  clear_has_all_jetton();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_jetton() const {
  return all_jetton_;
}
inline void tbLogSystemDay::set_all_jetton(::google::protobuf::uint64 value) {
  set_has_all_jetton();
  all_jetton_ = value;
}

// optional uint64 all_player = 28;
inline bool tbLogSystemDay::has_all_player() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void tbLogSystemDay::set_has_all_player() {
  _has_bits_[0] |= 0x08000000u;
}
inline void tbLogSystemDay::clear_has_all_player() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void tbLogSystemDay::clear_all_player() {
  all_player_ = GOOGLE_ULONGLONG(0);
  clear_has_all_player();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_player() const {
  return all_player_;
}
inline void tbLogSystemDay::set_all_player(::google::protobuf::uint64 value) {
  set_has_all_player();
  all_player_ = value;
}

// optional uint64 active_seven = 29;
inline bool tbLogSystemDay::has_active_seven() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void tbLogSystemDay::set_has_active_seven() {
  _has_bits_[0] |= 0x10000000u;
}
inline void tbLogSystemDay::clear_has_active_seven() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void tbLogSystemDay::clear_active_seven() {
  active_seven_ = GOOGLE_ULONGLONG(0);
  clear_has_active_seven();
}
inline ::google::protobuf::uint64 tbLogSystemDay::active_seven() const {
  return active_seven_;
}
inline void tbLogSystemDay::set_active_seven(::google::protobuf::uint64 value) {
  set_has_active_seven();
  active_seven_ = value;
}

// optional uint64 active_thirty = 30;
inline bool tbLogSystemDay::has_active_thirty() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void tbLogSystemDay::set_has_active_thirty() {
  _has_bits_[0] |= 0x20000000u;
}
inline void tbLogSystemDay::clear_has_active_thirty() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void tbLogSystemDay::clear_active_thirty() {
  active_thirty_ = GOOGLE_ULONGLONG(0);
  clear_has_active_thirty();
}
inline ::google::protobuf::uint64 tbLogSystemDay::active_thirty() const {
  return active_thirty_;
}
inline void tbLogSystemDay::set_active_thirty(::google::protobuf::uint64 value) {
  set_has_active_thirty();
  active_thirty_ = value;
}

// optional uint64 pour_day_all = 31;
inline bool tbLogSystemDay::has_pour_day_all() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void tbLogSystemDay::set_has_pour_day_all() {
  _has_bits_[0] |= 0x40000000u;
}
inline void tbLogSystemDay::clear_has_pour_day_all() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void tbLogSystemDay::clear_pour_day_all() {
  pour_day_all_ = GOOGLE_ULONGLONG(0);
  clear_has_pour_day_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::pour_day_all() const {
  return pour_day_all_;
}
inline void tbLogSystemDay::set_pour_day_all(::google::protobuf::uint64 value) {
  set_has_pour_day_all();
  pour_day_all_ = value;
}

// optional uint64 pour_week_all = 32;
inline bool tbLogSystemDay::has_pour_week_all() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void tbLogSystemDay::set_has_pour_week_all() {
  _has_bits_[0] |= 0x80000000u;
}
inline void tbLogSystemDay::clear_has_pour_week_all() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void tbLogSystemDay::clear_pour_week_all() {
  pour_week_all_ = GOOGLE_ULONGLONG(0);
  clear_has_pour_week_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::pour_week_all() const {
  return pour_week_all_;
}
inline void tbLogSystemDay::set_pour_week_all(::google::protobuf::uint64 value) {
  set_has_pour_week_all();
  pour_week_all_ = value;
}

// optional uint64 pour_month_all = 33;
inline bool tbLogSystemDay::has_pour_month_all() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void tbLogSystemDay::set_has_pour_month_all() {
  _has_bits_[1] |= 0x00000001u;
}
inline void tbLogSystemDay::clear_has_pour_month_all() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void tbLogSystemDay::clear_pour_month_all() {
  pour_month_all_ = GOOGLE_ULONGLONG(0);
  clear_has_pour_month_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::pour_month_all() const {
  return pour_month_all_;
}
inline void tbLogSystemDay::set_pour_month_all(::google::protobuf::uint64 value) {
  set_has_pour_month_all();
  pour_month_all_ = value;
}

// optional int64 sys_win_day = 34;
inline bool tbLogSystemDay::has_sys_win_day() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void tbLogSystemDay::set_has_sys_win_day() {
  _has_bits_[1] |= 0x00000002u;
}
inline void tbLogSystemDay::clear_has_sys_win_day() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void tbLogSystemDay::clear_sys_win_day() {
  sys_win_day_ = GOOGLE_LONGLONG(0);
  clear_has_sys_win_day();
}
inline ::google::protobuf::int64 tbLogSystemDay::sys_win_day() const {
  return sys_win_day_;
}
inline void tbLogSystemDay::set_sys_win_day(::google::protobuf::int64 value) {
  set_has_sys_win_day();
  sys_win_day_ = value;
}

// optional int64 sys_win_week = 35;
inline bool tbLogSystemDay::has_sys_win_week() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void tbLogSystemDay::set_has_sys_win_week() {
  _has_bits_[1] |= 0x00000004u;
}
inline void tbLogSystemDay::clear_has_sys_win_week() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void tbLogSystemDay::clear_sys_win_week() {
  sys_win_week_ = GOOGLE_LONGLONG(0);
  clear_has_sys_win_week();
}
inline ::google::protobuf::int64 tbLogSystemDay::sys_win_week() const {
  return sys_win_week_;
}
inline void tbLogSystemDay::set_sys_win_week(::google::protobuf::int64 value) {
  set_has_sys_win_week();
  sys_win_week_ = value;
}

// optional int64 sys_win_month = 36;
inline bool tbLogSystemDay::has_sys_win_month() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void tbLogSystemDay::set_has_sys_win_month() {
  _has_bits_[1] |= 0x00000008u;
}
inline void tbLogSystemDay::clear_has_sys_win_month() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void tbLogSystemDay::clear_sys_win_month() {
  sys_win_month_ = GOOGLE_LONGLONG(0);
  clear_has_sys_win_month();
}
inline ::google::protobuf::int64 tbLogSystemDay::sys_win_month() const {
  return sys_win_month_;
}
inline void tbLogSystemDay::set_sys_win_month(::google::protobuf::int64 value) {
  set_has_sys_win_month();
  sys_win_month_ = value;
}

// optional uint64 fee_day = 37;
inline bool tbLogSystemDay::has_fee_day() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void tbLogSystemDay::set_has_fee_day() {
  _has_bits_[1] |= 0x00000010u;
}
inline void tbLogSystemDay::clear_has_fee_day() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void tbLogSystemDay::clear_fee_day() {
  fee_day_ = GOOGLE_ULONGLONG(0);
  clear_has_fee_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::fee_day() const {
  return fee_day_;
}
inline void tbLogSystemDay::set_fee_day(::google::protobuf::uint64 value) {
  set_has_fee_day();
  fee_day_ = value;
}

// optional uint64 fee_week = 38;
inline bool tbLogSystemDay::has_fee_week() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void tbLogSystemDay::set_has_fee_week() {
  _has_bits_[1] |= 0x00000020u;
}
inline void tbLogSystemDay::clear_has_fee_week() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void tbLogSystemDay::clear_fee_week() {
  fee_week_ = GOOGLE_ULONGLONG(0);
  clear_has_fee_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::fee_week() const {
  return fee_week_;
}
inline void tbLogSystemDay::set_fee_week(::google::protobuf::uint64 value) {
  set_has_fee_week();
  fee_week_ = value;
}

// optional uint64 fee_month = 39;
inline bool tbLogSystemDay::has_fee_month() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void tbLogSystemDay::set_has_fee_month() {
  _has_bits_[1] |= 0x00000040u;
}
inline void tbLogSystemDay::clear_has_fee_month() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void tbLogSystemDay::clear_fee_month() {
  fee_month_ = GOOGLE_ULONGLONG(0);
  clear_has_fee_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::fee_month() const {
  return fee_month_;
}
inline void tbLogSystemDay::set_fee_month(::google::protobuf::uint64 value) {
  set_has_fee_month();
  fee_month_ = value;
}

// optional uint64 commision_all = 40;
inline bool tbLogSystemDay::has_commision_all() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void tbLogSystemDay::set_has_commision_all() {
  _has_bits_[1] |= 0x00000080u;
}
inline void tbLogSystemDay::clear_has_commision_all() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void tbLogSystemDay::clear_commision_all() {
  commision_all_ = GOOGLE_ULONGLONG(0);
  clear_has_commision_all();
}
inline ::google::protobuf::uint64 tbLogSystemDay::commision_all() const {
  return commision_all_;
}
inline void tbLogSystemDay::set_commision_all(::google::protobuf::uint64 value) {
  set_has_commision_all();
  commision_all_ = value;
}

// optional uint64 commision_take = 41;
inline bool tbLogSystemDay::has_commision_take() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void tbLogSystemDay::set_has_commision_take() {
  _has_bits_[1] |= 0x00000100u;
}
inline void tbLogSystemDay::clear_has_commision_take() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void tbLogSystemDay::clear_commision_take() {
  commision_take_ = GOOGLE_ULONGLONG(0);
  clear_has_commision_take();
}
inline ::google::protobuf::uint64 tbLogSystemDay::commision_take() const {
  return commision_take_;
}
inline void tbLogSystemDay::set_commision_take(::google::protobuf::uint64 value) {
  set_has_commision_take();
  commision_take_ = value;
}

// optional uint64 commision_day = 42;
inline bool tbLogSystemDay::has_commision_day() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void tbLogSystemDay::set_has_commision_day() {
  _has_bits_[1] |= 0x00000200u;
}
inline void tbLogSystemDay::clear_has_commision_day() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void tbLogSystemDay::clear_commision_day() {
  commision_day_ = GOOGLE_ULONGLONG(0);
  clear_has_commision_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::commision_day() const {
  return commision_day_;
}
inline void tbLogSystemDay::set_commision_day(::google::protobuf::uint64 value) {
  set_has_commision_day();
  commision_day_ = value;
}

// optional uint64 commision_week = 43;
inline bool tbLogSystemDay::has_commision_week() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void tbLogSystemDay::set_has_commision_week() {
  _has_bits_[1] |= 0x00000400u;
}
inline void tbLogSystemDay::clear_has_commision_week() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void tbLogSystemDay::clear_commision_week() {
  commision_week_ = GOOGLE_ULONGLONG(0);
  clear_has_commision_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::commision_week() const {
  return commision_week_;
}
inline void tbLogSystemDay::set_commision_week(::google::protobuf::uint64 value) {
  set_has_commision_week();
  commision_week_ = value;
}

// optional uint64 commision_month = 44;
inline bool tbLogSystemDay::has_commision_month() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void tbLogSystemDay::set_has_commision_month() {
  _has_bits_[1] |= 0x00000800u;
}
inline void tbLogSystemDay::clear_has_commision_month() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void tbLogSystemDay::clear_commision_month() {
  commision_month_ = GOOGLE_ULONGLONG(0);
  clear_has_commision_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::commision_month() const {
  return commision_month_;
}
inline void tbLogSystemDay::set_commision_month(::google::protobuf::uint64 value) {
  set_has_commision_month();
  commision_month_ = value;
}

// optional uint64 max_online = 45;
inline bool tbLogSystemDay::has_max_online() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void tbLogSystemDay::set_has_max_online() {
  _has_bits_[1] |= 0x00001000u;
}
inline void tbLogSystemDay::clear_has_max_online() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void tbLogSystemDay::clear_max_online() {
  max_online_ = GOOGLE_ULONGLONG(0);
  clear_has_max_online();
}
inline ::google::protobuf::uint64 tbLogSystemDay::max_online() const {
  return max_online_;
}
inline void tbLogSystemDay::set_max_online(::google::protobuf::uint64 value) {
  set_has_max_online();
  max_online_ = value;
}

// optional uint64 win_cost_value = 46;
inline bool tbLogSystemDay::has_win_cost_value() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void tbLogSystemDay::set_has_win_cost_value() {
  _has_bits_[1] |= 0x00002000u;
}
inline void tbLogSystemDay::clear_has_win_cost_value() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void tbLogSystemDay::clear_win_cost_value() {
  win_cost_value_ = GOOGLE_ULONGLONG(0);
  clear_has_win_cost_value();
}
inline ::google::protobuf::uint64 tbLogSystemDay::win_cost_value() const {
  return win_cost_value_;
}
inline void tbLogSystemDay::set_win_cost_value(::google::protobuf::uint64 value) {
  set_has_win_cost_value();
  win_cost_value_ = value;
}

// optional uint64 day_money_value = 47;
inline bool tbLogSystemDay::has_day_money_value() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void tbLogSystemDay::set_has_day_money_value() {
  _has_bits_[1] |= 0x00004000u;
}
inline void tbLogSystemDay::clear_has_day_money_value() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void tbLogSystemDay::clear_day_money_value() {
  day_money_value_ = GOOGLE_ULONGLONG(0);
  clear_has_day_money_value();
}
inline ::google::protobuf::uint64 tbLogSystemDay::day_money_value() const {
  return day_money_value_;
}
inline void tbLogSystemDay::set_day_money_value(::google::protobuf::uint64 value) {
  set_has_day_money_value();
  day_money_value_ = value;
}

// optional uint64 pay_day = 48;
inline bool tbLogSystemDay::has_pay_day() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void tbLogSystemDay::set_has_pay_day() {
  _has_bits_[1] |= 0x00008000u;
}
inline void tbLogSystemDay::clear_has_pay_day() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void tbLogSystemDay::clear_pay_day() {
  pay_day_ = GOOGLE_ULONGLONG(0);
  clear_has_pay_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::pay_day() const {
  return pay_day_;
}
inline void tbLogSystemDay::set_pay_day(::google::protobuf::uint64 value) {
  set_has_pay_day();
  pay_day_ = value;
}

// optional uint64 pay_week = 49;
inline bool tbLogSystemDay::has_pay_week() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void tbLogSystemDay::set_has_pay_week() {
  _has_bits_[1] |= 0x00010000u;
}
inline void tbLogSystemDay::clear_has_pay_week() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void tbLogSystemDay::clear_pay_week() {
  pay_week_ = GOOGLE_ULONGLONG(0);
  clear_has_pay_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::pay_week() const {
  return pay_week_;
}
inline void tbLogSystemDay::set_pay_week(::google::protobuf::uint64 value) {
  set_has_pay_week();
  pay_week_ = value;
}

// optional uint64 pay_month = 50;
inline bool tbLogSystemDay::has_pay_month() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void tbLogSystemDay::set_has_pay_month() {
  _has_bits_[1] |= 0x00020000u;
}
inline void tbLogSystemDay::clear_has_pay_month() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void tbLogSystemDay::clear_pay_month() {
  pay_month_ = GOOGLE_ULONGLONG(0);
  clear_has_pay_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::pay_month() const {
  return pay_month_;
}
inline void tbLogSystemDay::set_pay_month(::google::protobuf::uint64 value) {
  set_has_pay_month();
  pay_month_ = value;
}

// optional uint64 draw_day = 51;
inline bool tbLogSystemDay::has_draw_day() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void tbLogSystemDay::set_has_draw_day() {
  _has_bits_[1] |= 0x00040000u;
}
inline void tbLogSystemDay::clear_has_draw_day() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void tbLogSystemDay::clear_draw_day() {
  draw_day_ = GOOGLE_ULONGLONG(0);
  clear_has_draw_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::draw_day() const {
  return draw_day_;
}
inline void tbLogSystemDay::set_draw_day(::google::protobuf::uint64 value) {
  set_has_draw_day();
  draw_day_ = value;
}

// optional uint64 draw_week = 52;
inline bool tbLogSystemDay::has_draw_week() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void tbLogSystemDay::set_has_draw_week() {
  _has_bits_[1] |= 0x00080000u;
}
inline void tbLogSystemDay::clear_has_draw_week() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void tbLogSystemDay::clear_draw_week() {
  draw_week_ = GOOGLE_ULONGLONG(0);
  clear_has_draw_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::draw_week() const {
  return draw_week_;
}
inline void tbLogSystemDay::set_draw_week(::google::protobuf::uint64 value) {
  set_has_draw_week();
  draw_week_ = value;
}

// optional uint64 draw_month = 53;
inline bool tbLogSystemDay::has_draw_month() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void tbLogSystemDay::set_has_draw_month() {
  _has_bits_[1] |= 0x00100000u;
}
inline void tbLogSystemDay::clear_has_draw_month() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void tbLogSystemDay::clear_draw_month() {
  draw_month_ = GOOGLE_ULONGLONG(0);
  clear_has_draw_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::draw_month() const {
  return draw_month_;
}
inline void tbLogSystemDay::set_draw_month(::google::protobuf::uint64 value) {
  set_has_draw_month();
  draw_month_ = value;
}

// optional uint64 trd_pay_day = 54;
inline bool tbLogSystemDay::has_trd_pay_day() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void tbLogSystemDay::set_has_trd_pay_day() {
  _has_bits_[1] |= 0x00200000u;
}
inline void tbLogSystemDay::clear_has_trd_pay_day() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void tbLogSystemDay::clear_trd_pay_day() {
  trd_pay_day_ = GOOGLE_ULONGLONG(0);
  clear_has_trd_pay_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::trd_pay_day() const {
  return trd_pay_day_;
}
inline void tbLogSystemDay::set_trd_pay_day(::google::protobuf::uint64 value) {
  set_has_trd_pay_day();
  trd_pay_day_ = value;
}

// optional uint64 trd_pay_week = 55;
inline bool tbLogSystemDay::has_trd_pay_week() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void tbLogSystemDay::set_has_trd_pay_week() {
  _has_bits_[1] |= 0x00400000u;
}
inline void tbLogSystemDay::clear_has_trd_pay_week() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void tbLogSystemDay::clear_trd_pay_week() {
  trd_pay_week_ = GOOGLE_ULONGLONG(0);
  clear_has_trd_pay_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::trd_pay_week() const {
  return trd_pay_week_;
}
inline void tbLogSystemDay::set_trd_pay_week(::google::protobuf::uint64 value) {
  set_has_trd_pay_week();
  trd_pay_week_ = value;
}

// optional uint64 trd_pay_month = 56;
inline bool tbLogSystemDay::has_trd_pay_month() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void tbLogSystemDay::set_has_trd_pay_month() {
  _has_bits_[1] |= 0x00800000u;
}
inline void tbLogSystemDay::clear_has_trd_pay_month() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void tbLogSystemDay::clear_trd_pay_month() {
  trd_pay_month_ = GOOGLE_ULONGLONG(0);
  clear_has_trd_pay_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::trd_pay_month() const {
  return trd_pay_month_;
}
inline void tbLogSystemDay::set_trd_pay_month(::google::protobuf::uint64 value) {
  set_has_trd_pay_month();
  trd_pay_month_ = value;
}

// optional uint64 vip_pay_day = 57;
inline bool tbLogSystemDay::has_vip_pay_day() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void tbLogSystemDay::set_has_vip_pay_day() {
  _has_bits_[1] |= 0x01000000u;
}
inline void tbLogSystemDay::clear_has_vip_pay_day() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void tbLogSystemDay::clear_vip_pay_day() {
  vip_pay_day_ = GOOGLE_ULONGLONG(0);
  clear_has_vip_pay_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::vip_pay_day() const {
  return vip_pay_day_;
}
inline void tbLogSystemDay::set_vip_pay_day(::google::protobuf::uint64 value) {
  set_has_vip_pay_day();
  vip_pay_day_ = value;
}

// optional uint64 vip_pay_week = 58;
inline bool tbLogSystemDay::has_vip_pay_week() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void tbLogSystemDay::set_has_vip_pay_week() {
  _has_bits_[1] |= 0x02000000u;
}
inline void tbLogSystemDay::clear_has_vip_pay_week() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void tbLogSystemDay::clear_vip_pay_week() {
  vip_pay_week_ = GOOGLE_ULONGLONG(0);
  clear_has_vip_pay_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::vip_pay_week() const {
  return vip_pay_week_;
}
inline void tbLogSystemDay::set_vip_pay_week(::google::protobuf::uint64 value) {
  set_has_vip_pay_week();
  vip_pay_week_ = value;
}

// optional uint64 vip_pay_month = 59;
inline bool tbLogSystemDay::has_vip_pay_month() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void tbLogSystemDay::set_has_vip_pay_month() {
  _has_bits_[1] |= 0x04000000u;
}
inline void tbLogSystemDay::clear_has_vip_pay_month() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void tbLogSystemDay::clear_vip_pay_month() {
  vip_pay_month_ = GOOGLE_ULONGLONG(0);
  clear_has_vip_pay_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::vip_pay_month() const {
  return vip_pay_month_;
}
inline void tbLogSystemDay::set_vip_pay_month(::google::protobuf::uint64 value) {
  set_has_vip_pay_month();
  vip_pay_month_ = value;
}

// optional uint64 zhuangzhang_day = 60;
inline bool tbLogSystemDay::has_zhuangzhang_day() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void tbLogSystemDay::set_has_zhuangzhang_day() {
  _has_bits_[1] |= 0x08000000u;
}
inline void tbLogSystemDay::clear_has_zhuangzhang_day() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void tbLogSystemDay::clear_zhuangzhang_day() {
  zhuangzhang_day_ = GOOGLE_ULONGLONG(0);
  clear_has_zhuangzhang_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::zhuangzhang_day() const {
  return zhuangzhang_day_;
}
inline void tbLogSystemDay::set_zhuangzhang_day(::google::protobuf::uint64 value) {
  set_has_zhuangzhang_day();
  zhuangzhang_day_ = value;
}

// optional uint64 zhuangzhang_week = 61;
inline bool tbLogSystemDay::has_zhuangzhang_week() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void tbLogSystemDay::set_has_zhuangzhang_week() {
  _has_bits_[1] |= 0x10000000u;
}
inline void tbLogSystemDay::clear_has_zhuangzhang_week() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void tbLogSystemDay::clear_zhuangzhang_week() {
  zhuangzhang_week_ = GOOGLE_ULONGLONG(0);
  clear_has_zhuangzhang_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::zhuangzhang_week() const {
  return zhuangzhang_week_;
}
inline void tbLogSystemDay::set_zhuangzhang_week(::google::protobuf::uint64 value) {
  set_has_zhuangzhang_week();
  zhuangzhang_week_ = value;
}

// optional uint64 zhuangzhang_month = 62;
inline bool tbLogSystemDay::has_zhuangzhang_month() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void tbLogSystemDay::set_has_zhuangzhang_month() {
  _has_bits_[1] |= 0x20000000u;
}
inline void tbLogSystemDay::clear_has_zhuangzhang_month() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void tbLogSystemDay::clear_zhuangzhang_month() {
  zhuangzhang_month_ = GOOGLE_ULONGLONG(0);
  clear_has_zhuangzhang_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::zhuangzhang_month() const {
  return zhuangzhang_month_;
}
inline void tbLogSystemDay::set_zhuangzhang_month(::google::protobuf::uint64 value) {
  set_has_zhuangzhang_month();
  zhuangzhang_month_ = value;
}

// optional uint64 give_day = 63;
inline bool tbLogSystemDay::has_give_day() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void tbLogSystemDay::set_has_give_day() {
  _has_bits_[1] |= 0x40000000u;
}
inline void tbLogSystemDay::clear_has_give_day() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void tbLogSystemDay::clear_give_day() {
  give_day_ = GOOGLE_ULONGLONG(0);
  clear_has_give_day();
}
inline ::google::protobuf::uint64 tbLogSystemDay::give_day() const {
  return give_day_;
}
inline void tbLogSystemDay::set_give_day(::google::protobuf::uint64 value) {
  set_has_give_day();
  give_day_ = value;
}

// optional uint64 give_week = 64;
inline bool tbLogSystemDay::has_give_week() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void tbLogSystemDay::set_has_give_week() {
  _has_bits_[1] |= 0x80000000u;
}
inline void tbLogSystemDay::clear_has_give_week() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void tbLogSystemDay::clear_give_week() {
  give_week_ = GOOGLE_ULONGLONG(0);
  clear_has_give_week();
}
inline ::google::protobuf::uint64 tbLogSystemDay::give_week() const {
  return give_week_;
}
inline void tbLogSystemDay::set_give_week(::google::protobuf::uint64 value) {
  set_has_give_week();
  give_week_ = value;
}

// optional uint64 give_month = 65;
inline bool tbLogSystemDay::has_give_month() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void tbLogSystemDay::set_has_give_month() {
  _has_bits_[2] |= 0x00000001u;
}
inline void tbLogSystemDay::clear_has_give_month() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void tbLogSystemDay::clear_give_month() {
  give_month_ = GOOGLE_ULONGLONG(0);
  clear_has_give_month();
}
inline ::google::protobuf::uint64 tbLogSystemDay::give_month() const {
  return give_month_;
}
inline void tbLogSystemDay::set_give_month(::google::protobuf::uint64 value) {
  set_has_give_month();
  give_month_ = value;
}

// optional uint64 all_give = 66;
inline bool tbLogSystemDay::has_all_give() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void tbLogSystemDay::set_has_all_give() {
  _has_bits_[2] |= 0x00000002u;
}
inline void tbLogSystemDay::clear_has_all_give() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void tbLogSystemDay::clear_all_give() {
  all_give_ = GOOGLE_ULONGLONG(0);
  clear_has_all_give();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_give() const {
  return all_give_;
}
inline void tbLogSystemDay::set_all_give(::google::protobuf::uint64 value) {
  set_has_all_give();
  all_give_ = value;
}

// optional uint64 all_vip_zhuanru = 67;
inline bool tbLogSystemDay::has_all_vip_zhuanru() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void tbLogSystemDay::set_has_all_vip_zhuanru() {
  _has_bits_[2] |= 0x00000004u;
}
inline void tbLogSystemDay::clear_has_all_vip_zhuanru() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void tbLogSystemDay::clear_all_vip_zhuanru() {
  all_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_all_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_vip_zhuanru() const {
  return all_vip_zhuanru_;
}
inline void tbLogSystemDay::set_all_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_all_vip_zhuanru();
  all_vip_zhuanru_ = value;
}

// optional uint64 today_vip_zhuanru = 68;
inline bool tbLogSystemDay::has_today_vip_zhuanru() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void tbLogSystemDay::set_has_today_vip_zhuanru() {
  _has_bits_[2] |= 0x00000008u;
}
inline void tbLogSystemDay::clear_has_today_vip_zhuanru() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void tbLogSystemDay::clear_today_vip_zhuanru() {
  today_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_today_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbLogSystemDay::today_vip_zhuanru() const {
  return today_vip_zhuanru_;
}
inline void tbLogSystemDay::set_today_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_today_vip_zhuanru();
  today_vip_zhuanru_ = value;
}

// optional uint64 week_vip_zhuanru = 69;
inline bool tbLogSystemDay::has_week_vip_zhuanru() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void tbLogSystemDay::set_has_week_vip_zhuanru() {
  _has_bits_[2] |= 0x00000010u;
}
inline void tbLogSystemDay::clear_has_week_vip_zhuanru() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void tbLogSystemDay::clear_week_vip_zhuanru() {
  week_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_week_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbLogSystemDay::week_vip_zhuanru() const {
  return week_vip_zhuanru_;
}
inline void tbLogSystemDay::set_week_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_week_vip_zhuanru();
  week_vip_zhuanru_ = value;
}

// optional uint64 month_vip_zhuanru = 70;
inline bool tbLogSystemDay::has_month_vip_zhuanru() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void tbLogSystemDay::set_has_month_vip_zhuanru() {
  _has_bits_[2] |= 0x00000020u;
}
inline void tbLogSystemDay::clear_has_month_vip_zhuanru() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void tbLogSystemDay::clear_month_vip_zhuanru() {
  month_vip_zhuanru_ = GOOGLE_ULONGLONG(0);
  clear_has_month_vip_zhuanru();
}
inline ::google::protobuf::uint64 tbLogSystemDay::month_vip_zhuanru() const {
  return month_vip_zhuanru_;
}
inline void tbLogSystemDay::set_month_vip_zhuanru(::google::protobuf::uint64 value) {
  set_has_month_vip_zhuanru();
  month_vip_zhuanru_ = value;
}

// optional uint64 all_vip_zhuanchu = 71;
inline bool tbLogSystemDay::has_all_vip_zhuanchu() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void tbLogSystemDay::set_has_all_vip_zhuanchu() {
  _has_bits_[2] |= 0x00000040u;
}
inline void tbLogSystemDay::clear_has_all_vip_zhuanchu() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void tbLogSystemDay::clear_all_vip_zhuanchu() {
  all_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_all_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbLogSystemDay::all_vip_zhuanchu() const {
  return all_vip_zhuanchu_;
}
inline void tbLogSystemDay::set_all_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_all_vip_zhuanchu();
  all_vip_zhuanchu_ = value;
}

// optional uint64 today_vip_zhuanchu = 72;
inline bool tbLogSystemDay::has_today_vip_zhuanchu() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void tbLogSystemDay::set_has_today_vip_zhuanchu() {
  _has_bits_[2] |= 0x00000080u;
}
inline void tbLogSystemDay::clear_has_today_vip_zhuanchu() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void tbLogSystemDay::clear_today_vip_zhuanchu() {
  today_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_today_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbLogSystemDay::today_vip_zhuanchu() const {
  return today_vip_zhuanchu_;
}
inline void tbLogSystemDay::set_today_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_today_vip_zhuanchu();
  today_vip_zhuanchu_ = value;
}

// optional uint64 week_vip_zhuanchu = 73;
inline bool tbLogSystemDay::has_week_vip_zhuanchu() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void tbLogSystemDay::set_has_week_vip_zhuanchu() {
  _has_bits_[2] |= 0x00000100u;
}
inline void tbLogSystemDay::clear_has_week_vip_zhuanchu() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void tbLogSystemDay::clear_week_vip_zhuanchu() {
  week_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_week_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbLogSystemDay::week_vip_zhuanchu() const {
  return week_vip_zhuanchu_;
}
inline void tbLogSystemDay::set_week_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_week_vip_zhuanchu();
  week_vip_zhuanchu_ = value;
}

// optional uint64 month_vip_zhuanchu = 74;
inline bool tbLogSystemDay::has_month_vip_zhuanchu() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void tbLogSystemDay::set_has_month_vip_zhuanchu() {
  _has_bits_[2] |= 0x00000200u;
}
inline void tbLogSystemDay::clear_has_month_vip_zhuanchu() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void tbLogSystemDay::clear_month_vip_zhuanchu() {
  month_vip_zhuanchu_ = GOOGLE_ULONGLONG(0);
  clear_has_month_vip_zhuanchu();
}
inline ::google::protobuf::uint64 tbLogSystemDay::month_vip_zhuanchu() const {
  return month_vip_zhuanchu_;
}
inline void tbLogSystemDay::set_month_vip_zhuanchu(::google::protobuf::uint64 value) {
  set_has_month_vip_zhuanchu();
  month_vip_zhuanchu_ = value;
}

// -------------------------------------------------------------------

// tbRedeemCode

// optional string id = 1;
inline bool tbRedeemCode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tbRedeemCode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tbRedeemCode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tbRedeemCode::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& tbRedeemCode::id() const {
  return *id_;
}
inline void tbRedeemCode::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void tbRedeemCode::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void tbRedeemCode::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbRedeemCode::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* tbRedeemCode::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbRedeemCode::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 gold = 2;
inline bool tbRedeemCode::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tbRedeemCode::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tbRedeemCode::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tbRedeemCode::clear_gold() {
  gold_ = GOOGLE_ULONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::uint64 tbRedeemCode::gold() const {
  return gold_;
}
inline void tbRedeemCode::set_gold(::google::protobuf::uint64 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint64 create_time = 3;
inline bool tbRedeemCode::has_create_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tbRedeemCode::set_has_create_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tbRedeemCode::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tbRedeemCode::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 tbRedeemCode::create_time() const {
  return create_time_;
}
inline void tbRedeemCode::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional string code_name = 5;
inline bool tbRedeemCode::has_code_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tbRedeemCode::set_has_code_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tbRedeemCode::clear_has_code_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tbRedeemCode::clear_code_name() {
  if (code_name_ != &::google::protobuf::internal::kEmptyString) {
    code_name_->clear();
  }
  clear_has_code_name();
}
inline const ::std::string& tbRedeemCode::code_name() const {
  return *code_name_;
}
inline void tbRedeemCode::set_code_name(const ::std::string& value) {
  set_has_code_name();
  if (code_name_ == &::google::protobuf::internal::kEmptyString) {
    code_name_ = new ::std::string;
  }
  code_name_->assign(value);
}
inline void tbRedeemCode::set_code_name(const char* value) {
  set_has_code_name();
  if (code_name_ == &::google::protobuf::internal::kEmptyString) {
    code_name_ = new ::std::string;
  }
  code_name_->assign(value);
}
inline void tbRedeemCode::set_code_name(const char* value, size_t size) {
  set_has_code_name();
  if (code_name_ == &::google::protobuf::internal::kEmptyString) {
    code_name_ = new ::std::string;
  }
  code_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tbRedeemCode::mutable_code_name() {
  set_has_code_name();
  if (code_name_ == &::google::protobuf::internal::kEmptyString) {
    code_name_ = new ::std::string;
  }
  return code_name_;
}
inline ::std::string* tbRedeemCode::release_code_name() {
  clear_has_code_name();
  if (code_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_name_;
    code_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tbRedeemCode::set_allocated_code_name(::std::string* code_name) {
  if (code_name_ != &::google::protobuf::internal::kEmptyString) {
    delete code_name_;
  }
  if (code_name) {
    set_has_code_name();
    code_name_ = code_name;
  } else {
    clear_has_code_name();
    code_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 state = 6;
inline bool tbRedeemCode::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tbRedeemCode::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tbRedeemCode::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tbRedeemCode::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 tbRedeemCode::state() const {
  return state_;
}
inline void tbRedeemCode::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint64 user_id = 7;
inline bool tbRedeemCode::has_user_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tbRedeemCode::set_has_user_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tbRedeemCode::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tbRedeemCode::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 tbRedeemCode::user_id() const {
  return user_id_;
}
inline void tbRedeemCode::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint64 use_time = 8;
inline bool tbRedeemCode::has_use_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tbRedeemCode::set_has_use_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tbRedeemCode::clear_has_use_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tbRedeemCode::clear_use_time() {
  use_time_ = GOOGLE_ULONGLONG(0);
  clear_has_use_time();
}
inline ::google::protobuf::uint64 tbRedeemCode::use_time() const {
  return use_time_;
}
inline void tbRedeemCode::set_use_time(::google::protobuf::uint64 value) {
  set_has_use_time();
  use_time_ = value;
}

// -------------------------------------------------------------------

// LogRedeemCodeRechargeRecord

// optional uint64 event_id = 1;
inline bool LogRedeemCodeRechargeRecord::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRedeemCodeRechargeRecord::clear_event_id() {
  event_id_ = GOOGLE_ULONGLONG(0);
  clear_has_event_id();
}
inline ::google::protobuf::uint64 LogRedeemCodeRechargeRecord::event_id() const {
  return event_id_;
}
inline void LogRedeemCodeRechargeRecord::set_event_id(::google::protobuf::uint64 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 sequence = 2;
inline bool LogRedeemCodeRechargeRecord::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRedeemCodeRechargeRecord::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 LogRedeemCodeRechargeRecord::sequence() const {
  return sequence_;
}
inline void LogRedeemCodeRechargeRecord::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional string bus_name = 3;
inline bool LogRedeemCodeRechargeRecord::has_bus_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_bus_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRedeemCodeRechargeRecord::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& LogRedeemCodeRechargeRecord::bus_name() const {
  return *bus_name_;
}
inline void LogRedeemCodeRechargeRecord::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogRedeemCodeRechargeRecord::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void LogRedeemCodeRechargeRecord::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRedeemCodeRechargeRecord::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* LogRedeemCodeRechargeRecord::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRedeemCodeRechargeRecord::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string event_time = 4;
inline bool LogRedeemCodeRechargeRecord::has_event_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_event_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogRedeemCodeRechargeRecord::clear_event_time() {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    event_time_->clear();
  }
  clear_has_event_time();
}
inline const ::std::string& LogRedeemCodeRechargeRecord::event_time() const {
  return *event_time_;
}
inline void LogRedeemCodeRechargeRecord::set_event_time(const ::std::string& value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogRedeemCodeRechargeRecord::set_event_time(const char* value) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(value);
}
inline void LogRedeemCodeRechargeRecord::set_event_time(const char* value, size_t size) {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  event_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRedeemCodeRechargeRecord::mutable_event_time() {
  set_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    event_time_ = new ::std::string;
  }
  return event_time_;
}
inline ::std::string* LogRedeemCodeRechargeRecord::release_event_time() {
  clear_has_event_time();
  if (event_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_time_;
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRedeemCodeRechargeRecord::set_allocated_event_time(::std::string* event_time) {
  if (event_time_ != &::google::protobuf::internal::kEmptyString) {
    delete event_time_;
  }
  if (event_time) {
    set_has_event_time();
    event_time_ = event_time;
  } else {
    clear_has_event_time();
    event_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 user_id = 5;
inline bool LogRedeemCodeRechargeRecord::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogRedeemCodeRechargeRecord::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LogRedeemCodeRechargeRecord::user_id() const {
  return user_id_;
}
inline void LogRedeemCodeRechargeRecord::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 6;
inline bool LogRedeemCodeRechargeRecord::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogRedeemCodeRechargeRecord::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LogRedeemCodeRechargeRecord::user_name() const {
  return *user_name_;
}
inline void LogRedeemCodeRechargeRecord::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogRedeemCodeRechargeRecord::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LogRedeemCodeRechargeRecord::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogRedeemCodeRechargeRecord::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LogRedeemCodeRechargeRecord::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogRedeemCodeRechargeRecord::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 amount = 20;
inline bool LogRedeemCodeRechargeRecord::has_amount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_amount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_amount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogRedeemCodeRechargeRecord::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
inline ::google::protobuf::uint64 LogRedeemCodeRechargeRecord::amount() const {
  return amount_;
}
inline void LogRedeemCodeRechargeRecord::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
}

// optional uint64 status = 21;
inline bool LogRedeemCodeRechargeRecord::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogRedeemCodeRechargeRecord::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogRedeemCodeRechargeRecord::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogRedeemCodeRechargeRecord::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::uint64 LogRedeemCodeRechargeRecord::status() const {
  return status_;
}
inline void LogRedeemCodeRechargeRecord::set_status(::google::protobuf::uint64 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// GameRoomStat

// optional uint64 cur_fee = 1;
inline bool GameRoomStat::has_cur_fee() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameRoomStat::set_has_cur_fee() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameRoomStat::clear_has_cur_fee() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameRoomStat::clear_cur_fee() {
  cur_fee_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_fee();
}
inline ::google::protobuf::uint64 GameRoomStat::cur_fee() const {
  return cur_fee_;
}
inline void GameRoomStat::set_cur_fee(::google::protobuf::uint64 value) {
  set_has_cur_fee();
  cur_fee_ = value;
}

// optional uint64 cur_pour = 2;
inline bool GameRoomStat::has_cur_pour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameRoomStat::set_has_cur_pour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameRoomStat::clear_has_cur_pour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameRoomStat::clear_cur_pour() {
  cur_pour_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_pour();
}
inline ::google::protobuf::uint64 GameRoomStat::cur_pour() const {
  return cur_pour_;
}
inline void GameRoomStat::set_cur_pour(::google::protobuf::uint64 value) {
  set_has_cur_pour();
  cur_pour_ = value;
}

// optional int64 cur_win = 3;
inline bool GameRoomStat::has_cur_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameRoomStat::set_has_cur_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameRoomStat::clear_has_cur_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameRoomStat::clear_cur_win() {
  cur_win_ = GOOGLE_LONGLONG(0);
  clear_has_cur_win();
}
inline ::google::protobuf::int64 GameRoomStat::cur_win() const {
  return cur_win_;
}
inline void GameRoomStat::set_cur_win(::google::protobuf::int64 value) {
  set_has_cur_win();
  cur_win_ = value;
}

// -------------------------------------------------------------------

// GamePlayerPourInfo

// optional uint64 user_id = 1;
inline bool GamePlayerPourInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePlayerPourInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePlayerPourInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePlayerPourInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 GamePlayerPourInfo::user_id() const {
  return user_id_;
}
inline void GamePlayerPourInfo::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int64 pour = 2;
inline bool GamePlayerPourInfo::has_pour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePlayerPourInfo::set_has_pour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePlayerPourInfo::clear_has_pour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePlayerPourInfo::clear_pour() {
  pour_ = GOOGLE_LONGLONG(0);
  clear_has_pour();
}
inline ::google::protobuf::int64 GamePlayerPourInfo::pour() const {
  return pour_;
}
inline void GamePlayerPourInfo::set_pour(::google::protobuf::int64 value) {
  set_has_pour();
  pour_ = value;
}

// -------------------------------------------------------------------

// GameTablePourInfo

// repeated .proto_ff.GamePlayerPourInfo pour_info = 1;
inline int GameTablePourInfo::pour_info_size() const {
  return pour_info_.size();
}
inline void GameTablePourInfo::clear_pour_info() {
  pour_info_.Clear();
}
inline const ::proto_ff::GamePlayerPourInfo& GameTablePourInfo::pour_info(int index) const {
  return pour_info_.Get(index);
}
inline ::proto_ff::GamePlayerPourInfo* GameTablePourInfo::mutable_pour_info(int index) {
  return pour_info_.Mutable(index);
}
inline ::proto_ff::GamePlayerPourInfo* GameTablePourInfo::add_pour_info() {
  return pour_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GamePlayerPourInfo >&
GameTablePourInfo::pour_info() const {
  return pour_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GamePlayerPourInfo >*
GameTablePourInfo::mutable_pour_info() {
  return &pour_info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Proto_AccountType>() {
  return ::proto_ff::Proto_AccountType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Proto_SexType>() {
  return ::proto_ff::Proto_SexType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Proto_PlatType>() {
  return ::proto_ff::Proto_PlatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Proto_NetworkType>() {
  return ::proto_ff::Proto_NetworkType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Proto_PlayerCreateState>() {
  return ::proto_ff::Proto_PlayerCreateState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Proto_AgentLevel>() {
  return ::proto_ff::Proto_AgentLevel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::enSnsMailStatus>() {
  return ::proto_ff::enSnsMailStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EnumGiveBankJettonStatus>() {
  return ::proto_ff::EnumGiveBankJettonStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::enConstType>() {
  return ::proto_ff::enConstType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eAccountMoneyType>() {
  return ::proto_ff::eAccountMoneyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eChangeMoneyType>() {
  return ::proto_ff::eChangeMoneyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eOperationType>() {
  return ::proto_ff::eOperationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eDrawReasonType>() {
  return ::proto_ff::eDrawReasonType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eRechargeResonType>() {
  return ::proto_ff::eRechargeResonType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eGameBalanceOperationWinReason>() {
  return ::proto_ff::eGameBalanceOperationWinReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eGameBalanceOperationLostReason>() {
  return ::proto_ff::eGameBalanceOperationLostReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eGiveMoneyReason>() {
  return ::proto_ff::eGiveMoneyReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eMoneyExchangeReason>() {
  return ::proto_ff::eMoneyExchangeReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::eMoneyTransferReason>() {
  return ::proto_ff::eMoneyTransferReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::enRankType>() {
  return ::proto_ff::enRankType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::EventLogType>() {
  return ::proto_ff::EventLogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::WhiteBlackState>() {
  return ::proto_ff::WhiteBlackState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::WhiteBlackRosterType>() {
  return ::proto_ff::WhiteBlackRosterType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::GMCtrlGiveDataControlType>() {
  return ::proto_ff::GMCtrlGiveDataControlType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::GMCtrlGiveDataState>() {
  return ::proto_ff::GMCtrlGiveDataState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::GMCtrlGiveDataJackpotType>() {
  return ::proto_ff::GMCtrlGiveDataJackpotType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fcommon_2eproto__INCLUDED
