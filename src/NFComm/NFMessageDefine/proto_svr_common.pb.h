// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_common.proto

#ifndef PROTOBUF_proto_5fsvr_5fcommon_2eproto__INCLUDED
#define PROTOBUF_proto_5fsvr_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "proto_common.pb.h"
#include "proto_kernel.pb.h"
#include "proto_error_code.pb.h"
#include "proto_cs.pb.h"
#include "proto_cs_login.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

class CommonMsgRsp;
class Proto_STMasterServerDumpInfoNtf;
class Proto_MasterTMonitorReloadReq;
class Proto_MasterTMonitorRestartReq;
class Proto_MasterTMonitorStartReq;
class Proto_MasterTMonitorStopReq;
class Proto_MonitorTMasterReloadRsp;
class Proto_MonitorTMasterRestartRsp;
class Proto_MonitorTMasterStartRsp;
class Proto_MonitorTMasterStopRsp;
class Proto_LTSQueryUserReq;
class Proto_STLQueryUserRsp;
class SSEventLogNotify;
class emailSender;
class Proto_STStoreCheckReq;
class Proto_StoreTSCheckRsp;
class Proto_NotifyChangeAgent;
class Proto_PlayerJettonChangeStatReq;

enum Proto_SvrMsgID {
  NF_LTW_LOAD_SERVER_FROM_WORLD_REQ = 38,
  NF_WTL_LOAD_SERVER_TO_LOGIN_RSP = 39,
  NF_STSTORE_CHECK_STORE_SERVER_REQ = 40,
  NF_STORETS_CHECK_STORE_SERVER_RSP = 41,
  NF_SNSTLOGIC_CHANGE_AGENT_NOTIFY = 295,
  NF_UNICASTMSG_EVENTLOG_NOTIFY = 296,
  NF_LTS_QUERY_USER_REQ = 297,
  NF_STL_QUERY_USER_RSP = 298,
  NF_STSNS_PlayerJettonChangeStatReq = 400
};
bool Proto_SvrMsgID_IsValid(int value);
const Proto_SvrMsgID Proto_SvrMsgID_MIN = NF_LTW_LOAD_SERVER_FROM_WORLD_REQ;
const Proto_SvrMsgID Proto_SvrMsgID_MAX = NF_STSNS_PlayerJettonChangeStatReq;
const int Proto_SvrMsgID_ARRAYSIZE = Proto_SvrMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_SvrMsgID_descriptor();
inline const ::std::string& Proto_SvrMsgID_Name(Proto_SvrMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_SvrMsgID_descriptor(), value);
}
inline bool Proto_SvrMsgID_Parse(
    const ::std::string& name, Proto_SvrMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_SvrMsgID>(
    Proto_SvrMsgID_descriptor(), name, value);
}
// ===================================================================

class CommonMsgRsp : public ::google::protobuf::Message {
 public:
  CommonMsgRsp();
  virtual ~CommonMsgRsp();

  CommonMsgRsp(const CommonMsgRsp& from);

  inline CommonMsgRsp& operator=(const CommonMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonMsgRsp& default_instance();

  void Swap(CommonMsgRsp* other);

  // implements Message ----------------------------------------------

  CommonMsgRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonMsgRsp& from);
  void MergeFrom(const CommonMsgRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CommonMsgRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static CommonMsgRsp* default_instance_;
};
// -------------------------------------------------------------------

class Proto_STMasterServerDumpInfoNtf : public ::google::protobuf::Message {
 public:
  Proto_STMasterServerDumpInfoNtf();
  virtual ~Proto_STMasterServerDumpInfoNtf();

  Proto_STMasterServerDumpInfoNtf(const Proto_STMasterServerDumpInfoNtf& from);

  inline Proto_STMasterServerDumpInfoNtf& operator=(const Proto_STMasterServerDumpInfoNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_STMasterServerDumpInfoNtf& default_instance();

  void Swap(Proto_STMasterServerDumpInfoNtf* other);

  // implements Message ----------------------------------------------

  Proto_STMasterServerDumpInfoNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_STMasterServerDumpInfoNtf& from);
  void MergeFrom(const Proto_STMasterServerDumpInfoNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dump_info = 1;
  inline bool has_dump_info() const;
  inline void clear_dump_info();
  static const int kDumpInfoFieldNumber = 1;
  inline const ::std::string& dump_info() const;
  inline void set_dump_info(const ::std::string& value);
  inline void set_dump_info(const char* value);
  inline void set_dump_info(const char* value, size_t size);
  inline ::std::string* mutable_dump_info();
  inline ::std::string* release_dump_info();
  inline void set_allocated_dump_info(::std::string* dump_info);

  // optional uint32 bus_id = 2;
  inline bool has_bus_id() const;
  inline void clear_bus_id();
  static const int kBusIdFieldNumber = 2;
  inline ::google::protobuf::uint32 bus_id() const;
  inline void set_bus_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_STMasterServerDumpInfoNtf)
 private:
  inline void set_has_dump_info();
  inline void clear_has_dump_info();
  inline void set_has_bus_id();
  inline void clear_has_bus_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dump_info_;
  ::google::protobuf::uint32 bus_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_STMasterServerDumpInfoNtf* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorReloadReq : public ::google::protobuf::Message {
 public:
  Proto_MasterTMonitorReloadReq();
  virtual ~Proto_MasterTMonitorReloadReq();

  Proto_MasterTMonitorReloadReq(const Proto_MasterTMonitorReloadReq& from);

  inline Proto_MasterTMonitorReloadReq& operator=(const Proto_MasterTMonitorReloadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorReloadReq& default_instance();

  void Swap(Proto_MasterTMonitorReloadReq* other);

  // implements Message ----------------------------------------------

  Proto_MasterTMonitorReloadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MasterTMonitorReloadReq& from);
  void MergeFrom(const Proto_MasterTMonitorReloadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MasterTMonitorReloadReq)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MasterTMonitorReloadReq* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorRestartReq : public ::google::protobuf::Message {
 public:
  Proto_MasterTMonitorRestartReq();
  virtual ~Proto_MasterTMonitorRestartReq();

  Proto_MasterTMonitorRestartReq(const Proto_MasterTMonitorRestartReq& from);

  inline Proto_MasterTMonitorRestartReq& operator=(const Proto_MasterTMonitorRestartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorRestartReq& default_instance();

  void Swap(Proto_MasterTMonitorRestartReq* other);

  // implements Message ----------------------------------------------

  Proto_MasterTMonitorRestartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MasterTMonitorRestartReq& from);
  void MergeFrom(const Proto_MasterTMonitorRestartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MasterTMonitorRestartReq)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MasterTMonitorRestartReq* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorStartReq : public ::google::protobuf::Message {
 public:
  Proto_MasterTMonitorStartReq();
  virtual ~Proto_MasterTMonitorStartReq();

  Proto_MasterTMonitorStartReq(const Proto_MasterTMonitorStartReq& from);

  inline Proto_MasterTMonitorStartReq& operator=(const Proto_MasterTMonitorStartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorStartReq& default_instance();

  void Swap(Proto_MasterTMonitorStartReq* other);

  // implements Message ----------------------------------------------

  Proto_MasterTMonitorStartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MasterTMonitorStartReq& from);
  void MergeFrom(const Proto_MasterTMonitorStartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MasterTMonitorStartReq)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MasterTMonitorStartReq* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorStopReq : public ::google::protobuf::Message {
 public:
  Proto_MasterTMonitorStopReq();
  virtual ~Proto_MasterTMonitorStopReq();

  Proto_MasterTMonitorStopReq(const Proto_MasterTMonitorStopReq& from);

  inline Proto_MasterTMonitorStopReq& operator=(const Proto_MasterTMonitorStopReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorStopReq& default_instance();

  void Swap(Proto_MasterTMonitorStopReq* other);

  // implements Message ----------------------------------------------

  Proto_MasterTMonitorStopReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MasterTMonitorStopReq& from);
  void MergeFrom(const Proto_MasterTMonitorStopReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MasterTMonitorStopReq)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MasterTMonitorStopReq* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterReloadRsp : public ::google::protobuf::Message {
 public:
  Proto_MonitorTMasterReloadRsp();
  virtual ~Proto_MonitorTMasterReloadRsp();

  Proto_MonitorTMasterReloadRsp(const Proto_MonitorTMasterReloadRsp& from);

  inline Proto_MonitorTMasterReloadRsp& operator=(const Proto_MonitorTMasterReloadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterReloadRsp& default_instance();

  void Swap(Proto_MonitorTMasterReloadRsp* other);

  // implements Message ----------------------------------------------

  Proto_MonitorTMasterReloadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MonitorTMasterReloadRsp& from);
  void MergeFrom(const Proto_MonitorTMasterReloadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MonitorTMasterReloadRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MonitorTMasterReloadRsp* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterRestartRsp : public ::google::protobuf::Message {
 public:
  Proto_MonitorTMasterRestartRsp();
  virtual ~Proto_MonitorTMasterRestartRsp();

  Proto_MonitorTMasterRestartRsp(const Proto_MonitorTMasterRestartRsp& from);

  inline Proto_MonitorTMasterRestartRsp& operator=(const Proto_MonitorTMasterRestartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterRestartRsp& default_instance();

  void Swap(Proto_MonitorTMasterRestartRsp* other);

  // implements Message ----------------------------------------------

  Proto_MonitorTMasterRestartRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MonitorTMasterRestartRsp& from);
  void MergeFrom(const Proto_MonitorTMasterRestartRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MonitorTMasterRestartRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MonitorTMasterRestartRsp* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterStartRsp : public ::google::protobuf::Message {
 public:
  Proto_MonitorTMasterStartRsp();
  virtual ~Proto_MonitorTMasterStartRsp();

  Proto_MonitorTMasterStartRsp(const Proto_MonitorTMasterStartRsp& from);

  inline Proto_MonitorTMasterStartRsp& operator=(const Proto_MonitorTMasterStartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterStartRsp& default_instance();

  void Swap(Proto_MonitorTMasterStartRsp* other);

  // implements Message ----------------------------------------------

  Proto_MonitorTMasterStartRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MonitorTMasterStartRsp& from);
  void MergeFrom(const Proto_MonitorTMasterStartRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MonitorTMasterStartRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MonitorTMasterStartRsp* default_instance_;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterStopRsp : public ::google::protobuf::Message {
 public:
  Proto_MonitorTMasterStopRsp();
  virtual ~Proto_MonitorTMasterStopRsp();

  Proto_MonitorTMasterStopRsp(const Proto_MonitorTMasterStopRsp& from);

  inline Proto_MonitorTMasterStopRsp& operator=(const Proto_MonitorTMasterStopRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterStopRsp& default_instance();

  void Swap(Proto_MonitorTMasterStopRsp* other);

  // implements Message ----------------------------------------------

  Proto_MonitorTMasterStopRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_MonitorTMasterStopRsp& from);
  void MergeFrom(const Proto_MonitorTMasterStopRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // optional string server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const char* value, size_t size);
  inline ::std::string* mutable_server_id();
  inline ::std::string* release_server_id();
  inline void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_MonitorTMasterStopRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::std::string* server_id_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_MonitorTMasterStopRsp* default_instance_;
};
// -------------------------------------------------------------------

class Proto_LTSQueryUserReq : public ::google::protobuf::Message {
 public:
  Proto_LTSQueryUserReq();
  virtual ~Proto_LTSQueryUserReq();

  Proto_LTSQueryUserReq(const Proto_LTSQueryUserReq& from);

  inline Proto_LTSQueryUserReq& operator=(const Proto_LTSQueryUserReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_LTSQueryUserReq& default_instance();

  void Swap(Proto_LTSQueryUserReq* other);

  // implements Message ----------------------------------------------

  Proto_LTSQueryUserReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_LTSQueryUserReq& from);
  void MergeFrom(const Proto_LTSQueryUserReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // repeated uint64 query_user_id = 2;
  inline int query_user_id_size() const;
  inline void clear_query_user_id();
  static const int kQueryUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 query_user_id(int index) const;
  inline void set_query_user_id(int index, ::google::protobuf::uint64 value);
  inline void add_query_user_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      query_user_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_query_user_id();

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_LTSQueryUserReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > query_user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_LTSQueryUserReq* default_instance_;
};
// -------------------------------------------------------------------

class Proto_STLQueryUserRsp : public ::google::protobuf::Message {
 public:
  Proto_STLQueryUserRsp();
  virtual ~Proto_STLQueryUserRsp();

  Proto_STLQueryUserRsp(const Proto_STLQueryUserRsp& from);

  inline Proto_STLQueryUserRsp& operator=(const Proto_STLQueryUserRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_STLQueryUserRsp& default_instance();

  void Swap(Proto_STLQueryUserRsp* other);

  // implements Message ----------------------------------------------

  Proto_STLQueryUserRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_STLQueryUserRsp& from);
  void MergeFrom(const Proto_STLQueryUserRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .proto_ff.UserSimpleData query_user_list = 3;
  inline int query_user_list_size() const;
  inline void clear_query_user_list();
  static const int kQueryUserListFieldNumber = 3;
  inline const ::proto_ff::UserSimpleData& query_user_list(int index) const;
  inline ::proto_ff::UserSimpleData* mutable_query_user_list(int index);
  inline ::proto_ff::UserSimpleData* add_query_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSimpleData >&
      query_user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSimpleData >*
      mutable_query_user_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_STLQueryUserRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSimpleData > query_user_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_STLQueryUserRsp* default_instance_;
};
// -------------------------------------------------------------------

class SSEventLogNotify : public ::google::protobuf::Message {
 public:
  SSEventLogNotify();
  virtual ~SSEventLogNotify();

  SSEventLogNotify(const SSEventLogNotify& from);

  inline SSEventLogNotify& operator=(const SSEventLogNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSEventLogNotify& default_instance();

  void Swap(SSEventLogNotify* other);

  // implements Message ----------------------------------------------

  SSEventLogNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSEventLogNotify& from);
  void MergeFrom(const SSEventLogNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 eventlog_id = 2;
  inline bool has_eventlog_id() const;
  inline void clear_eventlog_id();
  static const int kEventlogIdFieldNumber = 2;
  inline ::google::protobuf::uint64 eventlog_id() const;
  inline void set_eventlog_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SSEventLogNotify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_eventlog_id();
  inline void clear_has_eventlog_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 eventlog_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static SSEventLogNotify* default_instance_;
};
// -------------------------------------------------------------------

class emailSender : public ::google::protobuf::Message {
 public:
  emailSender();
  virtual ~emailSender();

  emailSender(const emailSender& from);

  inline emailSender& operator=(const emailSender& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const emailSender& default_instance();

  void Swap(emailSender* other);

  // implements Message ----------------------------------------------

  emailSender* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const emailSender& from);
  void MergeFrom(const emailSender& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email = 1;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 1;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:proto_ff.emailSender)
 private:
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* email_;
  ::std::string* title_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static emailSender* default_instance_;
};
// -------------------------------------------------------------------

class Proto_STStoreCheckReq : public ::google::protobuf::Message {
 public:
  Proto_STStoreCheckReq();
  virtual ~Proto_STStoreCheckReq();

  Proto_STStoreCheckReq(const Proto_STStoreCheckReq& from);

  inline Proto_STStoreCheckReq& operator=(const Proto_STStoreCheckReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_STStoreCheckReq& default_instance();

  void Swap(Proto_STStoreCheckReq* other);

  // implements Message ----------------------------------------------

  Proto_STStoreCheckReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_STStoreCheckReq& from);
  void MergeFrom(const Proto_STStoreCheckReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_STStoreCheckReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_STStoreCheckReq* default_instance_;
};
// -------------------------------------------------------------------

class Proto_StoreTSCheckRsp : public ::google::protobuf::Message {
 public:
  Proto_StoreTSCheckRsp();
  virtual ~Proto_StoreTSCheckRsp();

  Proto_StoreTSCheckRsp(const Proto_StoreTSCheckRsp& from);

  inline Proto_StoreTSCheckRsp& operator=(const Proto_StoreTSCheckRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_StoreTSCheckRsp& default_instance();

  void Swap(Proto_StoreTSCheckRsp* other);

  // implements Message ----------------------------------------------

  Proto_StoreTSCheckRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_StoreTSCheckRsp& from);
  void MergeFrom(const Proto_StoreTSCheckRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_StoreTSCheckRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_StoreTSCheckRsp* default_instance_;
};
// -------------------------------------------------------------------

class Proto_NotifyChangeAgent : public ::google::protobuf::Message {
 public:
  Proto_NotifyChangeAgent();
  virtual ~Proto_NotifyChangeAgent();

  Proto_NotifyChangeAgent(const Proto_NotifyChangeAgent& from);

  inline Proto_NotifyChangeAgent& operator=(const Proto_NotifyChangeAgent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_NotifyChangeAgent& default_instance();

  void Swap(Proto_NotifyChangeAgent* other);

  // implements Message ----------------------------------------------

  Proto_NotifyChangeAgent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_NotifyChangeAgent& from);
  void MergeFrom(const Proto_NotifyChangeAgent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional uint64 agent_id = 2;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline ::google::protobuf::uint64 agent_id() const;
  inline void set_agent_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_NotifyChangeAgent)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 agent_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_NotifyChangeAgent* default_instance_;
};
// -------------------------------------------------------------------

class Proto_PlayerJettonChangeStatReq : public ::google::protobuf::Message {
 public:
  Proto_PlayerJettonChangeStatReq();
  virtual ~Proto_PlayerJettonChangeStatReq();

  Proto_PlayerJettonChangeStatReq(const Proto_PlayerJettonChangeStatReq& from);

  inline Proto_PlayerJettonChangeStatReq& operator=(const Proto_PlayerJettonChangeStatReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_PlayerJettonChangeStatReq& default_instance();

  void Swap(Proto_PlayerJettonChangeStatReq* other);

  // implements Message ----------------------------------------------

  Proto_PlayerJettonChangeStatReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_PlayerJettonChangeStatReq& from);
  void MergeFrom(const Proto_PlayerJettonChangeStatReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // optional uint32 account_type = 2;
  inline bool has_account_type() const;
  inline void clear_account_type();
  static const int kAccountTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 account_type() const;
  inline void set_account_type(::google::protobuf::uint32 value);

  // optional uint32 opt_type = 3;
  inline bool has_opt_type() const;
  inline void clear_opt_type();
  static const int kOptTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 opt_type() const;
  inline void set_opt_type(::google::protobuf::uint32 value);

  // optional uint32 opt_reason = 4;
  inline bool has_opt_reason() const;
  inline void clear_opt_reason();
  static const int kOptReasonFieldNumber = 4;
  inline ::google::protobuf::uint32 opt_reason() const;
  inline void set_opt_reason(::google::protobuf::uint32 value);

  // optional int64 money_change = 5;
  inline bool has_money_change() const;
  inline void clear_money_change();
  static const int kMoneyChangeFieldNumber = 5;
  inline ::google::protobuf::int64 money_change() const;
  inline void set_money_change(::google::protobuf::int64 value);

  // optional bool is_first_recharge = 6;
  inline bool has_is_first_recharge() const;
  inline void clear_is_first_recharge();
  static const int kIsFirstRechargeFieldNumber = 6;
  inline bool is_first_recharge() const;
  inline void set_is_first_recharge(bool value);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_PlayerJettonChangeStatReq)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_account_type();
  inline void clear_has_account_type();
  inline void set_has_opt_type();
  inline void clear_has_opt_type();
  inline void set_has_opt_reason();
  inline void clear_has_opt_reason();
  inline void set_has_money_change();
  inline void clear_has_money_change();
  inline void set_has_is_first_recharge();
  inline void clear_has_is_first_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint32 account_type_;
  ::google::protobuf::uint32 opt_type_;
  ::google::protobuf::int64 money_change_;
  ::google::protobuf::uint32 opt_reason_;
  bool is_first_recharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fcommon_2eproto();

  void InitAsDefaultInstance();
  static Proto_PlayerJettonChangeStatReq* default_instance_;
};
// ===================================================================


// ===================================================================

// CommonMsgRsp

// optional int32 result = 1;
inline bool CommonMsgRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonMsgRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonMsgRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonMsgRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CommonMsgRsp::result() const {
  return result_;
}
inline void CommonMsgRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Proto_STMasterServerDumpInfoNtf

// optional string dump_info = 1;
inline bool Proto_STMasterServerDumpInfoNtf::has_dump_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_STMasterServerDumpInfoNtf::set_has_dump_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_STMasterServerDumpInfoNtf::clear_has_dump_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_STMasterServerDumpInfoNtf::clear_dump_info() {
  if (dump_info_ != &::google::protobuf::internal::kEmptyString) {
    dump_info_->clear();
  }
  clear_has_dump_info();
}
inline const ::std::string& Proto_STMasterServerDumpInfoNtf::dump_info() const {
  return *dump_info_;
}
inline void Proto_STMasterServerDumpInfoNtf::set_dump_info(const ::std::string& value) {
  set_has_dump_info();
  if (dump_info_ == &::google::protobuf::internal::kEmptyString) {
    dump_info_ = new ::std::string;
  }
  dump_info_->assign(value);
}
inline void Proto_STMasterServerDumpInfoNtf::set_dump_info(const char* value) {
  set_has_dump_info();
  if (dump_info_ == &::google::protobuf::internal::kEmptyString) {
    dump_info_ = new ::std::string;
  }
  dump_info_->assign(value);
}
inline void Proto_STMasterServerDumpInfoNtf::set_dump_info(const char* value, size_t size) {
  set_has_dump_info();
  if (dump_info_ == &::google::protobuf::internal::kEmptyString) {
    dump_info_ = new ::std::string;
  }
  dump_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_STMasterServerDumpInfoNtf::mutable_dump_info() {
  set_has_dump_info();
  if (dump_info_ == &::google::protobuf::internal::kEmptyString) {
    dump_info_ = new ::std::string;
  }
  return dump_info_;
}
inline ::std::string* Proto_STMasterServerDumpInfoNtf::release_dump_info() {
  clear_has_dump_info();
  if (dump_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dump_info_;
    dump_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_STMasterServerDumpInfoNtf::set_allocated_dump_info(::std::string* dump_info) {
  if (dump_info_ != &::google::protobuf::internal::kEmptyString) {
    delete dump_info_;
  }
  if (dump_info) {
    set_has_dump_info();
    dump_info_ = dump_info;
  } else {
    clear_has_dump_info();
    dump_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 bus_id = 2;
inline bool Proto_STMasterServerDumpInfoNtf::has_bus_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_STMasterServerDumpInfoNtf::set_has_bus_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_STMasterServerDumpInfoNtf::clear_has_bus_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_STMasterServerDumpInfoNtf::clear_bus_id() {
  bus_id_ = 0u;
  clear_has_bus_id();
}
inline ::google::protobuf::uint32 Proto_STMasterServerDumpInfoNtf::bus_id() const {
  return bus_id_;
}
inline void Proto_STMasterServerDumpInfoNtf::set_bus_id(::google::protobuf::uint32 value) {
  set_has_bus_id();
  bus_id_ = value;
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorReloadReq

// optional string server_name = 1;
inline bool Proto_MasterTMonitorReloadReq::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MasterTMonitorReloadReq::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MasterTMonitorReloadReq::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MasterTMonitorReloadReq::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MasterTMonitorReloadReq::server_name() const {
  return *server_name_;
}
inline void Proto_MasterTMonitorReloadReq::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorReloadReq::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorReloadReq::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorReloadReq::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MasterTMonitorReloadReq::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorReloadReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 2;
inline bool Proto_MasterTMonitorReloadReq::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MasterTMonitorReloadReq::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MasterTMonitorReloadReq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MasterTMonitorReloadReq::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MasterTMonitorReloadReq::server_id() const {
  return *server_id_;
}
inline void Proto_MasterTMonitorReloadReq::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorReloadReq::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorReloadReq::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorReloadReq::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MasterTMonitorReloadReq::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorReloadReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorRestartReq

// optional string server_name = 1;
inline bool Proto_MasterTMonitorRestartReq::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MasterTMonitorRestartReq::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MasterTMonitorRestartReq::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MasterTMonitorRestartReq::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MasterTMonitorRestartReq::server_name() const {
  return *server_name_;
}
inline void Proto_MasterTMonitorRestartReq::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorRestartReq::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorRestartReq::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorRestartReq::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MasterTMonitorRestartReq::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorRestartReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 2;
inline bool Proto_MasterTMonitorRestartReq::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MasterTMonitorRestartReq::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MasterTMonitorRestartReq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MasterTMonitorRestartReq::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MasterTMonitorRestartReq::server_id() const {
  return *server_id_;
}
inline void Proto_MasterTMonitorRestartReq::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorRestartReq::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorRestartReq::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorRestartReq::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MasterTMonitorRestartReq::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorRestartReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorStartReq

// optional string server_name = 1;
inline bool Proto_MasterTMonitorStartReq::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MasterTMonitorStartReq::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MasterTMonitorStartReq::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MasterTMonitorStartReq::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MasterTMonitorStartReq::server_name() const {
  return *server_name_;
}
inline void Proto_MasterTMonitorStartReq::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorStartReq::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorStartReq::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorStartReq::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MasterTMonitorStartReq::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorStartReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 2;
inline bool Proto_MasterTMonitorStartReq::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MasterTMonitorStartReq::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MasterTMonitorStartReq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MasterTMonitorStartReq::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MasterTMonitorStartReq::server_id() const {
  return *server_id_;
}
inline void Proto_MasterTMonitorStartReq::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorStartReq::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorStartReq::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorStartReq::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MasterTMonitorStartReq::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorStartReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorStopReq

// optional string server_name = 1;
inline bool Proto_MasterTMonitorStopReq::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MasterTMonitorStopReq::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MasterTMonitorStopReq::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MasterTMonitorStopReq::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MasterTMonitorStopReq::server_name() const {
  return *server_name_;
}
inline void Proto_MasterTMonitorStopReq::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorStopReq::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MasterTMonitorStopReq::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorStopReq::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MasterTMonitorStopReq::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorStopReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 2;
inline bool Proto_MasterTMonitorStopReq::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MasterTMonitorStopReq::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MasterTMonitorStopReq::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MasterTMonitorStopReq::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MasterTMonitorStopReq::server_id() const {
  return *server_id_;
}
inline void Proto_MasterTMonitorStopReq::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorStopReq::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MasterTMonitorStopReq::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MasterTMonitorStopReq::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MasterTMonitorStopReq::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MasterTMonitorStopReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterReloadRsp

// optional int32 result = 1;
inline bool Proto_MonitorTMasterReloadRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MonitorTMasterReloadRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MonitorTMasterReloadRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MonitorTMasterReloadRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Proto_MonitorTMasterReloadRsp::result() const {
  return result_;
}
inline void Proto_MonitorTMasterReloadRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string server_name = 2;
inline bool Proto_MonitorTMasterReloadRsp::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MonitorTMasterReloadRsp::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MonitorTMasterReloadRsp::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MonitorTMasterReloadRsp::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MonitorTMasterReloadRsp::server_name() const {
  return *server_name_;
}
inline void Proto_MonitorTMasterReloadRsp::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterReloadRsp::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterReloadRsp::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterReloadRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 3;
inline bool Proto_MonitorTMasterReloadRsp::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Proto_MonitorTMasterReloadRsp::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Proto_MonitorTMasterReloadRsp::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Proto_MonitorTMasterReloadRsp::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MonitorTMasterReloadRsp::server_id() const {
  return *server_id_;
}
inline void Proto_MonitorTMasterReloadRsp::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterReloadRsp::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterReloadRsp::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterReloadRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterRestartRsp

// optional int32 result = 1;
inline bool Proto_MonitorTMasterRestartRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MonitorTMasterRestartRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MonitorTMasterRestartRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MonitorTMasterRestartRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Proto_MonitorTMasterRestartRsp::result() const {
  return result_;
}
inline void Proto_MonitorTMasterRestartRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string server_name = 2;
inline bool Proto_MonitorTMasterRestartRsp::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MonitorTMasterRestartRsp::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MonitorTMasterRestartRsp::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MonitorTMasterRestartRsp::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MonitorTMasterRestartRsp::server_name() const {
  return *server_name_;
}
inline void Proto_MonitorTMasterRestartRsp::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterRestartRsp::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterRestartRsp::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterRestartRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 3;
inline bool Proto_MonitorTMasterRestartRsp::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Proto_MonitorTMasterRestartRsp::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Proto_MonitorTMasterRestartRsp::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Proto_MonitorTMasterRestartRsp::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MonitorTMasterRestartRsp::server_id() const {
  return *server_id_;
}
inline void Proto_MonitorTMasterRestartRsp::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterRestartRsp::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterRestartRsp::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterRestartRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterStartRsp

// optional int32 result = 1;
inline bool Proto_MonitorTMasterStartRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MonitorTMasterStartRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MonitorTMasterStartRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MonitorTMasterStartRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Proto_MonitorTMasterStartRsp::result() const {
  return result_;
}
inline void Proto_MonitorTMasterStartRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string server_name = 2;
inline bool Proto_MonitorTMasterStartRsp::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MonitorTMasterStartRsp::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MonitorTMasterStartRsp::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MonitorTMasterStartRsp::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MonitorTMasterStartRsp::server_name() const {
  return *server_name_;
}
inline void Proto_MonitorTMasterStartRsp::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterStartRsp::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterStartRsp::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterStartRsp::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MonitorTMasterStartRsp::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterStartRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 3;
inline bool Proto_MonitorTMasterStartRsp::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Proto_MonitorTMasterStartRsp::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Proto_MonitorTMasterStartRsp::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Proto_MonitorTMasterStartRsp::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MonitorTMasterStartRsp::server_id() const {
  return *server_id_;
}
inline void Proto_MonitorTMasterStartRsp::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterStartRsp::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterStartRsp::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterStartRsp::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MonitorTMasterStartRsp::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterStartRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterStopRsp

// optional int32 result = 1;
inline bool Proto_MonitorTMasterStopRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_MonitorTMasterStopRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_MonitorTMasterStopRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_MonitorTMasterStopRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Proto_MonitorTMasterStopRsp::result() const {
  return result_;
}
inline void Proto_MonitorTMasterStopRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string server_name = 2;
inline bool Proto_MonitorTMasterStopRsp::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_MonitorTMasterStopRsp::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_MonitorTMasterStopRsp::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_MonitorTMasterStopRsp::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Proto_MonitorTMasterStopRsp::server_name() const {
  return *server_name_;
}
inline void Proto_MonitorTMasterStopRsp::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterStopRsp::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Proto_MonitorTMasterStopRsp::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterStopRsp::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Proto_MonitorTMasterStopRsp::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterStopRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_id = 3;
inline bool Proto_MonitorTMasterStopRsp::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Proto_MonitorTMasterStopRsp::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Proto_MonitorTMasterStopRsp::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Proto_MonitorTMasterStopRsp::clear_server_id() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    server_id_->clear();
  }
  clear_has_server_id();
}
inline const ::std::string& Proto_MonitorTMasterStopRsp::server_id() const {
  return *server_id_;
}
inline void Proto_MonitorTMasterStopRsp::set_server_id(const ::std::string& value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterStopRsp::set_server_id(const char* value) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Proto_MonitorTMasterStopRsp::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_MonitorTMasterStopRsp::mutable_server_id() {
  set_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}
inline ::std::string* Proto_MonitorTMasterStopRsp::release_server_id() {
  clear_has_server_id();
  if (server_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_id_;
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_MonitorTMasterStopRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_id) {
    set_has_server_id();
    server_id_ = server_id;
  } else {
    clear_has_server_id();
    server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_LTSQueryUserReq

// optional uint64 user_id = 1;
inline bool Proto_LTSQueryUserReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_LTSQueryUserReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_LTSQueryUserReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_LTSQueryUserReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 Proto_LTSQueryUserReq::user_id() const {
  return user_id_;
}
inline void Proto_LTSQueryUserReq::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// repeated uint64 query_user_id = 2;
inline int Proto_LTSQueryUserReq::query_user_id_size() const {
  return query_user_id_.size();
}
inline void Proto_LTSQueryUserReq::clear_query_user_id() {
  query_user_id_.Clear();
}
inline ::google::protobuf::uint64 Proto_LTSQueryUserReq::query_user_id(int index) const {
  return query_user_id_.Get(index);
}
inline void Proto_LTSQueryUserReq::set_query_user_id(int index, ::google::protobuf::uint64 value) {
  query_user_id_.Set(index, value);
}
inline void Proto_LTSQueryUserReq::add_query_user_id(::google::protobuf::uint64 value) {
  query_user_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Proto_LTSQueryUserReq::query_user_id() const {
  return query_user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Proto_LTSQueryUserReq::mutable_query_user_id() {
  return &query_user_id_;
}

// -------------------------------------------------------------------

// Proto_STLQueryUserRsp

// optional uint64 user_id = 1;
inline bool Proto_STLQueryUserRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_STLQueryUserRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_STLQueryUserRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_STLQueryUserRsp::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 Proto_STLQueryUserRsp::user_id() const {
  return user_id_;
}
inline void Proto_STLQueryUserRsp::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 result = 2;
inline bool Proto_STLQueryUserRsp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_STLQueryUserRsp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_STLQueryUserRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_STLQueryUserRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Proto_STLQueryUserRsp::result() const {
  return result_;
}
inline void Proto_STLQueryUserRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .proto_ff.UserSimpleData query_user_list = 3;
inline int Proto_STLQueryUserRsp::query_user_list_size() const {
  return query_user_list_.size();
}
inline void Proto_STLQueryUserRsp::clear_query_user_list() {
  query_user_list_.Clear();
}
inline const ::proto_ff::UserSimpleData& Proto_STLQueryUserRsp::query_user_list(int index) const {
  return query_user_list_.Get(index);
}
inline ::proto_ff::UserSimpleData* Proto_STLQueryUserRsp::mutable_query_user_list(int index) {
  return query_user_list_.Mutable(index);
}
inline ::proto_ff::UserSimpleData* Proto_STLQueryUserRsp::add_query_user_list() {
  return query_user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSimpleData >&
Proto_STLQueryUserRsp::query_user_list() const {
  return query_user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::UserSimpleData >*
Proto_STLQueryUserRsp::mutable_query_user_list() {
  return &query_user_list_;
}

// -------------------------------------------------------------------

// SSEventLogNotify

// optional uint64 user_id = 1;
inline bool SSEventLogNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSEventLogNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSEventLogNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSEventLogNotify::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SSEventLogNotify::user_id() const {
  return user_id_;
}
inline void SSEventLogNotify::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint64 eventlog_id = 2;
inline bool SSEventLogNotify::has_eventlog_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSEventLogNotify::set_has_eventlog_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSEventLogNotify::clear_has_eventlog_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSEventLogNotify::clear_eventlog_id() {
  eventlog_id_ = GOOGLE_ULONGLONG(0);
  clear_has_eventlog_id();
}
inline ::google::protobuf::uint64 SSEventLogNotify::eventlog_id() const {
  return eventlog_id_;
}
inline void SSEventLogNotify::set_eventlog_id(::google::protobuf::uint64 value) {
  set_has_eventlog_id();
  eventlog_id_ = value;
}

// -------------------------------------------------------------------

// emailSender

// optional string email = 1;
inline bool emailSender::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void emailSender::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void emailSender::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void emailSender::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& emailSender::email() const {
  return *email_;
}
inline void emailSender::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void emailSender::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void emailSender::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* emailSender::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* emailSender::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void emailSender::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 2;
inline bool emailSender::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void emailSender::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void emailSender::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void emailSender::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& emailSender::title() const {
  return *title_;
}
inline void emailSender::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void emailSender::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void emailSender::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* emailSender::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* emailSender::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void emailSender::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 3;
inline bool emailSender::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void emailSender::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void emailSender::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void emailSender::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& emailSender::msg() const {
  return *msg_;
}
inline void emailSender::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void emailSender::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void emailSender::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* emailSender::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* emailSender::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void emailSender::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_STStoreCheckReq

// -------------------------------------------------------------------

// Proto_StoreTSCheckRsp

// -------------------------------------------------------------------

// Proto_NotifyChangeAgent

// optional uint64 user_id = 1;
inline bool Proto_NotifyChangeAgent::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_NotifyChangeAgent::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_NotifyChangeAgent::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_NotifyChangeAgent::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 Proto_NotifyChangeAgent::user_id() const {
  return user_id_;
}
inline void Proto_NotifyChangeAgent::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint64 agent_id = 2;
inline bool Proto_NotifyChangeAgent::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_NotifyChangeAgent::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_NotifyChangeAgent::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_NotifyChangeAgent::clear_agent_id() {
  agent_id_ = GOOGLE_ULONGLONG(0);
  clear_has_agent_id();
}
inline ::google::protobuf::uint64 Proto_NotifyChangeAgent::agent_id() const {
  return agent_id_;
}
inline void Proto_NotifyChangeAgent::set_agent_id(::google::protobuf::uint64 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// -------------------------------------------------------------------

// Proto_PlayerJettonChangeStatReq

// optional uint64 player_id = 1;
inline bool Proto_PlayerJettonChangeStatReq::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_PlayerJettonChangeStatReq::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 Proto_PlayerJettonChangeStatReq::player_id() const {
  return player_id_;
}
inline void Proto_PlayerJettonChangeStatReq::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
}

// optional uint32 account_type = 2;
inline bool Proto_PlayerJettonChangeStatReq::has_account_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_PlayerJettonChangeStatReq::set_has_account_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_has_account_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_account_type() {
  account_type_ = 0u;
  clear_has_account_type();
}
inline ::google::protobuf::uint32 Proto_PlayerJettonChangeStatReq::account_type() const {
  return account_type_;
}
inline void Proto_PlayerJettonChangeStatReq::set_account_type(::google::protobuf::uint32 value) {
  set_has_account_type();
  account_type_ = value;
}

// optional uint32 opt_type = 3;
inline bool Proto_PlayerJettonChangeStatReq::has_opt_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Proto_PlayerJettonChangeStatReq::set_has_opt_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_has_opt_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_opt_type() {
  opt_type_ = 0u;
  clear_has_opt_type();
}
inline ::google::protobuf::uint32 Proto_PlayerJettonChangeStatReq::opt_type() const {
  return opt_type_;
}
inline void Proto_PlayerJettonChangeStatReq::set_opt_type(::google::protobuf::uint32 value) {
  set_has_opt_type();
  opt_type_ = value;
}

// optional uint32 opt_reason = 4;
inline bool Proto_PlayerJettonChangeStatReq::has_opt_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Proto_PlayerJettonChangeStatReq::set_has_opt_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_has_opt_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_opt_reason() {
  opt_reason_ = 0u;
  clear_has_opt_reason();
}
inline ::google::protobuf::uint32 Proto_PlayerJettonChangeStatReq::opt_reason() const {
  return opt_reason_;
}
inline void Proto_PlayerJettonChangeStatReq::set_opt_reason(::google::protobuf::uint32 value) {
  set_has_opt_reason();
  opt_reason_ = value;
}

// optional int64 money_change = 5;
inline bool Proto_PlayerJettonChangeStatReq::has_money_change() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Proto_PlayerJettonChangeStatReq::set_has_money_change() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_has_money_change() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_money_change() {
  money_change_ = GOOGLE_LONGLONG(0);
  clear_has_money_change();
}
inline ::google::protobuf::int64 Proto_PlayerJettonChangeStatReq::money_change() const {
  return money_change_;
}
inline void Proto_PlayerJettonChangeStatReq::set_money_change(::google::protobuf::int64 value) {
  set_has_money_change();
  money_change_ = value;
}

// optional bool is_first_recharge = 6;
inline bool Proto_PlayerJettonChangeStatReq::has_is_first_recharge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Proto_PlayerJettonChangeStatReq::set_has_is_first_recharge() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_has_is_first_recharge() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Proto_PlayerJettonChangeStatReq::clear_is_first_recharge() {
  is_first_recharge_ = false;
  clear_has_is_first_recharge();
}
inline bool Proto_PlayerJettonChangeStatReq::is_first_recharge() const {
  return is_first_recharge_;
}
inline void Proto_PlayerJettonChangeStatReq::set_is_first_recharge(bool value) {
  set_has_is_first_recharge();
  is_first_recharge_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::Proto_SvrMsgID>() {
  return ::proto_ff::Proto_SvrMsgID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fsvr_5fcommon_2eproto__INCLUDED
