// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_error_code.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_error_code.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::EnumDescriptor* Proto_CS_ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5ferror_5fcode_2eproto() {
  protobuf_AddDesc_proto_5ferror_5fcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_error_code.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_CS_ErrorCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5ferror_5fcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_proto_5ferror_5fcode_2eproto() {
}

void protobuf_AddDesc_proto_5ferror_5fcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026proto_error_code.proto\022\010proto_ff*\360\017\n\022P"
    "roto_CS_ErrorCode\022\"\n\025ERR_CODE_SYSTEM_ERR"
    "OR\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013ERR_CODE_OK\020\000\022\034\n\027ERR_CO"
    "DE_SYSTEM_TIMEOUT\020\220N\022#\n\036ERR_CODE_SYSTEM_"
    "DATABASE_ERROR\020\221N\022\035\n\030ERR_CODE_MSG_PARAM_"
    "ERROR\020\222N\022$\n\037ERR_CODE_ACCOUNT_PASSWORD_ER"
    "ROR\020\365N\022\032\n\025ERR_CODE_NEED_RELOGIN\020\366N\022\037\n\032ER"
    "R_CODE_ACCOUNT_NOT_EXIST\020\367N\022\036\n\031ERR_CODE_"
    "PLAYER_NOT_EXIST\020\370N\022\031\n\024ERR_CODE_TOKEN_ER"
    "ROR\020\372N\022\033\n\026ERR_CODE_TOKEN_TIMEOUT\020\373N\022.\n)E"
    "RR_CODE_ACCOUNT_ALREADY_EXIST_NO_RESITER"
    "\020\374N\022 \n\033ERR_CODE_BIND_PHONE_ALREADY\020\375N\022#\n"
    "\036ERR_CODE_PHONE_AUTO_CODE_ERROR\020\376N\022%\n ER"
    "R_CODE_PHONE_AUTO_CODE_TIMEOUT\020\377N\022!\n\034ERR"
    "_CODE_PHONE_SEND_TOO_MUCH\020\200O\022\035\n\030ERR_CODE"
    "_PHONE_NOT_RIGHT\020\201O\022 \n\033ERR_CODE_PHONE_AL"
    "READY_BIND\020\202O\022(\n#ERR_CODE_VISITOR_LOGIN_"
    "DEVICE_ERROR\020\203O\022!\n\034ERR_CODE_PASSWORD_NOT"
    "_CHANGE\020\210O\022\'\n\"ERR_CODE_OTHER_PLACE_LOGIN"
    "_ACCOUNT\020\211O\022\031\n\024ERR_CODE_USER_IS_BAN\020\212O\022!"
    "\n\034ERR_CODE_USER_IS_NO_TRANSFER\020\213O\022#\n\036ERR"
    "_CODE_USER_AGENT_DEAD_CYCLE\020\214O\022\034\n\027ERR_CO"
    "DE_PLAYER_OFFLINE\020\330O\022$\n\037ERR_CODE_WORLD_M"
    "AX_PLAYER_COUNT\020\331O\022\"\n\035ERR_CODE_GAME_ROOM"
    "_NOT_ONLINE\020\332O\022!\n\034ERR_CODE_GAME_ROOM_NOT"
    "_EXIST\020\333O\022#\n\036ERR_CODE_MAIL_CANT_DEL_NO_R"
    "EAD\020\274P\022 \n\033ERR_CODE_ROLE_MAIL_NOT_FIND\020\275P"
    "\022\033\n\026ERR_CODE_GET_MAIL_FAIL\020\300P\022\034\n\027ERR_COD"
    "E_READ_MAIL_FAIL\020\301P\022\033\n\026ERR_CODE_DEL_MAIL"
    "_FAIL\020\302P\022%\n ERR_CODE_BANK_PASSWORD_NOT_R"
    "IGHT\020\240Q\022,\n\'ERR_CODE_BANK_PASSWORD_FORMAT"
    "_NOT_RIGHT\020\241Q\022\034\n\027ERR_CODE_FACE_NOT_EXIST"
    "\020\242Q\022+\n&ERR_CODE_BANK_GIVE_MONEY_NOT_TO_M"
    "YSELF\020\243Q\022!\n\034ERR_CODE_IN_GAMEING_NOT_BANK"
    "\020\244Q\022\036\n\031ERR_CODE_FIRST_BIND_PHONE\020\245Q\022(\n#E"
    "RR_CODE_BANK_NOT_VIP_ZHUAN_NOT_VIP\020\246Q\022\"\n"
    "\035ERR_CODE_BANK_DRAW_MIN_JETTON\020\247Q\022$\n\037ERR"
    "_CODE_MODIFY_MONEY_LESS_ZERO\020\205R\022\"\n\035ERR_C"
    "ODE_MODIFY_MONEY_TIMEOUT\020\206R\022\'\n\"ERR_CODE_"
    "PLAYER_ALREADY_BIND_PHONE\020\207R\022\'\n\"ERR_CODE"
    "_PLAYER_DONOT_CHANGE_PHONE\020\210R\022-\n(ERR_COD"
    "E_PLAYER_PHONE_AUTO_CODE_TOO_MUCH\020\211R\022-\n("
    "ERR_CODE_EXIT_NOT_PERMITED_WHILE_PLAYING"
    "\020\350R\022\036\n\031EOT_CODE_REDEEM_CODE_USED\020\314S\022#\n\036E"
    "OT_CODE_REDEEM_CODE_NOT_EXIST\020\315S\022$\n\037EOT_"
    "CODE_REDEEM_CODE_UNREG_USER\020\316S\022\"\n\035EOT_CO"
    "DE_REDEEM_CODE_HAS_USED\020\317S\022#\n\036ERR_CODE_U"
    "SER_MONEY_NOT_ENOUGH\020\370U\022\035\n\030ERR_CODE_USER"
    "_IN_GAMEING\020\371U\022%\n ERR_CODE_CHAIR_HAS_OTH"
    "ER_PLAYTER\020\372U\022\035\n\030ERR_CODE_CHAIR_NOT_RIGH"
    "T\020\373U\022!\n\034ERR_CODE_USER_MONEY_TOO_MUCH\020\374U\022"
    "\034\n\027ERR_CODE_DESK_NOT_EXIST\020\375U", 2069);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_error_code.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5ferror_5fcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5ferror_5fcode_2eproto {
  StaticDescriptorInitializer_proto_5ferror_5fcode_2eproto() {
    protobuf_AddDesc_proto_5ferror_5fcode_2eproto();
  }
} static_descriptor_initializer_proto_5ferror_5fcode_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_CS_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_ErrorCode_descriptor_;
}
bool Proto_CS_ErrorCode_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 10000:
    case 10001:
    case 10002:
    case 10101:
    case 10102:
    case 10103:
    case 10104:
    case 10106:
    case 10107:
    case 10108:
    case 10109:
    case 10110:
    case 10111:
    case 10112:
    case 10113:
    case 10114:
    case 10115:
    case 10120:
    case 10121:
    case 10122:
    case 10123:
    case 10124:
    case 10200:
    case 10201:
    case 10202:
    case 10203:
    case 10300:
    case 10301:
    case 10304:
    case 10305:
    case 10306:
    case 10400:
    case 10401:
    case 10402:
    case 10403:
    case 10404:
    case 10405:
    case 10406:
    case 10407:
    case 10501:
    case 10502:
    case 10503:
    case 10504:
    case 10505:
    case 10600:
    case 10700:
    case 10701:
    case 10702:
    case 10703:
    case 11000:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
