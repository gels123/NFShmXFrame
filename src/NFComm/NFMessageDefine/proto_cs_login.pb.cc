// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_cs_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_cs_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_login {

namespace {

const ::google::protobuf::Descriptor* Proto_UserSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UserSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UserLoginExternalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UserLoginExternalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UserDetailCommonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UserDetailCommonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCReconnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCReconnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSHeartBeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSHeartBeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCHeartBeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCHeartBeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSRegisterAccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSRegisterAccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCRegisterAccountRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCRegisterAccountRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSServerIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSServerIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSAccountLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSAccountLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCAccountLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCAccountLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSUserLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSUserLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCUserLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCUserLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSChangeFaceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSChangeFaceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCChangeFaceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCChangeFaceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSChangeNickNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSChangeNickNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCChangNickNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCChangNickNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSQueryUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSQueryUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCQueryUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCQueryUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CS_LoginServer_PhoneAutoCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CS_LoginServer_PhoneAutoCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_LoginServer_PhoneAutoCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_LoginServer_PhoneAutoCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CS_LoginServer_CheckPhoneCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CS_LoginServer_CheckPhoneCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_LoginServer_CheckPhoneCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_LoginServer_CheckPhoneCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CS_ChangePasswordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CS_ChangePasswordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_ChangePasswordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_ChangePasswordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_LoginServer_NotifyPhoneCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_LoginServer_NotifyPhoneCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CS_Player_PhoneAutoCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CS_Player_PhoneAutoCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_Player_PhoneAutoCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_Player_PhoneAutoCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CS_Player_CheckPhoneCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CS_Player_CheckPhoneCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_Player_CheckPhoneCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_Player_CheckPhoneCodeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CS_Player_BindPhoneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CS_Player_BindPhoneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_Player_BindPhoneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_Player_BindPhoneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CS_PhoneChangeBandPasswordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CS_PhoneChangeBandPasswordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SC_PhoneChangeBandPasswordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SC_PhoneChangeBandPasswordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSCheckContractInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSCheckContractInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCCheckContractInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCCheckContractInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCKetPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCKetPlayerNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_LOGIN_CS_CMD_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fcs_5flogin_2eproto() {
  protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_cs_login.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_UserSimpleData_descriptor_ = file->message_type(0);
  static const int Proto_UserSimpleData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, age_),
  };
  Proto_UserSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UserSimpleData_descriptor_,
      Proto_UserSimpleData::default_instance_,
      Proto_UserSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UserSimpleData));
  Proto_UserLoginExternalData_descriptor_ = file->message_type(1);
  static const int Proto_UserLoginExternalData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, aread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, referral_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, platform_os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, phone_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, device_id_),
  };
  Proto_UserLoginExternalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UserLoginExternalData_descriptor_,
      Proto_UserLoginExternalData::default_instance_,
      Proto_UserLoginExternalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserLoginExternalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UserLoginExternalData));
  Proto_UserDetailCommonData_descriptor_ = file->message_type(2);
  static const int Proto_UserDetailCommonData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, face_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, aread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, referrer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, first_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, show_userid_),
  };
  Proto_UserDetailCommonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UserDetailCommonData_descriptor_,
      Proto_UserDetailCommonData::default_instance_,
      Proto_UserDetailCommonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UserDetailCommonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UserDetailCommonData));
  Proto_CSReconnectReq_descriptor_ = file->message_type(3);
  static const int Proto_CSReconnectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSReconnectReq, userid_),
  };
  Proto_CSReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSReconnectReq_descriptor_,
      Proto_CSReconnectReq::default_instance_,
      Proto_CSReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSReconnectReq));
  Proto_SCReconnectRsp_descriptor_ = file->message_type(4);
  static const int Proto_SCReconnectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCReconnectRsp, result_),
  };
  Proto_SCReconnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCReconnectRsp_descriptor_,
      Proto_SCReconnectRsp::default_instance_,
      Proto_SCReconnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCReconnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCReconnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCReconnectRsp));
  Proto_CSHeartBeatReq_descriptor_ = file->message_type(5);
  static const int Proto_CSHeartBeatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSHeartBeatReq, userid_),
  };
  Proto_CSHeartBeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSHeartBeatReq_descriptor_,
      Proto_CSHeartBeatReq::default_instance_,
      Proto_CSHeartBeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSHeartBeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSHeartBeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSHeartBeatReq));
  Proto_SCHeartBeatRsp_descriptor_ = file->message_type(6);
  static const int Proto_SCHeartBeatRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCHeartBeatRsp, result_),
  };
  Proto_SCHeartBeatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCHeartBeatRsp_descriptor_,
      Proto_SCHeartBeatRsp::default_instance_,
      Proto_SCHeartBeatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCHeartBeatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCHeartBeatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCHeartBeatRsp));
  Proto_CSRegisterAccountReq_descriptor_ = file->message_type(7);
  static const int Proto_CSRegisterAccountReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, ext_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, is_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, contract_info_),
  };
  Proto_CSRegisterAccountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSRegisterAccountReq_descriptor_,
      Proto_CSRegisterAccountReq::default_instance_,
      Proto_CSRegisterAccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSRegisterAccountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSRegisterAccountReq));
  Proto_SCRegisterAccountRsp_descriptor_ = file->message_type(8);
  static const int Proto_SCRegisterAccountRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRegisterAccountRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRegisterAccountRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRegisterAccountRsp, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRegisterAccountRsp, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRegisterAccountRsp, server_ip_list_),
  };
  Proto_SCRegisterAccountRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCRegisterAccountRsp_descriptor_,
      Proto_SCRegisterAccountRsp::default_instance_,
      Proto_SCRegisterAccountRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRegisterAccountRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCRegisterAccountRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCRegisterAccountRsp));
  Proto_CSServerIP_descriptor_ = file->message_type(9);
  static const int Proto_CSServerIP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSServerIP, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSServerIP, port_),
  };
  Proto_CSServerIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSServerIP_descriptor_,
      Proto_CSServerIP::default_instance_,
      Proto_CSServerIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSServerIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSServerIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSServerIP));
  Proto_CSAccountLoginReq_descriptor_ = file->message_type(10);
  static const int Proto_CSAccountLoginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSAccountLoginReq, login_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSAccountLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSAccountLoginReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSAccountLoginReq, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSAccountLoginReq, contract_info_),
  };
  Proto_CSAccountLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSAccountLoginReq_descriptor_,
      Proto_CSAccountLoginReq::default_instance_,
      Proto_CSAccountLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSAccountLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSAccountLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSAccountLoginReq));
  Proto_SCAccountLoginRsp_descriptor_ = file->message_type(11);
  static const int Proto_SCAccountLoginRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCAccountLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCAccountLoginRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCAccountLoginRsp, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCAccountLoginRsp, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCAccountLoginRsp, server_ip_list_),
  };
  Proto_SCAccountLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCAccountLoginRsp_descriptor_,
      Proto_SCAccountLoginRsp::default_instance_,
      Proto_SCAccountLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCAccountLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCAccountLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCAccountLoginRsp));
  Proto_CSUserLoginReq_descriptor_ = file->message_type(12);
  static const int Proto_CSUserLoginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSUserLoginReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSUserLoginReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSUserLoginReq, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSUserLoginReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSUserLoginReq, ext_data_),
  };
  Proto_CSUserLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSUserLoginReq_descriptor_,
      Proto_CSUserLoginReq::default_instance_,
      Proto_CSUserLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSUserLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSUserLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSUserLoginReq));
  Proto_SCUserLoginRsp_descriptor_ = file->message_type(13);
  static const int Proto_SCUserLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCUserLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCUserLoginRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCUserLoginRsp, detail_data_),
  };
  Proto_SCUserLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCUserLoginRsp_descriptor_,
      Proto_SCUserLoginRsp::default_instance_,
      Proto_SCUserLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCUserLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCUserLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCUserLoginRsp));
  Proto_CSChangeFaceReq_descriptor_ = file->message_type(14);
  static const int Proto_CSChangeFaceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSChangeFaceReq, face_id_),
  };
  Proto_CSChangeFaceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSChangeFaceReq_descriptor_,
      Proto_CSChangeFaceReq::default_instance_,
      Proto_CSChangeFaceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSChangeFaceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSChangeFaceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSChangeFaceReq));
  Proto_SCChangeFaceRsp_descriptor_ = file->message_type(15);
  static const int Proto_SCChangeFaceRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangeFaceRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangeFaceRsp, face_id_),
  };
  Proto_SCChangeFaceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCChangeFaceRsp_descriptor_,
      Proto_SCChangeFaceRsp::default_instance_,
      Proto_SCChangeFaceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangeFaceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangeFaceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCChangeFaceRsp));
  Proto_CSChangeNickNameReq_descriptor_ = file->message_type(16);
  static const int Proto_CSChangeNickNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSChangeNickNameReq, nick_name_),
  };
  Proto_CSChangeNickNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSChangeNickNameReq_descriptor_,
      Proto_CSChangeNickNameReq::default_instance_,
      Proto_CSChangeNickNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSChangeNickNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSChangeNickNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSChangeNickNameReq));
  Proto_SCChangNickNameRsp_descriptor_ = file->message_type(17);
  static const int Proto_SCChangNickNameRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangNickNameRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangNickNameRsp, nick_name_),
  };
  Proto_SCChangNickNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCChangNickNameRsp_descriptor_,
      Proto_SCChangNickNameRsp::default_instance_,
      Proto_SCChangNickNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangNickNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCChangNickNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCChangNickNameRsp));
  Proto_CSQueryUserReq_descriptor_ = file->message_type(18);
  static const int Proto_CSQueryUserReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSQueryUserReq, query_user_id_),
  };
  Proto_CSQueryUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSQueryUserReq_descriptor_,
      Proto_CSQueryUserReq::default_instance_,
      Proto_CSQueryUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSQueryUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSQueryUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSQueryUserReq));
  Proto_SCQueryUserRsp_descriptor_ = file->message_type(19);
  static const int Proto_SCQueryUserRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCQueryUserRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCQueryUserRsp, query_user_list_),
  };
  Proto_SCQueryUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCQueryUserRsp_descriptor_,
      Proto_SCQueryUserRsp::default_instance_,
      Proto_SCQueryUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCQueryUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCQueryUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCQueryUserRsp));
  Proto_CS_LoginServer_PhoneAutoCodeReq_descriptor_ = file->message_type(20);
  static const int Proto_CS_LoginServer_PhoneAutoCodeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_PhoneAutoCodeReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_PhoneAutoCodeReq, code_type_),
  };
  Proto_CS_LoginServer_PhoneAutoCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CS_LoginServer_PhoneAutoCodeReq_descriptor_,
      Proto_CS_LoginServer_PhoneAutoCodeReq::default_instance_,
      Proto_CS_LoginServer_PhoneAutoCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_PhoneAutoCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_PhoneAutoCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CS_LoginServer_PhoneAutoCodeReq));
  Proto_SC_LoginServer_PhoneAutoCodeRsp_descriptor_ = file->message_type(21);
  static const int Proto_SC_LoginServer_PhoneAutoCodeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_PhoneAutoCodeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_PhoneAutoCodeRsp, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_PhoneAutoCodeRsp, code_type_),
  };
  Proto_SC_LoginServer_PhoneAutoCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_LoginServer_PhoneAutoCodeRsp_descriptor_,
      Proto_SC_LoginServer_PhoneAutoCodeRsp::default_instance_,
      Proto_SC_LoginServer_PhoneAutoCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_PhoneAutoCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_PhoneAutoCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_LoginServer_PhoneAutoCodeRsp));
  Proto_CS_LoginServer_CheckPhoneCodeReq_descriptor_ = file->message_type(22);
  static const int Proto_CS_LoginServer_CheckPhoneCodeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_CheckPhoneCodeReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_CheckPhoneCodeReq, auth_code_),
  };
  Proto_CS_LoginServer_CheckPhoneCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CS_LoginServer_CheckPhoneCodeReq_descriptor_,
      Proto_CS_LoginServer_CheckPhoneCodeReq::default_instance_,
      Proto_CS_LoginServer_CheckPhoneCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_CheckPhoneCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_LoginServer_CheckPhoneCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CS_LoginServer_CheckPhoneCodeReq));
  Proto_SC_LoginServer_CheckPhoneCodeRsp_descriptor_ = file->message_type(23);
  static const int Proto_SC_LoginServer_CheckPhoneCodeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_CheckPhoneCodeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_CheckPhoneCodeRsp, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_CheckPhoneCodeRsp, code_type_),
  };
  Proto_SC_LoginServer_CheckPhoneCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_LoginServer_CheckPhoneCodeRsp_descriptor_,
      Proto_SC_LoginServer_CheckPhoneCodeRsp::default_instance_,
      Proto_SC_LoginServer_CheckPhoneCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_CheckPhoneCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_CheckPhoneCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_LoginServer_CheckPhoneCodeRsp));
  Proto_CS_ChangePasswordReq_descriptor_ = file->message_type(24);
  static const int Proto_CS_ChangePasswordReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_ChangePasswordReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_ChangePasswordReq, new_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_ChangePasswordReq, device_id_),
  };
  Proto_CS_ChangePasswordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CS_ChangePasswordReq_descriptor_,
      Proto_CS_ChangePasswordReq::default_instance_,
      Proto_CS_ChangePasswordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_ChangePasswordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_ChangePasswordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CS_ChangePasswordReq));
  Proto_SC_ChangePasswordRsp_descriptor_ = file->message_type(25);
  static const int Proto_SC_ChangePasswordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_ChangePasswordRsp, result_),
  };
  Proto_SC_ChangePasswordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_ChangePasswordRsp_descriptor_,
      Proto_SC_ChangePasswordRsp::default_instance_,
      Proto_SC_ChangePasswordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_ChangePasswordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_ChangePasswordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_ChangePasswordRsp));
  Proto_SC_LoginServer_NotifyPhoneCheck_descriptor_ = file->message_type(26);
  static const int Proto_SC_LoginServer_NotifyPhoneCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_NotifyPhoneCheck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_NotifyPhoneCheck, phone_num_),
  };
  Proto_SC_LoginServer_NotifyPhoneCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_LoginServer_NotifyPhoneCheck_descriptor_,
      Proto_SC_LoginServer_NotifyPhoneCheck::default_instance_,
      Proto_SC_LoginServer_NotifyPhoneCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_NotifyPhoneCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_LoginServer_NotifyPhoneCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_LoginServer_NotifyPhoneCheck));
  Proto_CS_Player_PhoneAutoCodeReq_descriptor_ = file->message_type(27);
  static const int Proto_CS_Player_PhoneAutoCodeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_PhoneAutoCodeReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_PhoneAutoCodeReq, code_type_),
  };
  Proto_CS_Player_PhoneAutoCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CS_Player_PhoneAutoCodeReq_descriptor_,
      Proto_CS_Player_PhoneAutoCodeReq::default_instance_,
      Proto_CS_Player_PhoneAutoCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_PhoneAutoCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_PhoneAutoCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CS_Player_PhoneAutoCodeReq));
  Proto_SC_Player_PhoneAutoCodeRsp_descriptor_ = file->message_type(28);
  static const int Proto_SC_Player_PhoneAutoCodeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_PhoneAutoCodeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_PhoneAutoCodeRsp, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_PhoneAutoCodeRsp, code_type_),
  };
  Proto_SC_Player_PhoneAutoCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_Player_PhoneAutoCodeRsp_descriptor_,
      Proto_SC_Player_PhoneAutoCodeRsp::default_instance_,
      Proto_SC_Player_PhoneAutoCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_PhoneAutoCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_PhoneAutoCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_Player_PhoneAutoCodeRsp));
  Proto_CS_Player_CheckPhoneCodeReq_descriptor_ = file->message_type(29);
  static const int Proto_CS_Player_CheckPhoneCodeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_CheckPhoneCodeReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_CheckPhoneCodeReq, auth_code_),
  };
  Proto_CS_Player_CheckPhoneCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CS_Player_CheckPhoneCodeReq_descriptor_,
      Proto_CS_Player_CheckPhoneCodeReq::default_instance_,
      Proto_CS_Player_CheckPhoneCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_CheckPhoneCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_CheckPhoneCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CS_Player_CheckPhoneCodeReq));
  Proto_SC_Player_CheckPhoneCodeRsp_descriptor_ = file->message_type(30);
  static const int Proto_SC_Player_CheckPhoneCodeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_CheckPhoneCodeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_CheckPhoneCodeRsp, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_CheckPhoneCodeRsp, code_type_),
  };
  Proto_SC_Player_CheckPhoneCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_Player_CheckPhoneCodeRsp_descriptor_,
      Proto_SC_Player_CheckPhoneCodeRsp::default_instance_,
      Proto_SC_Player_CheckPhoneCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_CheckPhoneCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_CheckPhoneCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_Player_CheckPhoneCodeRsp));
  Proto_CS_Player_BindPhoneReq_descriptor_ = file->message_type(31);
  static const int Proto_CS_Player_BindPhoneReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_BindPhoneReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_BindPhoneReq, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_BindPhoneReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_BindPhoneReq, device_id_),
  };
  Proto_CS_Player_BindPhoneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CS_Player_BindPhoneReq_descriptor_,
      Proto_CS_Player_BindPhoneReq::default_instance_,
      Proto_CS_Player_BindPhoneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_BindPhoneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_Player_BindPhoneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CS_Player_BindPhoneReq));
  Proto_SC_Player_BindPhoneRsp_descriptor_ = file->message_type(32);
  static const int Proto_SC_Player_BindPhoneRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_BindPhoneRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_BindPhoneRsp, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_BindPhoneRsp, nick_name_),
  };
  Proto_SC_Player_BindPhoneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_Player_BindPhoneRsp_descriptor_,
      Proto_SC_Player_BindPhoneRsp::default_instance_,
      Proto_SC_Player_BindPhoneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_BindPhoneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_Player_BindPhoneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_Player_BindPhoneRsp));
  Proto_CS_PhoneChangeBandPasswordReq_descriptor_ = file->message_type(33);
  static const int Proto_CS_PhoneChangeBandPasswordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_PhoneChangeBandPasswordReq, phone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_PhoneChangeBandPasswordReq, new_password_),
  };
  Proto_CS_PhoneChangeBandPasswordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CS_PhoneChangeBandPasswordReq_descriptor_,
      Proto_CS_PhoneChangeBandPasswordReq::default_instance_,
      Proto_CS_PhoneChangeBandPasswordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_PhoneChangeBandPasswordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CS_PhoneChangeBandPasswordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CS_PhoneChangeBandPasswordReq));
  Proto_SC_PhoneChangeBandPasswordRsp_descriptor_ = file->message_type(34);
  static const int Proto_SC_PhoneChangeBandPasswordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_PhoneChangeBandPasswordRsp, result_),
  };
  Proto_SC_PhoneChangeBandPasswordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SC_PhoneChangeBandPasswordRsp_descriptor_,
      Proto_SC_PhoneChangeBandPasswordRsp::default_instance_,
      Proto_SC_PhoneChangeBandPasswordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_PhoneChangeBandPasswordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SC_PhoneChangeBandPasswordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SC_PhoneChangeBandPasswordRsp));
  Proto_CSCheckContractInfoReq_descriptor_ = file->message_type(35);
  static const int Proto_CSCheckContractInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSCheckContractInfoReq, contract_info_),
  };
  Proto_CSCheckContractInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSCheckContractInfoReq_descriptor_,
      Proto_CSCheckContractInfoReq::default_instance_,
      Proto_CSCheckContractInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSCheckContractInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSCheckContractInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSCheckContractInfoReq));
  Proto_SCCheckContractInfoRsp_descriptor_ = file->message_type(36);
  static const int Proto_SCCheckContractInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCCheckContractInfoRsp, result_),
  };
  Proto_SCCheckContractInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCCheckContractInfoRsp_descriptor_,
      Proto_SCCheckContractInfoRsp::default_instance_,
      Proto_SCCheckContractInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCCheckContractInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCCheckContractInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCCheckContractInfoRsp));
  Proto_SCKetPlayerNotify_descriptor_ = file->message_type(37);
  static const int Proto_SCKetPlayerNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCKetPlayerNotify, result_),
  };
  Proto_SCKetPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCKetPlayerNotify_descriptor_,
      Proto_SCKetPlayerNotify::default_instance_,
      Proto_SCKetPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCKetPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCKetPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCKetPlayerNotify));
  Proto_LOGIN_CS_CMD_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fcs_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UserSimpleData_descriptor_, &Proto_UserSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UserLoginExternalData_descriptor_, &Proto_UserLoginExternalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UserDetailCommonData_descriptor_, &Proto_UserDetailCommonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSReconnectReq_descriptor_, &Proto_CSReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCReconnectRsp_descriptor_, &Proto_SCReconnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSHeartBeatReq_descriptor_, &Proto_CSHeartBeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCHeartBeatRsp_descriptor_, &Proto_SCHeartBeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSRegisterAccountReq_descriptor_, &Proto_CSRegisterAccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCRegisterAccountRsp_descriptor_, &Proto_SCRegisterAccountRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSServerIP_descriptor_, &Proto_CSServerIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSAccountLoginReq_descriptor_, &Proto_CSAccountLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCAccountLoginRsp_descriptor_, &Proto_SCAccountLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSUserLoginReq_descriptor_, &Proto_CSUserLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCUserLoginRsp_descriptor_, &Proto_SCUserLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSChangeFaceReq_descriptor_, &Proto_CSChangeFaceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCChangeFaceRsp_descriptor_, &Proto_SCChangeFaceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSChangeNickNameReq_descriptor_, &Proto_CSChangeNickNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCChangNickNameRsp_descriptor_, &Proto_SCChangNickNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSQueryUserReq_descriptor_, &Proto_CSQueryUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCQueryUserRsp_descriptor_, &Proto_SCQueryUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CS_LoginServer_PhoneAutoCodeReq_descriptor_, &Proto_CS_LoginServer_PhoneAutoCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_LoginServer_PhoneAutoCodeRsp_descriptor_, &Proto_SC_LoginServer_PhoneAutoCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CS_LoginServer_CheckPhoneCodeReq_descriptor_, &Proto_CS_LoginServer_CheckPhoneCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_LoginServer_CheckPhoneCodeRsp_descriptor_, &Proto_SC_LoginServer_CheckPhoneCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CS_ChangePasswordReq_descriptor_, &Proto_CS_ChangePasswordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_ChangePasswordRsp_descriptor_, &Proto_SC_ChangePasswordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_LoginServer_NotifyPhoneCheck_descriptor_, &Proto_SC_LoginServer_NotifyPhoneCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CS_Player_PhoneAutoCodeReq_descriptor_, &Proto_CS_Player_PhoneAutoCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_Player_PhoneAutoCodeRsp_descriptor_, &Proto_SC_Player_PhoneAutoCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CS_Player_CheckPhoneCodeReq_descriptor_, &Proto_CS_Player_CheckPhoneCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_Player_CheckPhoneCodeRsp_descriptor_, &Proto_SC_Player_CheckPhoneCodeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CS_Player_BindPhoneReq_descriptor_, &Proto_CS_Player_BindPhoneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_Player_BindPhoneRsp_descriptor_, &Proto_SC_Player_BindPhoneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CS_PhoneChangeBandPasswordReq_descriptor_, &Proto_CS_PhoneChangeBandPasswordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SC_PhoneChangeBandPasswordRsp_descriptor_, &Proto_SC_PhoneChangeBandPasswordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSCheckContractInfoReq_descriptor_, &Proto_CSCheckContractInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCCheckContractInfoRsp_descriptor_, &Proto_SCCheckContractInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCKetPlayerNotify_descriptor_, &Proto_SCKetPlayerNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fcs_5flogin_2eproto() {
  delete Proto_UserSimpleData::default_instance_;
  delete Proto_UserSimpleData_reflection_;
  delete Proto_UserLoginExternalData::default_instance_;
  delete Proto_UserLoginExternalData_reflection_;
  delete Proto_UserDetailCommonData::default_instance_;
  delete Proto_UserDetailCommonData_reflection_;
  delete Proto_CSReconnectReq::default_instance_;
  delete Proto_CSReconnectReq_reflection_;
  delete Proto_SCReconnectRsp::default_instance_;
  delete Proto_SCReconnectRsp_reflection_;
  delete Proto_CSHeartBeatReq::default_instance_;
  delete Proto_CSHeartBeatReq_reflection_;
  delete Proto_SCHeartBeatRsp::default_instance_;
  delete Proto_SCHeartBeatRsp_reflection_;
  delete Proto_CSRegisterAccountReq::default_instance_;
  delete Proto_CSRegisterAccountReq_reflection_;
  delete Proto_SCRegisterAccountRsp::default_instance_;
  delete Proto_SCRegisterAccountRsp_reflection_;
  delete Proto_CSServerIP::default_instance_;
  delete Proto_CSServerIP_reflection_;
  delete Proto_CSAccountLoginReq::default_instance_;
  delete Proto_CSAccountLoginReq_reflection_;
  delete Proto_SCAccountLoginRsp::default_instance_;
  delete Proto_SCAccountLoginRsp_reflection_;
  delete Proto_CSUserLoginReq::default_instance_;
  delete Proto_CSUserLoginReq_reflection_;
  delete Proto_SCUserLoginRsp::default_instance_;
  delete Proto_SCUserLoginRsp_reflection_;
  delete Proto_CSChangeFaceReq::default_instance_;
  delete Proto_CSChangeFaceReq_reflection_;
  delete Proto_SCChangeFaceRsp::default_instance_;
  delete Proto_SCChangeFaceRsp_reflection_;
  delete Proto_CSChangeNickNameReq::default_instance_;
  delete Proto_CSChangeNickNameReq_reflection_;
  delete Proto_SCChangNickNameRsp::default_instance_;
  delete Proto_SCChangNickNameRsp_reflection_;
  delete Proto_CSQueryUserReq::default_instance_;
  delete Proto_CSQueryUserReq_reflection_;
  delete Proto_SCQueryUserRsp::default_instance_;
  delete Proto_SCQueryUserRsp_reflection_;
  delete Proto_CS_LoginServer_PhoneAutoCodeReq::default_instance_;
  delete Proto_CS_LoginServer_PhoneAutoCodeReq_reflection_;
  delete Proto_SC_LoginServer_PhoneAutoCodeRsp::default_instance_;
  delete Proto_SC_LoginServer_PhoneAutoCodeRsp_reflection_;
  delete Proto_CS_LoginServer_CheckPhoneCodeReq::default_instance_;
  delete Proto_CS_LoginServer_CheckPhoneCodeReq_reflection_;
  delete Proto_SC_LoginServer_CheckPhoneCodeRsp::default_instance_;
  delete Proto_SC_LoginServer_CheckPhoneCodeRsp_reflection_;
  delete Proto_CS_ChangePasswordReq::default_instance_;
  delete Proto_CS_ChangePasswordReq_reflection_;
  delete Proto_SC_ChangePasswordRsp::default_instance_;
  delete Proto_SC_ChangePasswordRsp_reflection_;
  delete Proto_SC_LoginServer_NotifyPhoneCheck::default_instance_;
  delete Proto_SC_LoginServer_NotifyPhoneCheck_reflection_;
  delete Proto_CS_Player_PhoneAutoCodeReq::default_instance_;
  delete Proto_CS_Player_PhoneAutoCodeReq_reflection_;
  delete Proto_SC_Player_PhoneAutoCodeRsp::default_instance_;
  delete Proto_SC_Player_PhoneAutoCodeRsp_reflection_;
  delete Proto_CS_Player_CheckPhoneCodeReq::default_instance_;
  delete Proto_CS_Player_CheckPhoneCodeReq_reflection_;
  delete Proto_SC_Player_CheckPhoneCodeRsp::default_instance_;
  delete Proto_SC_Player_CheckPhoneCodeRsp_reflection_;
  delete Proto_CS_Player_BindPhoneReq::default_instance_;
  delete Proto_CS_Player_BindPhoneReq_reflection_;
  delete Proto_SC_Player_BindPhoneRsp::default_instance_;
  delete Proto_SC_Player_BindPhoneRsp_reflection_;
  delete Proto_CS_PhoneChangeBandPasswordReq::default_instance_;
  delete Proto_CS_PhoneChangeBandPasswordReq_reflection_;
  delete Proto_SC_PhoneChangeBandPasswordRsp::default_instance_;
  delete Proto_SC_PhoneChangeBandPasswordRsp_reflection_;
  delete Proto_CSCheckContractInfoReq::default_instance_;
  delete Proto_CSCheckContractInfoReq_reflection_;
  delete Proto_SCCheckContractInfoRsp::default_instance_;
  delete Proto_SCCheckContractInfoRsp_reflection_;
  delete Proto_SCKetPlayerNotify::default_instance_;
  delete Proto_SCKetPlayerNotify_reflection_;
}

void protobuf_AddDesc_proto_5fcs_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto_cs_login.proto\022\013proto_login\"c\n\024P"
    "roto_UserSimpleData\022\016\n\006userid\030\001 \001(\004\022\020\n\010n"
    "ickname\030\002 \001(\t\022\014\n\004face\030\003 \001(\r\022\016\n\006gender\030\004 "
    "\001(\r\022\013\n\003age\030\005 \001(\r\"\331\001\n\033Proto_UserLoginExte"
    "rnalData\022\020\n\010aread_id\030\001 \001(\r\022\020\n\010agent_id\030\002"
    " \001(\r\022\022\n\nchannel_id\030\003 \001(\r\022\025\n\rreferral_cod"
    "e\030\004 \001(\004\022\023\n\013platform_os\030\005 \001(\t\022\017\n\007country\030"
    "\006 \001(\t\022\020\n\010province\030\007 \001(\t\022\014\n\004city\030\010 \001(\t\022\022\n"
    "\nphone_mode\030\t \001(\t\022\021\n\tdevice_id\030\n \001(\t\"\200\002\n"
    "\032Proto_UserDetailCommonData\022\021\n\tnick_name"
    "\030\001 \001(\t\022\017\n\007face_id\030\002 \001(\r\022\016\n\006gender\030\003 \001(\r\022"
    "\016\n\006jetton\030\004 \001(\004\022\023\n\013bank_jetton\030\005 \001(\004\022\020\n\010"
    "agent_id\030\006 \001(\004\022\020\n\010phonenum\030\007 \001(\004\022\021\n\tvip_"
    "level\030\010 \001(\r\022\020\n\010aread_id\030\t \001(\r\022\023\n\013referre"
    "r_id\030\n \001(\004\022\026\n\016first_recharge\030\013 \001(\010\022\023\n\013sh"
    "ow_userid\030\014 \001(\004\"&\n\024Proto_CSReconnectReq\022"
    "\016\n\006userid\030\001 \001(\004\"&\n\024Proto_SCReconnectRsp\022"
    "\016\n\006result\030\001 \001(\005\"&\n\024Proto_CSHeartBeatReq\022"
    "\016\n\006userid\030\001 \001(\005\"&\n\024Proto_SCHeartBeatRsp\022"
    "\016\n\006result\030\001 \001(\005\"\312\001\n\032Proto_CSRegisterAcco"
    "untReq\022\017\n\007account\030\001 \001(\t\022\020\n\010password\030\002 \001("
    "\t\022\021\n\tnick_name\030\003 \001(\t\022:\n\010ext_data\030\004 \001(\0132("
    ".proto_login.Proto_UserLoginExternalData"
    "\022\020\n\010is_phone\030\005 \001(\010\022\021\n\tdevice_id\030\006 \001(\t\022\025\n"
    "\rcontract_info\030\007 \001(\t\"\227\001\n\032Proto_SCRegiste"
    "rAccountRsp\022\016\n\006result\030\001 \001(\005\022\017\n\007user_id\030\002"
    " \001(\004\022\022\n\nlogin_time\030\003 \001(\004\022\r\n\005token\030\004 \001(\t\022"
    "5\n\016server_ip_list\030\005 \003(\0132\035.proto_login.Pr"
    "oto_CSServerIP\",\n\020Proto_CSServerIP\022\n\n\002ip"
    "\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"z\n\027Proto_CSAccountL"
    "oginReq\022\022\n\nlogin_type\030\001 \001(\r\022\017\n\007account\030\002"
    " \001(\t\022\020\n\010password\030\003 \001(\t\022\021\n\tdevice_id\030\004 \001("
    "\t\022\025\n\rcontract_info\030\005 \001(\t\"\224\001\n\027Proto_SCAcc"
    "ountLoginRsp\022\016\n\006result\030\001 \001(\005\022\017\n\007user_id\030"
    "\002 \001(\004\022\022\n\nlogin_time\030\003 \001(\004\022\r\n\005token\030\004 \001(\t"
    "\0225\n\016server_ip_list\030\005 \003(\0132\035.proto_login.P"
    "roto_CSServerIP\"\227\001\n\024Proto_CSUserLoginReq"
    "\022\017\n\007account\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\004\022\022\n\nlo"
    "gin_time\030\003 \001(\004\022\r\n\005token\030\004 \001(\t\022:\n\010ext_dat"
    "a\030\005 \001(\0132(.proto_login.Proto_UserLoginExt"
    "ernalData\"u\n\024Proto_SCUserLoginRsp\022\016\n\006res"
    "ult\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\004\022<\n\013detail_dat"
    "a\030\003 \001(\0132\'.proto_login.Proto_UserDetailCo"
    "mmonData\"(\n\025Proto_CSChangeFaceReq\022\017\n\007fac"
    "e_id\030\001 \001(\r\"8\n\025Proto_SCChangeFaceRsp\022\016\n\006r"
    "esult\030\001 \001(\005\022\017\n\007face_id\030\002 \001(\005\".\n\031Proto_CS"
    "ChangeNickNameReq\022\021\n\tnick_name\030\001 \001(\t\"=\n\030"
    "Proto_SCChangNickNameRsp\022\016\n\006result\030\001 \001(\005"
    "\022\021\n\tnick_name\030\002 \001(\t\"-\n\024Proto_CSQueryUser"
    "Req\022\025\n\rquery_user_id\030\001 \003(\004\"b\n\024Proto_SCQu"
    "eryUserRsp\022\016\n\006result\030\001 \001(\005\022:\n\017query_user"
    "_list\030\002 \003(\0132!.proto_login.Proto_UserSimp"
    "leData\"M\n%Proto_CS_LoginServer_PhoneAuto"
    "CodeReq\022\021\n\tphone_num\030\001 \001(\004\022\021\n\tcode_type\030"
    "\002 \001(\r\"]\n%Proto_SC_LoginServer_PhoneAutoC"
    "odeRsp\022\016\n\006result\030\001 \001(\005\022\021\n\tphone_num\030\002 \001("
    "\004\022\021\n\tcode_type\030\003 \001(\r\"N\n&Proto_CS_LoginSe"
    "rver_CheckPhoneCodeReq\022\021\n\tphone_num\030\001 \001("
    "\004\022\021\n\tauth_code\030\002 \001(\r\"^\n&Proto_SC_LoginSe"
    "rver_CheckPhoneCodeRsp\022\016\n\006result\030\001 \001(\005\022\021"
    "\n\tphone_num\030\002 \001(\004\022\021\n\tcode_type\030\003 \001(\r\"V\n\032"
    "Proto_CS_ChangePasswordReq\022\017\n\007account\030\001 "
    "\001(\t\022\024\n\014new_password\030\002 \001(\t\022\021\n\tdevice_id\030\003"
    " \001(\t\",\n\032Proto_SC_ChangePasswordRsp\022\016\n\006re"
    "sult\030\001 \001(\005\"J\n%Proto_SC_LoginServer_Notif"
    "yPhoneCheck\022\016\n\006result\030\001 \001(\005\022\021\n\tphone_num"
    "\030\002 \001(\004\"H\n Proto_CS_Player_PhoneAutoCodeR"
    "eq\022\021\n\tphone_num\030\001 \001(\004\022\021\n\tcode_type\030\002 \001(\r"
    "\"X\n Proto_SC_Player_PhoneAutoCodeRsp\022\016\n\006"
    "result\030\001 \001(\005\022\021\n\tphone_num\030\002 \001(\004\022\021\n\tcode_"
    "type\030\003 \001(\r\"I\n!Proto_CS_Player_CheckPhone"
    "CodeReq\022\021\n\tphone_num\030\001 \001(\004\022\021\n\tauth_code\030"
    "\002 \001(\r\"Y\n!Proto_SC_Player_CheckPhoneCodeR"
    "sp\022\016\n\006result\030\001 \001(\005\022\021\n\tphone_num\030\002 \001(\004\022\021\n"
    "\tcode_type\030\003 \001(\r\"i\n\034Proto_CS_Player_Bind"
    "PhoneReq\022\021\n\tphone_num\030\001 \001(\004\022\021\n\tnick_name"
    "\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\021\n\tdevice_id\030\004 "
    "\001(\t\"T\n\034Proto_SC_Player_BindPhoneRsp\022\016\n\006r"
    "esult\030\001 \001(\005\022\021\n\tphone_num\030\002 \001(\004\022\021\n\tnick_n"
    "ame\030\003 \001(\t\"N\n#Proto_CS_PhoneChangeBandPas"
    "swordReq\022\021\n\tphone_num\030\001 \001(\004\022\024\n\014new_passw"
    "ord\030\002 \001(\t\"5\n#Proto_SC_PhoneChangeBandPas"
    "swordRsp\022\016\n\006result\030\001 \001(\005\"5\n\034Proto_CSChec"
    "kContractInfoReq\022\025\n\rcontract_info\030\001 \001(\t\""
    ".\n\034Proto_SCCheckContractInfoRsp\022\016\n\006resul"
    "t\030\001 \001(\005\")\n\027Proto_SCKetPlayerNotify\022\016\n\006re"
    "sult\030\001 \001(\005*\357\t\n\022Proto_LOGIN_CS_CMD\022&\n!NF_"
    "CS_MSG_CHECK_CONTRACT_INFO_REQ\020\351\007\022&\n!NF_"
    "SC_MSG_CHECK_CONTRACT_INFO_RSP\020\352\007\022\034\n\027NF_"
    "CS_Msg_ReConnect_REQ\020\355\007\022\034\n\027NF_SC_Msg_ReC"
    "onnect_RSP\020\356\007\022\037\n\032NF_SC_Msg_KitPlayer_Not"
    "ify\020\357\007\022\034\n\027NF_CS_Msg_HeartBeat_REQ\020\361\007\022\034\n\027"
    "NF_SC_Msg_HeartBeat_RSP\020\362\007\022\036\n\031NF_CS_MSG_"
    "AccountLoginReq\020\315\010\022\036\n\031NF_SC_MSG_AccountL"
    "oginRsp\020\316\010\022\033\n\026NF_CS_MSG_UserLoginReq\020\317\010\022"
    "\033\n\026NF_SC_MSG_UserLoginRsp\020\320\010\022!\n\034NF_CS_MS"
    "G_RegisterAccountReq\020\321\010\022!\n\034NF_SC_MSG_Reg"
    "isterAccountRsp\020\322\010\022+\n&NF_CS_MSG_LoginSer"
    "ver_PhoneAutoCodeReq\020\323\010\022+\n&NF_SC_MSG_Log"
    "inServer_PhoneAutoCodeRsp\020\324\010\022,\n\'NF_CS_MS"
    "G_LoginServer_CheckPhoneCodeReq\020\325\010\022,\n\'NF"
    "_SC_MSG_LoginServer_CheckPhoneCodeRsp\020\326\010"
    "\022\"\n\035NF_CS_MSG_CHANGE_PASSWORD_REQ\020\327\010\022#\n\036"
    "NF_SC_MSG_CHANGE_PASSWORD_RESP\020\330\010\022+\n&NF_"
    "SC_MSG_LoginServer_NotifyPhoneCheck\020\331\010\022%"
    "\n NF_CS_MSG_PlayerPhoneAutoCodeReq\020\352\010\022%\n"
    " NF_SC_MSG_PlayerPhoneAutoCodeRsp\020\353\010\022&\n!"
    "NF_CS_MSG_PlayerCheckPhoneCodeReq\020\354\010\022&\n!"
    "NF_SC_MSG_PlayerCheckPhoneCodeRsp\020\355\010\022\034\n\027"
    "NF_CS_MSG_ChangeFaceReq\020\356\010\022\034\n\027NF_SC_MSG_"
    "ChangeFaceRsp\020\357\010\022 \n\033NF_CS_MSG_ChangeNick"
    "NameReq\020\360\010\022 \n\033NF_SC_MSG_ChangeNickNameRs"
    "p\020\361\010\022\035\n\030NF_CS_MSG_BIND_PHONE_REQ\020\362\010\022\035\n\030N"
    "F_CS_MSG_BIND_PHONE_RSP\020\363\010\022,\n\'NF_CS_MSG_"
    "PHONE_CHANG_BAND_PASSWORD_REQ\020\364\010\022,\n\'NF_C"
    "S_MSG_PHONE_CHANG_BAND_PASSWORD_RSP\020\365\010\022%"
    "\n NF_CS_QUERY_USER_SIMPLE_DATA_REQ\020\256\t\022%\n"
    " NF_SC_QUERY_USER_SIMPLE_DATA_RSP\020\257\t", 4716);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_cs_login.proto", &protobuf_RegisterTypes);
  Proto_UserSimpleData::default_instance_ = new Proto_UserSimpleData();
  Proto_UserLoginExternalData::default_instance_ = new Proto_UserLoginExternalData();
  Proto_UserDetailCommonData::default_instance_ = new Proto_UserDetailCommonData();
  Proto_CSReconnectReq::default_instance_ = new Proto_CSReconnectReq();
  Proto_SCReconnectRsp::default_instance_ = new Proto_SCReconnectRsp();
  Proto_CSHeartBeatReq::default_instance_ = new Proto_CSHeartBeatReq();
  Proto_SCHeartBeatRsp::default_instance_ = new Proto_SCHeartBeatRsp();
  Proto_CSRegisterAccountReq::default_instance_ = new Proto_CSRegisterAccountReq();
  Proto_SCRegisterAccountRsp::default_instance_ = new Proto_SCRegisterAccountRsp();
  Proto_CSServerIP::default_instance_ = new Proto_CSServerIP();
  Proto_CSAccountLoginReq::default_instance_ = new Proto_CSAccountLoginReq();
  Proto_SCAccountLoginRsp::default_instance_ = new Proto_SCAccountLoginRsp();
  Proto_CSUserLoginReq::default_instance_ = new Proto_CSUserLoginReq();
  Proto_SCUserLoginRsp::default_instance_ = new Proto_SCUserLoginRsp();
  Proto_CSChangeFaceReq::default_instance_ = new Proto_CSChangeFaceReq();
  Proto_SCChangeFaceRsp::default_instance_ = new Proto_SCChangeFaceRsp();
  Proto_CSChangeNickNameReq::default_instance_ = new Proto_CSChangeNickNameReq();
  Proto_SCChangNickNameRsp::default_instance_ = new Proto_SCChangNickNameRsp();
  Proto_CSQueryUserReq::default_instance_ = new Proto_CSQueryUserReq();
  Proto_SCQueryUserRsp::default_instance_ = new Proto_SCQueryUserRsp();
  Proto_CS_LoginServer_PhoneAutoCodeReq::default_instance_ = new Proto_CS_LoginServer_PhoneAutoCodeReq();
  Proto_SC_LoginServer_PhoneAutoCodeRsp::default_instance_ = new Proto_SC_LoginServer_PhoneAutoCodeRsp();
  Proto_CS_LoginServer_CheckPhoneCodeReq::default_instance_ = new Proto_CS_LoginServer_CheckPhoneCodeReq();
  Proto_SC_LoginServer_CheckPhoneCodeRsp::default_instance_ = new Proto_SC_LoginServer_CheckPhoneCodeRsp();
  Proto_CS_ChangePasswordReq::default_instance_ = new Proto_CS_ChangePasswordReq();
  Proto_SC_ChangePasswordRsp::default_instance_ = new Proto_SC_ChangePasswordRsp();
  Proto_SC_LoginServer_NotifyPhoneCheck::default_instance_ = new Proto_SC_LoginServer_NotifyPhoneCheck();
  Proto_CS_Player_PhoneAutoCodeReq::default_instance_ = new Proto_CS_Player_PhoneAutoCodeReq();
  Proto_SC_Player_PhoneAutoCodeRsp::default_instance_ = new Proto_SC_Player_PhoneAutoCodeRsp();
  Proto_CS_Player_CheckPhoneCodeReq::default_instance_ = new Proto_CS_Player_CheckPhoneCodeReq();
  Proto_SC_Player_CheckPhoneCodeRsp::default_instance_ = new Proto_SC_Player_CheckPhoneCodeRsp();
  Proto_CS_Player_BindPhoneReq::default_instance_ = new Proto_CS_Player_BindPhoneReq();
  Proto_SC_Player_BindPhoneRsp::default_instance_ = new Proto_SC_Player_BindPhoneRsp();
  Proto_CS_PhoneChangeBandPasswordReq::default_instance_ = new Proto_CS_PhoneChangeBandPasswordReq();
  Proto_SC_PhoneChangeBandPasswordRsp::default_instance_ = new Proto_SC_PhoneChangeBandPasswordRsp();
  Proto_CSCheckContractInfoReq::default_instance_ = new Proto_CSCheckContractInfoReq();
  Proto_SCCheckContractInfoRsp::default_instance_ = new Proto_SCCheckContractInfoRsp();
  Proto_SCKetPlayerNotify::default_instance_ = new Proto_SCKetPlayerNotify();
  Proto_UserSimpleData::default_instance_->InitAsDefaultInstance();
  Proto_UserLoginExternalData::default_instance_->InitAsDefaultInstance();
  Proto_UserDetailCommonData::default_instance_->InitAsDefaultInstance();
  Proto_CSReconnectReq::default_instance_->InitAsDefaultInstance();
  Proto_SCReconnectRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSHeartBeatReq::default_instance_->InitAsDefaultInstance();
  Proto_SCHeartBeatRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSRegisterAccountReq::default_instance_->InitAsDefaultInstance();
  Proto_SCRegisterAccountRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSServerIP::default_instance_->InitAsDefaultInstance();
  Proto_CSAccountLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_SCAccountLoginRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSUserLoginReq::default_instance_->InitAsDefaultInstance();
  Proto_SCUserLoginRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSChangeFaceReq::default_instance_->InitAsDefaultInstance();
  Proto_SCChangeFaceRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSChangeNickNameReq::default_instance_->InitAsDefaultInstance();
  Proto_SCChangNickNameRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSQueryUserReq::default_instance_->InitAsDefaultInstance();
  Proto_SCQueryUserRsp::default_instance_->InitAsDefaultInstance();
  Proto_CS_LoginServer_PhoneAutoCodeReq::default_instance_->InitAsDefaultInstance();
  Proto_SC_LoginServer_PhoneAutoCodeRsp::default_instance_->InitAsDefaultInstance();
  Proto_CS_LoginServer_CheckPhoneCodeReq::default_instance_->InitAsDefaultInstance();
  Proto_SC_LoginServer_CheckPhoneCodeRsp::default_instance_->InitAsDefaultInstance();
  Proto_CS_ChangePasswordReq::default_instance_->InitAsDefaultInstance();
  Proto_SC_ChangePasswordRsp::default_instance_->InitAsDefaultInstance();
  Proto_SC_LoginServer_NotifyPhoneCheck::default_instance_->InitAsDefaultInstance();
  Proto_CS_Player_PhoneAutoCodeReq::default_instance_->InitAsDefaultInstance();
  Proto_SC_Player_PhoneAutoCodeRsp::default_instance_->InitAsDefaultInstance();
  Proto_CS_Player_CheckPhoneCodeReq::default_instance_->InitAsDefaultInstance();
  Proto_SC_Player_CheckPhoneCodeRsp::default_instance_->InitAsDefaultInstance();
  Proto_CS_Player_BindPhoneReq::default_instance_->InitAsDefaultInstance();
  Proto_SC_Player_BindPhoneRsp::default_instance_->InitAsDefaultInstance();
  Proto_CS_PhoneChangeBandPasswordReq::default_instance_->InitAsDefaultInstance();
  Proto_SC_PhoneChangeBandPasswordRsp::default_instance_->InitAsDefaultInstance();
  Proto_CSCheckContractInfoReq::default_instance_->InitAsDefaultInstance();
  Proto_SCCheckContractInfoRsp::default_instance_->InitAsDefaultInstance();
  Proto_SCKetPlayerNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fcs_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fcs_5flogin_2eproto {
  StaticDescriptorInitializer_proto_5fcs_5flogin_2eproto() {
    protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  }
} static_descriptor_initializer_proto_5fcs_5flogin_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_LOGIN_CS_CMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LOGIN_CS_CMD_descriptor_;
}
bool Proto_LOGIN_CS_CMD_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1005:
    case 1006:
    case 1007:
    case 1009:
    case 1010:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1198:
    case 1199:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UserSimpleData::kUseridFieldNumber;
const int Proto_UserSimpleData::kNicknameFieldNumber;
const int Proto_UserSimpleData::kFaceFieldNumber;
const int Proto_UserSimpleData::kGenderFieldNumber;
const int Proto_UserSimpleData::kAgeFieldNumber;
#endif  // !_MSC_VER

Proto_UserSimpleData::Proto_UserSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UserSimpleData::InitAsDefaultInstance() {
}

Proto_UserSimpleData::Proto_UserSimpleData(const Proto_UserSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UserSimpleData::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = 0u;
  gender_ = 0u;
  age_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UserSimpleData::~Proto_UserSimpleData() {
  SharedDtor();
}

void Proto_UserSimpleData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void Proto_UserSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UserSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UserSimpleData_descriptor_;
}

const Proto_UserSimpleData& Proto_UserSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_UserSimpleData* Proto_UserSimpleData::default_instance_ = NULL;

Proto_UserSimpleData* Proto_UserSimpleData::New() const {
  return new Proto_UserSimpleData;
}

void Proto_UserSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    face_ = 0u;
    gender_ = 0u;
    age_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UserSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_face;
        break;
      }

      // optional uint32 face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_age;
        break;
      }

      // optional uint32 age = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UserSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->face(), output);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gender(), output);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UserSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional uint32 face = 3;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->face(), target);
  }

  // optional uint32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gender(), target);
  }

  // optional uint32 age = 5;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UserSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face());
    }

    // optional uint32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint32 age = 5;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UserSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UserSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UserSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UserSimpleData::MergeFrom(const Proto_UserSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UserSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UserSimpleData::CopyFrom(const Proto_UserSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UserSimpleData::IsInitialized() const {

  return true;
}

void Proto_UserSimpleData::Swap(Proto_UserSimpleData* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(face_, other->face_);
    std::swap(gender_, other->gender_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UserSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UserSimpleData_descriptor_;
  metadata.reflection = Proto_UserSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UserLoginExternalData::kAreadIdFieldNumber;
const int Proto_UserLoginExternalData::kAgentIdFieldNumber;
const int Proto_UserLoginExternalData::kChannelIdFieldNumber;
const int Proto_UserLoginExternalData::kReferralCodeFieldNumber;
const int Proto_UserLoginExternalData::kPlatformOsFieldNumber;
const int Proto_UserLoginExternalData::kCountryFieldNumber;
const int Proto_UserLoginExternalData::kProvinceFieldNumber;
const int Proto_UserLoginExternalData::kCityFieldNumber;
const int Proto_UserLoginExternalData::kPhoneModeFieldNumber;
const int Proto_UserLoginExternalData::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

Proto_UserLoginExternalData::Proto_UserLoginExternalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UserLoginExternalData::InitAsDefaultInstance() {
}

Proto_UserLoginExternalData::Proto_UserLoginExternalData(const Proto_UserLoginExternalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UserLoginExternalData::SharedCtor() {
  _cached_size_ = 0;
  aread_id_ = 0u;
  agent_id_ = 0u;
  channel_id_ = 0u;
  referral_code_ = GOOGLE_ULONGLONG(0);
  platform_os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UserLoginExternalData::~Proto_UserLoginExternalData() {
  SharedDtor();
}

void Proto_UserLoginExternalData::SharedDtor() {
  if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_os_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (province_ != &::google::protobuf::internal::kEmptyString) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_mode_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_UserLoginExternalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UserLoginExternalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UserLoginExternalData_descriptor_;
}

const Proto_UserLoginExternalData& Proto_UserLoginExternalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_UserLoginExternalData* Proto_UserLoginExternalData::default_instance_ = NULL;

Proto_UserLoginExternalData* Proto_UserLoginExternalData::New() const {
  return new Proto_UserLoginExternalData;
}

void Proto_UserLoginExternalData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    aread_id_ = 0u;
    agent_id_ = 0u;
    channel_id_ = 0u;
    referral_code_ = GOOGLE_ULONGLONG(0);
    if (has_platform_os()) {
      if (platform_os_ != &::google::protobuf::internal::kEmptyString) {
        platform_os_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::kEmptyString) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::kEmptyString) {
        city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_phone_mode()) {
      if (phone_mode_ != &::google::protobuf::internal::kEmptyString) {
        phone_mode_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UserLoginExternalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 aread_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aread_id_)));
          set_has_aread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agent_id;
        break;
      }

      // optional uint32 agent_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_referral_code;
        break;
      }

      // optional uint64 referral_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referral_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &referral_code_)));
          set_has_referral_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_platform_os;
        break;
      }

      // optional string platform_os = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform_os().data(), this->platform_os().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_country;
        break;
      }

      // optional string country = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_province;
        break;
      }

      // optional string province = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_city;
        break;
      }

      // optional string city = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_phone_mode;
        break;
      }

      // optional string phone_mode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_mode().data(), this->phone_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device_id;
        break;
      }

      // optional string device_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UserLoginExternalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 aread_id = 1;
  if (has_aread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aread_id(), output);
  }

  // optional uint32 agent_id = 2;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->agent_id(), output);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_id(), output);
  }

  // optional uint64 referral_code = 4;
  if (has_referral_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->referral_code(), output);
  }

  // optional string platform_os = 5;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->platform_os(), output);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->country(), output);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->province(), output);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->city(), output);
  }

  // optional string phone_mode = 9;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_mode().data(), this->phone_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->phone_mode(), output);
  }

  // optional string device_id = 10;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UserLoginExternalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 aread_id = 1;
  if (has_aread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aread_id(), target);
  }

  // optional uint32 agent_id = 2;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->agent_id(), target);
  }

  // optional uint32 channel_id = 3;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_id(), target);
  }

  // optional uint64 referral_code = 4;
  if (has_referral_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->referral_code(), target);
  }

  // optional string platform_os = 5;
  if (has_platform_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_os().data(), this->platform_os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform_os(), target);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->province(), target);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->city(), target);
  }

  // optional string phone_mode = 9;
  if (has_phone_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_mode().data(), this->phone_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->phone_mode(), target);
  }

  // optional string device_id = 10;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UserLoginExternalData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 aread_id = 1;
    if (has_aread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aread_id());
    }

    // optional uint32 agent_id = 2;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agent_id());
    }

    // optional uint32 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint64 referral_code = 4;
    if (has_referral_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->referral_code());
    }

    // optional string platform_os = 5;
    if (has_platform_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_os());
    }

    // optional string country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string province = 7;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 8;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string phone_mode = 9;
    if (has_phone_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_mode());
    }

    // optional string device_id = 10;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UserLoginExternalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UserLoginExternalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UserLoginExternalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UserLoginExternalData::MergeFrom(const Proto_UserLoginExternalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aread_id()) {
      set_aread_id(from.aread_id());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_referral_code()) {
      set_referral_code(from.referral_code());
    }
    if (from.has_platform_os()) {
      set_platform_os(from.platform_os());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phone_mode()) {
      set_phone_mode(from.phone_mode());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UserLoginExternalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UserLoginExternalData::CopyFrom(const Proto_UserLoginExternalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UserLoginExternalData::IsInitialized() const {

  return true;
}

void Proto_UserLoginExternalData::Swap(Proto_UserLoginExternalData* other) {
  if (other != this) {
    std::swap(aread_id_, other->aread_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(referral_code_, other->referral_code_);
    std::swap(platform_os_, other->platform_os_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(phone_mode_, other->phone_mode_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UserLoginExternalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UserLoginExternalData_descriptor_;
  metadata.reflection = Proto_UserLoginExternalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UserDetailCommonData::kNickNameFieldNumber;
const int Proto_UserDetailCommonData::kFaceIdFieldNumber;
const int Proto_UserDetailCommonData::kGenderFieldNumber;
const int Proto_UserDetailCommonData::kJettonFieldNumber;
const int Proto_UserDetailCommonData::kBankJettonFieldNumber;
const int Proto_UserDetailCommonData::kAgentIdFieldNumber;
const int Proto_UserDetailCommonData::kPhonenumFieldNumber;
const int Proto_UserDetailCommonData::kVipLevelFieldNumber;
const int Proto_UserDetailCommonData::kAreadIdFieldNumber;
const int Proto_UserDetailCommonData::kReferrerIdFieldNumber;
const int Proto_UserDetailCommonData::kFirstRechargeFieldNumber;
const int Proto_UserDetailCommonData::kShowUseridFieldNumber;
#endif  // !_MSC_VER

Proto_UserDetailCommonData::Proto_UserDetailCommonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UserDetailCommonData::InitAsDefaultInstance() {
}

Proto_UserDetailCommonData::Proto_UserDetailCommonData(const Proto_UserDetailCommonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UserDetailCommonData::SharedCtor() {
  _cached_size_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_id_ = 0u;
  gender_ = 0u;
  jetton_ = GOOGLE_ULONGLONG(0);
  bank_jetton_ = GOOGLE_ULONGLONG(0);
  agent_id_ = GOOGLE_ULONGLONG(0);
  phonenum_ = GOOGLE_ULONGLONG(0);
  vip_level_ = 0u;
  aread_id_ = 0u;
  referrer_id_ = GOOGLE_ULONGLONG(0);
  first_recharge_ = false;
  show_userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UserDetailCommonData::~Proto_UserDetailCommonData() {
  SharedDtor();
}

void Proto_UserDetailCommonData::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_UserDetailCommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UserDetailCommonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UserDetailCommonData_descriptor_;
}

const Proto_UserDetailCommonData& Proto_UserDetailCommonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_UserDetailCommonData* Proto_UserDetailCommonData::default_instance_ = NULL;

Proto_UserDetailCommonData* Proto_UserDetailCommonData::New() const {
  return new Proto_UserDetailCommonData;
}

void Proto_UserDetailCommonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    face_id_ = 0u;
    gender_ = 0u;
    jetton_ = GOOGLE_ULONGLONG(0);
    bank_jetton_ = GOOGLE_ULONGLONG(0);
    agent_id_ = GOOGLE_ULONGLONG(0);
    phonenum_ = GOOGLE_ULONGLONG(0);
    vip_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    aread_id_ = 0u;
    referrer_id_ = GOOGLE_ULONGLONG(0);
    first_recharge_ = false;
    show_userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UserDetailCommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nick_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_id;
        break;
      }

      // optional uint32 face_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jetton;
        break;
      }

      // optional uint64 jetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bank_jetton;
        break;
      }

      // optional uint64 bank_jetton = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bank_jetton_)));
          set_has_bank_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agent_id;
        break;
      }

      // optional uint64 agent_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &agent_id_)));
          set_has_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_phonenum;
        break;
      }

      // optional uint64 phonenum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phonenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_aread_id;
        break;
      }

      // optional uint32 aread_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aread_id_)));
          set_has_aread_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_referrer_id;
        break;
      }

      // optional uint64 referrer_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referrer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &referrer_id_)));
          set_has_referrer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_first_recharge;
        break;
      }

      // optional bool first_recharge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_recharge_)));
          set_has_first_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_show_userid;
        break;
      }

      // optional uint64 show_userid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_userid_)));
          set_has_show_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UserDetailCommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nick_name = 1;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nick_name(), output);
  }

  // optional uint32 face_id = 2;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->face_id(), output);
  }

  // optional uint32 gender = 3;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gender(), output);
  }

  // optional uint64 jetton = 4;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->jetton(), output);
  }

  // optional uint64 bank_jetton = 5;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bank_jetton(), output);
  }

  // optional uint64 agent_id = 6;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->agent_id(), output);
  }

  // optional uint64 phonenum = 7;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->phonenum(), output);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vip_level(), output);
  }

  // optional uint32 aread_id = 9;
  if (has_aread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->aread_id(), output);
  }

  // optional uint64 referrer_id = 10;
  if (has_referrer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->referrer_id(), output);
  }

  // optional bool first_recharge = 11;
  if (has_first_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->first_recharge(), output);
  }

  // optional uint64 show_userid = 12;
  if (has_show_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->show_userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UserDetailCommonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nick_name = 1;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nick_name(), target);
  }

  // optional uint32 face_id = 2;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->face_id(), target);
  }

  // optional uint32 gender = 3;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gender(), target);
  }

  // optional uint64 jetton = 4;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->jetton(), target);
  }

  // optional uint64 bank_jetton = 5;
  if (has_bank_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bank_jetton(), target);
  }

  // optional uint64 agent_id = 6;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->agent_id(), target);
  }

  // optional uint64 phonenum = 7;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->phonenum(), target);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vip_level(), target);
  }

  // optional uint32 aread_id = 9;
  if (has_aread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->aread_id(), target);
  }

  // optional uint64 referrer_id = 10;
  if (has_referrer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->referrer_id(), target);
  }

  // optional bool first_recharge = 11;
  if (has_first_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->first_recharge(), target);
  }

  // optional uint64 show_userid = 12;
  if (has_show_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->show_userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UserDetailCommonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nick_name = 1;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional uint32 face_id = 2;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

    // optional uint32 gender = 3;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gender());
    }

    // optional uint64 jetton = 4;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jetton());
    }

    // optional uint64 bank_jetton = 5;
    if (has_bank_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bank_jetton());
    }

    // optional uint64 agent_id = 6;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->agent_id());
    }

    // optional uint64 phonenum = 7;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phonenum());
    }

    // optional uint32 vip_level = 8;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 aread_id = 9;
    if (has_aread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aread_id());
    }

    // optional uint64 referrer_id = 10;
    if (has_referrer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->referrer_id());
    }

    // optional bool first_recharge = 11;
    if (has_first_recharge()) {
      total_size += 1 + 1;
    }

    // optional uint64 show_userid = 12;
    if (has_show_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UserDetailCommonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UserDetailCommonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UserDetailCommonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UserDetailCommonData::MergeFrom(const Proto_UserDetailCommonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
    if (from.has_agent_id()) {
      set_agent_id(from.agent_id());
    }
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_aread_id()) {
      set_aread_id(from.aread_id());
    }
    if (from.has_referrer_id()) {
      set_referrer_id(from.referrer_id());
    }
    if (from.has_first_recharge()) {
      set_first_recharge(from.first_recharge());
    }
    if (from.has_show_userid()) {
      set_show_userid(from.show_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UserDetailCommonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UserDetailCommonData::CopyFrom(const Proto_UserDetailCommonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UserDetailCommonData::IsInitialized() const {

  return true;
}

void Proto_UserDetailCommonData::Swap(Proto_UserDetailCommonData* other) {
  if (other != this) {
    std::swap(nick_name_, other->nick_name_);
    std::swap(face_id_, other->face_id_);
    std::swap(gender_, other->gender_);
    std::swap(jetton_, other->jetton_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(phonenum_, other->phonenum_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(aread_id_, other->aread_id_);
    std::swap(referrer_id_, other->referrer_id_);
    std::swap(first_recharge_, other->first_recharge_);
    std::swap(show_userid_, other->show_userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UserDetailCommonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UserDetailCommonData_descriptor_;
  metadata.reflection = Proto_UserDetailCommonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSReconnectReq::kUseridFieldNumber;
#endif  // !_MSC_VER

Proto_CSReconnectReq::Proto_CSReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSReconnectReq::InitAsDefaultInstance() {
}

Proto_CSReconnectReq::Proto_CSReconnectReq(const Proto_CSReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSReconnectReq::~Proto_CSReconnectReq() {
  SharedDtor();
}

void Proto_CSReconnectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CSReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSReconnectReq_descriptor_;
}

const Proto_CSReconnectReq& Proto_CSReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSReconnectReq* Proto_CSReconnectReq::default_instance_ = NULL;

Proto_CSReconnectReq* Proto_CSReconnectReq::New() const {
  return new Proto_CSReconnectReq;
}

void Proto_CSReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSReconnectReq::MergeFrom(const Proto_CSReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSReconnectReq::CopyFrom(const Proto_CSReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSReconnectReq::IsInitialized() const {

  return true;
}

void Proto_CSReconnectReq::Swap(Proto_CSReconnectReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSReconnectReq_descriptor_;
  metadata.reflection = Proto_CSReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCReconnectRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SCReconnectRsp::Proto_SCReconnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCReconnectRsp::InitAsDefaultInstance() {
}

Proto_SCReconnectRsp::Proto_SCReconnectRsp(const Proto_SCReconnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCReconnectRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCReconnectRsp::~Proto_SCReconnectRsp() {
  SharedDtor();
}

void Proto_SCReconnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCReconnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCReconnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCReconnectRsp_descriptor_;
}

const Proto_SCReconnectRsp& Proto_SCReconnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCReconnectRsp* Proto_SCReconnectRsp::default_instance_ = NULL;

Proto_SCReconnectRsp* Proto_SCReconnectRsp::New() const {
  return new Proto_SCReconnectRsp;
}

void Proto_SCReconnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCReconnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCReconnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCReconnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCReconnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCReconnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCReconnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCReconnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCReconnectRsp::MergeFrom(const Proto_SCReconnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCReconnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCReconnectRsp::CopyFrom(const Proto_SCReconnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCReconnectRsp::IsInitialized() const {

  return true;
}

void Proto_SCReconnectRsp::Swap(Proto_SCReconnectRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCReconnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCReconnectRsp_descriptor_;
  metadata.reflection = Proto_SCReconnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSHeartBeatReq::kUseridFieldNumber;
#endif  // !_MSC_VER

Proto_CSHeartBeatReq::Proto_CSHeartBeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSHeartBeatReq::InitAsDefaultInstance() {
}

Proto_CSHeartBeatReq::Proto_CSHeartBeatReq(const Proto_CSHeartBeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSHeartBeatReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSHeartBeatReq::~Proto_CSHeartBeatReq() {
  SharedDtor();
}

void Proto_CSHeartBeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CSHeartBeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSHeartBeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSHeartBeatReq_descriptor_;
}

const Proto_CSHeartBeatReq& Proto_CSHeartBeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSHeartBeatReq* Proto_CSHeartBeatReq::default_instance_ = NULL;

Proto_CSHeartBeatReq* Proto_CSHeartBeatReq::New() const {
  return new Proto_CSHeartBeatReq;
}

void Proto_CSHeartBeatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSHeartBeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSHeartBeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSHeartBeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSHeartBeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSHeartBeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSHeartBeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSHeartBeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSHeartBeatReq::MergeFrom(const Proto_CSHeartBeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSHeartBeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSHeartBeatReq::CopyFrom(const Proto_CSHeartBeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSHeartBeatReq::IsInitialized() const {

  return true;
}

void Proto_CSHeartBeatReq::Swap(Proto_CSHeartBeatReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSHeartBeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSHeartBeatReq_descriptor_;
  metadata.reflection = Proto_CSHeartBeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCHeartBeatRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SCHeartBeatRsp::Proto_SCHeartBeatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCHeartBeatRsp::InitAsDefaultInstance() {
}

Proto_SCHeartBeatRsp::Proto_SCHeartBeatRsp(const Proto_SCHeartBeatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCHeartBeatRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCHeartBeatRsp::~Proto_SCHeartBeatRsp() {
  SharedDtor();
}

void Proto_SCHeartBeatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCHeartBeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCHeartBeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCHeartBeatRsp_descriptor_;
}

const Proto_SCHeartBeatRsp& Proto_SCHeartBeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCHeartBeatRsp* Proto_SCHeartBeatRsp::default_instance_ = NULL;

Proto_SCHeartBeatRsp* Proto_SCHeartBeatRsp::New() const {
  return new Proto_SCHeartBeatRsp;
}

void Proto_SCHeartBeatRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCHeartBeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCHeartBeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCHeartBeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCHeartBeatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCHeartBeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCHeartBeatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCHeartBeatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCHeartBeatRsp::MergeFrom(const Proto_SCHeartBeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCHeartBeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCHeartBeatRsp::CopyFrom(const Proto_SCHeartBeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCHeartBeatRsp::IsInitialized() const {

  return true;
}

void Proto_SCHeartBeatRsp::Swap(Proto_SCHeartBeatRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCHeartBeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCHeartBeatRsp_descriptor_;
  metadata.reflection = Proto_SCHeartBeatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSRegisterAccountReq::kAccountFieldNumber;
const int Proto_CSRegisterAccountReq::kPasswordFieldNumber;
const int Proto_CSRegisterAccountReq::kNickNameFieldNumber;
const int Proto_CSRegisterAccountReq::kExtDataFieldNumber;
const int Proto_CSRegisterAccountReq::kIsPhoneFieldNumber;
const int Proto_CSRegisterAccountReq::kDeviceIdFieldNumber;
const int Proto_CSRegisterAccountReq::kContractInfoFieldNumber;
#endif  // !_MSC_VER

Proto_CSRegisterAccountReq::Proto_CSRegisterAccountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSRegisterAccountReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_login::Proto_UserLoginExternalData*>(&::proto_login::Proto_UserLoginExternalData::default_instance());
}

Proto_CSRegisterAccountReq::Proto_CSRegisterAccountReq(const Proto_CSRegisterAccountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSRegisterAccountReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_data_ = NULL;
  is_phone_ = false;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contract_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSRegisterAccountReq::~Proto_CSRegisterAccountReq() {
  SharedDtor();
}

void Proto_CSRegisterAccountReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_info_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_CSRegisterAccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSRegisterAccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSRegisterAccountReq_descriptor_;
}

const Proto_CSRegisterAccountReq& Proto_CSRegisterAccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSRegisterAccountReq* Proto_CSRegisterAccountReq::default_instance_ = NULL;

Proto_CSRegisterAccountReq* Proto_CSRegisterAccountReq::New() const {
  return new Proto_CSRegisterAccountReq;
}

void Proto_CSRegisterAccountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_login::Proto_UserLoginExternalData::Clear();
    }
    is_phone_ = false;
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_contract_info()) {
      if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
        contract_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSRegisterAccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ext_data;
        break;
      }

      // optional .proto_login.Proto_UserLoginExternalData ext_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_phone;
        break;
      }

      // optional bool is_phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_phone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phone_)));
          set_has_is_phone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_device_id;
        break;
      }

      // optional string device_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_contract_info;
        break;
      }

      // optional string contract_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract_info().data(), this->contract_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSRegisterAccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 4;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ext_data(), output);
  }

  // optional bool is_phone = 5;
  if (has_is_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_phone(), output);
  }

  // optional string device_id = 6;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->device_id(), output);
  }

  // optional string contract_info = 7;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->contract_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSRegisterAccountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 4;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ext_data(), target);
  }

  // optional bool is_phone = 5;
  if (has_is_phone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_phone(), target);
  }

  // optional string device_id = 6;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_id(), target);
  }

  // optional string contract_info = 7;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contract_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSRegisterAccountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional .proto_login.Proto_UserLoginExternalData ext_data = 4;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

    // optional bool is_phone = 5;
    if (has_is_phone()) {
      total_size += 1 + 1;
    }

    // optional string device_id = 6;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string contract_info = 7;
    if (has_contract_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSRegisterAccountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSRegisterAccountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSRegisterAccountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSRegisterAccountReq::MergeFrom(const Proto_CSRegisterAccountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_login::Proto_UserLoginExternalData::MergeFrom(from.ext_data());
    }
    if (from.has_is_phone()) {
      set_is_phone(from.is_phone());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_contract_info()) {
      set_contract_info(from.contract_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSRegisterAccountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSRegisterAccountReq::CopyFrom(const Proto_CSRegisterAccountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSRegisterAccountReq::IsInitialized() const {

  return true;
}

void Proto_CSRegisterAccountReq::Swap(Proto_CSRegisterAccountReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(is_phone_, other->is_phone_);
    std::swap(device_id_, other->device_id_);
    std::swap(contract_info_, other->contract_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSRegisterAccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSRegisterAccountReq_descriptor_;
  metadata.reflection = Proto_CSRegisterAccountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCRegisterAccountRsp::kResultFieldNumber;
const int Proto_SCRegisterAccountRsp::kUserIdFieldNumber;
const int Proto_SCRegisterAccountRsp::kLoginTimeFieldNumber;
const int Proto_SCRegisterAccountRsp::kTokenFieldNumber;
const int Proto_SCRegisterAccountRsp::kServerIpListFieldNumber;
#endif  // !_MSC_VER

Proto_SCRegisterAccountRsp::Proto_SCRegisterAccountRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCRegisterAccountRsp::InitAsDefaultInstance() {
}

Proto_SCRegisterAccountRsp::Proto_SCRegisterAccountRsp(const Proto_SCRegisterAccountRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCRegisterAccountRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  login_time_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCRegisterAccountRsp::~Proto_SCRegisterAccountRsp() {
  SharedDtor();
}

void Proto_SCRegisterAccountRsp::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void Proto_SCRegisterAccountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCRegisterAccountRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCRegisterAccountRsp_descriptor_;
}

const Proto_SCRegisterAccountRsp& Proto_SCRegisterAccountRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCRegisterAccountRsp* Proto_SCRegisterAccountRsp::default_instance_ = NULL;

Proto_SCRegisterAccountRsp* Proto_SCRegisterAccountRsp::New() const {
  return new Proto_SCRegisterAccountRsp;
}

void Proto_SCRegisterAccountRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    login_time_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  server_ip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCRegisterAccountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_ip_list;
        break;
      }

      // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_ip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_ip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCRegisterAccountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 login_time = 3;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->login_time(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
  for (int i = 0; i < this->server_ip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->server_ip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCRegisterAccountRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 login_time = 3;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->login_time(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
  for (int i = 0; i < this->server_ip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->server_ip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCRegisterAccountRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 login_time = 3;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
  total_size += 1 * this->server_ip_list_size();
  for (int i = 0; i < this->server_ip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_ip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCRegisterAccountRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCRegisterAccountRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCRegisterAccountRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCRegisterAccountRsp::MergeFrom(const Proto_SCRegisterAccountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_ip_list_.MergeFrom(from.server_ip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCRegisterAccountRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCRegisterAccountRsp::CopyFrom(const Proto_SCRegisterAccountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCRegisterAccountRsp::IsInitialized() const {

  return true;
}

void Proto_SCRegisterAccountRsp::Swap(Proto_SCRegisterAccountRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(login_time_, other->login_time_);
    std::swap(token_, other->token_);
    server_ip_list_.Swap(&other->server_ip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCRegisterAccountRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCRegisterAccountRsp_descriptor_;
  metadata.reflection = Proto_SCRegisterAccountRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSServerIP::kIpFieldNumber;
const int Proto_CSServerIP::kPortFieldNumber;
#endif  // !_MSC_VER

Proto_CSServerIP::Proto_CSServerIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSServerIP::InitAsDefaultInstance() {
}

Proto_CSServerIP::Proto_CSServerIP(const Proto_CSServerIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSServerIP::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSServerIP::~Proto_CSServerIP() {
  SharedDtor();
}

void Proto_CSServerIP::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CSServerIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSServerIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSServerIP_descriptor_;
}

const Proto_CSServerIP& Proto_CSServerIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSServerIP* Proto_CSServerIP::default_instance_ = NULL;

Proto_CSServerIP* Proto_CSServerIP::New() const {
  return new Proto_CSServerIP;
}

void Proto_CSServerIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSServerIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSServerIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSServerIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSServerIP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSServerIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSServerIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSServerIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSServerIP::MergeFrom(const Proto_CSServerIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSServerIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSServerIP::CopyFrom(const Proto_CSServerIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSServerIP::IsInitialized() const {

  return true;
}

void Proto_CSServerIP::Swap(Proto_CSServerIP* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSServerIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSServerIP_descriptor_;
  metadata.reflection = Proto_CSServerIP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSAccountLoginReq::kLoginTypeFieldNumber;
const int Proto_CSAccountLoginReq::kAccountFieldNumber;
const int Proto_CSAccountLoginReq::kPasswordFieldNumber;
const int Proto_CSAccountLoginReq::kDeviceIdFieldNumber;
const int Proto_CSAccountLoginReq::kContractInfoFieldNumber;
#endif  // !_MSC_VER

Proto_CSAccountLoginReq::Proto_CSAccountLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSAccountLoginReq::InitAsDefaultInstance() {
}

Proto_CSAccountLoginReq::Proto_CSAccountLoginReq(const Proto_CSAccountLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSAccountLoginReq::SharedCtor() {
  _cached_size_ = 0;
  login_type_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contract_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSAccountLoginReq::~Proto_CSAccountLoginReq() {
  SharedDtor();
}

void Proto_CSAccountLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_info_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CSAccountLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSAccountLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSAccountLoginReq_descriptor_;
}

const Proto_CSAccountLoginReq& Proto_CSAccountLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSAccountLoginReq* Proto_CSAccountLoginReq::default_instance_ = NULL;

Proto_CSAccountLoginReq* Proto_CSAccountLoginReq::New() const {
  return new Proto_CSAccountLoginReq;
}

void Proto_CSAccountLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    login_type_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_contract_info()) {
      if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
        contract_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSAccountLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 login_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_id;
        break;
      }

      // optional string device_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_contract_info;
        break;
      }

      // optional string contract_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract_info().data(), this->contract_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSAccountLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 login_type = 1;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->login_type(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string device_id = 4;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_id(), output);
  }

  // optional string contract_info = 5;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->contract_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSAccountLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 login_type = 1;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->login_type(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string device_id = 4;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_id(), target);
  }

  // optional string contract_info = 5;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->contract_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSAccountLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 login_type = 1;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_type());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string device_id = 4;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional string contract_info = 5;
    if (has_contract_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSAccountLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSAccountLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSAccountLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSAccountLoginReq::MergeFrom(const Proto_CSAccountLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_contract_info()) {
      set_contract_info(from.contract_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSAccountLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSAccountLoginReq::CopyFrom(const Proto_CSAccountLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSAccountLoginReq::IsInitialized() const {

  return true;
}

void Proto_CSAccountLoginReq::Swap(Proto_CSAccountLoginReq* other) {
  if (other != this) {
    std::swap(login_type_, other->login_type_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(device_id_, other->device_id_);
    std::swap(contract_info_, other->contract_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSAccountLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSAccountLoginReq_descriptor_;
  metadata.reflection = Proto_CSAccountLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCAccountLoginRsp::kResultFieldNumber;
const int Proto_SCAccountLoginRsp::kUserIdFieldNumber;
const int Proto_SCAccountLoginRsp::kLoginTimeFieldNumber;
const int Proto_SCAccountLoginRsp::kTokenFieldNumber;
const int Proto_SCAccountLoginRsp::kServerIpListFieldNumber;
#endif  // !_MSC_VER

Proto_SCAccountLoginRsp::Proto_SCAccountLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCAccountLoginRsp::InitAsDefaultInstance() {
}

Proto_SCAccountLoginRsp::Proto_SCAccountLoginRsp(const Proto_SCAccountLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCAccountLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  login_time_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCAccountLoginRsp::~Proto_SCAccountLoginRsp() {
  SharedDtor();
}

void Proto_SCAccountLoginRsp::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void Proto_SCAccountLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCAccountLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCAccountLoginRsp_descriptor_;
}

const Proto_SCAccountLoginRsp& Proto_SCAccountLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCAccountLoginRsp* Proto_SCAccountLoginRsp::default_instance_ = NULL;

Proto_SCAccountLoginRsp* Proto_SCAccountLoginRsp::New() const {
  return new Proto_SCAccountLoginRsp;
}

void Proto_SCAccountLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    login_time_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  server_ip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCAccountLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_ip_list;
        break;
      }

      // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server_ip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_ip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCAccountLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 login_time = 3;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->login_time(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
  for (int i = 0; i < this->server_ip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->server_ip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCAccountLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 login_time = 3;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->login_time(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
  for (int i = 0; i < this->server_ip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->server_ip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCAccountLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 login_time = 3;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  // repeated .proto_login.Proto_CSServerIP server_ip_list = 5;
  total_size += 1 * this->server_ip_list_size();
  for (int i = 0; i < this->server_ip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server_ip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCAccountLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCAccountLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCAccountLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCAccountLoginRsp::MergeFrom(const Proto_SCAccountLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  server_ip_list_.MergeFrom(from.server_ip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCAccountLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCAccountLoginRsp::CopyFrom(const Proto_SCAccountLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCAccountLoginRsp::IsInitialized() const {

  return true;
}

void Proto_SCAccountLoginRsp::Swap(Proto_SCAccountLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(login_time_, other->login_time_);
    std::swap(token_, other->token_);
    server_ip_list_.Swap(&other->server_ip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCAccountLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCAccountLoginRsp_descriptor_;
  metadata.reflection = Proto_SCAccountLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSUserLoginReq::kAccountFieldNumber;
const int Proto_CSUserLoginReq::kUserIdFieldNumber;
const int Proto_CSUserLoginReq::kLoginTimeFieldNumber;
const int Proto_CSUserLoginReq::kTokenFieldNumber;
const int Proto_CSUserLoginReq::kExtDataFieldNumber;
#endif  // !_MSC_VER

Proto_CSUserLoginReq::Proto_CSUserLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSUserLoginReq::InitAsDefaultInstance() {
  ext_data_ = const_cast< ::proto_login::Proto_UserLoginExternalData*>(&::proto_login::Proto_UserLoginExternalData::default_instance());
}

Proto_CSUserLoginReq::Proto_CSUserLoginReq(const Proto_CSUserLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSUserLoginReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  login_time_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSUserLoginReq::~Proto_CSUserLoginReq() {
  SharedDtor();
}

void Proto_CSUserLoginReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete ext_data_;
  }
}

void Proto_CSUserLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSUserLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSUserLoginReq_descriptor_;
}

const Proto_CSUserLoginReq& Proto_CSUserLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSUserLoginReq* Proto_CSUserLoginReq::default_instance_ = NULL;

Proto_CSUserLoginReq* Proto_CSUserLoginReq::New() const {
  return new Proto_CSUserLoginReq;
}

void Proto_CSUserLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    login_time_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::proto_login::Proto_UserLoginExternalData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSUserLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ext_data;
        break;
      }

      // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSUserLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 login_time = 3;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->login_time(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ext_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSUserLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 login_time = 3;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->login_time(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
  if (has_ext_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ext_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSUserLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 login_time = 3;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional .proto_login.Proto_UserLoginExternalData ext_data = 5;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSUserLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSUserLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSUserLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSUserLoginReq::MergeFrom(const Proto_CSUserLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_ext_data()) {
      mutable_ext_data()->::proto_login::Proto_UserLoginExternalData::MergeFrom(from.ext_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSUserLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSUserLoginReq::CopyFrom(const Proto_CSUserLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSUserLoginReq::IsInitialized() const {

  return true;
}

void Proto_CSUserLoginReq::Swap(Proto_CSUserLoginReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(user_id_, other->user_id_);
    std::swap(login_time_, other->login_time_);
    std::swap(token_, other->token_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSUserLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSUserLoginReq_descriptor_;
  metadata.reflection = Proto_CSUserLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCUserLoginRsp::kResultFieldNumber;
const int Proto_SCUserLoginRsp::kUserIdFieldNumber;
const int Proto_SCUserLoginRsp::kDetailDataFieldNumber;
#endif  // !_MSC_VER

Proto_SCUserLoginRsp::Proto_SCUserLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCUserLoginRsp::InitAsDefaultInstance() {
  detail_data_ = const_cast< ::proto_login::Proto_UserDetailCommonData*>(&::proto_login::Proto_UserDetailCommonData::default_instance());
}

Proto_SCUserLoginRsp::Proto_SCUserLoginRsp(const Proto_SCUserLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCUserLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  detail_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCUserLoginRsp::~Proto_SCUserLoginRsp() {
  SharedDtor();
}

void Proto_SCUserLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_data_;
  }
}

void Proto_SCUserLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCUserLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCUserLoginRsp_descriptor_;
}

const Proto_SCUserLoginRsp& Proto_SCUserLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCUserLoginRsp* Proto_SCUserLoginRsp::default_instance_ = NULL;

Proto_SCUserLoginRsp* Proto_SCUserLoginRsp::New() const {
  return new Proto_SCUserLoginRsp;
}

void Proto_SCUserLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_detail_data()) {
      if (detail_data_ != NULL) detail_data_->::proto_login::Proto_UserDetailCommonData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCUserLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail_data;
        break;
      }

      // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCUserLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
  if (has_detail_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCUserLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
  if (has_detail_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCUserLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_login.Proto_UserDetailCommonData detail_data = 3;
    if (has_detail_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCUserLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCUserLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCUserLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCUserLoginRsp::MergeFrom(const Proto_SCUserLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_detail_data()) {
      mutable_detail_data()->::proto_login::Proto_UserDetailCommonData::MergeFrom(from.detail_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCUserLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCUserLoginRsp::CopyFrom(const Proto_SCUserLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCUserLoginRsp::IsInitialized() const {

  return true;
}

void Proto_SCUserLoginRsp::Swap(Proto_SCUserLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(detail_data_, other->detail_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCUserLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCUserLoginRsp_descriptor_;
  metadata.reflection = Proto_SCUserLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSChangeFaceReq::kFaceIdFieldNumber;
#endif  // !_MSC_VER

Proto_CSChangeFaceReq::Proto_CSChangeFaceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSChangeFaceReq::InitAsDefaultInstance() {
}

Proto_CSChangeFaceReq::Proto_CSChangeFaceReq(const Proto_CSChangeFaceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSChangeFaceReq::SharedCtor() {
  _cached_size_ = 0;
  face_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSChangeFaceReq::~Proto_CSChangeFaceReq() {
  SharedDtor();
}

void Proto_CSChangeFaceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CSChangeFaceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSChangeFaceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSChangeFaceReq_descriptor_;
}

const Proto_CSChangeFaceReq& Proto_CSChangeFaceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSChangeFaceReq* Proto_CSChangeFaceReq::default_instance_ = NULL;

Proto_CSChangeFaceReq* Proto_CSChangeFaceReq::New() const {
  return new Proto_CSChangeFaceReq;
}

void Proto_CSChangeFaceReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    face_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSChangeFaceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 face_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSChangeFaceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 face_id = 1;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSChangeFaceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 face_id = 1;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSChangeFaceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 face_id = 1;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSChangeFaceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSChangeFaceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSChangeFaceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSChangeFaceReq::MergeFrom(const Proto_CSChangeFaceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSChangeFaceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSChangeFaceReq::CopyFrom(const Proto_CSChangeFaceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSChangeFaceReq::IsInitialized() const {

  return true;
}

void Proto_CSChangeFaceReq::Swap(Proto_CSChangeFaceReq* other) {
  if (other != this) {
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSChangeFaceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSChangeFaceReq_descriptor_;
  metadata.reflection = Proto_CSChangeFaceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCChangeFaceRsp::kResultFieldNumber;
const int Proto_SCChangeFaceRsp::kFaceIdFieldNumber;
#endif  // !_MSC_VER

Proto_SCChangeFaceRsp::Proto_SCChangeFaceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCChangeFaceRsp::InitAsDefaultInstance() {
}

Proto_SCChangeFaceRsp::Proto_SCChangeFaceRsp(const Proto_SCChangeFaceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCChangeFaceRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  face_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCChangeFaceRsp::~Proto_SCChangeFaceRsp() {
  SharedDtor();
}

void Proto_SCChangeFaceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCChangeFaceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCChangeFaceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCChangeFaceRsp_descriptor_;
}

const Proto_SCChangeFaceRsp& Proto_SCChangeFaceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCChangeFaceRsp* Proto_SCChangeFaceRsp::default_instance_ = NULL;

Proto_SCChangeFaceRsp* Proto_SCChangeFaceRsp::New() const {
  return new Proto_SCChangeFaceRsp;
}

void Proto_SCChangeFaceRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    face_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCChangeFaceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face_id;
        break;
      }

      // optional int32 face_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCChangeFaceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 face_id = 2;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCChangeFaceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 face_id = 2;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCChangeFaceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 face_id = 2;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCChangeFaceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCChangeFaceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCChangeFaceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCChangeFaceRsp::MergeFrom(const Proto_SCChangeFaceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCChangeFaceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCChangeFaceRsp::CopyFrom(const Proto_SCChangeFaceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCChangeFaceRsp::IsInitialized() const {

  return true;
}

void Proto_SCChangeFaceRsp::Swap(Proto_SCChangeFaceRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCChangeFaceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCChangeFaceRsp_descriptor_;
  metadata.reflection = Proto_SCChangeFaceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSChangeNickNameReq::kNickNameFieldNumber;
#endif  // !_MSC_VER

Proto_CSChangeNickNameReq::Proto_CSChangeNickNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSChangeNickNameReq::InitAsDefaultInstance() {
}

Proto_CSChangeNickNameReq::Proto_CSChangeNickNameReq(const Proto_CSChangeNickNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSChangeNickNameReq::SharedCtor() {
  _cached_size_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSChangeNickNameReq::~Proto_CSChangeNickNameReq() {
  SharedDtor();
}

void Proto_CSChangeNickNameReq::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CSChangeNickNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSChangeNickNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSChangeNickNameReq_descriptor_;
}

const Proto_CSChangeNickNameReq& Proto_CSChangeNickNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSChangeNickNameReq* Proto_CSChangeNickNameReq::default_instance_ = NULL;

Proto_CSChangeNickNameReq* Proto_CSChangeNickNameReq::New() const {
  return new Proto_CSChangeNickNameReq;
}

void Proto_CSChangeNickNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSChangeNickNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nick_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSChangeNickNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nick_name = 1;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSChangeNickNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nick_name = 1;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSChangeNickNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nick_name = 1;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSChangeNickNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSChangeNickNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSChangeNickNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSChangeNickNameReq::MergeFrom(const Proto_CSChangeNickNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSChangeNickNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSChangeNickNameReq::CopyFrom(const Proto_CSChangeNickNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSChangeNickNameReq::IsInitialized() const {

  return true;
}

void Proto_CSChangeNickNameReq::Swap(Proto_CSChangeNickNameReq* other) {
  if (other != this) {
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSChangeNickNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSChangeNickNameReq_descriptor_;
  metadata.reflection = Proto_CSChangeNickNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCChangNickNameRsp::kResultFieldNumber;
const int Proto_SCChangNickNameRsp::kNickNameFieldNumber;
#endif  // !_MSC_VER

Proto_SCChangNickNameRsp::Proto_SCChangNickNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCChangNickNameRsp::InitAsDefaultInstance() {
}

Proto_SCChangNickNameRsp::Proto_SCChangNickNameRsp(const Proto_SCChangNickNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCChangNickNameRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCChangNickNameRsp::~Proto_SCChangNickNameRsp() {
  SharedDtor();
}

void Proto_SCChangNickNameRsp::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_SCChangNickNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCChangNickNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCChangNickNameRsp_descriptor_;
}

const Proto_SCChangNickNameRsp& Proto_SCChangNickNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCChangNickNameRsp* Proto_SCChangNickNameRsp::default_instance_ = NULL;

Proto_SCChangNickNameRsp* Proto_SCChangNickNameRsp::New() const {
  return new Proto_SCChangNickNameRsp;
}

void Proto_SCChangNickNameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCChangNickNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCChangNickNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCChangNickNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCChangNickNameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCChangNickNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCChangNickNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCChangNickNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCChangNickNameRsp::MergeFrom(const Proto_SCChangNickNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCChangNickNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCChangNickNameRsp::CopyFrom(const Proto_SCChangNickNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCChangNickNameRsp::IsInitialized() const {

  return true;
}

void Proto_SCChangNickNameRsp::Swap(Proto_SCChangNickNameRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCChangNickNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCChangNickNameRsp_descriptor_;
  metadata.reflection = Proto_SCChangNickNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSQueryUserReq::kQueryUserIdFieldNumber;
#endif  // !_MSC_VER

Proto_CSQueryUserReq::Proto_CSQueryUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSQueryUserReq::InitAsDefaultInstance() {
}

Proto_CSQueryUserReq::Proto_CSQueryUserReq(const Proto_CSQueryUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSQueryUserReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSQueryUserReq::~Proto_CSQueryUserReq() {
  SharedDtor();
}

void Proto_CSQueryUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CSQueryUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSQueryUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSQueryUserReq_descriptor_;
}

const Proto_CSQueryUserReq& Proto_CSQueryUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSQueryUserReq* Proto_CSQueryUserReq::default_instance_ = NULL;

Proto_CSQueryUserReq* Proto_CSQueryUserReq::New() const {
  return new Proto_CSQueryUserReq;
}

void Proto_CSQueryUserReq::Clear() {
  query_user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSQueryUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 query_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_query_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_query_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_query_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSQueryUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 query_user_id = 1;
  for (int i = 0; i < this->query_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->query_user_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSQueryUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 query_user_id = 1;
  for (int i = 0; i < this->query_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->query_user_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSQueryUserReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 query_user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->query_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->query_user_id(i));
    }
    total_size += 1 * this->query_user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSQueryUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSQueryUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSQueryUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSQueryUserReq::MergeFrom(const Proto_CSQueryUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_user_id_.MergeFrom(from.query_user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSQueryUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSQueryUserReq::CopyFrom(const Proto_CSQueryUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSQueryUserReq::IsInitialized() const {

  return true;
}

void Proto_CSQueryUserReq::Swap(Proto_CSQueryUserReq* other) {
  if (other != this) {
    query_user_id_.Swap(&other->query_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSQueryUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSQueryUserReq_descriptor_;
  metadata.reflection = Proto_CSQueryUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCQueryUserRsp::kResultFieldNumber;
const int Proto_SCQueryUserRsp::kQueryUserListFieldNumber;
#endif  // !_MSC_VER

Proto_SCQueryUserRsp::Proto_SCQueryUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCQueryUserRsp::InitAsDefaultInstance() {
}

Proto_SCQueryUserRsp::Proto_SCQueryUserRsp(const Proto_SCQueryUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCQueryUserRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCQueryUserRsp::~Proto_SCQueryUserRsp() {
  SharedDtor();
}

void Proto_SCQueryUserRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCQueryUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCQueryUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCQueryUserRsp_descriptor_;
}

const Proto_SCQueryUserRsp& Proto_SCQueryUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCQueryUserRsp* Proto_SCQueryUserRsp::default_instance_ = NULL;

Proto_SCQueryUserRsp* Proto_SCQueryUserRsp::New() const {
  return new Proto_SCQueryUserRsp;
}

void Proto_SCQueryUserRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  query_user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCQueryUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query_user_list;
        break;
      }

      // repeated .proto_login.Proto_UserSimpleData query_user_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_query_user_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCQueryUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .proto_login.Proto_UserSimpleData query_user_list = 2;
  for (int i = 0; i < this->query_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->query_user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCQueryUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .proto_login.Proto_UserSimpleData query_user_list = 2;
  for (int i = 0; i < this->query_user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->query_user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCQueryUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_login.Proto_UserSimpleData query_user_list = 2;
  total_size += 1 * this->query_user_list_size();
  for (int i = 0; i < this->query_user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCQueryUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCQueryUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCQueryUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCQueryUserRsp::MergeFrom(const Proto_SCQueryUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_user_list_.MergeFrom(from.query_user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCQueryUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCQueryUserRsp::CopyFrom(const Proto_SCQueryUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCQueryUserRsp::IsInitialized() const {

  return true;
}

void Proto_SCQueryUserRsp::Swap(Proto_SCQueryUserRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    query_user_list_.Swap(&other->query_user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCQueryUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCQueryUserRsp_descriptor_;
  metadata.reflection = Proto_SCQueryUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CS_LoginServer_PhoneAutoCodeReq::kPhoneNumFieldNumber;
const int Proto_CS_LoginServer_PhoneAutoCodeReq::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

Proto_CS_LoginServer_PhoneAutoCodeReq::Proto_CS_LoginServer_PhoneAutoCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::InitAsDefaultInstance() {
}

Proto_CS_LoginServer_PhoneAutoCodeReq::Proto_CS_LoginServer_PhoneAutoCodeReq(const Proto_CS_LoginServer_PhoneAutoCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CS_LoginServer_PhoneAutoCodeReq::~Proto_CS_LoginServer_PhoneAutoCodeReq() {
  SharedDtor();
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CS_LoginServer_PhoneAutoCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_LoginServer_PhoneAutoCodeReq_descriptor_;
}

const Proto_CS_LoginServer_PhoneAutoCodeReq& Proto_CS_LoginServer_PhoneAutoCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CS_LoginServer_PhoneAutoCodeReq* Proto_CS_LoginServer_PhoneAutoCodeReq::default_instance_ = NULL;

Proto_CS_LoginServer_PhoneAutoCodeReq* Proto_CS_LoginServer_PhoneAutoCodeReq::New() const {
  return new Proto_CS_LoginServer_PhoneAutoCodeReq;
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CS_LoginServer_PhoneAutoCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional uint32 code_type = 2;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CS_LoginServer_PhoneAutoCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional uint32 code_type = 2;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CS_LoginServer_PhoneAutoCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code_type = 2;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CS_LoginServer_PhoneAutoCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CS_LoginServer_PhoneAutoCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::MergeFrom(const Proto_CS_LoginServer_PhoneAutoCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::CopyFrom(const Proto_CS_LoginServer_PhoneAutoCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CS_LoginServer_PhoneAutoCodeReq::IsInitialized() const {

  return true;
}

void Proto_CS_LoginServer_PhoneAutoCodeReq::Swap(Proto_CS_LoginServer_PhoneAutoCodeReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CS_LoginServer_PhoneAutoCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CS_LoginServer_PhoneAutoCodeReq_descriptor_;
  metadata.reflection = Proto_CS_LoginServer_PhoneAutoCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_LoginServer_PhoneAutoCodeRsp::kResultFieldNumber;
const int Proto_SC_LoginServer_PhoneAutoCodeRsp::kPhoneNumFieldNumber;
const int Proto_SC_LoginServer_PhoneAutoCodeRsp::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

Proto_SC_LoginServer_PhoneAutoCodeRsp::Proto_SC_LoginServer_PhoneAutoCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::InitAsDefaultInstance() {
}

Proto_SC_LoginServer_PhoneAutoCodeRsp::Proto_SC_LoginServer_PhoneAutoCodeRsp(const Proto_SC_LoginServer_PhoneAutoCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_LoginServer_PhoneAutoCodeRsp::~Proto_SC_LoginServer_PhoneAutoCodeRsp() {
  SharedDtor();
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_LoginServer_PhoneAutoCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_LoginServer_PhoneAutoCodeRsp_descriptor_;
}

const Proto_SC_LoginServer_PhoneAutoCodeRsp& Proto_SC_LoginServer_PhoneAutoCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_LoginServer_PhoneAutoCodeRsp* Proto_SC_LoginServer_PhoneAutoCodeRsp::default_instance_ = NULL;

Proto_SC_LoginServer_PhoneAutoCodeRsp* Proto_SC_LoginServer_PhoneAutoCodeRsp::New() const {
  return new Proto_SC_LoginServer_PhoneAutoCodeRsp;
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_LoginServer_PhoneAutoCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_LoginServer_PhoneAutoCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_LoginServer_PhoneAutoCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code_type = 3;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_LoginServer_PhoneAutoCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_LoginServer_PhoneAutoCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::MergeFrom(const Proto_SC_LoginServer_PhoneAutoCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::CopyFrom(const Proto_SC_LoginServer_PhoneAutoCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_LoginServer_PhoneAutoCodeRsp::IsInitialized() const {

  return true;
}

void Proto_SC_LoginServer_PhoneAutoCodeRsp::Swap(Proto_SC_LoginServer_PhoneAutoCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_LoginServer_PhoneAutoCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_LoginServer_PhoneAutoCodeRsp_descriptor_;
  metadata.reflection = Proto_SC_LoginServer_PhoneAutoCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CS_LoginServer_CheckPhoneCodeReq::kPhoneNumFieldNumber;
const int Proto_CS_LoginServer_CheckPhoneCodeReq::kAuthCodeFieldNumber;
#endif  // !_MSC_VER

Proto_CS_LoginServer_CheckPhoneCodeReq::Proto_CS_LoginServer_CheckPhoneCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::InitAsDefaultInstance() {
}

Proto_CS_LoginServer_CheckPhoneCodeReq::Proto_CS_LoginServer_CheckPhoneCodeReq(const Proto_CS_LoginServer_CheckPhoneCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  auth_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CS_LoginServer_CheckPhoneCodeReq::~Proto_CS_LoginServer_CheckPhoneCodeReq() {
  SharedDtor();
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CS_LoginServer_CheckPhoneCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_LoginServer_CheckPhoneCodeReq_descriptor_;
}

const Proto_CS_LoginServer_CheckPhoneCodeReq& Proto_CS_LoginServer_CheckPhoneCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CS_LoginServer_CheckPhoneCodeReq* Proto_CS_LoginServer_CheckPhoneCodeReq::default_instance_ = NULL;

Proto_CS_LoginServer_CheckPhoneCodeReq* Proto_CS_LoginServer_CheckPhoneCodeReq::New() const {
  return new Proto_CS_LoginServer_CheckPhoneCodeReq;
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    auth_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CS_LoginServer_CheckPhoneCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auth_code;
        break;
      }

      // optional uint32 auth_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_code_)));
          set_has_auth_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional uint32 auth_code = 2;
  if (has_auth_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auth_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CS_LoginServer_CheckPhoneCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional uint32 auth_code = 2;
  if (has_auth_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auth_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CS_LoginServer_CheckPhoneCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 auth_code = 2;
    if (has_auth_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CS_LoginServer_CheckPhoneCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CS_LoginServer_CheckPhoneCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::MergeFrom(const Proto_CS_LoginServer_CheckPhoneCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_auth_code()) {
      set_auth_code(from.auth_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::CopyFrom(const Proto_CS_LoginServer_CheckPhoneCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CS_LoginServer_CheckPhoneCodeReq::IsInitialized() const {

  return true;
}

void Proto_CS_LoginServer_CheckPhoneCodeReq::Swap(Proto_CS_LoginServer_CheckPhoneCodeReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(auth_code_, other->auth_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CS_LoginServer_CheckPhoneCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CS_LoginServer_CheckPhoneCodeReq_descriptor_;
  metadata.reflection = Proto_CS_LoginServer_CheckPhoneCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_LoginServer_CheckPhoneCodeRsp::kResultFieldNumber;
const int Proto_SC_LoginServer_CheckPhoneCodeRsp::kPhoneNumFieldNumber;
const int Proto_SC_LoginServer_CheckPhoneCodeRsp::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

Proto_SC_LoginServer_CheckPhoneCodeRsp::Proto_SC_LoginServer_CheckPhoneCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::InitAsDefaultInstance() {
}

Proto_SC_LoginServer_CheckPhoneCodeRsp::Proto_SC_LoginServer_CheckPhoneCodeRsp(const Proto_SC_LoginServer_CheckPhoneCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_LoginServer_CheckPhoneCodeRsp::~Proto_SC_LoginServer_CheckPhoneCodeRsp() {
  SharedDtor();
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_LoginServer_CheckPhoneCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_LoginServer_CheckPhoneCodeRsp_descriptor_;
}

const Proto_SC_LoginServer_CheckPhoneCodeRsp& Proto_SC_LoginServer_CheckPhoneCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_LoginServer_CheckPhoneCodeRsp* Proto_SC_LoginServer_CheckPhoneCodeRsp::default_instance_ = NULL;

Proto_SC_LoginServer_CheckPhoneCodeRsp* Proto_SC_LoginServer_CheckPhoneCodeRsp::New() const {
  return new Proto_SC_LoginServer_CheckPhoneCodeRsp;
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_LoginServer_CheckPhoneCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_LoginServer_CheckPhoneCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_LoginServer_CheckPhoneCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code_type = 3;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_LoginServer_CheckPhoneCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_LoginServer_CheckPhoneCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::MergeFrom(const Proto_SC_LoginServer_CheckPhoneCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::CopyFrom(const Proto_SC_LoginServer_CheckPhoneCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_LoginServer_CheckPhoneCodeRsp::IsInitialized() const {

  return true;
}

void Proto_SC_LoginServer_CheckPhoneCodeRsp::Swap(Proto_SC_LoginServer_CheckPhoneCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_LoginServer_CheckPhoneCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_LoginServer_CheckPhoneCodeRsp_descriptor_;
  metadata.reflection = Proto_SC_LoginServer_CheckPhoneCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CS_ChangePasswordReq::kAccountFieldNumber;
const int Proto_CS_ChangePasswordReq::kNewPasswordFieldNumber;
const int Proto_CS_ChangePasswordReq::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

Proto_CS_ChangePasswordReq::Proto_CS_ChangePasswordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CS_ChangePasswordReq::InitAsDefaultInstance() {
}

Proto_CS_ChangePasswordReq::Proto_CS_ChangePasswordReq(const Proto_CS_ChangePasswordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CS_ChangePasswordReq::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CS_ChangePasswordReq::~Proto_CS_ChangePasswordReq() {
  SharedDtor();
}

void Proto_CS_ChangePasswordReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (new_password_ != &::google::protobuf::internal::kEmptyString) {
    delete new_password_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CS_ChangePasswordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CS_ChangePasswordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_ChangePasswordReq_descriptor_;
}

const Proto_CS_ChangePasswordReq& Proto_CS_ChangePasswordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CS_ChangePasswordReq* Proto_CS_ChangePasswordReq::default_instance_ = NULL;

Proto_CS_ChangePasswordReq* Proto_CS_ChangePasswordReq::New() const {
  return new Proto_CS_ChangePasswordReq;
}

void Proto_CS_ChangePasswordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_new_password()) {
      if (new_password_ != &::google::protobuf::internal::kEmptyString) {
        new_password_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CS_ChangePasswordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_password;
        break;
      }

      // optional string new_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_password().data(), this->new_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_id;
        break;
      }

      // optional string device_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CS_ChangePasswordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_password(), output);
  }

  // optional string device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CS_ChangePasswordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_password(), target);
  }

  // optional string device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CS_ChangePasswordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string new_password = 2;
    if (has_new_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_password());
    }

    // optional string device_id = 3;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CS_ChangePasswordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CS_ChangePasswordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CS_ChangePasswordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CS_ChangePasswordReq::MergeFrom(const Proto_CS_ChangePasswordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_new_password()) {
      set_new_password(from.new_password());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CS_ChangePasswordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CS_ChangePasswordReq::CopyFrom(const Proto_CS_ChangePasswordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CS_ChangePasswordReq::IsInitialized() const {

  return true;
}

void Proto_CS_ChangePasswordReq::Swap(Proto_CS_ChangePasswordReq* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(new_password_, other->new_password_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CS_ChangePasswordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CS_ChangePasswordReq_descriptor_;
  metadata.reflection = Proto_CS_ChangePasswordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_ChangePasswordRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SC_ChangePasswordRsp::Proto_SC_ChangePasswordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_ChangePasswordRsp::InitAsDefaultInstance() {
}

Proto_SC_ChangePasswordRsp::Proto_SC_ChangePasswordRsp(const Proto_SC_ChangePasswordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_ChangePasswordRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_ChangePasswordRsp::~Proto_SC_ChangePasswordRsp() {
  SharedDtor();
}

void Proto_SC_ChangePasswordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SC_ChangePasswordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_ChangePasswordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_ChangePasswordRsp_descriptor_;
}

const Proto_SC_ChangePasswordRsp& Proto_SC_ChangePasswordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_ChangePasswordRsp* Proto_SC_ChangePasswordRsp::default_instance_ = NULL;

Proto_SC_ChangePasswordRsp* Proto_SC_ChangePasswordRsp::New() const {
  return new Proto_SC_ChangePasswordRsp;
}

void Proto_SC_ChangePasswordRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_ChangePasswordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_ChangePasswordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_ChangePasswordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_ChangePasswordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_ChangePasswordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_ChangePasswordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_ChangePasswordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_ChangePasswordRsp::MergeFrom(const Proto_SC_ChangePasswordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_ChangePasswordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_ChangePasswordRsp::CopyFrom(const Proto_SC_ChangePasswordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_ChangePasswordRsp::IsInitialized() const {

  return true;
}

void Proto_SC_ChangePasswordRsp::Swap(Proto_SC_ChangePasswordRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_ChangePasswordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_ChangePasswordRsp_descriptor_;
  metadata.reflection = Proto_SC_ChangePasswordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_LoginServer_NotifyPhoneCheck::kResultFieldNumber;
const int Proto_SC_LoginServer_NotifyPhoneCheck::kPhoneNumFieldNumber;
#endif  // !_MSC_VER

Proto_SC_LoginServer_NotifyPhoneCheck::Proto_SC_LoginServer_NotifyPhoneCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_LoginServer_NotifyPhoneCheck::InitAsDefaultInstance() {
}

Proto_SC_LoginServer_NotifyPhoneCheck::Proto_SC_LoginServer_NotifyPhoneCheck(const Proto_SC_LoginServer_NotifyPhoneCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_LoginServer_NotifyPhoneCheck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_LoginServer_NotifyPhoneCheck::~Proto_SC_LoginServer_NotifyPhoneCheck() {
  SharedDtor();
}

void Proto_SC_LoginServer_NotifyPhoneCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SC_LoginServer_NotifyPhoneCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_LoginServer_NotifyPhoneCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_LoginServer_NotifyPhoneCheck_descriptor_;
}

const Proto_SC_LoginServer_NotifyPhoneCheck& Proto_SC_LoginServer_NotifyPhoneCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_LoginServer_NotifyPhoneCheck* Proto_SC_LoginServer_NotifyPhoneCheck::default_instance_ = NULL;

Proto_SC_LoginServer_NotifyPhoneCheck* Proto_SC_LoginServer_NotifyPhoneCheck::New() const {
  return new Proto_SC_LoginServer_NotifyPhoneCheck;
}

void Proto_SC_LoginServer_NotifyPhoneCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_LoginServer_NotifyPhoneCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_LoginServer_NotifyPhoneCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_LoginServer_NotifyPhoneCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_LoginServer_NotifyPhoneCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_LoginServer_NotifyPhoneCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_LoginServer_NotifyPhoneCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_LoginServer_NotifyPhoneCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_LoginServer_NotifyPhoneCheck::MergeFrom(const Proto_SC_LoginServer_NotifyPhoneCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_LoginServer_NotifyPhoneCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_LoginServer_NotifyPhoneCheck::CopyFrom(const Proto_SC_LoginServer_NotifyPhoneCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_LoginServer_NotifyPhoneCheck::IsInitialized() const {

  return true;
}

void Proto_SC_LoginServer_NotifyPhoneCheck::Swap(Proto_SC_LoginServer_NotifyPhoneCheck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_LoginServer_NotifyPhoneCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_LoginServer_NotifyPhoneCheck_descriptor_;
  metadata.reflection = Proto_SC_LoginServer_NotifyPhoneCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CS_Player_PhoneAutoCodeReq::kPhoneNumFieldNumber;
const int Proto_CS_Player_PhoneAutoCodeReq::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

Proto_CS_Player_PhoneAutoCodeReq::Proto_CS_Player_PhoneAutoCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CS_Player_PhoneAutoCodeReq::InitAsDefaultInstance() {
}

Proto_CS_Player_PhoneAutoCodeReq::Proto_CS_Player_PhoneAutoCodeReq(const Proto_CS_Player_PhoneAutoCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CS_Player_PhoneAutoCodeReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CS_Player_PhoneAutoCodeReq::~Proto_CS_Player_PhoneAutoCodeReq() {
  SharedDtor();
}

void Proto_CS_Player_PhoneAutoCodeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CS_Player_PhoneAutoCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CS_Player_PhoneAutoCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_Player_PhoneAutoCodeReq_descriptor_;
}

const Proto_CS_Player_PhoneAutoCodeReq& Proto_CS_Player_PhoneAutoCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CS_Player_PhoneAutoCodeReq* Proto_CS_Player_PhoneAutoCodeReq::default_instance_ = NULL;

Proto_CS_Player_PhoneAutoCodeReq* Proto_CS_Player_PhoneAutoCodeReq::New() const {
  return new Proto_CS_Player_PhoneAutoCodeReq;
}

void Proto_CS_Player_PhoneAutoCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CS_Player_PhoneAutoCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CS_Player_PhoneAutoCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional uint32 code_type = 2;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CS_Player_PhoneAutoCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional uint32 code_type = 2;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CS_Player_PhoneAutoCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code_type = 2;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CS_Player_PhoneAutoCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CS_Player_PhoneAutoCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CS_Player_PhoneAutoCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CS_Player_PhoneAutoCodeReq::MergeFrom(const Proto_CS_Player_PhoneAutoCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CS_Player_PhoneAutoCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CS_Player_PhoneAutoCodeReq::CopyFrom(const Proto_CS_Player_PhoneAutoCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CS_Player_PhoneAutoCodeReq::IsInitialized() const {

  return true;
}

void Proto_CS_Player_PhoneAutoCodeReq::Swap(Proto_CS_Player_PhoneAutoCodeReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CS_Player_PhoneAutoCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CS_Player_PhoneAutoCodeReq_descriptor_;
  metadata.reflection = Proto_CS_Player_PhoneAutoCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_Player_PhoneAutoCodeRsp::kResultFieldNumber;
const int Proto_SC_Player_PhoneAutoCodeRsp::kPhoneNumFieldNumber;
const int Proto_SC_Player_PhoneAutoCodeRsp::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

Proto_SC_Player_PhoneAutoCodeRsp::Proto_SC_Player_PhoneAutoCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_Player_PhoneAutoCodeRsp::InitAsDefaultInstance() {
}

Proto_SC_Player_PhoneAutoCodeRsp::Proto_SC_Player_PhoneAutoCodeRsp(const Proto_SC_Player_PhoneAutoCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_Player_PhoneAutoCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_Player_PhoneAutoCodeRsp::~Proto_SC_Player_PhoneAutoCodeRsp() {
  SharedDtor();
}

void Proto_SC_Player_PhoneAutoCodeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SC_Player_PhoneAutoCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_Player_PhoneAutoCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_Player_PhoneAutoCodeRsp_descriptor_;
}

const Proto_SC_Player_PhoneAutoCodeRsp& Proto_SC_Player_PhoneAutoCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_Player_PhoneAutoCodeRsp* Proto_SC_Player_PhoneAutoCodeRsp::default_instance_ = NULL;

Proto_SC_Player_PhoneAutoCodeRsp* Proto_SC_Player_PhoneAutoCodeRsp::New() const {
  return new Proto_SC_Player_PhoneAutoCodeRsp;
}

void Proto_SC_Player_PhoneAutoCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_Player_PhoneAutoCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_Player_PhoneAutoCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_Player_PhoneAutoCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_Player_PhoneAutoCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code_type = 3;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_Player_PhoneAutoCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_Player_PhoneAutoCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_Player_PhoneAutoCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_Player_PhoneAutoCodeRsp::MergeFrom(const Proto_SC_Player_PhoneAutoCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_Player_PhoneAutoCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_Player_PhoneAutoCodeRsp::CopyFrom(const Proto_SC_Player_PhoneAutoCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_Player_PhoneAutoCodeRsp::IsInitialized() const {

  return true;
}

void Proto_SC_Player_PhoneAutoCodeRsp::Swap(Proto_SC_Player_PhoneAutoCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_Player_PhoneAutoCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_Player_PhoneAutoCodeRsp_descriptor_;
  metadata.reflection = Proto_SC_Player_PhoneAutoCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CS_Player_CheckPhoneCodeReq::kPhoneNumFieldNumber;
const int Proto_CS_Player_CheckPhoneCodeReq::kAuthCodeFieldNumber;
#endif  // !_MSC_VER

Proto_CS_Player_CheckPhoneCodeReq::Proto_CS_Player_CheckPhoneCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CS_Player_CheckPhoneCodeReq::InitAsDefaultInstance() {
}

Proto_CS_Player_CheckPhoneCodeReq::Proto_CS_Player_CheckPhoneCodeReq(const Proto_CS_Player_CheckPhoneCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CS_Player_CheckPhoneCodeReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  auth_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CS_Player_CheckPhoneCodeReq::~Proto_CS_Player_CheckPhoneCodeReq() {
  SharedDtor();
}

void Proto_CS_Player_CheckPhoneCodeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CS_Player_CheckPhoneCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CS_Player_CheckPhoneCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_Player_CheckPhoneCodeReq_descriptor_;
}

const Proto_CS_Player_CheckPhoneCodeReq& Proto_CS_Player_CheckPhoneCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CS_Player_CheckPhoneCodeReq* Proto_CS_Player_CheckPhoneCodeReq::default_instance_ = NULL;

Proto_CS_Player_CheckPhoneCodeReq* Proto_CS_Player_CheckPhoneCodeReq::New() const {
  return new Proto_CS_Player_CheckPhoneCodeReq;
}

void Proto_CS_Player_CheckPhoneCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    auth_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CS_Player_CheckPhoneCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auth_code;
        break;
      }

      // optional uint32 auth_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auth_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_code_)));
          set_has_auth_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CS_Player_CheckPhoneCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional uint32 auth_code = 2;
  if (has_auth_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auth_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CS_Player_CheckPhoneCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional uint32 auth_code = 2;
  if (has_auth_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auth_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CS_Player_CheckPhoneCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 auth_code = 2;
    if (has_auth_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CS_Player_CheckPhoneCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CS_Player_CheckPhoneCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CS_Player_CheckPhoneCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CS_Player_CheckPhoneCodeReq::MergeFrom(const Proto_CS_Player_CheckPhoneCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_auth_code()) {
      set_auth_code(from.auth_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CS_Player_CheckPhoneCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CS_Player_CheckPhoneCodeReq::CopyFrom(const Proto_CS_Player_CheckPhoneCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CS_Player_CheckPhoneCodeReq::IsInitialized() const {

  return true;
}

void Proto_CS_Player_CheckPhoneCodeReq::Swap(Proto_CS_Player_CheckPhoneCodeReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(auth_code_, other->auth_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CS_Player_CheckPhoneCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CS_Player_CheckPhoneCodeReq_descriptor_;
  metadata.reflection = Proto_CS_Player_CheckPhoneCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_Player_CheckPhoneCodeRsp::kResultFieldNumber;
const int Proto_SC_Player_CheckPhoneCodeRsp::kPhoneNumFieldNumber;
const int Proto_SC_Player_CheckPhoneCodeRsp::kCodeTypeFieldNumber;
#endif  // !_MSC_VER

Proto_SC_Player_CheckPhoneCodeRsp::Proto_SC_Player_CheckPhoneCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_Player_CheckPhoneCodeRsp::InitAsDefaultInstance() {
}

Proto_SC_Player_CheckPhoneCodeRsp::Proto_SC_Player_CheckPhoneCodeRsp(const Proto_SC_Player_CheckPhoneCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_Player_CheckPhoneCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  code_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_Player_CheckPhoneCodeRsp::~Proto_SC_Player_CheckPhoneCodeRsp() {
  SharedDtor();
}

void Proto_SC_Player_CheckPhoneCodeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SC_Player_CheckPhoneCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_Player_CheckPhoneCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_Player_CheckPhoneCodeRsp_descriptor_;
}

const Proto_SC_Player_CheckPhoneCodeRsp& Proto_SC_Player_CheckPhoneCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_Player_CheckPhoneCodeRsp* Proto_SC_Player_CheckPhoneCodeRsp::default_instance_ = NULL;

Proto_SC_Player_CheckPhoneCodeRsp* Proto_SC_Player_CheckPhoneCodeRsp::New() const {
  return new Proto_SC_Player_CheckPhoneCodeRsp;
}

void Proto_SC_Player_CheckPhoneCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
    code_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_Player_CheckPhoneCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code_type;
        break;
      }

      // optional uint32 code_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
          set_has_code_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_Player_CheckPhoneCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_Player_CheckPhoneCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  // optional uint32 code_type = 3;
  if (has_code_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_Player_CheckPhoneCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional uint32 code_type = 3;
    if (has_code_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_Player_CheckPhoneCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_Player_CheckPhoneCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_Player_CheckPhoneCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_Player_CheckPhoneCodeRsp::MergeFrom(const Proto_SC_Player_CheckPhoneCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_code_type()) {
      set_code_type(from.code_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_Player_CheckPhoneCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_Player_CheckPhoneCodeRsp::CopyFrom(const Proto_SC_Player_CheckPhoneCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_Player_CheckPhoneCodeRsp::IsInitialized() const {

  return true;
}

void Proto_SC_Player_CheckPhoneCodeRsp::Swap(Proto_SC_Player_CheckPhoneCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(code_type_, other->code_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_Player_CheckPhoneCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_Player_CheckPhoneCodeRsp_descriptor_;
  metadata.reflection = Proto_SC_Player_CheckPhoneCodeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CS_Player_BindPhoneReq::kPhoneNumFieldNumber;
const int Proto_CS_Player_BindPhoneReq::kNickNameFieldNumber;
const int Proto_CS_Player_BindPhoneReq::kPasswordFieldNumber;
const int Proto_CS_Player_BindPhoneReq::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

Proto_CS_Player_BindPhoneReq::Proto_CS_Player_BindPhoneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CS_Player_BindPhoneReq::InitAsDefaultInstance() {
}

Proto_CS_Player_BindPhoneReq::Proto_CS_Player_BindPhoneReq(const Proto_CS_Player_BindPhoneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CS_Player_BindPhoneReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CS_Player_BindPhoneReq::~Proto_CS_Player_BindPhoneReq() {
  SharedDtor();
}

void Proto_CS_Player_BindPhoneReq::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CS_Player_BindPhoneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CS_Player_BindPhoneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_Player_BindPhoneReq_descriptor_;
}

const Proto_CS_Player_BindPhoneReq& Proto_CS_Player_BindPhoneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CS_Player_BindPhoneReq* Proto_CS_Player_BindPhoneReq::default_instance_ = NULL;

Proto_CS_Player_BindPhoneReq* Proto_CS_Player_BindPhoneReq::New() const {
  return new Proto_CS_Player_BindPhoneReq;
}

void Proto_CS_Player_BindPhoneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CS_Player_BindPhoneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_id;
        break;
      }

      // optional string device_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CS_Player_BindPhoneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string device_id = 4;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CS_Player_BindPhoneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string device_id = 4;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CS_Player_BindPhoneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string device_id = 4;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CS_Player_BindPhoneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CS_Player_BindPhoneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CS_Player_BindPhoneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CS_Player_BindPhoneReq::MergeFrom(const Proto_CS_Player_BindPhoneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CS_Player_BindPhoneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CS_Player_BindPhoneReq::CopyFrom(const Proto_CS_Player_BindPhoneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CS_Player_BindPhoneReq::IsInitialized() const {

  return true;
}

void Proto_CS_Player_BindPhoneReq::Swap(Proto_CS_Player_BindPhoneReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(password_, other->password_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CS_Player_BindPhoneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CS_Player_BindPhoneReq_descriptor_;
  metadata.reflection = Proto_CS_Player_BindPhoneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_Player_BindPhoneRsp::kResultFieldNumber;
const int Proto_SC_Player_BindPhoneRsp::kPhoneNumFieldNumber;
const int Proto_SC_Player_BindPhoneRsp::kNickNameFieldNumber;
#endif  // !_MSC_VER

Proto_SC_Player_BindPhoneRsp::Proto_SC_Player_BindPhoneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_Player_BindPhoneRsp::InitAsDefaultInstance() {
}

Proto_SC_Player_BindPhoneRsp::Proto_SC_Player_BindPhoneRsp(const Proto_SC_Player_BindPhoneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_Player_BindPhoneRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_Player_BindPhoneRsp::~Proto_SC_Player_BindPhoneRsp() {
  SharedDtor();
}

void Proto_SC_Player_BindPhoneRsp::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_SC_Player_BindPhoneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_Player_BindPhoneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_Player_BindPhoneRsp_descriptor_;
}

const Proto_SC_Player_BindPhoneRsp& Proto_SC_Player_BindPhoneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_Player_BindPhoneRsp* Proto_SC_Player_BindPhoneRsp::default_instance_ = NULL;

Proto_SC_Player_BindPhoneRsp* Proto_SC_Player_BindPhoneRsp::New() const {
  return new Proto_SC_Player_BindPhoneRsp;
}

void Proto_SC_Player_BindPhoneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    phone_num_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_Player_BindPhoneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phone_num;
        break;
      }

      // optional uint64 phone_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_Player_BindPhoneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->phone_num(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_Player_BindPhoneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 phone_num = 2;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->phone_num(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_Player_BindPhoneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 phone_num = 2;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_Player_BindPhoneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_Player_BindPhoneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_Player_BindPhoneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_Player_BindPhoneRsp::MergeFrom(const Proto_SC_Player_BindPhoneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_Player_BindPhoneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_Player_BindPhoneRsp::CopyFrom(const Proto_SC_Player_BindPhoneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_Player_BindPhoneRsp::IsInitialized() const {

  return true;
}

void Proto_SC_Player_BindPhoneRsp::Swap(Proto_SC_Player_BindPhoneRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(phone_num_, other->phone_num_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_Player_BindPhoneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_Player_BindPhoneRsp_descriptor_;
  metadata.reflection = Proto_SC_Player_BindPhoneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CS_PhoneChangeBandPasswordReq::kPhoneNumFieldNumber;
const int Proto_CS_PhoneChangeBandPasswordReq::kNewPasswordFieldNumber;
#endif  // !_MSC_VER

Proto_CS_PhoneChangeBandPasswordReq::Proto_CS_PhoneChangeBandPasswordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CS_PhoneChangeBandPasswordReq::InitAsDefaultInstance() {
}

Proto_CS_PhoneChangeBandPasswordReq::Proto_CS_PhoneChangeBandPasswordReq(const Proto_CS_PhoneChangeBandPasswordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CS_PhoneChangeBandPasswordReq::SharedCtor() {
  _cached_size_ = 0;
  phone_num_ = GOOGLE_ULONGLONG(0);
  new_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CS_PhoneChangeBandPasswordReq::~Proto_CS_PhoneChangeBandPasswordReq() {
  SharedDtor();
}

void Proto_CS_PhoneChangeBandPasswordReq::SharedDtor() {
  if (new_password_ != &::google::protobuf::internal::kEmptyString) {
    delete new_password_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CS_PhoneChangeBandPasswordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CS_PhoneChangeBandPasswordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CS_PhoneChangeBandPasswordReq_descriptor_;
}

const Proto_CS_PhoneChangeBandPasswordReq& Proto_CS_PhoneChangeBandPasswordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CS_PhoneChangeBandPasswordReq* Proto_CS_PhoneChangeBandPasswordReq::default_instance_ = NULL;

Proto_CS_PhoneChangeBandPasswordReq* Proto_CS_PhoneChangeBandPasswordReq::New() const {
  return new Proto_CS_PhoneChangeBandPasswordReq;
}

void Proto_CS_PhoneChangeBandPasswordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phone_num_ = GOOGLE_ULONGLONG(0);
    if (has_new_password()) {
      if (new_password_ != &::google::protobuf::internal::kEmptyString) {
        new_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CS_PhoneChangeBandPasswordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 phone_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phone_num_)));
          set_has_phone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_password;
        break;
      }

      // optional string new_password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_password().data(), this->new_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CS_PhoneChangeBandPasswordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->phone_num(), output);
  }

  // optional string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CS_PhoneChangeBandPasswordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 phone_num = 1;
  if (has_phone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->phone_num(), target);
  }

  // optional string new_password = 2;
  if (has_new_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_password().data(), this->new_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CS_PhoneChangeBandPasswordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 phone_num = 1;
    if (has_phone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phone_num());
    }

    // optional string new_password = 2;
    if (has_new_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CS_PhoneChangeBandPasswordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CS_PhoneChangeBandPasswordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CS_PhoneChangeBandPasswordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CS_PhoneChangeBandPasswordReq::MergeFrom(const Proto_CS_PhoneChangeBandPasswordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_num()) {
      set_phone_num(from.phone_num());
    }
    if (from.has_new_password()) {
      set_new_password(from.new_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CS_PhoneChangeBandPasswordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CS_PhoneChangeBandPasswordReq::CopyFrom(const Proto_CS_PhoneChangeBandPasswordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CS_PhoneChangeBandPasswordReq::IsInitialized() const {

  return true;
}

void Proto_CS_PhoneChangeBandPasswordReq::Swap(Proto_CS_PhoneChangeBandPasswordReq* other) {
  if (other != this) {
    std::swap(phone_num_, other->phone_num_);
    std::swap(new_password_, other->new_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CS_PhoneChangeBandPasswordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CS_PhoneChangeBandPasswordReq_descriptor_;
  metadata.reflection = Proto_CS_PhoneChangeBandPasswordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SC_PhoneChangeBandPasswordRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SC_PhoneChangeBandPasswordRsp::Proto_SC_PhoneChangeBandPasswordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SC_PhoneChangeBandPasswordRsp::InitAsDefaultInstance() {
}

Proto_SC_PhoneChangeBandPasswordRsp::Proto_SC_PhoneChangeBandPasswordRsp(const Proto_SC_PhoneChangeBandPasswordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SC_PhoneChangeBandPasswordRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SC_PhoneChangeBandPasswordRsp::~Proto_SC_PhoneChangeBandPasswordRsp() {
  SharedDtor();
}

void Proto_SC_PhoneChangeBandPasswordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SC_PhoneChangeBandPasswordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SC_PhoneChangeBandPasswordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SC_PhoneChangeBandPasswordRsp_descriptor_;
}

const Proto_SC_PhoneChangeBandPasswordRsp& Proto_SC_PhoneChangeBandPasswordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SC_PhoneChangeBandPasswordRsp* Proto_SC_PhoneChangeBandPasswordRsp::default_instance_ = NULL;

Proto_SC_PhoneChangeBandPasswordRsp* Proto_SC_PhoneChangeBandPasswordRsp::New() const {
  return new Proto_SC_PhoneChangeBandPasswordRsp;
}

void Proto_SC_PhoneChangeBandPasswordRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SC_PhoneChangeBandPasswordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SC_PhoneChangeBandPasswordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SC_PhoneChangeBandPasswordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SC_PhoneChangeBandPasswordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SC_PhoneChangeBandPasswordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SC_PhoneChangeBandPasswordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SC_PhoneChangeBandPasswordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SC_PhoneChangeBandPasswordRsp::MergeFrom(const Proto_SC_PhoneChangeBandPasswordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SC_PhoneChangeBandPasswordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SC_PhoneChangeBandPasswordRsp::CopyFrom(const Proto_SC_PhoneChangeBandPasswordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SC_PhoneChangeBandPasswordRsp::IsInitialized() const {

  return true;
}

void Proto_SC_PhoneChangeBandPasswordRsp::Swap(Proto_SC_PhoneChangeBandPasswordRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SC_PhoneChangeBandPasswordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SC_PhoneChangeBandPasswordRsp_descriptor_;
  metadata.reflection = Proto_SC_PhoneChangeBandPasswordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSCheckContractInfoReq::kContractInfoFieldNumber;
#endif  // !_MSC_VER

Proto_CSCheckContractInfoReq::Proto_CSCheckContractInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSCheckContractInfoReq::InitAsDefaultInstance() {
}

Proto_CSCheckContractInfoReq::Proto_CSCheckContractInfoReq(const Proto_CSCheckContractInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSCheckContractInfoReq::SharedCtor() {
  _cached_size_ = 0;
  contract_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSCheckContractInfoReq::~Proto_CSCheckContractInfoReq() {
  SharedDtor();
}

void Proto_CSCheckContractInfoReq::SharedDtor() {
  if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_info_;
  }
  if (this != default_instance_) {
  }
}

void Proto_CSCheckContractInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSCheckContractInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSCheckContractInfoReq_descriptor_;
}

const Proto_CSCheckContractInfoReq& Proto_CSCheckContractInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_CSCheckContractInfoReq* Proto_CSCheckContractInfoReq::default_instance_ = NULL;

Proto_CSCheckContractInfoReq* Proto_CSCheckContractInfoReq::New() const {
  return new Proto_CSCheckContractInfoReq;
}

void Proto_CSCheckContractInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contract_info()) {
      if (contract_info_ != &::google::protobuf::internal::kEmptyString) {
        contract_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSCheckContractInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contract_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract_info().data(), this->contract_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSCheckContractInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string contract_info = 1;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contract_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSCheckContractInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string contract_info = 1;
  if (has_contract_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract_info().data(), this->contract_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSCheckContractInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contract_info = 1;
    if (has_contract_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSCheckContractInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSCheckContractInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSCheckContractInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSCheckContractInfoReq::MergeFrom(const Proto_CSCheckContractInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract_info()) {
      set_contract_info(from.contract_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSCheckContractInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSCheckContractInfoReq::CopyFrom(const Proto_CSCheckContractInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSCheckContractInfoReq::IsInitialized() const {

  return true;
}

void Proto_CSCheckContractInfoReq::Swap(Proto_CSCheckContractInfoReq* other) {
  if (other != this) {
    std::swap(contract_info_, other->contract_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSCheckContractInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSCheckContractInfoReq_descriptor_;
  metadata.reflection = Proto_CSCheckContractInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCCheckContractInfoRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SCCheckContractInfoRsp::Proto_SCCheckContractInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCCheckContractInfoRsp::InitAsDefaultInstance() {
}

Proto_SCCheckContractInfoRsp::Proto_SCCheckContractInfoRsp(const Proto_SCCheckContractInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCCheckContractInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCCheckContractInfoRsp::~Proto_SCCheckContractInfoRsp() {
  SharedDtor();
}

void Proto_SCCheckContractInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCCheckContractInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCCheckContractInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCCheckContractInfoRsp_descriptor_;
}

const Proto_SCCheckContractInfoRsp& Proto_SCCheckContractInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCCheckContractInfoRsp* Proto_SCCheckContractInfoRsp::default_instance_ = NULL;

Proto_SCCheckContractInfoRsp* Proto_SCCheckContractInfoRsp::New() const {
  return new Proto_SCCheckContractInfoRsp;
}

void Proto_SCCheckContractInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCCheckContractInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCCheckContractInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCCheckContractInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCCheckContractInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCCheckContractInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCCheckContractInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCCheckContractInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCCheckContractInfoRsp::MergeFrom(const Proto_SCCheckContractInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCCheckContractInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCCheckContractInfoRsp::CopyFrom(const Proto_SCCheckContractInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCCheckContractInfoRsp::IsInitialized() const {

  return true;
}

void Proto_SCCheckContractInfoRsp::Swap(Proto_SCCheckContractInfoRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCCheckContractInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCCheckContractInfoRsp_descriptor_;
  metadata.reflection = Proto_SCCheckContractInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCKetPlayerNotify::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SCKetPlayerNotify::Proto_SCKetPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCKetPlayerNotify::InitAsDefaultInstance() {
}

Proto_SCKetPlayerNotify::Proto_SCKetPlayerNotify(const Proto_SCKetPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCKetPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCKetPlayerNotify::~Proto_SCKetPlayerNotify() {
  SharedDtor();
}

void Proto_SCKetPlayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCKetPlayerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCKetPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCKetPlayerNotify_descriptor_;
}

const Proto_SCKetPlayerNotify& Proto_SCKetPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5flogin_2eproto();
  return *default_instance_;
}

Proto_SCKetPlayerNotify* Proto_SCKetPlayerNotify::default_instance_ = NULL;

Proto_SCKetPlayerNotify* Proto_SCKetPlayerNotify::New() const {
  return new Proto_SCKetPlayerNotify;
}

void Proto_SCKetPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCKetPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCKetPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCKetPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCKetPlayerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCKetPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCKetPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCKetPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCKetPlayerNotify::MergeFrom(const Proto_SCKetPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCKetPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCKetPlayerNotify::CopyFrom(const Proto_SCKetPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCKetPlayerNotify::IsInitialized() const {

  return true;
}

void Proto_SCKetPlayerNotify::Swap(Proto_SCKetPlayerNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCKetPlayerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCKetPlayerNotify_descriptor_;
  metadata.reflection = Proto_SCKetPlayerNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_login

// @@protoc_insertion_point(global_scope)
