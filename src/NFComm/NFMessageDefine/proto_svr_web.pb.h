// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_web.proto

#ifndef PROTOBUF_proto_5fsvr_5fweb_2eproto__INCLUDED
#define PROTOBUF_proto_5fsvr_5fweb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "proto_common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
void protobuf_AssignDesc_proto_5fsvr_5fweb_2eproto();
void protobuf_ShutdownFile_proto_5fsvr_5fweb_2eproto();

class Proto_Web_CommonRspNotify;
class Proto_Web_KillServer;

// ===================================================================

class Proto_Web_CommonRspNotify : public ::google::protobuf::Message {
 public:
  Proto_Web_CommonRspNotify();
  virtual ~Proto_Web_CommonRspNotify();

  Proto_Web_CommonRspNotify(const Proto_Web_CommonRspNotify& from);

  inline Proto_Web_CommonRspNotify& operator=(const Proto_Web_CommonRspNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_Web_CommonRspNotify& default_instance();

  void Swap(Proto_Web_CommonRspNotify* other);

  // implements Message ----------------------------------------------

  Proto_Web_CommonRspNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_Web_CommonRspNotify& from);
  void MergeFrom(const Proto_Web_CommonRspNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_Web_CommonRspNotify)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fweb_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fweb_2eproto();

  void InitAsDefaultInstance();
  static Proto_Web_CommonRspNotify* default_instance_;
};
// -------------------------------------------------------------------

class Proto_Web_KillServer : public ::google::protobuf::Message {
 public:
  Proto_Web_KillServer();
  virtual ~Proto_Web_KillServer();

  Proto_Web_KillServer(const Proto_Web_KillServer& from);

  inline Proto_Web_KillServer& operator=(const Proto_Web_KillServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_Web_KillServer& default_instance();

  void Swap(Proto_Web_KillServer* other);

  // implements Message ----------------------------------------------

  Proto_Web_KillServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_Web_KillServer& from);
  void MergeFrom(const Proto_Web_KillServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint64 request_id() const;
  inline void set_request_id(::google::protobuf::uint64 value);

  // optional string contract = 2;
  inline bool has_contract() const;
  inline void clear_contract();
  static const int kContractFieldNumber = 2;
  inline const ::std::string& contract() const;
  inline void set_contract(const ::std::string& value);
  inline void set_contract(const char* value);
  inline void set_contract(const char* value, size_t size);
  inline ::std::string* mutable_contract();
  inline ::std::string* release_contract();
  inline void set_allocated_contract(::std::string* contract);

  // optional string machine_addr = 3;
  inline bool has_machine_addr() const;
  inline void clear_machine_addr();
  static const int kMachineAddrFieldNumber = 3;
  inline const ::std::string& machine_addr() const;
  inline void set_machine_addr(const ::std::string& value);
  inline void set_machine_addr(const char* value);
  inline void set_machine_addr(const char* value, size_t size);
  inline ::std::string* mutable_machine_addr();
  inline ::std::string* release_machine_addr();
  inline void set_allocated_machine_addr(::std::string* machine_addr);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string bus_name = 5;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 5;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // @@protoc_insertion_point(class_scope:proto_ff.Proto_Web_KillServer)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_contract();
  inline void clear_has_contract();
  inline void set_has_machine_addr();
  inline void clear_has_machine_addr();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 request_id_;
  ::std::string* contract_;
  ::std::string* machine_addr_;
  ::std::string* ip_;
  ::std::string* bus_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  friend void protobuf_AssignDesc_proto_5fsvr_5fweb_2eproto();
  friend void protobuf_ShutdownFile_proto_5fsvr_5fweb_2eproto();

  void InitAsDefaultInstance();
  static Proto_Web_KillServer* default_instance_;
};
// ===================================================================


// ===================================================================

// Proto_Web_CommonRspNotify

// optional int32 result = 1;
inline bool Proto_Web_CommonRspNotify::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_Web_CommonRspNotify::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_Web_CommonRspNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_Web_CommonRspNotify::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Proto_Web_CommonRspNotify::result() const {
  return result_;
}
inline void Proto_Web_CommonRspNotify::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string msg = 2;
inline bool Proto_Web_CommonRspNotify::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_Web_CommonRspNotify::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_Web_CommonRspNotify::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_Web_CommonRspNotify::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Proto_Web_CommonRspNotify::msg() const {
  return *msg_;
}
inline void Proto_Web_CommonRspNotify::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Proto_Web_CommonRspNotify::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Proto_Web_CommonRspNotify::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_Web_CommonRspNotify::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Proto_Web_CommonRspNotify::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_Web_CommonRspNotify::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Proto_Web_KillServer

// optional uint64 request_id = 1;
inline bool Proto_Web_KillServer::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_Web_KillServer::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_Web_KillServer::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_Web_KillServer::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
inline ::google::protobuf::uint64 Proto_Web_KillServer::request_id() const {
  return request_id_;
}
inline void Proto_Web_KillServer::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
}

// optional string contract = 2;
inline bool Proto_Web_KillServer::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_Web_KillServer::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_Web_KillServer::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_Web_KillServer::clear_contract() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    contract_->clear();
  }
  clear_has_contract();
}
inline const ::std::string& Proto_Web_KillServer::contract() const {
  return *contract_;
}
inline void Proto_Web_KillServer::set_contract(const ::std::string& value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void Proto_Web_KillServer::set_contract(const char* value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void Proto_Web_KillServer::set_contract(const char* value, size_t size) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_Web_KillServer::mutable_contract() {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  return contract_;
}
inline ::std::string* Proto_Web_KillServer::release_contract() {
  clear_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_;
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_Web_KillServer::set_allocated_contract(::std::string* contract) {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (contract) {
    set_has_contract();
    contract_ = contract;
  } else {
    clear_has_contract();
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_addr = 3;
inline bool Proto_Web_KillServer::has_machine_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Proto_Web_KillServer::set_has_machine_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Proto_Web_KillServer::clear_has_machine_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Proto_Web_KillServer::clear_machine_addr() {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    machine_addr_->clear();
  }
  clear_has_machine_addr();
}
inline const ::std::string& Proto_Web_KillServer::machine_addr() const {
  return *machine_addr_;
}
inline void Proto_Web_KillServer::set_machine_addr(const ::std::string& value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void Proto_Web_KillServer::set_machine_addr(const char* value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void Proto_Web_KillServer::set_machine_addr(const char* value, size_t size) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_Web_KillServer::mutable_machine_addr() {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  return machine_addr_;
}
inline ::std::string* Proto_Web_KillServer::release_machine_addr() {
  clear_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_addr_;
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_Web_KillServer::set_allocated_machine_addr(::std::string* machine_addr) {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (machine_addr) {
    set_has_machine_addr();
    machine_addr_ = machine_addr;
  } else {
    clear_has_machine_addr();
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 4;
inline bool Proto_Web_KillServer::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Proto_Web_KillServer::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Proto_Web_KillServer::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Proto_Web_KillServer::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Proto_Web_KillServer::ip() const {
  return *ip_;
}
inline void Proto_Web_KillServer::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Proto_Web_KillServer::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Proto_Web_KillServer::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_Web_KillServer::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Proto_Web_KillServer::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_Web_KillServer::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bus_name = 5;
inline bool Proto_Web_KillServer::has_bus_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Proto_Web_KillServer::set_has_bus_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Proto_Web_KillServer::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Proto_Web_KillServer::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& Proto_Web_KillServer::bus_name() const {
  return *bus_name_;
}
inline void Proto_Web_KillServer::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void Proto_Web_KillServer::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void Proto_Web_KillServer::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Proto_Web_KillServer::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* Proto_Web_KillServer::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Proto_Web_KillServer::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fsvr_5fweb_2eproto__INCLUDED
