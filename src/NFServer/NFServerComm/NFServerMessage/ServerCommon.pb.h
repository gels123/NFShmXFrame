// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCommon.proto

#ifndef PROTOBUF_INCLUDED_ServerCommon_2eproto
#define PROTOBUF_INCLUDED_ServerCommon_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ServerCommon_2eproto 

namespace protobuf_ServerCommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ServerCommon_2eproto
namespace NFServer {
class PacketMsg;
class PacketMsgDefaultTypeInternal;
extern PacketMsgDefaultTypeInternal _PacketMsg_default_instance_;
class ServerPacketMsg;
class ServerPacketMsgDefaultTypeInternal;
extern ServerPacketMsgDefaultTypeInternal _ServerPacketMsg_default_instance_;
}  // namespace NFServer
namespace google {
namespace protobuf {
template<> ::NFServer::PacketMsg* Arena::CreateMaybeMessage<::NFServer::PacketMsg>(Arena*);
template<> ::NFServer::ServerPacketMsg* Arena::CreateMaybeMessage<::NFServer::ServerPacketMsg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFServer {

// ===================================================================

class PacketMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.PacketMsg) */ {
 public:
  PacketMsg();
  virtual ~PacketMsg();

  PacketMsg(const PacketMsg& from);

  inline PacketMsg& operator=(const PacketMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PacketMsg(PacketMsg&& from) noexcept
    : PacketMsg() {
    *this = ::std::move(from);
  }

  inline PacketMsg& operator=(PacketMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketMsg* internal_default_instance() {
    return reinterpret_cast<const PacketMsg*>(
               &_PacketMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PacketMsg* other);
  friend void swap(PacketMsg& a, PacketMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PacketMsg* New() const final {
    return CreateMaybeMessage<PacketMsg>(NULL);
  }

  PacketMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PacketMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PacketMsg& from);
  void MergeFrom(const PacketMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::google::protobuf::uint32 cmd() const;
  void set_cmd(::google::protobuf::uint32 value);

  // uint32 serverType = 2;
  void clear_servertype();
  static const int kServerTypeFieldNumber = 2;
  ::google::protobuf::uint32 servertype() const;
  void set_servertype(::google::protobuf::uint32 value);

  // uint32 upper_limit = 3;
  void clear_upper_limit();
  static const int kUpperLimitFieldNumber = 3;
  ::google::protobuf::uint32 upper_limit() const;
  void set_upper_limit(::google::protobuf::uint32 value);

  // uint32 min_interval = 4;
  void clear_min_interval();
  static const int kMinIntervalFieldNumber = 4;
  ::google::protobuf::uint32 min_interval() const;
  void set_min_interval(::google::protobuf::uint32 value);

  // uint32 control_time = 5;
  void clear_control_time();
  static const int kControlTimeFieldNumber = 5;
  ::google::protobuf::uint32 control_time() const;
  void set_control_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NFServer.PacketMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 servertype_;
  ::google::protobuf::uint32 upper_limit_;
  ::google::protobuf::uint32 min_interval_;
  ::google::protobuf::uint32 control_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerCommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerPacketMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.ServerPacketMsg) */ {
 public:
  ServerPacketMsg();
  virtual ~ServerPacketMsg();

  ServerPacketMsg(const ServerPacketMsg& from);

  inline ServerPacketMsg& operator=(const ServerPacketMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerPacketMsg(ServerPacketMsg&& from) noexcept
    : ServerPacketMsg() {
    *this = ::std::move(from);
  }

  inline ServerPacketMsg& operator=(ServerPacketMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerPacketMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerPacketMsg* internal_default_instance() {
    return reinterpret_cast<const ServerPacketMsg*>(
               &_ServerPacketMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerPacketMsg* other);
  friend void swap(ServerPacketMsg& a, ServerPacketMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerPacketMsg* New() const final {
    return CreateMaybeMessage<ServerPacketMsg>(NULL);
  }

  ServerPacketMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerPacketMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerPacketMsg& from);
  void MergeFrom(const ServerPacketMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPacketMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFServer.PacketMsg PacketMsg_list = 1;
  int packetmsg_list_size() const;
  void clear_packetmsg_list();
  static const int kPacketMsgListFieldNumber = 1;
  ::NFServer::PacketMsg* mutable_packetmsg_list(int index);
  ::google::protobuf::RepeatedPtrField< ::NFServer::PacketMsg >*
      mutable_packetmsg_list();
  const ::NFServer::PacketMsg& packetmsg_list(int index) const;
  ::NFServer::PacketMsg* add_packetmsg_list();
  const ::google::protobuf::RepeatedPtrField< ::NFServer::PacketMsg >&
      packetmsg_list() const;

  // @@protoc_insertion_point(class_scope:NFServer.ServerPacketMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NFServer::PacketMsg > packetmsg_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerCommon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketMsg

// uint32 cmd = 1;
inline void PacketMsg::clear_cmd() {
  cmd_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::cmd() const {
  // @@protoc_insertion_point(field_get:NFServer.PacketMsg.cmd)
  return cmd_;
}
inline void PacketMsg::set_cmd(::google::protobuf::uint32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:NFServer.PacketMsg.cmd)
}

// uint32 serverType = 2;
inline void PacketMsg::clear_servertype() {
  servertype_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::servertype() const {
  // @@protoc_insertion_point(field_get:NFServer.PacketMsg.serverType)
  return servertype_;
}
inline void PacketMsg::set_servertype(::google::protobuf::uint32 value) {
  
  servertype_ = value;
  // @@protoc_insertion_point(field_set:NFServer.PacketMsg.serverType)
}

// uint32 upper_limit = 3;
inline void PacketMsg::clear_upper_limit() {
  upper_limit_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::upper_limit() const {
  // @@protoc_insertion_point(field_get:NFServer.PacketMsg.upper_limit)
  return upper_limit_;
}
inline void PacketMsg::set_upper_limit(::google::protobuf::uint32 value) {
  
  upper_limit_ = value;
  // @@protoc_insertion_point(field_set:NFServer.PacketMsg.upper_limit)
}

// uint32 min_interval = 4;
inline void PacketMsg::clear_min_interval() {
  min_interval_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::min_interval() const {
  // @@protoc_insertion_point(field_get:NFServer.PacketMsg.min_interval)
  return min_interval_;
}
inline void PacketMsg::set_min_interval(::google::protobuf::uint32 value) {
  
  min_interval_ = value;
  // @@protoc_insertion_point(field_set:NFServer.PacketMsg.min_interval)
}

// uint32 control_time = 5;
inline void PacketMsg::clear_control_time() {
  control_time_ = 0u;
}
inline ::google::protobuf::uint32 PacketMsg::control_time() const {
  // @@protoc_insertion_point(field_get:NFServer.PacketMsg.control_time)
  return control_time_;
}
inline void PacketMsg::set_control_time(::google::protobuf::uint32 value) {
  
  control_time_ = value;
  // @@protoc_insertion_point(field_set:NFServer.PacketMsg.control_time)
}

// -------------------------------------------------------------------

// ServerPacketMsg

// repeated .NFServer.PacketMsg PacketMsg_list = 1;
inline int ServerPacketMsg::packetmsg_list_size() const {
  return packetmsg_list_.size();
}
inline void ServerPacketMsg::clear_packetmsg_list() {
  packetmsg_list_.Clear();
}
inline ::NFServer::PacketMsg* ServerPacketMsg::mutable_packetmsg_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFServer.ServerPacketMsg.PacketMsg_list)
  return packetmsg_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFServer::PacketMsg >*
ServerPacketMsg::mutable_packetmsg_list() {
  // @@protoc_insertion_point(field_mutable_list:NFServer.ServerPacketMsg.PacketMsg_list)
  return &packetmsg_list_;
}
inline const ::NFServer::PacketMsg& ServerPacketMsg::packetmsg_list(int index) const {
  // @@protoc_insertion_point(field_get:NFServer.ServerPacketMsg.PacketMsg_list)
  return packetmsg_list_.Get(index);
}
inline ::NFServer::PacketMsg* ServerPacketMsg::add_packetmsg_list() {
  // @@protoc_insertion_point(field_add:NFServer.ServerPacketMsg.PacketMsg_list)
  return packetmsg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFServer::PacketMsg >&
ServerPacketMsg::packetmsg_list() const {
  // @@protoc_insertion_point(field_list:NFServer.ServerPacketMsg.PacketMsg_list)
  return packetmsg_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFServer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ServerCommon_2eproto
