// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMsg.proto

#ifndef PROTOBUF_INCLUDED_ServerMsg_2eproto
#define PROTOBUF_INCLUDED_ServerMsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nanopb.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ServerMsg_2eproto 

namespace protobuf_ServerMsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ServerMsg_2eproto
namespace NFServer {
class CommonMsgRsp;
class CommonMsgRspDefaultTypeInternal;
extern CommonMsgRspDefaultTypeInternal _CommonMsgRsp_default_instance_;
class Proto_MasterTMonitorReloadReq;
class Proto_MasterTMonitorReloadReqDefaultTypeInternal;
extern Proto_MasterTMonitorReloadReqDefaultTypeInternal _Proto_MasterTMonitorReloadReq_default_instance_;
class Proto_MasterTMonitorRestartReq;
class Proto_MasterTMonitorRestartReqDefaultTypeInternal;
extern Proto_MasterTMonitorRestartReqDefaultTypeInternal _Proto_MasterTMonitorRestartReq_default_instance_;
class Proto_MasterTMonitorStartReq;
class Proto_MasterTMonitorStartReqDefaultTypeInternal;
extern Proto_MasterTMonitorStartReqDefaultTypeInternal _Proto_MasterTMonitorStartReq_default_instance_;
class Proto_MasterTMonitorStopReq;
class Proto_MasterTMonitorStopReqDefaultTypeInternal;
extern Proto_MasterTMonitorStopReqDefaultTypeInternal _Proto_MasterTMonitorStopReq_default_instance_;
class Proto_MonitorTMasterReloadRsp;
class Proto_MonitorTMasterReloadRspDefaultTypeInternal;
extern Proto_MonitorTMasterReloadRspDefaultTypeInternal _Proto_MonitorTMasterReloadRsp_default_instance_;
class Proto_MonitorTMasterRestartRsp;
class Proto_MonitorTMasterRestartRspDefaultTypeInternal;
extern Proto_MonitorTMasterRestartRspDefaultTypeInternal _Proto_MonitorTMasterRestartRsp_default_instance_;
class Proto_MonitorTMasterStartRsp;
class Proto_MonitorTMasterStartRspDefaultTypeInternal;
extern Proto_MonitorTMasterStartRspDefaultTypeInternal _Proto_MonitorTMasterStartRsp_default_instance_;
class Proto_MonitorTMasterStopRsp;
class Proto_MonitorTMasterStopRspDefaultTypeInternal;
extern Proto_MonitorTMasterStopRspDefaultTypeInternal _Proto_MonitorTMasterStopRsp_default_instance_;
class Proto_STStoreCheckReq;
class Proto_STStoreCheckReqDefaultTypeInternal;
extern Proto_STStoreCheckReqDefaultTypeInternal _Proto_STStoreCheckReq_default_instance_;
class Proto_StoreTSCheckRsp;
class Proto_StoreTSCheckRspDefaultTypeInternal;
extern Proto_StoreTSCheckRspDefaultTypeInternal _Proto_StoreTSCheckRsp_default_instance_;
class Proto_TestOtherServerSendMsgToProxyServer;
class Proto_TestOtherServerSendMsgToProxyServerDefaultTypeInternal;
extern Proto_TestOtherServerSendMsgToProxyServerDefaultTypeInternal _Proto_TestOtherServerSendMsgToProxyServer_default_instance_;
class Proto_TestOtherServerToWorldServer;
class Proto_TestOtherServerToWorldServerDefaultTypeInternal;
extern Proto_TestOtherServerToWorldServerDefaultTypeInternal _Proto_TestOtherServerToWorldServer_default_instance_;
class Proto_TestSendProxyMsgToOtherServer;
class Proto_TestSendProxyMsgToOtherServerDefaultTypeInternal;
extern Proto_TestSendProxyMsgToOtherServerDefaultTypeInternal _Proto_TestSendProxyMsgToOtherServer_default_instance_;
class Proto_TestSendWorldMsgToOtherServer;
class Proto_TestSendWorldMsgToOtherServerDefaultTypeInternal;
extern Proto_TestSendWorldMsgToOtherServerDefaultTypeInternal _Proto_TestSendWorldMsgToOtherServer_default_instance_;
class RpcRequestGetServerInfo;
class RpcRequestGetServerInfoDefaultTypeInternal;
extern RpcRequestGetServerInfoDefaultTypeInternal _RpcRequestGetServerInfo_default_instance_;
class RpcWatchServerReqeust;
class RpcWatchServerReqeustDefaultTypeInternal;
extern RpcWatchServerReqeustDefaultTypeInternal _RpcWatchServerReqeust_default_instance_;
class RpcWatchServerRespone;
class RpcWatchServerResponeDefaultTypeInternal;
extern RpcWatchServerResponeDefaultTypeInternal _RpcWatchServerRespone_default_instance_;
}  // namespace NFServer
namespace google {
namespace protobuf {
template<> ::NFServer::CommonMsgRsp* Arena::CreateMaybeMessage<::NFServer::CommonMsgRsp>(Arena*);
template<> ::NFServer::Proto_MasterTMonitorReloadReq* Arena::CreateMaybeMessage<::NFServer::Proto_MasterTMonitorReloadReq>(Arena*);
template<> ::NFServer::Proto_MasterTMonitorRestartReq* Arena::CreateMaybeMessage<::NFServer::Proto_MasterTMonitorRestartReq>(Arena*);
template<> ::NFServer::Proto_MasterTMonitorStartReq* Arena::CreateMaybeMessage<::NFServer::Proto_MasterTMonitorStartReq>(Arena*);
template<> ::NFServer::Proto_MasterTMonitorStopReq* Arena::CreateMaybeMessage<::NFServer::Proto_MasterTMonitorStopReq>(Arena*);
template<> ::NFServer::Proto_MonitorTMasterReloadRsp* Arena::CreateMaybeMessage<::NFServer::Proto_MonitorTMasterReloadRsp>(Arena*);
template<> ::NFServer::Proto_MonitorTMasterRestartRsp* Arena::CreateMaybeMessage<::NFServer::Proto_MonitorTMasterRestartRsp>(Arena*);
template<> ::NFServer::Proto_MonitorTMasterStartRsp* Arena::CreateMaybeMessage<::NFServer::Proto_MonitorTMasterStartRsp>(Arena*);
template<> ::NFServer::Proto_MonitorTMasterStopRsp* Arena::CreateMaybeMessage<::NFServer::Proto_MonitorTMasterStopRsp>(Arena*);
template<> ::NFServer::Proto_STStoreCheckReq* Arena::CreateMaybeMessage<::NFServer::Proto_STStoreCheckReq>(Arena*);
template<> ::NFServer::Proto_StoreTSCheckRsp* Arena::CreateMaybeMessage<::NFServer::Proto_StoreTSCheckRsp>(Arena*);
template<> ::NFServer::Proto_TestOtherServerSendMsgToProxyServer* Arena::CreateMaybeMessage<::NFServer::Proto_TestOtherServerSendMsgToProxyServer>(Arena*);
template<> ::NFServer::Proto_TestOtherServerToWorldServer* Arena::CreateMaybeMessage<::NFServer::Proto_TestOtherServerToWorldServer>(Arena*);
template<> ::NFServer::Proto_TestSendProxyMsgToOtherServer* Arena::CreateMaybeMessage<::NFServer::Proto_TestSendProxyMsgToOtherServer>(Arena*);
template<> ::NFServer::Proto_TestSendWorldMsgToOtherServer* Arena::CreateMaybeMessage<::NFServer::Proto_TestSendWorldMsgToOtherServer>(Arena*);
template<> ::NFServer::RpcRequestGetServerInfo* Arena::CreateMaybeMessage<::NFServer::RpcRequestGetServerInfo>(Arena*);
template<> ::NFServer::RpcWatchServerReqeust* Arena::CreateMaybeMessage<::NFServer::RpcWatchServerReqeust>(Arena*);
template<> ::NFServer::RpcWatchServerRespone* Arena::CreateMaybeMessage<::NFServer::RpcWatchServerRespone>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFServer {

enum Proto_SvrMsgID {
  NF_SERVER_MSG_ZERO = 0,
  NF_STSTORE_CHECK_STORE_SERVER_REQ = 40,
  NF_STORETS_CHECK_STORE_SERVER_RSP = 41,
  NF_TEST_SEND_PROXY_MSG_TO_OTHER_SERVER_REQ = 42,
  NF_TEST_OTHER_SERVER_SEND_MSG_TO_PROXY_SERVER = 43,
  NF_TEST_OTHER_SERVER_MSG_TO_WORLD_SERVER_REQ = 44,
  NF_TEST_WORLD_SERVER_MSG_TO_OTHER_SERVER_REQ = 45,
  NF_RPC_SERVICE_GET_SERVER_INFO_REQ = 46,
  Proto_SvrMsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Proto_SvrMsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Proto_SvrMsgID_IsValid(int value);
const Proto_SvrMsgID Proto_SvrMsgID_MIN = NF_SERVER_MSG_ZERO;
const Proto_SvrMsgID Proto_SvrMsgID_MAX = NF_RPC_SERVICE_GET_SERVER_INFO_REQ;
const int Proto_SvrMsgID_ARRAYSIZE = Proto_SvrMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_SvrMsgID_descriptor();
inline const ::std::string& Proto_SvrMsgID_Name(Proto_SvrMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_SvrMsgID_descriptor(), value);
}
inline bool Proto_SvrMsgID_Parse(
    const ::std::string& name, Proto_SvrMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_SvrMsgID>(
    Proto_SvrMsgID_descriptor(), name, value);
}
// ===================================================================

class CommonMsgRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.CommonMsgRsp) */ {
 public:
  CommonMsgRsp();
  virtual ~CommonMsgRsp();

  CommonMsgRsp(const CommonMsgRsp& from);

  inline CommonMsgRsp& operator=(const CommonMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonMsgRsp(CommonMsgRsp&& from) noexcept
    : CommonMsgRsp() {
    *this = ::std::move(from);
  }

  inline CommonMsgRsp& operator=(CommonMsgRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonMsgRsp* internal_default_instance() {
    return reinterpret_cast<const CommonMsgRsp*>(
               &_CommonMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CommonMsgRsp* other);
  friend void swap(CommonMsgRsp& a, CommonMsgRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonMsgRsp* New() const final {
    return CreateMaybeMessage<CommonMsgRsp>(NULL);
  }

  CommonMsgRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommonMsgRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommonMsgRsp& from);
  void MergeFrom(const CommonMsgRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonMsgRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.CommonMsgRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorReloadReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MasterTMonitorReloadReq) */ {
 public:
  Proto_MasterTMonitorReloadReq();
  virtual ~Proto_MasterTMonitorReloadReq();

  Proto_MasterTMonitorReloadReq(const Proto_MasterTMonitorReloadReq& from);

  inline Proto_MasterTMonitorReloadReq& operator=(const Proto_MasterTMonitorReloadReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MasterTMonitorReloadReq(Proto_MasterTMonitorReloadReq&& from) noexcept
    : Proto_MasterTMonitorReloadReq() {
    *this = ::std::move(from);
  }

  inline Proto_MasterTMonitorReloadReq& operator=(Proto_MasterTMonitorReloadReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorReloadReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MasterTMonitorReloadReq* internal_default_instance() {
    return reinterpret_cast<const Proto_MasterTMonitorReloadReq*>(
               &_Proto_MasterTMonitorReloadReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Proto_MasterTMonitorReloadReq* other);
  friend void swap(Proto_MasterTMonitorReloadReq& a, Proto_MasterTMonitorReloadReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MasterTMonitorReloadReq* New() const final {
    return CreateMaybeMessage<Proto_MasterTMonitorReloadReq>(NULL);
  }

  Proto_MasterTMonitorReloadReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MasterTMonitorReloadReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MasterTMonitorReloadReq& from);
  void MergeFrom(const Proto_MasterTMonitorReloadReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MasterTMonitorReloadReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MasterTMonitorReloadReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorRestartReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MasterTMonitorRestartReq) */ {
 public:
  Proto_MasterTMonitorRestartReq();
  virtual ~Proto_MasterTMonitorRestartReq();

  Proto_MasterTMonitorRestartReq(const Proto_MasterTMonitorRestartReq& from);

  inline Proto_MasterTMonitorRestartReq& operator=(const Proto_MasterTMonitorRestartReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MasterTMonitorRestartReq(Proto_MasterTMonitorRestartReq&& from) noexcept
    : Proto_MasterTMonitorRestartReq() {
    *this = ::std::move(from);
  }

  inline Proto_MasterTMonitorRestartReq& operator=(Proto_MasterTMonitorRestartReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorRestartReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MasterTMonitorRestartReq* internal_default_instance() {
    return reinterpret_cast<const Proto_MasterTMonitorRestartReq*>(
               &_Proto_MasterTMonitorRestartReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Proto_MasterTMonitorRestartReq* other);
  friend void swap(Proto_MasterTMonitorRestartReq& a, Proto_MasterTMonitorRestartReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MasterTMonitorRestartReq* New() const final {
    return CreateMaybeMessage<Proto_MasterTMonitorRestartReq>(NULL);
  }

  Proto_MasterTMonitorRestartReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MasterTMonitorRestartReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MasterTMonitorRestartReq& from);
  void MergeFrom(const Proto_MasterTMonitorRestartReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MasterTMonitorRestartReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MasterTMonitorRestartReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorStartReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MasterTMonitorStartReq) */ {
 public:
  Proto_MasterTMonitorStartReq();
  virtual ~Proto_MasterTMonitorStartReq();

  Proto_MasterTMonitorStartReq(const Proto_MasterTMonitorStartReq& from);

  inline Proto_MasterTMonitorStartReq& operator=(const Proto_MasterTMonitorStartReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MasterTMonitorStartReq(Proto_MasterTMonitorStartReq&& from) noexcept
    : Proto_MasterTMonitorStartReq() {
    *this = ::std::move(from);
  }

  inline Proto_MasterTMonitorStartReq& operator=(Proto_MasterTMonitorStartReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorStartReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MasterTMonitorStartReq* internal_default_instance() {
    return reinterpret_cast<const Proto_MasterTMonitorStartReq*>(
               &_Proto_MasterTMonitorStartReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Proto_MasterTMonitorStartReq* other);
  friend void swap(Proto_MasterTMonitorStartReq& a, Proto_MasterTMonitorStartReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MasterTMonitorStartReq* New() const final {
    return CreateMaybeMessage<Proto_MasterTMonitorStartReq>(NULL);
  }

  Proto_MasterTMonitorStartReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MasterTMonitorStartReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MasterTMonitorStartReq& from);
  void MergeFrom(const Proto_MasterTMonitorStartReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MasterTMonitorStartReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MasterTMonitorStartReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MasterTMonitorStopReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MasterTMonitorStopReq) */ {
 public:
  Proto_MasterTMonitorStopReq();
  virtual ~Proto_MasterTMonitorStopReq();

  Proto_MasterTMonitorStopReq(const Proto_MasterTMonitorStopReq& from);

  inline Proto_MasterTMonitorStopReq& operator=(const Proto_MasterTMonitorStopReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MasterTMonitorStopReq(Proto_MasterTMonitorStopReq&& from) noexcept
    : Proto_MasterTMonitorStopReq() {
    *this = ::std::move(from);
  }

  inline Proto_MasterTMonitorStopReq& operator=(Proto_MasterTMonitorStopReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MasterTMonitorStopReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MasterTMonitorStopReq* internal_default_instance() {
    return reinterpret_cast<const Proto_MasterTMonitorStopReq*>(
               &_Proto_MasterTMonitorStopReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Proto_MasterTMonitorStopReq* other);
  friend void swap(Proto_MasterTMonitorStopReq& a, Proto_MasterTMonitorStopReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MasterTMonitorStopReq* New() const final {
    return CreateMaybeMessage<Proto_MasterTMonitorStopReq>(NULL);
  }

  Proto_MasterTMonitorStopReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MasterTMonitorStopReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MasterTMonitorStopReq& from);
  void MergeFrom(const Proto_MasterTMonitorStopReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MasterTMonitorStopReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MasterTMonitorStopReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterReloadRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MonitorTMasterReloadRsp) */ {
 public:
  Proto_MonitorTMasterReloadRsp();
  virtual ~Proto_MonitorTMasterReloadRsp();

  Proto_MonitorTMasterReloadRsp(const Proto_MonitorTMasterReloadRsp& from);

  inline Proto_MonitorTMasterReloadRsp& operator=(const Proto_MonitorTMasterReloadRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MonitorTMasterReloadRsp(Proto_MonitorTMasterReloadRsp&& from) noexcept
    : Proto_MonitorTMasterReloadRsp() {
    *this = ::std::move(from);
  }

  inline Proto_MonitorTMasterReloadRsp& operator=(Proto_MonitorTMasterReloadRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterReloadRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MonitorTMasterReloadRsp* internal_default_instance() {
    return reinterpret_cast<const Proto_MonitorTMasterReloadRsp*>(
               &_Proto_MonitorTMasterReloadRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Proto_MonitorTMasterReloadRsp* other);
  friend void swap(Proto_MonitorTMasterReloadRsp& a, Proto_MonitorTMasterReloadRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MonitorTMasterReloadRsp* New() const final {
    return CreateMaybeMessage<Proto_MonitorTMasterReloadRsp>(NULL);
  }

  Proto_MonitorTMasterReloadRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MonitorTMasterReloadRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MonitorTMasterReloadRsp& from);
  void MergeFrom(const Proto_MonitorTMasterReloadRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MonitorTMasterReloadRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 3;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MonitorTMasterReloadRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterRestartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MonitorTMasterRestartRsp) */ {
 public:
  Proto_MonitorTMasterRestartRsp();
  virtual ~Proto_MonitorTMasterRestartRsp();

  Proto_MonitorTMasterRestartRsp(const Proto_MonitorTMasterRestartRsp& from);

  inline Proto_MonitorTMasterRestartRsp& operator=(const Proto_MonitorTMasterRestartRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MonitorTMasterRestartRsp(Proto_MonitorTMasterRestartRsp&& from) noexcept
    : Proto_MonitorTMasterRestartRsp() {
    *this = ::std::move(from);
  }

  inline Proto_MonitorTMasterRestartRsp& operator=(Proto_MonitorTMasterRestartRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterRestartRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MonitorTMasterRestartRsp* internal_default_instance() {
    return reinterpret_cast<const Proto_MonitorTMasterRestartRsp*>(
               &_Proto_MonitorTMasterRestartRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Proto_MonitorTMasterRestartRsp* other);
  friend void swap(Proto_MonitorTMasterRestartRsp& a, Proto_MonitorTMasterRestartRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MonitorTMasterRestartRsp* New() const final {
    return CreateMaybeMessage<Proto_MonitorTMasterRestartRsp>(NULL);
  }

  Proto_MonitorTMasterRestartRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MonitorTMasterRestartRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MonitorTMasterRestartRsp& from);
  void MergeFrom(const Proto_MonitorTMasterRestartRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MonitorTMasterRestartRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 3;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MonitorTMasterRestartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterStartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MonitorTMasterStartRsp) */ {
 public:
  Proto_MonitorTMasterStartRsp();
  virtual ~Proto_MonitorTMasterStartRsp();

  Proto_MonitorTMasterStartRsp(const Proto_MonitorTMasterStartRsp& from);

  inline Proto_MonitorTMasterStartRsp& operator=(const Proto_MonitorTMasterStartRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MonitorTMasterStartRsp(Proto_MonitorTMasterStartRsp&& from) noexcept
    : Proto_MonitorTMasterStartRsp() {
    *this = ::std::move(from);
  }

  inline Proto_MonitorTMasterStartRsp& operator=(Proto_MonitorTMasterStartRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterStartRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MonitorTMasterStartRsp* internal_default_instance() {
    return reinterpret_cast<const Proto_MonitorTMasterStartRsp*>(
               &_Proto_MonitorTMasterStartRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Proto_MonitorTMasterStartRsp* other);
  friend void swap(Proto_MonitorTMasterStartRsp& a, Proto_MonitorTMasterStartRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MonitorTMasterStartRsp* New() const final {
    return CreateMaybeMessage<Proto_MonitorTMasterStartRsp>(NULL);
  }

  Proto_MonitorTMasterStartRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MonitorTMasterStartRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MonitorTMasterStartRsp& from);
  void MergeFrom(const Proto_MonitorTMasterStartRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MonitorTMasterStartRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 3;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MonitorTMasterStartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_MonitorTMasterStopRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_MonitorTMasterStopRsp) */ {
 public:
  Proto_MonitorTMasterStopRsp();
  virtual ~Proto_MonitorTMasterStopRsp();

  Proto_MonitorTMasterStopRsp(const Proto_MonitorTMasterStopRsp& from);

  inline Proto_MonitorTMasterStopRsp& operator=(const Proto_MonitorTMasterStopRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_MonitorTMasterStopRsp(Proto_MonitorTMasterStopRsp&& from) noexcept
    : Proto_MonitorTMasterStopRsp() {
    *this = ::std::move(from);
  }

  inline Proto_MonitorTMasterStopRsp& operator=(Proto_MonitorTMasterStopRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_MonitorTMasterStopRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_MonitorTMasterStopRsp* internal_default_instance() {
    return reinterpret_cast<const Proto_MonitorTMasterStopRsp*>(
               &_Proto_MonitorTMasterStopRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Proto_MonitorTMasterStopRsp* other);
  friend void swap(Proto_MonitorTMasterStopRsp& a, Proto_MonitorTMasterStopRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_MonitorTMasterStopRsp* New() const final {
    return CreateMaybeMessage<Proto_MonitorTMasterStopRsp>(NULL);
  }

  Proto_MonitorTMasterStopRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_MonitorTMasterStopRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_MonitorTMasterStopRsp& from);
  void MergeFrom(const Proto_MonitorTMasterStopRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_MonitorTMasterStopRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_id = 3;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // int32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_MonitorTMasterStopRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_STStoreCheckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_STStoreCheckReq) */ {
 public:
  Proto_STStoreCheckReq();
  virtual ~Proto_STStoreCheckReq();

  Proto_STStoreCheckReq(const Proto_STStoreCheckReq& from);

  inline Proto_STStoreCheckReq& operator=(const Proto_STStoreCheckReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_STStoreCheckReq(Proto_STStoreCheckReq&& from) noexcept
    : Proto_STStoreCheckReq() {
    *this = ::std::move(from);
  }

  inline Proto_STStoreCheckReq& operator=(Proto_STStoreCheckReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_STStoreCheckReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_STStoreCheckReq* internal_default_instance() {
    return reinterpret_cast<const Proto_STStoreCheckReq*>(
               &_Proto_STStoreCheckReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Proto_STStoreCheckReq* other);
  friend void swap(Proto_STStoreCheckReq& a, Proto_STStoreCheckReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_STStoreCheckReq* New() const final {
    return CreateMaybeMessage<Proto_STStoreCheckReq>(NULL);
  }

  Proto_STStoreCheckReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_STStoreCheckReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_STStoreCheckReq& from);
  void MergeFrom(const Proto_STStoreCheckReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_STStoreCheckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NFServer.Proto_STStoreCheckReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_StoreTSCheckRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_StoreTSCheckRsp) */ {
 public:
  Proto_StoreTSCheckRsp();
  virtual ~Proto_StoreTSCheckRsp();

  Proto_StoreTSCheckRsp(const Proto_StoreTSCheckRsp& from);

  inline Proto_StoreTSCheckRsp& operator=(const Proto_StoreTSCheckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_StoreTSCheckRsp(Proto_StoreTSCheckRsp&& from) noexcept
    : Proto_StoreTSCheckRsp() {
    *this = ::std::move(from);
  }

  inline Proto_StoreTSCheckRsp& operator=(Proto_StoreTSCheckRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_StoreTSCheckRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_StoreTSCheckRsp* internal_default_instance() {
    return reinterpret_cast<const Proto_StoreTSCheckRsp*>(
               &_Proto_StoreTSCheckRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Proto_StoreTSCheckRsp* other);
  friend void swap(Proto_StoreTSCheckRsp& a, Proto_StoreTSCheckRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_StoreTSCheckRsp* New() const final {
    return CreateMaybeMessage<Proto_StoreTSCheckRsp>(NULL);
  }

  Proto_StoreTSCheckRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_StoreTSCheckRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_StoreTSCheckRsp& from);
  void MergeFrom(const Proto_StoreTSCheckRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_StoreTSCheckRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:NFServer.Proto_StoreTSCheckRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_TestSendProxyMsgToOtherServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_TestSendProxyMsgToOtherServer) */ {
 public:
  Proto_TestSendProxyMsgToOtherServer();
  virtual ~Proto_TestSendProxyMsgToOtherServer();

  Proto_TestSendProxyMsgToOtherServer(const Proto_TestSendProxyMsgToOtherServer& from);

  inline Proto_TestSendProxyMsgToOtherServer& operator=(const Proto_TestSendProxyMsgToOtherServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_TestSendProxyMsgToOtherServer(Proto_TestSendProxyMsgToOtherServer&& from) noexcept
    : Proto_TestSendProxyMsgToOtherServer() {
    *this = ::std::move(from);
  }

  inline Proto_TestSendProxyMsgToOtherServer& operator=(Proto_TestSendProxyMsgToOtherServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_TestSendProxyMsgToOtherServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_TestSendProxyMsgToOtherServer* internal_default_instance() {
    return reinterpret_cast<const Proto_TestSendProxyMsgToOtherServer*>(
               &_Proto_TestSendProxyMsgToOtherServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Proto_TestSendProxyMsgToOtherServer* other);
  friend void swap(Proto_TestSendProxyMsgToOtherServer& a, Proto_TestSendProxyMsgToOtherServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_TestSendProxyMsgToOtherServer* New() const final {
    return CreateMaybeMessage<Proto_TestSendProxyMsgToOtherServer>(NULL);
  }

  Proto_TestSendProxyMsgToOtherServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_TestSendProxyMsgToOtherServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_TestSendProxyMsgToOtherServer& from);
  void MergeFrom(const Proto_TestSendProxyMsgToOtherServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_TestSendProxyMsgToOtherServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // int32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_TestSendProxyMsgToOtherServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int32 seq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_TestOtherServerSendMsgToProxyServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_TestOtherServerSendMsgToProxyServer) */ {
 public:
  Proto_TestOtherServerSendMsgToProxyServer();
  virtual ~Proto_TestOtherServerSendMsgToProxyServer();

  Proto_TestOtherServerSendMsgToProxyServer(const Proto_TestOtherServerSendMsgToProxyServer& from);

  inline Proto_TestOtherServerSendMsgToProxyServer& operator=(const Proto_TestOtherServerSendMsgToProxyServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_TestOtherServerSendMsgToProxyServer(Proto_TestOtherServerSendMsgToProxyServer&& from) noexcept
    : Proto_TestOtherServerSendMsgToProxyServer() {
    *this = ::std::move(from);
  }

  inline Proto_TestOtherServerSendMsgToProxyServer& operator=(Proto_TestOtherServerSendMsgToProxyServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_TestOtherServerSendMsgToProxyServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_TestOtherServerSendMsgToProxyServer* internal_default_instance() {
    return reinterpret_cast<const Proto_TestOtherServerSendMsgToProxyServer*>(
               &_Proto_TestOtherServerSendMsgToProxyServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Proto_TestOtherServerSendMsgToProxyServer* other);
  friend void swap(Proto_TestOtherServerSendMsgToProxyServer& a, Proto_TestOtherServerSendMsgToProxyServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_TestOtherServerSendMsgToProxyServer* New() const final {
    return CreateMaybeMessage<Proto_TestOtherServerSendMsgToProxyServer>(NULL);
  }

  Proto_TestOtherServerSendMsgToProxyServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_TestOtherServerSendMsgToProxyServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_TestOtherServerSendMsgToProxyServer& from);
  void MergeFrom(const Proto_TestOtherServerSendMsgToProxyServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_TestOtherServerSendMsgToProxyServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // int32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_TestOtherServerSendMsgToProxyServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int32 seq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_TestSendWorldMsgToOtherServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_TestSendWorldMsgToOtherServer) */ {
 public:
  Proto_TestSendWorldMsgToOtherServer();
  virtual ~Proto_TestSendWorldMsgToOtherServer();

  Proto_TestSendWorldMsgToOtherServer(const Proto_TestSendWorldMsgToOtherServer& from);

  inline Proto_TestSendWorldMsgToOtherServer& operator=(const Proto_TestSendWorldMsgToOtherServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_TestSendWorldMsgToOtherServer(Proto_TestSendWorldMsgToOtherServer&& from) noexcept
    : Proto_TestSendWorldMsgToOtherServer() {
    *this = ::std::move(from);
  }

  inline Proto_TestSendWorldMsgToOtherServer& operator=(Proto_TestSendWorldMsgToOtherServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_TestSendWorldMsgToOtherServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_TestSendWorldMsgToOtherServer* internal_default_instance() {
    return reinterpret_cast<const Proto_TestSendWorldMsgToOtherServer*>(
               &_Proto_TestSendWorldMsgToOtherServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Proto_TestSendWorldMsgToOtherServer* other);
  friend void swap(Proto_TestSendWorldMsgToOtherServer& a, Proto_TestSendWorldMsgToOtherServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_TestSendWorldMsgToOtherServer* New() const final {
    return CreateMaybeMessage<Proto_TestSendWorldMsgToOtherServer>(NULL);
  }

  Proto_TestSendWorldMsgToOtherServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_TestSendWorldMsgToOtherServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_TestSendWorldMsgToOtherServer& from);
  void MergeFrom(const Proto_TestSendWorldMsgToOtherServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_TestSendWorldMsgToOtherServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // int32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_TestSendWorldMsgToOtherServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int32 seq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Proto_TestOtherServerToWorldServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.Proto_TestOtherServerToWorldServer) */ {
 public:
  Proto_TestOtherServerToWorldServer();
  virtual ~Proto_TestOtherServerToWorldServer();

  Proto_TestOtherServerToWorldServer(const Proto_TestOtherServerToWorldServer& from);

  inline Proto_TestOtherServerToWorldServer& operator=(const Proto_TestOtherServerToWorldServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Proto_TestOtherServerToWorldServer(Proto_TestOtherServerToWorldServer&& from) noexcept
    : Proto_TestOtherServerToWorldServer() {
    *this = ::std::move(from);
  }

  inline Proto_TestOtherServerToWorldServer& operator=(Proto_TestOtherServerToWorldServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_TestOtherServerToWorldServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto_TestOtherServerToWorldServer* internal_default_instance() {
    return reinterpret_cast<const Proto_TestOtherServerToWorldServer*>(
               &_Proto_TestOtherServerToWorldServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Proto_TestOtherServerToWorldServer* other);
  friend void swap(Proto_TestOtherServerToWorldServer& a, Proto_TestOtherServerToWorldServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Proto_TestOtherServerToWorldServer* New() const final {
    return CreateMaybeMessage<Proto_TestOtherServerToWorldServer>(NULL);
  }

  Proto_TestOtherServerToWorldServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Proto_TestOtherServerToWorldServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Proto_TestOtherServerToWorldServer& from);
  void MergeFrom(const Proto_TestOtherServerToWorldServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto_TestOtherServerToWorldServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // int32 seq = 3;
  void clear_seq();
  static const int kSeqFieldNumber = 3;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.Proto_TestOtherServerToWorldServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int32 seq_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcRequestGetServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.RpcRequestGetServerInfo) */ {
 public:
  RpcRequestGetServerInfo();
  virtual ~RpcRequestGetServerInfo();

  RpcRequestGetServerInfo(const RpcRequestGetServerInfo& from);

  inline RpcRequestGetServerInfo& operator=(const RpcRequestGetServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcRequestGetServerInfo(RpcRequestGetServerInfo&& from) noexcept
    : RpcRequestGetServerInfo() {
    *this = ::std::move(from);
  }

  inline RpcRequestGetServerInfo& operator=(RpcRequestGetServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequestGetServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcRequestGetServerInfo* internal_default_instance() {
    return reinterpret_cast<const RpcRequestGetServerInfo*>(
               &_RpcRequestGetServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RpcRequestGetServerInfo* other);
  friend void swap(RpcRequestGetServerInfo& a, RpcRequestGetServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcRequestGetServerInfo* New() const final {
    return CreateMaybeMessage<RpcRequestGetServerInfo>(NULL);
  }

  RpcRequestGetServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcRequestGetServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcRequestGetServerInfo& from);
  void MergeFrom(const RpcRequestGetServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestGetServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // @@protoc_insertion_point(class_scope:NFServer.RpcRequestGetServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcWatchServerReqeust : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.RpcWatchServerReqeust) */ {
 public:
  RpcWatchServerReqeust();
  virtual ~RpcWatchServerReqeust();

  RpcWatchServerReqeust(const RpcWatchServerReqeust& from);

  inline RpcWatchServerReqeust& operator=(const RpcWatchServerReqeust& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcWatchServerReqeust(RpcWatchServerReqeust&& from) noexcept
    : RpcWatchServerReqeust() {
    *this = ::std::move(from);
  }

  inline RpcWatchServerReqeust& operator=(RpcWatchServerReqeust&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcWatchServerReqeust& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcWatchServerReqeust* internal_default_instance() {
    return reinterpret_cast<const RpcWatchServerReqeust*>(
               &_RpcWatchServerReqeust_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(RpcWatchServerReqeust* other);
  friend void swap(RpcWatchServerReqeust& a, RpcWatchServerReqeust& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcWatchServerReqeust* New() const final {
    return CreateMaybeMessage<RpcWatchServerReqeust>(NULL);
  }

  RpcWatchServerReqeust* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcWatchServerReqeust>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcWatchServerReqeust& from);
  void MergeFrom(const RpcWatchServerReqeust& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcWatchServerReqeust* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 src_server_type = 1;
  void clear_src_server_type();
  static const int kSrcServerTypeFieldNumber = 1;
  ::google::protobuf::int32 src_server_type() const;
  void set_src_server_type(::google::protobuf::int32 value);

  // int32 src_bus_id = 2;
  void clear_src_bus_id();
  static const int kSrcBusIdFieldNumber = 2;
  ::google::protobuf::int32 src_bus_id() const;
  void set_src_bus_id(::google::protobuf::int32 value);

  // int32 dst_server_type = 3;
  void clear_dst_server_type();
  static const int kDstServerTypeFieldNumber = 3;
  ::google::protobuf::int32 dst_server_type() const;
  void set_dst_server_type(::google::protobuf::int32 value);

  // int32 dst_bus_id = 4;
  void clear_dst_bus_id();
  static const int kDstBusIdFieldNumber = 4;
  ::google::protobuf::int32 dst_bus_id() const;
  void set_dst_bus_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.RpcWatchServerReqeust)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 src_server_type_;
  ::google::protobuf::int32 src_bus_id_;
  ::google::protobuf::int32 dst_server_type_;
  ::google::protobuf::int32 dst_bus_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcWatchServerRespone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFServer.RpcWatchServerRespone) */ {
 public:
  RpcWatchServerRespone();
  virtual ~RpcWatchServerRespone();

  RpcWatchServerRespone(const RpcWatchServerRespone& from);

  inline RpcWatchServerRespone& operator=(const RpcWatchServerRespone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcWatchServerRespone(RpcWatchServerRespone&& from) noexcept
    : RpcWatchServerRespone() {
    *this = ::std::move(from);
  }

  inline RpcWatchServerRespone& operator=(RpcWatchServerRespone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcWatchServerRespone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcWatchServerRespone* internal_default_instance() {
    return reinterpret_cast<const RpcWatchServerRespone*>(
               &_RpcWatchServerRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(RpcWatchServerRespone* other);
  friend void swap(RpcWatchServerRespone& a, RpcWatchServerRespone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcWatchServerRespone* New() const final {
    return CreateMaybeMessage<RpcWatchServerRespone>(NULL);
  }

  RpcWatchServerRespone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcWatchServerRespone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcWatchServerRespone& from);
  void MergeFrom(const RpcWatchServerRespone& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcWatchServerRespone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ret_code = 1;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFServer.RpcWatchServerRespone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ret_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ServerMsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonMsgRsp

// int32 result = 1;
inline void CommonMsgRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 CommonMsgRsp::result() const {
  // @@protoc_insertion_point(field_get:NFServer.CommonMsgRsp.result)
  return result_;
}
inline void CommonMsgRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NFServer.CommonMsgRsp.result)
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorReloadReq

// string server_name = 1;
inline void Proto_MasterTMonitorReloadReq::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorReloadReq::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorReloadReq.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MasterTMonitorReloadReq::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorReloadReq.server_name)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorReloadReq::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorReloadReq.server_name)
}
#endif
inline void Proto_MasterTMonitorReloadReq::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorReloadReq.server_name)
}
inline void Proto_MasterTMonitorReloadReq::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorReloadReq.server_name)
}
inline ::std::string* Proto_MasterTMonitorReloadReq::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorReloadReq.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorReloadReq::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorReloadReq.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorReloadReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorReloadReq.server_name)
}

// string server_id = 2;
inline void Proto_MasterTMonitorReloadReq::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorReloadReq::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorReloadReq.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MasterTMonitorReloadReq::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorReloadReq.server_id)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorReloadReq::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorReloadReq.server_id)
}
#endif
inline void Proto_MasterTMonitorReloadReq::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorReloadReq.server_id)
}
inline void Proto_MasterTMonitorReloadReq::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorReloadReq.server_id)
}
inline ::std::string* Proto_MasterTMonitorReloadReq::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorReloadReq.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorReloadReq::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorReloadReq.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorReloadReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorReloadReq.server_id)
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorRestartReq

// string server_name = 1;
inline void Proto_MasterTMonitorRestartReq::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorRestartReq::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorRestartReq.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MasterTMonitorRestartReq::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorRestartReq.server_name)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorRestartReq::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorRestartReq.server_name)
}
#endif
inline void Proto_MasterTMonitorRestartReq::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorRestartReq.server_name)
}
inline void Proto_MasterTMonitorRestartReq::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorRestartReq.server_name)
}
inline ::std::string* Proto_MasterTMonitorRestartReq::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorRestartReq.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorRestartReq::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorRestartReq.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorRestartReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorRestartReq.server_name)
}

// string server_id = 2;
inline void Proto_MasterTMonitorRestartReq::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorRestartReq::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorRestartReq.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MasterTMonitorRestartReq::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorRestartReq.server_id)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorRestartReq::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorRestartReq.server_id)
}
#endif
inline void Proto_MasterTMonitorRestartReq::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorRestartReq.server_id)
}
inline void Proto_MasterTMonitorRestartReq::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorRestartReq.server_id)
}
inline ::std::string* Proto_MasterTMonitorRestartReq::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorRestartReq.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorRestartReq::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorRestartReq.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorRestartReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorRestartReq.server_id)
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorStartReq

// string server_name = 1;
inline void Proto_MasterTMonitorStartReq::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorStartReq::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorStartReq.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MasterTMonitorStartReq::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorStartReq.server_name)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorStartReq::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorStartReq.server_name)
}
#endif
inline void Proto_MasterTMonitorStartReq::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorStartReq.server_name)
}
inline void Proto_MasterTMonitorStartReq::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorStartReq.server_name)
}
inline ::std::string* Proto_MasterTMonitorStartReq::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorStartReq.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorStartReq::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorStartReq.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorStartReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorStartReq.server_name)
}

// string server_id = 2;
inline void Proto_MasterTMonitorStartReq::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorStartReq::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorStartReq.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MasterTMonitorStartReq::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorStartReq.server_id)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorStartReq::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorStartReq.server_id)
}
#endif
inline void Proto_MasterTMonitorStartReq::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorStartReq.server_id)
}
inline void Proto_MasterTMonitorStartReq::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorStartReq.server_id)
}
inline ::std::string* Proto_MasterTMonitorStartReq::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorStartReq.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorStartReq::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorStartReq.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorStartReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorStartReq.server_id)
}

// -------------------------------------------------------------------

// Proto_MasterTMonitorStopReq

// string server_name = 1;
inline void Proto_MasterTMonitorStopReq::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorStopReq::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorStopReq.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MasterTMonitorStopReq::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorStopReq.server_name)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorStopReq::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorStopReq.server_name)
}
#endif
inline void Proto_MasterTMonitorStopReq::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorStopReq.server_name)
}
inline void Proto_MasterTMonitorStopReq::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorStopReq.server_name)
}
inline ::std::string* Proto_MasterTMonitorStopReq::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorStopReq.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorStopReq::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorStopReq.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorStopReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorStopReq.server_name)
}

// string server_id = 2;
inline void Proto_MasterTMonitorStopReq::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MasterTMonitorStopReq::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MasterTMonitorStopReq.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MasterTMonitorStopReq::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MasterTMonitorStopReq.server_id)
}
#if LANG_CXX11
inline void Proto_MasterTMonitorStopReq::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MasterTMonitorStopReq.server_id)
}
#endif
inline void Proto_MasterTMonitorStopReq::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MasterTMonitorStopReq.server_id)
}
inline void Proto_MasterTMonitorStopReq::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MasterTMonitorStopReq.server_id)
}
inline ::std::string* Proto_MasterTMonitorStopReq::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MasterTMonitorStopReq.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MasterTMonitorStopReq::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MasterTMonitorStopReq.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MasterTMonitorStopReq::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MasterTMonitorStopReq.server_id)
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterReloadRsp

// int32 result = 1;
inline void Proto_MonitorTMasterReloadRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Proto_MonitorTMasterReloadRsp::result() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterReloadRsp.result)
  return result_;
}
inline void Proto_MonitorTMasterReloadRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterReloadRsp.result)
}

// string server_name = 2;
inline void Proto_MonitorTMasterReloadRsp::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterReloadRsp::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MonitorTMasterReloadRsp::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterReloadRsp::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
}
#endif
inline void Proto_MonitorTMasterReloadRsp::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
}
inline void Proto_MonitorTMasterReloadRsp::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterReloadRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterReloadRsp.server_name)
}

// string server_id = 3;
inline void Proto_MonitorTMasterReloadRsp::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterReloadRsp::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MonitorTMasterReloadRsp::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterReloadRsp::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
}
#endif
inline void Proto_MonitorTMasterReloadRsp::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
}
inline void Proto_MonitorTMasterReloadRsp::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterReloadRsp::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterReloadRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterReloadRsp.server_id)
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterRestartRsp

// int32 result = 1;
inline void Proto_MonitorTMasterRestartRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Proto_MonitorTMasterRestartRsp::result() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterRestartRsp.result)
  return result_;
}
inline void Proto_MonitorTMasterRestartRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterRestartRsp.result)
}

// string server_name = 2;
inline void Proto_MonitorTMasterRestartRsp::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterRestartRsp::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MonitorTMasterRestartRsp::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterRestartRsp::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
}
#endif
inline void Proto_MonitorTMasterRestartRsp::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
}
inline void Proto_MonitorTMasterRestartRsp::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterRestartRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterRestartRsp.server_name)
}

// string server_id = 3;
inline void Proto_MonitorTMasterRestartRsp::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterRestartRsp::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MonitorTMasterRestartRsp::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterRestartRsp::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
}
#endif
inline void Proto_MonitorTMasterRestartRsp::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
}
inline void Proto_MonitorTMasterRestartRsp::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterRestartRsp::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterRestartRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterRestartRsp.server_id)
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterStartRsp

// int32 result = 1;
inline void Proto_MonitorTMasterStartRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Proto_MonitorTMasterStartRsp::result() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterStartRsp.result)
  return result_;
}
inline void Proto_MonitorTMasterStartRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterStartRsp.result)
}

// string server_name = 2;
inline void Proto_MonitorTMasterStartRsp::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterStartRsp::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterStartRsp.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MonitorTMasterStartRsp::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterStartRsp.server_name)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterStartRsp::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterStartRsp.server_name)
}
#endif
inline void Proto_MonitorTMasterStartRsp::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterStartRsp.server_name)
}
inline void Proto_MonitorTMasterStartRsp::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterStartRsp.server_name)
}
inline ::std::string* Proto_MonitorTMasterStartRsp::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterStartRsp.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterStartRsp::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterStartRsp.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterStartRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterStartRsp.server_name)
}

// string server_id = 3;
inline void Proto_MonitorTMasterStartRsp::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterStartRsp::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterStartRsp.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MonitorTMasterStartRsp::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterStartRsp.server_id)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterStartRsp::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterStartRsp.server_id)
}
#endif
inline void Proto_MonitorTMasterStartRsp::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterStartRsp.server_id)
}
inline void Proto_MonitorTMasterStartRsp::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterStartRsp.server_id)
}
inline ::std::string* Proto_MonitorTMasterStartRsp::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterStartRsp.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterStartRsp::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterStartRsp.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterStartRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterStartRsp.server_id)
}

// -------------------------------------------------------------------

// Proto_MonitorTMasterStopRsp

// int32 result = 1;
inline void Proto_MonitorTMasterStopRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 Proto_MonitorTMasterStopRsp::result() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterStopRsp.result)
  return result_;
}
inline void Proto_MonitorTMasterStopRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterStopRsp.result)
}

// string server_name = 2;
inline void Proto_MonitorTMasterStopRsp::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterStopRsp::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterStopRsp.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_MonitorTMasterStopRsp::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterStopRsp.server_name)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterStopRsp::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterStopRsp.server_name)
}
#endif
inline void Proto_MonitorTMasterStopRsp::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterStopRsp.server_name)
}
inline void Proto_MonitorTMasterStopRsp::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterStopRsp.server_name)
}
inline ::std::string* Proto_MonitorTMasterStopRsp::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterStopRsp.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterStopRsp::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterStopRsp.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterStopRsp::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterStopRsp.server_name)
}

// string server_id = 3;
inline void Proto_MonitorTMasterStopRsp::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_MonitorTMasterStopRsp::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_MonitorTMasterStopRsp.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_MonitorTMasterStopRsp::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_MonitorTMasterStopRsp.server_id)
}
#if LANG_CXX11
inline void Proto_MonitorTMasterStopRsp::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_MonitorTMasterStopRsp.server_id)
}
#endif
inline void Proto_MonitorTMasterStopRsp::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_MonitorTMasterStopRsp.server_id)
}
inline void Proto_MonitorTMasterStopRsp::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_MonitorTMasterStopRsp.server_id)
}
inline ::std::string* Proto_MonitorTMasterStopRsp::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_MonitorTMasterStopRsp.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_MonitorTMasterStopRsp::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_MonitorTMasterStopRsp.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_MonitorTMasterStopRsp::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_MonitorTMasterStopRsp.server_id)
}

// -------------------------------------------------------------------

// Proto_STStoreCheckReq

// -------------------------------------------------------------------

// Proto_StoreTSCheckRsp

// -------------------------------------------------------------------

// Proto_TestSendProxyMsgToOtherServer

// string server_id = 1;
inline void Proto_TestSendProxyMsgToOtherServer::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestSendProxyMsgToOtherServer::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_TestSendProxyMsgToOtherServer::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
}
#if LANG_CXX11
inline void Proto_TestSendProxyMsgToOtherServer::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
}
#endif
inline void Proto_TestSendProxyMsgToOtherServer::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
}
inline void Proto_TestSendProxyMsgToOtherServer::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
}
inline ::std::string* Proto_TestSendProxyMsgToOtherServer::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestSendProxyMsgToOtherServer::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestSendProxyMsgToOtherServer::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestSendProxyMsgToOtherServer.server_id)
}

// string server_name = 2;
inline void Proto_TestSendProxyMsgToOtherServer::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestSendProxyMsgToOtherServer::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_TestSendProxyMsgToOtherServer::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
}
#if LANG_CXX11
inline void Proto_TestSendProxyMsgToOtherServer::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
}
#endif
inline void Proto_TestSendProxyMsgToOtherServer::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
}
inline void Proto_TestSendProxyMsgToOtherServer::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
}
inline ::std::string* Proto_TestSendProxyMsgToOtherServer::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestSendProxyMsgToOtherServer::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestSendProxyMsgToOtherServer::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestSendProxyMsgToOtherServer.server_name)
}

// int32 seq = 3;
inline void Proto_TestSendProxyMsgToOtherServer::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 Proto_TestSendProxyMsgToOtherServer::seq() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestSendProxyMsgToOtherServer.seq)
  return seq_;
}
inline void Proto_TestSendProxyMsgToOtherServer::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestSendProxyMsgToOtherServer.seq)
}

// -------------------------------------------------------------------

// Proto_TestOtherServerSendMsgToProxyServer

// string server_id = 1;
inline void Proto_TestOtherServerSendMsgToProxyServer::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestOtherServerSendMsgToProxyServer::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
}
#if LANG_CXX11
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
}
#endif
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
}
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
}
inline ::std::string* Proto_TestOtherServerSendMsgToProxyServer::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestOtherServerSendMsgToProxyServer::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestOtherServerSendMsgToProxyServer::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_id)
}

// string server_name = 2;
inline void Proto_TestOtherServerSendMsgToProxyServer::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestOtherServerSendMsgToProxyServer::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
}
#if LANG_CXX11
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
}
#endif
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
}
inline void Proto_TestOtherServerSendMsgToProxyServer::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
}
inline ::std::string* Proto_TestOtherServerSendMsgToProxyServer::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestOtherServerSendMsgToProxyServer::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestOtherServerSendMsgToProxyServer::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestOtherServerSendMsgToProxyServer.server_name)
}

// int32 seq = 3;
inline void Proto_TestOtherServerSendMsgToProxyServer::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 Proto_TestOtherServerSendMsgToProxyServer::seq() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestOtherServerSendMsgToProxyServer.seq)
  return seq_;
}
inline void Proto_TestOtherServerSendMsgToProxyServer::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestOtherServerSendMsgToProxyServer.seq)
}

// -------------------------------------------------------------------

// Proto_TestSendWorldMsgToOtherServer

// string server_id = 1;
inline void Proto_TestSendWorldMsgToOtherServer::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestSendWorldMsgToOtherServer::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_TestSendWorldMsgToOtherServer::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
}
#if LANG_CXX11
inline void Proto_TestSendWorldMsgToOtherServer::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
}
#endif
inline void Proto_TestSendWorldMsgToOtherServer::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
}
inline void Proto_TestSendWorldMsgToOtherServer::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
}
inline ::std::string* Proto_TestSendWorldMsgToOtherServer::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestSendWorldMsgToOtherServer::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestSendWorldMsgToOtherServer::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestSendWorldMsgToOtherServer.server_id)
}

// string server_name = 2;
inline void Proto_TestSendWorldMsgToOtherServer::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestSendWorldMsgToOtherServer::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_TestSendWorldMsgToOtherServer::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
}
#if LANG_CXX11
inline void Proto_TestSendWorldMsgToOtherServer::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
}
#endif
inline void Proto_TestSendWorldMsgToOtherServer::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
}
inline void Proto_TestSendWorldMsgToOtherServer::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
}
inline ::std::string* Proto_TestSendWorldMsgToOtherServer::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestSendWorldMsgToOtherServer::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestSendWorldMsgToOtherServer::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestSendWorldMsgToOtherServer.server_name)
}

// int32 seq = 3;
inline void Proto_TestSendWorldMsgToOtherServer::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 Proto_TestSendWorldMsgToOtherServer::seq() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestSendWorldMsgToOtherServer.seq)
  return seq_;
}
inline void Proto_TestSendWorldMsgToOtherServer::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestSendWorldMsgToOtherServer.seq)
}

// -------------------------------------------------------------------

// Proto_TestOtherServerToWorldServer

// string server_id = 1;
inline void Proto_TestOtherServerToWorldServer::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestOtherServerToWorldServer::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestOtherServerToWorldServer.server_id)
  return server_id_.GetNoArena();
}
inline void Proto_TestOtherServerToWorldServer::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestOtherServerToWorldServer.server_id)
}
#if LANG_CXX11
inline void Proto_TestOtherServerToWorldServer::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestOtherServerToWorldServer.server_id)
}
#endif
inline void Proto_TestOtherServerToWorldServer::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestOtherServerToWorldServer.server_id)
}
inline void Proto_TestOtherServerToWorldServer::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestOtherServerToWorldServer.server_id)
}
inline ::std::string* Proto_TestOtherServerToWorldServer::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestOtherServerToWorldServer.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestOtherServerToWorldServer::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestOtherServerToWorldServer.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestOtherServerToWorldServer::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestOtherServerToWorldServer.server_id)
}

// string server_name = 2;
inline void Proto_TestOtherServerToWorldServer::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Proto_TestOtherServerToWorldServer::server_name() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestOtherServerToWorldServer.server_name)
  return server_name_.GetNoArena();
}
inline void Proto_TestOtherServerToWorldServer::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestOtherServerToWorldServer.server_name)
}
#if LANG_CXX11
inline void Proto_TestOtherServerToWorldServer::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.Proto_TestOtherServerToWorldServer.server_name)
}
#endif
inline void Proto_TestOtherServerToWorldServer::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.Proto_TestOtherServerToWorldServer.server_name)
}
inline void Proto_TestOtherServerToWorldServer::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.Proto_TestOtherServerToWorldServer.server_name)
}
inline ::std::string* Proto_TestOtherServerToWorldServer::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.Proto_TestOtherServerToWorldServer.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Proto_TestOtherServerToWorldServer::release_server_name() {
  // @@protoc_insertion_point(field_release:NFServer.Proto_TestOtherServerToWorldServer.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Proto_TestOtherServerToWorldServer::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:NFServer.Proto_TestOtherServerToWorldServer.server_name)
}

// int32 seq = 3;
inline void Proto_TestOtherServerToWorldServer::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 Proto_TestOtherServerToWorldServer::seq() const {
  // @@protoc_insertion_point(field_get:NFServer.Proto_TestOtherServerToWorldServer.seq)
  return seq_;
}
inline void Proto_TestOtherServerToWorldServer::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:NFServer.Proto_TestOtherServerToWorldServer.seq)
}

// -------------------------------------------------------------------

// RpcRequestGetServerInfo

// string server_id = 1;
inline void RpcRequestGetServerInfo::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcRequestGetServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:NFServer.RpcRequestGetServerInfo.server_id)
  return server_id_.GetNoArena();
}
inline void RpcRequestGetServerInfo::set_server_id(const ::std::string& value) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFServer.RpcRequestGetServerInfo.server_id)
}
#if LANG_CXX11
inline void RpcRequestGetServerInfo::set_server_id(::std::string&& value) {
  
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFServer.RpcRequestGetServerInfo.server_id)
}
#endif
inline void RpcRequestGetServerInfo::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFServer.RpcRequestGetServerInfo.server_id)
}
inline void RpcRequestGetServerInfo::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFServer.RpcRequestGetServerInfo.server_id)
}
inline ::std::string* RpcRequestGetServerInfo::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:NFServer.RpcRequestGetServerInfo.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequestGetServerInfo::release_server_id() {
  // @@protoc_insertion_point(field_release:NFServer.RpcRequestGetServerInfo.server_id)
  
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequestGetServerInfo::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:NFServer.RpcRequestGetServerInfo.server_id)
}

// -------------------------------------------------------------------

// RpcWatchServerReqeust

// int32 src_server_type = 1;
inline void RpcWatchServerReqeust::clear_src_server_type() {
  src_server_type_ = 0;
}
inline ::google::protobuf::int32 RpcWatchServerReqeust::src_server_type() const {
  // @@protoc_insertion_point(field_get:NFServer.RpcWatchServerReqeust.src_server_type)
  return src_server_type_;
}
inline void RpcWatchServerReqeust::set_src_server_type(::google::protobuf::int32 value) {
  
  src_server_type_ = value;
  // @@protoc_insertion_point(field_set:NFServer.RpcWatchServerReqeust.src_server_type)
}

// int32 src_bus_id = 2;
inline void RpcWatchServerReqeust::clear_src_bus_id() {
  src_bus_id_ = 0;
}
inline ::google::protobuf::int32 RpcWatchServerReqeust::src_bus_id() const {
  // @@protoc_insertion_point(field_get:NFServer.RpcWatchServerReqeust.src_bus_id)
  return src_bus_id_;
}
inline void RpcWatchServerReqeust::set_src_bus_id(::google::protobuf::int32 value) {
  
  src_bus_id_ = value;
  // @@protoc_insertion_point(field_set:NFServer.RpcWatchServerReqeust.src_bus_id)
}

// int32 dst_server_type = 3;
inline void RpcWatchServerReqeust::clear_dst_server_type() {
  dst_server_type_ = 0;
}
inline ::google::protobuf::int32 RpcWatchServerReqeust::dst_server_type() const {
  // @@protoc_insertion_point(field_get:NFServer.RpcWatchServerReqeust.dst_server_type)
  return dst_server_type_;
}
inline void RpcWatchServerReqeust::set_dst_server_type(::google::protobuf::int32 value) {
  
  dst_server_type_ = value;
  // @@protoc_insertion_point(field_set:NFServer.RpcWatchServerReqeust.dst_server_type)
}

// int32 dst_bus_id = 4;
inline void RpcWatchServerReqeust::clear_dst_bus_id() {
  dst_bus_id_ = 0;
}
inline ::google::protobuf::int32 RpcWatchServerReqeust::dst_bus_id() const {
  // @@protoc_insertion_point(field_get:NFServer.RpcWatchServerReqeust.dst_bus_id)
  return dst_bus_id_;
}
inline void RpcWatchServerReqeust::set_dst_bus_id(::google::protobuf::int32 value) {
  
  dst_bus_id_ = value;
  // @@protoc_insertion_point(field_set:NFServer.RpcWatchServerReqeust.dst_bus_id)
}

// -------------------------------------------------------------------

// RpcWatchServerRespone

// int32 ret_code = 1;
inline void RpcWatchServerRespone::clear_ret_code() {
  ret_code_ = 0;
}
inline ::google::protobuf::int32 RpcWatchServerRespone::ret_code() const {
  // @@protoc_insertion_point(field_get:NFServer.RpcWatchServerRespone.ret_code)
  return ret_code_;
}
inline void RpcWatchServerRespone::set_ret_code(::google::protobuf::int32 value) {
  
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:NFServer.RpcWatchServerRespone.ret_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFServer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFServer::Proto_SvrMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFServer::Proto_SvrMsgID>() {
  return ::NFServer::Proto_SvrMsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ServerMsg_2eproto
