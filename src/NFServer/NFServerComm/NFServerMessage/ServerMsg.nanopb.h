/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 */

#ifndef PB_NFSERVER_SERVERMSG_NANOPB_H_INCLUDED
#define PB_NFSERVER_SERVERMSG_NANOPB_H_INCLUDED
#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <NFComm/NFCore/NFHash.hpp>
#include <pb.h>

#include "ServerMsg.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _Proto_SvrMsgID {
    NF_SERVER_MSG_ZERO = 0,
    NF_STSTORE_CHECK_STORE_SERVER_REQ = 40,
    NF_STORETS_CHECK_STORE_SERVER_RSP = 41,
    NF_TEST_SEND_PROXY_MSG_TO_OTHER_SERVER_REQ = 42,
    NF_TEST_OTHER_SERVER_SEND_MSG_TO_PROXY_SERVER = 43,
    NF_TEST_OTHER_SERVER_MSG_TO_WORLD_SERVER_REQ = 44,
    NF_TEST_WORLD_SERVER_MSG_TO_OTHER_SERVER_REQ = 45,
    NF_RPC_SERVICE_GET_SERVER_INFO_REQ = 46
} Proto_SvrMsgID;
#define _Proto_SvrMsgID_MIN NF_SERVER_MSG_ZERO
#define _Proto_SvrMsgID_MAX NF_RPC_SERVICE_GET_SERVER_INFO_REQ
#define _Proto_SvrMsgID_ARRAYSIZE ((Proto_SvrMsgID)(NF_RPC_SERVICE_GET_SERVER_INFO_REQ+1))
#define _Proto_SvrMsgID_ALLSIZE (8)

/* Struct definitions */
struct Proto_STStoreCheckReq {
    char dummy_field;

	Proto_STStoreCheckReq();
	~Proto_STStoreCheckReq();
	Proto_STStoreCheckReq(const Proto_STStoreCheckReq& stArgsData);
	Proto_STStoreCheckReq& operator=(const Proto_STStoreCheckReq& stArgsData);
	void CopyData(const Proto_STStoreCheckReq& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_STStoreCheckReq& cc);
    void ToPb(NFServer::Proto_STStoreCheckReq* cc) const;
    NFServer::Proto_STStoreCheckReq ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_STStoreCheckReq) */
};

struct Proto_StoreTSCheckRsp {
    char dummy_field;

	Proto_StoreTSCheckRsp();
	~Proto_StoreTSCheckRsp();
	Proto_StoreTSCheckRsp(const Proto_StoreTSCheckRsp& stArgsData);
	Proto_StoreTSCheckRsp& operator=(const Proto_StoreTSCheckRsp& stArgsData);
	void CopyData(const Proto_StoreTSCheckRsp& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_StoreTSCheckRsp& cc);
    void ToPb(NFServer::Proto_StoreTSCheckRsp* cc) const;
    NFServer::Proto_StoreTSCheckRsp ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_StoreTSCheckRsp) */
};

struct CommonMsgRsp {
    int32_t result;

	CommonMsgRsp();
	~CommonMsgRsp();
	CommonMsgRsp(const CommonMsgRsp& stArgsData);
	CommonMsgRsp& operator=(const CommonMsgRsp& stArgsData);
	void CopyData(const CommonMsgRsp& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::CommonMsgRsp& cc);
    void ToPb(NFServer::CommonMsgRsp* cc) const;
    NFServer::CommonMsgRsp ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:CommonMsgRsp) */
};

struct Proto_MasterTMonitorReloadReq {
    std::string server_name;
    std::string server_id;

	Proto_MasterTMonitorReloadReq();
	~Proto_MasterTMonitorReloadReq();
	Proto_MasterTMonitorReloadReq(const Proto_MasterTMonitorReloadReq& stArgsData);
	Proto_MasterTMonitorReloadReq& operator=(const Proto_MasterTMonitorReloadReq& stArgsData);
	void CopyData(const Proto_MasterTMonitorReloadReq& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MasterTMonitorReloadReq& cc);
    void ToPb(NFServer::Proto_MasterTMonitorReloadReq* cc) const;
    NFServer::Proto_MasterTMonitorReloadReq ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MasterTMonitorReloadReq) */
};

struct Proto_MasterTMonitorRestartReq {
    std::string server_name;
    std::string server_id;

	Proto_MasterTMonitorRestartReq();
	~Proto_MasterTMonitorRestartReq();
	Proto_MasterTMonitorRestartReq(const Proto_MasterTMonitorRestartReq& stArgsData);
	Proto_MasterTMonitorRestartReq& operator=(const Proto_MasterTMonitorRestartReq& stArgsData);
	void CopyData(const Proto_MasterTMonitorRestartReq& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MasterTMonitorRestartReq& cc);
    void ToPb(NFServer::Proto_MasterTMonitorRestartReq* cc) const;
    NFServer::Proto_MasterTMonitorRestartReq ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MasterTMonitorRestartReq) */
};

struct Proto_MasterTMonitorStartReq {
    std::string server_name;
    std::string server_id;

	Proto_MasterTMonitorStartReq();
	~Proto_MasterTMonitorStartReq();
	Proto_MasterTMonitorStartReq(const Proto_MasterTMonitorStartReq& stArgsData);
	Proto_MasterTMonitorStartReq& operator=(const Proto_MasterTMonitorStartReq& stArgsData);
	void CopyData(const Proto_MasterTMonitorStartReq& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MasterTMonitorStartReq& cc);
    void ToPb(NFServer::Proto_MasterTMonitorStartReq* cc) const;
    NFServer::Proto_MasterTMonitorStartReq ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MasterTMonitorStartReq) */
};

struct Proto_MasterTMonitorStopReq {
    std::string server_name;
    std::string server_id;

	Proto_MasterTMonitorStopReq();
	~Proto_MasterTMonitorStopReq();
	Proto_MasterTMonitorStopReq(const Proto_MasterTMonitorStopReq& stArgsData);
	Proto_MasterTMonitorStopReq& operator=(const Proto_MasterTMonitorStopReq& stArgsData);
	void CopyData(const Proto_MasterTMonitorStopReq& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MasterTMonitorStopReq& cc);
    void ToPb(NFServer::Proto_MasterTMonitorStopReq* cc) const;
    NFServer::Proto_MasterTMonitorStopReq ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MasterTMonitorStopReq) */
};

struct Proto_MonitorTMasterReloadRsp {
    int32_t result;
    std::string server_name;
    std::string server_id;

	Proto_MonitorTMasterReloadRsp();
	~Proto_MonitorTMasterReloadRsp();
	Proto_MonitorTMasterReloadRsp(const Proto_MonitorTMasterReloadRsp& stArgsData);
	Proto_MonitorTMasterReloadRsp& operator=(const Proto_MonitorTMasterReloadRsp& stArgsData);
	void CopyData(const Proto_MonitorTMasterReloadRsp& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MonitorTMasterReloadRsp& cc);
    void ToPb(NFServer::Proto_MonitorTMasterReloadRsp* cc) const;
    NFServer::Proto_MonitorTMasterReloadRsp ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MonitorTMasterReloadRsp) */
};

struct Proto_MonitorTMasterRestartRsp {
    int32_t result;
    std::string server_name;
    std::string server_id;

	Proto_MonitorTMasterRestartRsp();
	~Proto_MonitorTMasterRestartRsp();
	Proto_MonitorTMasterRestartRsp(const Proto_MonitorTMasterRestartRsp& stArgsData);
	Proto_MonitorTMasterRestartRsp& operator=(const Proto_MonitorTMasterRestartRsp& stArgsData);
	void CopyData(const Proto_MonitorTMasterRestartRsp& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MonitorTMasterRestartRsp& cc);
    void ToPb(NFServer::Proto_MonitorTMasterRestartRsp* cc) const;
    NFServer::Proto_MonitorTMasterRestartRsp ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MonitorTMasterRestartRsp) */
};

struct Proto_MonitorTMasterStartRsp {
    int32_t result;
    std::string server_name;
    std::string server_id;

	Proto_MonitorTMasterStartRsp();
	~Proto_MonitorTMasterStartRsp();
	Proto_MonitorTMasterStartRsp(const Proto_MonitorTMasterStartRsp& stArgsData);
	Proto_MonitorTMasterStartRsp& operator=(const Proto_MonitorTMasterStartRsp& stArgsData);
	void CopyData(const Proto_MonitorTMasterStartRsp& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MonitorTMasterStartRsp& cc);
    void ToPb(NFServer::Proto_MonitorTMasterStartRsp* cc) const;
    NFServer::Proto_MonitorTMasterStartRsp ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MonitorTMasterStartRsp) */
};

struct Proto_MonitorTMasterStopRsp {
    int32_t result;
    std::string server_name;
    std::string server_id;

	Proto_MonitorTMasterStopRsp();
	~Proto_MonitorTMasterStopRsp();
	Proto_MonitorTMasterStopRsp(const Proto_MonitorTMasterStopRsp& stArgsData);
	Proto_MonitorTMasterStopRsp& operator=(const Proto_MonitorTMasterStopRsp& stArgsData);
	void CopyData(const Proto_MonitorTMasterStopRsp& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_MonitorTMasterStopRsp& cc);
    void ToPb(NFServer::Proto_MonitorTMasterStopRsp* cc) const;
    NFServer::Proto_MonitorTMasterStopRsp ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_MonitorTMasterStopRsp) */
};

struct Proto_TestOtherServerSendMsgToProxyServer {
    std::string server_id;
    std::string server_name;
    int32_t seq;

	Proto_TestOtherServerSendMsgToProxyServer();
	~Proto_TestOtherServerSendMsgToProxyServer();
	Proto_TestOtherServerSendMsgToProxyServer(const Proto_TestOtherServerSendMsgToProxyServer& stArgsData);
	Proto_TestOtherServerSendMsgToProxyServer& operator=(const Proto_TestOtherServerSendMsgToProxyServer& stArgsData);
	void CopyData(const Proto_TestOtherServerSendMsgToProxyServer& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_TestOtherServerSendMsgToProxyServer& cc);
    void ToPb(NFServer::Proto_TestOtherServerSendMsgToProxyServer* cc) const;
    NFServer::Proto_TestOtherServerSendMsgToProxyServer ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_TestOtherServerSendMsgToProxyServer) */
};

struct Proto_TestOtherServerToWorldServer {
    std::string server_id;
    std::string server_name;
    int32_t seq;

	Proto_TestOtherServerToWorldServer();
	~Proto_TestOtherServerToWorldServer();
	Proto_TestOtherServerToWorldServer(const Proto_TestOtherServerToWorldServer& stArgsData);
	Proto_TestOtherServerToWorldServer& operator=(const Proto_TestOtherServerToWorldServer& stArgsData);
	void CopyData(const Proto_TestOtherServerToWorldServer& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_TestOtherServerToWorldServer& cc);
    void ToPb(NFServer::Proto_TestOtherServerToWorldServer* cc) const;
    NFServer::Proto_TestOtherServerToWorldServer ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_TestOtherServerToWorldServer) */
};

struct Proto_TestSendProxyMsgToOtherServer {
    std::string server_id;
    std::string server_name;
    int32_t seq;

	Proto_TestSendProxyMsgToOtherServer();
	~Proto_TestSendProxyMsgToOtherServer();
	Proto_TestSendProxyMsgToOtherServer(const Proto_TestSendProxyMsgToOtherServer& stArgsData);
	Proto_TestSendProxyMsgToOtherServer& operator=(const Proto_TestSendProxyMsgToOtherServer& stArgsData);
	void CopyData(const Proto_TestSendProxyMsgToOtherServer& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_TestSendProxyMsgToOtherServer& cc);
    void ToPb(NFServer::Proto_TestSendProxyMsgToOtherServer* cc) const;
    NFServer::Proto_TestSendProxyMsgToOtherServer ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_TestSendProxyMsgToOtherServer) */
};

struct Proto_TestSendWorldMsgToOtherServer {
    std::string server_id;
    std::string server_name;
    int32_t seq;

	Proto_TestSendWorldMsgToOtherServer();
	~Proto_TestSendWorldMsgToOtherServer();
	Proto_TestSendWorldMsgToOtherServer(const Proto_TestSendWorldMsgToOtherServer& stArgsData);
	Proto_TestSendWorldMsgToOtherServer& operator=(const Proto_TestSendWorldMsgToOtherServer& stArgsData);
	void CopyData(const Proto_TestSendWorldMsgToOtherServer& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::Proto_TestSendWorldMsgToOtherServer& cc);
    void ToPb(NFServer::Proto_TestSendWorldMsgToOtherServer* cc) const;
    NFServer::Proto_TestSendWorldMsgToOtherServer ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:Proto_TestSendWorldMsgToOtherServer) */
};

struct RpcRequestGetServerInfo {
    std::string server_id;

	RpcRequestGetServerInfo();
	~RpcRequestGetServerInfo();
	RpcRequestGetServerInfo(const RpcRequestGetServerInfo& stArgsData);
	RpcRequestGetServerInfo& operator=(const RpcRequestGetServerInfo& stArgsData);
	void CopyData(const RpcRequestGetServerInfo& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::RpcRequestGetServerInfo& cc);
    void ToPb(NFServer::RpcRequestGetServerInfo* cc) const;
    NFServer::RpcRequestGetServerInfo ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:RpcRequestGetServerInfo) */
};

struct RpcWatchServerReqeust {
    int32_t src_server_type;
    int32_t src_bus_id;
    int32_t dst_server_type;
    int32_t dst_bus_id;

	RpcWatchServerReqeust();
	~RpcWatchServerReqeust();
	RpcWatchServerReqeust(const RpcWatchServerReqeust& stArgsData);
	RpcWatchServerReqeust& operator=(const RpcWatchServerReqeust& stArgsData);
	void CopyData(const RpcWatchServerReqeust& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::RpcWatchServerReqeust& cc);
    void ToPb(NFServer::RpcWatchServerReqeust* cc) const;
    NFServer::RpcWatchServerReqeust ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:RpcWatchServerReqeust) */
};

struct RpcWatchServerRespone {
    int32_t ret_code;

	RpcWatchServerRespone();
	~RpcWatchServerRespone();
	RpcWatchServerRespone(const RpcWatchServerRespone& stArgsData);
	RpcWatchServerRespone& operator=(const RpcWatchServerRespone& stArgsData);
	void CopyData(const RpcWatchServerRespone& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::RpcWatchServerRespone& cc);
    void ToPb(NFServer::RpcWatchServerRespone* cc) const;
    NFServer::RpcWatchServerRespone ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:RpcWatchServerRespone) */
};

/* Field tags (for use in manual encoding/decoding) */
#define CommonMsgRsp_result_tag                  1
#define Proto_MasterTMonitorReloadReq_server_name_tag 1
#define Proto_MasterTMonitorReloadReq_server_id_tag 2
#define Proto_MasterTMonitorRestartReq_server_name_tag 1
#define Proto_MasterTMonitorRestartReq_server_id_tag 2
#define Proto_MasterTMonitorStartReq_server_name_tag 1
#define Proto_MasterTMonitorStartReq_server_id_tag 2
#define Proto_MasterTMonitorStopReq_server_name_tag 1
#define Proto_MasterTMonitorStopReq_server_id_tag 2
#define Proto_MonitorTMasterReloadRsp_result_tag 1
#define Proto_MonitorTMasterReloadRsp_server_name_tag 2
#define Proto_MonitorTMasterReloadRsp_server_id_tag 3
#define Proto_MonitorTMasterRestartRsp_result_tag 1
#define Proto_MonitorTMasterRestartRsp_server_name_tag 2
#define Proto_MonitorTMasterRestartRsp_server_id_tag 3
#define Proto_MonitorTMasterStartRsp_result_tag  1
#define Proto_MonitorTMasterStartRsp_server_name_tag 2
#define Proto_MonitorTMasterStartRsp_server_id_tag 3
#define Proto_MonitorTMasterStopRsp_result_tag   1
#define Proto_MonitorTMasterStopRsp_server_name_tag 2
#define Proto_MonitorTMasterStopRsp_server_id_tag 3
#define Proto_TestOtherServerSendMsgToProxyServer_server_id_tag 1
#define Proto_TestOtherServerSendMsgToProxyServer_server_name_tag 2
#define Proto_TestOtherServerSendMsgToProxyServer_seq_tag 3
#define Proto_TestOtherServerToWorldServer_server_id_tag 1
#define Proto_TestOtherServerToWorldServer_server_name_tag 2
#define Proto_TestOtherServerToWorldServer_seq_tag 3
#define Proto_TestSendProxyMsgToOtherServer_server_id_tag 1
#define Proto_TestSendProxyMsgToOtherServer_server_name_tag 2
#define Proto_TestSendProxyMsgToOtherServer_seq_tag 3
#define Proto_TestSendWorldMsgToOtherServer_server_id_tag 1
#define Proto_TestSendWorldMsgToOtherServer_server_name_tag 2
#define Proto_TestSendWorldMsgToOtherServer_seq_tag 3
#define RpcRequestGetServerInfo_server_id_tag    1
#define RpcWatchServerReqeust_src_server_type_tag 1
#define RpcWatchServerReqeust_src_bus_id_tag     2
#define RpcWatchServerReqeust_dst_server_type_tag 3
#define RpcWatchServerReqeust_dst_bus_id_tag     4
#define RpcWatchServerRespone_ret_code_tag       1

/* Struct field encoding specification for nanopb */

/* Maximum encoded size of messages (where known) */
#define CommonMsgRsp_size                        11
#define Proto_MasterTMonitorReloadReq_size       68
#define Proto_MasterTMonitorRestartReq_size      68
#define Proto_MasterTMonitorStartReq_size        68
#define Proto_MasterTMonitorStopReq_size         68
#define Proto_MonitorTMasterReloadRsp_size       79
#define Proto_MonitorTMasterRestartRsp_size      79
#define Proto_MonitorTMasterStartRsp_size        79
#define Proto_MonitorTMasterStopRsp_size         79
#define Proto_STStoreCheckReq_size               0
#define Proto_StoreTSCheckRsp_size               0
#define Proto_TestSendProxyMsgToOtherServer_size 79
#define Proto_TestOtherServerSendMsgToProxyServer_size 79
#define Proto_TestSendWorldMsgToOtherServer_size 79
#define Proto_TestOtherServerToWorldServer_size  79
#define RpcRequestGetServerInfo_size             34
#define RpcWatchServerReqeust_size               44
#define RpcWatchServerRespone_size               11

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SERVERMSG_MESSAGES \


#endif

/* @@protoc_insertion_point(eof) */

#endif
