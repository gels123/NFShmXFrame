/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 */

#ifndef PB_NFSERVER_SERVERCOMMON_NANOPB_H_INCLUDED
#define PB_NFSERVER_SERVERCOMMON_NANOPB_H_INCLUDED
#include <string>
#include <vector>
#include <unordered_map>
#include <map>
#include <NFComm/NFCore/NFHash.hpp>
#include <pb.h>

#include "ServerCommon.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
struct PacketMsg {
    uint32_t cmd;
    uint32_t serverType;
    uint32_t upper_limit;
    uint32_t min_interval;
    uint32_t control_time;

	PacketMsg();
	~PacketMsg();
	PacketMsg(const PacketMsg& stArgsData);
	PacketMsg& operator=(const PacketMsg& stArgsData);
	void CopyData(const PacketMsg& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::PacketMsg& cc);
    void ToPb(NFServer::PacketMsg* cc) const;
    NFServer::PacketMsg ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:PacketMsg) */
};

struct ServerPacketMsg {
    std::vector<PacketMsg> PacketMsg_list;

	ServerPacketMsg();
	~ServerPacketMsg();
	ServerPacketMsg(const ServerPacketMsg& stArgsData);
	ServerPacketMsg& operator=(const ServerPacketMsg& stArgsData);
	void CopyData(const ServerPacketMsg& stArgsData);
	int CreateInit();
	int ResumeInit();
	void Init();
    bool FromPb(const NFServer::ServerPacketMsg& cc);
    void ToPb(NFServer::ServerPacketMsg* cc) const;
    NFServer::ServerPacketMsg ToPb() const;
    std::string ShortDebugString() const;

/* @@protoc_insertion_point(struct:ServerPacketMsg) */
};

/* Field tags (for use in manual encoding/decoding) */
#define PacketMsg_cmd_tag                        1
#define PacketMsg_serverType_tag                 2
#define PacketMsg_upper_limit_tag                3
#define PacketMsg_min_interval_tag               4
#define PacketMsg_control_time_tag               5
#define ServerPacketMsg_PacketMsg_list_tag       1

/* Struct field encoding specification for nanopb */

/* Maximum encoded size of messages (where known) */
#define PacketMsg_size                           30
#define ServerPacketMsg_size                     33

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SERVERCOMMON_MESSAGES \


#endif

/* @@protoc_insertion_point(eof) */

#endif
