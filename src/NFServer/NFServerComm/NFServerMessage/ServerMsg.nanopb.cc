/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9 */

#include <sstream>
#include "NFComm/NFObjCommon/NFShmMgr.h"
#include "ServerMsg.nanopb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

CommonMsgRsp::CommonMsgRsp()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

CommonMsgRsp::~CommonMsgRsp()
{
}

CommonMsgRsp::CommonMsgRsp(const CommonMsgRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

CommonMsgRsp& CommonMsgRsp::operator=(const CommonMsgRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void CommonMsgRsp::CopyData(const CommonMsgRsp& stArgsData)
{
    result = stArgsData.result;
}

int CommonMsgRsp::CreateInit()
{
    result = 0;
	return 0;
}

int CommonMsgRsp::ResumeInit()
{
	return 0;
}

void CommonMsgRsp::Init()
{
    result = 0;
}

bool CommonMsgRsp::FromPb(const NFServer::CommonMsgRsp& cc)
{
    result = cc.result();
    return true;
}

void CommonMsgRsp::ToPb(NFServer::CommonMsgRsp* cc) const
{
    cc->set_result(result);
    return;
}

NFServer::CommonMsgRsp CommonMsgRsp::ToPb() const
{
    NFServer::CommonMsgRsp cc;
    ToPb(&cc);
    return cc;
}

std::string CommonMsgRsp::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "result:" << result;
    ss << "}";
    return ss.str();
}

Proto_MasterTMonitorReloadReq::Proto_MasterTMonitorReloadReq()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MasterTMonitorReloadReq::~Proto_MasterTMonitorReloadReq()
{
}

Proto_MasterTMonitorReloadReq::Proto_MasterTMonitorReloadReq(const Proto_MasterTMonitorReloadReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MasterTMonitorReloadReq& Proto_MasterTMonitorReloadReq::operator=(const Proto_MasterTMonitorReloadReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MasterTMonitorReloadReq::CopyData(const Proto_MasterTMonitorReloadReq& stArgsData)
{
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MasterTMonitorReloadReq::CreateInit()
{
	return 0;
}

int Proto_MasterTMonitorReloadReq::ResumeInit()
{
	return 0;
}

void Proto_MasterTMonitorReloadReq::Init()
{
}

bool Proto_MasterTMonitorReloadReq::FromPb(const NFServer::Proto_MasterTMonitorReloadReq& cc)
{
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MasterTMonitorReloadReq::ToPb(NFServer::Proto_MasterTMonitorReloadReq* cc) const
{
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MasterTMonitorReloadReq Proto_MasterTMonitorReloadReq::ToPb() const
{
    NFServer::Proto_MasterTMonitorReloadReq cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MasterTMonitorReloadReq::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_MasterTMonitorRestartReq::Proto_MasterTMonitorRestartReq()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MasterTMonitorRestartReq::~Proto_MasterTMonitorRestartReq()
{
}

Proto_MasterTMonitorRestartReq::Proto_MasterTMonitorRestartReq(const Proto_MasterTMonitorRestartReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MasterTMonitorRestartReq& Proto_MasterTMonitorRestartReq::operator=(const Proto_MasterTMonitorRestartReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MasterTMonitorRestartReq::CopyData(const Proto_MasterTMonitorRestartReq& stArgsData)
{
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MasterTMonitorRestartReq::CreateInit()
{
	return 0;
}

int Proto_MasterTMonitorRestartReq::ResumeInit()
{
	return 0;
}

void Proto_MasterTMonitorRestartReq::Init()
{
}

bool Proto_MasterTMonitorRestartReq::FromPb(const NFServer::Proto_MasterTMonitorRestartReq& cc)
{
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MasterTMonitorRestartReq::ToPb(NFServer::Proto_MasterTMonitorRestartReq* cc) const
{
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MasterTMonitorRestartReq Proto_MasterTMonitorRestartReq::ToPb() const
{
    NFServer::Proto_MasterTMonitorRestartReq cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MasterTMonitorRestartReq::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_MasterTMonitorStartReq::Proto_MasterTMonitorStartReq()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MasterTMonitorStartReq::~Proto_MasterTMonitorStartReq()
{
}

Proto_MasterTMonitorStartReq::Proto_MasterTMonitorStartReq(const Proto_MasterTMonitorStartReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MasterTMonitorStartReq& Proto_MasterTMonitorStartReq::operator=(const Proto_MasterTMonitorStartReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MasterTMonitorStartReq::CopyData(const Proto_MasterTMonitorStartReq& stArgsData)
{
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MasterTMonitorStartReq::CreateInit()
{
	return 0;
}

int Proto_MasterTMonitorStartReq::ResumeInit()
{
	return 0;
}

void Proto_MasterTMonitorStartReq::Init()
{
}

bool Proto_MasterTMonitorStartReq::FromPb(const NFServer::Proto_MasterTMonitorStartReq& cc)
{
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MasterTMonitorStartReq::ToPb(NFServer::Proto_MasterTMonitorStartReq* cc) const
{
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MasterTMonitorStartReq Proto_MasterTMonitorStartReq::ToPb() const
{
    NFServer::Proto_MasterTMonitorStartReq cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MasterTMonitorStartReq::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_MasterTMonitorStopReq::Proto_MasterTMonitorStopReq()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MasterTMonitorStopReq::~Proto_MasterTMonitorStopReq()
{
}

Proto_MasterTMonitorStopReq::Proto_MasterTMonitorStopReq(const Proto_MasterTMonitorStopReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MasterTMonitorStopReq& Proto_MasterTMonitorStopReq::operator=(const Proto_MasterTMonitorStopReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MasterTMonitorStopReq::CopyData(const Proto_MasterTMonitorStopReq& stArgsData)
{
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MasterTMonitorStopReq::CreateInit()
{
	return 0;
}

int Proto_MasterTMonitorStopReq::ResumeInit()
{
	return 0;
}

void Proto_MasterTMonitorStopReq::Init()
{
}

bool Proto_MasterTMonitorStopReq::FromPb(const NFServer::Proto_MasterTMonitorStopReq& cc)
{
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MasterTMonitorStopReq::ToPb(NFServer::Proto_MasterTMonitorStopReq* cc) const
{
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MasterTMonitorStopReq Proto_MasterTMonitorStopReq::ToPb() const
{
    NFServer::Proto_MasterTMonitorStopReq cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MasterTMonitorStopReq::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_MonitorTMasterReloadRsp::Proto_MonitorTMasterReloadRsp()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MonitorTMasterReloadRsp::~Proto_MonitorTMasterReloadRsp()
{
}

Proto_MonitorTMasterReloadRsp::Proto_MonitorTMasterReloadRsp(const Proto_MonitorTMasterReloadRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MonitorTMasterReloadRsp& Proto_MonitorTMasterReloadRsp::operator=(const Proto_MonitorTMasterReloadRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MonitorTMasterReloadRsp::CopyData(const Proto_MonitorTMasterReloadRsp& stArgsData)
{
    result = stArgsData.result;
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MonitorTMasterReloadRsp::CreateInit()
{
    result = 0;
	return 0;
}

int Proto_MonitorTMasterReloadRsp::ResumeInit()
{
	return 0;
}

void Proto_MonitorTMasterReloadRsp::Init()
{
    result = 0;
}

bool Proto_MonitorTMasterReloadRsp::FromPb(const NFServer::Proto_MonitorTMasterReloadRsp& cc)
{
    result = cc.result();
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MonitorTMasterReloadRsp::ToPb(NFServer::Proto_MonitorTMasterReloadRsp* cc) const
{
    cc->set_result(result);
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MonitorTMasterReloadRsp Proto_MonitorTMasterReloadRsp::ToPb() const
{
    NFServer::Proto_MonitorTMasterReloadRsp cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MonitorTMasterReloadRsp::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "result:" << result << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_MonitorTMasterRestartRsp::Proto_MonitorTMasterRestartRsp()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MonitorTMasterRestartRsp::~Proto_MonitorTMasterRestartRsp()
{
}

Proto_MonitorTMasterRestartRsp::Proto_MonitorTMasterRestartRsp(const Proto_MonitorTMasterRestartRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MonitorTMasterRestartRsp& Proto_MonitorTMasterRestartRsp::operator=(const Proto_MonitorTMasterRestartRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MonitorTMasterRestartRsp::CopyData(const Proto_MonitorTMasterRestartRsp& stArgsData)
{
    result = stArgsData.result;
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MonitorTMasterRestartRsp::CreateInit()
{
    result = 0;
	return 0;
}

int Proto_MonitorTMasterRestartRsp::ResumeInit()
{
	return 0;
}

void Proto_MonitorTMasterRestartRsp::Init()
{
    result = 0;
}

bool Proto_MonitorTMasterRestartRsp::FromPb(const NFServer::Proto_MonitorTMasterRestartRsp& cc)
{
    result = cc.result();
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MonitorTMasterRestartRsp::ToPb(NFServer::Proto_MonitorTMasterRestartRsp* cc) const
{
    cc->set_result(result);
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MonitorTMasterRestartRsp Proto_MonitorTMasterRestartRsp::ToPb() const
{
    NFServer::Proto_MonitorTMasterRestartRsp cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MonitorTMasterRestartRsp::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "result:" << result << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_MonitorTMasterStartRsp::Proto_MonitorTMasterStartRsp()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MonitorTMasterStartRsp::~Proto_MonitorTMasterStartRsp()
{
}

Proto_MonitorTMasterStartRsp::Proto_MonitorTMasterStartRsp(const Proto_MonitorTMasterStartRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MonitorTMasterStartRsp& Proto_MonitorTMasterStartRsp::operator=(const Proto_MonitorTMasterStartRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MonitorTMasterStartRsp::CopyData(const Proto_MonitorTMasterStartRsp& stArgsData)
{
    result = stArgsData.result;
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MonitorTMasterStartRsp::CreateInit()
{
    result = 0;
	return 0;
}

int Proto_MonitorTMasterStartRsp::ResumeInit()
{
	return 0;
}

void Proto_MonitorTMasterStartRsp::Init()
{
    result = 0;
}

bool Proto_MonitorTMasterStartRsp::FromPb(const NFServer::Proto_MonitorTMasterStartRsp& cc)
{
    result = cc.result();
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MonitorTMasterStartRsp::ToPb(NFServer::Proto_MonitorTMasterStartRsp* cc) const
{
    cc->set_result(result);
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MonitorTMasterStartRsp Proto_MonitorTMasterStartRsp::ToPb() const
{
    NFServer::Proto_MonitorTMasterStartRsp cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MonitorTMasterStartRsp::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "result:" << result << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_MonitorTMasterStopRsp::Proto_MonitorTMasterStopRsp()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_MonitorTMasterStopRsp::~Proto_MonitorTMasterStopRsp()
{
}

Proto_MonitorTMasterStopRsp::Proto_MonitorTMasterStopRsp(const Proto_MonitorTMasterStopRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_MonitorTMasterStopRsp& Proto_MonitorTMasterStopRsp::operator=(const Proto_MonitorTMasterStopRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_MonitorTMasterStopRsp::CopyData(const Proto_MonitorTMasterStopRsp& stArgsData)
{
    result = stArgsData.result;
    server_name = stArgsData.server_name;
    server_id = stArgsData.server_id;
}

int Proto_MonitorTMasterStopRsp::CreateInit()
{
    result = 0;
	return 0;
}

int Proto_MonitorTMasterStopRsp::ResumeInit()
{
	return 0;
}

void Proto_MonitorTMasterStopRsp::Init()
{
    result = 0;
}

bool Proto_MonitorTMasterStopRsp::FromPb(const NFServer::Proto_MonitorTMasterStopRsp& cc)
{
    result = cc.result();
    server_name = cc.server_name();
    server_id = cc.server_id();
    return true;
}

void Proto_MonitorTMasterStopRsp::ToPb(NFServer::Proto_MonitorTMasterStopRsp* cc) const
{
    cc->set_result(result);
    cc->set_server_name(server_name);
    cc->set_server_id(server_id);
    return;
}

NFServer::Proto_MonitorTMasterStopRsp Proto_MonitorTMasterStopRsp::ToPb() const
{
    NFServer::Proto_MonitorTMasterStopRsp cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_MonitorTMasterStopRsp::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "result:" << result << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

Proto_STStoreCheckReq::Proto_STStoreCheckReq()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_STStoreCheckReq::~Proto_STStoreCheckReq()
{
}

Proto_STStoreCheckReq::Proto_STStoreCheckReq(const Proto_STStoreCheckReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_STStoreCheckReq& Proto_STStoreCheckReq::operator=(const Proto_STStoreCheckReq& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_STStoreCheckReq::CopyData(const Proto_STStoreCheckReq& stArgsData)
{
}

int Proto_STStoreCheckReq::CreateInit()
{
	return 0;
}

int Proto_STStoreCheckReq::ResumeInit()
{
	return 0;
}

void Proto_STStoreCheckReq::Init()
{
}

bool Proto_STStoreCheckReq::FromPb(const NFServer::Proto_STStoreCheckReq& cc)
{
    return true;
}

void Proto_STStoreCheckReq::ToPb(NFServer::Proto_STStoreCheckReq* cc) const
{
    return;
}

NFServer::Proto_STStoreCheckReq Proto_STStoreCheckReq::ToPb() const
{
    NFServer::Proto_STStoreCheckReq cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_STStoreCheckReq::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "}";
    return ss.str();
}

Proto_StoreTSCheckRsp::Proto_StoreTSCheckRsp()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_StoreTSCheckRsp::~Proto_StoreTSCheckRsp()
{
}

Proto_StoreTSCheckRsp::Proto_StoreTSCheckRsp(const Proto_StoreTSCheckRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_StoreTSCheckRsp& Proto_StoreTSCheckRsp::operator=(const Proto_StoreTSCheckRsp& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_StoreTSCheckRsp::CopyData(const Proto_StoreTSCheckRsp& stArgsData)
{
}

int Proto_StoreTSCheckRsp::CreateInit()
{
	return 0;
}

int Proto_StoreTSCheckRsp::ResumeInit()
{
	return 0;
}

void Proto_StoreTSCheckRsp::Init()
{
}

bool Proto_StoreTSCheckRsp::FromPb(const NFServer::Proto_StoreTSCheckRsp& cc)
{
    return true;
}

void Proto_StoreTSCheckRsp::ToPb(NFServer::Proto_StoreTSCheckRsp* cc) const
{
    return;
}

NFServer::Proto_StoreTSCheckRsp Proto_StoreTSCheckRsp::ToPb() const
{
    NFServer::Proto_StoreTSCheckRsp cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_StoreTSCheckRsp::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "}";
    return ss.str();
}

Proto_TestSendProxyMsgToOtherServer::Proto_TestSendProxyMsgToOtherServer()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_TestSendProxyMsgToOtherServer::~Proto_TestSendProxyMsgToOtherServer()
{
}

Proto_TestSendProxyMsgToOtherServer::Proto_TestSendProxyMsgToOtherServer(const Proto_TestSendProxyMsgToOtherServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_TestSendProxyMsgToOtherServer& Proto_TestSendProxyMsgToOtherServer::operator=(const Proto_TestSendProxyMsgToOtherServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_TestSendProxyMsgToOtherServer::CopyData(const Proto_TestSendProxyMsgToOtherServer& stArgsData)
{
    server_id = stArgsData.server_id;
    server_name = stArgsData.server_name;
    seq = stArgsData.seq;
}

int Proto_TestSendProxyMsgToOtherServer::CreateInit()
{
    seq = 0;
	return 0;
}

int Proto_TestSendProxyMsgToOtherServer::ResumeInit()
{
	return 0;
}

void Proto_TestSendProxyMsgToOtherServer::Init()
{
    seq = 0;
}

bool Proto_TestSendProxyMsgToOtherServer::FromPb(const NFServer::Proto_TestSendProxyMsgToOtherServer& cc)
{
    server_id = cc.server_id();
    server_name = cc.server_name();
    seq = cc.seq();
    return true;
}

void Proto_TestSendProxyMsgToOtherServer::ToPb(NFServer::Proto_TestSendProxyMsgToOtherServer* cc) const
{
    cc->set_server_id(server_id);
    cc->set_server_name(server_name);
    cc->set_seq(seq);
    return;
}

NFServer::Proto_TestSendProxyMsgToOtherServer Proto_TestSendProxyMsgToOtherServer::ToPb() const
{
    NFServer::Proto_TestSendProxyMsgToOtherServer cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_TestSendProxyMsgToOtherServer::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_id:" << "\"" << server_id << "\"" << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "seq:" << seq;
    ss << "}";
    return ss.str();
}

Proto_TestOtherServerSendMsgToProxyServer::Proto_TestOtherServerSendMsgToProxyServer()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_TestOtherServerSendMsgToProxyServer::~Proto_TestOtherServerSendMsgToProxyServer()
{
}

Proto_TestOtherServerSendMsgToProxyServer::Proto_TestOtherServerSendMsgToProxyServer(const Proto_TestOtherServerSendMsgToProxyServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_TestOtherServerSendMsgToProxyServer& Proto_TestOtherServerSendMsgToProxyServer::operator=(const Proto_TestOtherServerSendMsgToProxyServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_TestOtherServerSendMsgToProxyServer::CopyData(const Proto_TestOtherServerSendMsgToProxyServer& stArgsData)
{
    server_id = stArgsData.server_id;
    server_name = stArgsData.server_name;
    seq = stArgsData.seq;
}

int Proto_TestOtherServerSendMsgToProxyServer::CreateInit()
{
    seq = 0;
	return 0;
}

int Proto_TestOtherServerSendMsgToProxyServer::ResumeInit()
{
	return 0;
}

void Proto_TestOtherServerSendMsgToProxyServer::Init()
{
    seq = 0;
}

bool Proto_TestOtherServerSendMsgToProxyServer::FromPb(const NFServer::Proto_TestOtherServerSendMsgToProxyServer& cc)
{
    server_id = cc.server_id();
    server_name = cc.server_name();
    seq = cc.seq();
    return true;
}

void Proto_TestOtherServerSendMsgToProxyServer::ToPb(NFServer::Proto_TestOtherServerSendMsgToProxyServer* cc) const
{
    cc->set_server_id(server_id);
    cc->set_server_name(server_name);
    cc->set_seq(seq);
    return;
}

NFServer::Proto_TestOtherServerSendMsgToProxyServer Proto_TestOtherServerSendMsgToProxyServer::ToPb() const
{
    NFServer::Proto_TestOtherServerSendMsgToProxyServer cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_TestOtherServerSendMsgToProxyServer::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_id:" << "\"" << server_id << "\"" << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "seq:" << seq;
    ss << "}";
    return ss.str();
}

Proto_TestSendWorldMsgToOtherServer::Proto_TestSendWorldMsgToOtherServer()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_TestSendWorldMsgToOtherServer::~Proto_TestSendWorldMsgToOtherServer()
{
}

Proto_TestSendWorldMsgToOtherServer::Proto_TestSendWorldMsgToOtherServer(const Proto_TestSendWorldMsgToOtherServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_TestSendWorldMsgToOtherServer& Proto_TestSendWorldMsgToOtherServer::operator=(const Proto_TestSendWorldMsgToOtherServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_TestSendWorldMsgToOtherServer::CopyData(const Proto_TestSendWorldMsgToOtherServer& stArgsData)
{
    server_id = stArgsData.server_id;
    server_name = stArgsData.server_name;
    seq = stArgsData.seq;
}

int Proto_TestSendWorldMsgToOtherServer::CreateInit()
{
    seq = 0;
	return 0;
}

int Proto_TestSendWorldMsgToOtherServer::ResumeInit()
{
	return 0;
}

void Proto_TestSendWorldMsgToOtherServer::Init()
{
    seq = 0;
}

bool Proto_TestSendWorldMsgToOtherServer::FromPb(const NFServer::Proto_TestSendWorldMsgToOtherServer& cc)
{
    server_id = cc.server_id();
    server_name = cc.server_name();
    seq = cc.seq();
    return true;
}

void Proto_TestSendWorldMsgToOtherServer::ToPb(NFServer::Proto_TestSendWorldMsgToOtherServer* cc) const
{
    cc->set_server_id(server_id);
    cc->set_server_name(server_name);
    cc->set_seq(seq);
    return;
}

NFServer::Proto_TestSendWorldMsgToOtherServer Proto_TestSendWorldMsgToOtherServer::ToPb() const
{
    NFServer::Proto_TestSendWorldMsgToOtherServer cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_TestSendWorldMsgToOtherServer::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_id:" << "\"" << server_id << "\"" << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "seq:" << seq;
    ss << "}";
    return ss.str();
}

Proto_TestOtherServerToWorldServer::Proto_TestOtherServerToWorldServer()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

Proto_TestOtherServerToWorldServer::~Proto_TestOtherServerToWorldServer()
{
}

Proto_TestOtherServerToWorldServer::Proto_TestOtherServerToWorldServer(const Proto_TestOtherServerToWorldServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

Proto_TestOtherServerToWorldServer& Proto_TestOtherServerToWorldServer::operator=(const Proto_TestOtherServerToWorldServer& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void Proto_TestOtherServerToWorldServer::CopyData(const Proto_TestOtherServerToWorldServer& stArgsData)
{
    server_id = stArgsData.server_id;
    server_name = stArgsData.server_name;
    seq = stArgsData.seq;
}

int Proto_TestOtherServerToWorldServer::CreateInit()
{
    seq = 0;
	return 0;
}

int Proto_TestOtherServerToWorldServer::ResumeInit()
{
	return 0;
}

void Proto_TestOtherServerToWorldServer::Init()
{
    seq = 0;
}

bool Proto_TestOtherServerToWorldServer::FromPb(const NFServer::Proto_TestOtherServerToWorldServer& cc)
{
    server_id = cc.server_id();
    server_name = cc.server_name();
    seq = cc.seq();
    return true;
}

void Proto_TestOtherServerToWorldServer::ToPb(NFServer::Proto_TestOtherServerToWorldServer* cc) const
{
    cc->set_server_id(server_id);
    cc->set_server_name(server_name);
    cc->set_seq(seq);
    return;
}

NFServer::Proto_TestOtherServerToWorldServer Proto_TestOtherServerToWorldServer::ToPb() const
{
    NFServer::Proto_TestOtherServerToWorldServer cc;
    ToPb(&cc);
    return cc;
}

std::string Proto_TestOtherServerToWorldServer::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_id:" << "\"" << server_id << "\"" << ", ";
    ss << "server_name:" << "\"" << server_name << "\"" << ", ";
    ss << "seq:" << seq;
    ss << "}";
    return ss.str();
}

RpcRequestGetServerInfo::RpcRequestGetServerInfo()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

RpcRequestGetServerInfo::~RpcRequestGetServerInfo()
{
}

RpcRequestGetServerInfo::RpcRequestGetServerInfo(const RpcRequestGetServerInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

RpcRequestGetServerInfo& RpcRequestGetServerInfo::operator=(const RpcRequestGetServerInfo& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void RpcRequestGetServerInfo::CopyData(const RpcRequestGetServerInfo& stArgsData)
{
    server_id = stArgsData.server_id;
}

int RpcRequestGetServerInfo::CreateInit()
{
	return 0;
}

int RpcRequestGetServerInfo::ResumeInit()
{
	return 0;
}

void RpcRequestGetServerInfo::Init()
{
}

bool RpcRequestGetServerInfo::FromPb(const NFServer::RpcRequestGetServerInfo& cc)
{
    server_id = cc.server_id();
    return true;
}

void RpcRequestGetServerInfo::ToPb(NFServer::RpcRequestGetServerInfo* cc) const
{
    cc->set_server_id(server_id);
    return;
}

NFServer::RpcRequestGetServerInfo RpcRequestGetServerInfo::ToPb() const
{
    NFServer::RpcRequestGetServerInfo cc;
    ToPb(&cc);
    return cc;
}

std::string RpcRequestGetServerInfo::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "server_id:" << "\"" << server_id << "\"";
    ss << "}";
    return ss.str();
}

RpcWatchServerReqeust::RpcWatchServerReqeust()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

RpcWatchServerReqeust::~RpcWatchServerReqeust()
{
}

RpcWatchServerReqeust::RpcWatchServerReqeust(const RpcWatchServerReqeust& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

RpcWatchServerReqeust& RpcWatchServerReqeust::operator=(const RpcWatchServerReqeust& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void RpcWatchServerReqeust::CopyData(const RpcWatchServerReqeust& stArgsData)
{
    src_server_type = stArgsData.src_server_type;
    src_bus_id = stArgsData.src_bus_id;
    dst_server_type = stArgsData.dst_server_type;
    dst_bus_id = stArgsData.dst_bus_id;
}

int RpcWatchServerReqeust::CreateInit()
{
    src_server_type = 0;
    src_bus_id = 0;
    dst_server_type = 0;
    dst_bus_id = 0;
	return 0;
}

int RpcWatchServerReqeust::ResumeInit()
{
	return 0;
}

void RpcWatchServerReqeust::Init()
{
    src_server_type = 0;
    src_bus_id = 0;
    dst_server_type = 0;
    dst_bus_id = 0;
}

bool RpcWatchServerReqeust::FromPb(const NFServer::RpcWatchServerReqeust& cc)
{
    src_server_type = cc.src_server_type();
    src_bus_id = cc.src_bus_id();
    dst_server_type = cc.dst_server_type();
    dst_bus_id = cc.dst_bus_id();
    return true;
}

void RpcWatchServerReqeust::ToPb(NFServer::RpcWatchServerReqeust* cc) const
{
    cc->set_src_server_type(src_server_type);
    cc->set_src_bus_id(src_bus_id);
    cc->set_dst_server_type(dst_server_type);
    cc->set_dst_bus_id(dst_bus_id);
    return;
}

NFServer::RpcWatchServerReqeust RpcWatchServerReqeust::ToPb() const
{
    NFServer::RpcWatchServerReqeust cc;
    ToPb(&cc);
    return cc;
}

std::string RpcWatchServerReqeust::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "src_server_type:" << src_server_type << ", ";
    ss << "src_bus_id:" << src_bus_id << ", ";
    ss << "dst_server_type:" << dst_server_type << ", ";
    ss << "dst_bus_id:" << dst_bus_id;
    ss << "}";
    return ss.str();
}

RpcWatchServerRespone::RpcWatchServerRespone()
{
	if (EN_OBJ_MODE_INIT == NFShmMgr::Instance()->GetCreateMode()) {
		CreateInit();
	} else {
		ResumeInit();
	}
}

RpcWatchServerRespone::~RpcWatchServerRespone()
{
}

RpcWatchServerRespone::RpcWatchServerRespone(const RpcWatchServerRespone& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
}

RpcWatchServerRespone& RpcWatchServerRespone::operator=(const RpcWatchServerRespone& stArgsData)
{
	if (this != &stArgsData) {
		CopyData(stArgsData);
	}
	return *this;
}

void RpcWatchServerRespone::CopyData(const RpcWatchServerRespone& stArgsData)
{
    ret_code = stArgsData.ret_code;
}

int RpcWatchServerRespone::CreateInit()
{
    ret_code = 0;
	return 0;
}

int RpcWatchServerRespone::ResumeInit()
{
	return 0;
}

void RpcWatchServerRespone::Init()
{
    ret_code = 0;
}

bool RpcWatchServerRespone::FromPb(const NFServer::RpcWatchServerRespone& cc)
{
    ret_code = cc.ret_code();
    return true;
}

void RpcWatchServerRespone::ToPb(NFServer::RpcWatchServerRespone* cc) const
{
    cc->set_ret_code(ret_code);
    return;
}

NFServer::RpcWatchServerRespone RpcWatchServerRespone::ToPb() const
{
    NFServer::RpcWatchServerRespone cc;
    ToPb(&cc);
    return cc;
}

std::string RpcWatchServerRespone::ShortDebugString() const
{
    std::stringstream ss;
    ss << "{";
    ss << "ret_code:" << ret_code;
    ss << "}";
    return ss.str();
}





/* @@protoc_insertion_point(eof) */
