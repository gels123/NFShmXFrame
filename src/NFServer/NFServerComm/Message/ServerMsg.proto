syntax = "proto3";
package NFServer;

import "nanopb.proto";


// 服务器内部的消息id，是个统一的
//
enum Proto_SvrMsgID
{
    NF_SERVER_MSG_ZERO = 0;
    NF_STSTORE_CHECK_STORE_SERVER_REQ = 40; //server to store server, check exist
    NF_STORETS_CHECK_STORE_SERVER_RSP = 41; //store server to server, check exist rsp
    NF_TEST_SEND_PROXY_MSG_TO_OTHER_SERVER_REQ = 42; //test send proxy msg to other server
    NF_TEST_OTHER_SERVER_SEND_MSG_TO_PROXY_SERVER = 43; //test send proxy msg to other server rsp
    NF_TEST_OTHER_SERVER_MSG_TO_WORLD_SERVER_REQ = 44; //test send other server to world server
    NF_TEST_WORLD_SERVER_MSG_TO_OTHER_SERVER_REQ = 45; //test send world msg to other server
    NF_RPC_SERVICE_GET_SERVER_INFO_REQ = 46; //
}

message CommonMsgRsp
{
    option (nanopb_msgopt).is_std_stl = true;
    int32 result = 1;
}

message Proto_MasterTMonitorReloadReq
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_name = 1;
    string server_id = 2;
}

message Proto_MasterTMonitorRestartReq
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_name = 1;
    string server_id = 2;
}

message Proto_MasterTMonitorStartReq
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_name = 1;
    string server_id = 2;
}

message Proto_MasterTMonitorStopReq
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_name = 1;
    string server_id = 2;
}

message Proto_MonitorTMasterReloadRsp
{
    option (nanopb_msgopt).is_std_stl = true;
    int32 result = 1;
    string server_name = 2;
    string server_id = 3;
}

message Proto_MonitorTMasterRestartRsp
{
    option (nanopb_msgopt).is_std_stl = true;
    int32 result = 1;
    string server_name = 2;
    string server_id = 3;
}


message Proto_MonitorTMasterStartRsp
{
    option (nanopb_msgopt).is_std_stl = true;
    int32 result = 1;
    string server_name = 2;
    string server_id = 3;
}


message Proto_MonitorTMasterStopRsp
{
    option (nanopb_msgopt).is_std_stl = true;
    int32 result = 1;
    string server_name = 2;
    string server_id = 3;
}

message Proto_STStoreCheckReq
{
    option (nanopb_msgopt).is_std_stl = true;
}

message Proto_StoreTSCheckRsp
{
    option (nanopb_msgopt).is_std_stl = true;
}

message Proto_TestSendProxyMsgToOtherServer
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_id = 1;
    string server_name = 2;
    int32 seq = 3;
}

message Proto_TestOtherServerSendMsgToProxyServer
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_id = 1;
    string server_name = 2;
    int32 seq = 3;
}

message Proto_TestSendWorldMsgToOtherServer
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_id = 1;
    string server_name = 2;
    int32 seq = 3;
}

message Proto_TestOtherServerToWorldServer
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_id = 1;
    string server_name = 2;
    int32 seq = 3;
}

message RpcRequestGetServerInfo
{
    option (nanopb_msgopt).is_std_stl = true;
    string server_id = 1;
}

message RpcWatchServerReqeust
{
    option (nanopb_msgopt).is_std_stl = true;
    int32 src_server_type = 1;
    int32 src_bus_id = 2;
    int32 dst_server_type = 3;
    int32 dst_bus_id = 4;
}

message RpcWatchServerRespone
{
    option (nanopb_msgopt).is_std_stl = true;
    int32 ret_code = 1;
}