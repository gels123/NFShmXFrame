// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CommonMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorReloadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorReloadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorRestartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorRestartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStopReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MasterTMonitorStopReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterReloadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterReloadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterRestartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterRestartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStartRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterStartRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStopRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_MonitorTMasterStopRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STStoreCheckReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STStoreCheckReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_StoreTSCheckRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_StoreTSCheckRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_TestSendProxyMsgToOtherServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_TestSendProxyMsgToOtherServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_TestOtherServerSendMsgToProxyServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_TestOtherServerSendMsgToProxyServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_TestSendWorldMsgToOtherServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_TestSendWorldMsgToOtherServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_TestOtherServerToWorldServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_TestOtherServerToWorldServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcRequestGetServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcRequestGetServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcWatchServerReqeust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcWatchServerReqeust_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcWatchServerRespone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcWatchServerRespone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_SvrMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5fmsg_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_msg.proto");
  GOOGLE_CHECK(file != NULL);
  CommonMsgRsp_descriptor_ = file->message_type(0);
  static const int CommonMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsgRsp, result_),
  };
  CommonMsgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonMsgRsp_descriptor_,
      CommonMsgRsp::default_instance_,
      CommonMsgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonMsgRsp));
  Proto_MasterTMonitorReloadReq_descriptor_ = file->message_type(1);
  static const int Proto_MasterTMonitorReloadReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, server_id_),
  };
  Proto_MasterTMonitorReloadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorReloadReq_descriptor_,
      Proto_MasterTMonitorReloadReq::default_instance_,
      Proto_MasterTMonitorReloadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorReloadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorReloadReq));
  Proto_MasterTMonitorRestartReq_descriptor_ = file->message_type(2);
  static const int Proto_MasterTMonitorRestartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, server_id_),
  };
  Proto_MasterTMonitorRestartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorRestartReq_descriptor_,
      Proto_MasterTMonitorRestartReq::default_instance_,
      Proto_MasterTMonitorRestartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorRestartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorRestartReq));
  Proto_MasterTMonitorStartReq_descriptor_ = file->message_type(3);
  static const int Proto_MasterTMonitorStartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, server_id_),
  };
  Proto_MasterTMonitorStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorStartReq_descriptor_,
      Proto_MasterTMonitorStartReq::default_instance_,
      Proto_MasterTMonitorStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorStartReq));
  Proto_MasterTMonitorStopReq_descriptor_ = file->message_type(4);
  static const int Proto_MasterTMonitorStopReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, server_id_),
  };
  Proto_MasterTMonitorStopReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MasterTMonitorStopReq_descriptor_,
      Proto_MasterTMonitorStopReq::default_instance_,
      Proto_MasterTMonitorStopReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MasterTMonitorStopReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MasterTMonitorStopReq));
  Proto_MonitorTMasterReloadRsp_descriptor_ = file->message_type(5);
  static const int Proto_MonitorTMasterReloadRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, server_id_),
  };
  Proto_MonitorTMasterReloadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterReloadRsp_descriptor_,
      Proto_MonitorTMasterReloadRsp::default_instance_,
      Proto_MonitorTMasterReloadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterReloadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterReloadRsp));
  Proto_MonitorTMasterRestartRsp_descriptor_ = file->message_type(6);
  static const int Proto_MonitorTMasterRestartRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, server_id_),
  };
  Proto_MonitorTMasterRestartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterRestartRsp_descriptor_,
      Proto_MonitorTMasterRestartRsp::default_instance_,
      Proto_MonitorTMasterRestartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterRestartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterRestartRsp));
  Proto_MonitorTMasterStartRsp_descriptor_ = file->message_type(7);
  static const int Proto_MonitorTMasterStartRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, server_id_),
  };
  Proto_MonitorTMasterStartRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterStartRsp_descriptor_,
      Proto_MonitorTMasterStartRsp::default_instance_,
      Proto_MonitorTMasterStartRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStartRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterStartRsp));
  Proto_MonitorTMasterStopRsp_descriptor_ = file->message_type(8);
  static const int Proto_MonitorTMasterStopRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, server_id_),
  };
  Proto_MonitorTMasterStopRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_MonitorTMasterStopRsp_descriptor_,
      Proto_MonitorTMasterStopRsp::default_instance_,
      Proto_MonitorTMasterStopRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_MonitorTMasterStopRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_MonitorTMasterStopRsp));
  Proto_STStoreCheckReq_descriptor_ = file->message_type(9);
  static const int Proto_STStoreCheckReq_offsets_[1] = {
  };
  Proto_STStoreCheckReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STStoreCheckReq_descriptor_,
      Proto_STStoreCheckReq::default_instance_,
      Proto_STStoreCheckReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STStoreCheckReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STStoreCheckReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STStoreCheckReq));
  Proto_StoreTSCheckRsp_descriptor_ = file->message_type(10);
  static const int Proto_StoreTSCheckRsp_offsets_[1] = {
  };
  Proto_StoreTSCheckRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_StoreTSCheckRsp_descriptor_,
      Proto_StoreTSCheckRsp::default_instance_,
      Proto_StoreTSCheckRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreTSCheckRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_StoreTSCheckRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_StoreTSCheckRsp));
  Proto_TestSendProxyMsgToOtherServer_descriptor_ = file->message_type(11);
  static const int Proto_TestSendProxyMsgToOtherServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendProxyMsgToOtherServer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendProxyMsgToOtherServer, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendProxyMsgToOtherServer, seq_),
  };
  Proto_TestSendProxyMsgToOtherServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_TestSendProxyMsgToOtherServer_descriptor_,
      Proto_TestSendProxyMsgToOtherServer::default_instance_,
      Proto_TestSendProxyMsgToOtherServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendProxyMsgToOtherServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendProxyMsgToOtherServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_TestSendProxyMsgToOtherServer));
  Proto_TestOtherServerSendMsgToProxyServer_descriptor_ = file->message_type(12);
  static const int Proto_TestOtherServerSendMsgToProxyServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerSendMsgToProxyServer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerSendMsgToProxyServer, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerSendMsgToProxyServer, seq_),
  };
  Proto_TestOtherServerSendMsgToProxyServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_TestOtherServerSendMsgToProxyServer_descriptor_,
      Proto_TestOtherServerSendMsgToProxyServer::default_instance_,
      Proto_TestOtherServerSendMsgToProxyServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerSendMsgToProxyServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerSendMsgToProxyServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_TestOtherServerSendMsgToProxyServer));
  Proto_TestSendWorldMsgToOtherServer_descriptor_ = file->message_type(13);
  static const int Proto_TestSendWorldMsgToOtherServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendWorldMsgToOtherServer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendWorldMsgToOtherServer, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendWorldMsgToOtherServer, seq_),
  };
  Proto_TestSendWorldMsgToOtherServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_TestSendWorldMsgToOtherServer_descriptor_,
      Proto_TestSendWorldMsgToOtherServer::default_instance_,
      Proto_TestSendWorldMsgToOtherServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendWorldMsgToOtherServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestSendWorldMsgToOtherServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_TestSendWorldMsgToOtherServer));
  Proto_TestOtherServerToWorldServer_descriptor_ = file->message_type(14);
  static const int Proto_TestOtherServerToWorldServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerToWorldServer, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerToWorldServer, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerToWorldServer, seq_),
  };
  Proto_TestOtherServerToWorldServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_TestOtherServerToWorldServer_descriptor_,
      Proto_TestOtherServerToWorldServer::default_instance_,
      Proto_TestOtherServerToWorldServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerToWorldServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_TestOtherServerToWorldServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_TestOtherServerToWorldServer));
  RpcRequestGetServerInfo_descriptor_ = file->message_type(15);
  static const int RpcRequestGetServerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestGetServerInfo, server_id_),
  };
  RpcRequestGetServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcRequestGetServerInfo_descriptor_,
      RpcRequestGetServerInfo::default_instance_,
      RpcRequestGetServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestGetServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestGetServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcRequestGetServerInfo));
  RpcWatchServerReqeust_descriptor_ = file->message_type(16);
  static const int RpcWatchServerReqeust_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerReqeust, src_server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerReqeust, src_bus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerReqeust, dst_server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerReqeust, dst_bus_id_),
  };
  RpcWatchServerReqeust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcWatchServerReqeust_descriptor_,
      RpcWatchServerReqeust::default_instance_,
      RpcWatchServerReqeust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerReqeust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerReqeust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcWatchServerReqeust));
  RpcWatchServerRespone_descriptor_ = file->message_type(17);
  static const int RpcWatchServerRespone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerRespone, ret_code_),
  };
  RpcWatchServerRespone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcWatchServerRespone_descriptor_,
      RpcWatchServerRespone::default_instance_,
      RpcWatchServerRespone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerRespone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcWatchServerRespone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcWatchServerRespone));
  Proto_SvrMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonMsgRsp_descriptor_, &CommonMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorReloadReq_descriptor_, &Proto_MasterTMonitorReloadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorRestartReq_descriptor_, &Proto_MasterTMonitorRestartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorStartReq_descriptor_, &Proto_MasterTMonitorStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MasterTMonitorStopReq_descriptor_, &Proto_MasterTMonitorStopReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterReloadRsp_descriptor_, &Proto_MonitorTMasterReloadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterRestartRsp_descriptor_, &Proto_MonitorTMasterRestartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterStartRsp_descriptor_, &Proto_MonitorTMasterStartRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_MonitorTMasterStopRsp_descriptor_, &Proto_MonitorTMasterStopRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STStoreCheckReq_descriptor_, &Proto_STStoreCheckReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_StoreTSCheckRsp_descriptor_, &Proto_StoreTSCheckRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_TestSendProxyMsgToOtherServer_descriptor_, &Proto_TestSendProxyMsgToOtherServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_TestOtherServerSendMsgToProxyServer_descriptor_, &Proto_TestOtherServerSendMsgToProxyServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_TestSendWorldMsgToOtherServer_descriptor_, &Proto_TestSendWorldMsgToOtherServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_TestOtherServerToWorldServer_descriptor_, &Proto_TestOtherServerToWorldServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcRequestGetServerInfo_descriptor_, &RpcRequestGetServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcWatchServerReqeust_descriptor_, &RpcWatchServerReqeust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcWatchServerRespone_descriptor_, &RpcWatchServerRespone::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5fmsg_2eproto() {
  delete CommonMsgRsp::default_instance_;
  delete CommonMsgRsp_reflection_;
  delete Proto_MasterTMonitorReloadReq::default_instance_;
  delete Proto_MasterTMonitorReloadReq_reflection_;
  delete Proto_MasterTMonitorRestartReq::default_instance_;
  delete Proto_MasterTMonitorRestartReq_reflection_;
  delete Proto_MasterTMonitorStartReq::default_instance_;
  delete Proto_MasterTMonitorStartReq_reflection_;
  delete Proto_MasterTMonitorStopReq::default_instance_;
  delete Proto_MasterTMonitorStopReq_reflection_;
  delete Proto_MonitorTMasterReloadRsp::default_instance_;
  delete Proto_MonitorTMasterReloadRsp_reflection_;
  delete Proto_MonitorTMasterRestartRsp::default_instance_;
  delete Proto_MonitorTMasterRestartRsp_reflection_;
  delete Proto_MonitorTMasterStartRsp::default_instance_;
  delete Proto_MonitorTMasterStartRsp_reflection_;
  delete Proto_MonitorTMasterStopRsp::default_instance_;
  delete Proto_MonitorTMasterStopRsp_reflection_;
  delete Proto_STStoreCheckReq::default_instance_;
  delete Proto_STStoreCheckReq_reflection_;
  delete Proto_StoreTSCheckRsp::default_instance_;
  delete Proto_StoreTSCheckRsp_reflection_;
  delete Proto_TestSendProxyMsgToOtherServer::default_instance_;
  delete Proto_TestSendProxyMsgToOtherServer_reflection_;
  delete Proto_TestOtherServerSendMsgToProxyServer::default_instance_;
  delete Proto_TestOtherServerSendMsgToProxyServer_reflection_;
  delete Proto_TestSendWorldMsgToOtherServer::default_instance_;
  delete Proto_TestSendWorldMsgToOtherServer_reflection_;
  delete Proto_TestOtherServerToWorldServer::default_instance_;
  delete Proto_TestOtherServerToWorldServer_reflection_;
  delete RpcRequestGetServerInfo::default_instance_;
  delete RpcRequestGetServerInfo_reflection_;
  delete RpcWatchServerReqeust::default_instance_;
  delete RpcWatchServerReqeust_reflection_;
  delete RpcWatchServerRespone::default_instance_;
  delete RpcWatchServerRespone_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fsvr_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto_svr_msg.proto\022\010proto_ff\032\025yd_fiel"
    "doptions.proto\032\022proto_common.proto\032\026prot"
    "o_svr_common.proto\"\036\n\014CommonMsgRsp\022\016\n\006re"
    "sult\030\001 \001(\005\"G\n\035Proto_MasterTMonitorReload"
    "Req\022\023\n\013server_name\030\001 \001(\t\022\021\n\tserver_id\030\002 "
    "\001(\t\"H\n\036Proto_MasterTMonitorRestartReq\022\023\n"
    "\013server_name\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\t\"F\n"
    "\034Proto_MasterTMonitorStartReq\022\023\n\013server_"
    "name\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\t\"E\n\033Proto_M"
    "asterTMonitorStopReq\022\023\n\013server_name\030\001 \001("
    "\t\022\021\n\tserver_id\030\002 \001(\t\"W\n\035Proto_MonitorTMa"
    "sterReloadRsp\022\016\n\006result\030\001 \001(\005\022\023\n\013server_"
    "name\030\002 \001(\t\022\021\n\tserver_id\030\003 \001(\t\"X\n\036Proto_M"
    "onitorTMasterRestartRsp\022\016\n\006result\030\001 \001(\005\022"
    "\023\n\013server_name\030\002 \001(\t\022\021\n\tserver_id\030\003 \001(\t\""
    "V\n\034Proto_MonitorTMasterStartRsp\022\016\n\006resul"
    "t\030\001 \001(\005\022\023\n\013server_name\030\002 \001(\t\022\021\n\tserver_i"
    "d\030\003 \001(\t\"U\n\033Proto_MonitorTMasterStopRsp\022\016"
    "\n\006result\030\001 \001(\005\022\023\n\013server_name\030\002 \001(\t\022\021\n\ts"
    "erver_id\030\003 \001(\t\"\027\n\025Proto_STStoreCheckReq\""
    "\027\n\025Proto_StoreTSCheckRsp\"Z\n#Proto_TestSe"
    "ndProxyMsgToOtherServer\022\021\n\tserver_id\030\001 \001"
    "(\t\022\023\n\013server_name\030\002 \001(\t\022\013\n\003seq\030\003 \001(\005\"`\n)"
    "Proto_TestOtherServerSendMsgToProxyServe"
    "r\022\021\n\tserver_id\030\001 \001(\t\022\023\n\013server_name\030\002 \001("
    "\t\022\013\n\003seq\030\003 \001(\005\"Z\n#Proto_TestSendWorldMsg"
    "ToOtherServer\022\021\n\tserver_id\030\001 \001(\t\022\023\n\013serv"
    "er_name\030\002 \001(\t\022\013\n\003seq\030\003 \001(\005\"Y\n\"Proto_Test"
    "OtherServerToWorldServer\022\021\n\tserver_id\030\001 "
    "\001(\t\022\023\n\013server_name\030\002 \001(\t\022\013\n\003seq\030\003 \001(\005\",\n"
    "\027RpcRequestGetServerInfo\022\021\n\tserver_id\030\001 "
    "\001(\t\"q\n\025RpcWatchServerReqeust\022\027\n\017src_serv"
    "er_type\030\001 \001(\005\022\022\n\nsrc_bus_id\030\002 \001(\005\022\027\n\017dst"
    "_server_type\030\003 \001(\005\022\022\n\ndst_bus_id\030\004 \001(\005\")"
    "\n\025RpcWatchServerRespone\022\020\n\010ret_code\030\001 \001("
    "\005*\315\002\n\016Proto_SvrMsgID\022%\n!NF_STSTORE_CHECK"
    "_STORE_SERVER_REQ\020(\022%\n!NF_STORETS_CHECK_"
    "STORE_SERVER_RSP\020)\022.\n*NF_TEST_SEND_PROXY"
    "_MSG_TO_OTHER_SERVER_REQ\020*\0221\n-NF_TEST_OT"
    "HER_SERVER_SEND_MSG_TO_PROXY_SERVER\020+\0220\n"
    ",NF_TEST_OTHER_SERVER_MSG_TO_WORLD_SERVE"
    "R_REQ\020,\0220\n,NF_TEST_WORLD_SERVER_MSG_TO_O"
    "THER_SERVER_REQ\020-\022&\n\"NF_RPC_SERVICE_GET_"
    "SERVER_INFO_REQ\020.", 1737);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_msg.proto", &protobuf_RegisterTypes);
  CommonMsgRsp::default_instance_ = new CommonMsgRsp();
  Proto_MasterTMonitorReloadReq::default_instance_ = new Proto_MasterTMonitorReloadReq();
  Proto_MasterTMonitorRestartReq::default_instance_ = new Proto_MasterTMonitorRestartReq();
  Proto_MasterTMonitorStartReq::default_instance_ = new Proto_MasterTMonitorStartReq();
  Proto_MasterTMonitorStopReq::default_instance_ = new Proto_MasterTMonitorStopReq();
  Proto_MonitorTMasterReloadRsp::default_instance_ = new Proto_MonitorTMasterReloadRsp();
  Proto_MonitorTMasterRestartRsp::default_instance_ = new Proto_MonitorTMasterRestartRsp();
  Proto_MonitorTMasterStartRsp::default_instance_ = new Proto_MonitorTMasterStartRsp();
  Proto_MonitorTMasterStopRsp::default_instance_ = new Proto_MonitorTMasterStopRsp();
  Proto_STStoreCheckReq::default_instance_ = new Proto_STStoreCheckReq();
  Proto_StoreTSCheckRsp::default_instance_ = new Proto_StoreTSCheckRsp();
  Proto_TestSendProxyMsgToOtherServer::default_instance_ = new Proto_TestSendProxyMsgToOtherServer();
  Proto_TestOtherServerSendMsgToProxyServer::default_instance_ = new Proto_TestOtherServerSendMsgToProxyServer();
  Proto_TestSendWorldMsgToOtherServer::default_instance_ = new Proto_TestSendWorldMsgToOtherServer();
  Proto_TestOtherServerToWorldServer::default_instance_ = new Proto_TestOtherServerToWorldServer();
  RpcRequestGetServerInfo::default_instance_ = new RpcRequestGetServerInfo();
  RpcWatchServerReqeust::default_instance_ = new RpcWatchServerReqeust();
  RpcWatchServerRespone::default_instance_ = new RpcWatchServerRespone();
  CommonMsgRsp::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorReloadReq::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorRestartReq::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorStartReq::default_instance_->InitAsDefaultInstance();
  Proto_MasterTMonitorStopReq::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterReloadRsp::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterRestartRsp::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterStartRsp::default_instance_->InitAsDefaultInstance();
  Proto_MonitorTMasterStopRsp::default_instance_->InitAsDefaultInstance();
  Proto_STStoreCheckReq::default_instance_->InitAsDefaultInstance();
  Proto_StoreTSCheckRsp::default_instance_->InitAsDefaultInstance();
  Proto_TestSendProxyMsgToOtherServer::default_instance_->InitAsDefaultInstance();
  Proto_TestOtherServerSendMsgToProxyServer::default_instance_->InitAsDefaultInstance();
  Proto_TestSendWorldMsgToOtherServer::default_instance_->InitAsDefaultInstance();
  Proto_TestOtherServerToWorldServer::default_instance_->InitAsDefaultInstance();
  RpcRequestGetServerInfo::default_instance_->InitAsDefaultInstance();
  RpcWatchServerReqeust::default_instance_->InitAsDefaultInstance();
  RpcWatchServerRespone::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5fmsg_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5fmsg_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5fmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_SvrMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SvrMsgID_descriptor_;
}
bool Proto_SvrMsgID_IsValid(int value) {
  switch(value) {
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CommonMsgRsp::kResultFieldNumber;
#endif  // !_MSC_VER

CommonMsgRsp::CommonMsgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonMsgRsp::InitAsDefaultInstance() {
}

CommonMsgRsp::CommonMsgRsp(const CommonMsgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonMsgRsp::~CommonMsgRsp() {
  SharedDtor();
}

void CommonMsgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonMsgRsp_descriptor_;
}

const CommonMsgRsp& CommonMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

CommonMsgRsp* CommonMsgRsp::default_instance_ = NULL;

CommonMsgRsp* CommonMsgRsp::New() const {
  return new CommonMsgRsp;
}

void CommonMsgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonMsgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonMsgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonMsgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonMsgRsp::MergeFrom(const CommonMsgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMsgRsp::CopyFrom(const CommonMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMsgRsp::IsInitialized() const {

  return true;
}

void CommonMsgRsp::Swap(CommonMsgRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonMsgRsp_descriptor_;
  metadata.reflection = CommonMsgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorReloadReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorReloadReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorReloadReq::Proto_MasterTMonitorReloadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorReloadReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorReloadReq::Proto_MasterTMonitorReloadReq(const Proto_MasterTMonitorReloadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorReloadReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorReloadReq::~Proto_MasterTMonitorReloadReq() {
  SharedDtor();
}

void Proto_MasterTMonitorReloadReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorReloadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorReloadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorReloadReq_descriptor_;
}

const Proto_MasterTMonitorReloadReq& Proto_MasterTMonitorReloadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorReloadReq* Proto_MasterTMonitorReloadReq::default_instance_ = NULL;

Proto_MasterTMonitorReloadReq* Proto_MasterTMonitorReloadReq::New() const {
  return new Proto_MasterTMonitorReloadReq;
}

void Proto_MasterTMonitorReloadReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorReloadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorReloadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorReloadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorReloadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorReloadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorReloadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorReloadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorReloadReq::MergeFrom(const Proto_MasterTMonitorReloadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorReloadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorReloadReq::CopyFrom(const Proto_MasterTMonitorReloadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorReloadReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorReloadReq::Swap(Proto_MasterTMonitorReloadReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorReloadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorReloadReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorReloadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorRestartReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorRestartReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorRestartReq::Proto_MasterTMonitorRestartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorRestartReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorRestartReq::Proto_MasterTMonitorRestartReq(const Proto_MasterTMonitorRestartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorRestartReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorRestartReq::~Proto_MasterTMonitorRestartReq() {
  SharedDtor();
}

void Proto_MasterTMonitorRestartReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorRestartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorRestartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorRestartReq_descriptor_;
}

const Proto_MasterTMonitorRestartReq& Proto_MasterTMonitorRestartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorRestartReq* Proto_MasterTMonitorRestartReq::default_instance_ = NULL;

Proto_MasterTMonitorRestartReq* Proto_MasterTMonitorRestartReq::New() const {
  return new Proto_MasterTMonitorRestartReq;
}

void Proto_MasterTMonitorRestartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorRestartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorRestartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorRestartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorRestartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorRestartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorRestartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorRestartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorRestartReq::MergeFrom(const Proto_MasterTMonitorRestartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorRestartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorRestartReq::CopyFrom(const Proto_MasterTMonitorRestartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorRestartReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorRestartReq::Swap(Proto_MasterTMonitorRestartReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorRestartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorRestartReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorRestartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorStartReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorStartReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorStartReq::Proto_MasterTMonitorStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorStartReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorStartReq::Proto_MasterTMonitorStartReq(const Proto_MasterTMonitorStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorStartReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorStartReq::~Proto_MasterTMonitorStartReq() {
  SharedDtor();
}

void Proto_MasterTMonitorStartReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorStartReq_descriptor_;
}

const Proto_MasterTMonitorStartReq& Proto_MasterTMonitorStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorStartReq* Proto_MasterTMonitorStartReq::default_instance_ = NULL;

Proto_MasterTMonitorStartReq* Proto_MasterTMonitorStartReq::New() const {
  return new Proto_MasterTMonitorStartReq;
}

void Proto_MasterTMonitorStartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorStartReq::MergeFrom(const Proto_MasterTMonitorStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorStartReq::CopyFrom(const Proto_MasterTMonitorStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorStartReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorStartReq::Swap(Proto_MasterTMonitorStartReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorStartReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MasterTMonitorStopReq::kServerNameFieldNumber;
const int Proto_MasterTMonitorStopReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MasterTMonitorStopReq::Proto_MasterTMonitorStopReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MasterTMonitorStopReq::InitAsDefaultInstance() {
}

Proto_MasterTMonitorStopReq::Proto_MasterTMonitorStopReq(const Proto_MasterTMonitorStopReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MasterTMonitorStopReq::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MasterTMonitorStopReq::~Proto_MasterTMonitorStopReq() {
  SharedDtor();
}

void Proto_MasterTMonitorStopReq::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MasterTMonitorStopReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MasterTMonitorStopReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MasterTMonitorStopReq_descriptor_;
}

const Proto_MasterTMonitorStopReq& Proto_MasterTMonitorStopReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MasterTMonitorStopReq* Proto_MasterTMonitorStopReq::default_instance_ = NULL;

Proto_MasterTMonitorStopReq* Proto_MasterTMonitorStopReq::New() const {
  return new Proto_MasterTMonitorStopReq;
}

void Proto_MasterTMonitorStopReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MasterTMonitorStopReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }

      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MasterTMonitorStopReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MasterTMonitorStopReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }

  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MasterTMonitorStopReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MasterTMonitorStopReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MasterTMonitorStopReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MasterTMonitorStopReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MasterTMonitorStopReq::MergeFrom(const Proto_MasterTMonitorStopReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MasterTMonitorStopReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MasterTMonitorStopReq::CopyFrom(const Proto_MasterTMonitorStopReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MasterTMonitorStopReq::IsInitialized() const {

  return true;
}

void Proto_MasterTMonitorStopReq::Swap(Proto_MasterTMonitorStopReq* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MasterTMonitorStopReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MasterTMonitorStopReq_descriptor_;
  metadata.reflection = Proto_MasterTMonitorStopReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterReloadRsp::kResultFieldNumber;
const int Proto_MonitorTMasterReloadRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterReloadRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterReloadRsp::Proto_MonitorTMasterReloadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterReloadRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterReloadRsp::Proto_MonitorTMasterReloadRsp(const Proto_MonitorTMasterReloadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterReloadRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterReloadRsp::~Proto_MonitorTMasterReloadRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterReloadRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterReloadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterReloadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterReloadRsp_descriptor_;
}

const Proto_MonitorTMasterReloadRsp& Proto_MonitorTMasterReloadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterReloadRsp* Proto_MonitorTMasterReloadRsp::default_instance_ = NULL;

Proto_MonitorTMasterReloadRsp* Proto_MonitorTMasterReloadRsp::New() const {
  return new Proto_MonitorTMasterReloadRsp;
}

void Proto_MonitorTMasterReloadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterReloadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterReloadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterReloadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterReloadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterReloadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterReloadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterReloadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterReloadRsp::MergeFrom(const Proto_MonitorTMasterReloadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterReloadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterReloadRsp::CopyFrom(const Proto_MonitorTMasterReloadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterReloadRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterReloadRsp::Swap(Proto_MonitorTMasterReloadRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterReloadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterReloadRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterReloadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterRestartRsp::kResultFieldNumber;
const int Proto_MonitorTMasterRestartRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterRestartRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterRestartRsp::Proto_MonitorTMasterRestartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterRestartRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterRestartRsp::Proto_MonitorTMasterRestartRsp(const Proto_MonitorTMasterRestartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterRestartRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterRestartRsp::~Proto_MonitorTMasterRestartRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterRestartRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterRestartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterRestartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterRestartRsp_descriptor_;
}

const Proto_MonitorTMasterRestartRsp& Proto_MonitorTMasterRestartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterRestartRsp* Proto_MonitorTMasterRestartRsp::default_instance_ = NULL;

Proto_MonitorTMasterRestartRsp* Proto_MonitorTMasterRestartRsp::New() const {
  return new Proto_MonitorTMasterRestartRsp;
}

void Proto_MonitorTMasterRestartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterRestartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterRestartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterRestartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterRestartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterRestartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterRestartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterRestartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterRestartRsp::MergeFrom(const Proto_MonitorTMasterRestartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterRestartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterRestartRsp::CopyFrom(const Proto_MonitorTMasterRestartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterRestartRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterRestartRsp::Swap(Proto_MonitorTMasterRestartRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterRestartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterRestartRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterRestartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterStartRsp::kResultFieldNumber;
const int Proto_MonitorTMasterStartRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterStartRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterStartRsp::Proto_MonitorTMasterStartRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterStartRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterStartRsp::Proto_MonitorTMasterStartRsp(const Proto_MonitorTMasterStartRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterStartRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterStartRsp::~Proto_MonitorTMasterStartRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterStartRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStartRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterStartRsp_descriptor_;
}

const Proto_MonitorTMasterStartRsp& Proto_MonitorTMasterStartRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterStartRsp* Proto_MonitorTMasterStartRsp::default_instance_ = NULL;

Proto_MonitorTMasterStartRsp* Proto_MonitorTMasterStartRsp::New() const {
  return new Proto_MonitorTMasterStartRsp;
}

void Proto_MonitorTMasterStartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterStartRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterStartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterStartRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterStartRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterStartRsp::MergeFrom(const Proto_MonitorTMasterStartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterStartRsp::CopyFrom(const Proto_MonitorTMasterStartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterStartRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterStartRsp::Swap(Proto_MonitorTMasterStartRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterStartRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterStartRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterStartRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_MonitorTMasterStopRsp::kResultFieldNumber;
const int Proto_MonitorTMasterStopRsp::kServerNameFieldNumber;
const int Proto_MonitorTMasterStopRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

Proto_MonitorTMasterStopRsp::Proto_MonitorTMasterStopRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_MonitorTMasterStopRsp::InitAsDefaultInstance() {
}

Proto_MonitorTMasterStopRsp::Proto_MonitorTMasterStopRsp(const Proto_MonitorTMasterStopRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_MonitorTMasterStopRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_MonitorTMasterStopRsp::~Proto_MonitorTMasterStopRsp() {
  SharedDtor();
}

void Proto_MonitorTMasterStopRsp::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_MonitorTMasterStopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_MonitorTMasterStopRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_MonitorTMasterStopRsp_descriptor_;
}

const Proto_MonitorTMasterStopRsp& Proto_MonitorTMasterStopRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_MonitorTMasterStopRsp* Proto_MonitorTMasterStopRsp::default_instance_ = NULL;

Proto_MonitorTMasterStopRsp* Proto_MonitorTMasterStopRsp::New() const {
  return new Proto_MonitorTMasterStopRsp;
}

void Proto_MonitorTMasterStopRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_MonitorTMasterStopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_id;
        break;
      }

      // optional string server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_MonitorTMasterStopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_MonitorTMasterStopRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional string server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_MonitorTMasterStopRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional string server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_MonitorTMasterStopRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_MonitorTMasterStopRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_MonitorTMasterStopRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_MonitorTMasterStopRsp::MergeFrom(const Proto_MonitorTMasterStopRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_MonitorTMasterStopRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_MonitorTMasterStopRsp::CopyFrom(const Proto_MonitorTMasterStopRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_MonitorTMasterStopRsp::IsInitialized() const {

  return true;
}

void Proto_MonitorTMasterStopRsp::Swap(Proto_MonitorTMasterStopRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_MonitorTMasterStopRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_MonitorTMasterStopRsp_descriptor_;
  metadata.reflection = Proto_MonitorTMasterStopRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Proto_STStoreCheckReq::Proto_STStoreCheckReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STStoreCheckReq::InitAsDefaultInstance() {
}

Proto_STStoreCheckReq::Proto_STStoreCheckReq(const Proto_STStoreCheckReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STStoreCheckReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STStoreCheckReq::~Proto_STStoreCheckReq() {
  SharedDtor();
}

void Proto_STStoreCheckReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STStoreCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STStoreCheckReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STStoreCheckReq_descriptor_;
}

const Proto_STStoreCheckReq& Proto_STStoreCheckReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_STStoreCheckReq* Proto_STStoreCheckReq::default_instance_ = NULL;

Proto_STStoreCheckReq* Proto_STStoreCheckReq::New() const {
  return new Proto_STStoreCheckReq;
}

void Proto_STStoreCheckReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STStoreCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Proto_STStoreCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STStoreCheckReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STStoreCheckReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STStoreCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STStoreCheckReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STStoreCheckReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STStoreCheckReq::MergeFrom(const Proto_STStoreCheckReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STStoreCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STStoreCheckReq::CopyFrom(const Proto_STStoreCheckReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STStoreCheckReq::IsInitialized() const {

  return true;
}

void Proto_STStoreCheckReq::Swap(Proto_STStoreCheckReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STStoreCheckReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STStoreCheckReq_descriptor_;
  metadata.reflection = Proto_STStoreCheckReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Proto_StoreTSCheckRsp::Proto_StoreTSCheckRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_StoreTSCheckRsp::InitAsDefaultInstance() {
}

Proto_StoreTSCheckRsp::Proto_StoreTSCheckRsp(const Proto_StoreTSCheckRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_StoreTSCheckRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_StoreTSCheckRsp::~Proto_StoreTSCheckRsp() {
  SharedDtor();
}

void Proto_StoreTSCheckRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_StoreTSCheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_StoreTSCheckRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_StoreTSCheckRsp_descriptor_;
}

const Proto_StoreTSCheckRsp& Proto_StoreTSCheckRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_StoreTSCheckRsp* Proto_StoreTSCheckRsp::default_instance_ = NULL;

Proto_StoreTSCheckRsp* Proto_StoreTSCheckRsp::New() const {
  return new Proto_StoreTSCheckRsp;
}

void Proto_StoreTSCheckRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_StoreTSCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Proto_StoreTSCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_StoreTSCheckRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_StoreTSCheckRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_StoreTSCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_StoreTSCheckRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_StoreTSCheckRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_StoreTSCheckRsp::MergeFrom(const Proto_StoreTSCheckRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_StoreTSCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_StoreTSCheckRsp::CopyFrom(const Proto_StoreTSCheckRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_StoreTSCheckRsp::IsInitialized() const {

  return true;
}

void Proto_StoreTSCheckRsp::Swap(Proto_StoreTSCheckRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_StoreTSCheckRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_StoreTSCheckRsp_descriptor_;
  metadata.reflection = Proto_StoreTSCheckRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_TestSendProxyMsgToOtherServer::kServerIdFieldNumber;
const int Proto_TestSendProxyMsgToOtherServer::kServerNameFieldNumber;
const int Proto_TestSendProxyMsgToOtherServer::kSeqFieldNumber;
#endif  // !_MSC_VER

Proto_TestSendProxyMsgToOtherServer::Proto_TestSendProxyMsgToOtherServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_TestSendProxyMsgToOtherServer::InitAsDefaultInstance() {
}

Proto_TestSendProxyMsgToOtherServer::Proto_TestSendProxyMsgToOtherServer(const Proto_TestSendProxyMsgToOtherServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_TestSendProxyMsgToOtherServer::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_TestSendProxyMsgToOtherServer::~Proto_TestSendProxyMsgToOtherServer() {
  SharedDtor();
}

void Proto_TestSendProxyMsgToOtherServer::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_TestSendProxyMsgToOtherServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_TestSendProxyMsgToOtherServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_TestSendProxyMsgToOtherServer_descriptor_;
}

const Proto_TestSendProxyMsgToOtherServer& Proto_TestSendProxyMsgToOtherServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_TestSendProxyMsgToOtherServer* Proto_TestSendProxyMsgToOtherServer::default_instance_ = NULL;

Proto_TestSendProxyMsgToOtherServer* Proto_TestSendProxyMsgToOtherServer::New() const {
  return new Proto_TestSendProxyMsgToOtherServer;
}

void Proto_TestSendProxyMsgToOtherServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_TestSendProxyMsgToOtherServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional int32 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_TestSendProxyMsgToOtherServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_id(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_TestSendProxyMsgToOtherServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_id(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_TestSendProxyMsgToOtherServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional int32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_TestSendProxyMsgToOtherServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_TestSendProxyMsgToOtherServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_TestSendProxyMsgToOtherServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_TestSendProxyMsgToOtherServer::MergeFrom(const Proto_TestSendProxyMsgToOtherServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_TestSendProxyMsgToOtherServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_TestSendProxyMsgToOtherServer::CopyFrom(const Proto_TestSendProxyMsgToOtherServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_TestSendProxyMsgToOtherServer::IsInitialized() const {

  return true;
}

void Proto_TestSendProxyMsgToOtherServer::Swap(Proto_TestSendProxyMsgToOtherServer* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_TestSendProxyMsgToOtherServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_TestSendProxyMsgToOtherServer_descriptor_;
  metadata.reflection = Proto_TestSendProxyMsgToOtherServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_TestOtherServerSendMsgToProxyServer::kServerIdFieldNumber;
const int Proto_TestOtherServerSendMsgToProxyServer::kServerNameFieldNumber;
const int Proto_TestOtherServerSendMsgToProxyServer::kSeqFieldNumber;
#endif  // !_MSC_VER

Proto_TestOtherServerSendMsgToProxyServer::Proto_TestOtherServerSendMsgToProxyServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_TestOtherServerSendMsgToProxyServer::InitAsDefaultInstance() {
}

Proto_TestOtherServerSendMsgToProxyServer::Proto_TestOtherServerSendMsgToProxyServer(const Proto_TestOtherServerSendMsgToProxyServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_TestOtherServerSendMsgToProxyServer::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_TestOtherServerSendMsgToProxyServer::~Proto_TestOtherServerSendMsgToProxyServer() {
  SharedDtor();
}

void Proto_TestOtherServerSendMsgToProxyServer::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_TestOtherServerSendMsgToProxyServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_TestOtherServerSendMsgToProxyServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_TestOtherServerSendMsgToProxyServer_descriptor_;
}

const Proto_TestOtherServerSendMsgToProxyServer& Proto_TestOtherServerSendMsgToProxyServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_TestOtherServerSendMsgToProxyServer* Proto_TestOtherServerSendMsgToProxyServer::default_instance_ = NULL;

Proto_TestOtherServerSendMsgToProxyServer* Proto_TestOtherServerSendMsgToProxyServer::New() const {
  return new Proto_TestOtherServerSendMsgToProxyServer;
}

void Proto_TestOtherServerSendMsgToProxyServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_TestOtherServerSendMsgToProxyServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional int32 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_TestOtherServerSendMsgToProxyServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_id(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_TestOtherServerSendMsgToProxyServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_id(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_TestOtherServerSendMsgToProxyServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional int32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_TestOtherServerSendMsgToProxyServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_TestOtherServerSendMsgToProxyServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_TestOtherServerSendMsgToProxyServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_TestOtherServerSendMsgToProxyServer::MergeFrom(const Proto_TestOtherServerSendMsgToProxyServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_TestOtherServerSendMsgToProxyServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_TestOtherServerSendMsgToProxyServer::CopyFrom(const Proto_TestOtherServerSendMsgToProxyServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_TestOtherServerSendMsgToProxyServer::IsInitialized() const {

  return true;
}

void Proto_TestOtherServerSendMsgToProxyServer::Swap(Proto_TestOtherServerSendMsgToProxyServer* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_TestOtherServerSendMsgToProxyServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_TestOtherServerSendMsgToProxyServer_descriptor_;
  metadata.reflection = Proto_TestOtherServerSendMsgToProxyServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_TestSendWorldMsgToOtherServer::kServerIdFieldNumber;
const int Proto_TestSendWorldMsgToOtherServer::kServerNameFieldNumber;
const int Proto_TestSendWorldMsgToOtherServer::kSeqFieldNumber;
#endif  // !_MSC_VER

Proto_TestSendWorldMsgToOtherServer::Proto_TestSendWorldMsgToOtherServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_TestSendWorldMsgToOtherServer::InitAsDefaultInstance() {
}

Proto_TestSendWorldMsgToOtherServer::Proto_TestSendWorldMsgToOtherServer(const Proto_TestSendWorldMsgToOtherServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_TestSendWorldMsgToOtherServer::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_TestSendWorldMsgToOtherServer::~Proto_TestSendWorldMsgToOtherServer() {
  SharedDtor();
}

void Proto_TestSendWorldMsgToOtherServer::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_TestSendWorldMsgToOtherServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_TestSendWorldMsgToOtherServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_TestSendWorldMsgToOtherServer_descriptor_;
}

const Proto_TestSendWorldMsgToOtherServer& Proto_TestSendWorldMsgToOtherServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_TestSendWorldMsgToOtherServer* Proto_TestSendWorldMsgToOtherServer::default_instance_ = NULL;

Proto_TestSendWorldMsgToOtherServer* Proto_TestSendWorldMsgToOtherServer::New() const {
  return new Proto_TestSendWorldMsgToOtherServer;
}

void Proto_TestSendWorldMsgToOtherServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_TestSendWorldMsgToOtherServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional int32 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_TestSendWorldMsgToOtherServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_id(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_TestSendWorldMsgToOtherServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_id(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_TestSendWorldMsgToOtherServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional int32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_TestSendWorldMsgToOtherServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_TestSendWorldMsgToOtherServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_TestSendWorldMsgToOtherServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_TestSendWorldMsgToOtherServer::MergeFrom(const Proto_TestSendWorldMsgToOtherServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_TestSendWorldMsgToOtherServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_TestSendWorldMsgToOtherServer::CopyFrom(const Proto_TestSendWorldMsgToOtherServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_TestSendWorldMsgToOtherServer::IsInitialized() const {

  return true;
}

void Proto_TestSendWorldMsgToOtherServer::Swap(Proto_TestSendWorldMsgToOtherServer* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_TestSendWorldMsgToOtherServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_TestSendWorldMsgToOtherServer_descriptor_;
  metadata.reflection = Proto_TestSendWorldMsgToOtherServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_TestOtherServerToWorldServer::kServerIdFieldNumber;
const int Proto_TestOtherServerToWorldServer::kServerNameFieldNumber;
const int Proto_TestOtherServerToWorldServer::kSeqFieldNumber;
#endif  // !_MSC_VER

Proto_TestOtherServerToWorldServer::Proto_TestOtherServerToWorldServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_TestOtherServerToWorldServer::InitAsDefaultInstance() {
}

Proto_TestOtherServerToWorldServer::Proto_TestOtherServerToWorldServer(const Proto_TestOtherServerToWorldServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_TestOtherServerToWorldServer::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_TestOtherServerToWorldServer::~Proto_TestOtherServerToWorldServer() {
  SharedDtor();
}

void Proto_TestOtherServerToWorldServer::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_TestOtherServerToWorldServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_TestOtherServerToWorldServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_TestOtherServerToWorldServer_descriptor_;
}

const Proto_TestOtherServerToWorldServer& Proto_TestOtherServerToWorldServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

Proto_TestOtherServerToWorldServer* Proto_TestOtherServerToWorldServer::default_instance_ = NULL;

Proto_TestOtherServerToWorldServer* Proto_TestOtherServerToWorldServer::New() const {
  return new Proto_TestOtherServerToWorldServer;
}

void Proto_TestOtherServerToWorldServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_TestOtherServerToWorldServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // optional string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional int32 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_TestOtherServerToWorldServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_id(), output);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_TestOtherServerToWorldServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_id(), target);
  }

  // optional string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // optional int32 seq = 3;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_TestOtherServerToWorldServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

    // optional string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }

    // optional int32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_TestOtherServerToWorldServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_TestOtherServerToWorldServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_TestOtherServerToWorldServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_TestOtherServerToWorldServer::MergeFrom(const Proto_TestOtherServerToWorldServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_TestOtherServerToWorldServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_TestOtherServerToWorldServer::CopyFrom(const Proto_TestOtherServerToWorldServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_TestOtherServerToWorldServer::IsInitialized() const {

  return true;
}

void Proto_TestOtherServerToWorldServer::Swap(Proto_TestOtherServerToWorldServer* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_TestOtherServerToWorldServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_TestOtherServerToWorldServer_descriptor_;
  metadata.reflection = Proto_TestOtherServerToWorldServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcRequestGetServerInfo::kServerIdFieldNumber;
#endif  // !_MSC_VER

RpcRequestGetServerInfo::RpcRequestGetServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcRequestGetServerInfo::InitAsDefaultInstance() {
}

RpcRequestGetServerInfo::RpcRequestGetServerInfo(const RpcRequestGetServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcRequestGetServerInfo::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcRequestGetServerInfo::~RpcRequestGetServerInfo() {
  SharedDtor();
}

void RpcRequestGetServerInfo::SharedDtor() {
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (this != default_instance_) {
  }
}

void RpcRequestGetServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequestGetServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcRequestGetServerInfo_descriptor_;
}

const RpcRequestGetServerInfo& RpcRequestGetServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

RpcRequestGetServerInfo* RpcRequestGetServerInfo::default_instance_ = NULL;

RpcRequestGetServerInfo* RpcRequestGetServerInfo::New() const {
  return new RpcRequestGetServerInfo;
}

void RpcRequestGetServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcRequestGetServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcRequestGetServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcRequestGetServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcRequestGetServerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequestGetServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcRequestGetServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcRequestGetServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcRequestGetServerInfo::MergeFrom(const RpcRequestGetServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcRequestGetServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestGetServerInfo::CopyFrom(const RpcRequestGetServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestGetServerInfo::IsInitialized() const {

  return true;
}

void RpcRequestGetServerInfo::Swap(RpcRequestGetServerInfo* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcRequestGetServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcRequestGetServerInfo_descriptor_;
  metadata.reflection = RpcRequestGetServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcWatchServerReqeust::kSrcServerTypeFieldNumber;
const int RpcWatchServerReqeust::kSrcBusIdFieldNumber;
const int RpcWatchServerReqeust::kDstServerTypeFieldNumber;
const int RpcWatchServerReqeust::kDstBusIdFieldNumber;
#endif  // !_MSC_VER

RpcWatchServerReqeust::RpcWatchServerReqeust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcWatchServerReqeust::InitAsDefaultInstance() {
}

RpcWatchServerReqeust::RpcWatchServerReqeust(const RpcWatchServerReqeust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcWatchServerReqeust::SharedCtor() {
  _cached_size_ = 0;
  src_server_type_ = 0;
  src_bus_id_ = 0;
  dst_server_type_ = 0;
  dst_bus_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcWatchServerReqeust::~RpcWatchServerReqeust() {
  SharedDtor();
}

void RpcWatchServerReqeust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpcWatchServerReqeust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcWatchServerReqeust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcWatchServerReqeust_descriptor_;
}

const RpcWatchServerReqeust& RpcWatchServerReqeust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

RpcWatchServerReqeust* RpcWatchServerReqeust::default_instance_ = NULL;

RpcWatchServerReqeust* RpcWatchServerReqeust::New() const {
  return new RpcWatchServerReqeust;
}

void RpcWatchServerReqeust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_server_type_ = 0;
    src_bus_id_ = 0;
    dst_server_type_ = 0;
    dst_bus_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcWatchServerReqeust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 src_server_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_server_type_)));
          set_has_src_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_bus_id;
        break;
      }

      // optional int32 src_bus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_bus_id_)));
          set_has_src_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_server_type;
        break;
      }

      // optional int32 dst_server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_server_type_)));
          set_has_dst_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_bus_id;
        break;
      }

      // optional int32 dst_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_bus_id_)));
          set_has_dst_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcWatchServerReqeust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 src_server_type = 1;
  if (has_src_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src_server_type(), output);
  }

  // optional int32 src_bus_id = 2;
  if (has_src_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->src_bus_id(), output);
  }

  // optional int32 dst_server_type = 3;
  if (has_dst_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dst_server_type(), output);
  }

  // optional int32 dst_bus_id = 4;
  if (has_dst_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcWatchServerReqeust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 src_server_type = 1;
  if (has_src_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src_server_type(), target);
  }

  // optional int32 src_bus_id = 2;
  if (has_src_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->src_bus_id(), target);
  }

  // optional int32 dst_server_type = 3;
  if (has_dst_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dst_server_type(), target);
  }

  // optional int32 dst_bus_id = 4;
  if (has_dst_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcWatchServerReqeust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 src_server_type = 1;
    if (has_src_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_server_type());
    }

    // optional int32 src_bus_id = 2;
    if (has_src_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_bus_id());
    }

    // optional int32 dst_server_type = 3;
    if (has_dst_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_server_type());
    }

    // optional int32 dst_bus_id = 4;
    if (has_dst_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcWatchServerReqeust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcWatchServerReqeust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcWatchServerReqeust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcWatchServerReqeust::MergeFrom(const RpcWatchServerReqeust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_server_type()) {
      set_src_server_type(from.src_server_type());
    }
    if (from.has_src_bus_id()) {
      set_src_bus_id(from.src_bus_id());
    }
    if (from.has_dst_server_type()) {
      set_dst_server_type(from.dst_server_type());
    }
    if (from.has_dst_bus_id()) {
      set_dst_bus_id(from.dst_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcWatchServerReqeust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcWatchServerReqeust::CopyFrom(const RpcWatchServerReqeust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcWatchServerReqeust::IsInitialized() const {

  return true;
}

void RpcWatchServerReqeust::Swap(RpcWatchServerReqeust* other) {
  if (other != this) {
    std::swap(src_server_type_, other->src_server_type_);
    std::swap(src_bus_id_, other->src_bus_id_);
    std::swap(dst_server_type_, other->dst_server_type_);
    std::swap(dst_bus_id_, other->dst_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcWatchServerReqeust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcWatchServerReqeust_descriptor_;
  metadata.reflection = RpcWatchServerReqeust_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpcWatchServerRespone::kRetCodeFieldNumber;
#endif  // !_MSC_VER

RpcWatchServerRespone::RpcWatchServerRespone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcWatchServerRespone::InitAsDefaultInstance() {
}

RpcWatchServerRespone::RpcWatchServerRespone(const RpcWatchServerRespone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcWatchServerRespone::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcWatchServerRespone::~RpcWatchServerRespone() {
  SharedDtor();
}

void RpcWatchServerRespone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpcWatchServerRespone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcWatchServerRespone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcWatchServerRespone_descriptor_;
}

const RpcWatchServerRespone& RpcWatchServerRespone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fmsg_2eproto();
  return *default_instance_;
}

RpcWatchServerRespone* RpcWatchServerRespone::default_instance_ = NULL;

RpcWatchServerRespone* RpcWatchServerRespone::New() const {
  return new RpcWatchServerRespone;
}

void RpcWatchServerRespone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcWatchServerRespone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcWatchServerRespone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcWatchServerRespone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcWatchServerRespone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcWatchServerRespone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcWatchServerRespone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcWatchServerRespone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcWatchServerRespone::MergeFrom(const RpcWatchServerRespone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcWatchServerRespone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcWatchServerRespone::CopyFrom(const RpcWatchServerRespone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcWatchServerRespone::IsInitialized() const {

  return true;
}

void RpcWatchServerRespone::Swap(RpcWatchServerRespone* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcWatchServerRespone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcWatchServerRespone_descriptor_;
  metadata.reflection = RpcWatchServerRespone_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
