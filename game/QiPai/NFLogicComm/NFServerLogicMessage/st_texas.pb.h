// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_texas.proto

#ifndef PROTOBUF_st_5ftexas_2eproto__INCLUDED
#define PROTOBUF_st_5ftexas_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5ftexas_2eproto();
void protobuf_AssignDesc_st_5ftexas_2eproto();
void protobuf_ShutdownFile_st_5ftexas_2eproto();

class texascardlist;
class texasstanuser;
class texasuserpour;
class texasalluserpour;
class texasuser;
class texasinfo;

// ===================================================================

class texascardlist : public ::google::protobuf::Message {
 public:
  texascardlist();
  virtual ~texascardlist();

  texascardlist(const texascardlist& from);

  inline texascardlist& operator=(const texascardlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texascardlist& default_instance();

  void Swap(texascardlist* other);

  // implements Message ----------------------------------------------

  texascardlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texascardlist& from);
  void MergeFrom(const texascardlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:progame.texascardlist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftexas_2eproto();
  friend void protobuf_AssignDesc_st_5ftexas_2eproto();
  friend void protobuf_ShutdownFile_st_5ftexas_2eproto();

  void InitAsDefaultInstance();
  static texascardlist* default_instance_;
};
// -------------------------------------------------------------------

class texasstanuser : public ::google::protobuf::Message {
 public:
  texasstanuser();
  virtual ~texasstanuser();

  texasstanuser(const texasstanuser& from);

  inline texasstanuser& operator=(const texasstanuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texasstanuser& default_instance();

  void Swap(texasstanuser* other);

  // implements Message ----------------------------------------------

  texasstanuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texasstanuser& from);
  void MergeFrom(const texasstanuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 userid = 1;
  inline int userid_size() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid(int index) const;
  inline void set_userid(int index, ::google::protobuf::int32 value);
  inline void add_userid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userid();

  // repeated int32 watchnum = 2;
  inline int watchnum_size() const;
  inline void clear_watchnum();
  static const int kWatchnumFieldNumber = 2;
  inline ::google::protobuf::int32 watchnum(int index) const;
  inline void set_watchnum(int index, ::google::protobuf::int32 value);
  inline void add_watchnum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      watchnum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_watchnum();

  // @@protoc_insertion_point(class_scope:progame.texasstanuser)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > watchnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftexas_2eproto();
  friend void protobuf_AssignDesc_st_5ftexas_2eproto();
  friend void protobuf_ShutdownFile_st_5ftexas_2eproto();

  void InitAsDefaultInstance();
  static texasstanuser* default_instance_;
};
// -------------------------------------------------------------------

class texasuserpour : public ::google::protobuf::Message {
 public:
  texasuserpour();
  virtual ~texasuserpour();

  texasuserpour(const texasuserpour& from);

  inline texasuserpour& operator=(const texasuserpour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texasuserpour& default_instance();

  void Swap(texasuserpour* other);

  // implements Message ----------------------------------------------

  texasuserpour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texasuserpour& from);
  void MergeFrom(const texasuserpour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourjetton = 2;
  inline bool has_pourjetton() const;
  inline void clear_pourjetton();
  static const int kPourjettonFieldNumber = 2;
  inline ::google::protobuf::int32 pourjetton() const;
  inline void set_pourjetton(::google::protobuf::int32 value);

  // optional int32 isallon = 3;
  inline bool has_isallon() const;
  inline void clear_isallon();
  static const int kIsallonFieldNumber = 3;
  inline ::google::protobuf::int32 isallon() const;
  inline void set_isallon(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.texasuserpour)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourjetton();
  inline void clear_has_pourjetton();
  inline void set_has_isallon();
  inline void clear_has_isallon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourjetton_;
  ::google::protobuf::int32 isallon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftexas_2eproto();
  friend void protobuf_AssignDesc_st_5ftexas_2eproto();
  friend void protobuf_ShutdownFile_st_5ftexas_2eproto();

  void InitAsDefaultInstance();
  static texasuserpour* default_instance_;
};
// -------------------------------------------------------------------

class texasalluserpour : public ::google::protobuf::Message {
 public:
  texasalluserpour();
  virtual ~texasalluserpour();

  texasalluserpour(const texasalluserpour& from);

  inline texasalluserpour& operator=(const texasalluserpour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texasalluserpour& default_instance();

  void Swap(texasalluserpour* other);

  // implements Message ----------------------------------------------

  texasalluserpour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texasalluserpour& from);
  void MergeFrom(const texasalluserpour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourjetton = 2;
  inline bool has_pourjetton() const;
  inline void clear_pourjetton();
  static const int kPourjettonFieldNumber = 2;
  inline ::google::protobuf::int32 pourjetton() const;
  inline void set_pourjetton(::google::protobuf::int32 value);

  // repeated int32 cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:progame.texasalluserpour)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourjetton();
  inline void clear_has_pourjetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourjetton_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftexas_2eproto();
  friend void protobuf_AssignDesc_st_5ftexas_2eproto();
  friend void protobuf_ShutdownFile_st_5ftexas_2eproto();

  void InitAsDefaultInstance();
  static texasalluserpour* default_instance_;
};
// -------------------------------------------------------------------

class texasuser : public ::google::protobuf::Message {
 public:
  texasuser();
  virtual ~texasuser();

  texasuser(const texasuser& from);

  inline texasuser& operator=(const texasuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texasuser& default_instance();

  void Swap(texasuser* other);

  // implements Message ----------------------------------------------

  texasuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texasuser& from);
  void MergeFrom(const texasuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // repeated int32 handpoker = 2;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 2;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // optional int32 texastype = 3;
  inline bool has_texastype() const;
  inline void clear_texastype();
  static const int kTexastypeFieldNumber = 3;
  inline ::google::protobuf::int32 texastype() const;
  inline void set_texastype(::google::protobuf::int32 value);

  // optional int32 chairid = 4;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 4;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional string jifen = 5;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 5;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional int32 jettoncount = 6;
  inline bool has_jettoncount() const;
  inline void clear_jettoncount();
  static const int kJettoncountFieldNumber = 6;
  inline ::google::protobuf::int32 jettoncount() const;
  inline void set_jettoncount(::google::protobuf::int32 value);

  // optional int32 state = 7;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 pokerstate_discard = 8;
  inline bool has_pokerstate_discard() const;
  inline void clear_pokerstate_discard();
  static const int kPokerstateDiscardFieldNumber = 8;
  inline ::google::protobuf::int32 pokerstate_discard() const;
  inline void set_pokerstate_discard(::google::protobuf::int32 value);

  // optional int32 callNum = 9;
  inline bool has_callnum() const;
  inline void clear_callnum();
  static const int kCallNumFieldNumber = 9;
  inline ::google::protobuf::int32 callnum() const;
  inline void set_callnum(::google::protobuf::int32 value);

  // optional int32 addjettonmin = 10;
  inline bool has_addjettonmin() const;
  inline void clear_addjettonmin();
  static const int kAddjettonminFieldNumber = 10;
  inline ::google::protobuf::int32 addjettonmin() const;
  inline void set_addjettonmin(::google::protobuf::int32 value);

  // optional int32 addjettonmax = 11;
  inline bool has_addjettonmax() const;
  inline void clear_addjettonmax();
  static const int kAddjettonmaxFieldNumber = 11;
  inline ::google::protobuf::int32 addjettonmax() const;
  inline void set_addjettonmax(::google::protobuf::int32 value);

  // optional int32 timeoutSum = 12;
  inline bool has_timeoutsum() const;
  inline void clear_timeoutsum();
  static const int kTimeoutSumFieldNumber = 12;
  inline ::google::protobuf::int32 timeoutsum() const;
  inline void set_timeoutsum(::google::protobuf::int32 value);

  // optional string nickname = 13;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 13;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 sex = 14;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 14;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string face_1 = 15;
  inline bool has_face_1() const;
  inline void clear_face_1();
  static const int kFace1FieldNumber = 15;
  inline const ::std::string& face_1() const;
  inline void set_face_1(const ::std::string& value);
  inline void set_face_1(const char* value);
  inline void set_face_1(const char* value, size_t size);
  inline ::std::string* mutable_face_1();
  inline ::std::string* release_face_1();
  inline void set_allocated_face_1(::std::string* face_1);

  // optional int32 fenchinum = 16;
  inline bool has_fenchinum() const;
  inline void clear_fenchinum();
  static const int kFenchinumFieldNumber = 16;
  inline ::google::protobuf::int32 fenchinum() const;
  inline void set_fenchinum(::google::protobuf::int32 value);

  // optional string selfcarry = 17;
  inline bool has_selfcarry() const;
  inline void clear_selfcarry();
  static const int kSelfcarryFieldNumber = 17;
  inline const ::std::string& selfcarry() const;
  inline void set_selfcarry(const ::std::string& value);
  inline void set_selfcarry(const char* value);
  inline void set_selfcarry(const char* value, size_t size);
  inline ::std::string* mutable_selfcarry();
  inline ::std::string* release_selfcarry();
  inline void set_allocated_selfcarry(::std::string* selfcarry);

  // optional int32 ismaxcardtype = 18;
  inline bool has_ismaxcardtype() const;
  inline void clear_ismaxcardtype();
  static const int kIsmaxcardtypeFieldNumber = 18;
  inline ::google::protobuf::int32 ismaxcardtype() const;
  inline void set_ismaxcardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.texasuser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_texastype();
  inline void clear_has_texastype();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_jettoncount();
  inline void clear_has_jettoncount();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_pokerstate_discard();
  inline void clear_has_pokerstate_discard();
  inline void set_has_callnum();
  inline void clear_has_callnum();
  inline void set_has_addjettonmin();
  inline void clear_has_addjettonmin();
  inline void set_has_addjettonmax();
  inline void clear_has_addjettonmax();
  inline void set_has_timeoutsum();
  inline void clear_has_timeoutsum();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_face_1();
  inline void clear_has_face_1();
  inline void set_has_fenchinum();
  inline void clear_has_fenchinum();
  inline void set_has_selfcarry();
  inline void clear_has_selfcarry();
  inline void set_has_ismaxcardtype();
  inline void clear_has_ismaxcardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 texastype_;
  ::std::string* jifen_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 jettoncount_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 pokerstate_discard_;
  ::google::protobuf::int32 callnum_;
  ::google::protobuf::int32 addjettonmin_;
  ::google::protobuf::int32 addjettonmax_;
  ::google::protobuf::int32 timeoutsum_;
  ::std::string* nickname_;
  ::std::string* face_1_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 fenchinum_;
  ::std::string* selfcarry_;
  ::google::protobuf::int32 ismaxcardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftexas_2eproto();
  friend void protobuf_AssignDesc_st_5ftexas_2eproto();
  friend void protobuf_ShutdownFile_st_5ftexas_2eproto();

  void InitAsDefaultInstance();
  static texasuser* default_instance_;
};
// -------------------------------------------------------------------

class texasinfo : public ::google::protobuf::Message {
 public:
  texasinfo();
  virtual ~texasinfo();

  texasinfo(const texasinfo& from);

  inline texasinfo& operator=(const texasinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const texasinfo& default_instance();

  void Swap(texasinfo* other);

  // implements Message ----------------------------------------------

  texasinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const texasinfo& from);
  void MergeFrom(const texasinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 2;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 2;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 playtype = 3;
  inline bool has_playtype() const;
  inline void clear_playtype();
  static const int kPlaytypeFieldNumber = 3;
  inline ::google::protobuf::int32 playtype() const;
  inline void set_playtype(::google::protobuf::int32 value);

  // optional int32 littleblind = 4;
  inline bool has_littleblind() const;
  inline void clear_littleblind();
  static const int kLittleblindFieldNumber = 4;
  inline ::google::protobuf::int32 littleblind() const;
  inline void set_littleblind(::google::protobuf::int32 value);

  // optional int32 bigblind = 5;
  inline bool has_bigblind() const;
  inline void clear_bigblind();
  static const int kBigblindFieldNumber = 5;
  inline ::google::protobuf::int32 bigblind() const;
  inline void set_bigblind(::google::protobuf::int32 value);

  // optional int32 ante = 6;
  inline bool has_ante() const;
  inline void clear_ante();
  static const int kAnteFieldNumber = 6;
  inline ::google::protobuf::int32 ante() const;
  inline void set_ante(::google::protobuf::int32 value);

  // optional int32 maxrefuel = 7;
  inline bool has_maxrefuel() const;
  inline void clear_maxrefuel();
  static const int kMaxrefuelFieldNumber = 7;
  inline ::google::protobuf::int32 maxrefuel() const;
  inline void set_maxrefuel(::google::protobuf::int32 value);

  // optional int32 boutcapp = 8;
  inline bool has_boutcapp() const;
  inline void clear_boutcapp();
  static const int kBoutcappFieldNumber = 8;
  inline ::google::protobuf::int32 boutcapp() const;
  inline void set_boutcapp(::google::protobuf::int32 value);

  // optional int32 maxuser = 9;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 9;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // optional int32 state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 11;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 11;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional int32 bankerID = 12;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankerIDFieldNumber = 12;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // repeated .progame.texasuser situser = 13;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 13;
  inline const ::progame::texasuser& situser(int index) const;
  inline ::progame::texasuser* mutable_situser(int index);
  inline ::progame::texasuser* add_situser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::texasuser >&
      situser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::texasuser >*
      mutable_situser();

  // repeated .progame.texasstanuser standuser = 14;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 14;
  inline const ::progame::texasstanuser& standuser(int index) const;
  inline ::progame::texasstanuser* mutable_standuser(int index);
  inline ::progame::texasstanuser* add_standuser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::texasstanuser >&
      standuser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::texasstanuser >*
      mutable_standuser();

  // optional int32 dicicount = 15;
  inline bool has_dicicount() const;
  inline void clear_dicicount();
  static const int kDicicountFieldNumber = 15;
  inline ::google::protobuf::int32 dicicount() const;
  inline void set_dicicount(::google::protobuf::int32 value);

  // repeated int32 dicilist = 16;
  inline int dicilist_size() const;
  inline void clear_dicilist();
  static const int kDicilistFieldNumber = 16;
  inline ::google::protobuf::int32 dicilist(int index) const;
  inline void set_dicilist(int index, ::google::protobuf::int32 value);
  inline void add_dicilist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dicilist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dicilist();

  // optional int32 presentbout = 17;
  inline bool has_presentbout() const;
  inline void clear_presentbout();
  static const int kPresentboutFieldNumber = 17;
  inline ::google::protobuf::int32 presentbout() const;
  inline void set_presentbout(::google::protobuf::int32 value);

  // optional int32 cradcircle = 18;
  inline bool has_cradcircle() const;
  inline void clear_cradcircle();
  static const int kCradcircleFieldNumber = 18;
  inline ::google::protobuf::int32 cradcircle() const;
  inline void set_cradcircle(::google::protobuf::int32 value);

  // optional int32 followjetton = 19;
  inline bool has_followjetton() const;
  inline void clear_followjetton();
  static const int kFollowjettonFieldNumber = 19;
  inline ::google::protobuf::int32 followjetton() const;
  inline void set_followjetton(::google::protobuf::int32 value);

  // optional int32 actionuser = 20;
  inline bool has_actionuser() const;
  inline void clear_actionuser();
  static const int kActionuserFieldNumber = 20;
  inline ::google::protobuf::int32 actionuser() const;
  inline void set_actionuser(::google::protobuf::int32 value);

  // optional int32 lastuser = 21;
  inline bool has_lastuser() const;
  inline void clear_lastuser();
  static const int kLastuserFieldNumber = 21;
  inline ::google::protobuf::int32 lastuser() const;
  inline void set_lastuser(::google::protobuf::int32 value);

  // repeated int32 commonpokerlist = 22;
  inline int commonpokerlist_size() const;
  inline void clear_commonpokerlist();
  static const int kCommonpokerlistFieldNumber = 22;
  inline ::google::protobuf::int32 commonpokerlist(int index) const;
  inline void set_commonpokerlist(int index, ::google::protobuf::int32 value);
  inline void add_commonpokerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      commonpokerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_commonpokerlist();

  // optional int32 callflat = 23;
  inline bool has_callflat() const;
  inline void clear_callflat();
  static const int kCallflatFieldNumber = 23;
  inline ::google::protobuf::int32 callflat() const;
  inline void set_callflat(::google::protobuf::int32 value);

  // repeated .progame.texasuserpour pourlist = 24;
  inline int pourlist_size() const;
  inline void clear_pourlist();
  static const int kPourlistFieldNumber = 24;
  inline const ::progame::texasuserpour& pourlist(int index) const;
  inline ::progame::texasuserpour* mutable_pourlist(int index);
  inline ::progame::texasuserpour* add_pourlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::texasuserpour >&
      pourlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::texasuserpour >*
      mutable_pourlist();

  // optional int32 bankerChairid = 25;
  inline bool has_bankerchairid() const;
  inline void clear_bankerchairid();
  static const int kBankerChairidFieldNumber = 25;
  inline ::google::protobuf::int32 bankerchairid() const;
  inline void set_bankerchairid(::google::protobuf::int32 value);

  // repeated .progame.texasalluserpour allpourlist = 26;
  inline int allpourlist_size() const;
  inline void clear_allpourlist();
  static const int kAllpourlistFieldNumber = 26;
  inline const ::progame::texasalluserpour& allpourlist(int index) const;
  inline ::progame::texasalluserpour* mutable_allpourlist(int index);
  inline ::progame::texasalluserpour* add_allpourlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::texasalluserpour >&
      allpourlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::texasalluserpour >*
      mutable_allpourlist();

  // @@protoc_insertion_point(class_scope:progame.texasinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_playtype();
  inline void clear_has_playtype();
  inline void set_has_littleblind();
  inline void clear_has_littleblind();
  inline void set_has_bigblind();
  inline void clear_has_bigblind();
  inline void set_has_ante();
  inline void clear_has_ante();
  inline void set_has_maxrefuel();
  inline void clear_has_maxrefuel();
  inline void set_has_boutcapp();
  inline void clear_has_boutcapp();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_dicicount();
  inline void clear_has_dicicount();
  inline void set_has_presentbout();
  inline void clear_has_presentbout();
  inline void set_has_cradcircle();
  inline void clear_has_cradcircle();
  inline void set_has_followjetton();
  inline void clear_has_followjetton();
  inline void set_has_actionuser();
  inline void clear_has_actionuser();
  inline void set_has_lastuser();
  inline void clear_has_lastuser();
  inline void set_has_callflat();
  inline void clear_has_callflat();
  inline void set_has_bankerchairid();
  inline void clear_has_bankerchairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 playtype_;
  ::google::protobuf::int32 littleblind_;
  ::google::protobuf::int32 bigblind_;
  ::google::protobuf::int32 ante_;
  ::google::protobuf::int32 maxrefuel_;
  ::google::protobuf::int32 boutcapp_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::RepeatedPtrField< ::progame::texasuser > situser_;
  ::google::protobuf::RepeatedPtrField< ::progame::texasstanuser > standuser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dicilist_;
  ::google::protobuf::int32 dicicount_;
  ::google::protobuf::int32 presentbout_;
  ::google::protobuf::int32 cradcircle_;
  ::google::protobuf::int32 followjetton_;
  ::google::protobuf::int32 actionuser_;
  ::google::protobuf::int32 lastuser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > commonpokerlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::texasuserpour > pourlist_;
  ::google::protobuf::int32 callflat_;
  ::google::protobuf::int32 bankerchairid_;
  ::google::protobuf::RepeatedPtrField< ::progame::texasalluserpour > allpourlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ftexas_2eproto();
  friend void protobuf_AssignDesc_st_5ftexas_2eproto();
  friend void protobuf_ShutdownFile_st_5ftexas_2eproto();

  void InitAsDefaultInstance();
  static texasinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// texascardlist

// repeated int32 card = 1;
inline int texascardlist::card_size() const {
  return card_.size();
}
inline void texascardlist::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 texascardlist::card(int index) const {
  return card_.Get(index);
}
inline void texascardlist::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void texascardlist::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
texascardlist::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
texascardlist::mutable_card() {
  return &card_;
}

// -------------------------------------------------------------------

// texasstanuser

// repeated int32 userid = 1;
inline int texasstanuser::userid_size() const {
  return userid_.size();
}
inline void texasstanuser::clear_userid() {
  userid_.Clear();
}
inline ::google::protobuf::int32 texasstanuser::userid(int index) const {
  return userid_.Get(index);
}
inline void texasstanuser::set_userid(int index, ::google::protobuf::int32 value) {
  userid_.Set(index, value);
}
inline void texasstanuser::add_userid(::google::protobuf::int32 value) {
  userid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
texasstanuser::userid() const {
  return userid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
texasstanuser::mutable_userid() {
  return &userid_;
}

// repeated int32 watchnum = 2;
inline int texasstanuser::watchnum_size() const {
  return watchnum_.size();
}
inline void texasstanuser::clear_watchnum() {
  watchnum_.Clear();
}
inline ::google::protobuf::int32 texasstanuser::watchnum(int index) const {
  return watchnum_.Get(index);
}
inline void texasstanuser::set_watchnum(int index, ::google::protobuf::int32 value) {
  watchnum_.Set(index, value);
}
inline void texasstanuser::add_watchnum(::google::protobuf::int32 value) {
  watchnum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
texasstanuser::watchnum() const {
  return watchnum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
texasstanuser::mutable_watchnum() {
  return &watchnum_;
}

// -------------------------------------------------------------------

// texasuserpour

// optional int32 userid = 1;
inline bool texasuserpour::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void texasuserpour::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void texasuserpour::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void texasuserpour::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 texasuserpour::userid() const {
  return userid_;
}
inline void texasuserpour::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourjetton = 2;
inline bool texasuserpour::has_pourjetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void texasuserpour::set_has_pourjetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void texasuserpour::clear_has_pourjetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void texasuserpour::clear_pourjetton() {
  pourjetton_ = 0;
  clear_has_pourjetton();
}
inline ::google::protobuf::int32 texasuserpour::pourjetton() const {
  return pourjetton_;
}
inline void texasuserpour::set_pourjetton(::google::protobuf::int32 value) {
  set_has_pourjetton();
  pourjetton_ = value;
}

// optional int32 isallon = 3;
inline bool texasuserpour::has_isallon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void texasuserpour::set_has_isallon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void texasuserpour::clear_has_isallon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void texasuserpour::clear_isallon() {
  isallon_ = 0;
  clear_has_isallon();
}
inline ::google::protobuf::int32 texasuserpour::isallon() const {
  return isallon_;
}
inline void texasuserpour::set_isallon(::google::protobuf::int32 value) {
  set_has_isallon();
  isallon_ = value;
}

// -------------------------------------------------------------------

// texasalluserpour

// optional int32 userid = 1;
inline bool texasalluserpour::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void texasalluserpour::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void texasalluserpour::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void texasalluserpour::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 texasalluserpour::userid() const {
  return userid_;
}
inline void texasalluserpour::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourjetton = 2;
inline bool texasalluserpour::has_pourjetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void texasalluserpour::set_has_pourjetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void texasalluserpour::clear_has_pourjetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void texasalluserpour::clear_pourjetton() {
  pourjetton_ = 0;
  clear_has_pourjetton();
}
inline ::google::protobuf::int32 texasalluserpour::pourjetton() const {
  return pourjetton_;
}
inline void texasalluserpour::set_pourjetton(::google::protobuf::int32 value) {
  set_has_pourjetton();
  pourjetton_ = value;
}

// repeated int32 cards = 3;
inline int texasalluserpour::cards_size() const {
  return cards_.size();
}
inline void texasalluserpour::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 texasalluserpour::cards(int index) const {
  return cards_.Get(index);
}
inline void texasalluserpour::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
}
inline void texasalluserpour::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
texasalluserpour::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
texasalluserpour::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// texasuser

// optional int32 userid = 1;
inline bool texasuser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void texasuser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void texasuser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void texasuser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 texasuser::userid() const {
  return userid_;
}
inline void texasuser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// repeated int32 handpoker = 2;
inline int texasuser::handpoker_size() const {
  return handpoker_.size();
}
inline void texasuser::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 texasuser::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void texasuser::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void texasuser::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
texasuser::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
texasuser::mutable_handpoker() {
  return &handpoker_;
}

// optional int32 texastype = 3;
inline bool texasuser::has_texastype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void texasuser::set_has_texastype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void texasuser::clear_has_texastype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void texasuser::clear_texastype() {
  texastype_ = 0;
  clear_has_texastype();
}
inline ::google::protobuf::int32 texasuser::texastype() const {
  return texastype_;
}
inline void texasuser::set_texastype(::google::protobuf::int32 value) {
  set_has_texastype();
  texastype_ = value;
}

// optional int32 chairid = 4;
inline bool texasuser::has_chairid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void texasuser::set_has_chairid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void texasuser::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void texasuser::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 texasuser::chairid() const {
  return chairid_;
}
inline void texasuser::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional string jifen = 5;
inline bool texasuser::has_jifen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void texasuser::set_has_jifen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void texasuser::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void texasuser::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& texasuser::jifen() const {
  return *jifen_;
}
inline void texasuser::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void texasuser::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void texasuser::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* texasuser::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* texasuser::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void texasuser::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 jettoncount = 6;
inline bool texasuser::has_jettoncount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void texasuser::set_has_jettoncount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void texasuser::clear_has_jettoncount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void texasuser::clear_jettoncount() {
  jettoncount_ = 0;
  clear_has_jettoncount();
}
inline ::google::protobuf::int32 texasuser::jettoncount() const {
  return jettoncount_;
}
inline void texasuser::set_jettoncount(::google::protobuf::int32 value) {
  set_has_jettoncount();
  jettoncount_ = value;
}

// optional int32 state = 7;
inline bool texasuser::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void texasuser::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void texasuser::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void texasuser::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 texasuser::state() const {
  return state_;
}
inline void texasuser::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 pokerstate_discard = 8;
inline bool texasuser::has_pokerstate_discard() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void texasuser::set_has_pokerstate_discard() {
  _has_bits_[0] |= 0x00000080u;
}
inline void texasuser::clear_has_pokerstate_discard() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void texasuser::clear_pokerstate_discard() {
  pokerstate_discard_ = 0;
  clear_has_pokerstate_discard();
}
inline ::google::protobuf::int32 texasuser::pokerstate_discard() const {
  return pokerstate_discard_;
}
inline void texasuser::set_pokerstate_discard(::google::protobuf::int32 value) {
  set_has_pokerstate_discard();
  pokerstate_discard_ = value;
}

// optional int32 callNum = 9;
inline bool texasuser::has_callnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void texasuser::set_has_callnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void texasuser::clear_has_callnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void texasuser::clear_callnum() {
  callnum_ = 0;
  clear_has_callnum();
}
inline ::google::protobuf::int32 texasuser::callnum() const {
  return callnum_;
}
inline void texasuser::set_callnum(::google::protobuf::int32 value) {
  set_has_callnum();
  callnum_ = value;
}

// optional int32 addjettonmin = 10;
inline bool texasuser::has_addjettonmin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void texasuser::set_has_addjettonmin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void texasuser::clear_has_addjettonmin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void texasuser::clear_addjettonmin() {
  addjettonmin_ = 0;
  clear_has_addjettonmin();
}
inline ::google::protobuf::int32 texasuser::addjettonmin() const {
  return addjettonmin_;
}
inline void texasuser::set_addjettonmin(::google::protobuf::int32 value) {
  set_has_addjettonmin();
  addjettonmin_ = value;
}

// optional int32 addjettonmax = 11;
inline bool texasuser::has_addjettonmax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void texasuser::set_has_addjettonmax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void texasuser::clear_has_addjettonmax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void texasuser::clear_addjettonmax() {
  addjettonmax_ = 0;
  clear_has_addjettonmax();
}
inline ::google::protobuf::int32 texasuser::addjettonmax() const {
  return addjettonmax_;
}
inline void texasuser::set_addjettonmax(::google::protobuf::int32 value) {
  set_has_addjettonmax();
  addjettonmax_ = value;
}

// optional int32 timeoutSum = 12;
inline bool texasuser::has_timeoutsum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void texasuser::set_has_timeoutsum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void texasuser::clear_has_timeoutsum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void texasuser::clear_timeoutsum() {
  timeoutsum_ = 0;
  clear_has_timeoutsum();
}
inline ::google::protobuf::int32 texasuser::timeoutsum() const {
  return timeoutsum_;
}
inline void texasuser::set_timeoutsum(::google::protobuf::int32 value) {
  set_has_timeoutsum();
  timeoutsum_ = value;
}

// optional string nickname = 13;
inline bool texasuser::has_nickname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void texasuser::set_has_nickname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void texasuser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void texasuser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& texasuser::nickname() const {
  return *nickname_;
}
inline void texasuser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void texasuser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void texasuser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* texasuser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* texasuser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void texasuser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 14;
inline bool texasuser::has_sex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void texasuser::set_has_sex() {
  _has_bits_[0] |= 0x00002000u;
}
inline void texasuser::clear_has_sex() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void texasuser::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 texasuser::sex() const {
  return sex_;
}
inline void texasuser::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string face_1 = 15;
inline bool texasuser::has_face_1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void texasuser::set_has_face_1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void texasuser::clear_has_face_1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void texasuser::clear_face_1() {
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    face_1_->clear();
  }
  clear_has_face_1();
}
inline const ::std::string& texasuser::face_1() const {
  return *face_1_;
}
inline void texasuser::set_face_1(const ::std::string& value) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(value);
}
inline void texasuser::set_face_1(const char* value) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(value);
}
inline void texasuser::set_face_1(const char* value, size_t size) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* texasuser::mutable_face_1() {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  return face_1_;
}
inline ::std::string* texasuser::release_face_1() {
  clear_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = face_1_;
    face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void texasuser::set_allocated_face_1(::std::string* face_1) {
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (face_1) {
    set_has_face_1();
    face_1_ = face_1;
  } else {
    clear_has_face_1();
    face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fenchinum = 16;
inline bool texasuser::has_fenchinum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void texasuser::set_has_fenchinum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void texasuser::clear_has_fenchinum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void texasuser::clear_fenchinum() {
  fenchinum_ = 0;
  clear_has_fenchinum();
}
inline ::google::protobuf::int32 texasuser::fenchinum() const {
  return fenchinum_;
}
inline void texasuser::set_fenchinum(::google::protobuf::int32 value) {
  set_has_fenchinum();
  fenchinum_ = value;
}

// optional string selfcarry = 17;
inline bool texasuser::has_selfcarry() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void texasuser::set_has_selfcarry() {
  _has_bits_[0] |= 0x00010000u;
}
inline void texasuser::clear_has_selfcarry() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void texasuser::clear_selfcarry() {
  if (selfcarry_ != &::google::protobuf::internal::kEmptyString) {
    selfcarry_->clear();
  }
  clear_has_selfcarry();
}
inline const ::std::string& texasuser::selfcarry() const {
  return *selfcarry_;
}
inline void texasuser::set_selfcarry(const ::std::string& value) {
  set_has_selfcarry();
  if (selfcarry_ == &::google::protobuf::internal::kEmptyString) {
    selfcarry_ = new ::std::string;
  }
  selfcarry_->assign(value);
}
inline void texasuser::set_selfcarry(const char* value) {
  set_has_selfcarry();
  if (selfcarry_ == &::google::protobuf::internal::kEmptyString) {
    selfcarry_ = new ::std::string;
  }
  selfcarry_->assign(value);
}
inline void texasuser::set_selfcarry(const char* value, size_t size) {
  set_has_selfcarry();
  if (selfcarry_ == &::google::protobuf::internal::kEmptyString) {
    selfcarry_ = new ::std::string;
  }
  selfcarry_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* texasuser::mutable_selfcarry() {
  set_has_selfcarry();
  if (selfcarry_ == &::google::protobuf::internal::kEmptyString) {
    selfcarry_ = new ::std::string;
  }
  return selfcarry_;
}
inline ::std::string* texasuser::release_selfcarry() {
  clear_has_selfcarry();
  if (selfcarry_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selfcarry_;
    selfcarry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void texasuser::set_allocated_selfcarry(::std::string* selfcarry) {
  if (selfcarry_ != &::google::protobuf::internal::kEmptyString) {
    delete selfcarry_;
  }
  if (selfcarry) {
    set_has_selfcarry();
    selfcarry_ = selfcarry;
  } else {
    clear_has_selfcarry();
    selfcarry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ismaxcardtype = 18;
inline bool texasuser::has_ismaxcardtype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void texasuser::set_has_ismaxcardtype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void texasuser::clear_has_ismaxcardtype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void texasuser::clear_ismaxcardtype() {
  ismaxcardtype_ = 0;
  clear_has_ismaxcardtype();
}
inline ::google::protobuf::int32 texasuser::ismaxcardtype() const {
  return ismaxcardtype_;
}
inline void texasuser::set_ismaxcardtype(::google::protobuf::int32 value) {
  set_has_ismaxcardtype();
  ismaxcardtype_ = value;
}

// -------------------------------------------------------------------

// texasinfo

// optional int32 tableid = 1;
inline bool texasinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void texasinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void texasinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void texasinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 texasinfo::tableid() const {
  return tableid_;
}
inline void texasinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 2;
inline bool texasinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void texasinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void texasinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void texasinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 texasinfo::tabletype() const {
  return tabletype_;
}
inline void texasinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 playtype = 3;
inline bool texasinfo::has_playtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void texasinfo::set_has_playtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void texasinfo::clear_has_playtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void texasinfo::clear_playtype() {
  playtype_ = 0;
  clear_has_playtype();
}
inline ::google::protobuf::int32 texasinfo::playtype() const {
  return playtype_;
}
inline void texasinfo::set_playtype(::google::protobuf::int32 value) {
  set_has_playtype();
  playtype_ = value;
}

// optional int32 littleblind = 4;
inline bool texasinfo::has_littleblind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void texasinfo::set_has_littleblind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void texasinfo::clear_has_littleblind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void texasinfo::clear_littleblind() {
  littleblind_ = 0;
  clear_has_littleblind();
}
inline ::google::protobuf::int32 texasinfo::littleblind() const {
  return littleblind_;
}
inline void texasinfo::set_littleblind(::google::protobuf::int32 value) {
  set_has_littleblind();
  littleblind_ = value;
}

// optional int32 bigblind = 5;
inline bool texasinfo::has_bigblind() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void texasinfo::set_has_bigblind() {
  _has_bits_[0] |= 0x00000010u;
}
inline void texasinfo::clear_has_bigblind() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void texasinfo::clear_bigblind() {
  bigblind_ = 0;
  clear_has_bigblind();
}
inline ::google::protobuf::int32 texasinfo::bigblind() const {
  return bigblind_;
}
inline void texasinfo::set_bigblind(::google::protobuf::int32 value) {
  set_has_bigblind();
  bigblind_ = value;
}

// optional int32 ante = 6;
inline bool texasinfo::has_ante() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void texasinfo::set_has_ante() {
  _has_bits_[0] |= 0x00000020u;
}
inline void texasinfo::clear_has_ante() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void texasinfo::clear_ante() {
  ante_ = 0;
  clear_has_ante();
}
inline ::google::protobuf::int32 texasinfo::ante() const {
  return ante_;
}
inline void texasinfo::set_ante(::google::protobuf::int32 value) {
  set_has_ante();
  ante_ = value;
}

// optional int32 maxrefuel = 7;
inline bool texasinfo::has_maxrefuel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void texasinfo::set_has_maxrefuel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void texasinfo::clear_has_maxrefuel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void texasinfo::clear_maxrefuel() {
  maxrefuel_ = 0;
  clear_has_maxrefuel();
}
inline ::google::protobuf::int32 texasinfo::maxrefuel() const {
  return maxrefuel_;
}
inline void texasinfo::set_maxrefuel(::google::protobuf::int32 value) {
  set_has_maxrefuel();
  maxrefuel_ = value;
}

// optional int32 boutcapp = 8;
inline bool texasinfo::has_boutcapp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void texasinfo::set_has_boutcapp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void texasinfo::clear_has_boutcapp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void texasinfo::clear_boutcapp() {
  boutcapp_ = 0;
  clear_has_boutcapp();
}
inline ::google::protobuf::int32 texasinfo::boutcapp() const {
  return boutcapp_;
}
inline void texasinfo::set_boutcapp(::google::protobuf::int32 value) {
  set_has_boutcapp();
  boutcapp_ = value;
}

// optional int32 maxuser = 9;
inline bool texasinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void texasinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x00000100u;
}
inline void texasinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void texasinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 texasinfo::maxuser() const {
  return maxuser_;
}
inline void texasinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// optional int32 state = 10;
inline bool texasinfo::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void texasinfo::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void texasinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void texasinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 texasinfo::state() const {
  return state_;
}
inline void texasinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 11;
inline bool texasinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void texasinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000400u;
}
inline void texasinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void texasinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 texasinfo::timemark() const {
  return timemark_;
}
inline void texasinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional int32 bankerID = 12;
inline bool texasinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void texasinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void texasinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void texasinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 texasinfo::bankerid() const {
  return bankerid_;
}
inline void texasinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// repeated .progame.texasuser situser = 13;
inline int texasinfo::situser_size() const {
  return situser_.size();
}
inline void texasinfo::clear_situser() {
  situser_.Clear();
}
inline const ::progame::texasuser& texasinfo::situser(int index) const {
  return situser_.Get(index);
}
inline ::progame::texasuser* texasinfo::mutable_situser(int index) {
  return situser_.Mutable(index);
}
inline ::progame::texasuser* texasinfo::add_situser() {
  return situser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::texasuser >&
texasinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::texasuser >*
texasinfo::mutable_situser() {
  return &situser_;
}

// repeated .progame.texasstanuser standuser = 14;
inline int texasinfo::standuser_size() const {
  return standuser_.size();
}
inline void texasinfo::clear_standuser() {
  standuser_.Clear();
}
inline const ::progame::texasstanuser& texasinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline ::progame::texasstanuser* texasinfo::mutable_standuser(int index) {
  return standuser_.Mutable(index);
}
inline ::progame::texasstanuser* texasinfo::add_standuser() {
  return standuser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::texasstanuser >&
texasinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::texasstanuser >*
texasinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 dicicount = 15;
inline bool texasinfo::has_dicicount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void texasinfo::set_has_dicicount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void texasinfo::clear_has_dicicount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void texasinfo::clear_dicicount() {
  dicicount_ = 0;
  clear_has_dicicount();
}
inline ::google::protobuf::int32 texasinfo::dicicount() const {
  return dicicount_;
}
inline void texasinfo::set_dicicount(::google::protobuf::int32 value) {
  set_has_dicicount();
  dicicount_ = value;
}

// repeated int32 dicilist = 16;
inline int texasinfo::dicilist_size() const {
  return dicilist_.size();
}
inline void texasinfo::clear_dicilist() {
  dicilist_.Clear();
}
inline ::google::protobuf::int32 texasinfo::dicilist(int index) const {
  return dicilist_.Get(index);
}
inline void texasinfo::set_dicilist(int index, ::google::protobuf::int32 value) {
  dicilist_.Set(index, value);
}
inline void texasinfo::add_dicilist(::google::protobuf::int32 value) {
  dicilist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
texasinfo::dicilist() const {
  return dicilist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
texasinfo::mutable_dicilist() {
  return &dicilist_;
}

// optional int32 presentbout = 17;
inline bool texasinfo::has_presentbout() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void texasinfo::set_has_presentbout() {
  _has_bits_[0] |= 0x00010000u;
}
inline void texasinfo::clear_has_presentbout() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void texasinfo::clear_presentbout() {
  presentbout_ = 0;
  clear_has_presentbout();
}
inline ::google::protobuf::int32 texasinfo::presentbout() const {
  return presentbout_;
}
inline void texasinfo::set_presentbout(::google::protobuf::int32 value) {
  set_has_presentbout();
  presentbout_ = value;
}

// optional int32 cradcircle = 18;
inline bool texasinfo::has_cradcircle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void texasinfo::set_has_cradcircle() {
  _has_bits_[0] |= 0x00020000u;
}
inline void texasinfo::clear_has_cradcircle() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void texasinfo::clear_cradcircle() {
  cradcircle_ = 0;
  clear_has_cradcircle();
}
inline ::google::protobuf::int32 texasinfo::cradcircle() const {
  return cradcircle_;
}
inline void texasinfo::set_cradcircle(::google::protobuf::int32 value) {
  set_has_cradcircle();
  cradcircle_ = value;
}

// optional int32 followjetton = 19;
inline bool texasinfo::has_followjetton() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void texasinfo::set_has_followjetton() {
  _has_bits_[0] |= 0x00040000u;
}
inline void texasinfo::clear_has_followjetton() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void texasinfo::clear_followjetton() {
  followjetton_ = 0;
  clear_has_followjetton();
}
inline ::google::protobuf::int32 texasinfo::followjetton() const {
  return followjetton_;
}
inline void texasinfo::set_followjetton(::google::protobuf::int32 value) {
  set_has_followjetton();
  followjetton_ = value;
}

// optional int32 actionuser = 20;
inline bool texasinfo::has_actionuser() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void texasinfo::set_has_actionuser() {
  _has_bits_[0] |= 0x00080000u;
}
inline void texasinfo::clear_has_actionuser() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void texasinfo::clear_actionuser() {
  actionuser_ = 0;
  clear_has_actionuser();
}
inline ::google::protobuf::int32 texasinfo::actionuser() const {
  return actionuser_;
}
inline void texasinfo::set_actionuser(::google::protobuf::int32 value) {
  set_has_actionuser();
  actionuser_ = value;
}

// optional int32 lastuser = 21;
inline bool texasinfo::has_lastuser() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void texasinfo::set_has_lastuser() {
  _has_bits_[0] |= 0x00100000u;
}
inline void texasinfo::clear_has_lastuser() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void texasinfo::clear_lastuser() {
  lastuser_ = 0;
  clear_has_lastuser();
}
inline ::google::protobuf::int32 texasinfo::lastuser() const {
  return lastuser_;
}
inline void texasinfo::set_lastuser(::google::protobuf::int32 value) {
  set_has_lastuser();
  lastuser_ = value;
}

// repeated int32 commonpokerlist = 22;
inline int texasinfo::commonpokerlist_size() const {
  return commonpokerlist_.size();
}
inline void texasinfo::clear_commonpokerlist() {
  commonpokerlist_.Clear();
}
inline ::google::protobuf::int32 texasinfo::commonpokerlist(int index) const {
  return commonpokerlist_.Get(index);
}
inline void texasinfo::set_commonpokerlist(int index, ::google::protobuf::int32 value) {
  commonpokerlist_.Set(index, value);
}
inline void texasinfo::add_commonpokerlist(::google::protobuf::int32 value) {
  commonpokerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
texasinfo::commonpokerlist() const {
  return commonpokerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
texasinfo::mutable_commonpokerlist() {
  return &commonpokerlist_;
}

// optional int32 callflat = 23;
inline bool texasinfo::has_callflat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void texasinfo::set_has_callflat() {
  _has_bits_[0] |= 0x00400000u;
}
inline void texasinfo::clear_has_callflat() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void texasinfo::clear_callflat() {
  callflat_ = 0;
  clear_has_callflat();
}
inline ::google::protobuf::int32 texasinfo::callflat() const {
  return callflat_;
}
inline void texasinfo::set_callflat(::google::protobuf::int32 value) {
  set_has_callflat();
  callflat_ = value;
}

// repeated .progame.texasuserpour pourlist = 24;
inline int texasinfo::pourlist_size() const {
  return pourlist_.size();
}
inline void texasinfo::clear_pourlist() {
  pourlist_.Clear();
}
inline const ::progame::texasuserpour& texasinfo::pourlist(int index) const {
  return pourlist_.Get(index);
}
inline ::progame::texasuserpour* texasinfo::mutable_pourlist(int index) {
  return pourlist_.Mutable(index);
}
inline ::progame::texasuserpour* texasinfo::add_pourlist() {
  return pourlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::texasuserpour >&
texasinfo::pourlist() const {
  return pourlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::texasuserpour >*
texasinfo::mutable_pourlist() {
  return &pourlist_;
}

// optional int32 bankerChairid = 25;
inline bool texasinfo::has_bankerchairid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void texasinfo::set_has_bankerchairid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void texasinfo::clear_has_bankerchairid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void texasinfo::clear_bankerchairid() {
  bankerchairid_ = 0;
  clear_has_bankerchairid();
}
inline ::google::protobuf::int32 texasinfo::bankerchairid() const {
  return bankerchairid_;
}
inline void texasinfo::set_bankerchairid(::google::protobuf::int32 value) {
  set_has_bankerchairid();
  bankerchairid_ = value;
}

// repeated .progame.texasalluserpour allpourlist = 26;
inline int texasinfo::allpourlist_size() const {
  return allpourlist_.size();
}
inline void texasinfo::clear_allpourlist() {
  allpourlist_.Clear();
}
inline const ::progame::texasalluserpour& texasinfo::allpourlist(int index) const {
  return allpourlist_.Get(index);
}
inline ::progame::texasalluserpour* texasinfo::mutable_allpourlist(int index) {
  return allpourlist_.Mutable(index);
}
inline ::progame::texasalluserpour* texasinfo::add_allpourlist() {
  return allpourlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::texasalluserpour >&
texasinfo::allpourlist() const {
  return allpourlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::texasalluserpour >*
texasinfo::mutable_allpourlist() {
  return &allpourlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5ftexas_2eproto__INCLUDED
