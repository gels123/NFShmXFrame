// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_mission.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_mission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* missioninfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  missioninfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* missionlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  missionlist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fmission_2eproto() {
  protobuf_AddDesc_st_5fmission_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_mission.proto");
  GOOGLE_CHECK(file != NULL);
  missioninfo_descriptor_ = file->message_type(0);
  static const int missioninfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missioninfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missioninfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missioninfo, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missioninfo, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missioninfo, state_),
  };
  missioninfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      missioninfo_descriptor_,
      missioninfo::default_instance_,
      missioninfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missioninfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missioninfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(missioninfo));
  missionlist_descriptor_ = file->message_type(1);
  static const int missionlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missionlist, timesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missionlist, mslist_),
  };
  missionlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      missionlist_descriptor_,
      missionlist::default_instance_,
      missionlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missionlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(missionlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(missionlist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fmission_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    missioninfo_descriptor_, &missioninfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    missionlist_descriptor_, &missionlist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fmission_2eproto() {
  delete missioninfo::default_instance_;
  delete missioninfo_reflection_;
  delete missionlist::default_instance_;
  delete missionlist_reflection_;
}

void protobuf_AddDesc_st_5fmission_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020st_mission.proto\022\007progame\"[\n\013missionin"
    "fo\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\021\n\tmissio"
    "nid\030\003 \001(\005\022\016\n\006finish\030\004 \001(\005\022\r\n\005state\030\005 \001(\005"
    "\"D\n\013missionlist\022\017\n\007timesec\030\001 \001(\005\022$\n\006msli"
    "st\030\002 \003(\0132\024.progame.missioninfo", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_mission.proto", &protobuf_RegisterTypes);
  missioninfo::default_instance_ = new missioninfo();
  missionlist::default_instance_ = new missionlist();
  missioninfo::default_instance_->InitAsDefaultInstance();
  missionlist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fmission_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fmission_2eproto {
  StaticDescriptorInitializer_st_5fmission_2eproto() {
    protobuf_AddDesc_st_5fmission_2eproto();
  }
} static_descriptor_initializer_st_5fmission_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int missioninfo::kIdFieldNumber;
const int missioninfo::kUseridFieldNumber;
const int missioninfo::kMissionidFieldNumber;
const int missioninfo::kFinishFieldNumber;
const int missioninfo::kStateFieldNumber;
#endif  // !_MSC_VER

missioninfo::missioninfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void missioninfo::InitAsDefaultInstance() {
}

missioninfo::missioninfo(const missioninfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void missioninfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  missionid_ = 0;
  finish_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

missioninfo::~missioninfo() {
  SharedDtor();
}

void missioninfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void missioninfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* missioninfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return missioninfo_descriptor_;
}

const missioninfo& missioninfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fmission_2eproto();
  return *default_instance_;
}

missioninfo* missioninfo::default_instance_ = NULL;

missioninfo* missioninfo::New() const {
  return new missioninfo;
}

void missioninfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    missionid_ = 0;
    finish_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool missioninfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_missionid;
        break;
      }

      // optional int32 missionid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finish;
        break;
      }

      // optional int32 finish = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void missioninfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 missionid = 3;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->missionid(), output);
  }

  // optional int32 finish = 4;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->finish(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* missioninfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 missionid = 3;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->missionid(), target);
  }

  // optional int32 finish = 4;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->finish(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int missioninfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 missionid = 3;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // optional int32 finish = 4;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void missioninfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const missioninfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const missioninfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void missioninfo::MergeFrom(const missioninfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void missioninfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void missioninfo::CopyFrom(const missioninfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool missioninfo::IsInitialized() const {

  return true;
}

void missioninfo::Swap(missioninfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(missionid_, other->missionid_);
    std::swap(finish_, other->finish_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata missioninfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = missioninfo_descriptor_;
  metadata.reflection = missioninfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int missionlist::kTimesecFieldNumber;
const int missionlist::kMslistFieldNumber;
#endif  // !_MSC_VER

missionlist::missionlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void missionlist::InitAsDefaultInstance() {
}

missionlist::missionlist(const missionlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void missionlist::SharedCtor() {
  _cached_size_ = 0;
  timesec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

missionlist::~missionlist() {
  SharedDtor();
}

void missionlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void missionlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* missionlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return missionlist_descriptor_;
}

const missionlist& missionlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fmission_2eproto();
  return *default_instance_;
}

missionlist* missionlist::default_instance_ = NULL;

missionlist* missionlist::New() const {
  return new missionlist;
}

void missionlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timesec_ = 0;
  }
  mslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool missionlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timesec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timesec_)));
          set_has_timesec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mslist;
        break;
      }

      // repeated .progame.missioninfo mslist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mslist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mslist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void missionlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timesec = 1;
  if (has_timesec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timesec(), output);
  }

  // repeated .progame.missioninfo mslist = 2;
  for (int i = 0; i < this->mslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* missionlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timesec = 1;
  if (has_timesec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timesec(), target);
  }

  // repeated .progame.missioninfo mslist = 2;
  for (int i = 0; i < this->mslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int missionlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timesec = 1;
    if (has_timesec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timesec());
    }

  }
  // repeated .progame.missioninfo mslist = 2;
  total_size += 1 * this->mslist_size();
  for (int i = 0; i < this->mslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void missionlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const missionlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const missionlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void missionlist::MergeFrom(const missionlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  mslist_.MergeFrom(from.mslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timesec()) {
      set_timesec(from.timesec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void missionlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void missionlist::CopyFrom(const missionlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool missionlist::IsInitialized() const {

  return true;
}

void missionlist::Swap(missionlist* other) {
  if (other != this) {
    std::swap(timesec_, other->timesec_);
    mslist_.Swap(&other->mslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata missionlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = missionlist_descriptor_;
  metadata.reflection = missionlist_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
