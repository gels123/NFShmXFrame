// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_slot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_slot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* soltinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soltinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* soltplayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soltplayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* soltwin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soltwin_reflection_ = NULL;
const ::google::protobuf::Descriptor* soltuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soltuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* soltuserlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soltuserlist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fslot_2eproto() {
  protobuf_AddDesc_st_5fslot_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_slot.proto");
  GOOGLE_CHECK(file != NULL);
  soltinfo_descriptor_ = file->message_type(0);
  static const int soltinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltinfo, fruittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltinfo, pooljetton_),
  };
  soltinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soltinfo_descriptor_,
      soltinfo::default_instance_,
      soltinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soltinfo));
  soltplayer_descriptor_ = file->message_type(1);
  static const int soltplayer_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, fruittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, fruitdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, betjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, recvjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, breakret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, retamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, retjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, freeamount_),
  };
  soltplayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soltplayer_descriptor_,
      soltplayer::default_instance_,
      soltplayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltplayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soltplayer));
  soltwin_descriptor_ = file->message_type(2);
  static const int soltwin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltwin, awardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltwin, marknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltwin, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltwin, iswin_),
  };
  soltwin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soltwin_descriptor_,
      soltwin::default_instance_,
      soltwin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltwin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltwin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soltwin));
  soltuser_descriptor_ = file->message_type(3);
  static const int soltuser_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, fruittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, fwlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, maxaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, pourjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, winjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, wintype9_),
  };
  soltuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soltuser_descriptor_,
      soltuser::default_instance_,
      soltuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soltuser));
  soltuserlist_descriptor_ = file->message_type(4);
  static const int soltuserlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuserlist, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuserlist, fulist_),
  };
  soltuserlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soltuserlist_descriptor_,
      soltuserlist::default_instance_,
      soltuserlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuserlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soltuserlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soltuserlist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fslot_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soltinfo_descriptor_, &soltinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soltplayer_descriptor_, &soltplayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soltwin_descriptor_, &soltwin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soltuser_descriptor_, &soltuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soltuserlist_descriptor_, &soltuserlist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fslot_2eproto() {
  delete soltinfo::default_instance_;
  delete soltinfo_reflection_;
  delete soltplayer::default_instance_;
  delete soltplayer_reflection_;
  delete soltwin::default_instance_;
  delete soltwin_reflection_;
  delete soltuser::default_instance_;
  delete soltuser_reflection_;
  delete soltuserlist::default_instance_;
  delete soltuserlist_reflection_;
}

void protobuf_AddDesc_st_5fslot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_slot.proto\022\007progame\"1\n\010soltinfo\022\021\n\t"
    "fruittype\030\001 \001(\005\022\022\n\npooljetton\030\002 \001(\005\"\311\001\n\n"
    "soltplayer\022\016\n\006userid\030\001 \001(\005\022\021\n\tfruittype\030"
    "\002 \001(\005\022\021\n\tfruitdate\030\003 \001(\t\022\021\n\tbetjetton\030\004 "
    "\001(\005\022\022\n\nrecvjetton\030\005 \001(\005\022\020\n\010breakret\030\006 \001("
    "\005\022\022\n\ncontinuous\030\007 \001(\005\022\021\n\tretamount\030\010 \001(\005"
    "\022\021\n\tretjetton\030\t \001(\005\022\022\n\nfreeamount\030\n \001(\005\""
    "L\n\007soltwin\022\021\n\tawardtype\030\001 \001(\005\022\017\n\007marknum"
    "\030\002 \001(\005\022\016\n\006amount\030\003 \001(\005\022\r\n\005iswin\030\004 \001(\005\"\247\002"
    "\n\010soltuser\022\n\n\002id\030\001 \001(\005\022\021\n\tfruittype\030\002 \001("
    "\005\022 \n\006fwlist\030\003 \003(\0132\020.progame.soltwin\022\021\n\tm"
    "axaction\030\004 \001(\005\022\022\n\npourjetton\030\005 \001(\005\022\021\n\twi"
    "njetton\030\006 \001(\005\022\020\n\010wintype1\030\007 \001(\005\022\020\n\010winty"
    "pe2\030\010 \001(\005\022\020\n\010wintype3\030\t \001(\005\022\020\n\010wintype4\030"
    "\n \001(\005\022\020\n\010wintype5\030\013 \001(\005\022\020\n\010wintype6\030\014 \001("
    "\005\022\020\n\010wintype7\030\r \001(\005\022\020\n\010wintype8\030\016 \001(\005\022\020\n"
    "\010wintype9\030\017 \001(\005\"A\n\014soltuserlist\022\016\n\006useri"
    "d\030\001 \001(\005\022!\n\006fulist\030\002 \003(\0132\021.progame.soltus"
    "er", 722);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_slot.proto", &protobuf_RegisterTypes);
  soltinfo::default_instance_ = new soltinfo();
  soltplayer::default_instance_ = new soltplayer();
  soltwin::default_instance_ = new soltwin();
  soltuser::default_instance_ = new soltuser();
  soltuserlist::default_instance_ = new soltuserlist();
  soltinfo::default_instance_->InitAsDefaultInstance();
  soltplayer::default_instance_->InitAsDefaultInstance();
  soltwin::default_instance_->InitAsDefaultInstance();
  soltuser::default_instance_->InitAsDefaultInstance();
  soltuserlist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fslot_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fslot_2eproto {
  StaticDescriptorInitializer_st_5fslot_2eproto() {
    protobuf_AddDesc_st_5fslot_2eproto();
  }
} static_descriptor_initializer_st_5fslot_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int soltinfo::kFruittypeFieldNumber;
const int soltinfo::kPooljettonFieldNumber;
#endif  // !_MSC_VER

soltinfo::soltinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soltinfo::InitAsDefaultInstance() {
}

soltinfo::soltinfo(const soltinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soltinfo::SharedCtor() {
  _cached_size_ = 0;
  fruittype_ = 0;
  pooljetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soltinfo::~soltinfo() {
  SharedDtor();
}

void soltinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soltinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soltinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soltinfo_descriptor_;
}

const soltinfo& soltinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslot_2eproto();
  return *default_instance_;
}

soltinfo* soltinfo::default_instance_ = NULL;

soltinfo* soltinfo::New() const {
  return new soltinfo;
}

void soltinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fruittype_ = 0;
    pooljetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soltinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fruittype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fruittype_)));
          set_has_fruittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pooljetton;
        break;
      }

      // optional int32 pooljetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pooljetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pooljetton_)));
          set_has_pooljetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soltinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fruittype = 1;
  if (has_fruittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fruittype(), output);
  }

  // optional int32 pooljetton = 2;
  if (has_pooljetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pooljetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soltinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fruittype = 1;
  if (has_fruittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fruittype(), target);
  }

  // optional int32 pooljetton = 2;
  if (has_pooljetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pooljetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soltinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fruittype = 1;
    if (has_fruittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fruittype());
    }

    // optional int32 pooljetton = 2;
    if (has_pooljetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pooljetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soltinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soltinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soltinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soltinfo::MergeFrom(const soltinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fruittype()) {
      set_fruittype(from.fruittype());
    }
    if (from.has_pooljetton()) {
      set_pooljetton(from.pooljetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soltinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soltinfo::CopyFrom(const soltinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soltinfo::IsInitialized() const {

  return true;
}

void soltinfo::Swap(soltinfo* other) {
  if (other != this) {
    std::swap(fruittype_, other->fruittype_);
    std::swap(pooljetton_, other->pooljetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soltinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soltinfo_descriptor_;
  metadata.reflection = soltinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soltplayer::kUseridFieldNumber;
const int soltplayer::kFruittypeFieldNumber;
const int soltplayer::kFruitdateFieldNumber;
const int soltplayer::kBetjettonFieldNumber;
const int soltplayer::kRecvjettonFieldNumber;
const int soltplayer::kBreakretFieldNumber;
const int soltplayer::kContinuousFieldNumber;
const int soltplayer::kRetamountFieldNumber;
const int soltplayer::kRetjettonFieldNumber;
const int soltplayer::kFreeamountFieldNumber;
#endif  // !_MSC_VER

soltplayer::soltplayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soltplayer::InitAsDefaultInstance() {
}

soltplayer::soltplayer(const soltplayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soltplayer::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  fruittype_ = 0;
  fruitdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  betjetton_ = 0;
  recvjetton_ = 0;
  breakret_ = 0;
  continuous_ = 0;
  retamount_ = 0;
  retjetton_ = 0;
  freeamount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soltplayer::~soltplayer() {
  SharedDtor();
}

void soltplayer::SharedDtor() {
  if (fruitdate_ != &::google::protobuf::internal::kEmptyString) {
    delete fruitdate_;
  }
  if (this != default_instance_) {
  }
}

void soltplayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soltplayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soltplayer_descriptor_;
}

const soltplayer& soltplayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslot_2eproto();
  return *default_instance_;
}

soltplayer* soltplayer::default_instance_ = NULL;

soltplayer* soltplayer::New() const {
  return new soltplayer;
}

void soltplayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    fruittype_ = 0;
    if (has_fruitdate()) {
      if (fruitdate_ != &::google::protobuf::internal::kEmptyString) {
        fruitdate_->clear();
      }
    }
    betjetton_ = 0;
    recvjetton_ = 0;
    breakret_ = 0;
    continuous_ = 0;
    retamount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    retjetton_ = 0;
    freeamount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soltplayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fruittype;
        break;
      }

      // optional int32 fruittype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fruittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fruittype_)));
          set_has_fruittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fruitdate;
        break;
      }

      // optional string fruitdate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fruitdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fruitdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fruitdate().data(), this->fruitdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_betjetton;
        break;
      }

      // optional int32 betjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betjetton_)));
          set_has_betjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recvjetton;
        break;
      }

      // optional int32 recvjetton = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvjetton_)));
          set_has_recvjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_breakret;
        break;
      }

      // optional int32 breakret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_breakret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &breakret_)));
          set_has_breakret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_continuous;
        break;
      }

      // optional int32 continuous = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continuous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continuous_)));
          set_has_continuous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_retamount;
        break;
      }

      // optional int32 retamount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retamount_)));
          set_has_retamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_retjetton;
        break;
      }

      // optional int32 retjetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retjetton_)));
          set_has_retjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_freeamount;
        break;
      }

      // optional int32 freeamount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeamount_)));
          set_has_freeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soltplayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 fruittype = 2;
  if (has_fruittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fruittype(), output);
  }

  // optional string fruitdate = 3;
  if (has_fruitdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fruitdate().data(), this->fruitdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fruitdate(), output);
  }

  // optional int32 betjetton = 4;
  if (has_betjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->betjetton(), output);
  }

  // optional int32 recvjetton = 5;
  if (has_recvjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recvjetton(), output);
  }

  // optional int32 breakret = 6;
  if (has_breakret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->breakret(), output);
  }

  // optional int32 continuous = 7;
  if (has_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->continuous(), output);
  }

  // optional int32 retamount = 8;
  if (has_retamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->retamount(), output);
  }

  // optional int32 retjetton = 9;
  if (has_retjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->retjetton(), output);
  }

  // optional int32 freeamount = 10;
  if (has_freeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->freeamount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soltplayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 fruittype = 2;
  if (has_fruittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fruittype(), target);
  }

  // optional string fruitdate = 3;
  if (has_fruitdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fruitdate().data(), this->fruitdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fruitdate(), target);
  }

  // optional int32 betjetton = 4;
  if (has_betjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betjetton(), target);
  }

  // optional int32 recvjetton = 5;
  if (has_recvjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recvjetton(), target);
  }

  // optional int32 breakret = 6;
  if (has_breakret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->breakret(), target);
  }

  // optional int32 continuous = 7;
  if (has_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->continuous(), target);
  }

  // optional int32 retamount = 8;
  if (has_retamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->retamount(), target);
  }

  // optional int32 retjetton = 9;
  if (has_retjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->retjetton(), target);
  }

  // optional int32 freeamount = 10;
  if (has_freeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->freeamount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soltplayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 fruittype = 2;
    if (has_fruittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fruittype());
    }

    // optional string fruitdate = 3;
    if (has_fruitdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fruitdate());
    }

    // optional int32 betjetton = 4;
    if (has_betjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betjetton());
    }

    // optional int32 recvjetton = 5;
    if (has_recvjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvjetton());
    }

    // optional int32 breakret = 6;
    if (has_breakret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->breakret());
    }

    // optional int32 continuous = 7;
    if (has_continuous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continuous());
    }

    // optional int32 retamount = 8;
    if (has_retamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retamount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 retjetton = 9;
    if (has_retjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retjetton());
    }

    // optional int32 freeamount = 10;
    if (has_freeamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeamount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soltplayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soltplayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soltplayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soltplayer::MergeFrom(const soltplayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_fruittype()) {
      set_fruittype(from.fruittype());
    }
    if (from.has_fruitdate()) {
      set_fruitdate(from.fruitdate());
    }
    if (from.has_betjetton()) {
      set_betjetton(from.betjetton());
    }
    if (from.has_recvjetton()) {
      set_recvjetton(from.recvjetton());
    }
    if (from.has_breakret()) {
      set_breakret(from.breakret());
    }
    if (from.has_continuous()) {
      set_continuous(from.continuous());
    }
    if (from.has_retamount()) {
      set_retamount(from.retamount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_retjetton()) {
      set_retjetton(from.retjetton());
    }
    if (from.has_freeamount()) {
      set_freeamount(from.freeamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soltplayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soltplayer::CopyFrom(const soltplayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soltplayer::IsInitialized() const {

  return true;
}

void soltplayer::Swap(soltplayer* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(fruittype_, other->fruittype_);
    std::swap(fruitdate_, other->fruitdate_);
    std::swap(betjetton_, other->betjetton_);
    std::swap(recvjetton_, other->recvjetton_);
    std::swap(breakret_, other->breakret_);
    std::swap(continuous_, other->continuous_);
    std::swap(retamount_, other->retamount_);
    std::swap(retjetton_, other->retjetton_);
    std::swap(freeamount_, other->freeamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soltplayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soltplayer_descriptor_;
  metadata.reflection = soltplayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soltwin::kAwardtypeFieldNumber;
const int soltwin::kMarknumFieldNumber;
const int soltwin::kAmountFieldNumber;
const int soltwin::kIswinFieldNumber;
#endif  // !_MSC_VER

soltwin::soltwin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soltwin::InitAsDefaultInstance() {
}

soltwin::soltwin(const soltwin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soltwin::SharedCtor() {
  _cached_size_ = 0;
  awardtype_ = 0;
  marknum_ = 0;
  amount_ = 0;
  iswin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soltwin::~soltwin() {
  SharedDtor();
}

void soltwin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soltwin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soltwin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soltwin_descriptor_;
}

const soltwin& soltwin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslot_2eproto();
  return *default_instance_;
}

soltwin* soltwin::default_instance_ = NULL;

soltwin* soltwin::New() const {
  return new soltwin;
}

void soltwin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardtype_ = 0;
    marknum_ = 0;
    amount_ = 0;
    iswin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soltwin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 awardtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marknum;
        break;
      }

      // optional int32 marknum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marknum_)));
          set_has_marknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional int32 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iswin;
        break;
      }

      // optional int32 iswin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iswin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soltwin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 awardtype = 1;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->awardtype(), output);
  }

  // optional int32 marknum = 2;
  if (has_marknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->marknum(), output);
  }

  // optional int32 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }

  // optional int32 iswin = 4;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iswin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soltwin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 awardtype = 1;
  if (has_awardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->awardtype(), target);
  }

  // optional int32 marknum = 2;
  if (has_marknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->marknum(), target);
  }

  // optional int32 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }

  // optional int32 iswin = 4;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iswin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soltwin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 awardtype = 1;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardtype());
    }

    // optional int32 marknum = 2;
    if (has_marknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marknum());
    }

    // optional int32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 iswin = 4;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soltwin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soltwin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soltwin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soltwin::MergeFrom(const soltwin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_marknum()) {
      set_marknum(from.marknum());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soltwin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soltwin::CopyFrom(const soltwin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soltwin::IsInitialized() const {

  return true;
}

void soltwin::Swap(soltwin* other) {
  if (other != this) {
    std::swap(awardtype_, other->awardtype_);
    std::swap(marknum_, other->marknum_);
    std::swap(amount_, other->amount_);
    std::swap(iswin_, other->iswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soltwin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soltwin_descriptor_;
  metadata.reflection = soltwin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soltuser::kIdFieldNumber;
const int soltuser::kFruittypeFieldNumber;
const int soltuser::kFwlistFieldNumber;
const int soltuser::kMaxactionFieldNumber;
const int soltuser::kPourjettonFieldNumber;
const int soltuser::kWinjettonFieldNumber;
const int soltuser::kWintype1FieldNumber;
const int soltuser::kWintype2FieldNumber;
const int soltuser::kWintype3FieldNumber;
const int soltuser::kWintype4FieldNumber;
const int soltuser::kWintype5FieldNumber;
const int soltuser::kWintype6FieldNumber;
const int soltuser::kWintype7FieldNumber;
const int soltuser::kWintype8FieldNumber;
const int soltuser::kWintype9FieldNumber;
#endif  // !_MSC_VER

soltuser::soltuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soltuser::InitAsDefaultInstance() {
}

soltuser::soltuser(const soltuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soltuser::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  fruittype_ = 0;
  maxaction_ = 0;
  pourjetton_ = 0;
  winjetton_ = 0;
  wintype1_ = 0;
  wintype2_ = 0;
  wintype3_ = 0;
  wintype4_ = 0;
  wintype5_ = 0;
  wintype6_ = 0;
  wintype7_ = 0;
  wintype8_ = 0;
  wintype9_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soltuser::~soltuser() {
  SharedDtor();
}

void soltuser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soltuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soltuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soltuser_descriptor_;
}

const soltuser& soltuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslot_2eproto();
  return *default_instance_;
}

soltuser* soltuser::default_instance_ = NULL;

soltuser* soltuser::New() const {
  return new soltuser;
}

void soltuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    fruittype_ = 0;
    maxaction_ = 0;
    pourjetton_ = 0;
    winjetton_ = 0;
    wintype1_ = 0;
    wintype2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wintype3_ = 0;
    wintype4_ = 0;
    wintype5_ = 0;
    wintype6_ = 0;
    wintype7_ = 0;
    wintype8_ = 0;
    wintype9_ = 0;
  }
  fwlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soltuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fruittype;
        break;
      }

      // optional int32 fruittype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fruittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fruittype_)));
          set_has_fruittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fwlist;
        break;
      }

      // repeated .progame.soltwin fwlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fwlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fwlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fwlist;
        if (input->ExpectTag(32)) goto parse_maxaction;
        break;
      }

      // optional int32 maxaction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxaction_)));
          set_has_maxaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pourjetton;
        break;
      }

      // optional int32 pourjetton = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourjetton_)));
          set_has_pourjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winjetton;
        break;
      }

      // optional int32 winjetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winjetton_)));
          set_has_winjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_wintype1;
        break;
      }

      // optional int32 wintype1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype1_)));
          set_has_wintype1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_wintype2;
        break;
      }

      // optional int32 wintype2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype2_)));
          set_has_wintype2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_wintype3;
        break;
      }

      // optional int32 wintype3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype3_)));
          set_has_wintype3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wintype4;
        break;
      }

      // optional int32 wintype4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype4_)));
          set_has_wintype4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wintype5;
        break;
      }

      // optional int32 wintype5 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype5_)));
          set_has_wintype5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wintype6;
        break;
      }

      // optional int32 wintype6 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype6_)));
          set_has_wintype6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wintype7;
        break;
      }

      // optional int32 wintype7 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype7_)));
          set_has_wintype7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wintype8;
        break;
      }

      // optional int32 wintype8 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype8_)));
          set_has_wintype8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_wintype9;
        break;
      }

      // optional int32 wintype9 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype9_)));
          set_has_wintype9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soltuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 fruittype = 2;
  if (has_fruittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fruittype(), output);
  }

  // repeated .progame.soltwin fwlist = 3;
  for (int i = 0; i < this->fwlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fwlist(i), output);
  }

  // optional int32 maxaction = 4;
  if (has_maxaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxaction(), output);
  }

  // optional int32 pourjetton = 5;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pourjetton(), output);
  }

  // optional int32 winjetton = 6;
  if (has_winjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winjetton(), output);
  }

  // optional int32 wintype1 = 7;
  if (has_wintype1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wintype1(), output);
  }

  // optional int32 wintype2 = 8;
  if (has_wintype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->wintype2(), output);
  }

  // optional int32 wintype3 = 9;
  if (has_wintype3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->wintype3(), output);
  }

  // optional int32 wintype4 = 10;
  if (has_wintype4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->wintype4(), output);
  }

  // optional int32 wintype5 = 11;
  if (has_wintype5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wintype5(), output);
  }

  // optional int32 wintype6 = 12;
  if (has_wintype6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->wintype6(), output);
  }

  // optional int32 wintype7 = 13;
  if (has_wintype7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wintype7(), output);
  }

  // optional int32 wintype8 = 14;
  if (has_wintype8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->wintype8(), output);
  }

  // optional int32 wintype9 = 15;
  if (has_wintype9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->wintype9(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soltuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 fruittype = 2;
  if (has_fruittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fruittype(), target);
  }

  // repeated .progame.soltwin fwlist = 3;
  for (int i = 0; i < this->fwlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fwlist(i), target);
  }

  // optional int32 maxaction = 4;
  if (has_maxaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxaction(), target);
  }

  // optional int32 pourjetton = 5;
  if (has_pourjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pourjetton(), target);
  }

  // optional int32 winjetton = 6;
  if (has_winjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winjetton(), target);
  }

  // optional int32 wintype1 = 7;
  if (has_wintype1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wintype1(), target);
  }

  // optional int32 wintype2 = 8;
  if (has_wintype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->wintype2(), target);
  }

  // optional int32 wintype3 = 9;
  if (has_wintype3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->wintype3(), target);
  }

  // optional int32 wintype4 = 10;
  if (has_wintype4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->wintype4(), target);
  }

  // optional int32 wintype5 = 11;
  if (has_wintype5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wintype5(), target);
  }

  // optional int32 wintype6 = 12;
  if (has_wintype6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->wintype6(), target);
  }

  // optional int32 wintype7 = 13;
  if (has_wintype7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wintype7(), target);
  }

  // optional int32 wintype8 = 14;
  if (has_wintype8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->wintype8(), target);
  }

  // optional int32 wintype9 = 15;
  if (has_wintype9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->wintype9(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soltuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 fruittype = 2;
    if (has_fruittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fruittype());
    }

    // optional int32 maxaction = 4;
    if (has_maxaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxaction());
    }

    // optional int32 pourjetton = 5;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourjetton());
    }

    // optional int32 winjetton = 6;
    if (has_winjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winjetton());
    }

    // optional int32 wintype1 = 7;
    if (has_wintype1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype1());
    }

    // optional int32 wintype2 = 8;
    if (has_wintype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 wintype3 = 9;
    if (has_wintype3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype3());
    }

    // optional int32 wintype4 = 10;
    if (has_wintype4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype4());
    }

    // optional int32 wintype5 = 11;
    if (has_wintype5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype5());
    }

    // optional int32 wintype6 = 12;
    if (has_wintype6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype6());
    }

    // optional int32 wintype7 = 13;
    if (has_wintype7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype7());
    }

    // optional int32 wintype8 = 14;
    if (has_wintype8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype8());
    }

    // optional int32 wintype9 = 15;
    if (has_wintype9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype9());
    }

  }
  // repeated .progame.soltwin fwlist = 3;
  total_size += 1 * this->fwlist_size();
  for (int i = 0; i < this->fwlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fwlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soltuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soltuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soltuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soltuser::MergeFrom(const soltuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  fwlist_.MergeFrom(from.fwlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fruittype()) {
      set_fruittype(from.fruittype());
    }
    if (from.has_maxaction()) {
      set_maxaction(from.maxaction());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
    if (from.has_winjetton()) {
      set_winjetton(from.winjetton());
    }
    if (from.has_wintype1()) {
      set_wintype1(from.wintype1());
    }
    if (from.has_wintype2()) {
      set_wintype2(from.wintype2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wintype3()) {
      set_wintype3(from.wintype3());
    }
    if (from.has_wintype4()) {
      set_wintype4(from.wintype4());
    }
    if (from.has_wintype5()) {
      set_wintype5(from.wintype5());
    }
    if (from.has_wintype6()) {
      set_wintype6(from.wintype6());
    }
    if (from.has_wintype7()) {
      set_wintype7(from.wintype7());
    }
    if (from.has_wintype8()) {
      set_wintype8(from.wintype8());
    }
    if (from.has_wintype9()) {
      set_wintype9(from.wintype9());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soltuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soltuser::CopyFrom(const soltuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soltuser::IsInitialized() const {

  return true;
}

void soltuser::Swap(soltuser* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fruittype_, other->fruittype_);
    fwlist_.Swap(&other->fwlist_);
    std::swap(maxaction_, other->maxaction_);
    std::swap(pourjetton_, other->pourjetton_);
    std::swap(winjetton_, other->winjetton_);
    std::swap(wintype1_, other->wintype1_);
    std::swap(wintype2_, other->wintype2_);
    std::swap(wintype3_, other->wintype3_);
    std::swap(wintype4_, other->wintype4_);
    std::swap(wintype5_, other->wintype5_);
    std::swap(wintype6_, other->wintype6_);
    std::swap(wintype7_, other->wintype7_);
    std::swap(wintype8_, other->wintype8_);
    std::swap(wintype9_, other->wintype9_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soltuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soltuser_descriptor_;
  metadata.reflection = soltuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soltuserlist::kUseridFieldNumber;
const int soltuserlist::kFulistFieldNumber;
#endif  // !_MSC_VER

soltuserlist::soltuserlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soltuserlist::InitAsDefaultInstance() {
}

soltuserlist::soltuserlist(const soltuserlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soltuserlist::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soltuserlist::~soltuserlist() {
  SharedDtor();
}

void soltuserlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soltuserlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soltuserlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soltuserlist_descriptor_;
}

const soltuserlist& soltuserlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslot_2eproto();
  return *default_instance_;
}

soltuserlist* soltuserlist::default_instance_ = NULL;

soltuserlist* soltuserlist::New() const {
  return new soltuserlist;
}

void soltuserlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  fulist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soltuserlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fulist;
        break;
      }

      // repeated .progame.soltuser fulist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fulist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fulist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fulist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soltuserlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated .progame.soltuser fulist = 2;
  for (int i = 0; i < this->fulist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fulist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soltuserlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated .progame.soltuser fulist = 2;
  for (int i = 0; i < this->fulist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fulist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soltuserlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  // repeated .progame.soltuser fulist = 2;
  total_size += 1 * this->fulist_size();
  for (int i = 0; i < this->fulist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fulist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soltuserlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soltuserlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soltuserlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soltuserlist::MergeFrom(const soltuserlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  fulist_.MergeFrom(from.fulist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soltuserlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soltuserlist::CopyFrom(const soltuserlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soltuserlist::IsInitialized() const {

  return true;
}

void soltuserlist::Swap(soltuserlist* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    fulist_.Swap(&other->fulist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soltuserlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soltuserlist_descriptor_;
  metadata.reflection = soltuserlist_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
