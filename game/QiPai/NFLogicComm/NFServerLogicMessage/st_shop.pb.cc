// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_shop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_shop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* payinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  payinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* buymoneyinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  buymoneyinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* convertinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  convertinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* convertlog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  convertlog_reflection_ = NULL;
const ::google::protobuf::Descriptor* shopconfinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shopconfinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fshop_2eproto() {
  protobuf_AddDesc_st_5fshop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_shop.proto");
  GOOGLE_CHECK(file != NULL);
  payinfo_descriptor_ = file->message_type(0);
  static const int payinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, payid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, paymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, getmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, addamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, adddes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, addtime_),
  };
  payinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      payinfo_descriptor_,
      payinfo::default_instance_,
      payinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(payinfo));
  buymoneyinfo_descriptor_ = file->message_type(1);
  static const int buymoneyinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, buyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, paymoney_),
  };
  buymoneyinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      buymoneyinfo_descriptor_,
      buymoneyinfo::default_instance_,
      buymoneyinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(buymoneyinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(buymoneyinfo));
  convertinfo_descriptor_ = file->message_type(2);
  static const int convertinfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, address1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, address2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, address3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, addselect_),
  };
  convertinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      convertinfo_descriptor_,
      convertinfo::default_instance_,
      convertinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(convertinfo));
  convertlog_descriptor_ = file->message_type(3);
  static const int convertlog_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, convertid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, convertname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, convertnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, paynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, addname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, addphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, state_),
  };
  convertlog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      convertlog_descriptor_,
      convertlog::default_instance_,
      convertlog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(convertlog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(convertlog));
  shopconfinfo_descriptor_ = file->message_type(4);
  static const int shopconfinfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, minmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, maxmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, iscustom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, rebate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, normlist_),
  };
  shopconfinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shopconfinfo_descriptor_,
      shopconfinfo::default_instance_,
      shopconfinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shopconfinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shopconfinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fshop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    payinfo_descriptor_, &payinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    buymoneyinfo_descriptor_, &buymoneyinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    convertinfo_descriptor_, &convertinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    convertlog_descriptor_, &convertlog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shopconfinfo_descriptor_, &shopconfinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fshop_2eproto() {
  delete payinfo::default_instance_;
  delete payinfo_reflection_;
  delete buymoneyinfo::default_instance_;
  delete buymoneyinfo_reflection_;
  delete convertinfo::default_instance_;
  delete convertinfo_reflection_;
  delete convertlog::default_instance_;
  delete convertlog_reflection_;
  delete shopconfinfo::default_instance_;
  delete shopconfinfo_reflection_;
}

void protobuf_AddDesc_st_5fshop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_shop.proto\022\007progame\"\226\001\n\007payinfo\022\r\n\005"
    "payid\030\001 \001(\005\022\023\n\013description\030\002 \001(\t\022\020\n\010paym"
    "oney\030\003 \001(\005\022\020\n\010getmoney\030\004 \001(\005\022\017\n\007addtype\030"
    "\005 \001(\005\022\021\n\taddamount\030\006 \001(\005\022\016\n\006adddes\030\007 \001(\t"
    "\022\017\n\007addtime\030\010 \001(\005\"\241\001\n\014buymoneyinfo\022\017\n\007or"
    "derid\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\r\n\005buyid\030\003 \001"
    "(\005\022\016\n\006timeid\030\004 \001(\005\022\016\n\006status\030\005 \001(\005\022\017\n\007ch"
    "annel\030\006 \001(\t\022\014\n\004sign\030\007 \001(\t\022\020\n\010shoptype\030\010 "
    "\001(\005\022\020\n\010paymoney\030\t \001(\005\"\203\001\n\013convertinfo\022\016\n"
    "\006userid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\r\n\005phone\030\003 \001"
    "(\t\022\020\n\010address1\030\004 \001(\t\022\020\n\010address2\030\005 \001(\t\022\020"
    "\n\010address3\030\006 \001(\t\022\021\n\taddselect\030\007 \001(\005\"\332\001\n\n"
    "convertlog\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\021"
    "\n\tconvertid\030\003 \001(\005\022\023\n\013convertname\030\004 \001(\t\022\022"
    "\n\nconvertnum\030\005 \001(\005\022\017\n\007paytype\030\006 \001(\005\022\016\n\006p"
    "aynum\030\007 \001(\005\022\017\n\007addname\030\010 \001(\t\022\020\n\010addphone"
    "\030\t \001(\t\022\017\n\007address\030\n \001(\t\022\020\n\010timemark\030\013 \001("
    "\t\022\r\n\005state\030\014 \001(\005\"\257\001\n\014shopconfinfo\022\n\n\002id\030"
    "\001 \001(\005\022\016\n\006shopid\030\002 \001(\005\022\020\n\010shoptype\030\003 \001(\005\022"
    "\014\n\004name\030\004 \001(\t\022\013\n\003des\030\005 \001(\t\022\020\n\010minmoney\030\006"
    " \001(\005\022\020\n\010maxmoney\030\007 \001(\005\022\020\n\010iscustom\030\010 \001(\005"
    "\022\016\n\006rebate\030\t \001(\005\022\020\n\010normlist\030\n \003(\005", 874);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_shop.proto", &protobuf_RegisterTypes);
  payinfo::default_instance_ = new payinfo();
  buymoneyinfo::default_instance_ = new buymoneyinfo();
  convertinfo::default_instance_ = new convertinfo();
  convertlog::default_instance_ = new convertlog();
  shopconfinfo::default_instance_ = new shopconfinfo();
  payinfo::default_instance_->InitAsDefaultInstance();
  buymoneyinfo::default_instance_->InitAsDefaultInstance();
  convertinfo::default_instance_->InitAsDefaultInstance();
  convertlog::default_instance_->InitAsDefaultInstance();
  shopconfinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fshop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fshop_2eproto {
  StaticDescriptorInitializer_st_5fshop_2eproto() {
    protobuf_AddDesc_st_5fshop_2eproto();
  }
} static_descriptor_initializer_st_5fshop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int payinfo::kPayidFieldNumber;
const int payinfo::kDescriptionFieldNumber;
const int payinfo::kPaymoneyFieldNumber;
const int payinfo::kGetmoneyFieldNumber;
const int payinfo::kAddtypeFieldNumber;
const int payinfo::kAddamountFieldNumber;
const int payinfo::kAdddesFieldNumber;
const int payinfo::kAddtimeFieldNumber;
#endif  // !_MSC_VER

payinfo::payinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void payinfo::InitAsDefaultInstance() {
}

payinfo::payinfo(const payinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void payinfo::SharedCtor() {
  _cached_size_ = 0;
  payid_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paymoney_ = 0;
  getmoney_ = 0;
  addtype_ = 0;
  addamount_ = 0;
  adddes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

payinfo::~payinfo() {
  SharedDtor();
}

void payinfo::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (adddes_ != &::google::protobuf::internal::kEmptyString) {
    delete adddes_;
  }
  if (this != default_instance_) {
  }
}

void payinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* payinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return payinfo_descriptor_;
}

const payinfo& payinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fshop_2eproto();
  return *default_instance_;
}

payinfo* payinfo::default_instance_ = NULL;

payinfo* payinfo::New() const {
  return new payinfo;
}

void payinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    payid_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    paymoney_ = 0;
    getmoney_ = 0;
    addtype_ = 0;
    addamount_ = 0;
    if (has_adddes()) {
      if (adddes_ != &::google::protobuf::internal::kEmptyString) {
        adddes_->clear();
      }
    }
    addtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool payinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 payid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payid_)));
          set_has_payid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_paymoney;
        break;
      }

      // optional int32 paymoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paymoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paymoney_)));
          set_has_paymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getmoney;
        break;
      }

      // optional int32 getmoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getmoney_)));
          set_has_getmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addtype;
        break;
      }

      // optional int32 addtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_addamount;
        break;
      }

      // optional int32 addamount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addamount_)));
          set_has_addamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_adddes;
        break;
      }

      // optional string adddes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adddes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adddes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adddes().data(), this->adddes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_addtime;
        break;
      }

      // optional int32 addtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtime_)));
          set_has_addtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void payinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 payid = 1;
  if (has_payid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->payid(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional int32 paymoney = 3;
  if (has_paymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->paymoney(), output);
  }

  // optional int32 getmoney = 4;
  if (has_getmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getmoney(), output);
  }

  // optional int32 addtype = 5;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addtype(), output);
  }

  // optional int32 addamount = 6;
  if (has_addamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->addamount(), output);
  }

  // optional string adddes = 7;
  if (has_adddes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adddes().data(), this->adddes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->adddes(), output);
  }

  // optional int32 addtime = 8;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->addtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* payinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 payid = 1;
  if (has_payid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->payid(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional int32 paymoney = 3;
  if (has_paymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->paymoney(), target);
  }

  // optional int32 getmoney = 4;
  if (has_getmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getmoney(), target);
  }

  // optional int32 addtype = 5;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addtype(), target);
  }

  // optional int32 addamount = 6;
  if (has_addamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->addamount(), target);
  }

  // optional string adddes = 7;
  if (has_adddes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adddes().data(), this->adddes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->adddes(), target);
  }

  // optional int32 addtime = 8;
  if (has_addtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->addtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int payinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 payid = 1;
    if (has_payid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payid());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional int32 paymoney = 3;
    if (has_paymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paymoney());
    }

    // optional int32 getmoney = 4;
    if (has_getmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getmoney());
    }

    // optional int32 addtype = 5;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

    // optional int32 addamount = 6;
    if (has_addamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addamount());
    }

    // optional string adddes = 7;
    if (has_adddes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adddes());
    }

    // optional int32 addtime = 8;
    if (has_addtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void payinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const payinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const payinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void payinfo::MergeFrom(const payinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payid()) {
      set_payid(from.payid());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_paymoney()) {
      set_paymoney(from.paymoney());
    }
    if (from.has_getmoney()) {
      set_getmoney(from.getmoney());
    }
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_addamount()) {
      set_addamount(from.addamount());
    }
    if (from.has_adddes()) {
      set_adddes(from.adddes());
    }
    if (from.has_addtime()) {
      set_addtime(from.addtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void payinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void payinfo::CopyFrom(const payinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool payinfo::IsInitialized() const {

  return true;
}

void payinfo::Swap(payinfo* other) {
  if (other != this) {
    std::swap(payid_, other->payid_);
    std::swap(description_, other->description_);
    std::swap(paymoney_, other->paymoney_);
    std::swap(getmoney_, other->getmoney_);
    std::swap(addtype_, other->addtype_);
    std::swap(addamount_, other->addamount_);
    std::swap(adddes_, other->adddes_);
    std::swap(addtime_, other->addtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata payinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = payinfo_descriptor_;
  metadata.reflection = payinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int buymoneyinfo::kOrderidFieldNumber;
const int buymoneyinfo::kUseridFieldNumber;
const int buymoneyinfo::kBuyidFieldNumber;
const int buymoneyinfo::kTimeidFieldNumber;
const int buymoneyinfo::kStatusFieldNumber;
const int buymoneyinfo::kChannelFieldNumber;
const int buymoneyinfo::kSignFieldNumber;
const int buymoneyinfo::kShoptypeFieldNumber;
const int buymoneyinfo::kPaymoneyFieldNumber;
#endif  // !_MSC_VER

buymoneyinfo::buymoneyinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void buymoneyinfo::InitAsDefaultInstance() {
}

buymoneyinfo::buymoneyinfo(const buymoneyinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void buymoneyinfo::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = 0;
  userid_ = 0;
  buyid_ = 0;
  timeid_ = 0;
  status_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shoptype_ = 0;
  paymoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

buymoneyinfo::~buymoneyinfo() {
  SharedDtor();
}

void buymoneyinfo::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void buymoneyinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* buymoneyinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return buymoneyinfo_descriptor_;
}

const buymoneyinfo& buymoneyinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fshop_2eproto();
  return *default_instance_;
}

buymoneyinfo* buymoneyinfo::default_instance_ = NULL;

buymoneyinfo* buymoneyinfo::New() const {
  return new buymoneyinfo;
}

void buymoneyinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = 0;
    userid_ = 0;
    buyid_ = 0;
    timeid_ = 0;
    status_ = 0;
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    shoptype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    paymoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool buymoneyinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 orderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyid;
        break;
      }

      // optional int32 buyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyid_)));
          set_has_buyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeid;
        break;
      }

      // optional int32 timeid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeid_)));
          set_has_timeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_channel;
        break;
      }

      // optional string channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional string sign = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_shoptype;
        break;
      }

      // optional int32 shoptype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoptype_)));
          set_has_shoptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_paymoney;
        break;
      }

      // optional int32 paymoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paymoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paymoney_)));
          set_has_paymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void buymoneyinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderid(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 buyid = 3;
  if (has_buyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buyid(), output);
  }

  // optional int32 timeid = 4;
  if (has_timeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeid(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->channel(), output);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sign(), output);
  }

  // optional int32 shoptype = 8;
  if (has_shoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->shoptype(), output);
  }

  // optional int32 paymoney = 9;
  if (has_paymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->paymoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* buymoneyinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 orderid = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderid(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 buyid = 3;
  if (has_buyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buyid(), target);
  }

  // optional int32 timeid = 4;
  if (has_timeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeid(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional string channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->channel(), target);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sign(), target);
  }

  // optional int32 shoptype = 8;
  if (has_shoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->shoptype(), target);
  }

  // optional int32 paymoney = 9;
  if (has_paymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->paymoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int buymoneyinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 orderid = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 buyid = 3;
    if (has_buyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyid());
    }

    // optional int32 timeid = 4;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeid());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional int32 shoptype = 8;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoptype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 paymoney = 9;
    if (has_paymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paymoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void buymoneyinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const buymoneyinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const buymoneyinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void buymoneyinfo::MergeFrom(const buymoneyinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_buyid()) {
      set_buyid(from.buyid());
    }
    if (from.has_timeid()) {
      set_timeid(from.timeid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_shoptype()) {
      set_shoptype(from.shoptype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_paymoney()) {
      set_paymoney(from.paymoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void buymoneyinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void buymoneyinfo::CopyFrom(const buymoneyinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool buymoneyinfo::IsInitialized() const {

  return true;
}

void buymoneyinfo::Swap(buymoneyinfo* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(userid_, other->userid_);
    std::swap(buyid_, other->buyid_);
    std::swap(timeid_, other->timeid_);
    std::swap(status_, other->status_);
    std::swap(channel_, other->channel_);
    std::swap(sign_, other->sign_);
    std::swap(shoptype_, other->shoptype_);
    std::swap(paymoney_, other->paymoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata buymoneyinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = buymoneyinfo_descriptor_;
  metadata.reflection = buymoneyinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int convertinfo::kUseridFieldNumber;
const int convertinfo::kNameFieldNumber;
const int convertinfo::kPhoneFieldNumber;
const int convertinfo::kAddress1FieldNumber;
const int convertinfo::kAddress2FieldNumber;
const int convertinfo::kAddress3FieldNumber;
const int convertinfo::kAddselectFieldNumber;
#endif  // !_MSC_VER

convertinfo::convertinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void convertinfo::InitAsDefaultInstance() {
}

convertinfo::convertinfo(const convertinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void convertinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addselect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

convertinfo::~convertinfo() {
  SharedDtor();
}

void convertinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (address1_ != &::google::protobuf::internal::kEmptyString) {
    delete address1_;
  }
  if (address2_ != &::google::protobuf::internal::kEmptyString) {
    delete address2_;
  }
  if (address3_ != &::google::protobuf::internal::kEmptyString) {
    delete address3_;
  }
  if (this != default_instance_) {
  }
}

void convertinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* convertinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return convertinfo_descriptor_;
}

const convertinfo& convertinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fshop_2eproto();
  return *default_instance_;
}

convertinfo* convertinfo::default_instance_ = NULL;

convertinfo* convertinfo::New() const {
  return new convertinfo;
}

void convertinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_address1()) {
      if (address1_ != &::google::protobuf::internal::kEmptyString) {
        address1_->clear();
      }
    }
    if (has_address2()) {
      if (address2_ != &::google::protobuf::internal::kEmptyString) {
        address2_->clear();
      }
    }
    if (has_address3()) {
      if (address3_ != &::google::protobuf::internal::kEmptyString) {
        address3_->clear();
      }
    }
    addselect_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool convertinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phone;
        break;
      }

      // optional string phone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address1;
        break;
      }

      // optional string address1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address1().data(), this->address1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address2;
        break;
      }

      // optional string address2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address2().data(), this->address2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_address3;
        break;
      }

      // optional string address3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address3().data(), this->address3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_addselect;
        break;
      }

      // optional int32 addselect = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addselect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addselect_)));
          set_has_addselect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void convertinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phone(), output);
  }

  // optional string address1 = 4;
  if (has_address1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address1().data(), this->address1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->address1(), output);
  }

  // optional string address2 = 5;
  if (has_address2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address2().data(), this->address2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address2(), output);
  }

  // optional string address3 = 6;
  if (has_address3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address3().data(), this->address3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->address3(), output);
  }

  // optional int32 addselect = 7;
  if (has_addselect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->addselect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* convertinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string phone = 3;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phone(), target);
  }

  // optional string address1 = 4;
  if (has_address1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address1().data(), this->address1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address1(), target);
  }

  // optional string address2 = 5;
  if (has_address2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address2().data(), this->address2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->address2(), target);
  }

  // optional string address3 = 6;
  if (has_address3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address3().data(), this->address3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->address3(), target);
  }

  // optional int32 addselect = 7;
  if (has_addselect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->addselect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int convertinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string phone = 3;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string address1 = 4;
    if (has_address1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address1());
    }

    // optional string address2 = 5;
    if (has_address2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address2());
    }

    // optional string address3 = 6;
    if (has_address3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address3());
    }

    // optional int32 addselect = 7;
    if (has_addselect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addselect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void convertinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const convertinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const convertinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void convertinfo::MergeFrom(const convertinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_address1()) {
      set_address1(from.address1());
    }
    if (from.has_address2()) {
      set_address2(from.address2());
    }
    if (from.has_address3()) {
      set_address3(from.address3());
    }
    if (from.has_addselect()) {
      set_addselect(from.addselect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void convertinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void convertinfo::CopyFrom(const convertinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convertinfo::IsInitialized() const {

  return true;
}

void convertinfo::Swap(convertinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(phone_, other->phone_);
    std::swap(address1_, other->address1_);
    std::swap(address2_, other->address2_);
    std::swap(address3_, other->address3_);
    std::swap(addselect_, other->addselect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata convertinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = convertinfo_descriptor_;
  metadata.reflection = convertinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int convertlog::kIdFieldNumber;
const int convertlog::kUseridFieldNumber;
const int convertlog::kConvertidFieldNumber;
const int convertlog::kConvertnameFieldNumber;
const int convertlog::kConvertnumFieldNumber;
const int convertlog::kPaytypeFieldNumber;
const int convertlog::kPaynumFieldNumber;
const int convertlog::kAddnameFieldNumber;
const int convertlog::kAddphoneFieldNumber;
const int convertlog::kAddressFieldNumber;
const int convertlog::kTimemarkFieldNumber;
const int convertlog::kStateFieldNumber;
#endif  // !_MSC_VER

convertlog::convertlog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void convertlog::InitAsDefaultInstance() {
}

convertlog::convertlog(const convertlog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void convertlog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  convertid_ = 0;
  convertname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  convertnum_ = 0;
  paytype_ = 0;
  paynum_ = 0;
  addname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

convertlog::~convertlog() {
  SharedDtor();
}

void convertlog::SharedDtor() {
  if (convertname_ != &::google::protobuf::internal::kEmptyString) {
    delete convertname_;
  }
  if (addname_ != &::google::protobuf::internal::kEmptyString) {
    delete addname_;
  }
  if (addphone_ != &::google::protobuf::internal::kEmptyString) {
    delete addphone_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (timemark_ != &::google::protobuf::internal::kEmptyString) {
    delete timemark_;
  }
  if (this != default_instance_) {
  }
}

void convertlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* convertlog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return convertlog_descriptor_;
}

const convertlog& convertlog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fshop_2eproto();
  return *default_instance_;
}

convertlog* convertlog::default_instance_ = NULL;

convertlog* convertlog::New() const {
  return new convertlog;
}

void convertlog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    convertid_ = 0;
    if (has_convertname()) {
      if (convertname_ != &::google::protobuf::internal::kEmptyString) {
        convertname_->clear();
      }
    }
    convertnum_ = 0;
    paytype_ = 0;
    paynum_ = 0;
    if (has_addname()) {
      if (addname_ != &::google::protobuf::internal::kEmptyString) {
        addname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_addphone()) {
      if (addphone_ != &::google::protobuf::internal::kEmptyString) {
        addphone_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_timemark()) {
      if (timemark_ != &::google::protobuf::internal::kEmptyString) {
        timemark_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool convertlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_convertid;
        break;
      }

      // optional int32 convertid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convertid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &convertid_)));
          set_has_convertid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_convertname;
        break;
      }

      // optional string convertname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convertname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_convertname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->convertname().data(), this->convertname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_convertnum;
        break;
      }

      // optional int32 convertnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convertnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &convertnum_)));
          set_has_convertnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_paytype;
        break;
      }

      // optional int32 paytype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_paynum;
        break;
      }

      // optional int32 paynum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paynum_)));
          set_has_paynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_addname;
        break;
      }

      // optional string addname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addname().data(), this->addname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_addphone;
        break;
      }

      // optional string addphone = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addphone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addphone().data(), this->addphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_address;
        break;
      }

      // optional string address = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_timemark;
        break;
      }

      // optional string timemark = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timemark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timemark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timemark().data(), this->timemark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_state;
        break;
      }

      // optional int32 state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void convertlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // optional int32 convertid = 3;
  if (has_convertid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->convertid(), output);
  }

  // optional string convertname = 4;
  if (has_convertname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->convertname().data(), this->convertname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->convertname(), output);
  }

  // optional int32 convertnum = 5;
  if (has_convertnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->convertnum(), output);
  }

  // optional int32 paytype = 6;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->paytype(), output);
  }

  // optional int32 paynum = 7;
  if (has_paynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->paynum(), output);
  }

  // optional string addname = 8;
  if (has_addname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addname().data(), this->addname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->addname(), output);
  }

  // optional string addphone = 9;
  if (has_addphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addphone().data(), this->addphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->addphone(), output);
  }

  // optional string address = 10;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->address(), output);
  }

  // optional string timemark = 11;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timemark().data(), this->timemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->timemark(), output);
  }

  // optional int32 state = 12;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* convertlog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // optional int32 convertid = 3;
  if (has_convertid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->convertid(), target);
  }

  // optional string convertname = 4;
  if (has_convertname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->convertname().data(), this->convertname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->convertname(), target);
  }

  // optional int32 convertnum = 5;
  if (has_convertnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->convertnum(), target);
  }

  // optional int32 paytype = 6;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->paytype(), target);
  }

  // optional int32 paynum = 7;
  if (has_paynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->paynum(), target);
  }

  // optional string addname = 8;
  if (has_addname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addname().data(), this->addname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->addname(), target);
  }

  // optional string addphone = 9;
  if (has_addphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addphone().data(), this->addphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->addphone(), target);
  }

  // optional string address = 10;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->address(), target);
  }

  // optional string timemark = 11;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timemark().data(), this->timemark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->timemark(), target);
  }

  // optional int32 state = 12;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int convertlog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 convertid = 3;
    if (has_convertid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->convertid());
    }

    // optional string convertname = 4;
    if (has_convertname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->convertname());
    }

    // optional int32 convertnum = 5;
    if (has_convertnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->convertnum());
    }

    // optional int32 paytype = 6;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

    // optional int32 paynum = 7;
    if (has_paynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paynum());
    }

    // optional string addname = 8;
    if (has_addname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string addphone = 9;
    if (has_addphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addphone());
    }

    // optional string address = 10;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional string timemark = 11;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timemark());
    }

    // optional int32 state = 12;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void convertlog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const convertlog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const convertlog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void convertlog::MergeFrom(const convertlog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_convertid()) {
      set_convertid(from.convertid());
    }
    if (from.has_convertname()) {
      set_convertname(from.convertname());
    }
    if (from.has_convertnum()) {
      set_convertnum(from.convertnum());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_paynum()) {
      set_paynum(from.paynum());
    }
    if (from.has_addname()) {
      set_addname(from.addname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_addphone()) {
      set_addphone(from.addphone());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void convertlog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void convertlog::CopyFrom(const convertlog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convertlog::IsInitialized() const {

  return true;
}

void convertlog::Swap(convertlog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(convertid_, other->convertid_);
    std::swap(convertname_, other->convertname_);
    std::swap(convertnum_, other->convertnum_);
    std::swap(paytype_, other->paytype_);
    std::swap(paynum_, other->paynum_);
    std::swap(addname_, other->addname_);
    std::swap(addphone_, other->addphone_);
    std::swap(address_, other->address_);
    std::swap(timemark_, other->timemark_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata convertlog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = convertlog_descriptor_;
  metadata.reflection = convertlog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shopconfinfo::kIdFieldNumber;
const int shopconfinfo::kShopidFieldNumber;
const int shopconfinfo::kShoptypeFieldNumber;
const int shopconfinfo::kNameFieldNumber;
const int shopconfinfo::kDesFieldNumber;
const int shopconfinfo::kMinmoneyFieldNumber;
const int shopconfinfo::kMaxmoneyFieldNumber;
const int shopconfinfo::kIscustomFieldNumber;
const int shopconfinfo::kRebateFieldNumber;
const int shopconfinfo::kNormlistFieldNumber;
#endif  // !_MSC_VER

shopconfinfo::shopconfinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shopconfinfo::InitAsDefaultInstance() {
}

shopconfinfo::shopconfinfo(const shopconfinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shopconfinfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  shopid_ = 0;
  shoptype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minmoney_ = 0;
  maxmoney_ = 0;
  iscustom_ = 0;
  rebate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shopconfinfo::~shopconfinfo() {
  SharedDtor();
}

void shopconfinfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void shopconfinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shopconfinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shopconfinfo_descriptor_;
}

const shopconfinfo& shopconfinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fshop_2eproto();
  return *default_instance_;
}

shopconfinfo* shopconfinfo::default_instance_ = NULL;

shopconfinfo* shopconfinfo::New() const {
  return new shopconfinfo;
}

void shopconfinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    shopid_ = 0;
    shoptype_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    minmoney_ = 0;
    maxmoney_ = 0;
    iscustom_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rebate_ = 0;
  }
  normlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shopconfinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shopid;
        break;
      }

      // optional int32 shopid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shoptype;
        break;
      }

      // optional int32 shoptype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoptype_)));
          set_has_shoptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_des;
        break;
      }

      // optional string des = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minmoney;
        break;
      }

      // optional int32 minmoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmoney_)));
          set_has_minmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxmoney;
        break;
      }

      // optional int32 maxmoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmoney_)));
          set_has_maxmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iscustom;
        break;
      }

      // optional int32 iscustom = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscustom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscustom_)));
          set_has_iscustom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rebate;
        break;
      }

      // optional int32 rebate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rebate_)));
          set_has_rebate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_normlist;
        break;
      }

      // repeated int32 normlist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_normlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_normlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_normlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shopconfinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 shopid = 2;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shopid(), output);
  }

  // optional int32 shoptype = 3;
  if (has_shoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shoptype(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string des = 5;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->des(), output);
  }

  // optional int32 minmoney = 6;
  if (has_minmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minmoney(), output);
  }

  // optional int32 maxmoney = 7;
  if (has_maxmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxmoney(), output);
  }

  // optional int32 iscustom = 8;
  if (has_iscustom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iscustom(), output);
  }

  // optional int32 rebate = 9;
  if (has_rebate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rebate(), output);
  }

  // repeated int32 normlist = 10;
  for (int i = 0; i < this->normlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->normlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shopconfinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 shopid = 2;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shopid(), target);
  }

  // optional int32 shoptype = 3;
  if (has_shoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shoptype(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string des = 5;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->des(), target);
  }

  // optional int32 minmoney = 6;
  if (has_minmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minmoney(), target);
  }

  // optional int32 maxmoney = 7;
  if (has_maxmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxmoney(), target);
  }

  // optional int32 iscustom = 8;
  if (has_iscustom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->iscustom(), target);
  }

  // optional int32 rebate = 9;
  if (has_rebate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rebate(), target);
  }

  // repeated int32 normlist = 10;
  for (int i = 0; i < this->normlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->normlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shopconfinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 shopid = 2;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // optional int32 shoptype = 3;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoptype());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string des = 5;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // optional int32 minmoney = 6;
    if (has_minmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minmoney());
    }

    // optional int32 maxmoney = 7;
    if (has_maxmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmoney());
    }

    // optional int32 iscustom = 8;
    if (has_iscustom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscustom());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rebate = 9;
    if (has_rebate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rebate());
    }

  }
  // repeated int32 normlist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->normlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->normlist(i));
    }
    total_size += 1 * this->normlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shopconfinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shopconfinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shopconfinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shopconfinfo::MergeFrom(const shopconfinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  normlist_.MergeFrom(from.normlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_shoptype()) {
      set_shoptype(from.shoptype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_minmoney()) {
      set_minmoney(from.minmoney());
    }
    if (from.has_maxmoney()) {
      set_maxmoney(from.maxmoney());
    }
    if (from.has_iscustom()) {
      set_iscustom(from.iscustom());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rebate()) {
      set_rebate(from.rebate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shopconfinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shopconfinfo::CopyFrom(const shopconfinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shopconfinfo::IsInitialized() const {

  return true;
}

void shopconfinfo::Swap(shopconfinfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(shopid_, other->shopid_);
    std::swap(shoptype_, other->shoptype_);
    std::swap(name_, other->name_);
    std::swap(des_, other->des_);
    std::swap(minmoney_, other->minmoney_);
    std::swap(maxmoney_, other->maxmoney_);
    std::swap(iscustom_, other->iscustom_);
    std::swap(rebate_, other->rebate_);
    normlist_.Swap(&other->normlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shopconfinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shopconfinfo_descriptor_;
  metadata.reflection = shopconfinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
