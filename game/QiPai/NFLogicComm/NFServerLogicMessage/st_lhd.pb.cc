// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_lhd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_lhd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* lhdjetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lhdjetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* lhdplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lhdplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* lhdinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lhdinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* lhdjettonrecordlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lhdjettonrecordlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* lhdjettonrecorinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lhdjettonrecorinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* lhdgamehistoryinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lhdgamehistoryinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* lhdoneplayhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lhdoneplayhistory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5flhd_2eproto() {
  protobuf_AddDesc_st_5flhd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_lhd.proto");
  GOOGLE_CHECK(file != NULL);
  lhdjetton_descriptor_ = file->message_type(0);
  static const int lhdjetton_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjetton, pourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjetton, jetton_),
  };
  lhdjetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lhdjetton_descriptor_,
      lhdjetton::default_instance_,
      lhdjetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lhdjetton));
  lhdplay_descriptor_ = file->message_type(1);
  static const int lhdplay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdplay, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdplay, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdplay, cardtype_),
  };
  lhdplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lhdplay_descriptor_,
      lhdplay::default_instance_,
      lhdplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lhdplay));
  lhdinfo_descriptor_ = file->message_type(2);
  static const int lhdinfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, bankerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, bankerjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, applydrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, lhdtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, robotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, bankerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, maxrobotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, bankercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, robotbanuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, legalkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, bankercountlist_),
  };
  lhdinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lhdinfo_descriptor_,
      lhdinfo::default_instance_,
      lhdinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lhdinfo));
  lhdjettonrecordlist_descriptor_ = file->message_type(3);
  static const int lhdjettonrecordlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecordlist, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecordlist, wincondition_),
  };
  lhdjettonrecordlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lhdjettonrecordlist_descriptor_,
      lhdjettonrecordlist::default_instance_,
      lhdjettonrecordlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecordlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecordlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lhdjettonrecordlist));
  lhdjettonrecorinfo_descriptor_ = file->message_type(4);
  static const int lhdjettonrecorinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, facename_),
  };
  lhdjettonrecorinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lhdjettonrecorinfo_descriptor_,
      lhdjettonrecorinfo::default_instance_,
      lhdjettonrecorinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdjettonrecorinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lhdjettonrecorinfo));
  lhdgamehistoryinfo_descriptor_ = file->message_type(5);
  static const int lhdgamehistoryinfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, magnification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, recordidentification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, allnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, allnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, allnum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, allnum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, wintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, limitred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, gamenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, longnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, hunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, henum_),
  };
  lhdgamehistoryinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lhdgamehistoryinfo_descriptor_,
      lhdgamehistoryinfo::default_instance_,
      lhdgamehistoryinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdgamehistoryinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lhdgamehistoryinfo));
  lhdoneplayhistory_descriptor_ = file->message_type(6);
  static const int lhdoneplayhistory_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, recordidentification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, allnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, allnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, allnum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, allnum4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, wintype_),
  };
  lhdoneplayhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lhdoneplayhistory_descriptor_,
      lhdoneplayhistory::default_instance_,
      lhdoneplayhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lhdoneplayhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lhdoneplayhistory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5flhd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lhdjetton_descriptor_, &lhdjetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lhdplay_descriptor_, &lhdplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lhdinfo_descriptor_, &lhdinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lhdjettonrecordlist_descriptor_, &lhdjettonrecordlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lhdjettonrecorinfo_descriptor_, &lhdjettonrecorinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lhdgamehistoryinfo_descriptor_, &lhdgamehistoryinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lhdoneplayhistory_descriptor_, &lhdoneplayhistory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5flhd_2eproto() {
  delete lhdjetton::default_instance_;
  delete lhdjetton_reflection_;
  delete lhdplay::default_instance_;
  delete lhdplay_reflection_;
  delete lhdinfo::default_instance_;
  delete lhdinfo_reflection_;
  delete lhdjettonrecordlist::default_instance_;
  delete lhdjettonrecordlist_reflection_;
  delete lhdjettonrecorinfo::default_instance_;
  delete lhdjettonrecorinfo_reflection_;
  delete lhdgamehistoryinfo::default_instance_;
  delete lhdgamehistoryinfo_reflection_;
  delete lhdoneplayhistory::default_instance_;
  delete lhdoneplayhistory_reflection_;
}

void protobuf_AddDesc_st_5flhd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014st_lhd.proto\022\007progame\032\016st_human.proto\""
    "=\n\tlhdjetton\022\016\n\006userid\030\001 \001(\005\022\020\n\010pourtype"
    "\030\002 \001(\005\022\016\n\006jetton\030\003 \001(\005\"=\n\007lhdplay\022\016\n\006pla"
    "yid\030\001 \001(\005\022\020\n\010cardlist\030\002 \003(\005\022\020\n\010cardtype\030"
    "\003 \001(\005\"\275\003\n\007lhdinfo\022\017\n\007tableid\030\001 \001(\005\022\017\n\007fr"
    "ameid\030\002 \001(\005\022\r\n\005state\030\006 \001(\005\022\020\n\010timemark\030\007"
    " \001(\005\022\017\n\007situser\030\010 \003(\005\022\022\n\nbankerlist\030\t \003("
    "\005\022\021\n\tstanduser\030\n \003(\005\022\017\n\007usernum\030\013 \001(\005\022\020\n"
    "\010bankerid\030\014 \001(\005\022\024\n\014bankerjetton\030\r \001(\t\022\017\n"
    "\007maxuser\030\016 \001(\005\022\016\n\006faceid\030\017 \001(\t\022\022\n\nbanker"
    "name\030\021 \001(\t\022\021\n\tapplydrop\030\024 \001(\005\022\017\n\007lhdtype"
    "\030\025 \001(\005\022\021\n\ttabletype\030\026 \001(\005\022\020\n\010robotnum\030\027 "
    "\001(\005\022\023\n\013bankerlimit\030\030 \001(\t\022\023\n\013maxrobotnum\030"
    "\031 \001(\005\022\023\n\013bankercount\030\032 \001(\005\022\026\n\016robotbanus"
    "erid\030\033 \001(\005\022\020\n\010legalkey\030\034 \001(\t\022\027\n\017bankerco"
    "untlist\030\035 \003(\t\";\n\023lhdjettonrecordlist\022\016\n\006"
    "jetton\030\001 \003(\005\022\024\n\014wincondition\030\002 \003(\005\"w\n\022lh"
    "djettonrecorinfo\022\016\n\006userid\030\001 \001(\005\022\016\n\006jett"
    "on\030\002 \001(\005\022\016\n\006winnum\030\003 \001(\005\022\r\n\005jifen\030\004 \001(\t\022"
    "\020\n\010nickname\030\005 \001(\t\022\020\n\010facename\030\006 \001(\t\"\265\002\n\022"
    "lhdgamehistoryinfo\022\017\n\007tableid\030\001 \001(\005\022\021\n\tt"
    "ablename\030\002 \001(\t\022\025\n\rmagnification\030\003 \001(\005\022\r\n"
    "\005state\030\004 \001(\005\022\020\n\010timemark\030\005 \001(\005\022\034\n\024record"
    "identification\030\006 \003(\t\022\017\n\007allnum1\030\007 \003(\005\022\017\n"
    "\007allnum2\030\010 \003(\005\022\017\n\007allnum3\030\t \003(\005\022\017\n\007allnu"
    "m4\030\n \003(\005\022\017\n\007wintype\030\013 \003(\005\022\020\n\010limitred\030\014 "
    "\001(\005\022\017\n\007gamenum\030\016 \003(\005\022\017\n\007longnum\030\017 \003(\005\022\r\n"
    "\005hunum\030\020 \003(\005\022\r\n\005henum\030\021 \003(\005\"\206\001\n\021lhdonepl"
    "ayhistory\022\034\n\024recordidentification\030\001 \001(\t\022"
    "\017\n\007allnum1\030\002 \001(\005\022\017\n\007allnum2\030\003 \001(\005\022\017\n\007all"
    "num3\030\004 \001(\005\022\017\n\007allnum4\030\005 \001(\005\022\017\n\007wintype\030\006"
    " \001(\005", 1244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_lhd.proto", &protobuf_RegisterTypes);
  lhdjetton::default_instance_ = new lhdjetton();
  lhdplay::default_instance_ = new lhdplay();
  lhdinfo::default_instance_ = new lhdinfo();
  lhdjettonrecordlist::default_instance_ = new lhdjettonrecordlist();
  lhdjettonrecorinfo::default_instance_ = new lhdjettonrecorinfo();
  lhdgamehistoryinfo::default_instance_ = new lhdgamehistoryinfo();
  lhdoneplayhistory::default_instance_ = new lhdoneplayhistory();
  lhdjetton::default_instance_->InitAsDefaultInstance();
  lhdplay::default_instance_->InitAsDefaultInstance();
  lhdinfo::default_instance_->InitAsDefaultInstance();
  lhdjettonrecordlist::default_instance_->InitAsDefaultInstance();
  lhdjettonrecorinfo::default_instance_->InitAsDefaultInstance();
  lhdgamehistoryinfo::default_instance_->InitAsDefaultInstance();
  lhdoneplayhistory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5flhd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5flhd_2eproto {
  StaticDescriptorInitializer_st_5flhd_2eproto() {
    protobuf_AddDesc_st_5flhd_2eproto();
  }
} static_descriptor_initializer_st_5flhd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int lhdjetton::kUseridFieldNumber;
const int lhdjetton::kPourtypeFieldNumber;
const int lhdjetton::kJettonFieldNumber;
#endif  // !_MSC_VER

lhdjetton::lhdjetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lhdjetton::InitAsDefaultInstance() {
}

lhdjetton::lhdjetton(const lhdjetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lhdjetton::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourtype_ = 0;
  jetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lhdjetton::~lhdjetton() {
  SharedDtor();
}

void lhdjetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lhdjetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lhdjetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lhdjetton_descriptor_;
}

const lhdjetton& lhdjetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flhd_2eproto();
  return *default_instance_;
}

lhdjetton* lhdjetton::default_instance_ = NULL;

lhdjetton* lhdjetton::New() const {
  return new lhdjetton;
}

void lhdjetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourtype_ = 0;
    jetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lhdjetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourtype;
        break;
      }

      // optional int32 pourtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourtype_)));
          set_has_pourtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lhdjetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourtype(), output);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lhdjetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourtype(), target);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lhdjetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourtype = 2;
    if (has_pourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourtype());
    }

    // optional int32 jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lhdjetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lhdjetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lhdjetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lhdjetton::MergeFrom(const lhdjetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourtype()) {
      set_pourtype(from.pourtype());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lhdjetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhdjetton::CopyFrom(const lhdjetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhdjetton::IsInitialized() const {

  return true;
}

void lhdjetton::Swap(lhdjetton* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourtype_, other->pourtype_);
    std::swap(jetton_, other->jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lhdjetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lhdjetton_descriptor_;
  metadata.reflection = lhdjetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lhdplay::kPlayidFieldNumber;
const int lhdplay::kCardlistFieldNumber;
const int lhdplay::kCardtypeFieldNumber;
#endif  // !_MSC_VER

lhdplay::lhdplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lhdplay::InitAsDefaultInstance() {
}

lhdplay::lhdplay(const lhdplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lhdplay::SharedCtor() {
  _cached_size_ = 0;
  playid_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lhdplay::~lhdplay() {
  SharedDtor();
}

void lhdplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lhdplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lhdplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lhdplay_descriptor_;
}

const lhdplay& lhdplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flhd_2eproto();
  return *default_instance_;
}

lhdplay* lhdplay::default_instance_ = NULL;

lhdplay* lhdplay::New() const {
  return new lhdplay;
}

void lhdplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playid_ = 0;
    cardtype_ = 0;
  }
  cardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lhdplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        break;
      }

      // repeated int32 cardlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        if (input->ExpectTag(24)) goto parse_cardtype;
        break;
      }

      // optional int32 cardtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lhdplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playid(), output);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardlist(i), output);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lhdplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playid(), target);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardlist(i), target);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lhdplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playid());
    }

    // optional int32 cardtype = 3;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  // repeated int32 cardlist = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardlist(i));
    }
    total_size += 1 * this->cardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lhdplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lhdplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lhdplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lhdplay::MergeFrom(const lhdplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardlist_.MergeFrom(from.cardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lhdplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhdplay::CopyFrom(const lhdplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhdplay::IsInitialized() const {

  return true;
}

void lhdplay::Swap(lhdplay* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    cardlist_.Swap(&other->cardlist_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lhdplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lhdplay_descriptor_;
  metadata.reflection = lhdplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lhdinfo::kTableidFieldNumber;
const int lhdinfo::kFrameidFieldNumber;
const int lhdinfo::kStateFieldNumber;
const int lhdinfo::kTimemarkFieldNumber;
const int lhdinfo::kSituserFieldNumber;
const int lhdinfo::kBankerlistFieldNumber;
const int lhdinfo::kStanduserFieldNumber;
const int lhdinfo::kUsernumFieldNumber;
const int lhdinfo::kBankeridFieldNumber;
const int lhdinfo::kBankerjettonFieldNumber;
const int lhdinfo::kMaxuserFieldNumber;
const int lhdinfo::kFaceidFieldNumber;
const int lhdinfo::kBankernameFieldNumber;
const int lhdinfo::kApplydropFieldNumber;
const int lhdinfo::kLhdtypeFieldNumber;
const int lhdinfo::kTabletypeFieldNumber;
const int lhdinfo::kRobotnumFieldNumber;
const int lhdinfo::kBankerlimitFieldNumber;
const int lhdinfo::kMaxrobotnumFieldNumber;
const int lhdinfo::kBankercountFieldNumber;
const int lhdinfo::kRobotbanuseridFieldNumber;
const int lhdinfo::kLegalkeyFieldNumber;
const int lhdinfo::kBankercountlistFieldNumber;
#endif  // !_MSC_VER

lhdinfo::lhdinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lhdinfo::InitAsDefaultInstance() {
}

lhdinfo::lhdinfo(const lhdinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lhdinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  frameid_ = 0;
  state_ = 0;
  timemark_ = 0;
  usernum_ = 0;
  bankerid_ = 0;
  bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxuser_ = 0;
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applydrop_ = 0;
  lhdtype_ = 0;
  tabletype_ = 0;
  robotnum_ = 0;
  bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxrobotnum_ = 0;
  bankercount_ = 0;
  robotbanuserid_ = 0;
  legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lhdinfo::~lhdinfo() {
  SharedDtor();
}

void lhdinfo::SharedDtor() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (this != default_instance_) {
  }
}

void lhdinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lhdinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lhdinfo_descriptor_;
}

const lhdinfo& lhdinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flhd_2eproto();
  return *default_instance_;
}

lhdinfo* lhdinfo::default_instance_ = NULL;

lhdinfo* lhdinfo::New() const {
  return new lhdinfo;
}

void lhdinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    frameid_ = 0;
    state_ = 0;
    timemark_ = 0;
    usernum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bankerid_ = 0;
    if (has_bankerjetton()) {
      if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankerjetton_->clear();
      }
    }
    maxuser_ = 0;
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    applydrop_ = 0;
    lhdtype_ = 0;
    tabletype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    robotnum_ = 0;
    if (has_bankerlimit()) {
      if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
        bankerlimit_->clear();
      }
    }
    maxrobotnum_ = 0;
    bankercount_ = 0;
    robotbanuserid_ = 0;
    if (has_legalkey()) {
      if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
        legalkey_->clear();
      }
    }
  }
  situser_.Clear();
  bankerlist_.Clear();
  standuser_.Clear();
  bankercountlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lhdinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameid;
        break;
      }

      // optional int32 frameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_situser;
        break;
      }

      // repeated int32 situser = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_situser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_situser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_situser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_situser;
        if (input->ExpectTag(72)) goto parse_bankerlist;
        break;
      }

      // repeated int32 bankerlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_bankerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bankerlist;
        if (input->ExpectTag(80)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_standuser;
        if (input->ExpectTag(88)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_bankerjetton;
        break;
      }

      // optional string bankerjetton = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerjetton().data(), this->bankerjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_faceid;
        break;
      }

      // optional string faceid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_bankername;
        break;
      }

      // optional string bankername = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_applydrop;
        break;
      }

      // optional int32 applydrop = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applydrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applydrop_)));
          set_has_applydrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lhdtype;
        break;
      }

      // optional int32 lhdtype = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lhdtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lhdtype_)));
          set_has_lhdtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_robotnum;
        break;
      }

      // optional int32 robotnum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotnum_)));
          set_has_robotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_bankerlimit;
        break;
      }

      // optional string bankerlimit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerlimit().data(), this->bankerlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_maxrobotnum;
        break;
      }

      // optional int32 maxrobotnum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrobotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrobotnum_)));
          set_has_maxrobotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_bankercount;
        break;
      }

      // optional int32 bankercount = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankercount_)));
          set_has_bankercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_robotbanuserid;
        break;
      }

      // optional int32 robotbanuserid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotbanuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotbanuserid_)));
          set_has_robotbanuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_legalkey;
        break;
      }

      // optional string legalkey = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legalkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legalkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legalkey().data(), this->legalkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_bankercountlist;
        break;
      }

      // repeated string bankercountlist = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankercountlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bankercountlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankercountlist(this->bankercountlist_size() - 1).data(),
            this->bankercountlist(this->bankercountlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_bankercountlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lhdinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameid(), output);
  }

  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // optional int32 timemark = 7;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timemark(), output);
  }

  // repeated int32 situser = 8;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->situser(i), output);
  }

  // repeated int32 bankerlist = 9;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->bankerlist(i), output);
  }

  // repeated int32 standuser = 10;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->standuser(i), output);
  }

  // optional int32 usernum = 11;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->usernum(), output);
  }

  // optional int32 bankerid = 12;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bankerid(), output);
  }

  // optional string bankerjetton = 13;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->bankerjetton(), output);
  }

  // optional int32 maxuser = 14;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->maxuser(), output);
  }

  // optional string faceid = 15;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->faceid(), output);
  }

  // optional string bankername = 17;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->bankername(), output);
  }

  // optional int32 applydrop = 20;
  if (has_applydrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->applydrop(), output);
  }

  // optional int32 lhdtype = 21;
  if (has_lhdtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lhdtype(), output);
  }

  // optional int32 tabletype = 22;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tabletype(), output);
  }

  // optional int32 robotnum = 23;
  if (has_robotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->robotnum(), output);
  }

  // optional string bankerlimit = 24;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->bankerlimit(), output);
  }

  // optional int32 maxrobotnum = 25;
  if (has_maxrobotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->maxrobotnum(), output);
  }

  // optional int32 bankercount = 26;
  if (has_bankercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->bankercount(), output);
  }

  // optional int32 robotbanuserid = 27;
  if (has_robotbanuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->robotbanuserid(), output);
  }

  // optional string legalkey = 28;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->legalkey(), output);
  }

  // repeated string bankercountlist = 29;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bankercountlist(i).data(), this->bankercountlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->bankercountlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lhdinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frameid(), target);
  }

  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // optional int32 timemark = 7;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timemark(), target);
  }

  // repeated int32 situser = 8;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->situser(i), target);
  }

  // repeated int32 bankerlist = 9;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->bankerlist(i), target);
  }

  // repeated int32 standuser = 10;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->standuser(i), target);
  }

  // optional int32 usernum = 11;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->usernum(), target);
  }

  // optional int32 bankerid = 12;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bankerid(), target);
  }

  // optional string bankerjetton = 13;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->bankerjetton(), target);
  }

  // optional int32 maxuser = 14;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->maxuser(), target);
  }

  // optional string faceid = 15;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->faceid(), target);
  }

  // optional string bankername = 17;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bankername(), target);
  }

  // optional int32 applydrop = 20;
  if (has_applydrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->applydrop(), target);
  }

  // optional int32 lhdtype = 21;
  if (has_lhdtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lhdtype(), target);
  }

  // optional int32 tabletype = 22;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tabletype(), target);
  }

  // optional int32 robotnum = 23;
  if (has_robotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->robotnum(), target);
  }

  // optional string bankerlimit = 24;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->bankerlimit(), target);
  }

  // optional int32 maxrobotnum = 25;
  if (has_maxrobotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->maxrobotnum(), target);
  }

  // optional int32 bankercount = 26;
  if (has_bankercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->bankercount(), target);
  }

  // optional int32 robotbanuserid = 27;
  if (has_robotbanuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->robotbanuserid(), target);
  }

  // optional string legalkey = 28;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->legalkey(), target);
  }

  // repeated string bankercountlist = 29;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankercountlist(i).data(), this->bankercountlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(29, this->bankercountlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lhdinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 2;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 7;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 usernum = 11;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bankerid = 12;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional string bankerjetton = 13;
    if (has_bankerjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerjetton());
    }

    // optional int32 maxuser = 14;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional string faceid = 15;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

    // optional string bankername = 17;
    if (has_bankername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional int32 applydrop = 20;
    if (has_applydrop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applydrop());
    }

    // optional int32 lhdtype = 21;
    if (has_lhdtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lhdtype());
    }

    // optional int32 tabletype = 22;
    if (has_tabletype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 robotnum = 23;
    if (has_robotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotnum());
    }

    // optional string bankerlimit = 24;
    if (has_bankerlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerlimit());
    }

    // optional int32 maxrobotnum = 25;
    if (has_maxrobotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrobotnum());
    }

    // optional int32 bankercount = 26;
    if (has_bankercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankercount());
    }

    // optional int32 robotbanuserid = 27;
    if (has_robotbanuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotbanuserid());
    }

    // optional string legalkey = 28;
    if (has_legalkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legalkey());
    }

  }
  // repeated int32 situser = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->situser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->situser(i));
    }
    total_size += 1 * this->situser_size() + data_size;
  }

  // repeated int32 bankerlist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankerlist(i));
    }
    total_size += 1 * this->bankerlist_size() + data_size;
  }

  // repeated int32 standuser = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 1 * this->standuser_size() + data_size;
  }

  // repeated string bankercountlist = 29;
  total_size += 2 * this->bankercountlist_size();
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bankercountlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lhdinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lhdinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lhdinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lhdinfo::MergeFrom(const lhdinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  bankerlist_.MergeFrom(from.bankerlist_);
  standuser_.MergeFrom(from.standuser_);
  bankercountlist_.MergeFrom(from.bankercountlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_bankerjetton()) {
      set_bankerjetton(from.bankerjetton());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_applydrop()) {
      set_applydrop(from.applydrop());
    }
    if (from.has_lhdtype()) {
      set_lhdtype(from.lhdtype());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_robotnum()) {
      set_robotnum(from.robotnum());
    }
    if (from.has_bankerlimit()) {
      set_bankerlimit(from.bankerlimit());
    }
    if (from.has_maxrobotnum()) {
      set_maxrobotnum(from.maxrobotnum());
    }
    if (from.has_bankercount()) {
      set_bankercount(from.bankercount());
    }
    if (from.has_robotbanuserid()) {
      set_robotbanuserid(from.robotbanuserid());
    }
    if (from.has_legalkey()) {
      set_legalkey(from.legalkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lhdinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhdinfo::CopyFrom(const lhdinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhdinfo::IsInitialized() const {

  return true;
}

void lhdinfo::Swap(lhdinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(frameid_, other->frameid_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    situser_.Swap(&other->situser_);
    bankerlist_.Swap(&other->bankerlist_);
    standuser_.Swap(&other->standuser_);
    std::swap(usernum_, other->usernum_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankerjetton_, other->bankerjetton_);
    std::swap(maxuser_, other->maxuser_);
    std::swap(faceid_, other->faceid_);
    std::swap(bankername_, other->bankername_);
    std::swap(applydrop_, other->applydrop_);
    std::swap(lhdtype_, other->lhdtype_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(robotnum_, other->robotnum_);
    std::swap(bankerlimit_, other->bankerlimit_);
    std::swap(maxrobotnum_, other->maxrobotnum_);
    std::swap(bankercount_, other->bankercount_);
    std::swap(robotbanuserid_, other->robotbanuserid_);
    std::swap(legalkey_, other->legalkey_);
    bankercountlist_.Swap(&other->bankercountlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lhdinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lhdinfo_descriptor_;
  metadata.reflection = lhdinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lhdjettonrecordlist::kJettonFieldNumber;
const int lhdjettonrecordlist::kWinconditionFieldNumber;
#endif  // !_MSC_VER

lhdjettonrecordlist::lhdjettonrecordlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lhdjettonrecordlist::InitAsDefaultInstance() {
}

lhdjettonrecordlist::lhdjettonrecordlist(const lhdjettonrecordlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lhdjettonrecordlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lhdjettonrecordlist::~lhdjettonrecordlist() {
  SharedDtor();
}

void lhdjettonrecordlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lhdjettonrecordlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lhdjettonrecordlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lhdjettonrecordlist_descriptor_;
}

const lhdjettonrecordlist& lhdjettonrecordlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flhd_2eproto();
  return *default_instance_;
}

lhdjettonrecordlist* lhdjettonrecordlist::default_instance_ = NULL;

lhdjettonrecordlist* lhdjettonrecordlist::New() const {
  return new lhdjettonrecordlist;
}

void lhdjettonrecordlist::Clear() {
  jetton_.Clear();
  wincondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lhdjettonrecordlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_jetton;
        if (input->ExpectTag(16)) goto parse_wincondition;
        break;
      }

      // repeated int32 wincondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_wincondition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wincondition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wincondition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lhdjettonrecordlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jetton(i), output);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->wincondition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lhdjettonrecordlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jetton(i), target);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->wincondition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lhdjettonrecordlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 jetton = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated int32 wincondition = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->wincondition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wincondition(i));
    }
    total_size += 1 * this->wincondition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lhdjettonrecordlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lhdjettonrecordlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lhdjettonrecordlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lhdjettonrecordlist::MergeFrom(const lhdjettonrecordlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  jetton_.MergeFrom(from.jetton_);
  wincondition_.MergeFrom(from.wincondition_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lhdjettonrecordlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhdjettonrecordlist::CopyFrom(const lhdjettonrecordlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhdjettonrecordlist::IsInitialized() const {

  return true;
}

void lhdjettonrecordlist::Swap(lhdjettonrecordlist* other) {
  if (other != this) {
    jetton_.Swap(&other->jetton_);
    wincondition_.Swap(&other->wincondition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lhdjettonrecordlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lhdjettonrecordlist_descriptor_;
  metadata.reflection = lhdjettonrecordlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lhdjettonrecorinfo::kUseridFieldNumber;
const int lhdjettonrecorinfo::kJettonFieldNumber;
const int lhdjettonrecorinfo::kWinnumFieldNumber;
const int lhdjettonrecorinfo::kJifenFieldNumber;
const int lhdjettonrecorinfo::kNicknameFieldNumber;
const int lhdjettonrecorinfo::kFacenameFieldNumber;
#endif  // !_MSC_VER

lhdjettonrecorinfo::lhdjettonrecorinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lhdjettonrecorinfo::InitAsDefaultInstance() {
}

lhdjettonrecorinfo::lhdjettonrecorinfo(const lhdjettonrecorinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lhdjettonrecorinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  jetton_ = 0;
  winnum_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lhdjettonrecorinfo::~lhdjettonrecorinfo() {
  SharedDtor();
}

void lhdjettonrecorinfo::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (this != default_instance_) {
  }
}

void lhdjettonrecorinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lhdjettonrecorinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lhdjettonrecorinfo_descriptor_;
}

const lhdjettonrecorinfo& lhdjettonrecorinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flhd_2eproto();
  return *default_instance_;
}

lhdjettonrecorinfo* lhdjettonrecorinfo::default_instance_ = NULL;

lhdjettonrecorinfo* lhdjettonrecorinfo::New() const {
  return new lhdjettonrecorinfo;
}

void lhdjettonrecorinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    jetton_ = 0;
    winnum_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lhdjettonrecorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jifen;
        break;
      }

      // optional string jifen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facename;
        break;
      }

      // optional string facename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lhdjettonrecorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jetton(), output);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winnum(), output);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jifen(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->facename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lhdjettonrecorinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jetton(), target);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winnum(), target);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jifen(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->facename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lhdjettonrecorinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 jetton = 2;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 winnum = 3;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional string jifen = 4;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string facename = 6;
    if (has_facename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lhdjettonrecorinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lhdjettonrecorinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lhdjettonrecorinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lhdjettonrecorinfo::MergeFrom(const lhdjettonrecorinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lhdjettonrecorinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhdjettonrecorinfo::CopyFrom(const lhdjettonrecorinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhdjettonrecorinfo::IsInitialized() const {

  return true;
}

void lhdjettonrecorinfo::Swap(lhdjettonrecorinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(jetton_, other->jetton_);
    std::swap(winnum_, other->winnum_);
    std::swap(jifen_, other->jifen_);
    std::swap(nickname_, other->nickname_);
    std::swap(facename_, other->facename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lhdjettonrecorinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lhdjettonrecorinfo_descriptor_;
  metadata.reflection = lhdjettonrecorinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lhdgamehistoryinfo::kTableidFieldNumber;
const int lhdgamehistoryinfo::kTablenameFieldNumber;
const int lhdgamehistoryinfo::kMagnificationFieldNumber;
const int lhdgamehistoryinfo::kStateFieldNumber;
const int lhdgamehistoryinfo::kTimemarkFieldNumber;
const int lhdgamehistoryinfo::kRecordidentificationFieldNumber;
const int lhdgamehistoryinfo::kAllnum1FieldNumber;
const int lhdgamehistoryinfo::kAllnum2FieldNumber;
const int lhdgamehistoryinfo::kAllnum3FieldNumber;
const int lhdgamehistoryinfo::kAllnum4FieldNumber;
const int lhdgamehistoryinfo::kWintypeFieldNumber;
const int lhdgamehistoryinfo::kLimitredFieldNumber;
const int lhdgamehistoryinfo::kGamenumFieldNumber;
const int lhdgamehistoryinfo::kLongnumFieldNumber;
const int lhdgamehistoryinfo::kHunumFieldNumber;
const int lhdgamehistoryinfo::kHenumFieldNumber;
#endif  // !_MSC_VER

lhdgamehistoryinfo::lhdgamehistoryinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lhdgamehistoryinfo::InitAsDefaultInstance() {
}

lhdgamehistoryinfo::lhdgamehistoryinfo(const lhdgamehistoryinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lhdgamehistoryinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magnification_ = 0;
  state_ = 0;
  timemark_ = 0;
  limitred_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lhdgamehistoryinfo::~lhdgamehistoryinfo() {
  SharedDtor();
}

void lhdgamehistoryinfo::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void lhdgamehistoryinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lhdgamehistoryinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lhdgamehistoryinfo_descriptor_;
}

const lhdgamehistoryinfo& lhdgamehistoryinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flhd_2eproto();
  return *default_instance_;
}

lhdgamehistoryinfo* lhdgamehistoryinfo::default_instance_ = NULL;

lhdgamehistoryinfo* lhdgamehistoryinfo::New() const {
  return new lhdgamehistoryinfo;
}

void lhdgamehistoryinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    magnification_ = 0;
    state_ = 0;
    timemark_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    limitred_ = 0;
  }
  recordidentification_.Clear();
  allnum1_.Clear();
  allnum2_.Clear();
  allnum3_.Clear();
  allnum4_.Clear();
  wintype_.Clear();
  gamenum_.Clear();
  longnum_.Clear();
  hunum_.Clear();
  henum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lhdgamehistoryinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional string tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_magnification;
        break;
      }

      // optional int32 magnification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magnification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magnification_)));
          set_has_magnification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        break;
      }

      // repeated string recordidentification = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordidentification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification(this->recordidentification_size() - 1).data(),
            this->recordidentification(this->recordidentification_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        if (input->ExpectTag(56)) goto parse_allnum1;
        break;
      }

      // repeated int32 allnum1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_allnum1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allnum1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_allnum1;
        if (input->ExpectTag(64)) goto parse_allnum2;
        break;
      }

      // repeated int32 allnum2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_allnum2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allnum2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allnum2;
        if (input->ExpectTag(72)) goto parse_allnum3;
        break;
      }

      // repeated int32 allnum3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_allnum3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allnum3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_allnum3;
        if (input->ExpectTag(80)) goto parse_allnum4;
        break;
      }

      // repeated int32 allnum4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_allnum4())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allnum4())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_allnum4;
        if (input->ExpectTag(88)) goto parse_wintype;
        break;
      }

      // repeated int32 wintype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_wintype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wintype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wintype;
        if (input->ExpectTag(96)) goto parse_limitred;
        break;
      }

      // optional int32 limitred = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitred_)));
          set_has_limitred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gamenum;
        break;
      }

      // repeated int32 gamenum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_gamenum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gamenum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gamenum;
        if (input->ExpectTag(120)) goto parse_longnum;
        break;
      }

      // repeated int32 longnum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_longnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_longnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_longnum;
        if (input->ExpectTag(128)) goto parse_hunum;
        break;
      }

      // repeated int32 hunum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hunum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_hunum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hunum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hunum;
        if (input->ExpectTag(136)) goto parse_henum;
        break;
      }

      // repeated int32 henum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_henum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_henum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_henum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_henum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lhdgamehistoryinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->magnification(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recordidentification(i).data(), this->recordidentification(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recordidentification(i), output);
  }

  // repeated int32 allnum1 = 7;
  for (int i = 0; i < this->allnum1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->allnum1(i), output);
  }

  // repeated int32 allnum2 = 8;
  for (int i = 0; i < this->allnum2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->allnum2(i), output);
  }

  // repeated int32 allnum3 = 9;
  for (int i = 0; i < this->allnum3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->allnum3(i), output);
  }

  // repeated int32 allnum4 = 10;
  for (int i = 0; i < this->allnum4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->allnum4(i), output);
  }

  // repeated int32 wintype = 11;
  for (int i = 0; i < this->wintype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->wintype(i), output);
  }

  // optional int32 limitred = 12;
  if (has_limitred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->limitred(), output);
  }

  // repeated int32 gamenum = 14;
  for (int i = 0; i < this->gamenum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->gamenum(i), output);
  }

  // repeated int32 longnum = 15;
  for (int i = 0; i < this->longnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->longnum(i), output);
  }

  // repeated int32 hunum = 16;
  for (int i = 0; i < this->hunum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->hunum(i), output);
  }

  // repeated int32 henum = 17;
  for (int i = 0; i < this->henum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->henum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lhdgamehistoryinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->magnification(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification(i).data(), this->recordidentification(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->recordidentification(i), target);
  }

  // repeated int32 allnum1 = 7;
  for (int i = 0; i < this->allnum1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->allnum1(i), target);
  }

  // repeated int32 allnum2 = 8;
  for (int i = 0; i < this->allnum2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->allnum2(i), target);
  }

  // repeated int32 allnum3 = 9;
  for (int i = 0; i < this->allnum3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->allnum3(i), target);
  }

  // repeated int32 allnum4 = 10;
  for (int i = 0; i < this->allnum4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->allnum4(i), target);
  }

  // repeated int32 wintype = 11;
  for (int i = 0; i < this->wintype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->wintype(i), target);
  }

  // optional int32 limitred = 12;
  if (has_limitred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->limitred(), target);
  }

  // repeated int32 gamenum = 14;
  for (int i = 0; i < this->gamenum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->gamenum(i), target);
  }

  // repeated int32 longnum = 15;
  for (int i = 0; i < this->longnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->longnum(i), target);
  }

  // repeated int32 hunum = 16;
  for (int i = 0; i < this->hunum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->hunum(i), target);
  }

  // repeated int32 henum = 17;
  for (int i = 0; i < this->henum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->henum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lhdgamehistoryinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional string tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional int32 magnification = 3;
    if (has_magnification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magnification());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional int32 limitred = 12;
    if (has_limitred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitred());
    }

  }
  // repeated string recordidentification = 6;
  total_size += 1 * this->recordidentification_size();
  for (int i = 0; i < this->recordidentification_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recordidentification(i));
  }

  // repeated int32 allnum1 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->allnum1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allnum1(i));
    }
    total_size += 1 * this->allnum1_size() + data_size;
  }

  // repeated int32 allnum2 = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->allnum2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allnum2(i));
    }
    total_size += 1 * this->allnum2_size() + data_size;
  }

  // repeated int32 allnum3 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->allnum3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allnum3(i));
    }
    total_size += 1 * this->allnum3_size() + data_size;
  }

  // repeated int32 allnum4 = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->allnum4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allnum4(i));
    }
    total_size += 1 * this->allnum4_size() + data_size;
  }

  // repeated int32 wintype = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->wintype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wintype(i));
    }
    total_size += 1 * this->wintype_size() + data_size;
  }

  // repeated int32 gamenum = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->gamenum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gamenum(i));
    }
    total_size += 1 * this->gamenum_size() + data_size;
  }

  // repeated int32 longnum = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->longnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->longnum(i));
    }
    total_size += 1 * this->longnum_size() + data_size;
  }

  // repeated int32 hunum = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->hunum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hunum(i));
    }
    total_size += 2 * this->hunum_size() + data_size;
  }

  // repeated int32 henum = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->henum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->henum(i));
    }
    total_size += 2 * this->henum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lhdgamehistoryinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lhdgamehistoryinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lhdgamehistoryinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lhdgamehistoryinfo::MergeFrom(const lhdgamehistoryinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordidentification_.MergeFrom(from.recordidentification_);
  allnum1_.MergeFrom(from.allnum1_);
  allnum2_.MergeFrom(from.allnum2_);
  allnum3_.MergeFrom(from.allnum3_);
  allnum4_.MergeFrom(from.allnum4_);
  wintype_.MergeFrom(from.wintype_);
  gamenum_.MergeFrom(from.gamenum_);
  longnum_.MergeFrom(from.longnum_);
  hunum_.MergeFrom(from.hunum_);
  henum_.MergeFrom(from.henum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_magnification()) {
      set_magnification(from.magnification());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_limitred()) {
      set_limitred(from.limitred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lhdgamehistoryinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhdgamehistoryinfo::CopyFrom(const lhdgamehistoryinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhdgamehistoryinfo::IsInitialized() const {

  return true;
}

void lhdgamehistoryinfo::Swap(lhdgamehistoryinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(magnification_, other->magnification_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    recordidentification_.Swap(&other->recordidentification_);
    allnum1_.Swap(&other->allnum1_);
    allnum2_.Swap(&other->allnum2_);
    allnum3_.Swap(&other->allnum3_);
    allnum4_.Swap(&other->allnum4_);
    wintype_.Swap(&other->wintype_);
    std::swap(limitred_, other->limitred_);
    gamenum_.Swap(&other->gamenum_);
    longnum_.Swap(&other->longnum_);
    hunum_.Swap(&other->hunum_);
    henum_.Swap(&other->henum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lhdgamehistoryinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lhdgamehistoryinfo_descriptor_;
  metadata.reflection = lhdgamehistoryinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lhdoneplayhistory::kRecordidentificationFieldNumber;
const int lhdoneplayhistory::kAllnum1FieldNumber;
const int lhdoneplayhistory::kAllnum2FieldNumber;
const int lhdoneplayhistory::kAllnum3FieldNumber;
const int lhdoneplayhistory::kAllnum4FieldNumber;
const int lhdoneplayhistory::kWintypeFieldNumber;
#endif  // !_MSC_VER

lhdoneplayhistory::lhdoneplayhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lhdoneplayhistory::InitAsDefaultInstance() {
}

lhdoneplayhistory::lhdoneplayhistory(const lhdoneplayhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lhdoneplayhistory::SharedCtor() {
  _cached_size_ = 0;
  recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allnum1_ = 0;
  allnum2_ = 0;
  allnum3_ = 0;
  allnum4_ = 0;
  wintype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lhdoneplayhistory::~lhdoneplayhistory() {
  SharedDtor();
}

void lhdoneplayhistory::SharedDtor() {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    delete recordidentification_;
  }
  if (this != default_instance_) {
  }
}

void lhdoneplayhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lhdoneplayhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lhdoneplayhistory_descriptor_;
}

const lhdoneplayhistory& lhdoneplayhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5flhd_2eproto();
  return *default_instance_;
}

lhdoneplayhistory* lhdoneplayhistory::default_instance_ = NULL;

lhdoneplayhistory* lhdoneplayhistory::New() const {
  return new lhdoneplayhistory;
}

void lhdoneplayhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recordidentification()) {
      if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
        recordidentification_->clear();
      }
    }
    allnum1_ = 0;
    allnum2_ = 0;
    allnum3_ = 0;
    allnum4_ = 0;
    wintype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lhdoneplayhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string recordidentification = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification().data(), this->recordidentification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allnum1;
        break;
      }

      // optional int32 allnum1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allnum1_)));
          set_has_allnum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allnum2;
        break;
      }

      // optional int32 allnum2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allnum2_)));
          set_has_allnum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_allnum3;
        break;
      }

      // optional int32 allnum3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allnum3_)));
          set_has_allnum3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_allnum4;
        break;
      }

      // optional int32 allnum4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allnum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allnum4_)));
          set_has_allnum4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wintype;
        break;
      }

      // optional int32 wintype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wintype_)));
          set_has_wintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lhdoneplayhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string recordidentification = 1;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recordidentification(), output);
  }

  // optional int32 allnum1 = 2;
  if (has_allnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allnum1(), output);
  }

  // optional int32 allnum2 = 3;
  if (has_allnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allnum2(), output);
  }

  // optional int32 allnum3 = 4;
  if (has_allnum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->allnum3(), output);
  }

  // optional int32 allnum4 = 5;
  if (has_allnum4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->allnum4(), output);
  }

  // optional int32 wintype = 6;
  if (has_wintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wintype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lhdoneplayhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string recordidentification = 1;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->recordidentification(), target);
  }

  // optional int32 allnum1 = 2;
  if (has_allnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allnum1(), target);
  }

  // optional int32 allnum2 = 3;
  if (has_allnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->allnum2(), target);
  }

  // optional int32 allnum3 = 4;
  if (has_allnum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->allnum3(), target);
  }

  // optional int32 allnum4 = 5;
  if (has_allnum4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->allnum4(), target);
  }

  // optional int32 wintype = 6;
  if (has_wintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wintype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lhdoneplayhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string recordidentification = 1;
    if (has_recordidentification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordidentification());
    }

    // optional int32 allnum1 = 2;
    if (has_allnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allnum1());
    }

    // optional int32 allnum2 = 3;
    if (has_allnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allnum2());
    }

    // optional int32 allnum3 = 4;
    if (has_allnum3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allnum3());
    }

    // optional int32 allnum4 = 5;
    if (has_allnum4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allnum4());
    }

    // optional int32 wintype = 6;
    if (has_wintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wintype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lhdoneplayhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lhdoneplayhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lhdoneplayhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lhdoneplayhistory::MergeFrom(const lhdoneplayhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordidentification()) {
      set_recordidentification(from.recordidentification());
    }
    if (from.has_allnum1()) {
      set_allnum1(from.allnum1());
    }
    if (from.has_allnum2()) {
      set_allnum2(from.allnum2());
    }
    if (from.has_allnum3()) {
      set_allnum3(from.allnum3());
    }
    if (from.has_allnum4()) {
      set_allnum4(from.allnum4());
    }
    if (from.has_wintype()) {
      set_wintype(from.wintype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lhdoneplayhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lhdoneplayhistory::CopyFrom(const lhdoneplayhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lhdoneplayhistory::IsInitialized() const {

  return true;
}

void lhdoneplayhistory::Swap(lhdoneplayhistory* other) {
  if (other != this) {
    std::swap(recordidentification_, other->recordidentification_);
    std::swap(allnum1_, other->allnum1_);
    std::swap(allnum2_, other->allnum2_);
    std::swap(allnum3_, other->allnum3_);
    std::swap(allnum4_, other->allnum4_);
    std::swap(wintype_, other->wintype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lhdoneplayhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lhdoneplayhistory_descriptor_;
  metadata.reflection = lhdoneplayhistory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
