// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_barccatat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_barccatat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* barccatatjetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatjetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatatplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatatinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatathistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatathistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatatcard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatcard_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatatpouerjetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatpouerjetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatatjettonrecordlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatjettonrecordlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatatjettonrecorinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatjettonrecorinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* barccatatgamehistoryinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  barccatatgamehistoryinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fbarccatat_2eproto() {
  protobuf_AddDesc_st_5fbarccatat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_barccatat.proto");
  GOOGLE_CHECK(file != NULL);
  barccatatjetton_descriptor_ = file->message_type(0);
  static const int barccatatjetton_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjetton, pourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjetton, jetton_),
  };
  barccatatjetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatjetton_descriptor_,
      barccatatjetton::default_instance_,
      barccatatjetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatjetton));
  barccatatplay_descriptor_ = file->message_type(1);
  static const int barccatatplay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatplay, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatplay, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatplay, cardtype_),
  };
  barccatatplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatplay_descriptor_,
      barccatatplay::default_instance_,
      barccatatplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatplay));
  barccatatinfo_descriptor_ = file->message_type(2);
  static const int barccatatinfo_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, bankerjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, applydrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, baccatattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, robotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, pilecardcont_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, historylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, xcardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, xpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, zcardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, zpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, bankerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, bankerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, maxrobotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, julebuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, bankercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, bankercountlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, legalkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, robotbanuserid_),
  };
  barccatatinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatinfo_descriptor_,
      barccatatinfo::default_instance_,
      barccatatinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatinfo));
  barccatathistory_descriptor_ = file->message_type(3);
  static const int barccatathistory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatathistory, xpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatathistory, zpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatathistory, winresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatathistory, duizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatathistory, recordidentification_),
  };
  barccatathistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatathistory_descriptor_,
      barccatathistory::default_instance_,
      barccatathistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatathistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatathistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatathistory));
  barccatatcard_descriptor_ = file->message_type(4);
  static const int barccatatcard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatcard, poker_),
  };
  barccatatcard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatcard_descriptor_,
      barccatatcard::default_instance_,
      barccatatcard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatcard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatcard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatcard));
  barccatatpouerjetton_descriptor_ = file->message_type(5);
  static const int barccatatpouerjetton_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatpouerjetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatpouerjetton, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatpouerjetton, pourtype_),
  };
  barccatatpouerjetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatpouerjetton_descriptor_,
      barccatatpouerjetton::default_instance_,
      barccatatpouerjetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatpouerjetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatpouerjetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatpouerjetton));
  barccatatjettonrecordlist_descriptor_ = file->message_type(6);
  static const int barccatatjettonrecordlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecordlist, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecordlist, wincondition_),
  };
  barccatatjettonrecordlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatjettonrecordlist_descriptor_,
      barccatatjettonrecordlist::default_instance_,
      barccatatjettonrecordlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecordlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecordlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatjettonrecordlist));
  barccatatjettonrecorinfo_descriptor_ = file->message_type(7);
  static const int barccatatjettonrecorinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, facename_),
  };
  barccatatjettonrecorinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatjettonrecorinfo_descriptor_,
      barccatatjettonrecorinfo::default_instance_,
      barccatatjettonrecorinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatjettonrecorinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatjettonrecorinfo));
  barccatatgamehistoryinfo_descriptor_ = file->message_type(8);
  static const int barccatatgamehistoryinfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, magnification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, recordidentification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, xpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, zpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, winresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, duizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, limitred_),
  };
  barccatatgamehistoryinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      barccatatgamehistoryinfo_descriptor_,
      barccatatgamehistoryinfo::default_instance_,
      barccatatgamehistoryinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(barccatatgamehistoryinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(barccatatgamehistoryinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fbarccatat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatjetton_descriptor_, &barccatatjetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatplay_descriptor_, &barccatatplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatinfo_descriptor_, &barccatatinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatathistory_descriptor_, &barccatathistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatcard_descriptor_, &barccatatcard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatpouerjetton_descriptor_, &barccatatpouerjetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatjettonrecordlist_descriptor_, &barccatatjettonrecordlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatjettonrecorinfo_descriptor_, &barccatatjettonrecorinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    barccatatgamehistoryinfo_descriptor_, &barccatatgamehistoryinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fbarccatat_2eproto() {
  delete barccatatjetton::default_instance_;
  delete barccatatjetton_reflection_;
  delete barccatatplay::default_instance_;
  delete barccatatplay_reflection_;
  delete barccatatinfo::default_instance_;
  delete barccatatinfo_reflection_;
  delete barccatathistory::default_instance_;
  delete barccatathistory_reflection_;
  delete barccatatcard::default_instance_;
  delete barccatatcard_reflection_;
  delete barccatatpouerjetton::default_instance_;
  delete barccatatpouerjetton_reflection_;
  delete barccatatjettonrecordlist::default_instance_;
  delete barccatatjettonrecordlist_reflection_;
  delete barccatatjettonrecorinfo::default_instance_;
  delete barccatatjettonrecorinfo_reflection_;
  delete barccatatgamehistoryinfo::default_instance_;
  delete barccatatgamehistoryinfo_reflection_;
}

void protobuf_AddDesc_st_5fbarccatat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022st_barccatat.proto\022\007progame\032\016st_human."
    "proto\"C\n\017barccatatjetton\022\016\n\006userid\030\001 \001(\005"
    "\022\020\n\010pourtype\030\002 \001(\005\022\016\n\006jetton\030\003 \001(\005\"C\n\rba"
    "rccatatplay\022\016\n\006playid\030\001 \001(\005\022\020\n\010cardlist\030"
    "\002 \003(\005\022\020\n\010cardtype\030\003 \001(\005\"\313\004\n\rbarccatatinf"
    "o\022\017\n\007tableid\030\001 \001(\005\022\017\n\007frameid\030\002 \001(\005\022\r\n\005s"
    "tate\030\003 \001(\005\022\020\n\010timemark\030\004 \001(\005\022\017\n\007situser\030"
    "\005 \003(\005\022\021\n\tstanduser\030\006 \003(\005\022\017\n\007usernum\030\007 \001("
    "\005\022\020\n\010bankerid\030\010 \001(\005\022\024\n\014bankerjetton\030\t \001("
    "\t\022\017\n\007maxuser\030\n \001(\005\022\016\n\006faceid\030\013 \001(\t\022\022\n\nba"
    "nkername\030\014 \001(\t\022\021\n\tapplydrop\030\r \001(\005\022\024\n\014bac"
    "catattype\030\016 \001(\005\022\021\n\ttabletype\030\017 \001(\005\022\020\n\010ro"
    "botnum\030\020 \001(\005\022\024\n\014pilecardcont\030\021 \001(\005\022\023\n\013hi"
    "storylist\030\022 \003(\005\022\021\n\txcardlist\030\023 \003(\005\022\016\n\006xp"
    "oint\030\024 \001(\005\022\021\n\tzcardlist\030\025 \003(\005\022\016\n\006zpoint\030"
    "\026 \001(\005\022\022\n\nbankerlist\030\027 \003(\005\022\023\n\013bankerlimit"
    "\030\030 \001(\t\022\023\n\013maxrobotnum\030\031 \001(\005\022\020\n\010julebuid\030"
    "\032 \001(\005\022\023\n\013bankercount\030\033 \001(\005\022\027\n\017bankercoun"
    "tlist\030\034 \003(\005\022\020\n\010legalkey\030\035 \001(\t\022\026\n\016robotba"
    "nuserid\030\036 \001(\005\"r\n\020barccatathistory\022\016\n\006Xpo"
    "int\030\001 \001(\005\022\016\n\006ZPoint\030\002 \001(\005\022\021\n\tWinResult\030\003"
    " \001(\005\022\r\n\005Duizi\030\004 \001(\005\022\034\n\024recordidentificat"
    "ion\030\005 \001(\t\"\036\n\rbarccatatcard\022\r\n\005poker\030\001 \003("
    "\005\"H\n\024barccatatpouerjetton\022\016\n\006userid\030\001 \003("
    "\005\022\016\n\006jetton\030\002 \003(\005\022\020\n\010pourtype\030\003 \003(\005\"A\n\031b"
    "arccatatjettonrecordlist\022\016\n\006jetton\030\001 \003(\005"
    "\022\024\n\014wincondition\030\002 \003(\005\"}\n\030barccatatjetto"
    "nrecorinfo\022\016\n\006userid\030\001 \001(\005\022\016\n\006jetton\030\002 \001"
    "(\005\022\016\n\006winnum\030\003 \001(\005\022\r\n\005jifen\030\004 \001(\t\022\020\n\010nic"
    "kname\030\005 \001(\t\022\020\n\010facename\030\006 \001(\t\"\350\001\n\030barcca"
    "tatgamehistoryinfo\022\017\n\007tableid\030\001 \001(\005\022\021\n\tt"
    "ablename\030\002 \001(\t\022\025\n\rmagnification\030\003 \001(\005\022\r\n"
    "\005state\030\004 \001(\005\022\020\n\010timemark\030\005 \001(\005\022\034\n\024record"
    "identification\030\006 \003(\t\022\016\n\006Xpoint\030\007 \003(\005\022\016\n\006"
    "ZPoint\030\010 \003(\005\022\021\n\tWinResult\030\t \003(\005\022\r\n\005Duizi"
    "\030\n \003(\005\022\020\n\010limitred\030\013 \001(\005", 1424);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_barccatat.proto", &protobuf_RegisterTypes);
  barccatatjetton::default_instance_ = new barccatatjetton();
  barccatatplay::default_instance_ = new barccatatplay();
  barccatatinfo::default_instance_ = new barccatatinfo();
  barccatathistory::default_instance_ = new barccatathistory();
  barccatatcard::default_instance_ = new barccatatcard();
  barccatatpouerjetton::default_instance_ = new barccatatpouerjetton();
  barccatatjettonrecordlist::default_instance_ = new barccatatjettonrecordlist();
  barccatatjettonrecorinfo::default_instance_ = new barccatatjettonrecorinfo();
  barccatatgamehistoryinfo::default_instance_ = new barccatatgamehistoryinfo();
  barccatatjetton::default_instance_->InitAsDefaultInstance();
  barccatatplay::default_instance_->InitAsDefaultInstance();
  barccatatinfo::default_instance_->InitAsDefaultInstance();
  barccatathistory::default_instance_->InitAsDefaultInstance();
  barccatatcard::default_instance_->InitAsDefaultInstance();
  barccatatpouerjetton::default_instance_->InitAsDefaultInstance();
  barccatatjettonrecordlist::default_instance_->InitAsDefaultInstance();
  barccatatjettonrecorinfo::default_instance_->InitAsDefaultInstance();
  barccatatgamehistoryinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fbarccatat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fbarccatat_2eproto {
  StaticDescriptorInitializer_st_5fbarccatat_2eproto() {
    protobuf_AddDesc_st_5fbarccatat_2eproto();
  }
} static_descriptor_initializer_st_5fbarccatat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int barccatatjetton::kUseridFieldNumber;
const int barccatatjetton::kPourtypeFieldNumber;
const int barccatatjetton::kJettonFieldNumber;
#endif  // !_MSC_VER

barccatatjetton::barccatatjetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatjetton::InitAsDefaultInstance() {
}

barccatatjetton::barccatatjetton(const barccatatjetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatjetton::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourtype_ = 0;
  jetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatjetton::~barccatatjetton() {
  SharedDtor();
}

void barccatatjetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barccatatjetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatjetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatjetton_descriptor_;
}

const barccatatjetton& barccatatjetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatjetton* barccatatjetton::default_instance_ = NULL;

barccatatjetton* barccatatjetton::New() const {
  return new barccatatjetton;
}

void barccatatjetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourtype_ = 0;
    jetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatjetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourtype;
        break;
      }

      // optional int32 pourtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourtype_)));
          set_has_pourtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatjetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourtype(), output);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatjetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourtype(), target);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatjetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourtype = 2;
    if (has_pourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourtype());
    }

    // optional int32 jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatjetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatjetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatjetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatjetton::MergeFrom(const barccatatjetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourtype()) {
      set_pourtype(from.pourtype());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatjetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatjetton::CopyFrom(const barccatatjetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatjetton::IsInitialized() const {

  return true;
}

void barccatatjetton::Swap(barccatatjetton* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourtype_, other->pourtype_);
    std::swap(jetton_, other->jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatjetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatjetton_descriptor_;
  metadata.reflection = barccatatjetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatatplay::kPlayidFieldNumber;
const int barccatatplay::kCardlistFieldNumber;
const int barccatatplay::kCardtypeFieldNumber;
#endif  // !_MSC_VER

barccatatplay::barccatatplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatplay::InitAsDefaultInstance() {
}

barccatatplay::barccatatplay(const barccatatplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatplay::SharedCtor() {
  _cached_size_ = 0;
  playid_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatplay::~barccatatplay() {
  SharedDtor();
}

void barccatatplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barccatatplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatplay_descriptor_;
}

const barccatatplay& barccatatplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatplay* barccatatplay::default_instance_ = NULL;

barccatatplay* barccatatplay::New() const {
  return new barccatatplay;
}

void barccatatplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playid_ = 0;
    cardtype_ = 0;
  }
  cardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        break;
      }

      // repeated int32 cardlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        if (input->ExpectTag(24)) goto parse_cardtype;
        break;
      }

      // optional int32 cardtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playid(), output);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardlist(i), output);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playid(), target);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardlist(i), target);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playid());
    }

    // optional int32 cardtype = 3;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  // repeated int32 cardlist = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardlist(i));
    }
    total_size += 1 * this->cardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatplay::MergeFrom(const barccatatplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardlist_.MergeFrom(from.cardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatplay::CopyFrom(const barccatatplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatplay::IsInitialized() const {

  return true;
}

void barccatatplay::Swap(barccatatplay* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    cardlist_.Swap(&other->cardlist_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatplay_descriptor_;
  metadata.reflection = barccatatplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatatinfo::kTableidFieldNumber;
const int barccatatinfo::kFrameidFieldNumber;
const int barccatatinfo::kStateFieldNumber;
const int barccatatinfo::kTimemarkFieldNumber;
const int barccatatinfo::kSituserFieldNumber;
const int barccatatinfo::kStanduserFieldNumber;
const int barccatatinfo::kUsernumFieldNumber;
const int barccatatinfo::kBankeridFieldNumber;
const int barccatatinfo::kBankerjettonFieldNumber;
const int barccatatinfo::kMaxuserFieldNumber;
const int barccatatinfo::kFaceidFieldNumber;
const int barccatatinfo::kBankernameFieldNumber;
const int barccatatinfo::kApplydropFieldNumber;
const int barccatatinfo::kBaccatattypeFieldNumber;
const int barccatatinfo::kTabletypeFieldNumber;
const int barccatatinfo::kRobotnumFieldNumber;
const int barccatatinfo::kPilecardcontFieldNumber;
const int barccatatinfo::kHistorylistFieldNumber;
const int barccatatinfo::kXcardlistFieldNumber;
const int barccatatinfo::kXpointFieldNumber;
const int barccatatinfo::kZcardlistFieldNumber;
const int barccatatinfo::kZpointFieldNumber;
const int barccatatinfo::kBankerlistFieldNumber;
const int barccatatinfo::kBankerlimitFieldNumber;
const int barccatatinfo::kMaxrobotnumFieldNumber;
const int barccatatinfo::kJulebuidFieldNumber;
const int barccatatinfo::kBankercountFieldNumber;
const int barccatatinfo::kBankercountlistFieldNumber;
const int barccatatinfo::kLegalkeyFieldNumber;
const int barccatatinfo::kRobotbanuseridFieldNumber;
#endif  // !_MSC_VER

barccatatinfo::barccatatinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatinfo::InitAsDefaultInstance() {
}

barccatatinfo::barccatatinfo(const barccatatinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  frameid_ = 0;
  state_ = 0;
  timemark_ = 0;
  usernum_ = 0;
  bankerid_ = 0;
  bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxuser_ = 0;
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applydrop_ = 0;
  baccatattype_ = 0;
  tabletype_ = 0;
  robotnum_ = 0;
  pilecardcont_ = 0;
  xpoint_ = 0;
  zpoint_ = 0;
  bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxrobotnum_ = 0;
  julebuid_ = 0;
  bankercount_ = 0;
  legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  robotbanuserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatinfo::~barccatatinfo() {
  SharedDtor();
}

void barccatatinfo::SharedDtor() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (this != default_instance_) {
  }
}

void barccatatinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatinfo_descriptor_;
}

const barccatatinfo& barccatatinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatinfo* barccatatinfo::default_instance_ = NULL;

barccatatinfo* barccatatinfo::New() const {
  return new barccatatinfo;
}

void barccatatinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    frameid_ = 0;
    state_ = 0;
    timemark_ = 0;
    usernum_ = 0;
    bankerid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bankerjetton()) {
      if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankerjetton_->clear();
      }
    }
    maxuser_ = 0;
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    applydrop_ = 0;
    baccatattype_ = 0;
    tabletype_ = 0;
    robotnum_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pilecardcont_ = 0;
    xpoint_ = 0;
    zpoint_ = 0;
    if (has_bankerlimit()) {
      if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
        bankerlimit_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    maxrobotnum_ = 0;
    julebuid_ = 0;
    bankercount_ = 0;
    if (has_legalkey()) {
      if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
        legalkey_->clear();
      }
    }
    robotbanuserid_ = 0;
  }
  situser_.Clear();
  standuser_.Clear();
  historylist_.Clear();
  xcardlist_.Clear();
  zcardlist_.Clear();
  bankerlist_.Clear();
  bankercountlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameid;
        break;
      }

      // optional int32 frameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_situser;
        break;
      }

      // repeated int32 situser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_situser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_situser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_situser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_situser;
        if (input->ExpectTag(48)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_standuser;
        if (input->ExpectTag(56)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bankerjetton;
        break;
      }

      // optional string bankerjetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerjetton().data(), this->bankerjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_faceid;
        break;
      }

      // optional string faceid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bankername;
        break;
      }

      // optional string bankername = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_applydrop;
        break;
      }

      // optional int32 applydrop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applydrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applydrop_)));
          set_has_applydrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_baccatattype;
        break;
      }

      // optional int32 baccatattype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baccatattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baccatattype_)));
          set_has_baccatattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_robotnum;
        break;
      }

      // optional int32 robotnum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotnum_)));
          set_has_robotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pilecardcont;
        break;
      }

      // optional int32 pilecardcont = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pilecardcont:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pilecardcont_)));
          set_has_pilecardcont();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_historylist;
        break;
      }

      // repeated int32 historylist = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historylist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_historylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_historylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_historylist;
        if (input->ExpectTag(152)) goto parse_xcardlist;
        break;
      }

      // repeated int32 xcardlist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xcardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_xcardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xcardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_xcardlist;
        if (input->ExpectTag(160)) goto parse_xpoint;
        break;
      }

      // optional int32 xpoint = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpoint_)));
          set_has_xpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_zcardlist;
        break;
      }

      // repeated int32 zcardlist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zcardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_zcardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zcardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_zcardlist;
        if (input->ExpectTag(176)) goto parse_zpoint;
        break;
      }

      // optional int32 zpoint = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zpoint_)));
          set_has_zpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bankerlist;
        break;
      }

      // repeated int32 bankerlist = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_bankerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bankerlist;
        if (input->ExpectTag(194)) goto parse_bankerlimit;
        break;
      }

      // optional string bankerlimit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerlimit().data(), this->bankerlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_maxrobotnum;
        break;
      }

      // optional int32 maxrobotnum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrobotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrobotnum_)));
          set_has_maxrobotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_julebuid;
        break;
      }

      // optional int32 julebuid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebuid_)));
          set_has_julebuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bankercount;
        break;
      }

      // optional int32 bankercount = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankercount_)));
          set_has_bankercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_bankercountlist;
        break;
      }

      // repeated int32 bankercountlist = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercountlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224, input, this->mutable_bankercountlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankercountlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_bankercountlist;
        if (input->ExpectTag(234)) goto parse_legalkey;
        break;
      }

      // optional string legalkey = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legalkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legalkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legalkey().data(), this->legalkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_robotbanuserid;
        break;
      }

      // optional int32 robotbanuserid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotbanuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotbanuserid_)));
          set_has_robotbanuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timemark(), output);
  }

  // repeated int32 situser = 5;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->situser(i), output);
  }

  // repeated int32 standuser = 6;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->standuser(i), output);
  }

  // optional int32 usernum = 7;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->usernum(), output);
  }

  // optional int32 bankerid = 8;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bankerid(), output);
  }

  // optional string bankerjetton = 9;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bankerjetton(), output);
  }

  // optional int32 maxuser = 10;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxuser(), output);
  }

  // optional string faceid = 11;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->faceid(), output);
  }

  // optional string bankername = 12;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bankername(), output);
  }

  // optional int32 applydrop = 13;
  if (has_applydrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->applydrop(), output);
  }

  // optional int32 baccatattype = 14;
  if (has_baccatattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->baccatattype(), output);
  }

  // optional int32 tabletype = 15;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tabletype(), output);
  }

  // optional int32 robotnum = 16;
  if (has_robotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->robotnum(), output);
  }

  // optional int32 pilecardcont = 17;
  if (has_pilecardcont()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->pilecardcont(), output);
  }

  // repeated int32 historylist = 18;
  for (int i = 0; i < this->historylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->historylist(i), output);
  }

  // repeated int32 xcardlist = 19;
  for (int i = 0; i < this->xcardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->xcardlist(i), output);
  }

  // optional int32 xpoint = 20;
  if (has_xpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->xpoint(), output);
  }

  // repeated int32 zcardlist = 21;
  for (int i = 0; i < this->zcardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->zcardlist(i), output);
  }

  // optional int32 zpoint = 22;
  if (has_zpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->zpoint(), output);
  }

  // repeated int32 bankerlist = 23;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->bankerlist(i), output);
  }

  // optional string bankerlimit = 24;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->bankerlimit(), output);
  }

  // optional int32 maxrobotnum = 25;
  if (has_maxrobotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->maxrobotnum(), output);
  }

  // optional int32 julebuid = 26;
  if (has_julebuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->julebuid(), output);
  }

  // optional int32 bankercount = 27;
  if (has_bankercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->bankercount(), output);
  }

  // repeated int32 bankercountlist = 28;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->bankercountlist(i), output);
  }

  // optional string legalkey = 29;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->legalkey(), output);
  }

  // optional int32 robotbanuserid = 30;
  if (has_robotbanuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->robotbanuserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frameid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timemark(), target);
  }

  // repeated int32 situser = 5;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->situser(i), target);
  }

  // repeated int32 standuser = 6;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->standuser(i), target);
  }

  // optional int32 usernum = 7;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->usernum(), target);
  }

  // optional int32 bankerid = 8;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bankerid(), target);
  }

  // optional string bankerjetton = 9;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bankerjetton(), target);
  }

  // optional int32 maxuser = 10;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxuser(), target);
  }

  // optional string faceid = 11;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->faceid(), target);
  }

  // optional string bankername = 12;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bankername(), target);
  }

  // optional int32 applydrop = 13;
  if (has_applydrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->applydrop(), target);
  }

  // optional int32 baccatattype = 14;
  if (has_baccatattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->baccatattype(), target);
  }

  // optional int32 tabletype = 15;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tabletype(), target);
  }

  // optional int32 robotnum = 16;
  if (has_robotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->robotnum(), target);
  }

  // optional int32 pilecardcont = 17;
  if (has_pilecardcont()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->pilecardcont(), target);
  }

  // repeated int32 historylist = 18;
  for (int i = 0; i < this->historylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->historylist(i), target);
  }

  // repeated int32 xcardlist = 19;
  for (int i = 0; i < this->xcardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->xcardlist(i), target);
  }

  // optional int32 xpoint = 20;
  if (has_xpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->xpoint(), target);
  }

  // repeated int32 zcardlist = 21;
  for (int i = 0; i < this->zcardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->zcardlist(i), target);
  }

  // optional int32 zpoint = 22;
  if (has_zpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->zpoint(), target);
  }

  // repeated int32 bankerlist = 23;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->bankerlist(i), target);
  }

  // optional string bankerlimit = 24;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->bankerlimit(), target);
  }

  // optional int32 maxrobotnum = 25;
  if (has_maxrobotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->maxrobotnum(), target);
  }

  // optional int32 julebuid = 26;
  if (has_julebuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->julebuid(), target);
  }

  // optional int32 bankercount = 27;
  if (has_bankercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->bankercount(), target);
  }

  // repeated int32 bankercountlist = 28;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->bankercountlist(i), target);
  }

  // optional string legalkey = 29;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->legalkey(), target);
  }

  // optional int32 robotbanuserid = 30;
  if (has_robotbanuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->robotbanuserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 2;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 usernum = 7;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional int32 bankerid = 8;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bankerjetton = 9;
    if (has_bankerjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerjetton());
    }

    // optional int32 maxuser = 10;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional string faceid = 11;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

    // optional string bankername = 12;
    if (has_bankername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional int32 applydrop = 13;
    if (has_applydrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applydrop());
    }

    // optional int32 baccatattype = 14;
    if (has_baccatattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baccatattype());
    }

    // optional int32 tabletype = 15;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 robotnum = 16;
    if (has_robotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotnum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 pilecardcont = 17;
    if (has_pilecardcont()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pilecardcont());
    }

    // optional int32 xpoint = 20;
    if (has_xpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpoint());
    }

    // optional int32 zpoint = 22;
    if (has_zpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zpoint());
    }

    // optional string bankerlimit = 24;
    if (has_bankerlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerlimit());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 maxrobotnum = 25;
    if (has_maxrobotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrobotnum());
    }

    // optional int32 julebuid = 26;
    if (has_julebuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebuid());
    }

    // optional int32 bankercount = 27;
    if (has_bankercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankercount());
    }

    // optional string legalkey = 29;
    if (has_legalkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legalkey());
    }

    // optional int32 robotbanuserid = 30;
    if (has_robotbanuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotbanuserid());
    }

  }
  // repeated int32 situser = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->situser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->situser(i));
    }
    total_size += 1 * this->situser_size() + data_size;
  }

  // repeated int32 standuser = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 1 * this->standuser_size() + data_size;
  }

  // repeated int32 historylist = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->historylist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->historylist(i));
    }
    total_size += 2 * this->historylist_size() + data_size;
  }

  // repeated int32 xcardlist = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->xcardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->xcardlist(i));
    }
    total_size += 2 * this->xcardlist_size() + data_size;
  }

  // repeated int32 zcardlist = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->zcardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zcardlist(i));
    }
    total_size += 2 * this->zcardlist_size() + data_size;
  }

  // repeated int32 bankerlist = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankerlist(i));
    }
    total_size += 2 * this->bankerlist_size() + data_size;
  }

  // repeated int32 bankercountlist = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankercountlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankercountlist(i));
    }
    total_size += 2 * this->bankercountlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatinfo::MergeFrom(const barccatatinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  historylist_.MergeFrom(from.historylist_);
  xcardlist_.MergeFrom(from.xcardlist_);
  zcardlist_.MergeFrom(from.zcardlist_);
  bankerlist_.MergeFrom(from.bankerlist_);
  bankercountlist_.MergeFrom(from.bankercountlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bankerjetton()) {
      set_bankerjetton(from.bankerjetton());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_applydrop()) {
      set_applydrop(from.applydrop());
    }
    if (from.has_baccatattype()) {
      set_baccatattype(from.baccatattype());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_robotnum()) {
      set_robotnum(from.robotnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pilecardcont()) {
      set_pilecardcont(from.pilecardcont());
    }
    if (from.has_xpoint()) {
      set_xpoint(from.xpoint());
    }
    if (from.has_zpoint()) {
      set_zpoint(from.zpoint());
    }
    if (from.has_bankerlimit()) {
      set_bankerlimit(from.bankerlimit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_maxrobotnum()) {
      set_maxrobotnum(from.maxrobotnum());
    }
    if (from.has_julebuid()) {
      set_julebuid(from.julebuid());
    }
    if (from.has_bankercount()) {
      set_bankercount(from.bankercount());
    }
    if (from.has_legalkey()) {
      set_legalkey(from.legalkey());
    }
    if (from.has_robotbanuserid()) {
      set_robotbanuserid(from.robotbanuserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatinfo::CopyFrom(const barccatatinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatinfo::IsInitialized() const {

  return true;
}

void barccatatinfo::Swap(barccatatinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(frameid_, other->frameid_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(usernum_, other->usernum_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankerjetton_, other->bankerjetton_);
    std::swap(maxuser_, other->maxuser_);
    std::swap(faceid_, other->faceid_);
    std::swap(bankername_, other->bankername_);
    std::swap(applydrop_, other->applydrop_);
    std::swap(baccatattype_, other->baccatattype_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(robotnum_, other->robotnum_);
    std::swap(pilecardcont_, other->pilecardcont_);
    historylist_.Swap(&other->historylist_);
    xcardlist_.Swap(&other->xcardlist_);
    std::swap(xpoint_, other->xpoint_);
    zcardlist_.Swap(&other->zcardlist_);
    std::swap(zpoint_, other->zpoint_);
    bankerlist_.Swap(&other->bankerlist_);
    std::swap(bankerlimit_, other->bankerlimit_);
    std::swap(maxrobotnum_, other->maxrobotnum_);
    std::swap(julebuid_, other->julebuid_);
    std::swap(bankercount_, other->bankercount_);
    bankercountlist_.Swap(&other->bankercountlist_);
    std::swap(legalkey_, other->legalkey_);
    std::swap(robotbanuserid_, other->robotbanuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatinfo_descriptor_;
  metadata.reflection = barccatatinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatathistory::kXpointFieldNumber;
const int barccatathistory::kZPointFieldNumber;
const int barccatathistory::kWinResultFieldNumber;
const int barccatathistory::kDuiziFieldNumber;
const int barccatathistory::kRecordidentificationFieldNumber;
#endif  // !_MSC_VER

barccatathistory::barccatathistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatathistory::InitAsDefaultInstance() {
}

barccatathistory::barccatathistory(const barccatathistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatathistory::SharedCtor() {
  _cached_size_ = 0;
  xpoint_ = 0;
  zpoint_ = 0;
  winresult_ = 0;
  duizi_ = 0;
  recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatathistory::~barccatathistory() {
  SharedDtor();
}

void barccatathistory::SharedDtor() {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    delete recordidentification_;
  }
  if (this != default_instance_) {
  }
}

void barccatathistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatathistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatathistory_descriptor_;
}

const barccatathistory& barccatathistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatathistory* barccatathistory::default_instance_ = NULL;

barccatathistory* barccatathistory::New() const {
  return new barccatathistory;
}

void barccatathistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpoint_ = 0;
    zpoint_ = 0;
    winresult_ = 0;
    duizi_ = 0;
    if (has_recordidentification()) {
      if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
        recordidentification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatathistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Xpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpoint_)));
          set_has_xpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ZPoint;
        break;
      }

      // optional int32 ZPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zpoint_)));
          set_has_zpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WinResult;
        break;
      }

      // optional int32 WinResult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winresult_)));
          set_has_winresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Duizi;
        break;
      }

      // optional int32 Duizi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Duizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duizi_)));
          set_has_duizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recordidentification;
        break;
      }

      // optional string recordidentification = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordidentification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification().data(), this->recordidentification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatathistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Xpoint = 1;
  if (has_xpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xpoint(), output);
  }

  // optional int32 ZPoint = 2;
  if (has_zpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zpoint(), output);
  }

  // optional int32 WinResult = 3;
  if (has_winresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winresult(), output);
  }

  // optional int32 Duizi = 4;
  if (has_duizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duizi(), output);
  }

  // optional string recordidentification = 5;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recordidentification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatathistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Xpoint = 1;
  if (has_xpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xpoint(), target);
  }

  // optional int32 ZPoint = 2;
  if (has_zpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zpoint(), target);
  }

  // optional int32 WinResult = 3;
  if (has_winresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winresult(), target);
  }

  // optional int32 Duizi = 4;
  if (has_duizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duizi(), target);
  }

  // optional string recordidentification = 5;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recordidentification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatathistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Xpoint = 1;
    if (has_xpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpoint());
    }

    // optional int32 ZPoint = 2;
    if (has_zpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zpoint());
    }

    // optional int32 WinResult = 3;
    if (has_winresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winresult());
    }

    // optional int32 Duizi = 4;
    if (has_duizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duizi());
    }

    // optional string recordidentification = 5;
    if (has_recordidentification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordidentification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatathistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatathistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatathistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatathistory::MergeFrom(const barccatathistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpoint()) {
      set_xpoint(from.xpoint());
    }
    if (from.has_zpoint()) {
      set_zpoint(from.zpoint());
    }
    if (from.has_winresult()) {
      set_winresult(from.winresult());
    }
    if (from.has_duizi()) {
      set_duizi(from.duizi());
    }
    if (from.has_recordidentification()) {
      set_recordidentification(from.recordidentification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatathistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatathistory::CopyFrom(const barccatathistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatathistory::IsInitialized() const {

  return true;
}

void barccatathistory::Swap(barccatathistory* other) {
  if (other != this) {
    std::swap(xpoint_, other->xpoint_);
    std::swap(zpoint_, other->zpoint_);
    std::swap(winresult_, other->winresult_);
    std::swap(duizi_, other->duizi_);
    std::swap(recordidentification_, other->recordidentification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatathistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatathistory_descriptor_;
  metadata.reflection = barccatathistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatatcard::kPokerFieldNumber;
#endif  // !_MSC_VER

barccatatcard::barccatatcard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatcard::InitAsDefaultInstance() {
}

barccatatcard::barccatatcard(const barccatatcard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatcard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatcard::~barccatatcard() {
  SharedDtor();
}

void barccatatcard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barccatatcard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatcard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatcard_descriptor_;
}

const barccatatcard& barccatatcard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatcard* barccatatcard::default_instance_ = NULL;

barccatatcard* barccatatcard::New() const {
  return new barccatatcard;
}

void barccatatcard::Clear() {
  poker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 poker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_poker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_poker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_poker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 poker = 1;
  for (int i = 0; i < this->poker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->poker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatcard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 poker = 1;
  for (int i = 0; i < this->poker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->poker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatcard::ByteSize() const {
  int total_size = 0;

  // repeated int32 poker = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->poker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->poker(i));
    }
    total_size += 1 * this->poker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatcard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatcard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatcard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatcard::MergeFrom(const barccatatcard& from) {
  GOOGLE_CHECK_NE(&from, this);
  poker_.MergeFrom(from.poker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatcard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatcard::CopyFrom(const barccatatcard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatcard::IsInitialized() const {

  return true;
}

void barccatatcard::Swap(barccatatcard* other) {
  if (other != this) {
    poker_.Swap(&other->poker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatcard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatcard_descriptor_;
  metadata.reflection = barccatatcard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatatpouerjetton::kUseridFieldNumber;
const int barccatatpouerjetton::kJettonFieldNumber;
const int barccatatpouerjetton::kPourtypeFieldNumber;
#endif  // !_MSC_VER

barccatatpouerjetton::barccatatpouerjetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatpouerjetton::InitAsDefaultInstance() {
}

barccatatpouerjetton::barccatatpouerjetton(const barccatatpouerjetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatpouerjetton::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatpouerjetton::~barccatatpouerjetton() {
  SharedDtor();
}

void barccatatpouerjetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barccatatpouerjetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatpouerjetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatpouerjetton_descriptor_;
}

const barccatatpouerjetton& barccatatpouerjetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatpouerjetton* barccatatpouerjetton::default_instance_ = NULL;

barccatatpouerjetton* barccatatpouerjetton::New() const {
  return new barccatatpouerjetton;
}

void barccatatpouerjetton::Clear() {
  userid_.Clear();
  jetton_.Clear();
  pourtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatpouerjetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_userid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_userid;
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // repeated int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        if (input->ExpectTag(24)) goto parse_pourtype;
        break;
      }

      // repeated int32 pourtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pourtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pourtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pourtype;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatpouerjetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->userid(i), output);
  }

  // repeated int32 jetton = 2;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->jetton(i), output);
  }

  // repeated int32 pourtype = 3;
  for (int i = 0; i < this->pourtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pourtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatpouerjetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->userid(i), target);
  }

  // repeated int32 jetton = 2;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->jetton(i), target);
  }

  // repeated int32 pourtype = 3;
  for (int i = 0; i < this->pourtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pourtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatpouerjetton::ByteSize() const {
  int total_size = 0;

  // repeated int32 userid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->userid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userid(i));
    }
    total_size += 1 * this->userid_size() + data_size;
  }

  // repeated int32 jetton = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated int32 pourtype = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pourtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pourtype(i));
    }
    total_size += 1 * this->pourtype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatpouerjetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatpouerjetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatpouerjetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatpouerjetton::MergeFrom(const barccatatpouerjetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_.MergeFrom(from.userid_);
  jetton_.MergeFrom(from.jetton_);
  pourtype_.MergeFrom(from.pourtype_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatpouerjetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatpouerjetton::CopyFrom(const barccatatpouerjetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatpouerjetton::IsInitialized() const {

  return true;
}

void barccatatpouerjetton::Swap(barccatatpouerjetton* other) {
  if (other != this) {
    userid_.Swap(&other->userid_);
    jetton_.Swap(&other->jetton_);
    pourtype_.Swap(&other->pourtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatpouerjetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatpouerjetton_descriptor_;
  metadata.reflection = barccatatpouerjetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatatjettonrecordlist::kJettonFieldNumber;
const int barccatatjettonrecordlist::kWinconditionFieldNumber;
#endif  // !_MSC_VER

barccatatjettonrecordlist::barccatatjettonrecordlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatjettonrecordlist::InitAsDefaultInstance() {
}

barccatatjettonrecordlist::barccatatjettonrecordlist(const barccatatjettonrecordlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatjettonrecordlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatjettonrecordlist::~barccatatjettonrecordlist() {
  SharedDtor();
}

void barccatatjettonrecordlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void barccatatjettonrecordlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatjettonrecordlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatjettonrecordlist_descriptor_;
}

const barccatatjettonrecordlist& barccatatjettonrecordlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatjettonrecordlist* barccatatjettonrecordlist::default_instance_ = NULL;

barccatatjettonrecordlist* barccatatjettonrecordlist::New() const {
  return new barccatatjettonrecordlist;
}

void barccatatjettonrecordlist::Clear() {
  jetton_.Clear();
  wincondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatjettonrecordlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_jetton;
        if (input->ExpectTag(16)) goto parse_wincondition;
        break;
      }

      // repeated int32 wincondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_wincondition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wincondition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wincondition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatjettonrecordlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jetton(i), output);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->wincondition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatjettonrecordlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jetton(i), target);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->wincondition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatjettonrecordlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 jetton = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated int32 wincondition = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->wincondition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wincondition(i));
    }
    total_size += 1 * this->wincondition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatjettonrecordlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatjettonrecordlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatjettonrecordlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatjettonrecordlist::MergeFrom(const barccatatjettonrecordlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  jetton_.MergeFrom(from.jetton_);
  wincondition_.MergeFrom(from.wincondition_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatjettonrecordlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatjettonrecordlist::CopyFrom(const barccatatjettonrecordlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatjettonrecordlist::IsInitialized() const {

  return true;
}

void barccatatjettonrecordlist::Swap(barccatatjettonrecordlist* other) {
  if (other != this) {
    jetton_.Swap(&other->jetton_);
    wincondition_.Swap(&other->wincondition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatjettonrecordlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatjettonrecordlist_descriptor_;
  metadata.reflection = barccatatjettonrecordlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatatjettonrecorinfo::kUseridFieldNumber;
const int barccatatjettonrecorinfo::kJettonFieldNumber;
const int barccatatjettonrecorinfo::kWinnumFieldNumber;
const int barccatatjettonrecorinfo::kJifenFieldNumber;
const int barccatatjettonrecorinfo::kNicknameFieldNumber;
const int barccatatjettonrecorinfo::kFacenameFieldNumber;
#endif  // !_MSC_VER

barccatatjettonrecorinfo::barccatatjettonrecorinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatjettonrecorinfo::InitAsDefaultInstance() {
}

barccatatjettonrecorinfo::barccatatjettonrecorinfo(const barccatatjettonrecorinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatjettonrecorinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  jetton_ = 0;
  winnum_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatjettonrecorinfo::~barccatatjettonrecorinfo() {
  SharedDtor();
}

void barccatatjettonrecorinfo::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (this != default_instance_) {
  }
}

void barccatatjettonrecorinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatjettonrecorinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatjettonrecorinfo_descriptor_;
}

const barccatatjettonrecorinfo& barccatatjettonrecorinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatjettonrecorinfo* barccatatjettonrecorinfo::default_instance_ = NULL;

barccatatjettonrecorinfo* barccatatjettonrecorinfo::New() const {
  return new barccatatjettonrecorinfo;
}

void barccatatjettonrecorinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    jetton_ = 0;
    winnum_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatjettonrecorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jifen;
        break;
      }

      // optional string jifen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facename;
        break;
      }

      // optional string facename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatjettonrecorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jetton(), output);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winnum(), output);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jifen(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->facename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatjettonrecorinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jetton(), target);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winnum(), target);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jifen(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->facename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatjettonrecorinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 jetton = 2;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 winnum = 3;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional string jifen = 4;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string facename = 6;
    if (has_facename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatjettonrecorinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatjettonrecorinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatjettonrecorinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatjettonrecorinfo::MergeFrom(const barccatatjettonrecorinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatjettonrecorinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatjettonrecorinfo::CopyFrom(const barccatatjettonrecorinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatjettonrecorinfo::IsInitialized() const {

  return true;
}

void barccatatjettonrecorinfo::Swap(barccatatjettonrecorinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(jetton_, other->jetton_);
    std::swap(winnum_, other->winnum_);
    std::swap(jifen_, other->jifen_);
    std::swap(nickname_, other->nickname_);
    std::swap(facename_, other->facename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatjettonrecorinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatjettonrecorinfo_descriptor_;
  metadata.reflection = barccatatjettonrecorinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int barccatatgamehistoryinfo::kTableidFieldNumber;
const int barccatatgamehistoryinfo::kTablenameFieldNumber;
const int barccatatgamehistoryinfo::kMagnificationFieldNumber;
const int barccatatgamehistoryinfo::kStateFieldNumber;
const int barccatatgamehistoryinfo::kTimemarkFieldNumber;
const int barccatatgamehistoryinfo::kRecordidentificationFieldNumber;
const int barccatatgamehistoryinfo::kXpointFieldNumber;
const int barccatatgamehistoryinfo::kZPointFieldNumber;
const int barccatatgamehistoryinfo::kWinResultFieldNumber;
const int barccatatgamehistoryinfo::kDuiziFieldNumber;
const int barccatatgamehistoryinfo::kLimitredFieldNumber;
#endif  // !_MSC_VER

barccatatgamehistoryinfo::barccatatgamehistoryinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void barccatatgamehistoryinfo::InitAsDefaultInstance() {
}

barccatatgamehistoryinfo::barccatatgamehistoryinfo(const barccatatgamehistoryinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void barccatatgamehistoryinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magnification_ = 0;
  state_ = 0;
  timemark_ = 0;
  limitred_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

barccatatgamehistoryinfo::~barccatatgamehistoryinfo() {
  SharedDtor();
}

void barccatatgamehistoryinfo::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void barccatatgamehistoryinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* barccatatgamehistoryinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return barccatatgamehistoryinfo_descriptor_;
}

const barccatatgamehistoryinfo& barccatatgamehistoryinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fbarccatat_2eproto();
  return *default_instance_;
}

barccatatgamehistoryinfo* barccatatgamehistoryinfo::default_instance_ = NULL;

barccatatgamehistoryinfo* barccatatgamehistoryinfo::New() const {
  return new barccatatgamehistoryinfo;
}

void barccatatgamehistoryinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    magnification_ = 0;
    state_ = 0;
    timemark_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    limitred_ = 0;
  }
  recordidentification_.Clear();
  xpoint_.Clear();
  zpoint_.Clear();
  winresult_.Clear();
  duizi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool barccatatgamehistoryinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional string tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_magnification;
        break;
      }

      // optional int32 magnification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magnification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magnification_)));
          set_has_magnification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        break;
      }

      // repeated string recordidentification = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordidentification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification(this->recordidentification_size() - 1).data(),
            this->recordidentification(this->recordidentification_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        if (input->ExpectTag(56)) goto parse_Xpoint;
        break;
      }

      // repeated int32 Xpoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Xpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_xpoint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xpoint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Xpoint;
        if (input->ExpectTag(64)) goto parse_ZPoint;
        break;
      }

      // repeated int32 ZPoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_zpoint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zpoint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ZPoint;
        if (input->ExpectTag(72)) goto parse_WinResult;
        break;
      }

      // repeated int32 WinResult = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_winresult())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winresult())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WinResult;
        if (input->ExpectTag(80)) goto parse_Duizi;
        break;
      }

      // repeated int32 Duizi = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Duizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_duizi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_duizi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Duizi;
        if (input->ExpectTag(88)) goto parse_limitred;
        break;
      }

      // optional int32 limitred = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitred_)));
          set_has_limitred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void barccatatgamehistoryinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->magnification(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recordidentification(i).data(), this->recordidentification(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recordidentification(i), output);
  }

  // repeated int32 Xpoint = 7;
  for (int i = 0; i < this->xpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->xpoint(i), output);
  }

  // repeated int32 ZPoint = 8;
  for (int i = 0; i < this->zpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->zpoint(i), output);
  }

  // repeated int32 WinResult = 9;
  for (int i = 0; i < this->winresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->winresult(i), output);
  }

  // repeated int32 Duizi = 10;
  for (int i = 0; i < this->duizi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->duizi(i), output);
  }

  // optional int32 limitred = 11;
  if (has_limitred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->limitred(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* barccatatgamehistoryinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->magnification(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification(i).data(), this->recordidentification(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->recordidentification(i), target);
  }

  // repeated int32 Xpoint = 7;
  for (int i = 0; i < this->xpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->xpoint(i), target);
  }

  // repeated int32 ZPoint = 8;
  for (int i = 0; i < this->zpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->zpoint(i), target);
  }

  // repeated int32 WinResult = 9;
  for (int i = 0; i < this->winresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->winresult(i), target);
  }

  // repeated int32 Duizi = 10;
  for (int i = 0; i < this->duizi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->duizi(i), target);
  }

  // optional int32 limitred = 11;
  if (has_limitred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->limitred(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int barccatatgamehistoryinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional string tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional int32 magnification = 3;
    if (has_magnification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magnification());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 limitred = 11;
    if (has_limitred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitred());
    }

  }
  // repeated string recordidentification = 6;
  total_size += 1 * this->recordidentification_size();
  for (int i = 0; i < this->recordidentification_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recordidentification(i));
  }

  // repeated int32 Xpoint = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->xpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->xpoint(i));
    }
    total_size += 1 * this->xpoint_size() + data_size;
  }

  // repeated int32 ZPoint = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->zpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zpoint(i));
    }
    total_size += 1 * this->zpoint_size() + data_size;
  }

  // repeated int32 WinResult = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->winresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winresult(i));
    }
    total_size += 1 * this->winresult_size() + data_size;
  }

  // repeated int32 Duizi = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->duizi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->duizi(i));
    }
    total_size += 1 * this->duizi_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void barccatatgamehistoryinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const barccatatgamehistoryinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const barccatatgamehistoryinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void barccatatgamehistoryinfo::MergeFrom(const barccatatgamehistoryinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordidentification_.MergeFrom(from.recordidentification_);
  xpoint_.MergeFrom(from.xpoint_);
  zpoint_.MergeFrom(from.zpoint_);
  winresult_.MergeFrom(from.winresult_);
  duizi_.MergeFrom(from.duizi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_magnification()) {
      set_magnification(from.magnification());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_limitred()) {
      set_limitred(from.limitred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void barccatatgamehistoryinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void barccatatgamehistoryinfo::CopyFrom(const barccatatgamehistoryinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool barccatatgamehistoryinfo::IsInitialized() const {

  return true;
}

void barccatatgamehistoryinfo::Swap(barccatatgamehistoryinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(magnification_, other->magnification_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    recordidentification_.Swap(&other->recordidentification_);
    xpoint_.Swap(&other->xpoint_);
    zpoint_.Swap(&other->zpoint_);
    winresult_.Swap(&other->winresult_);
    duizi_.Swap(&other->duizi_);
    std::swap(limitred_, other->limitred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata barccatatgamehistoryinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = barccatatgamehistoryinfo_descriptor_;
  metadata.reflection = barccatatgamehistoryinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
