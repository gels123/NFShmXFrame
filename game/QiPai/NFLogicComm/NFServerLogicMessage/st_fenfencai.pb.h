// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_fenfencai.proto

#ifndef PROTOBUF_st_5ffenfencai_2eproto__INCLUDED
#define PROTOBUF_st_5ffenfencai_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5ffenfencai_2eproto();
void protobuf_AssignDesc_st_5ffenfencai_2eproto();
void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

class fenfencaijetton;
class fenfencaihangupinfo;
class fenfencaiplayer;
class fenfencaihistory;
class fenfencaiinfo;
class fenfencaijettonrecorinfo;
class fenfencaiuseridhistory;

// ===================================================================

class fenfencaijetton : public ::google::protobuf::Message {
 public:
  fenfencaijetton();
  virtual ~fenfencaijetton();

  fenfencaijetton(const fenfencaijetton& from);

  inline fenfencaijetton& operator=(const fenfencaijetton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenfencaijetton& default_instance();

  void Swap(fenfencaijetton* other);

  // implements Message ----------------------------------------------

  fenfencaijetton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenfencaijetton& from);
  void MergeFrom(const fenfencaijetton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourtype = 2;
  inline bool has_pourtype() const;
  inline void clear_pourtype();
  static const int kPourtypeFieldNumber = 2;
  inline ::google::protobuf::int32 pourtype() const;
  inline void set_pourtype(::google::protobuf::int32 value);

  // optional int32 jetton = 3;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 3;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.fenfencaijetton)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourtype();
  inline void clear_has_pourtype();
  inline void set_has_jetton();
  inline void clear_has_jetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourtype_;
  ::google::protobuf::int32 jetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ffenfencai_2eproto();
  friend void protobuf_AssignDesc_st_5ffenfencai_2eproto();
  friend void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

  void InitAsDefaultInstance();
  static fenfencaijetton* default_instance_;
};
// -------------------------------------------------------------------

class fenfencaihangupinfo : public ::google::protobuf::Message {
 public:
  fenfencaihangupinfo();
  virtual ~fenfencaihangupinfo();

  fenfencaihangupinfo(const fenfencaihangupinfo& from);

  inline fenfencaihangupinfo& operator=(const fenfencaihangupinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenfencaihangupinfo& default_instance();

  void Swap(fenfencaihangupinfo* other);

  // implements Message ----------------------------------------------

  fenfencaihangupinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenfencaihangupinfo& from);
  void MergeFrom(const fenfencaihangupinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 losenum = 1;
  inline bool has_losenum() const;
  inline void clear_losenum();
  static const int kLosenumFieldNumber = 1;
  inline ::google::protobuf::int32 losenum() const;
  inline void set_losenum(::google::protobuf::int32 value);

  // optional int32 winnum = 2;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 2;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional int32 playNum = 3;
  inline bool has_playnum() const;
  inline void clear_playnum();
  static const int kPlayNumFieldNumber = 3;
  inline ::google::protobuf::int32 playnum() const;
  inline void set_playnum(::google::protobuf::int32 value);

  // optional int32 playtype = 4;
  inline bool has_playtype() const;
  inline void clear_playtype();
  static const int kPlaytypeFieldNumber = 4;
  inline ::google::protobuf::int32 playtype() const;
  inline void set_playtype(::google::protobuf::int32 value);

  // optional int32 moduletype = 5;
  inline bool has_moduletype() const;
  inline void clear_moduletype();
  static const int kModuletypeFieldNumber = 5;
  inline ::google::protobuf::int32 moduletype() const;
  inline void set_moduletype(::google::protobuf::int32 value);

  // repeated string msgInfo = 6;
  inline int msginfo_size() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 6;
  inline const ::std::string& msginfo(int index) const;
  inline ::std::string* mutable_msginfo(int index);
  inline void set_msginfo(int index, const ::std::string& value);
  inline void set_msginfo(int index, const char* value);
  inline void set_msginfo(int index, const char* value, size_t size);
  inline ::std::string* add_msginfo();
  inline void add_msginfo(const ::std::string& value);
  inline void add_msginfo(const char* value);
  inline void add_msginfo(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msginfo();

  // @@protoc_insertion_point(class_scope:progame.fenfencaihangupinfo)
 private:
  inline void set_has_losenum();
  inline void clear_has_losenum();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_playnum();
  inline void clear_has_playnum();
  inline void set_has_playtype();
  inline void clear_has_playtype();
  inline void set_has_moduletype();
  inline void clear_has_moduletype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 losenum_;
  ::google::protobuf::int32 winnum_;
  ::google::protobuf::int32 playnum_;
  ::google::protobuf::int32 playtype_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msginfo_;
  ::google::protobuf::int32 moduletype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ffenfencai_2eproto();
  friend void protobuf_AssignDesc_st_5ffenfencai_2eproto();
  friend void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

  void InitAsDefaultInstance();
  static fenfencaihangupinfo* default_instance_;
};
// -------------------------------------------------------------------

class fenfencaiplayer : public ::google::protobuf::Message {
 public:
  fenfencaiplayer();
  virtual ~fenfencaiplayer();

  fenfencaiplayer(const fenfencaiplayer& from);

  inline fenfencaiplayer& operator=(const fenfencaiplayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenfencaiplayer& default_instance();

  void Swap(fenfencaiplayer* other);

  // implements Message ----------------------------------------------

  fenfencaiplayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenfencaiplayer& from);
  void MergeFrom(const fenfencaiplayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 Choice = 2;
  inline bool has_choice() const;
  inline void clear_choice();
  static const int kChoiceFieldNumber = 2;
  inline ::google::protobuf::int32 choice() const;
  inline void set_choice(::google::protobuf::int32 value);

  // optional int32 nopournum = 3;
  inline bool has_nopournum() const;
  inline void clear_nopournum();
  static const int kNopournumFieldNumber = 3;
  inline ::google::protobuf::int32 nopournum() const;
  inline void set_nopournum(::google::protobuf::int32 value);

  // repeated int32 pour_20 = 4;
  inline int pour_20_size() const;
  inline void clear_pour_20();
  static const int kPour20FieldNumber = 4;
  inline ::google::protobuf::int32 pour_20(int index) const;
  inline void set_pour_20(int index, ::google::protobuf::int32 value);
  inline void add_pour_20(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pour_20() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pour_20();

  // repeated int32 win_20 = 5;
  inline int win_20_size() const;
  inline void clear_win_20();
  static const int kWin20FieldNumber = 5;
  inline ::google::protobuf::int32 win_20(int index) const;
  inline void set_win_20(int index, ::google::protobuf::int32 value);
  inline void add_win_20(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_20() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_20();

  // optional int32 hangupstate = 6;
  inline bool has_hangupstate() const;
  inline void clear_hangupstate();
  static const int kHangupstateFieldNumber = 6;
  inline ::google::protobuf::int32 hangupstate() const;
  inline void set_hangupstate(::google::protobuf::int32 value);

  // optional .progame.fenfencaihangupinfo gj = 7;
  inline bool has_gj() const;
  inline void clear_gj();
  static const int kGjFieldNumber = 7;
  inline const ::progame::fenfencaihangupinfo& gj() const;
  inline ::progame::fenfencaihangupinfo* mutable_gj();
  inline ::progame::fenfencaihangupinfo* release_gj();
  inline void set_allocated_gj(::progame::fenfencaihangupinfo* gj);

  // optional int32 currentWin = 8;
  inline bool has_currentwin() const;
  inline void clear_currentwin();
  static const int kCurrentWinFieldNumber = 8;
  inline ::google::protobuf::int32 currentwin() const;
  inline void set_currentwin(::google::protobuf::int32 value);

  // optional int32 currentplaynum = 9;
  inline bool has_currentplaynum() const;
  inline void clear_currentplaynum();
  static const int kCurrentplaynumFieldNumber = 9;
  inline ::google::protobuf::int32 currentplaynum() const;
  inline void set_currentplaynum(::google::protobuf::int32 value);

  // optional int32 currentinumber = 10;
  inline bool has_currentinumber() const;
  inline void clear_currentinumber();
  static const int kCurrentinumberFieldNumber = 10;
  inline ::google::protobuf::int32 currentinumber() const;
  inline void set_currentinumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.fenfencaiplayer)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_choice();
  inline void clear_has_choice();
  inline void set_has_nopournum();
  inline void clear_has_nopournum();
  inline void set_has_hangupstate();
  inline void clear_has_hangupstate();
  inline void set_has_gj();
  inline void clear_has_gj();
  inline void set_has_currentwin();
  inline void clear_has_currentwin();
  inline void set_has_currentplaynum();
  inline void clear_has_currentplaynum();
  inline void set_has_currentinumber();
  inline void clear_has_currentinumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 choice_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pour_20_;
  ::google::protobuf::int32 nopournum_;
  ::google::protobuf::int32 hangupstate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_20_;
  ::progame::fenfencaihangupinfo* gj_;
  ::google::protobuf::int32 currentwin_;
  ::google::protobuf::int32 currentplaynum_;
  ::google::protobuf::int32 currentinumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ffenfencai_2eproto();
  friend void protobuf_AssignDesc_st_5ffenfencai_2eproto();
  friend void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

  void InitAsDefaultInstance();
  static fenfencaiplayer* default_instance_;
};
// -------------------------------------------------------------------

class fenfencaihistory : public ::google::protobuf::Message {
 public:
  fenfencaihistory();
  virtual ~fenfencaihistory();

  fenfencaihistory(const fenfencaihistory& from);

  inline fenfencaihistory& operator=(const fenfencaihistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenfencaihistory& default_instance();

  void Swap(fenfencaihistory* other);

  // implements Message ----------------------------------------------

  fenfencaihistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenfencaihistory& from);
  void MergeFrom(const fenfencaihistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string issuenumber = 3;
  inline bool has_issuenumber() const;
  inline void clear_issuenumber();
  static const int kIssuenumberFieldNumber = 3;
  inline const ::std::string& issuenumber() const;
  inline void set_issuenumber(const ::std::string& value);
  inline void set_issuenumber(const char* value);
  inline void set_issuenumber(const char* value, size_t size);
  inline ::std::string* mutable_issuenumber();
  inline ::std::string* release_issuenumber();
  inline void set_allocated_issuenumber(::std::string* issuenumber);

  // optional string awardnumber = 4;
  inline bool has_awardnumber() const;
  inline void clear_awardnumber();
  static const int kAwardnumberFieldNumber = 4;
  inline const ::std::string& awardnumber() const;
  inline void set_awardnumber(const ::std::string& value);
  inline void set_awardnumber(const char* value);
  inline void set_awardnumber(const char* value, size_t size);
  inline ::std::string* mutable_awardnumber();
  inline ::std::string* release_awardnumber();
  inline void set_allocated_awardnumber(::std::string* awardnumber);

  // optional string awardresult = 5;
  inline bool has_awardresult() const;
  inline void clear_awardresult();
  static const int kAwardresultFieldNumber = 5;
  inline const ::std::string& awardresult() const;
  inline void set_awardresult(const ::std::string& value);
  inline void set_awardresult(const char* value);
  inline void set_awardresult(const char* value, size_t size);
  inline ::std::string* mutable_awardresult();
  inline ::std::string* release_awardresult();
  inline void set_allocated_awardresult(::std::string* awardresult);

  // @@protoc_insertion_point(class_scope:progame.fenfencaihistory)
 private:
  inline void set_has_issuenumber();
  inline void clear_has_issuenumber();
  inline void set_has_awardnumber();
  inline void clear_has_awardnumber();
  inline void set_has_awardresult();
  inline void clear_has_awardresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* issuenumber_;
  ::std::string* awardnumber_;
  ::std::string* awardresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ffenfencai_2eproto();
  friend void protobuf_AssignDesc_st_5ffenfencai_2eproto();
  friend void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

  void InitAsDefaultInstance();
  static fenfencaihistory* default_instance_;
};
// -------------------------------------------------------------------

class fenfencaiinfo : public ::google::protobuf::Message {
 public:
  fenfencaiinfo();
  virtual ~fenfencaiinfo();

  fenfencaiinfo(const fenfencaiinfo& from);

  inline fenfencaiinfo& operator=(const fenfencaiinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenfencaiinfo& default_instance();

  void Swap(fenfencaiinfo* other);

  // implements Message ----------------------------------------------

  fenfencaiinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenfencaiinfo& from);
  void MergeFrom(const fenfencaiinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 3;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 3;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated int32 situser = 4;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 4;
  inline ::google::protobuf::int32 situser(int index) const;
  inline void set_situser(int index, ::google::protobuf::int32 value);
  inline void add_situser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      situser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_situser();

  // repeated int32 bankerlist = 5;
  inline int bankerlist_size() const;
  inline void clear_bankerlist();
  static const int kBankerlistFieldNumber = 5;
  inline ::google::protobuf::int32 bankerlist(int index) const;
  inline void set_bankerlist(int index, ::google::protobuf::int32 value);
  inline void add_bankerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bankerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bankerlist();

  // repeated .progame.fenfencaiplayer standuser = 6;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 6;
  inline const ::progame::fenfencaiplayer& standuser(int index) const;
  inline ::progame::fenfencaiplayer* mutable_standuser(int index);
  inline ::progame::fenfencaiplayer* add_standuser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::fenfencaiplayer >&
      standuser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::fenfencaiplayer >*
      mutable_standuser();

  // optional int32 bankerid = 7;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankeridFieldNumber = 7;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // optional string bankerjetton = 8;
  inline bool has_bankerjetton() const;
  inline void clear_bankerjetton();
  static const int kBankerjettonFieldNumber = 8;
  inline const ::std::string& bankerjetton() const;
  inline void set_bankerjetton(const ::std::string& value);
  inline void set_bankerjetton(const char* value);
  inline void set_bankerjetton(const char* value, size_t size);
  inline ::std::string* mutable_bankerjetton();
  inline ::std::string* release_bankerjetton();
  inline void set_allocated_bankerjetton(::std::string* bankerjetton);

  // optional string bankername = 9;
  inline bool has_bankername() const;
  inline void clear_bankername();
  static const int kBankernameFieldNumber = 9;
  inline const ::std::string& bankername() const;
  inline void set_bankername(const ::std::string& value);
  inline void set_bankername(const char* value);
  inline void set_bankername(const char* value, size_t size);
  inline ::std::string* mutable_bankername();
  inline ::std::string* release_bankername();
  inline void set_allocated_bankername(::std::string* bankername);

  // optional int32 maxuser = 10;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 10;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // optional int32 applydrop = 11;
  inline bool has_applydrop() const;
  inline void clear_applydrop();
  static const int kApplydropFieldNumber = 11;
  inline ::google::protobuf::int32 applydrop() const;
  inline void set_applydrop(::google::protobuf::int32 value);

  // optional int32 tabletype = 13;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 13;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional string bankerlimit = 14;
  inline bool has_bankerlimit() const;
  inline void clear_bankerlimit();
  static const int kBankerlimitFieldNumber = 14;
  inline const ::std::string& bankerlimit() const;
  inline void set_bankerlimit(const ::std::string& value);
  inline void set_bankerlimit(const char* value);
  inline void set_bankerlimit(const char* value, size_t size);
  inline ::std::string* mutable_bankerlimit();
  inline ::std::string* release_bankerlimit();
  inline void set_allocated_bankerlimit(::std::string* bankerlimit);

  // optional int32 maxrobotnum = 15;
  inline bool has_maxrobotnum() const;
  inline void clear_maxrobotnum();
  static const int kMaxrobotnumFieldNumber = 15;
  inline ::google::protobuf::int32 maxrobotnum() const;
  inline void set_maxrobotnum(::google::protobuf::int32 value);

  // optional int32 bankercount = 16;
  inline bool has_bankercount() const;
  inline void clear_bankercount();
  static const int kBankercountFieldNumber = 16;
  inline ::google::protobuf::int32 bankercount() const;
  inline void set_bankercount(::google::protobuf::int32 value);

  // optional int32 robotbanuserid = 17;
  inline bool has_robotbanuserid() const;
  inline void clear_robotbanuserid();
  static const int kRobotbanuseridFieldNumber = 17;
  inline ::google::protobuf::int32 robotbanuserid() const;
  inline void set_robotbanuserid(::google::protobuf::int32 value);

  // optional string issuenumber = 18;
  inline bool has_issuenumber() const;
  inline void clear_issuenumber();
  static const int kIssuenumberFieldNumber = 18;
  inline const ::std::string& issuenumber() const;
  inline void set_issuenumber(const ::std::string& value);
  inline void set_issuenumber(const char* value);
  inline void set_issuenumber(const char* value, size_t size);
  inline ::std::string* mutable_issuenumber();
  inline ::std::string* release_issuenumber();
  inline void set_allocated_issuenumber(::std::string* issuenumber);

  // optional string latelynumber = 19;
  inline bool has_latelynumber() const;
  inline void clear_latelynumber();
  static const int kLatelynumberFieldNumber = 19;
  inline const ::std::string& latelynumber() const;
  inline void set_latelynumber(const ::std::string& value);
  inline void set_latelynumber(const char* value);
  inline void set_latelynumber(const char* value, size_t size);
  inline ::std::string* mutable_latelynumber();
  inline ::std::string* release_latelynumber();
  inline void set_allocated_latelynumber(::std::string* latelynumber);

  // optional int32 starttime = 20;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 20;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // optional int32 endtime = 21;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 21;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);

  // optional string faceid = 22;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 22;
  inline const ::std::string& faceid() const;
  inline void set_faceid(const ::std::string& value);
  inline void set_faceid(const char* value);
  inline void set_faceid(const char* value, size_t size);
  inline ::std::string* mutable_faceid();
  inline ::std::string* release_faceid();
  inline void set_allocated_faceid(::std::string* faceid);

  // repeated string bankercountlist = 23;
  inline int bankercountlist_size() const;
  inline void clear_bankercountlist();
  static const int kBankercountlistFieldNumber = 23;
  inline const ::std::string& bankercountlist(int index) const;
  inline ::std::string* mutable_bankercountlist(int index);
  inline void set_bankercountlist(int index, const ::std::string& value);
  inline void set_bankercountlist(int index, const char* value);
  inline void set_bankercountlist(int index, const char* value, size_t size);
  inline ::std::string* add_bankercountlist();
  inline void add_bankercountlist(const ::std::string& value);
  inline void add_bankercountlist(const char* value);
  inline void add_bankercountlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bankercountlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bankercountlist();

  // repeated .progame.fenfencaihistory thistory = 24;
  inline int thistory_size() const;
  inline void clear_thistory();
  static const int kThistoryFieldNumber = 24;
  inline const ::progame::fenfencaihistory& thistory(int index) const;
  inline ::progame::fenfencaihistory* mutable_thistory(int index);
  inline ::progame::fenfencaihistory* add_thistory();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::fenfencaihistory >&
      thistory() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::fenfencaihistory >*
      mutable_thistory();

  // optional int32 suspend = 25;
  inline bool has_suspend() const;
  inline void clear_suspend();
  static const int kSuspendFieldNumber = 25;
  inline ::google::protobuf::int32 suspend() const;
  inline void set_suspend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.fenfencaiinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_bankerjetton();
  inline void clear_has_bankerjetton();
  inline void set_has_bankername();
  inline void clear_has_bankername();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_applydrop();
  inline void clear_has_applydrop();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_bankerlimit();
  inline void clear_has_bankerlimit();
  inline void set_has_maxrobotnum();
  inline void clear_has_maxrobotnum();
  inline void set_has_bankercount();
  inline void clear_has_bankercount();
  inline void set_has_robotbanuserid();
  inline void clear_has_robotbanuserid();
  inline void set_has_issuenumber();
  inline void clear_has_issuenumber();
  inline void set_has_latelynumber();
  inline void clear_has_latelynumber();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_suspend();
  inline void clear_has_suspend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > situser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bankerlist_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::RepeatedPtrField< ::progame::fenfencaiplayer > standuser_;
  ::std::string* bankerjetton_;
  ::std::string* bankername_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 applydrop_;
  ::std::string* bankerlimit_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 maxrobotnum_;
  ::google::protobuf::int32 bankercount_;
  ::google::protobuf::int32 robotbanuserid_;
  ::std::string* issuenumber_;
  ::std::string* latelynumber_;
  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;
  ::std::string* faceid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bankercountlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::fenfencaihistory > thistory_;
  ::google::protobuf::int32 suspend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ffenfencai_2eproto();
  friend void protobuf_AssignDesc_st_5ffenfencai_2eproto();
  friend void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

  void InitAsDefaultInstance();
  static fenfencaiinfo* default_instance_;
};
// -------------------------------------------------------------------

class fenfencaijettonrecorinfo : public ::google::protobuf::Message {
 public:
  fenfencaijettonrecorinfo();
  virtual ~fenfencaijettonrecorinfo();

  fenfencaijettonrecorinfo(const fenfencaijettonrecorinfo& from);

  inline fenfencaijettonrecorinfo& operator=(const fenfencaijettonrecorinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenfencaijettonrecorinfo& default_instance();

  void Swap(fenfencaijettonrecorinfo* other);

  // implements Message ----------------------------------------------

  fenfencaijettonrecorinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenfencaijettonrecorinfo& from);
  void MergeFrom(const fenfencaijettonrecorinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 jetton = 2;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 2;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 winnum = 3;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 3;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional string jifen = 4;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 4;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional string nickname = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string facename = 6;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFacenameFieldNumber = 6;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // @@protoc_insertion_point(class_scope:progame.fenfencaijettonrecorinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_facename();
  inline void clear_has_facename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 jetton_;
  ::std::string* jifen_;
  ::std::string* nickname_;
  ::std::string* facename_;
  ::google::protobuf::int32 winnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ffenfencai_2eproto();
  friend void protobuf_AssignDesc_st_5ffenfencai_2eproto();
  friend void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

  void InitAsDefaultInstance();
  static fenfencaijettonrecorinfo* default_instance_;
};
// -------------------------------------------------------------------

class fenfencaiuseridhistory : public ::google::protobuf::Message {
 public:
  fenfencaiuseridhistory();
  virtual ~fenfencaiuseridhistory();

  fenfencaiuseridhistory(const fenfencaiuseridhistory& from);

  inline fenfencaiuseridhistory& operator=(const fenfencaiuseridhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenfencaiuseridhistory& default_instance();

  void Swap(fenfencaiuseridhistory* other);

  // implements Message ----------------------------------------------

  fenfencaiuseridhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenfencaiuseridhistory& from);
  void MergeFrom(const fenfencaiuseridhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string issuenumber = 3;
  inline bool has_issuenumber() const;
  inline void clear_issuenumber();
  static const int kIssuenumberFieldNumber = 3;
  inline const ::std::string& issuenumber() const;
  inline void set_issuenumber(const ::std::string& value);
  inline void set_issuenumber(const char* value);
  inline void set_issuenumber(const char* value, size_t size);
  inline ::std::string* mutable_issuenumber();
  inline ::std::string* release_issuenumber();
  inline void set_allocated_issuenumber(::std::string* issuenumber);

  // optional string pour = 4;
  inline bool has_pour() const;
  inline void clear_pour();
  static const int kPourFieldNumber = 4;
  inline const ::std::string& pour() const;
  inline void set_pour(const ::std::string& value);
  inline void set_pour(const char* value);
  inline void set_pour(const char* value, size_t size);
  inline ::std::string* mutable_pour();
  inline ::std::string* release_pour();
  inline void set_allocated_pour(::std::string* pour);

  // optional int32 jetton = 5;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 5;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional string awardnumber = 6;
  inline bool has_awardnumber() const;
  inline void clear_awardnumber();
  static const int kAwardnumberFieldNumber = 6;
  inline const ::std::string& awardnumber() const;
  inline void set_awardnumber(const ::std::string& value);
  inline void set_awardnumber(const char* value);
  inline void set_awardnumber(const char* value, size_t size);
  inline ::std::string* mutable_awardnumber();
  inline ::std::string* release_awardnumber();
  inline void set_allocated_awardnumber(::std::string* awardnumber);

  // optional string awardresult = 7;
  inline bool has_awardresult() const;
  inline void clear_awardresult();
  static const int kAwardresultFieldNumber = 7;
  inline const ::std::string& awardresult() const;
  inline void set_awardresult(const ::std::string& value);
  inline void set_awardresult(const char* value);
  inline void set_awardresult(const char* value, size_t size);
  inline ::std::string* mutable_awardresult();
  inline ::std::string* release_awardresult();
  inline void set_allocated_awardresult(::std::string* awardresult);

  // optional int32 winnum = 8;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 8;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.fenfencaiuseridhistory)
 private:
  inline void set_has_issuenumber();
  inline void clear_has_issuenumber();
  inline void set_has_pour();
  inline void clear_has_pour();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_awardnumber();
  inline void clear_has_awardnumber();
  inline void set_has_awardresult();
  inline void clear_has_awardresult();
  inline void set_has_winnum();
  inline void clear_has_winnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* issuenumber_;
  ::std::string* pour_;
  ::std::string* awardnumber_;
  ::google::protobuf::int32 jetton_;
  ::google::protobuf::int32 winnum_;
  ::std::string* awardresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5ffenfencai_2eproto();
  friend void protobuf_AssignDesc_st_5ffenfencai_2eproto();
  friend void protobuf_ShutdownFile_st_5ffenfencai_2eproto();

  void InitAsDefaultInstance();
  static fenfencaiuseridhistory* default_instance_;
};
// ===================================================================


// ===================================================================

// fenfencaijetton

// optional int32 userid = 1;
inline bool fenfencaijetton::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenfencaijetton::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenfencaijetton::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenfencaijetton::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 fenfencaijetton::userid() const {
  return userid_;
}
inline void fenfencaijetton::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourtype = 2;
inline bool fenfencaijetton::has_pourtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenfencaijetton::set_has_pourtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenfencaijetton::clear_has_pourtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenfencaijetton::clear_pourtype() {
  pourtype_ = 0;
  clear_has_pourtype();
}
inline ::google::protobuf::int32 fenfencaijetton::pourtype() const {
  return pourtype_;
}
inline void fenfencaijetton::set_pourtype(::google::protobuf::int32 value) {
  set_has_pourtype();
  pourtype_ = value;
}

// optional int32 jetton = 3;
inline bool fenfencaijetton::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenfencaijetton::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenfencaijetton::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenfencaijetton::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 fenfencaijetton::jetton() const {
  return jetton_;
}
inline void fenfencaijetton::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// -------------------------------------------------------------------

// fenfencaihangupinfo

// optional int32 losenum = 1;
inline bool fenfencaihangupinfo::has_losenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenfencaihangupinfo::set_has_losenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenfencaihangupinfo::clear_has_losenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenfencaihangupinfo::clear_losenum() {
  losenum_ = 0;
  clear_has_losenum();
}
inline ::google::protobuf::int32 fenfencaihangupinfo::losenum() const {
  return losenum_;
}
inline void fenfencaihangupinfo::set_losenum(::google::protobuf::int32 value) {
  set_has_losenum();
  losenum_ = value;
}

// optional int32 winnum = 2;
inline bool fenfencaihangupinfo::has_winnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenfencaihangupinfo::set_has_winnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenfencaihangupinfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenfencaihangupinfo::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 fenfencaihangupinfo::winnum() const {
  return winnum_;
}
inline void fenfencaihangupinfo::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional int32 playNum = 3;
inline bool fenfencaihangupinfo::has_playnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenfencaihangupinfo::set_has_playnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenfencaihangupinfo::clear_has_playnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenfencaihangupinfo::clear_playnum() {
  playnum_ = 0;
  clear_has_playnum();
}
inline ::google::protobuf::int32 fenfencaihangupinfo::playnum() const {
  return playnum_;
}
inline void fenfencaihangupinfo::set_playnum(::google::protobuf::int32 value) {
  set_has_playnum();
  playnum_ = value;
}

// optional int32 playtype = 4;
inline bool fenfencaihangupinfo::has_playtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fenfencaihangupinfo::set_has_playtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fenfencaihangupinfo::clear_has_playtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fenfencaihangupinfo::clear_playtype() {
  playtype_ = 0;
  clear_has_playtype();
}
inline ::google::protobuf::int32 fenfencaihangupinfo::playtype() const {
  return playtype_;
}
inline void fenfencaihangupinfo::set_playtype(::google::protobuf::int32 value) {
  set_has_playtype();
  playtype_ = value;
}

// optional int32 moduletype = 5;
inline bool fenfencaihangupinfo::has_moduletype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fenfencaihangupinfo::set_has_moduletype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fenfencaihangupinfo::clear_has_moduletype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fenfencaihangupinfo::clear_moduletype() {
  moduletype_ = 0;
  clear_has_moduletype();
}
inline ::google::protobuf::int32 fenfencaihangupinfo::moduletype() const {
  return moduletype_;
}
inline void fenfencaihangupinfo::set_moduletype(::google::protobuf::int32 value) {
  set_has_moduletype();
  moduletype_ = value;
}

// repeated string msgInfo = 6;
inline int fenfencaihangupinfo::msginfo_size() const {
  return msginfo_.size();
}
inline void fenfencaihangupinfo::clear_msginfo() {
  msginfo_.Clear();
}
inline const ::std::string& fenfencaihangupinfo::msginfo(int index) const {
  return msginfo_.Get(index);
}
inline ::std::string* fenfencaihangupinfo::mutable_msginfo(int index) {
  return msginfo_.Mutable(index);
}
inline void fenfencaihangupinfo::set_msginfo(int index, const ::std::string& value) {
  msginfo_.Mutable(index)->assign(value);
}
inline void fenfencaihangupinfo::set_msginfo(int index, const char* value) {
  msginfo_.Mutable(index)->assign(value);
}
inline void fenfencaihangupinfo::set_msginfo(int index, const char* value, size_t size) {
  msginfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaihangupinfo::add_msginfo() {
  return msginfo_.Add();
}
inline void fenfencaihangupinfo::add_msginfo(const ::std::string& value) {
  msginfo_.Add()->assign(value);
}
inline void fenfencaihangupinfo::add_msginfo(const char* value) {
  msginfo_.Add()->assign(value);
}
inline void fenfencaihangupinfo::add_msginfo(const char* value, size_t size) {
  msginfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
fenfencaihangupinfo::msginfo() const {
  return msginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
fenfencaihangupinfo::mutable_msginfo() {
  return &msginfo_;
}

// -------------------------------------------------------------------

// fenfencaiplayer

// optional int32 userid = 1;
inline bool fenfencaiplayer::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenfencaiplayer::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenfencaiplayer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenfencaiplayer::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 fenfencaiplayer::userid() const {
  return userid_;
}
inline void fenfencaiplayer::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 Choice = 2;
inline bool fenfencaiplayer::has_choice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenfencaiplayer::set_has_choice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenfencaiplayer::clear_has_choice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenfencaiplayer::clear_choice() {
  choice_ = 0;
  clear_has_choice();
}
inline ::google::protobuf::int32 fenfencaiplayer::choice() const {
  return choice_;
}
inline void fenfencaiplayer::set_choice(::google::protobuf::int32 value) {
  set_has_choice();
  choice_ = value;
}

// optional int32 nopournum = 3;
inline bool fenfencaiplayer::has_nopournum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenfencaiplayer::set_has_nopournum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenfencaiplayer::clear_has_nopournum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenfencaiplayer::clear_nopournum() {
  nopournum_ = 0;
  clear_has_nopournum();
}
inline ::google::protobuf::int32 fenfencaiplayer::nopournum() const {
  return nopournum_;
}
inline void fenfencaiplayer::set_nopournum(::google::protobuf::int32 value) {
  set_has_nopournum();
  nopournum_ = value;
}

// repeated int32 pour_20 = 4;
inline int fenfencaiplayer::pour_20_size() const {
  return pour_20_.size();
}
inline void fenfencaiplayer::clear_pour_20() {
  pour_20_.Clear();
}
inline ::google::protobuf::int32 fenfencaiplayer::pour_20(int index) const {
  return pour_20_.Get(index);
}
inline void fenfencaiplayer::set_pour_20(int index, ::google::protobuf::int32 value) {
  pour_20_.Set(index, value);
}
inline void fenfencaiplayer::add_pour_20(::google::protobuf::int32 value) {
  pour_20_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
fenfencaiplayer::pour_20() const {
  return pour_20_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
fenfencaiplayer::mutable_pour_20() {
  return &pour_20_;
}

// repeated int32 win_20 = 5;
inline int fenfencaiplayer::win_20_size() const {
  return win_20_.size();
}
inline void fenfencaiplayer::clear_win_20() {
  win_20_.Clear();
}
inline ::google::protobuf::int32 fenfencaiplayer::win_20(int index) const {
  return win_20_.Get(index);
}
inline void fenfencaiplayer::set_win_20(int index, ::google::protobuf::int32 value) {
  win_20_.Set(index, value);
}
inline void fenfencaiplayer::add_win_20(::google::protobuf::int32 value) {
  win_20_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
fenfencaiplayer::win_20() const {
  return win_20_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
fenfencaiplayer::mutable_win_20() {
  return &win_20_;
}

// optional int32 hangupstate = 6;
inline bool fenfencaiplayer::has_hangupstate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fenfencaiplayer::set_has_hangupstate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fenfencaiplayer::clear_has_hangupstate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fenfencaiplayer::clear_hangupstate() {
  hangupstate_ = 0;
  clear_has_hangupstate();
}
inline ::google::protobuf::int32 fenfencaiplayer::hangupstate() const {
  return hangupstate_;
}
inline void fenfencaiplayer::set_hangupstate(::google::protobuf::int32 value) {
  set_has_hangupstate();
  hangupstate_ = value;
}

// optional .progame.fenfencaihangupinfo gj = 7;
inline bool fenfencaiplayer::has_gj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fenfencaiplayer::set_has_gj() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fenfencaiplayer::clear_has_gj() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fenfencaiplayer::clear_gj() {
  if (gj_ != NULL) gj_->::progame::fenfencaihangupinfo::Clear();
  clear_has_gj();
}
inline const ::progame::fenfencaihangupinfo& fenfencaiplayer::gj() const {
  return gj_ != NULL ? *gj_ : *default_instance_->gj_;
}
inline ::progame::fenfencaihangupinfo* fenfencaiplayer::mutable_gj() {
  set_has_gj();
  if (gj_ == NULL) gj_ = new ::progame::fenfencaihangupinfo;
  return gj_;
}
inline ::progame::fenfencaihangupinfo* fenfencaiplayer::release_gj() {
  clear_has_gj();
  ::progame::fenfencaihangupinfo* temp = gj_;
  gj_ = NULL;
  return temp;
}
inline void fenfencaiplayer::set_allocated_gj(::progame::fenfencaihangupinfo* gj) {
  delete gj_;
  gj_ = gj;
  if (gj) {
    set_has_gj();
  } else {
    clear_has_gj();
  }
}

// optional int32 currentWin = 8;
inline bool fenfencaiplayer::has_currentwin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void fenfencaiplayer::set_has_currentwin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void fenfencaiplayer::clear_has_currentwin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void fenfencaiplayer::clear_currentwin() {
  currentwin_ = 0;
  clear_has_currentwin();
}
inline ::google::protobuf::int32 fenfencaiplayer::currentwin() const {
  return currentwin_;
}
inline void fenfencaiplayer::set_currentwin(::google::protobuf::int32 value) {
  set_has_currentwin();
  currentwin_ = value;
}

// optional int32 currentplaynum = 9;
inline bool fenfencaiplayer::has_currentplaynum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void fenfencaiplayer::set_has_currentplaynum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void fenfencaiplayer::clear_has_currentplaynum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void fenfencaiplayer::clear_currentplaynum() {
  currentplaynum_ = 0;
  clear_has_currentplaynum();
}
inline ::google::protobuf::int32 fenfencaiplayer::currentplaynum() const {
  return currentplaynum_;
}
inline void fenfencaiplayer::set_currentplaynum(::google::protobuf::int32 value) {
  set_has_currentplaynum();
  currentplaynum_ = value;
}

// optional int32 currentinumber = 10;
inline bool fenfencaiplayer::has_currentinumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void fenfencaiplayer::set_has_currentinumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void fenfencaiplayer::clear_has_currentinumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void fenfencaiplayer::clear_currentinumber() {
  currentinumber_ = 0;
  clear_has_currentinumber();
}
inline ::google::protobuf::int32 fenfencaiplayer::currentinumber() const {
  return currentinumber_;
}
inline void fenfencaiplayer::set_currentinumber(::google::protobuf::int32 value) {
  set_has_currentinumber();
  currentinumber_ = value;
}

// -------------------------------------------------------------------

// fenfencaihistory

// optional string issuenumber = 3;
inline bool fenfencaihistory::has_issuenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenfencaihistory::set_has_issuenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenfencaihistory::clear_has_issuenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenfencaihistory::clear_issuenumber() {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    issuenumber_->clear();
  }
  clear_has_issuenumber();
}
inline const ::std::string& fenfencaihistory::issuenumber() const {
  return *issuenumber_;
}
inline void fenfencaihistory::set_issuenumber(const ::std::string& value) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(value);
}
inline void fenfencaihistory::set_issuenumber(const char* value) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(value);
}
inline void fenfencaihistory::set_issuenumber(const char* value, size_t size) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaihistory::mutable_issuenumber() {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  return issuenumber_;
}
inline ::std::string* fenfencaihistory::release_issuenumber() {
  clear_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = issuenumber_;
    issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaihistory::set_allocated_issuenumber(::std::string* issuenumber) {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete issuenumber_;
  }
  if (issuenumber) {
    set_has_issuenumber();
    issuenumber_ = issuenumber;
  } else {
    clear_has_issuenumber();
    issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string awardnumber = 4;
inline bool fenfencaihistory::has_awardnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenfencaihistory::set_has_awardnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenfencaihistory::clear_has_awardnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenfencaihistory::clear_awardnumber() {
  if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
    awardnumber_->clear();
  }
  clear_has_awardnumber();
}
inline const ::std::string& fenfencaihistory::awardnumber() const {
  return *awardnumber_;
}
inline void fenfencaihistory::set_awardnumber(const ::std::string& value) {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  awardnumber_->assign(value);
}
inline void fenfencaihistory::set_awardnumber(const char* value) {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  awardnumber_->assign(value);
}
inline void fenfencaihistory::set_awardnumber(const char* value, size_t size) {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  awardnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaihistory::mutable_awardnumber() {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  return awardnumber_;
}
inline ::std::string* fenfencaihistory::release_awardnumber() {
  clear_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardnumber_;
    awardnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaihistory::set_allocated_awardnumber(::std::string* awardnumber) {
  if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete awardnumber_;
  }
  if (awardnumber) {
    set_has_awardnumber();
    awardnumber_ = awardnumber;
  } else {
    clear_has_awardnumber();
    awardnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string awardresult = 5;
inline bool fenfencaihistory::has_awardresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenfencaihistory::set_has_awardresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenfencaihistory::clear_has_awardresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenfencaihistory::clear_awardresult() {
  if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
    awardresult_->clear();
  }
  clear_has_awardresult();
}
inline const ::std::string& fenfencaihistory::awardresult() const {
  return *awardresult_;
}
inline void fenfencaihistory::set_awardresult(const ::std::string& value) {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  awardresult_->assign(value);
}
inline void fenfencaihistory::set_awardresult(const char* value) {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  awardresult_->assign(value);
}
inline void fenfencaihistory::set_awardresult(const char* value, size_t size) {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  awardresult_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaihistory::mutable_awardresult() {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  return awardresult_;
}
inline ::std::string* fenfencaihistory::release_awardresult() {
  clear_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardresult_;
    awardresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaihistory::set_allocated_awardresult(::std::string* awardresult) {
  if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
    delete awardresult_;
  }
  if (awardresult) {
    set_has_awardresult();
    awardresult_ = awardresult;
  } else {
    clear_has_awardresult();
    awardresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// fenfencaiinfo

// optional int32 tableid = 1;
inline bool fenfencaiinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenfencaiinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenfencaiinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenfencaiinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 fenfencaiinfo::tableid() const {
  return tableid_;
}
inline void fenfencaiinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 state = 2;
inline bool fenfencaiinfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenfencaiinfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenfencaiinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenfencaiinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 fenfencaiinfo::state() const {
  return state_;
}
inline void fenfencaiinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 3;
inline bool fenfencaiinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenfencaiinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenfencaiinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenfencaiinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 fenfencaiinfo::timemark() const {
  return timemark_;
}
inline void fenfencaiinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated int32 situser = 4;
inline int fenfencaiinfo::situser_size() const {
  return situser_.size();
}
inline void fenfencaiinfo::clear_situser() {
  situser_.Clear();
}
inline ::google::protobuf::int32 fenfencaiinfo::situser(int index) const {
  return situser_.Get(index);
}
inline void fenfencaiinfo::set_situser(int index, ::google::protobuf::int32 value) {
  situser_.Set(index, value);
}
inline void fenfencaiinfo::add_situser(::google::protobuf::int32 value) {
  situser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
fenfencaiinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
fenfencaiinfo::mutable_situser() {
  return &situser_;
}

// repeated int32 bankerlist = 5;
inline int fenfencaiinfo::bankerlist_size() const {
  return bankerlist_.size();
}
inline void fenfencaiinfo::clear_bankerlist() {
  bankerlist_.Clear();
}
inline ::google::protobuf::int32 fenfencaiinfo::bankerlist(int index) const {
  return bankerlist_.Get(index);
}
inline void fenfencaiinfo::set_bankerlist(int index, ::google::protobuf::int32 value) {
  bankerlist_.Set(index, value);
}
inline void fenfencaiinfo::add_bankerlist(::google::protobuf::int32 value) {
  bankerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
fenfencaiinfo::bankerlist() const {
  return bankerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
fenfencaiinfo::mutable_bankerlist() {
  return &bankerlist_;
}

// repeated .progame.fenfencaiplayer standuser = 6;
inline int fenfencaiinfo::standuser_size() const {
  return standuser_.size();
}
inline void fenfencaiinfo::clear_standuser() {
  standuser_.Clear();
}
inline const ::progame::fenfencaiplayer& fenfencaiinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline ::progame::fenfencaiplayer* fenfencaiinfo::mutable_standuser(int index) {
  return standuser_.Mutable(index);
}
inline ::progame::fenfencaiplayer* fenfencaiinfo::add_standuser() {
  return standuser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::fenfencaiplayer >&
fenfencaiinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::fenfencaiplayer >*
fenfencaiinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 bankerid = 7;
inline bool fenfencaiinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fenfencaiinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fenfencaiinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fenfencaiinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 fenfencaiinfo::bankerid() const {
  return bankerid_;
}
inline void fenfencaiinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// optional string bankerjetton = 8;
inline bool fenfencaiinfo::has_bankerjetton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void fenfencaiinfo::set_has_bankerjetton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void fenfencaiinfo::clear_has_bankerjetton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void fenfencaiinfo::clear_bankerjetton() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    bankerjetton_->clear();
  }
  clear_has_bankerjetton();
}
inline const ::std::string& fenfencaiinfo::bankerjetton() const {
  return *bankerjetton_;
}
inline void fenfencaiinfo::set_bankerjetton(const ::std::string& value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void fenfencaiinfo::set_bankerjetton(const char* value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void fenfencaiinfo::set_bankerjetton(const char* value, size_t size) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiinfo::mutable_bankerjetton() {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  return bankerjetton_;
}
inline ::std::string* fenfencaiinfo::release_bankerjetton() {
  clear_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerjetton_;
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiinfo::set_allocated_bankerjetton(::std::string* bankerjetton) {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankerjetton) {
    set_has_bankerjetton();
    bankerjetton_ = bankerjetton;
  } else {
    clear_has_bankerjetton();
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankername = 9;
inline bool fenfencaiinfo::has_bankername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void fenfencaiinfo::set_has_bankername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void fenfencaiinfo::clear_has_bankername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void fenfencaiinfo::clear_bankername() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    bankername_->clear();
  }
  clear_has_bankername();
}
inline const ::std::string& fenfencaiinfo::bankername() const {
  return *bankername_;
}
inline void fenfencaiinfo::set_bankername(const ::std::string& value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void fenfencaiinfo::set_bankername(const char* value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void fenfencaiinfo::set_bankername(const char* value, size_t size) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiinfo::mutable_bankername() {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  return bankername_;
}
inline ::std::string* fenfencaiinfo::release_bankername() {
  clear_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankername_;
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiinfo::set_allocated_bankername(::std::string* bankername) {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankername) {
    set_has_bankername();
    bankername_ = bankername;
  } else {
    clear_has_bankername();
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxuser = 10;
inline bool fenfencaiinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void fenfencaiinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x00000200u;
}
inline void fenfencaiinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void fenfencaiinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 fenfencaiinfo::maxuser() const {
  return maxuser_;
}
inline void fenfencaiinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// optional int32 applydrop = 11;
inline bool fenfencaiinfo::has_applydrop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void fenfencaiinfo::set_has_applydrop() {
  _has_bits_[0] |= 0x00000400u;
}
inline void fenfencaiinfo::clear_has_applydrop() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void fenfencaiinfo::clear_applydrop() {
  applydrop_ = 0;
  clear_has_applydrop();
}
inline ::google::protobuf::int32 fenfencaiinfo::applydrop() const {
  return applydrop_;
}
inline void fenfencaiinfo::set_applydrop(::google::protobuf::int32 value) {
  set_has_applydrop();
  applydrop_ = value;
}

// optional int32 tabletype = 13;
inline bool fenfencaiinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void fenfencaiinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void fenfencaiinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void fenfencaiinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 fenfencaiinfo::tabletype() const {
  return tabletype_;
}
inline void fenfencaiinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional string bankerlimit = 14;
inline bool fenfencaiinfo::has_bankerlimit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void fenfencaiinfo::set_has_bankerlimit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void fenfencaiinfo::clear_has_bankerlimit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void fenfencaiinfo::clear_bankerlimit() {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    bankerlimit_->clear();
  }
  clear_has_bankerlimit();
}
inline const ::std::string& fenfencaiinfo::bankerlimit() const {
  return *bankerlimit_;
}
inline void fenfencaiinfo::set_bankerlimit(const ::std::string& value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void fenfencaiinfo::set_bankerlimit(const char* value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void fenfencaiinfo::set_bankerlimit(const char* value, size_t size) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiinfo::mutable_bankerlimit() {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  return bankerlimit_;
}
inline ::std::string* fenfencaiinfo::release_bankerlimit() {
  clear_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerlimit_;
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiinfo::set_allocated_bankerlimit(::std::string* bankerlimit) {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (bankerlimit) {
    set_has_bankerlimit();
    bankerlimit_ = bankerlimit;
  } else {
    clear_has_bankerlimit();
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxrobotnum = 15;
inline bool fenfencaiinfo::has_maxrobotnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void fenfencaiinfo::set_has_maxrobotnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void fenfencaiinfo::clear_has_maxrobotnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void fenfencaiinfo::clear_maxrobotnum() {
  maxrobotnum_ = 0;
  clear_has_maxrobotnum();
}
inline ::google::protobuf::int32 fenfencaiinfo::maxrobotnum() const {
  return maxrobotnum_;
}
inline void fenfencaiinfo::set_maxrobotnum(::google::protobuf::int32 value) {
  set_has_maxrobotnum();
  maxrobotnum_ = value;
}

// optional int32 bankercount = 16;
inline bool fenfencaiinfo::has_bankercount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void fenfencaiinfo::set_has_bankercount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void fenfencaiinfo::clear_has_bankercount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void fenfencaiinfo::clear_bankercount() {
  bankercount_ = 0;
  clear_has_bankercount();
}
inline ::google::protobuf::int32 fenfencaiinfo::bankercount() const {
  return bankercount_;
}
inline void fenfencaiinfo::set_bankercount(::google::protobuf::int32 value) {
  set_has_bankercount();
  bankercount_ = value;
}

// optional int32 robotbanuserid = 17;
inline bool fenfencaiinfo::has_robotbanuserid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void fenfencaiinfo::set_has_robotbanuserid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void fenfencaiinfo::clear_has_robotbanuserid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void fenfencaiinfo::clear_robotbanuserid() {
  robotbanuserid_ = 0;
  clear_has_robotbanuserid();
}
inline ::google::protobuf::int32 fenfencaiinfo::robotbanuserid() const {
  return robotbanuserid_;
}
inline void fenfencaiinfo::set_robotbanuserid(::google::protobuf::int32 value) {
  set_has_robotbanuserid();
  robotbanuserid_ = value;
}

// optional string issuenumber = 18;
inline bool fenfencaiinfo::has_issuenumber() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void fenfencaiinfo::set_has_issuenumber() {
  _has_bits_[0] |= 0x00010000u;
}
inline void fenfencaiinfo::clear_has_issuenumber() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void fenfencaiinfo::clear_issuenumber() {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    issuenumber_->clear();
  }
  clear_has_issuenumber();
}
inline const ::std::string& fenfencaiinfo::issuenumber() const {
  return *issuenumber_;
}
inline void fenfencaiinfo::set_issuenumber(const ::std::string& value) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(value);
}
inline void fenfencaiinfo::set_issuenumber(const char* value) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(value);
}
inline void fenfencaiinfo::set_issuenumber(const char* value, size_t size) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiinfo::mutable_issuenumber() {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  return issuenumber_;
}
inline ::std::string* fenfencaiinfo::release_issuenumber() {
  clear_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = issuenumber_;
    issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiinfo::set_allocated_issuenumber(::std::string* issuenumber) {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete issuenumber_;
  }
  if (issuenumber) {
    set_has_issuenumber();
    issuenumber_ = issuenumber;
  } else {
    clear_has_issuenumber();
    issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string latelynumber = 19;
inline bool fenfencaiinfo::has_latelynumber() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void fenfencaiinfo::set_has_latelynumber() {
  _has_bits_[0] |= 0x00020000u;
}
inline void fenfencaiinfo::clear_has_latelynumber() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void fenfencaiinfo::clear_latelynumber() {
  if (latelynumber_ != &::google::protobuf::internal::kEmptyString) {
    latelynumber_->clear();
  }
  clear_has_latelynumber();
}
inline const ::std::string& fenfencaiinfo::latelynumber() const {
  return *latelynumber_;
}
inline void fenfencaiinfo::set_latelynumber(const ::std::string& value) {
  set_has_latelynumber();
  if (latelynumber_ == &::google::protobuf::internal::kEmptyString) {
    latelynumber_ = new ::std::string;
  }
  latelynumber_->assign(value);
}
inline void fenfencaiinfo::set_latelynumber(const char* value) {
  set_has_latelynumber();
  if (latelynumber_ == &::google::protobuf::internal::kEmptyString) {
    latelynumber_ = new ::std::string;
  }
  latelynumber_->assign(value);
}
inline void fenfencaiinfo::set_latelynumber(const char* value, size_t size) {
  set_has_latelynumber();
  if (latelynumber_ == &::google::protobuf::internal::kEmptyString) {
    latelynumber_ = new ::std::string;
  }
  latelynumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiinfo::mutable_latelynumber() {
  set_has_latelynumber();
  if (latelynumber_ == &::google::protobuf::internal::kEmptyString) {
    latelynumber_ = new ::std::string;
  }
  return latelynumber_;
}
inline ::std::string* fenfencaiinfo::release_latelynumber() {
  clear_has_latelynumber();
  if (latelynumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latelynumber_;
    latelynumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiinfo::set_allocated_latelynumber(::std::string* latelynumber) {
  if (latelynumber_ != &::google::protobuf::internal::kEmptyString) {
    delete latelynumber_;
  }
  if (latelynumber) {
    set_has_latelynumber();
    latelynumber_ = latelynumber;
  } else {
    clear_has_latelynumber();
    latelynumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 starttime = 20;
inline bool fenfencaiinfo::has_starttime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void fenfencaiinfo::set_has_starttime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void fenfencaiinfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void fenfencaiinfo::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 fenfencaiinfo::starttime() const {
  return starttime_;
}
inline void fenfencaiinfo::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional int32 endtime = 21;
inline bool fenfencaiinfo::has_endtime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void fenfencaiinfo::set_has_endtime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void fenfencaiinfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void fenfencaiinfo::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 fenfencaiinfo::endtime() const {
  return endtime_;
}
inline void fenfencaiinfo::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional string faceid = 22;
inline bool fenfencaiinfo::has_faceid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void fenfencaiinfo::set_has_faceid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void fenfencaiinfo::clear_has_faceid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void fenfencaiinfo::clear_faceid() {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    faceid_->clear();
  }
  clear_has_faceid();
}
inline const ::std::string& fenfencaiinfo::faceid() const {
  return *faceid_;
}
inline void fenfencaiinfo::set_faceid(const ::std::string& value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void fenfencaiinfo::set_faceid(const char* value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void fenfencaiinfo::set_faceid(const char* value, size_t size) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiinfo::mutable_faceid() {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  return faceid_;
}
inline ::std::string* fenfencaiinfo::release_faceid() {
  clear_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faceid_;
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiinfo::set_allocated_faceid(::std::string* faceid) {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (faceid) {
    set_has_faceid();
    faceid_ = faceid;
  } else {
    clear_has_faceid();
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string bankercountlist = 23;
inline int fenfencaiinfo::bankercountlist_size() const {
  return bankercountlist_.size();
}
inline void fenfencaiinfo::clear_bankercountlist() {
  bankercountlist_.Clear();
}
inline const ::std::string& fenfencaiinfo::bankercountlist(int index) const {
  return bankercountlist_.Get(index);
}
inline ::std::string* fenfencaiinfo::mutable_bankercountlist(int index) {
  return bankercountlist_.Mutable(index);
}
inline void fenfencaiinfo::set_bankercountlist(int index, const ::std::string& value) {
  bankercountlist_.Mutable(index)->assign(value);
}
inline void fenfencaiinfo::set_bankercountlist(int index, const char* value) {
  bankercountlist_.Mutable(index)->assign(value);
}
inline void fenfencaiinfo::set_bankercountlist(int index, const char* value, size_t size) {
  bankercountlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiinfo::add_bankercountlist() {
  return bankercountlist_.Add();
}
inline void fenfencaiinfo::add_bankercountlist(const ::std::string& value) {
  bankercountlist_.Add()->assign(value);
}
inline void fenfencaiinfo::add_bankercountlist(const char* value) {
  bankercountlist_.Add()->assign(value);
}
inline void fenfencaiinfo::add_bankercountlist(const char* value, size_t size) {
  bankercountlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
fenfencaiinfo::bankercountlist() const {
  return bankercountlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
fenfencaiinfo::mutable_bankercountlist() {
  return &bankercountlist_;
}

// repeated .progame.fenfencaihistory thistory = 24;
inline int fenfencaiinfo::thistory_size() const {
  return thistory_.size();
}
inline void fenfencaiinfo::clear_thistory() {
  thistory_.Clear();
}
inline const ::progame::fenfencaihistory& fenfencaiinfo::thistory(int index) const {
  return thistory_.Get(index);
}
inline ::progame::fenfencaihistory* fenfencaiinfo::mutable_thistory(int index) {
  return thistory_.Mutable(index);
}
inline ::progame::fenfencaihistory* fenfencaiinfo::add_thistory() {
  return thistory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::fenfencaihistory >&
fenfencaiinfo::thistory() const {
  return thistory_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::fenfencaihistory >*
fenfencaiinfo::mutable_thistory() {
  return &thistory_;
}

// optional int32 suspend = 25;
inline bool fenfencaiinfo::has_suspend() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void fenfencaiinfo::set_has_suspend() {
  _has_bits_[0] |= 0x00800000u;
}
inline void fenfencaiinfo::clear_has_suspend() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void fenfencaiinfo::clear_suspend() {
  suspend_ = 0;
  clear_has_suspend();
}
inline ::google::protobuf::int32 fenfencaiinfo::suspend() const {
  return suspend_;
}
inline void fenfencaiinfo::set_suspend(::google::protobuf::int32 value) {
  set_has_suspend();
  suspend_ = value;
}

// -------------------------------------------------------------------

// fenfencaijettonrecorinfo

// optional int32 userid = 1;
inline bool fenfencaijettonrecorinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenfencaijettonrecorinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenfencaijettonrecorinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenfencaijettonrecorinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 fenfencaijettonrecorinfo::userid() const {
  return userid_;
}
inline void fenfencaijettonrecorinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 jetton = 2;
inline bool fenfencaijettonrecorinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenfencaijettonrecorinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenfencaijettonrecorinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenfencaijettonrecorinfo::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 fenfencaijettonrecorinfo::jetton() const {
  return jetton_;
}
inline void fenfencaijettonrecorinfo::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 winnum = 3;
inline bool fenfencaijettonrecorinfo::has_winnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenfencaijettonrecorinfo::set_has_winnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenfencaijettonrecorinfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenfencaijettonrecorinfo::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 fenfencaijettonrecorinfo::winnum() const {
  return winnum_;
}
inline void fenfencaijettonrecorinfo::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional string jifen = 4;
inline bool fenfencaijettonrecorinfo::has_jifen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fenfencaijettonrecorinfo::set_has_jifen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fenfencaijettonrecorinfo::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fenfencaijettonrecorinfo::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& fenfencaijettonrecorinfo::jifen() const {
  return *jifen_;
}
inline void fenfencaijettonrecorinfo::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void fenfencaijettonrecorinfo::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void fenfencaijettonrecorinfo::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaijettonrecorinfo::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* fenfencaijettonrecorinfo::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaijettonrecorinfo::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 5;
inline bool fenfencaijettonrecorinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fenfencaijettonrecorinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fenfencaijettonrecorinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fenfencaijettonrecorinfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& fenfencaijettonrecorinfo::nickname() const {
  return *nickname_;
}
inline void fenfencaijettonrecorinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void fenfencaijettonrecorinfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void fenfencaijettonrecorinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaijettonrecorinfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* fenfencaijettonrecorinfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaijettonrecorinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string facename = 6;
inline bool fenfencaijettonrecorinfo::has_facename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fenfencaijettonrecorinfo::set_has_facename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fenfencaijettonrecorinfo::clear_has_facename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fenfencaijettonrecorinfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& fenfencaijettonrecorinfo::facename() const {
  return *facename_;
}
inline void fenfencaijettonrecorinfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void fenfencaijettonrecorinfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void fenfencaijettonrecorinfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaijettonrecorinfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* fenfencaijettonrecorinfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaijettonrecorinfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// fenfencaiuseridhistory

// optional string issuenumber = 3;
inline bool fenfencaiuseridhistory::has_issuenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenfencaiuseridhistory::set_has_issuenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenfencaiuseridhistory::clear_has_issuenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenfencaiuseridhistory::clear_issuenumber() {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    issuenumber_->clear();
  }
  clear_has_issuenumber();
}
inline const ::std::string& fenfencaiuseridhistory::issuenumber() const {
  return *issuenumber_;
}
inline void fenfencaiuseridhistory::set_issuenumber(const ::std::string& value) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(value);
}
inline void fenfencaiuseridhistory::set_issuenumber(const char* value) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(value);
}
inline void fenfencaiuseridhistory::set_issuenumber(const char* value, size_t size) {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  issuenumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiuseridhistory::mutable_issuenumber() {
  set_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    issuenumber_ = new ::std::string;
  }
  return issuenumber_;
}
inline ::std::string* fenfencaiuseridhistory::release_issuenumber() {
  clear_has_issuenumber();
  if (issuenumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = issuenumber_;
    issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiuseridhistory::set_allocated_issuenumber(::std::string* issuenumber) {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete issuenumber_;
  }
  if (issuenumber) {
    set_has_issuenumber();
    issuenumber_ = issuenumber;
  } else {
    clear_has_issuenumber();
    issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pour = 4;
inline bool fenfencaiuseridhistory::has_pour() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenfencaiuseridhistory::set_has_pour() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenfencaiuseridhistory::clear_has_pour() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenfencaiuseridhistory::clear_pour() {
  if (pour_ != &::google::protobuf::internal::kEmptyString) {
    pour_->clear();
  }
  clear_has_pour();
}
inline const ::std::string& fenfencaiuseridhistory::pour() const {
  return *pour_;
}
inline void fenfencaiuseridhistory::set_pour(const ::std::string& value) {
  set_has_pour();
  if (pour_ == &::google::protobuf::internal::kEmptyString) {
    pour_ = new ::std::string;
  }
  pour_->assign(value);
}
inline void fenfencaiuseridhistory::set_pour(const char* value) {
  set_has_pour();
  if (pour_ == &::google::protobuf::internal::kEmptyString) {
    pour_ = new ::std::string;
  }
  pour_->assign(value);
}
inline void fenfencaiuseridhistory::set_pour(const char* value, size_t size) {
  set_has_pour();
  if (pour_ == &::google::protobuf::internal::kEmptyString) {
    pour_ = new ::std::string;
  }
  pour_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiuseridhistory::mutable_pour() {
  set_has_pour();
  if (pour_ == &::google::protobuf::internal::kEmptyString) {
    pour_ = new ::std::string;
  }
  return pour_;
}
inline ::std::string* fenfencaiuseridhistory::release_pour() {
  clear_has_pour();
  if (pour_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pour_;
    pour_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiuseridhistory::set_allocated_pour(::std::string* pour) {
  if (pour_ != &::google::protobuf::internal::kEmptyString) {
    delete pour_;
  }
  if (pour) {
    set_has_pour();
    pour_ = pour;
  } else {
    clear_has_pour();
    pour_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 jetton = 5;
inline bool fenfencaiuseridhistory::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenfencaiuseridhistory::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenfencaiuseridhistory::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenfencaiuseridhistory::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 fenfencaiuseridhistory::jetton() const {
  return jetton_;
}
inline void fenfencaiuseridhistory::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional string awardnumber = 6;
inline bool fenfencaiuseridhistory::has_awardnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fenfencaiuseridhistory::set_has_awardnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fenfencaiuseridhistory::clear_has_awardnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fenfencaiuseridhistory::clear_awardnumber() {
  if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
    awardnumber_->clear();
  }
  clear_has_awardnumber();
}
inline const ::std::string& fenfencaiuseridhistory::awardnumber() const {
  return *awardnumber_;
}
inline void fenfencaiuseridhistory::set_awardnumber(const ::std::string& value) {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  awardnumber_->assign(value);
}
inline void fenfencaiuseridhistory::set_awardnumber(const char* value) {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  awardnumber_->assign(value);
}
inline void fenfencaiuseridhistory::set_awardnumber(const char* value, size_t size) {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  awardnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiuseridhistory::mutable_awardnumber() {
  set_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    awardnumber_ = new ::std::string;
  }
  return awardnumber_;
}
inline ::std::string* fenfencaiuseridhistory::release_awardnumber() {
  clear_has_awardnumber();
  if (awardnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardnumber_;
    awardnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiuseridhistory::set_allocated_awardnumber(::std::string* awardnumber) {
  if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete awardnumber_;
  }
  if (awardnumber) {
    set_has_awardnumber();
    awardnumber_ = awardnumber;
  } else {
    clear_has_awardnumber();
    awardnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string awardresult = 7;
inline bool fenfencaiuseridhistory::has_awardresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fenfencaiuseridhistory::set_has_awardresult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fenfencaiuseridhistory::clear_has_awardresult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fenfencaiuseridhistory::clear_awardresult() {
  if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
    awardresult_->clear();
  }
  clear_has_awardresult();
}
inline const ::std::string& fenfencaiuseridhistory::awardresult() const {
  return *awardresult_;
}
inline void fenfencaiuseridhistory::set_awardresult(const ::std::string& value) {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  awardresult_->assign(value);
}
inline void fenfencaiuseridhistory::set_awardresult(const char* value) {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  awardresult_->assign(value);
}
inline void fenfencaiuseridhistory::set_awardresult(const char* value, size_t size) {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  awardresult_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenfencaiuseridhistory::mutable_awardresult() {
  set_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    awardresult_ = new ::std::string;
  }
  return awardresult_;
}
inline ::std::string* fenfencaiuseridhistory::release_awardresult() {
  clear_has_awardresult();
  if (awardresult_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardresult_;
    awardresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenfencaiuseridhistory::set_allocated_awardresult(::std::string* awardresult) {
  if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
    delete awardresult_;
  }
  if (awardresult) {
    set_has_awardresult();
    awardresult_ = awardresult;
  } else {
    clear_has_awardresult();
    awardresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 winnum = 8;
inline bool fenfencaiuseridhistory::has_winnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fenfencaiuseridhistory::set_has_winnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fenfencaiuseridhistory::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fenfencaiuseridhistory::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 fenfencaiuseridhistory::winnum() const {
  return winnum_;
}
inline void fenfencaiuseridhistory::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5ffenfencai_2eproto__INCLUDED
