// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_fqzs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_fqzs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* fqzsinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fqzsinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fqzspour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fqzspour_reflection_ = NULL;
const ::google::protobuf::Descriptor* fqzsjettonrecorinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fqzsjettonrecorinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fqzsgamehistoryinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fqzsgamehistoryinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fqzshistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fqzshistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* fqzsjettonrecordlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fqzsjettonrecordlist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5ffqzs_2eproto() {
  protobuf_AddDesc_st_5ffqzs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_fqzs.proto");
  GOOGLE_CHECK(file != NULL);
  fqzsinfo_descriptor_ = file->message_type(0);
  static const int fqzsinfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, minjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, maxjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankerjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankerfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, dropbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankerwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bebankernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, maxrobotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, robotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, robotbanuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, legalkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, bankercountlist_),
  };
  fqzsinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fqzsinfo_descriptor_,
      fqzsinfo::default_instance_,
      fqzsinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fqzsinfo));
  fqzspour_descriptor_ = file->message_type(1);
  static const int fqzspour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzspour, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzspour, pourid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzspour, pourjetton_),
  };
  fqzspour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fqzspour_descriptor_,
      fqzspour::default_instance_,
      fqzspour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzspour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzspour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fqzspour));
  fqzsjettonrecorinfo_descriptor_ = file->message_type(2);
  static const int fqzsjettonrecorinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, facename_),
  };
  fqzsjettonrecorinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fqzsjettonrecorinfo_descriptor_,
      fqzsjettonrecorinfo::default_instance_,
      fqzsjettonrecorinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecorinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fqzsjettonrecorinfo));
  fqzsgamehistoryinfo_descriptor_ = file->message_type(3);
  static const int fqzsgamehistoryinfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, magnification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, recordidentification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, winarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, limitred_),
  };
  fqzsgamehistoryinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fqzsgamehistoryinfo_descriptor_,
      fqzsgamehistoryinfo::default_instance_,
      fqzsgamehistoryinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsgamehistoryinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fqzsgamehistoryinfo));
  fqzshistory_descriptor_ = file->message_type(4);
  static const int fqzshistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzshistory, winarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzshistory, recordidentification_),
  };
  fqzshistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fqzshistory_descriptor_,
      fqzshistory::default_instance_,
      fqzshistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzshistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzshistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fqzshistory));
  fqzsjettonrecordlist_descriptor_ = file->message_type(5);
  static const int fqzsjettonrecordlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecordlist, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecordlist, wincondition_),
  };
  fqzsjettonrecordlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fqzsjettonrecordlist_descriptor_,
      fqzsjettonrecordlist::default_instance_,
      fqzsjettonrecordlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecordlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fqzsjettonrecordlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fqzsjettonrecordlist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5ffqzs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fqzsinfo_descriptor_, &fqzsinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fqzspour_descriptor_, &fqzspour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fqzsjettonrecorinfo_descriptor_, &fqzsjettonrecorinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fqzsgamehistoryinfo_descriptor_, &fqzsgamehistoryinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fqzshistory_descriptor_, &fqzshistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fqzsjettonrecordlist_descriptor_, &fqzsjettonrecordlist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5ffqzs_2eproto() {
  delete fqzsinfo::default_instance_;
  delete fqzsinfo_reflection_;
  delete fqzspour::default_instance_;
  delete fqzspour_reflection_;
  delete fqzsjettonrecorinfo::default_instance_;
  delete fqzsjettonrecorinfo_reflection_;
  delete fqzsgamehistoryinfo::default_instance_;
  delete fqzsgamehistoryinfo_reflection_;
  delete fqzshistory::default_instance_;
  delete fqzshistory_reflection_;
  delete fqzsjettonrecordlist::default_instance_;
  delete fqzsjettonrecordlist_reflection_;
}

void protobuf_AddDesc_st_5ffqzs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_fqzs.proto\022\007progame\032\016st_human.proto"
    "\"\337\003\n\010fqzsinfo\022\017\n\007tableid\030\001 \001(\005\022\021\n\ttablet"
    "ype\030\002 \001(\005\022\021\n\tminjetton\030\003 \001(\005\022\021\n\tmaxjetto"
    "n\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\022\020\n\010timemark\030\006 \001(\005"
    "\022\022\n\nuseridlist\030\007 \003(\005\022\022\n\nbankerlist\030\t \003(\005"
    "\022\r\n\005winid\030\n \001(\005\022\017\n\007history\030\014 \003(\005\022\020\n\010bank"
    "erid\030\r \001(\005\022\024\n\014bankerjetton\030\016 \001(\t\022\022\n\nbank"
    "ername\030\017 \001(\t\022\024\n\014bankerfaceid\030\020 \001(\t\022\023\n\013ba"
    "nkerlimit\030\021 \001(\005\022\022\n\ndropbanker\030\022 \001(\005\022\021\n\tb"
    "ankerwin\030\023 \001(\t\022\023\n\013bebankernum\030\024 \001(\005\022\023\n\013m"
    "axrobotnum\030\025 \001(\005\022\020\n\010robotnum\030\026 \001(\005\022\026\n\016ro"
    "botbanuserid\030\027 \001(\005\022\023\n\013bankercount\030\030 \001(\005\022"
    "\020\n\010legalkey\030\031 \001(\t\022\027\n\017bankercountlist\030\032 \003"
    "(\t\">\n\010fqzspour\022\016\n\006userid\030\001 \001(\005\022\016\n\006pourid"
    "\030\002 \001(\005\022\022\n\npourjetton\030\003 \001(\005\"x\n\023fqzsjetton"
    "recorinfo\022\016\n\006userid\030\001 \001(\005\022\016\n\006jetton\030\002 \001("
    "\005\022\016\n\006winnum\030\003 \001(\005\022\r\n\005jifen\030\004 \001(\t\022\020\n\010nick"
    "name\030\005 \001(\t\022\020\n\010facename\030\006 \001(\t\"\262\001\n\023fqzsgam"
    "ehistoryinfo\022\017\n\007tableid\030\001 \001(\005\022\021\n\ttablena"
    "me\030\002 \001(\t\022\025\n\rmagnification\030\003 \001(\005\022\r\n\005state"
    "\030\004 \001(\005\022\020\n\010timemark\030\005 \001(\005\022\034\n\024recordidenti"
    "fication\030\006 \003(\t\022\017\n\007winarea\030\007 \003(\005\022\020\n\010limit"
    "red\030\010 \001(\005\"<\n\013fqzshistory\022\017\n\007winarea\030\001 \001("
    "\005\022\034\n\024recordidentification\030\002 \001(\t\"<\n\024fqzsj"
    "ettonrecordlist\022\016\n\006jetton\030\001 \003(\005\022\024\n\014winco"
    "ndition\030\002 \003(\005", 1013);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_fqzs.proto", &protobuf_RegisterTypes);
  fqzsinfo::default_instance_ = new fqzsinfo();
  fqzspour::default_instance_ = new fqzspour();
  fqzsjettonrecorinfo::default_instance_ = new fqzsjettonrecorinfo();
  fqzsgamehistoryinfo::default_instance_ = new fqzsgamehistoryinfo();
  fqzshistory::default_instance_ = new fqzshistory();
  fqzsjettonrecordlist::default_instance_ = new fqzsjettonrecordlist();
  fqzsinfo::default_instance_->InitAsDefaultInstance();
  fqzspour::default_instance_->InitAsDefaultInstance();
  fqzsjettonrecorinfo::default_instance_->InitAsDefaultInstance();
  fqzsgamehistoryinfo::default_instance_->InitAsDefaultInstance();
  fqzshistory::default_instance_->InitAsDefaultInstance();
  fqzsjettonrecordlist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5ffqzs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5ffqzs_2eproto {
  StaticDescriptorInitializer_st_5ffqzs_2eproto() {
    protobuf_AddDesc_st_5ffqzs_2eproto();
  }
} static_descriptor_initializer_st_5ffqzs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int fqzsinfo::kTableidFieldNumber;
const int fqzsinfo::kTabletypeFieldNumber;
const int fqzsinfo::kMinjettonFieldNumber;
const int fqzsinfo::kMaxjettonFieldNumber;
const int fqzsinfo::kStateFieldNumber;
const int fqzsinfo::kTimemarkFieldNumber;
const int fqzsinfo::kUseridlistFieldNumber;
const int fqzsinfo::kBankerlistFieldNumber;
const int fqzsinfo::kWinidFieldNumber;
const int fqzsinfo::kHistoryFieldNumber;
const int fqzsinfo::kBankeridFieldNumber;
const int fqzsinfo::kBankerjettonFieldNumber;
const int fqzsinfo::kBankernameFieldNumber;
const int fqzsinfo::kBankerfaceidFieldNumber;
const int fqzsinfo::kBankerlimitFieldNumber;
const int fqzsinfo::kDropbankerFieldNumber;
const int fqzsinfo::kBankerwinFieldNumber;
const int fqzsinfo::kBebankernumFieldNumber;
const int fqzsinfo::kMaxrobotnumFieldNumber;
const int fqzsinfo::kRobotnumFieldNumber;
const int fqzsinfo::kRobotbanuseridFieldNumber;
const int fqzsinfo::kBankercountFieldNumber;
const int fqzsinfo::kLegalkeyFieldNumber;
const int fqzsinfo::kBankercountlistFieldNumber;
#endif  // !_MSC_VER

fqzsinfo::fqzsinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fqzsinfo::InitAsDefaultInstance() {
}

fqzsinfo::fqzsinfo(const fqzsinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fqzsinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  minjetton_ = 0;
  maxjetton_ = 0;
  state_ = 0;
  timemark_ = 0;
  winid_ = 0;
  bankerid_ = 0;
  bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerlimit_ = 0;
  dropbanker_ = 0;
  bankerwin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bebankernum_ = 0;
  maxrobotnum_ = 0;
  robotnum_ = 0;
  robotbanuserid_ = 0;
  bankercount_ = 0;
  legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fqzsinfo::~fqzsinfo() {
  SharedDtor();
}

void fqzsinfo::SharedDtor() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (bankerwin_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerwin_;
  }
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (this != default_instance_) {
  }
}

void fqzsinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fqzsinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fqzsinfo_descriptor_;
}

const fqzsinfo& fqzsinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffqzs_2eproto();
  return *default_instance_;
}

fqzsinfo* fqzsinfo::default_instance_ = NULL;

fqzsinfo* fqzsinfo::New() const {
  return new fqzsinfo;
}

void fqzsinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    minjetton_ = 0;
    maxjetton_ = 0;
    state_ = 0;
    timemark_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    winid_ = 0;
    bankerid_ = 0;
    if (has_bankerjetton()) {
      if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankerjetton_->clear();
      }
    }
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    if (has_bankerfaceid()) {
      if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
        bankerfaceid_->clear();
      }
    }
    bankerlimit_ = 0;
    dropbanker_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_bankerwin()) {
      if (bankerwin_ != &::google::protobuf::internal::kEmptyString) {
        bankerwin_->clear();
      }
    }
    bebankernum_ = 0;
    maxrobotnum_ = 0;
    robotnum_ = 0;
    robotbanuserid_ = 0;
    bankercount_ = 0;
    if (has_legalkey()) {
      if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
        legalkey_->clear();
      }
    }
  }
  useridlist_.Clear();
  bankerlist_.Clear();
  history_.Clear();
  bankercountlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fqzsinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minjetton;
        break;
      }

      // optional int32 minjetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minjetton_)));
          set_has_minjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxjetton;
        break;
      }

      // optional int32 maxjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxjetton_)));
          set_has_maxjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_useridlist;
        if (input->ExpectTag(72)) goto parse_bankerlist;
        break;
      }

      // repeated int32 bankerlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_bankerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bankerlist;
        if (input->ExpectTag(80)) goto parse_winid;
        break;
      }

      // optional int32 winid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_history;
        break;
      }

      // repeated int32 history = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_history())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_history())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_history;
        if (input->ExpectTag(104)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bankerjetton;
        break;
      }

      // optional string bankerjetton = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerjetton().data(), this->bankerjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_bankername;
        break;
      }

      // optional string bankername = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_bankerfaceid;
        break;
      }

      // optional string bankerfaceid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerfaceid().data(), this->bankerfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bankerlimit;
        break;
      }

      // optional int32 bankerlimit = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerlimit_)));
          set_has_bankerlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_dropbanker;
        break;
      }

      // optional int32 dropbanker = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropbanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropbanker_)));
          set_has_dropbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bankerwin;
        break;
      }

      // optional string bankerwin = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerwin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerwin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerwin().data(), this->bankerwin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bebankernum;
        break;
      }

      // optional int32 bebankernum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bebankernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bebankernum_)));
          set_has_bebankernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_maxrobotnum;
        break;
      }

      // optional int32 maxrobotnum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrobotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrobotnum_)));
          set_has_maxrobotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_robotnum;
        break;
      }

      // optional int32 robotnum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotnum_)));
          set_has_robotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_robotbanuserid;
        break;
      }

      // optional int32 robotbanuserid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotbanuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotbanuserid_)));
          set_has_robotbanuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_bankercount;
        break;
      }

      // optional int32 bankercount = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankercount_)));
          set_has_bankercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_legalkey;
        break;
      }

      // optional string legalkey = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legalkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legalkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legalkey().data(), this->legalkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_bankercountlist;
        break;
      }

      // repeated string bankercountlist = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankercountlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bankercountlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankercountlist(this->bankercountlist_size() - 1).data(),
            this->bankercountlist(this->bankercountlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_bankercountlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fqzsinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 minjetton = 3;
  if (has_minjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minjetton(), output);
  }

  // optional int32 maxjetton = 4;
  if (has_maxjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxjetton(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  // optional int32 timemark = 6;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timemark(), output);
  }

  // repeated int32 useridlist = 7;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->useridlist(i), output);
  }

  // repeated int32 bankerlist = 9;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->bankerlist(i), output);
  }

  // optional int32 winid = 10;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->winid(), output);
  }

  // repeated int32 history = 12;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->history(i), output);
  }

  // optional int32 bankerid = 13;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bankerid(), output);
  }

  // optional string bankerjetton = 14;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->bankerjetton(), output);
  }

  // optional string bankername = 15;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->bankername(), output);
  }

  // optional string bankerfaceid = 16;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bankerfaceid(), output);
  }

  // optional int32 bankerlimit = 17;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bankerlimit(), output);
  }

  // optional int32 dropbanker = 18;
  if (has_dropbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->dropbanker(), output);
  }

  // optional string bankerwin = 19;
  if (has_bankerwin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerwin().data(), this->bankerwin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->bankerwin(), output);
  }

  // optional int32 bebankernum = 20;
  if (has_bebankernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bebankernum(), output);
  }

  // optional int32 maxrobotnum = 21;
  if (has_maxrobotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->maxrobotnum(), output);
  }

  // optional int32 robotnum = 22;
  if (has_robotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->robotnum(), output);
  }

  // optional int32 robotbanuserid = 23;
  if (has_robotbanuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->robotbanuserid(), output);
  }

  // optional int32 bankercount = 24;
  if (has_bankercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->bankercount(), output);
  }

  // optional string legalkey = 25;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->legalkey(), output);
  }

  // repeated string bankercountlist = 26;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bankercountlist(i).data(), this->bankercountlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->bankercountlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fqzsinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 minjetton = 3;
  if (has_minjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minjetton(), target);
  }

  // optional int32 maxjetton = 4;
  if (has_maxjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxjetton(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  // optional int32 timemark = 6;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->timemark(), target);
  }

  // repeated int32 useridlist = 7;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->useridlist(i), target);
  }

  // repeated int32 bankerlist = 9;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->bankerlist(i), target);
  }

  // optional int32 winid = 10;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->winid(), target);
  }

  // repeated int32 history = 12;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->history(i), target);
  }

  // optional int32 bankerid = 13;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bankerid(), target);
  }

  // optional string bankerjetton = 14;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bankerjetton(), target);
  }

  // optional string bankername = 15;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->bankername(), target);
  }

  // optional string bankerfaceid = 16;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bankerfaceid(), target);
  }

  // optional int32 bankerlimit = 17;
  if (has_bankerlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bankerlimit(), target);
  }

  // optional int32 dropbanker = 18;
  if (has_dropbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->dropbanker(), target);
  }

  // optional string bankerwin = 19;
  if (has_bankerwin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerwin().data(), this->bankerwin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->bankerwin(), target);
  }

  // optional int32 bebankernum = 20;
  if (has_bebankernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bebankernum(), target);
  }

  // optional int32 maxrobotnum = 21;
  if (has_maxrobotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->maxrobotnum(), target);
  }

  // optional int32 robotnum = 22;
  if (has_robotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->robotnum(), target);
  }

  // optional int32 robotbanuserid = 23;
  if (has_robotbanuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->robotbanuserid(), target);
  }

  // optional int32 bankercount = 24;
  if (has_bankercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->bankercount(), target);
  }

  // optional string legalkey = 25;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->legalkey(), target);
  }

  // repeated string bankercountlist = 26;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankercountlist(i).data(), this->bankercountlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(26, this->bankercountlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fqzsinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 minjetton = 3;
    if (has_minjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minjetton());
    }

    // optional int32 maxjetton = 4;
    if (has_maxjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxjetton());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 6;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 winid = 10;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional int32 bankerid = 13;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional string bankerjetton = 14;
    if (has_bankerjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerjetton());
    }

    // optional string bankername = 15;
    if (has_bankername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional string bankerfaceid = 16;
    if (has_bankerfaceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerfaceid());
    }

    // optional int32 bankerlimit = 17;
    if (has_bankerlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerlimit());
    }

    // optional int32 dropbanker = 18;
    if (has_dropbanker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropbanker());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string bankerwin = 19;
    if (has_bankerwin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerwin());
    }

    // optional int32 bebankernum = 20;
    if (has_bebankernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bebankernum());
    }

    // optional int32 maxrobotnum = 21;
    if (has_maxrobotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrobotnum());
    }

    // optional int32 robotnum = 22;
    if (has_robotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotnum());
    }

    // optional int32 robotbanuserid = 23;
    if (has_robotbanuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotbanuserid());
    }

    // optional int32 bankercount = 24;
    if (has_bankercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankercount());
    }

    // optional string legalkey = 25;
    if (has_legalkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legalkey());
    }

  }
  // repeated int32 useridlist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated int32 bankerlist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankerlist(i));
    }
    total_size += 1 * this->bankerlist_size() + data_size;
  }

  // repeated int32 history = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->history_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->history(i));
    }
    total_size += 1 * this->history_size() + data_size;
  }

  // repeated string bankercountlist = 26;
  total_size += 2 * this->bankercountlist_size();
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bankercountlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fqzsinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fqzsinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fqzsinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fqzsinfo::MergeFrom(const fqzsinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  bankerlist_.MergeFrom(from.bankerlist_);
  history_.MergeFrom(from.history_);
  bankercountlist_.MergeFrom(from.bankercountlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_minjetton()) {
      set_minjetton(from.minjetton());
    }
    if (from.has_maxjetton()) {
      set_maxjetton(from.maxjetton());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_bankerjetton()) {
      set_bankerjetton(from.bankerjetton());
    }
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_bankerfaceid()) {
      set_bankerfaceid(from.bankerfaceid());
    }
    if (from.has_bankerlimit()) {
      set_bankerlimit(from.bankerlimit());
    }
    if (from.has_dropbanker()) {
      set_dropbanker(from.dropbanker());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bankerwin()) {
      set_bankerwin(from.bankerwin());
    }
    if (from.has_bebankernum()) {
      set_bebankernum(from.bebankernum());
    }
    if (from.has_maxrobotnum()) {
      set_maxrobotnum(from.maxrobotnum());
    }
    if (from.has_robotnum()) {
      set_robotnum(from.robotnum());
    }
    if (from.has_robotbanuserid()) {
      set_robotbanuserid(from.robotbanuserid());
    }
    if (from.has_bankercount()) {
      set_bankercount(from.bankercount());
    }
    if (from.has_legalkey()) {
      set_legalkey(from.legalkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fqzsinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fqzsinfo::CopyFrom(const fqzsinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fqzsinfo::IsInitialized() const {

  return true;
}

void fqzsinfo::Swap(fqzsinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(minjetton_, other->minjetton_);
    std::swap(maxjetton_, other->maxjetton_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    useridlist_.Swap(&other->useridlist_);
    bankerlist_.Swap(&other->bankerlist_);
    std::swap(winid_, other->winid_);
    history_.Swap(&other->history_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankerjetton_, other->bankerjetton_);
    std::swap(bankername_, other->bankername_);
    std::swap(bankerfaceid_, other->bankerfaceid_);
    std::swap(bankerlimit_, other->bankerlimit_);
    std::swap(dropbanker_, other->dropbanker_);
    std::swap(bankerwin_, other->bankerwin_);
    std::swap(bebankernum_, other->bebankernum_);
    std::swap(maxrobotnum_, other->maxrobotnum_);
    std::swap(robotnum_, other->robotnum_);
    std::swap(robotbanuserid_, other->robotbanuserid_);
    std::swap(bankercount_, other->bankercount_);
    std::swap(legalkey_, other->legalkey_);
    bankercountlist_.Swap(&other->bankercountlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fqzsinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fqzsinfo_descriptor_;
  metadata.reflection = fqzsinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fqzspour::kUseridFieldNumber;
const int fqzspour::kPouridFieldNumber;
const int fqzspour::kPourjettonFieldNumber;
#endif  // !_MSC_VER

fqzspour::fqzspour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fqzspour::InitAsDefaultInstance() {
}

fqzspour::fqzspour(const fqzspour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fqzspour::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourid_ = 0;
  pourjetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fqzspour::~fqzspour() {
  SharedDtor();
}

void fqzspour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fqzspour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fqzspour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fqzspour_descriptor_;
}

const fqzspour& fqzspour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffqzs_2eproto();
  return *default_instance_;
}

fqzspour* fqzspour::default_instance_ = NULL;

fqzspour* fqzspour::New() const {
  return new fqzspour;
}

void fqzspour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourid_ = 0;
    pourjetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fqzspour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourid;
        break;
      }

      // optional int32 pourid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourid_)));
          set_has_pourid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pourjetton;
        break;
      }

      // optional int32 pourjetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourjetton_)));
          set_has_pourjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fqzspour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourid = 2;
  if (has_pourid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourid(), output);
  }

  // optional int32 pourjetton = 3;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pourjetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fqzspour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourid = 2;
  if (has_pourid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourid(), target);
  }

  // optional int32 pourjetton = 3;
  if (has_pourjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pourjetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fqzspour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourid = 2;
    if (has_pourid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourid());
    }

    // optional int32 pourjetton = 3;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourjetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fqzspour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fqzspour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fqzspour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fqzspour::MergeFrom(const fqzspour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourid()) {
      set_pourid(from.pourid());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fqzspour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fqzspour::CopyFrom(const fqzspour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fqzspour::IsInitialized() const {

  return true;
}

void fqzspour::Swap(fqzspour* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourid_, other->pourid_);
    std::swap(pourjetton_, other->pourjetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fqzspour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fqzspour_descriptor_;
  metadata.reflection = fqzspour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fqzsjettonrecorinfo::kUseridFieldNumber;
const int fqzsjettonrecorinfo::kJettonFieldNumber;
const int fqzsjettonrecorinfo::kWinnumFieldNumber;
const int fqzsjettonrecorinfo::kJifenFieldNumber;
const int fqzsjettonrecorinfo::kNicknameFieldNumber;
const int fqzsjettonrecorinfo::kFacenameFieldNumber;
#endif  // !_MSC_VER

fqzsjettonrecorinfo::fqzsjettonrecorinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fqzsjettonrecorinfo::InitAsDefaultInstance() {
}

fqzsjettonrecorinfo::fqzsjettonrecorinfo(const fqzsjettonrecorinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fqzsjettonrecorinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  jetton_ = 0;
  winnum_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fqzsjettonrecorinfo::~fqzsjettonrecorinfo() {
  SharedDtor();
}

void fqzsjettonrecorinfo::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (this != default_instance_) {
  }
}

void fqzsjettonrecorinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fqzsjettonrecorinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fqzsjettonrecorinfo_descriptor_;
}

const fqzsjettonrecorinfo& fqzsjettonrecorinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffqzs_2eproto();
  return *default_instance_;
}

fqzsjettonrecorinfo* fqzsjettonrecorinfo::default_instance_ = NULL;

fqzsjettonrecorinfo* fqzsjettonrecorinfo::New() const {
  return new fqzsjettonrecorinfo;
}

void fqzsjettonrecorinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    jetton_ = 0;
    winnum_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fqzsjettonrecorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jifen;
        break;
      }

      // optional string jifen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facename;
        break;
      }

      // optional string facename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fqzsjettonrecorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jetton(), output);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winnum(), output);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jifen(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->facename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fqzsjettonrecorinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jetton(), target);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winnum(), target);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jifen(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->facename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fqzsjettonrecorinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 jetton = 2;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 winnum = 3;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional string jifen = 4;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string facename = 6;
    if (has_facename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fqzsjettonrecorinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fqzsjettonrecorinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fqzsjettonrecorinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fqzsjettonrecorinfo::MergeFrom(const fqzsjettonrecorinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fqzsjettonrecorinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fqzsjettonrecorinfo::CopyFrom(const fqzsjettonrecorinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fqzsjettonrecorinfo::IsInitialized() const {

  return true;
}

void fqzsjettonrecorinfo::Swap(fqzsjettonrecorinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(jetton_, other->jetton_);
    std::swap(winnum_, other->winnum_);
    std::swap(jifen_, other->jifen_);
    std::swap(nickname_, other->nickname_);
    std::swap(facename_, other->facename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fqzsjettonrecorinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fqzsjettonrecorinfo_descriptor_;
  metadata.reflection = fqzsjettonrecorinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fqzsgamehistoryinfo::kTableidFieldNumber;
const int fqzsgamehistoryinfo::kTablenameFieldNumber;
const int fqzsgamehistoryinfo::kMagnificationFieldNumber;
const int fqzsgamehistoryinfo::kStateFieldNumber;
const int fqzsgamehistoryinfo::kTimemarkFieldNumber;
const int fqzsgamehistoryinfo::kRecordidentificationFieldNumber;
const int fqzsgamehistoryinfo::kWinareaFieldNumber;
const int fqzsgamehistoryinfo::kLimitredFieldNumber;
#endif  // !_MSC_VER

fqzsgamehistoryinfo::fqzsgamehistoryinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fqzsgamehistoryinfo::InitAsDefaultInstance() {
}

fqzsgamehistoryinfo::fqzsgamehistoryinfo(const fqzsgamehistoryinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fqzsgamehistoryinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magnification_ = 0;
  state_ = 0;
  timemark_ = 0;
  limitred_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fqzsgamehistoryinfo::~fqzsgamehistoryinfo() {
  SharedDtor();
}

void fqzsgamehistoryinfo::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void fqzsgamehistoryinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fqzsgamehistoryinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fqzsgamehistoryinfo_descriptor_;
}

const fqzsgamehistoryinfo& fqzsgamehistoryinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffqzs_2eproto();
  return *default_instance_;
}

fqzsgamehistoryinfo* fqzsgamehistoryinfo::default_instance_ = NULL;

fqzsgamehistoryinfo* fqzsgamehistoryinfo::New() const {
  return new fqzsgamehistoryinfo;
}

void fqzsgamehistoryinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    magnification_ = 0;
    state_ = 0;
    timemark_ = 0;
    limitred_ = 0;
  }
  recordidentification_.Clear();
  winarea_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fqzsgamehistoryinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional string tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_magnification;
        break;
      }

      // optional int32 magnification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magnification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magnification_)));
          set_has_magnification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        break;
      }

      // repeated string recordidentification = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordidentification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification(this->recordidentification_size() - 1).data(),
            this->recordidentification(this->recordidentification_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        if (input->ExpectTag(56)) goto parse_winarea;
        break;
      }

      // repeated int32 winarea = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winarea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_winarea())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winarea())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_winarea;
        if (input->ExpectTag(64)) goto parse_limitred;
        break;
      }

      // optional int32 limitred = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitred_)));
          set_has_limitred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fqzsgamehistoryinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->magnification(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recordidentification(i).data(), this->recordidentification(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recordidentification(i), output);
  }

  // repeated int32 winarea = 7;
  for (int i = 0; i < this->winarea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->winarea(i), output);
  }

  // optional int32 limitred = 8;
  if (has_limitred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->limitred(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fqzsgamehistoryinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->magnification(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification(i).data(), this->recordidentification(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->recordidentification(i), target);
  }

  // repeated int32 winarea = 7;
  for (int i = 0; i < this->winarea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->winarea(i), target);
  }

  // optional int32 limitred = 8;
  if (has_limitred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->limitred(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fqzsgamehistoryinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional string tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional int32 magnification = 3;
    if (has_magnification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magnification());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 limitred = 8;
    if (has_limitred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitred());
    }

  }
  // repeated string recordidentification = 6;
  total_size += 1 * this->recordidentification_size();
  for (int i = 0; i < this->recordidentification_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recordidentification(i));
  }

  // repeated int32 winarea = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->winarea_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winarea(i));
    }
    total_size += 1 * this->winarea_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fqzsgamehistoryinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fqzsgamehistoryinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fqzsgamehistoryinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fqzsgamehistoryinfo::MergeFrom(const fqzsgamehistoryinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordidentification_.MergeFrom(from.recordidentification_);
  winarea_.MergeFrom(from.winarea_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_magnification()) {
      set_magnification(from.magnification());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_limitred()) {
      set_limitred(from.limitred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fqzsgamehistoryinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fqzsgamehistoryinfo::CopyFrom(const fqzsgamehistoryinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fqzsgamehistoryinfo::IsInitialized() const {

  return true;
}

void fqzsgamehistoryinfo::Swap(fqzsgamehistoryinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(magnification_, other->magnification_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    recordidentification_.Swap(&other->recordidentification_);
    winarea_.Swap(&other->winarea_);
    std::swap(limitred_, other->limitred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fqzsgamehistoryinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fqzsgamehistoryinfo_descriptor_;
  metadata.reflection = fqzsgamehistoryinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fqzshistory::kWinareaFieldNumber;
const int fqzshistory::kRecordidentificationFieldNumber;
#endif  // !_MSC_VER

fqzshistory::fqzshistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fqzshistory::InitAsDefaultInstance() {
}

fqzshistory::fqzshistory(const fqzshistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fqzshistory::SharedCtor() {
  _cached_size_ = 0;
  winarea_ = 0;
  recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fqzshistory::~fqzshistory() {
  SharedDtor();
}

void fqzshistory::SharedDtor() {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    delete recordidentification_;
  }
  if (this != default_instance_) {
  }
}

void fqzshistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fqzshistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fqzshistory_descriptor_;
}

const fqzshistory& fqzshistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffqzs_2eproto();
  return *default_instance_;
}

fqzshistory* fqzshistory::default_instance_ = NULL;

fqzshistory* fqzshistory::New() const {
  return new fqzshistory;
}

void fqzshistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winarea_ = 0;
    if (has_recordidentification()) {
      if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
        recordidentification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fqzshistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winarea = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winarea_)));
          set_has_winarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recordidentification;
        break;
      }

      // optional string recordidentification = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordidentification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification().data(), this->recordidentification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fqzshistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 winarea = 1;
  if (has_winarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winarea(), output);
  }

  // optional string recordidentification = 2;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->recordidentification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fqzshistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 winarea = 1;
  if (has_winarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winarea(), target);
  }

  // optional string recordidentification = 2;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recordidentification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fqzshistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 winarea = 1;
    if (has_winarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winarea());
    }

    // optional string recordidentification = 2;
    if (has_recordidentification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordidentification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fqzshistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fqzshistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fqzshistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fqzshistory::MergeFrom(const fqzshistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winarea()) {
      set_winarea(from.winarea());
    }
    if (from.has_recordidentification()) {
      set_recordidentification(from.recordidentification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fqzshistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fqzshistory::CopyFrom(const fqzshistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fqzshistory::IsInitialized() const {

  return true;
}

void fqzshistory::Swap(fqzshistory* other) {
  if (other != this) {
    std::swap(winarea_, other->winarea_);
    std::swap(recordidentification_, other->recordidentification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fqzshistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fqzshistory_descriptor_;
  metadata.reflection = fqzshistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fqzsjettonrecordlist::kJettonFieldNumber;
const int fqzsjettonrecordlist::kWinconditionFieldNumber;
#endif  // !_MSC_VER

fqzsjettonrecordlist::fqzsjettonrecordlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fqzsjettonrecordlist::InitAsDefaultInstance() {
}

fqzsjettonrecordlist::fqzsjettonrecordlist(const fqzsjettonrecordlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fqzsjettonrecordlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fqzsjettonrecordlist::~fqzsjettonrecordlist() {
  SharedDtor();
}

void fqzsjettonrecordlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fqzsjettonrecordlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fqzsjettonrecordlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fqzsjettonrecordlist_descriptor_;
}

const fqzsjettonrecordlist& fqzsjettonrecordlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffqzs_2eproto();
  return *default_instance_;
}

fqzsjettonrecordlist* fqzsjettonrecordlist::default_instance_ = NULL;

fqzsjettonrecordlist* fqzsjettonrecordlist::New() const {
  return new fqzsjettonrecordlist;
}

void fqzsjettonrecordlist::Clear() {
  jetton_.Clear();
  wincondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fqzsjettonrecordlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_jetton;
        if (input->ExpectTag(16)) goto parse_wincondition;
        break;
      }

      // repeated int32 wincondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_wincondition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wincondition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wincondition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fqzsjettonrecordlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jetton(i), output);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->wincondition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fqzsjettonrecordlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jetton(i), target);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->wincondition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fqzsjettonrecordlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 jetton = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated int32 wincondition = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->wincondition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wincondition(i));
    }
    total_size += 1 * this->wincondition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fqzsjettonrecordlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fqzsjettonrecordlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fqzsjettonrecordlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fqzsjettonrecordlist::MergeFrom(const fqzsjettonrecordlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  jetton_.MergeFrom(from.jetton_);
  wincondition_.MergeFrom(from.wincondition_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fqzsjettonrecordlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fqzsjettonrecordlist::CopyFrom(const fqzsjettonrecordlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fqzsjettonrecordlist::IsInitialized() const {

  return true;
}

void fqzsjettonrecordlist::Swap(fqzsjettonrecordlist* other) {
  if (other != this) {
    jetton_.Swap(&other->jetton_);
    wincondition_.Swap(&other->wincondition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fqzsjettonrecordlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fqzsjettonrecordlist_descriptor_;
  metadata.reflection = fqzsjettonrecordlist_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
