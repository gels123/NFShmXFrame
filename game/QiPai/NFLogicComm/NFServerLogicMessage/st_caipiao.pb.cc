// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_caipiao.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_caipiao.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* caipiaojetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  caipiaojetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* caipiaoinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  caipiaoinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* caipiaohistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  caipiaohistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* caipiaopersonhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  caipiaopersonhistory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fcaipiao_2eproto() {
  protobuf_AddDesc_st_5fcaipiao_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_caipiao.proto");
  GOOGLE_CHECK(file != NULL);
  caipiaojetton_descriptor_ = file->message_type(0);
  static const int caipiaojetton_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, pourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, gamekey_),
  };
  caipiaojetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      caipiaojetton_descriptor_,
      caipiaojetton::default_instance_,
      caipiaojetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaojetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(caipiaojetton));
  caipiaoinfo_descriptor_ = file->message_type(1);
  static const int caipiaoinfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, openawarddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, fengpantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, openawardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, nextopenissue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, nextopentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, secondopenissue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, secondopentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, gamekey_),
  };
  caipiaoinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      caipiaoinfo_descriptor_,
      caipiaoinfo::default_instance_,
      caipiaoinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaoinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(caipiaoinfo));
  caipiaohistory_descriptor_ = file->message_type(2);
  static const int caipiaohistory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaohistory, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaohistory, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaohistory, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaohistory, gamekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaohistory, openawardtime_),
  };
  caipiaohistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      caipiaohistory_descriptor_,
      caipiaohistory::default_instance_,
      caipiaohistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaohistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaohistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(caipiaohistory));
  caipiaopersonhistory_descriptor_ = file->message_type(3);
  static const int caipiaopersonhistory_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, gamekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, pourjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, pourcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, opentimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, state_),
  };
  caipiaopersonhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      caipiaopersonhistory_descriptor_,
      caipiaopersonhistory::default_instance_,
      caipiaopersonhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(caipiaopersonhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(caipiaopersonhistory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fcaipiao_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    caipiaojetton_descriptor_, &caipiaojetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    caipiaoinfo_descriptor_, &caipiaoinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    caipiaohistory_descriptor_, &caipiaohistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    caipiaopersonhistory_descriptor_, &caipiaopersonhistory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fcaipiao_2eproto() {
  delete caipiaojetton::default_instance_;
  delete caipiaojetton_reflection_;
  delete caipiaoinfo::default_instance_;
  delete caipiaoinfo_reflection_;
  delete caipiaohistory::default_instance_;
  delete caipiaohistory_reflection_;
  delete caipiaopersonhistory::default_instance_;
  delete caipiaopersonhistory_reflection_;
}

void protobuf_AddDesc_st_5fcaipiao_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020st_caipiao.proto\022\007progame\032\016st_human.pr"
    "oto\"v\n\rcaipiaojetton\022\016\n\006userid\030\001 \001(\005\022\017\n\007"
    "tableid\030\002 \001(\005\022\021\n\ttabletype\030\003 \001(\005\022\020\n\010pour"
    "type\030\004 \003(\005\022\016\n\006jetton\030\005 \001(\005\022\017\n\007gamekey\030\006 "
    "\001(\005\"\303\002\n\013caipiaoinfo\022\017\n\007tableid\030\001 \001(\005\022\017\n\007"
    "frameid\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\021\n\tstanduse"
    "r\030\004 \003(\005\022\017\n\007usernum\030\005 \001(\005\022\021\n\ttabletype\030\006 "
    "\001(\005\022\025\n\ropenawarddate\030\007 \001(\t\022\023\n\013fengpantim"
    "e\030\010 \001(\t\022\025\n\ropenawardtime\030\t \001(\t\022\013\n\003gid\030\n "
    "\001(\t\022\r\n\005award\030\013 \001(\t\022\025\n\rnextopenissue\030\014 \001("
    "\t\022\024\n\014nextOpenTime\030\r \001(\t\022\027\n\017secondOpenIss"
    "ue\030\016 \001(\t\022\026\n\016secondOpenTime\030\017 \001(\t\022\017\n\007game"
    "key\030\020 \001(\005\"e\n\016caipiaohistory\022\017\n\007tableid\030\001"
    " \001(\005\022\013\n\003gid\030\002 \001(\t\022\r\n\005award\030\003 \001(\t\022\017\n\007game"
    "key\030\004 \001(\005\022\025\n\ropenawardtime\030\005 \001(\t\"\275\001\n\024cai"
    "piaopersonhistory\022\017\n\007orderid\030\001 \001(\005\022\017\n\007ta"
    "bleid\030\002 \001(\005\022\013\n\003gid\030\003 \001(\t\022\r\n\005award\030\004 \001(\t\022"
    "\017\n\007gamekey\030\005 \001(\005\022\022\n\npourjetton\030\006 \001(\t\022\023\n\013"
    "pourcontent\030\007 \001(\t\022\021\n\topentimes\030\010 \001(\t\022\013\n\003"
    "win\030\t \001(\005\022\r\n\005state\030\n \001(\005", 784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_caipiao.proto", &protobuf_RegisterTypes);
  caipiaojetton::default_instance_ = new caipiaojetton();
  caipiaoinfo::default_instance_ = new caipiaoinfo();
  caipiaohistory::default_instance_ = new caipiaohistory();
  caipiaopersonhistory::default_instance_ = new caipiaopersonhistory();
  caipiaojetton::default_instance_->InitAsDefaultInstance();
  caipiaoinfo::default_instance_->InitAsDefaultInstance();
  caipiaohistory::default_instance_->InitAsDefaultInstance();
  caipiaopersonhistory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fcaipiao_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fcaipiao_2eproto {
  StaticDescriptorInitializer_st_5fcaipiao_2eproto() {
    protobuf_AddDesc_st_5fcaipiao_2eproto();
  }
} static_descriptor_initializer_st_5fcaipiao_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int caipiaojetton::kUseridFieldNumber;
const int caipiaojetton::kTableidFieldNumber;
const int caipiaojetton::kTabletypeFieldNumber;
const int caipiaojetton::kPourtypeFieldNumber;
const int caipiaojetton::kJettonFieldNumber;
const int caipiaojetton::kGamekeyFieldNumber;
#endif  // !_MSC_VER

caipiaojetton::caipiaojetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void caipiaojetton::InitAsDefaultInstance() {
}

caipiaojetton::caipiaojetton(const caipiaojetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void caipiaojetton::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  jetton_ = 0;
  gamekey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

caipiaojetton::~caipiaojetton() {
  SharedDtor();
}

void caipiaojetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void caipiaojetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* caipiaojetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return caipiaojetton_descriptor_;
}

const caipiaojetton& caipiaojetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fcaipiao_2eproto();
  return *default_instance_;
}

caipiaojetton* caipiaojetton::default_instance_ = NULL;

caipiaojetton* caipiaojetton::New() const {
  return new caipiaojetton;
}

void caipiaojetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    tableid_ = 0;
    tabletype_ = 0;
    jetton_ = 0;
    gamekey_ = 0;
  }
  pourtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool caipiaojetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pourtype;
        break;
      }

      // repeated int32 pourtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pourtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pourtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pourtype;
        if (input->ExpectTag(40)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gamekey;
        break;
      }

      // optional int32 gamekey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamekey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamekey_)));
          set_has_gamekey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void caipiaojetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 tabletype = 3;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tabletype(), output);
  }

  // repeated int32 pourtype = 4;
  for (int i = 0; i < this->pourtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pourtype(i), output);
  }

  // optional int32 jetton = 5;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jetton(), output);
  }

  // optional int32 gamekey = 6;
  if (has_gamekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gamekey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* caipiaojetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 tabletype = 3;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tabletype(), target);
  }

  // repeated int32 pourtype = 4;
  for (int i = 0; i < this->pourtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pourtype(i), target);
  }

  // optional int32 jetton = 5;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jetton(), target);
  }

  // optional int32 gamekey = 6;
  if (has_gamekey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gamekey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int caipiaojetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 3;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 jetton = 5;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 gamekey = 6;
    if (has_gamekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamekey());
    }

  }
  // repeated int32 pourtype = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pourtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pourtype(i));
    }
    total_size += 1 * this->pourtype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void caipiaojetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const caipiaojetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const caipiaojetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void caipiaojetton::MergeFrom(const caipiaojetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  pourtype_.MergeFrom(from.pourtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_gamekey()) {
      set_gamekey(from.gamekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void caipiaojetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void caipiaojetton::CopyFrom(const caipiaojetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool caipiaojetton::IsInitialized() const {

  return true;
}

void caipiaojetton::Swap(caipiaojetton* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    pourtype_.Swap(&other->pourtype_);
    std::swap(jetton_, other->jetton_);
    std::swap(gamekey_, other->gamekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata caipiaojetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = caipiaojetton_descriptor_;
  metadata.reflection = caipiaojetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int caipiaoinfo::kTableidFieldNumber;
const int caipiaoinfo::kFrameidFieldNumber;
const int caipiaoinfo::kStateFieldNumber;
const int caipiaoinfo::kStanduserFieldNumber;
const int caipiaoinfo::kUsernumFieldNumber;
const int caipiaoinfo::kTabletypeFieldNumber;
const int caipiaoinfo::kOpenawarddateFieldNumber;
const int caipiaoinfo::kFengpantimeFieldNumber;
const int caipiaoinfo::kOpenawardtimeFieldNumber;
const int caipiaoinfo::kGidFieldNumber;
const int caipiaoinfo::kAwardFieldNumber;
const int caipiaoinfo::kNextopenissueFieldNumber;
const int caipiaoinfo::kNextOpenTimeFieldNumber;
const int caipiaoinfo::kSecondOpenIssueFieldNumber;
const int caipiaoinfo::kSecondOpenTimeFieldNumber;
const int caipiaoinfo::kGamekeyFieldNumber;
#endif  // !_MSC_VER

caipiaoinfo::caipiaoinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void caipiaoinfo::InitAsDefaultInstance() {
}

caipiaoinfo::caipiaoinfo(const caipiaoinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void caipiaoinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  frameid_ = 0;
  state_ = 0;
  usernum_ = 0;
  tabletype_ = 0;
  openawarddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fengpantime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openawardtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nextopenissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nextopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secondopenissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secondopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamekey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

caipiaoinfo::~caipiaoinfo() {
  SharedDtor();
}

void caipiaoinfo::SharedDtor() {
  if (openawarddate_ != &::google::protobuf::internal::kEmptyString) {
    delete openawarddate_;
  }
  if (fengpantime_ != &::google::protobuf::internal::kEmptyString) {
    delete fengpantime_;
  }
  if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
    delete openawardtime_;
  }
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (nextopenissue_ != &::google::protobuf::internal::kEmptyString) {
    delete nextopenissue_;
  }
  if (nextopentime_ != &::google::protobuf::internal::kEmptyString) {
    delete nextopentime_;
  }
  if (secondopenissue_ != &::google::protobuf::internal::kEmptyString) {
    delete secondopenissue_;
  }
  if (secondopentime_ != &::google::protobuf::internal::kEmptyString) {
    delete secondopentime_;
  }
  if (this != default_instance_) {
  }
}

void caipiaoinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* caipiaoinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return caipiaoinfo_descriptor_;
}

const caipiaoinfo& caipiaoinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fcaipiao_2eproto();
  return *default_instance_;
}

caipiaoinfo* caipiaoinfo::default_instance_ = NULL;

caipiaoinfo* caipiaoinfo::New() const {
  return new caipiaoinfo;
}

void caipiaoinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    frameid_ = 0;
    state_ = 0;
    usernum_ = 0;
    tabletype_ = 0;
    if (has_openawarddate()) {
      if (openawarddate_ != &::google::protobuf::internal::kEmptyString) {
        openawarddate_->clear();
      }
    }
    if (has_fengpantime()) {
      if (fengpantime_ != &::google::protobuf::internal::kEmptyString) {
        fengpantime_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_openawardtime()) {
      if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
        openawardtime_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
    if (has_nextopenissue()) {
      if (nextopenissue_ != &::google::protobuf::internal::kEmptyString) {
        nextopenissue_->clear();
      }
    }
    if (has_nextopentime()) {
      if (nextopentime_ != &::google::protobuf::internal::kEmptyString) {
        nextopentime_->clear();
      }
    }
    if (has_secondopenissue()) {
      if (secondopenissue_ != &::google::protobuf::internal::kEmptyString) {
        secondopenissue_->clear();
      }
    }
    if (has_secondopentime()) {
      if (secondopentime_ != &::google::protobuf::internal::kEmptyString) {
        secondopentime_->clear();
      }
    }
    gamekey_ = 0;
  }
  standuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool caipiaoinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameid;
        break;
      }

      // optional int32 frameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_standuser;
        if (input->ExpectTag(40)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_openawarddate;
        break;
      }

      // optional string openawarddate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openawarddate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openawarddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openawarddate().data(), this->openawarddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fengpantime;
        break;
      }

      // optional string fengpantime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fengpantime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fengpantime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fengpantime().data(), this->fengpantime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_openawardtime;
        break;
      }

      // optional string openawardtime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openawardtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openawardtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openawardtime().data(), this->openawardtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gid;
        break;
      }

      // optional string gid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_award;
        break;
      }

      // optional string award = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_nextopenissue;
        break;
      }

      // optional string nextopenissue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextopenissue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextopenissue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nextopenissue().data(), this->nextopenissue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_nextOpenTime;
        break;
      }

      // optional string nextOpenTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextOpenTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextopentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nextopentime().data(), this->nextopentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_secondOpenIssue;
        break;
      }

      // optional string secondOpenIssue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondOpenIssue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondopenissue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secondopenissue().data(), this->secondopenissue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_secondOpenTime;
        break;
      }

      // optional string secondOpenTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondOpenTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondopentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secondopentime().data(), this->secondopentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_gamekey;
        break;
      }

      // optional int32 gamekey = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamekey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamekey_)));
          set_has_gamekey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void caipiaoinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // repeated int32 standuser = 4;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->standuser(i), output);
  }

  // optional int32 usernum = 5;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usernum(), output);
  }

  // optional int32 tabletype = 6;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tabletype(), output);
  }

  // optional string openawarddate = 7;
  if (has_openawarddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openawarddate().data(), this->openawarddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->openawarddate(), output);
  }

  // optional string fengpantime = 8;
  if (has_fengpantime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fengpantime().data(), this->fengpantime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->fengpantime(), output);
  }

  // optional string openawardtime = 9;
  if (has_openawardtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openawardtime().data(), this->openawardtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->openawardtime(), output);
  }

  // optional string gid = 10;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gid(), output);
  }

  // optional string award = 11;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->award(), output);
  }

  // optional string nextopenissue = 12;
  if (has_nextopenissue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextopenissue().data(), this->nextopenissue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->nextopenissue(), output);
  }

  // optional string nextOpenTime = 13;
  if (has_nextopentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextopentime().data(), this->nextopentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->nextopentime(), output);
  }

  // optional string secondOpenIssue = 14;
  if (has_secondopenissue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondopenissue().data(), this->secondopenissue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->secondopenissue(), output);
  }

  // optional string secondOpenTime = 15;
  if (has_secondopentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondopentime().data(), this->secondopentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->secondopentime(), output);
  }

  // optional int32 gamekey = 16;
  if (has_gamekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gamekey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* caipiaoinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frameid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // repeated int32 standuser = 4;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->standuser(i), target);
  }

  // optional int32 usernum = 5;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usernum(), target);
  }

  // optional int32 tabletype = 6;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tabletype(), target);
  }

  // optional string openawarddate = 7;
  if (has_openawarddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openawarddate().data(), this->openawarddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->openawarddate(), target);
  }

  // optional string fengpantime = 8;
  if (has_fengpantime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fengpantime().data(), this->fengpantime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fengpantime(), target);
  }

  // optional string openawardtime = 9;
  if (has_openawardtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openawardtime().data(), this->openawardtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->openawardtime(), target);
  }

  // optional string gid = 10;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gid(), target);
  }

  // optional string award = 11;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->award(), target);
  }

  // optional string nextopenissue = 12;
  if (has_nextopenissue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextopenissue().data(), this->nextopenissue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->nextopenissue(), target);
  }

  // optional string nextOpenTime = 13;
  if (has_nextopentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextopentime().data(), this->nextopentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->nextopentime(), target);
  }

  // optional string secondOpenIssue = 14;
  if (has_secondopenissue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondopenissue().data(), this->secondopenissue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->secondopenissue(), target);
  }

  // optional string secondOpenTime = 15;
  if (has_secondopentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondopentime().data(), this->secondopentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->secondopentime(), target);
  }

  // optional int32 gamekey = 16;
  if (has_gamekey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gamekey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int caipiaoinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 2;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 usernum = 5;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional int32 tabletype = 6;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional string openawarddate = 7;
    if (has_openawarddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openawarddate());
    }

    // optional string fengpantime = 8;
    if (has_fengpantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fengpantime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string openawardtime = 9;
    if (has_openawardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openawardtime());
    }

    // optional string gid = 10;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // optional string award = 11;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

    // optional string nextopenissue = 12;
    if (has_nextopenissue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextopenissue());
    }

    // optional string nextOpenTime = 13;
    if (has_nextopentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextopentime());
    }

    // optional string secondOpenIssue = 14;
    if (has_secondopenissue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondopenissue());
    }

    // optional string secondOpenTime = 15;
    if (has_secondopentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondopentime());
    }

    // optional int32 gamekey = 16;
    if (has_gamekey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamekey());
    }

  }
  // repeated int32 standuser = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 1 * this->standuser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void caipiaoinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const caipiaoinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const caipiaoinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void caipiaoinfo::MergeFrom(const caipiaoinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  standuser_.MergeFrom(from.standuser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_openawarddate()) {
      set_openawarddate(from.openawarddate());
    }
    if (from.has_fengpantime()) {
      set_fengpantime(from.fengpantime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openawardtime()) {
      set_openawardtime(from.openawardtime());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_nextopenissue()) {
      set_nextopenissue(from.nextopenissue());
    }
    if (from.has_nextopentime()) {
      set_nextopentime(from.nextopentime());
    }
    if (from.has_secondopenissue()) {
      set_secondopenissue(from.secondopenissue());
    }
    if (from.has_secondopentime()) {
      set_secondopentime(from.secondopentime());
    }
    if (from.has_gamekey()) {
      set_gamekey(from.gamekey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void caipiaoinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void caipiaoinfo::CopyFrom(const caipiaoinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool caipiaoinfo::IsInitialized() const {

  return true;
}

void caipiaoinfo::Swap(caipiaoinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(frameid_, other->frameid_);
    std::swap(state_, other->state_);
    standuser_.Swap(&other->standuser_);
    std::swap(usernum_, other->usernum_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(openawarddate_, other->openawarddate_);
    std::swap(fengpantime_, other->fengpantime_);
    std::swap(openawardtime_, other->openawardtime_);
    std::swap(gid_, other->gid_);
    std::swap(award_, other->award_);
    std::swap(nextopenissue_, other->nextopenissue_);
    std::swap(nextopentime_, other->nextopentime_);
    std::swap(secondopenissue_, other->secondopenissue_);
    std::swap(secondopentime_, other->secondopentime_);
    std::swap(gamekey_, other->gamekey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata caipiaoinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = caipiaoinfo_descriptor_;
  metadata.reflection = caipiaoinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int caipiaohistory::kTableidFieldNumber;
const int caipiaohistory::kGidFieldNumber;
const int caipiaohistory::kAwardFieldNumber;
const int caipiaohistory::kGamekeyFieldNumber;
const int caipiaohistory::kOpenawardtimeFieldNumber;
#endif  // !_MSC_VER

caipiaohistory::caipiaohistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void caipiaohistory::InitAsDefaultInstance() {
}

caipiaohistory::caipiaohistory(const caipiaohistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void caipiaohistory::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamekey_ = 0;
  openawardtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

caipiaohistory::~caipiaohistory() {
  SharedDtor();
}

void caipiaohistory::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
    delete openawardtime_;
  }
  if (this != default_instance_) {
  }
}

void caipiaohistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* caipiaohistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return caipiaohistory_descriptor_;
}

const caipiaohistory& caipiaohistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fcaipiao_2eproto();
  return *default_instance_;
}

caipiaohistory* caipiaohistory::default_instance_ = NULL;

caipiaohistory* caipiaohistory::New() const {
  return new caipiaohistory;
}

void caipiaohistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
    gamekey_ = 0;
    if (has_openawardtime()) {
      if (openawardtime_ != &::google::protobuf::internal::kEmptyString) {
        openawardtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool caipiaohistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // optional string gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_award;
        break;
      }

      // optional string award = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gamekey;
        break;
      }

      // optional int32 gamekey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamekey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamekey_)));
          set_has_gamekey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_openawardtime;
        break;
      }

      // optional string openawardtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openawardtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openawardtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openawardtime().data(), this->openawardtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void caipiaohistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gid(), output);
  }

  // optional string award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->award(), output);
  }

  // optional int32 gamekey = 4;
  if (has_gamekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gamekey(), output);
  }

  // optional string openawardtime = 5;
  if (has_openawardtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openawardtime().data(), this->openawardtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->openawardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* caipiaohistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gid(), target);
  }

  // optional string award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->award(), target);
  }

  // optional int32 gamekey = 4;
  if (has_gamekey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gamekey(), target);
  }

  // optional string openawardtime = 5;
  if (has_openawardtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openawardtime().data(), this->openawardtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->openawardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int caipiaohistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional string gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // optional string award = 3;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

    // optional int32 gamekey = 4;
    if (has_gamekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamekey());
    }

    // optional string openawardtime = 5;
    if (has_openawardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openawardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void caipiaohistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const caipiaohistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const caipiaohistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void caipiaohistory::MergeFrom(const caipiaohistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_gamekey()) {
      set_gamekey(from.gamekey());
    }
    if (from.has_openawardtime()) {
      set_openawardtime(from.openawardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void caipiaohistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void caipiaohistory::CopyFrom(const caipiaohistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool caipiaohistory::IsInitialized() const {

  return true;
}

void caipiaohistory::Swap(caipiaohistory* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(gid_, other->gid_);
    std::swap(award_, other->award_);
    std::swap(gamekey_, other->gamekey_);
    std::swap(openawardtime_, other->openawardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata caipiaohistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = caipiaohistory_descriptor_;
  metadata.reflection = caipiaohistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int caipiaopersonhistory::kOrderidFieldNumber;
const int caipiaopersonhistory::kTableidFieldNumber;
const int caipiaopersonhistory::kGidFieldNumber;
const int caipiaopersonhistory::kAwardFieldNumber;
const int caipiaopersonhistory::kGamekeyFieldNumber;
const int caipiaopersonhistory::kPourjettonFieldNumber;
const int caipiaopersonhistory::kPourcontentFieldNumber;
const int caipiaopersonhistory::kOpentimesFieldNumber;
const int caipiaopersonhistory::kWinFieldNumber;
const int caipiaopersonhistory::kStateFieldNumber;
#endif  // !_MSC_VER

caipiaopersonhistory::caipiaopersonhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void caipiaopersonhistory::InitAsDefaultInstance() {
}

caipiaopersonhistory::caipiaopersonhistory(const caipiaopersonhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void caipiaopersonhistory::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = 0;
  tableid_ = 0;
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  award_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gamekey_ = 0;
  pourjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pourcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opentimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

caipiaopersonhistory::~caipiaopersonhistory() {
  SharedDtor();
}

void caipiaopersonhistory::SharedDtor() {
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (award_ != &::google::protobuf::internal::kEmptyString) {
    delete award_;
  }
  if (pourjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete pourjetton_;
  }
  if (pourcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete pourcontent_;
  }
  if (opentimes_ != &::google::protobuf::internal::kEmptyString) {
    delete opentimes_;
  }
  if (this != default_instance_) {
  }
}

void caipiaopersonhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* caipiaopersonhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return caipiaopersonhistory_descriptor_;
}

const caipiaopersonhistory& caipiaopersonhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fcaipiao_2eproto();
  return *default_instance_;
}

caipiaopersonhistory* caipiaopersonhistory::default_instance_ = NULL;

caipiaopersonhistory* caipiaopersonhistory::New() const {
  return new caipiaopersonhistory;
}

void caipiaopersonhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderid_ = 0;
    tableid_ = 0;
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_award()) {
      if (award_ != &::google::protobuf::internal::kEmptyString) {
        award_->clear();
      }
    }
    gamekey_ = 0;
    if (has_pourjetton()) {
      if (pourjetton_ != &::google::protobuf::internal::kEmptyString) {
        pourjetton_->clear();
      }
    }
    if (has_pourcontent()) {
      if (pourcontent_ != &::google::protobuf::internal::kEmptyString) {
        pourcontent_->clear();
      }
    }
    if (has_opentimes()) {
      if (opentimes_ != &::google::protobuf::internal::kEmptyString) {
        opentimes_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool caipiaopersonhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 orderid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gid;
        break;
      }

      // optional string gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_award;
        break;
      }

      // optional string award = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_award()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->award().data(), this->award().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gamekey;
        break;
      }

      // optional int32 gamekey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamekey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamekey_)));
          set_has_gamekey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pourjetton;
        break;
      }

      // optional string pourjetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pourjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pourjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pourjetton().data(), this->pourjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pourcontent;
        break;
      }

      // optional string pourcontent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pourcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pourcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pourcontent().data(), this->pourcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_opentimes;
        break;
      }

      // optional string opentimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opentimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opentimes().data(), this->opentimes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win;
        break;
      }

      // optional int32 win = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // optional int32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void caipiaopersonhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 orderid = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderid(), output);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional string gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gid(), output);
  }

  // optional string award = 4;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->award(), output);
  }

  // optional int32 gamekey = 5;
  if (has_gamekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gamekey(), output);
  }

  // optional string pourjetton = 6;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pourjetton().data(), this->pourjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pourjetton(), output);
  }

  // optional string pourcontent = 7;
  if (has_pourcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pourcontent().data(), this->pourcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pourcontent(), output);
  }

  // optional string opentimes = 8;
  if (has_opentimes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentimes().data(), this->opentimes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->opentimes(), output);
  }

  // optional int32 win = 9;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->win(), output);
  }

  // optional int32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* caipiaopersonhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 orderid = 1;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderid(), target);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional string gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gid(), target);
  }

  // optional string award = 4;
  if (has_award()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->award().data(), this->award().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->award(), target);
  }

  // optional int32 gamekey = 5;
  if (has_gamekey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gamekey(), target);
  }

  // optional string pourjetton = 6;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pourjetton().data(), this->pourjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pourjetton(), target);
  }

  // optional string pourcontent = 7;
  if (has_pourcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pourcontent().data(), this->pourcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pourcontent(), target);
  }

  // optional string opentimes = 8;
  if (has_opentimes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentimes().data(), this->opentimes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->opentimes(), target);
  }

  // optional int32 win = 9;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->win(), target);
  }

  // optional int32 state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int caipiaopersonhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 orderid = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional string gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // optional string award = 4;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->award());
    }

    // optional int32 gamekey = 5;
    if (has_gamekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamekey());
    }

    // optional string pourjetton = 6;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pourjetton());
    }

    // optional string pourcontent = 7;
    if (has_pourcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pourcontent());
    }

    // optional string opentimes = 8;
    if (has_opentimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opentimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 win = 9;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // optional int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void caipiaopersonhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const caipiaopersonhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const caipiaopersonhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void caipiaopersonhistory::MergeFrom(const caipiaopersonhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_gamekey()) {
      set_gamekey(from.gamekey());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
    if (from.has_pourcontent()) {
      set_pourcontent(from.pourcontent());
    }
    if (from.has_opentimes()) {
      set_opentimes(from.opentimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void caipiaopersonhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void caipiaopersonhistory::CopyFrom(const caipiaopersonhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool caipiaopersonhistory::IsInitialized() const {

  return true;
}

void caipiaopersonhistory::Swap(caipiaopersonhistory* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(tableid_, other->tableid_);
    std::swap(gid_, other->gid_);
    std::swap(award_, other->award_);
    std::swap(gamekey_, other->gamekey_);
    std::swap(pourjetton_, other->pourjetton_);
    std::swap(pourcontent_, other->pourcontent_);
    std::swap(opentimes_, other->opentimes_);
    std::swap(win_, other->win_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata caipiaopersonhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = caipiaopersonhistory_descriptor_;
  metadata.reflection = caipiaopersonhistory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
