// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_sxyx.proto

#ifndef PROTOBUF_st_5fsxyx_2eproto__INCLUDED
#define PROTOBUF_st_5fsxyx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fsxyx_2eproto();
void protobuf_AssignDesc_st_5fsxyx_2eproto();
void protobuf_ShutdownFile_st_5fsxyx_2eproto();

class sxyxjetton;
class sxyxplay;
class sxyxinfo;
class sxyxhistory;
class sxyxcard;
class sxyxpouerjetton;
class sxyxjettonrecordlist;
class sxyxjettonrecorinfo;
class sxyxgamehistoryinfo;

// ===================================================================

class sxyxjetton : public ::google::protobuf::Message {
 public:
  sxyxjetton();
  virtual ~sxyxjetton();

  sxyxjetton(const sxyxjetton& from);

  inline sxyxjetton& operator=(const sxyxjetton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxjetton& default_instance();

  void Swap(sxyxjetton* other);

  // implements Message ----------------------------------------------

  sxyxjetton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxjetton& from);
  void MergeFrom(const sxyxjetton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourtype = 2;
  inline bool has_pourtype() const;
  inline void clear_pourtype();
  static const int kPourtypeFieldNumber = 2;
  inline ::google::protobuf::int32 pourtype() const;
  inline void set_pourtype(::google::protobuf::int32 value);

  // optional int32 jetton = 3;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 3;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sxyxjetton)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourtype();
  inline void clear_has_pourtype();
  inline void set_has_jetton();
  inline void clear_has_jetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourtype_;
  ::google::protobuf::int32 jetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxjetton* default_instance_;
};
// -------------------------------------------------------------------

class sxyxplay : public ::google::protobuf::Message {
 public:
  sxyxplay();
  virtual ~sxyxplay();

  sxyxplay(const sxyxplay& from);

  inline sxyxplay& operator=(const sxyxplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxplay& default_instance();

  void Swap(sxyxplay* other);

  // implements Message ----------------------------------------------

  sxyxplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxplay& from);
  void MergeFrom(const sxyxplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playid = 1;
  inline bool has_playid() const;
  inline void clear_playid();
  static const int kPlayidFieldNumber = 1;
  inline ::google::protobuf::int32 playid() const;
  inline void set_playid(::google::protobuf::int32 value);

  // repeated int32 cardlist = 2;
  inline int cardlist_size() const;
  inline void clear_cardlist();
  static const int kCardlistFieldNumber = 2;
  inline ::google::protobuf::int32 cardlist(int index) const;
  inline void set_cardlist(int index, ::google::protobuf::int32 value);
  inline void add_cardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardlist();

  // optional int32 cardtype = 3;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardtypeFieldNumber = 3;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sxyxplay)
 private:
  inline void set_has_playid();
  inline void clear_has_playid();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardlist_;
  ::google::protobuf::int32 playid_;
  ::google::protobuf::int32 cardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxplay* default_instance_;
};
// -------------------------------------------------------------------

class sxyxinfo : public ::google::protobuf::Message {
 public:
  sxyxinfo();
  virtual ~sxyxinfo();

  sxyxinfo(const sxyxinfo& from);

  inline sxyxinfo& operator=(const sxyxinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxinfo& default_instance();

  void Swap(sxyxinfo* other);

  // implements Message ----------------------------------------------

  sxyxinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxinfo& from);
  void MergeFrom(const sxyxinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 frameid = 2;
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 2;
  inline ::google::protobuf::int32 frameid() const;
  inline void set_frameid(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 4;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 4;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated int32 situser = 5;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 5;
  inline ::google::protobuf::int32 situser(int index) const;
  inline void set_situser(int index, ::google::protobuf::int32 value);
  inline void add_situser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      situser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_situser();

  // repeated int32 standuser = 6;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 6;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional int32 usernum = 7;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 7;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 bankerid = 8;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankeridFieldNumber = 8;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // optional string bankerjetton = 9;
  inline bool has_bankerjetton() const;
  inline void clear_bankerjetton();
  static const int kBankerjettonFieldNumber = 9;
  inline const ::std::string& bankerjetton() const;
  inline void set_bankerjetton(const ::std::string& value);
  inline void set_bankerjetton(const char* value);
  inline void set_bankerjetton(const char* value, size_t size);
  inline ::std::string* mutable_bankerjetton();
  inline ::std::string* release_bankerjetton();
  inline void set_allocated_bankerjetton(::std::string* bankerjetton);

  // optional int32 maxuser = 10;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 10;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // optional string faceid = 11;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 11;
  inline const ::std::string& faceid() const;
  inline void set_faceid(const ::std::string& value);
  inline void set_faceid(const char* value);
  inline void set_faceid(const char* value, size_t size);
  inline ::std::string* mutable_faceid();
  inline ::std::string* release_faceid();
  inline void set_allocated_faceid(::std::string* faceid);

  // optional string bankername = 12;
  inline bool has_bankername() const;
  inline void clear_bankername();
  static const int kBankernameFieldNumber = 12;
  inline const ::std::string& bankername() const;
  inline void set_bankername(const ::std::string& value);
  inline void set_bankername(const char* value);
  inline void set_bankername(const char* value, size_t size);
  inline ::std::string* mutable_bankername();
  inline ::std::string* release_bankername();
  inline void set_allocated_bankername(::std::string* bankername);

  // optional int32 applydrop = 13;
  inline bool has_applydrop() const;
  inline void clear_applydrop();
  static const int kApplydropFieldNumber = 13;
  inline ::google::protobuf::int32 applydrop() const;
  inline void set_applydrop(::google::protobuf::int32 value);

  // optional int32 baccatattype = 14;
  inline bool has_baccatattype() const;
  inline void clear_baccatattype();
  static const int kBaccatattypeFieldNumber = 14;
  inline ::google::protobuf::int32 baccatattype() const;
  inline void set_baccatattype(::google::protobuf::int32 value);

  // optional int32 tabletype = 15;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 15;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 robotnum = 16;
  inline bool has_robotnum() const;
  inline void clear_robotnum();
  static const int kRobotnumFieldNumber = 16;
  inline ::google::protobuf::int32 robotnum() const;
  inline void set_robotnum(::google::protobuf::int32 value);

  // optional int32 pilecardcont = 17;
  inline bool has_pilecardcont() const;
  inline void clear_pilecardcont();
  static const int kPilecardcontFieldNumber = 17;
  inline ::google::protobuf::int32 pilecardcont() const;
  inline void set_pilecardcont(::google::protobuf::int32 value);

  // repeated int32 historylist = 18;
  inline int historylist_size() const;
  inline void clear_historylist();
  static const int kHistorylistFieldNumber = 18;
  inline ::google::protobuf::int32 historylist(int index) const;
  inline void set_historylist(int index, ::google::protobuf::int32 value);
  inline void add_historylist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      historylist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_historylist();

  // repeated int32 xcardlist = 19;
  inline int xcardlist_size() const;
  inline void clear_xcardlist();
  static const int kXcardlistFieldNumber = 19;
  inline ::google::protobuf::int32 xcardlist(int index) const;
  inline void set_xcardlist(int index, ::google::protobuf::int32 value);
  inline void add_xcardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      xcardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_xcardlist();

  // optional int32 xpoint = 20;
  inline bool has_xpoint() const;
  inline void clear_xpoint();
  static const int kXpointFieldNumber = 20;
  inline ::google::protobuf::int32 xpoint() const;
  inline void set_xpoint(::google::protobuf::int32 value);

  // repeated int32 zcardlist = 21;
  inline int zcardlist_size() const;
  inline void clear_zcardlist();
  static const int kZcardlistFieldNumber = 21;
  inline ::google::protobuf::int32 zcardlist(int index) const;
  inline void set_zcardlist(int index, ::google::protobuf::int32 value);
  inline void add_zcardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      zcardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_zcardlist();

  // optional int32 zpoint = 22;
  inline bool has_zpoint() const;
  inline void clear_zpoint();
  static const int kZpointFieldNumber = 22;
  inline ::google::protobuf::int32 zpoint() const;
  inline void set_zpoint(::google::protobuf::int32 value);

  // repeated int32 bankerlist = 23;
  inline int bankerlist_size() const;
  inline void clear_bankerlist();
  static const int kBankerlistFieldNumber = 23;
  inline ::google::protobuf::int32 bankerlist(int index) const;
  inline void set_bankerlist(int index, ::google::protobuf::int32 value);
  inline void add_bankerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bankerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bankerlist();

  // optional string bankerlimit = 24;
  inline bool has_bankerlimit() const;
  inline void clear_bankerlimit();
  static const int kBankerlimitFieldNumber = 24;
  inline const ::std::string& bankerlimit() const;
  inline void set_bankerlimit(const ::std::string& value);
  inline void set_bankerlimit(const char* value);
  inline void set_bankerlimit(const char* value, size_t size);
  inline ::std::string* mutable_bankerlimit();
  inline ::std::string* release_bankerlimit();
  inline void set_allocated_bankerlimit(::std::string* bankerlimit);

  // optional int32 maxrobotnum = 25;
  inline bool has_maxrobotnum() const;
  inline void clear_maxrobotnum();
  static const int kMaxrobotnumFieldNumber = 25;
  inline ::google::protobuf::int32 maxrobotnum() const;
  inline void set_maxrobotnum(::google::protobuf::int32 value);

  // optional int32 julebuid = 26;
  inline bool has_julebuid() const;
  inline void clear_julebuid();
  static const int kJulebuidFieldNumber = 26;
  inline ::google::protobuf::int32 julebuid() const;
  inline void set_julebuid(::google::protobuf::int32 value);

  // optional int32 bankercount = 27;
  inline bool has_bankercount() const;
  inline void clear_bankercount();
  static const int kBankercountFieldNumber = 27;
  inline ::google::protobuf::int32 bankercount() const;
  inline void set_bankercount(::google::protobuf::int32 value);

  // repeated int32 bankercountlist = 28;
  inline int bankercountlist_size() const;
  inline void clear_bankercountlist();
  static const int kBankercountlistFieldNumber = 28;
  inline ::google::protobuf::int32 bankercountlist(int index) const;
  inline void set_bankercountlist(int index, ::google::protobuf::int32 value);
  inline void add_bankercountlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bankercountlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bankercountlist();

  // optional string legalkey = 29;
  inline bool has_legalkey() const;
  inline void clear_legalkey();
  static const int kLegalkeyFieldNumber = 29;
  inline const ::std::string& legalkey() const;
  inline void set_legalkey(const ::std::string& value);
  inline void set_legalkey(const char* value);
  inline void set_legalkey(const char* value, size_t size);
  inline ::std::string* mutable_legalkey();
  inline ::std::string* release_legalkey();
  inline void set_allocated_legalkey(::std::string* legalkey);

  // @@protoc_insertion_point(class_scope:progame.sxyxinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_bankerjetton();
  inline void clear_has_bankerjetton();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_bankername();
  inline void clear_has_bankername();
  inline void set_has_applydrop();
  inline void clear_has_applydrop();
  inline void set_has_baccatattype();
  inline void clear_has_baccatattype();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_robotnum();
  inline void clear_has_robotnum();
  inline void set_has_pilecardcont();
  inline void clear_has_pilecardcont();
  inline void set_has_xpoint();
  inline void clear_has_xpoint();
  inline void set_has_zpoint();
  inline void clear_has_zpoint();
  inline void set_has_bankerlimit();
  inline void clear_has_bankerlimit();
  inline void set_has_maxrobotnum();
  inline void clear_has_maxrobotnum();
  inline void set_has_julebuid();
  inline void clear_has_julebuid();
  inline void set_has_bankercount();
  inline void clear_has_bankercount();
  inline void set_has_legalkey();
  inline void clear_has_legalkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > situser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 bankerid_;
  ::std::string* bankerjetton_;
  ::std::string* faceid_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 applydrop_;
  ::std::string* bankername_;
  ::google::protobuf::int32 baccatattype_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 robotnum_;
  ::google::protobuf::int32 pilecardcont_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > historylist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > xcardlist_;
  ::google::protobuf::int32 xpoint_;
  ::google::protobuf::int32 zpoint_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > zcardlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bankerlist_;
  ::std::string* bankerlimit_;
  ::google::protobuf::int32 maxrobotnum_;
  ::google::protobuf::int32 julebuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bankercountlist_;
  ::std::string* legalkey_;
  ::google::protobuf::int32 bankercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxinfo* default_instance_;
};
// -------------------------------------------------------------------

class sxyxhistory : public ::google::protobuf::Message {
 public:
  sxyxhistory();
  virtual ~sxyxhistory();

  sxyxhistory(const sxyxhistory& from);

  inline sxyxhistory& operator=(const sxyxhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxhistory& default_instance();

  void Swap(sxyxhistory* other);

  // implements Message ----------------------------------------------

  sxyxhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxhistory& from);
  void MergeFrom(const sxyxhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Xpoint = 1;
  inline bool has_xpoint() const;
  inline void clear_xpoint();
  static const int kXpointFieldNumber = 1;
  inline ::google::protobuf::int32 xpoint() const;
  inline void set_xpoint(::google::protobuf::int32 value);

  // optional int32 ZPoint = 2;
  inline bool has_zpoint() const;
  inline void clear_zpoint();
  static const int kZPointFieldNumber = 2;
  inline ::google::protobuf::int32 zpoint() const;
  inline void set_zpoint(::google::protobuf::int32 value);

  // optional int32 WinResult = 3;
  inline bool has_winresult() const;
  inline void clear_winresult();
  static const int kWinResultFieldNumber = 3;
  inline ::google::protobuf::int32 winresult() const;
  inline void set_winresult(::google::protobuf::int32 value);

  // optional int32 Duizi = 4;
  inline bool has_duizi() const;
  inline void clear_duizi();
  static const int kDuiziFieldNumber = 4;
  inline ::google::protobuf::int32 duizi() const;
  inline void set_duizi(::google::protobuf::int32 value);

  // optional string recordidentification = 5;
  inline bool has_recordidentification() const;
  inline void clear_recordidentification();
  static const int kRecordidentificationFieldNumber = 5;
  inline const ::std::string& recordidentification() const;
  inline void set_recordidentification(const ::std::string& value);
  inline void set_recordidentification(const char* value);
  inline void set_recordidentification(const char* value, size_t size);
  inline ::std::string* mutable_recordidentification();
  inline ::std::string* release_recordidentification();
  inline void set_allocated_recordidentification(::std::string* recordidentification);

  // @@protoc_insertion_point(class_scope:progame.sxyxhistory)
 private:
  inline void set_has_xpoint();
  inline void clear_has_xpoint();
  inline void set_has_zpoint();
  inline void clear_has_zpoint();
  inline void set_has_winresult();
  inline void clear_has_winresult();
  inline void set_has_duizi();
  inline void clear_has_duizi();
  inline void set_has_recordidentification();
  inline void clear_has_recordidentification();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 xpoint_;
  ::google::protobuf::int32 zpoint_;
  ::google::protobuf::int32 winresult_;
  ::google::protobuf::int32 duizi_;
  ::std::string* recordidentification_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxhistory* default_instance_;
};
// -------------------------------------------------------------------

class sxyxcard : public ::google::protobuf::Message {
 public:
  sxyxcard();
  virtual ~sxyxcard();

  sxyxcard(const sxyxcard& from);

  inline sxyxcard& operator=(const sxyxcard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxcard& default_instance();

  void Swap(sxyxcard* other);

  // implements Message ----------------------------------------------

  sxyxcard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxcard& from);
  void MergeFrom(const sxyxcard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 poker = 1;
  inline int poker_size() const;
  inline void clear_poker();
  static const int kPokerFieldNumber = 1;
  inline ::google::protobuf::int32 poker(int index) const;
  inline void set_poker(int index, ::google::protobuf::int32 value);
  inline void add_poker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      poker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_poker();

  // @@protoc_insertion_point(class_scope:progame.sxyxcard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > poker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxcard* default_instance_;
};
// -------------------------------------------------------------------

class sxyxpouerjetton : public ::google::protobuf::Message {
 public:
  sxyxpouerjetton();
  virtual ~sxyxpouerjetton();

  sxyxpouerjetton(const sxyxpouerjetton& from);

  inline sxyxpouerjetton& operator=(const sxyxpouerjetton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxpouerjetton& default_instance();

  void Swap(sxyxpouerjetton* other);

  // implements Message ----------------------------------------------

  sxyxpouerjetton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxpouerjetton& from);
  void MergeFrom(const sxyxpouerjetton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 userid = 1;
  inline int userid_size() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid(int index) const;
  inline void set_userid(int index, ::google::protobuf::int32 value);
  inline void add_userid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userid();

  // repeated int32 jetton = 2;
  inline int jetton_size() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 2;
  inline ::google::protobuf::int32 jetton(int index) const;
  inline void set_jetton(int index, ::google::protobuf::int32 value);
  inline void add_jetton(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jetton() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jetton();

  // repeated int32 pourtype = 3;
  inline int pourtype_size() const;
  inline void clear_pourtype();
  static const int kPourtypeFieldNumber = 3;
  inline ::google::protobuf::int32 pourtype(int index) const;
  inline void set_pourtype(int index, ::google::protobuf::int32 value);
  inline void add_pourtype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pourtype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pourtype();

  // @@protoc_insertion_point(class_scope:progame.sxyxpouerjetton)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jetton_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pourtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxpouerjetton* default_instance_;
};
// -------------------------------------------------------------------

class sxyxjettonrecordlist : public ::google::protobuf::Message {
 public:
  sxyxjettonrecordlist();
  virtual ~sxyxjettonrecordlist();

  sxyxjettonrecordlist(const sxyxjettonrecordlist& from);

  inline sxyxjettonrecordlist& operator=(const sxyxjettonrecordlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxjettonrecordlist& default_instance();

  void Swap(sxyxjettonrecordlist* other);

  // implements Message ----------------------------------------------

  sxyxjettonrecordlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxjettonrecordlist& from);
  void MergeFrom(const sxyxjettonrecordlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 jetton = 1;
  inline int jetton_size() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 1;
  inline ::google::protobuf::int32 jetton(int index) const;
  inline void set_jetton(int index, ::google::protobuf::int32 value);
  inline void add_jetton(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jetton() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jetton();

  // repeated int32 wincondition = 2;
  inline int wincondition_size() const;
  inline void clear_wincondition();
  static const int kWinconditionFieldNumber = 2;
  inline ::google::protobuf::int32 wincondition(int index) const;
  inline void set_wincondition(int index, ::google::protobuf::int32 value);
  inline void add_wincondition(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wincondition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wincondition();

  // @@protoc_insertion_point(class_scope:progame.sxyxjettonrecordlist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jetton_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wincondition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxjettonrecordlist* default_instance_;
};
// -------------------------------------------------------------------

class sxyxjettonrecorinfo : public ::google::protobuf::Message {
 public:
  sxyxjettonrecorinfo();
  virtual ~sxyxjettonrecorinfo();

  sxyxjettonrecorinfo(const sxyxjettonrecorinfo& from);

  inline sxyxjettonrecorinfo& operator=(const sxyxjettonrecorinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxjettonrecorinfo& default_instance();

  void Swap(sxyxjettonrecorinfo* other);

  // implements Message ----------------------------------------------

  sxyxjettonrecorinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxjettonrecorinfo& from);
  void MergeFrom(const sxyxjettonrecorinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 jetton = 2;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 2;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 winnum = 3;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 3;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional string jifen = 4;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 4;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional string nickname = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string facename = 6;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFacenameFieldNumber = 6;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // @@protoc_insertion_point(class_scope:progame.sxyxjettonrecorinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_facename();
  inline void clear_has_facename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 jetton_;
  ::std::string* jifen_;
  ::std::string* nickname_;
  ::std::string* facename_;
  ::google::protobuf::int32 winnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxjettonrecorinfo* default_instance_;
};
// -------------------------------------------------------------------

class sxyxgamehistoryinfo : public ::google::protobuf::Message {
 public:
  sxyxgamehistoryinfo();
  virtual ~sxyxgamehistoryinfo();

  sxyxgamehistoryinfo(const sxyxgamehistoryinfo& from);

  inline sxyxgamehistoryinfo& operator=(const sxyxgamehistoryinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sxyxgamehistoryinfo& default_instance();

  void Swap(sxyxgamehistoryinfo* other);

  // implements Message ----------------------------------------------

  sxyxgamehistoryinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sxyxgamehistoryinfo& from);
  void MergeFrom(const sxyxgamehistoryinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional string tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional int32 magnification = 3;
  inline bool has_magnification() const;
  inline void clear_magnification();
  static const int kMagnificationFieldNumber = 3;
  inline ::google::protobuf::int32 magnification() const;
  inline void set_magnification(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated string recordidentification = 6;
  inline int recordidentification_size() const;
  inline void clear_recordidentification();
  static const int kRecordidentificationFieldNumber = 6;
  inline const ::std::string& recordidentification(int index) const;
  inline ::std::string* mutable_recordidentification(int index);
  inline void set_recordidentification(int index, const ::std::string& value);
  inline void set_recordidentification(int index, const char* value);
  inline void set_recordidentification(int index, const char* value, size_t size);
  inline ::std::string* add_recordidentification();
  inline void add_recordidentification(const ::std::string& value);
  inline void add_recordidentification(const char* value);
  inline void add_recordidentification(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recordidentification() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recordidentification();

  // repeated int32 Xpoint = 7;
  inline int xpoint_size() const;
  inline void clear_xpoint();
  static const int kXpointFieldNumber = 7;
  inline ::google::protobuf::int32 xpoint(int index) const;
  inline void set_xpoint(int index, ::google::protobuf::int32 value);
  inline void add_xpoint(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      xpoint() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_xpoint();

  // repeated int32 ZPoint = 8;
  inline int zpoint_size() const;
  inline void clear_zpoint();
  static const int kZPointFieldNumber = 8;
  inline ::google::protobuf::int32 zpoint(int index) const;
  inline void set_zpoint(int index, ::google::protobuf::int32 value);
  inline void add_zpoint(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      zpoint() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_zpoint();

  // repeated int32 WinResult = 9;
  inline int winresult_size() const;
  inline void clear_winresult();
  static const int kWinResultFieldNumber = 9;
  inline ::google::protobuf::int32 winresult(int index) const;
  inline void set_winresult(int index, ::google::protobuf::int32 value);
  inline void add_winresult(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winresult() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winresult();

  // repeated int32 Duizi = 10;
  inline int duizi_size() const;
  inline void clear_duizi();
  static const int kDuiziFieldNumber = 10;
  inline ::google::protobuf::int32 duizi(int index) const;
  inline void set_duizi(int index, ::google::protobuf::int32 value);
  inline void add_duizi(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      duizi() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_duizi();

  // optional int32 limitred = 11;
  inline bool has_limitred() const;
  inline void clear_limitred();
  static const int kLimitredFieldNumber = 11;
  inline ::google::protobuf::int32 limitred() const;
  inline void set_limitred(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sxyxgamehistoryinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_magnification();
  inline void clear_has_magnification();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_limitred();
  inline void clear_has_limitred();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 magnification_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recordidentification_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > xpoint_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > zpoint_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winresult_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > duizi_;
  ::google::protobuf::int32 limitred_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsxyx_2eproto();
  friend void protobuf_AssignDesc_st_5fsxyx_2eproto();
  friend void protobuf_ShutdownFile_st_5fsxyx_2eproto();

  void InitAsDefaultInstance();
  static sxyxgamehistoryinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// sxyxjetton

// optional int32 userid = 1;
inline bool sxyxjetton::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sxyxjetton::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sxyxjetton::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sxyxjetton::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 sxyxjetton::userid() const {
  return userid_;
}
inline void sxyxjetton::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourtype = 2;
inline bool sxyxjetton::has_pourtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sxyxjetton::set_has_pourtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sxyxjetton::clear_has_pourtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sxyxjetton::clear_pourtype() {
  pourtype_ = 0;
  clear_has_pourtype();
}
inline ::google::protobuf::int32 sxyxjetton::pourtype() const {
  return pourtype_;
}
inline void sxyxjetton::set_pourtype(::google::protobuf::int32 value) {
  set_has_pourtype();
  pourtype_ = value;
}

// optional int32 jetton = 3;
inline bool sxyxjetton::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sxyxjetton::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sxyxjetton::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sxyxjetton::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 sxyxjetton::jetton() const {
  return jetton_;
}
inline void sxyxjetton::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// -------------------------------------------------------------------

// sxyxplay

// optional int32 playid = 1;
inline bool sxyxplay::has_playid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sxyxplay::set_has_playid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sxyxplay::clear_has_playid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sxyxplay::clear_playid() {
  playid_ = 0;
  clear_has_playid();
}
inline ::google::protobuf::int32 sxyxplay::playid() const {
  return playid_;
}
inline void sxyxplay::set_playid(::google::protobuf::int32 value) {
  set_has_playid();
  playid_ = value;
}

// repeated int32 cardlist = 2;
inline int sxyxplay::cardlist_size() const {
  return cardlist_.size();
}
inline void sxyxplay::clear_cardlist() {
  cardlist_.Clear();
}
inline ::google::protobuf::int32 sxyxplay::cardlist(int index) const {
  return cardlist_.Get(index);
}
inline void sxyxplay::set_cardlist(int index, ::google::protobuf::int32 value) {
  cardlist_.Set(index, value);
}
inline void sxyxplay::add_cardlist(::google::protobuf::int32 value) {
  cardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxplay::cardlist() const {
  return cardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxplay::mutable_cardlist() {
  return &cardlist_;
}

// optional int32 cardtype = 3;
inline bool sxyxplay::has_cardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sxyxplay::set_has_cardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sxyxplay::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sxyxplay::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 sxyxplay::cardtype() const {
  return cardtype_;
}
inline void sxyxplay::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// -------------------------------------------------------------------

// sxyxinfo

// optional int32 tableid = 1;
inline bool sxyxinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sxyxinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sxyxinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sxyxinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 sxyxinfo::tableid() const {
  return tableid_;
}
inline void sxyxinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 frameid = 2;
inline bool sxyxinfo::has_frameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sxyxinfo::set_has_frameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sxyxinfo::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sxyxinfo::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 sxyxinfo::frameid() const {
  return frameid_;
}
inline void sxyxinfo::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
}

// optional int32 state = 3;
inline bool sxyxinfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sxyxinfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sxyxinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sxyxinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 sxyxinfo::state() const {
  return state_;
}
inline void sxyxinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 4;
inline bool sxyxinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sxyxinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sxyxinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sxyxinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 sxyxinfo::timemark() const {
  return timemark_;
}
inline void sxyxinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated int32 situser = 5;
inline int sxyxinfo::situser_size() const {
  return situser_.size();
}
inline void sxyxinfo::clear_situser() {
  situser_.Clear();
}
inline ::google::protobuf::int32 sxyxinfo::situser(int index) const {
  return situser_.Get(index);
}
inline void sxyxinfo::set_situser(int index, ::google::protobuf::int32 value) {
  situser_.Set(index, value);
}
inline void sxyxinfo::add_situser(::google::protobuf::int32 value) {
  situser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxinfo::mutable_situser() {
  return &situser_;
}

// repeated int32 standuser = 6;
inline int sxyxinfo::standuser_size() const {
  return standuser_.size();
}
inline void sxyxinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 sxyxinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void sxyxinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void sxyxinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 usernum = 7;
inline bool sxyxinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sxyxinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sxyxinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sxyxinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 sxyxinfo::usernum() const {
  return usernum_;
}
inline void sxyxinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 bankerid = 8;
inline bool sxyxinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sxyxinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sxyxinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sxyxinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 sxyxinfo::bankerid() const {
  return bankerid_;
}
inline void sxyxinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// optional string bankerjetton = 9;
inline bool sxyxinfo::has_bankerjetton() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sxyxinfo::set_has_bankerjetton() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sxyxinfo::clear_has_bankerjetton() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sxyxinfo::clear_bankerjetton() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    bankerjetton_->clear();
  }
  clear_has_bankerjetton();
}
inline const ::std::string& sxyxinfo::bankerjetton() const {
  return *bankerjetton_;
}
inline void sxyxinfo::set_bankerjetton(const ::std::string& value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void sxyxinfo::set_bankerjetton(const char* value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void sxyxinfo::set_bankerjetton(const char* value, size_t size) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxinfo::mutable_bankerjetton() {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  return bankerjetton_;
}
inline ::std::string* sxyxinfo::release_bankerjetton() {
  clear_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerjetton_;
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxinfo::set_allocated_bankerjetton(::std::string* bankerjetton) {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankerjetton) {
    set_has_bankerjetton();
    bankerjetton_ = bankerjetton;
  } else {
    clear_has_bankerjetton();
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxuser = 10;
inline bool sxyxinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sxyxinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sxyxinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sxyxinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 sxyxinfo::maxuser() const {
  return maxuser_;
}
inline void sxyxinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// optional string faceid = 11;
inline bool sxyxinfo::has_faceid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sxyxinfo::set_has_faceid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sxyxinfo::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sxyxinfo::clear_faceid() {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    faceid_->clear();
  }
  clear_has_faceid();
}
inline const ::std::string& sxyxinfo::faceid() const {
  return *faceid_;
}
inline void sxyxinfo::set_faceid(const ::std::string& value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void sxyxinfo::set_faceid(const char* value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void sxyxinfo::set_faceid(const char* value, size_t size) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxinfo::mutable_faceid() {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  return faceid_;
}
inline ::std::string* sxyxinfo::release_faceid() {
  clear_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faceid_;
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxinfo::set_allocated_faceid(::std::string* faceid) {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (faceid) {
    set_has_faceid();
    faceid_ = faceid;
  } else {
    clear_has_faceid();
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankername = 12;
inline bool sxyxinfo::has_bankername() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sxyxinfo::set_has_bankername() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sxyxinfo::clear_has_bankername() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sxyxinfo::clear_bankername() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    bankername_->clear();
  }
  clear_has_bankername();
}
inline const ::std::string& sxyxinfo::bankername() const {
  return *bankername_;
}
inline void sxyxinfo::set_bankername(const ::std::string& value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void sxyxinfo::set_bankername(const char* value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void sxyxinfo::set_bankername(const char* value, size_t size) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxinfo::mutable_bankername() {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  return bankername_;
}
inline ::std::string* sxyxinfo::release_bankername() {
  clear_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankername_;
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxinfo::set_allocated_bankername(::std::string* bankername) {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankername) {
    set_has_bankername();
    bankername_ = bankername;
  } else {
    clear_has_bankername();
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 applydrop = 13;
inline bool sxyxinfo::has_applydrop() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sxyxinfo::set_has_applydrop() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sxyxinfo::clear_has_applydrop() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sxyxinfo::clear_applydrop() {
  applydrop_ = 0;
  clear_has_applydrop();
}
inline ::google::protobuf::int32 sxyxinfo::applydrop() const {
  return applydrop_;
}
inline void sxyxinfo::set_applydrop(::google::protobuf::int32 value) {
  set_has_applydrop();
  applydrop_ = value;
}

// optional int32 baccatattype = 14;
inline bool sxyxinfo::has_baccatattype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sxyxinfo::set_has_baccatattype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sxyxinfo::clear_has_baccatattype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sxyxinfo::clear_baccatattype() {
  baccatattype_ = 0;
  clear_has_baccatattype();
}
inline ::google::protobuf::int32 sxyxinfo::baccatattype() const {
  return baccatattype_;
}
inline void sxyxinfo::set_baccatattype(::google::protobuf::int32 value) {
  set_has_baccatattype();
  baccatattype_ = value;
}

// optional int32 tabletype = 15;
inline bool sxyxinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sxyxinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sxyxinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sxyxinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 sxyxinfo::tabletype() const {
  return tabletype_;
}
inline void sxyxinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 robotnum = 16;
inline bool sxyxinfo::has_robotnum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sxyxinfo::set_has_robotnum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sxyxinfo::clear_has_robotnum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sxyxinfo::clear_robotnum() {
  robotnum_ = 0;
  clear_has_robotnum();
}
inline ::google::protobuf::int32 sxyxinfo::robotnum() const {
  return robotnum_;
}
inline void sxyxinfo::set_robotnum(::google::protobuf::int32 value) {
  set_has_robotnum();
  robotnum_ = value;
}

// optional int32 pilecardcont = 17;
inline bool sxyxinfo::has_pilecardcont() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sxyxinfo::set_has_pilecardcont() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sxyxinfo::clear_has_pilecardcont() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sxyxinfo::clear_pilecardcont() {
  pilecardcont_ = 0;
  clear_has_pilecardcont();
}
inline ::google::protobuf::int32 sxyxinfo::pilecardcont() const {
  return pilecardcont_;
}
inline void sxyxinfo::set_pilecardcont(::google::protobuf::int32 value) {
  set_has_pilecardcont();
  pilecardcont_ = value;
}

// repeated int32 historylist = 18;
inline int sxyxinfo::historylist_size() const {
  return historylist_.size();
}
inline void sxyxinfo::clear_historylist() {
  historylist_.Clear();
}
inline ::google::protobuf::int32 sxyxinfo::historylist(int index) const {
  return historylist_.Get(index);
}
inline void sxyxinfo::set_historylist(int index, ::google::protobuf::int32 value) {
  historylist_.Set(index, value);
}
inline void sxyxinfo::add_historylist(::google::protobuf::int32 value) {
  historylist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxinfo::historylist() const {
  return historylist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxinfo::mutable_historylist() {
  return &historylist_;
}

// repeated int32 xcardlist = 19;
inline int sxyxinfo::xcardlist_size() const {
  return xcardlist_.size();
}
inline void sxyxinfo::clear_xcardlist() {
  xcardlist_.Clear();
}
inline ::google::protobuf::int32 sxyxinfo::xcardlist(int index) const {
  return xcardlist_.Get(index);
}
inline void sxyxinfo::set_xcardlist(int index, ::google::protobuf::int32 value) {
  xcardlist_.Set(index, value);
}
inline void sxyxinfo::add_xcardlist(::google::protobuf::int32 value) {
  xcardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxinfo::xcardlist() const {
  return xcardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxinfo::mutable_xcardlist() {
  return &xcardlist_;
}

// optional int32 xpoint = 20;
inline bool sxyxinfo::has_xpoint() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sxyxinfo::set_has_xpoint() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sxyxinfo::clear_has_xpoint() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sxyxinfo::clear_xpoint() {
  xpoint_ = 0;
  clear_has_xpoint();
}
inline ::google::protobuf::int32 sxyxinfo::xpoint() const {
  return xpoint_;
}
inline void sxyxinfo::set_xpoint(::google::protobuf::int32 value) {
  set_has_xpoint();
  xpoint_ = value;
}

// repeated int32 zcardlist = 21;
inline int sxyxinfo::zcardlist_size() const {
  return zcardlist_.size();
}
inline void sxyxinfo::clear_zcardlist() {
  zcardlist_.Clear();
}
inline ::google::protobuf::int32 sxyxinfo::zcardlist(int index) const {
  return zcardlist_.Get(index);
}
inline void sxyxinfo::set_zcardlist(int index, ::google::protobuf::int32 value) {
  zcardlist_.Set(index, value);
}
inline void sxyxinfo::add_zcardlist(::google::protobuf::int32 value) {
  zcardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxinfo::zcardlist() const {
  return zcardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxinfo::mutable_zcardlist() {
  return &zcardlist_;
}

// optional int32 zpoint = 22;
inline bool sxyxinfo::has_zpoint() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sxyxinfo::set_has_zpoint() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sxyxinfo::clear_has_zpoint() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sxyxinfo::clear_zpoint() {
  zpoint_ = 0;
  clear_has_zpoint();
}
inline ::google::protobuf::int32 sxyxinfo::zpoint() const {
  return zpoint_;
}
inline void sxyxinfo::set_zpoint(::google::protobuf::int32 value) {
  set_has_zpoint();
  zpoint_ = value;
}

// repeated int32 bankerlist = 23;
inline int sxyxinfo::bankerlist_size() const {
  return bankerlist_.size();
}
inline void sxyxinfo::clear_bankerlist() {
  bankerlist_.Clear();
}
inline ::google::protobuf::int32 sxyxinfo::bankerlist(int index) const {
  return bankerlist_.Get(index);
}
inline void sxyxinfo::set_bankerlist(int index, ::google::protobuf::int32 value) {
  bankerlist_.Set(index, value);
}
inline void sxyxinfo::add_bankerlist(::google::protobuf::int32 value) {
  bankerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxinfo::bankerlist() const {
  return bankerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxinfo::mutable_bankerlist() {
  return &bankerlist_;
}

// optional string bankerlimit = 24;
inline bool sxyxinfo::has_bankerlimit() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sxyxinfo::set_has_bankerlimit() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sxyxinfo::clear_has_bankerlimit() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sxyxinfo::clear_bankerlimit() {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    bankerlimit_->clear();
  }
  clear_has_bankerlimit();
}
inline const ::std::string& sxyxinfo::bankerlimit() const {
  return *bankerlimit_;
}
inline void sxyxinfo::set_bankerlimit(const ::std::string& value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void sxyxinfo::set_bankerlimit(const char* value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void sxyxinfo::set_bankerlimit(const char* value, size_t size) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxinfo::mutable_bankerlimit() {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  return bankerlimit_;
}
inline ::std::string* sxyxinfo::release_bankerlimit() {
  clear_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerlimit_;
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxinfo::set_allocated_bankerlimit(::std::string* bankerlimit) {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (bankerlimit) {
    set_has_bankerlimit();
    bankerlimit_ = bankerlimit;
  } else {
    clear_has_bankerlimit();
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxrobotnum = 25;
inline bool sxyxinfo::has_maxrobotnum() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sxyxinfo::set_has_maxrobotnum() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sxyxinfo::clear_has_maxrobotnum() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sxyxinfo::clear_maxrobotnum() {
  maxrobotnum_ = 0;
  clear_has_maxrobotnum();
}
inline ::google::protobuf::int32 sxyxinfo::maxrobotnum() const {
  return maxrobotnum_;
}
inline void sxyxinfo::set_maxrobotnum(::google::protobuf::int32 value) {
  set_has_maxrobotnum();
  maxrobotnum_ = value;
}

// optional int32 julebuid = 26;
inline bool sxyxinfo::has_julebuid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sxyxinfo::set_has_julebuid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sxyxinfo::clear_has_julebuid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sxyxinfo::clear_julebuid() {
  julebuid_ = 0;
  clear_has_julebuid();
}
inline ::google::protobuf::int32 sxyxinfo::julebuid() const {
  return julebuid_;
}
inline void sxyxinfo::set_julebuid(::google::protobuf::int32 value) {
  set_has_julebuid();
  julebuid_ = value;
}

// optional int32 bankercount = 27;
inline bool sxyxinfo::has_bankercount() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void sxyxinfo::set_has_bankercount() {
  _has_bits_[0] |= 0x04000000u;
}
inline void sxyxinfo::clear_has_bankercount() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void sxyxinfo::clear_bankercount() {
  bankercount_ = 0;
  clear_has_bankercount();
}
inline ::google::protobuf::int32 sxyxinfo::bankercount() const {
  return bankercount_;
}
inline void sxyxinfo::set_bankercount(::google::protobuf::int32 value) {
  set_has_bankercount();
  bankercount_ = value;
}

// repeated int32 bankercountlist = 28;
inline int sxyxinfo::bankercountlist_size() const {
  return bankercountlist_.size();
}
inline void sxyxinfo::clear_bankercountlist() {
  bankercountlist_.Clear();
}
inline ::google::protobuf::int32 sxyxinfo::bankercountlist(int index) const {
  return bankercountlist_.Get(index);
}
inline void sxyxinfo::set_bankercountlist(int index, ::google::protobuf::int32 value) {
  bankercountlist_.Set(index, value);
}
inline void sxyxinfo::add_bankercountlist(::google::protobuf::int32 value) {
  bankercountlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxinfo::bankercountlist() const {
  return bankercountlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxinfo::mutable_bankercountlist() {
  return &bankercountlist_;
}

// optional string legalkey = 29;
inline bool sxyxinfo::has_legalkey() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void sxyxinfo::set_has_legalkey() {
  _has_bits_[0] |= 0x10000000u;
}
inline void sxyxinfo::clear_has_legalkey() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void sxyxinfo::clear_legalkey() {
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    legalkey_->clear();
  }
  clear_has_legalkey();
}
inline const ::std::string& sxyxinfo::legalkey() const {
  return *legalkey_;
}
inline void sxyxinfo::set_legalkey(const ::std::string& value) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(value);
}
inline void sxyxinfo::set_legalkey(const char* value) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(value);
}
inline void sxyxinfo::set_legalkey(const char* value, size_t size) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxinfo::mutable_legalkey() {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  return legalkey_;
}
inline ::std::string* sxyxinfo::release_legalkey() {
  clear_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = legalkey_;
    legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxinfo::set_allocated_legalkey(::std::string* legalkey) {
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (legalkey) {
    set_has_legalkey();
    legalkey_ = legalkey;
  } else {
    clear_has_legalkey();
    legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sxyxhistory

// optional int32 Xpoint = 1;
inline bool sxyxhistory::has_xpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sxyxhistory::set_has_xpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sxyxhistory::clear_has_xpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sxyxhistory::clear_xpoint() {
  xpoint_ = 0;
  clear_has_xpoint();
}
inline ::google::protobuf::int32 sxyxhistory::xpoint() const {
  return xpoint_;
}
inline void sxyxhistory::set_xpoint(::google::protobuf::int32 value) {
  set_has_xpoint();
  xpoint_ = value;
}

// optional int32 ZPoint = 2;
inline bool sxyxhistory::has_zpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sxyxhistory::set_has_zpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sxyxhistory::clear_has_zpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sxyxhistory::clear_zpoint() {
  zpoint_ = 0;
  clear_has_zpoint();
}
inline ::google::protobuf::int32 sxyxhistory::zpoint() const {
  return zpoint_;
}
inline void sxyxhistory::set_zpoint(::google::protobuf::int32 value) {
  set_has_zpoint();
  zpoint_ = value;
}

// optional int32 WinResult = 3;
inline bool sxyxhistory::has_winresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sxyxhistory::set_has_winresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sxyxhistory::clear_has_winresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sxyxhistory::clear_winresult() {
  winresult_ = 0;
  clear_has_winresult();
}
inline ::google::protobuf::int32 sxyxhistory::winresult() const {
  return winresult_;
}
inline void sxyxhistory::set_winresult(::google::protobuf::int32 value) {
  set_has_winresult();
  winresult_ = value;
}

// optional int32 Duizi = 4;
inline bool sxyxhistory::has_duizi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sxyxhistory::set_has_duizi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sxyxhistory::clear_has_duizi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sxyxhistory::clear_duizi() {
  duizi_ = 0;
  clear_has_duizi();
}
inline ::google::protobuf::int32 sxyxhistory::duizi() const {
  return duizi_;
}
inline void sxyxhistory::set_duizi(::google::protobuf::int32 value) {
  set_has_duizi();
  duizi_ = value;
}

// optional string recordidentification = 5;
inline bool sxyxhistory::has_recordidentification() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sxyxhistory::set_has_recordidentification() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sxyxhistory::clear_has_recordidentification() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sxyxhistory::clear_recordidentification() {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    recordidentification_->clear();
  }
  clear_has_recordidentification();
}
inline const ::std::string& sxyxhistory::recordidentification() const {
  return *recordidentification_;
}
inline void sxyxhistory::set_recordidentification(const ::std::string& value) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(value);
}
inline void sxyxhistory::set_recordidentification(const char* value) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(value);
}
inline void sxyxhistory::set_recordidentification(const char* value, size_t size) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxhistory::mutable_recordidentification() {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  return recordidentification_;
}
inline ::std::string* sxyxhistory::release_recordidentification() {
  clear_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recordidentification_;
    recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxhistory::set_allocated_recordidentification(::std::string* recordidentification) {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    delete recordidentification_;
  }
  if (recordidentification) {
    set_has_recordidentification();
    recordidentification_ = recordidentification;
  } else {
    clear_has_recordidentification();
    recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sxyxcard

// repeated int32 poker = 1;
inline int sxyxcard::poker_size() const {
  return poker_.size();
}
inline void sxyxcard::clear_poker() {
  poker_.Clear();
}
inline ::google::protobuf::int32 sxyxcard::poker(int index) const {
  return poker_.Get(index);
}
inline void sxyxcard::set_poker(int index, ::google::protobuf::int32 value) {
  poker_.Set(index, value);
}
inline void sxyxcard::add_poker(::google::protobuf::int32 value) {
  poker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxcard::poker() const {
  return poker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxcard::mutable_poker() {
  return &poker_;
}

// -------------------------------------------------------------------

// sxyxpouerjetton

// repeated int32 userid = 1;
inline int sxyxpouerjetton::userid_size() const {
  return userid_.size();
}
inline void sxyxpouerjetton::clear_userid() {
  userid_.Clear();
}
inline ::google::protobuf::int32 sxyxpouerjetton::userid(int index) const {
  return userid_.Get(index);
}
inline void sxyxpouerjetton::set_userid(int index, ::google::protobuf::int32 value) {
  userid_.Set(index, value);
}
inline void sxyxpouerjetton::add_userid(::google::protobuf::int32 value) {
  userid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxpouerjetton::userid() const {
  return userid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxpouerjetton::mutable_userid() {
  return &userid_;
}

// repeated int32 jetton = 2;
inline int sxyxpouerjetton::jetton_size() const {
  return jetton_.size();
}
inline void sxyxpouerjetton::clear_jetton() {
  jetton_.Clear();
}
inline ::google::protobuf::int32 sxyxpouerjetton::jetton(int index) const {
  return jetton_.Get(index);
}
inline void sxyxpouerjetton::set_jetton(int index, ::google::protobuf::int32 value) {
  jetton_.Set(index, value);
}
inline void sxyxpouerjetton::add_jetton(::google::protobuf::int32 value) {
  jetton_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxpouerjetton::jetton() const {
  return jetton_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxpouerjetton::mutable_jetton() {
  return &jetton_;
}

// repeated int32 pourtype = 3;
inline int sxyxpouerjetton::pourtype_size() const {
  return pourtype_.size();
}
inline void sxyxpouerjetton::clear_pourtype() {
  pourtype_.Clear();
}
inline ::google::protobuf::int32 sxyxpouerjetton::pourtype(int index) const {
  return pourtype_.Get(index);
}
inline void sxyxpouerjetton::set_pourtype(int index, ::google::protobuf::int32 value) {
  pourtype_.Set(index, value);
}
inline void sxyxpouerjetton::add_pourtype(::google::protobuf::int32 value) {
  pourtype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxpouerjetton::pourtype() const {
  return pourtype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxpouerjetton::mutable_pourtype() {
  return &pourtype_;
}

// -------------------------------------------------------------------

// sxyxjettonrecordlist

// repeated int32 jetton = 1;
inline int sxyxjettonrecordlist::jetton_size() const {
  return jetton_.size();
}
inline void sxyxjettonrecordlist::clear_jetton() {
  jetton_.Clear();
}
inline ::google::protobuf::int32 sxyxjettonrecordlist::jetton(int index) const {
  return jetton_.Get(index);
}
inline void sxyxjettonrecordlist::set_jetton(int index, ::google::protobuf::int32 value) {
  jetton_.Set(index, value);
}
inline void sxyxjettonrecordlist::add_jetton(::google::protobuf::int32 value) {
  jetton_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxjettonrecordlist::jetton() const {
  return jetton_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxjettonrecordlist::mutable_jetton() {
  return &jetton_;
}

// repeated int32 wincondition = 2;
inline int sxyxjettonrecordlist::wincondition_size() const {
  return wincondition_.size();
}
inline void sxyxjettonrecordlist::clear_wincondition() {
  wincondition_.Clear();
}
inline ::google::protobuf::int32 sxyxjettonrecordlist::wincondition(int index) const {
  return wincondition_.Get(index);
}
inline void sxyxjettonrecordlist::set_wincondition(int index, ::google::protobuf::int32 value) {
  wincondition_.Set(index, value);
}
inline void sxyxjettonrecordlist::add_wincondition(::google::protobuf::int32 value) {
  wincondition_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxjettonrecordlist::wincondition() const {
  return wincondition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxjettonrecordlist::mutable_wincondition() {
  return &wincondition_;
}

// -------------------------------------------------------------------

// sxyxjettonrecorinfo

// optional int32 userid = 1;
inline bool sxyxjettonrecorinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sxyxjettonrecorinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sxyxjettonrecorinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sxyxjettonrecorinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 sxyxjettonrecorinfo::userid() const {
  return userid_;
}
inline void sxyxjettonrecorinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 jetton = 2;
inline bool sxyxjettonrecorinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sxyxjettonrecorinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sxyxjettonrecorinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sxyxjettonrecorinfo::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 sxyxjettonrecorinfo::jetton() const {
  return jetton_;
}
inline void sxyxjettonrecorinfo::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 winnum = 3;
inline bool sxyxjettonrecorinfo::has_winnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sxyxjettonrecorinfo::set_has_winnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sxyxjettonrecorinfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sxyxjettonrecorinfo::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 sxyxjettonrecorinfo::winnum() const {
  return winnum_;
}
inline void sxyxjettonrecorinfo::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional string jifen = 4;
inline bool sxyxjettonrecorinfo::has_jifen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sxyxjettonrecorinfo::set_has_jifen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sxyxjettonrecorinfo::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sxyxjettonrecorinfo::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& sxyxjettonrecorinfo::jifen() const {
  return *jifen_;
}
inline void sxyxjettonrecorinfo::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void sxyxjettonrecorinfo::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void sxyxjettonrecorinfo::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxjettonrecorinfo::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* sxyxjettonrecorinfo::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxjettonrecorinfo::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 5;
inline bool sxyxjettonrecorinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sxyxjettonrecorinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sxyxjettonrecorinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sxyxjettonrecorinfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& sxyxjettonrecorinfo::nickname() const {
  return *nickname_;
}
inline void sxyxjettonrecorinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void sxyxjettonrecorinfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void sxyxjettonrecorinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxjettonrecorinfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* sxyxjettonrecorinfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxjettonrecorinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string facename = 6;
inline bool sxyxjettonrecorinfo::has_facename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sxyxjettonrecorinfo::set_has_facename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sxyxjettonrecorinfo::clear_has_facename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sxyxjettonrecorinfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& sxyxjettonrecorinfo::facename() const {
  return *facename_;
}
inline void sxyxjettonrecorinfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void sxyxjettonrecorinfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void sxyxjettonrecorinfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxjettonrecorinfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* sxyxjettonrecorinfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxjettonrecorinfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sxyxgamehistoryinfo

// optional int32 tableid = 1;
inline bool sxyxgamehistoryinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sxyxgamehistoryinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sxyxgamehistoryinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sxyxgamehistoryinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::tableid() const {
  return tableid_;
}
inline void sxyxgamehistoryinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional string tablename = 2;
inline bool sxyxgamehistoryinfo::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sxyxgamehistoryinfo::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sxyxgamehistoryinfo::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sxyxgamehistoryinfo::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& sxyxgamehistoryinfo::tablename() const {
  return *tablename_;
}
inline void sxyxgamehistoryinfo::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void sxyxgamehistoryinfo::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void sxyxgamehistoryinfo::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxgamehistoryinfo::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* sxyxgamehistoryinfo::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sxyxgamehistoryinfo::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 magnification = 3;
inline bool sxyxgamehistoryinfo::has_magnification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sxyxgamehistoryinfo::set_has_magnification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sxyxgamehistoryinfo::clear_has_magnification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sxyxgamehistoryinfo::clear_magnification() {
  magnification_ = 0;
  clear_has_magnification();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::magnification() const {
  return magnification_;
}
inline void sxyxgamehistoryinfo::set_magnification(::google::protobuf::int32 value) {
  set_has_magnification();
  magnification_ = value;
}

// optional int32 state = 4;
inline bool sxyxgamehistoryinfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sxyxgamehistoryinfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sxyxgamehistoryinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sxyxgamehistoryinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::state() const {
  return state_;
}
inline void sxyxgamehistoryinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 5;
inline bool sxyxgamehistoryinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sxyxgamehistoryinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sxyxgamehistoryinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sxyxgamehistoryinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::timemark() const {
  return timemark_;
}
inline void sxyxgamehistoryinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated string recordidentification = 6;
inline int sxyxgamehistoryinfo::recordidentification_size() const {
  return recordidentification_.size();
}
inline void sxyxgamehistoryinfo::clear_recordidentification() {
  recordidentification_.Clear();
}
inline const ::std::string& sxyxgamehistoryinfo::recordidentification(int index) const {
  return recordidentification_.Get(index);
}
inline ::std::string* sxyxgamehistoryinfo::mutable_recordidentification(int index) {
  return recordidentification_.Mutable(index);
}
inline void sxyxgamehistoryinfo::set_recordidentification(int index, const ::std::string& value) {
  recordidentification_.Mutable(index)->assign(value);
}
inline void sxyxgamehistoryinfo::set_recordidentification(int index, const char* value) {
  recordidentification_.Mutable(index)->assign(value);
}
inline void sxyxgamehistoryinfo::set_recordidentification(int index, const char* value, size_t size) {
  recordidentification_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sxyxgamehistoryinfo::add_recordidentification() {
  return recordidentification_.Add();
}
inline void sxyxgamehistoryinfo::add_recordidentification(const ::std::string& value) {
  recordidentification_.Add()->assign(value);
}
inline void sxyxgamehistoryinfo::add_recordidentification(const char* value) {
  recordidentification_.Add()->assign(value);
}
inline void sxyxgamehistoryinfo::add_recordidentification(const char* value, size_t size) {
  recordidentification_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
sxyxgamehistoryinfo::recordidentification() const {
  return recordidentification_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
sxyxgamehistoryinfo::mutable_recordidentification() {
  return &recordidentification_;
}

// repeated int32 Xpoint = 7;
inline int sxyxgamehistoryinfo::xpoint_size() const {
  return xpoint_.size();
}
inline void sxyxgamehistoryinfo::clear_xpoint() {
  xpoint_.Clear();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::xpoint(int index) const {
  return xpoint_.Get(index);
}
inline void sxyxgamehistoryinfo::set_xpoint(int index, ::google::protobuf::int32 value) {
  xpoint_.Set(index, value);
}
inline void sxyxgamehistoryinfo::add_xpoint(::google::protobuf::int32 value) {
  xpoint_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxgamehistoryinfo::xpoint() const {
  return xpoint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxgamehistoryinfo::mutable_xpoint() {
  return &xpoint_;
}

// repeated int32 ZPoint = 8;
inline int sxyxgamehistoryinfo::zpoint_size() const {
  return zpoint_.size();
}
inline void sxyxgamehistoryinfo::clear_zpoint() {
  zpoint_.Clear();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::zpoint(int index) const {
  return zpoint_.Get(index);
}
inline void sxyxgamehistoryinfo::set_zpoint(int index, ::google::protobuf::int32 value) {
  zpoint_.Set(index, value);
}
inline void sxyxgamehistoryinfo::add_zpoint(::google::protobuf::int32 value) {
  zpoint_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxgamehistoryinfo::zpoint() const {
  return zpoint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxgamehistoryinfo::mutable_zpoint() {
  return &zpoint_;
}

// repeated int32 WinResult = 9;
inline int sxyxgamehistoryinfo::winresult_size() const {
  return winresult_.size();
}
inline void sxyxgamehistoryinfo::clear_winresult() {
  winresult_.Clear();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::winresult(int index) const {
  return winresult_.Get(index);
}
inline void sxyxgamehistoryinfo::set_winresult(int index, ::google::protobuf::int32 value) {
  winresult_.Set(index, value);
}
inline void sxyxgamehistoryinfo::add_winresult(::google::protobuf::int32 value) {
  winresult_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxgamehistoryinfo::winresult() const {
  return winresult_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxgamehistoryinfo::mutable_winresult() {
  return &winresult_;
}

// repeated int32 Duizi = 10;
inline int sxyxgamehistoryinfo::duizi_size() const {
  return duizi_.size();
}
inline void sxyxgamehistoryinfo::clear_duizi() {
  duizi_.Clear();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::duizi(int index) const {
  return duizi_.Get(index);
}
inline void sxyxgamehistoryinfo::set_duizi(int index, ::google::protobuf::int32 value) {
  duizi_.Set(index, value);
}
inline void sxyxgamehistoryinfo::add_duizi(::google::protobuf::int32 value) {
  duizi_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sxyxgamehistoryinfo::duizi() const {
  return duizi_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sxyxgamehistoryinfo::mutable_duizi() {
  return &duizi_;
}

// optional int32 limitred = 11;
inline bool sxyxgamehistoryinfo::has_limitred() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sxyxgamehistoryinfo::set_has_limitred() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sxyxgamehistoryinfo::clear_has_limitred() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sxyxgamehistoryinfo::clear_limitred() {
  limitred_ = 0;
  clear_has_limitred();
}
inline ::google::protobuf::int32 sxyxgamehistoryinfo::limitred() const {
  return limitred_;
}
inline void sxyxgamehistoryinfo::set_limitred(::google::protobuf::int32 value) {
  set_has_limitred();
  limitred_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fsxyx_2eproto__INCLUDED
