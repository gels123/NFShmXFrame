// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_yqs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_yqs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* yqsconffish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsconffish_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqsconfcannon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsconfcannon_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqsconfitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsconfitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqsgameconf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsgameconf_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqscreatefish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqscreatefish_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqscreatebullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqscreatebullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqsitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqsuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqsuseitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsuseitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqsinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqsinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* yqscatchfish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  yqscatchfish_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fyqs_2eproto() {
  protobuf_AddDesc_st_5fyqs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_yqs.proto");
  GOOGLE_CHECK(file != NULL);
  yqsconffish_descriptor_ = file->message_type(0);
  static const int yqsconffish_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, scoretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, score_),
  };
  yqsconffish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsconffish_descriptor_,
      yqsconffish::default_instance_,
      yqsconffish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconffish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsconffish));
  yqsconfcannon_descriptor_ = file->message_type(1);
  static const int yqsconfcannon_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, tubenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, givejetton_),
  };
  yqsconfcannon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsconfcannon_descriptor_,
      yqsconfcannon::default_instance_,
      yqsconfcannon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfcannon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsconfcannon));
  yqsconfitem_descriptor_ = file->message_type(2);
  static const int yqsconfitem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfitem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfitem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfitem, consumetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfitem, consume_),
  };
  yqsconfitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsconfitem_descriptor_,
      yqsconfitem::default_instance_,
      yqsconfitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsconfitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsconfitem));
  yqsgameconf_descriptor_ = file->message_type(3);
  static const int yqsgameconf_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, fishlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, cannonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, fireinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, ionneedpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, rangebombradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, freezetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, freezecooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, locktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, lockcooldown_),
  };
  yqsgameconf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsgameconf_descriptor_,
      yqsgameconf::default_instance_,
      yqsgameconf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsgameconf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsgameconf));
  yqscreatefish_descriptor_ = file->message_type(4);
  static const int yqscreatefish_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, pathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, elaspe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, borntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, lifecycle_),
  };
  yqscreatefish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqscreatefish_descriptor_,
      yqscreatefish::default_instance_,
      yqscreatefish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatefish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqscreatefish));
  yqscreatebullet_descriptor_ = file->message_type(5);
  static const int yqscreatebullet_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, cannontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, elaspe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, mul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, new__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, tubenum_),
  };
  yqscreatebullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqscreatebullet_descriptor_,
      yqscreatebullet::default_instance_,
      yqscreatebullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscreatebullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqscreatebullet));
  yqsitem_descriptor_ = file->message_type(6);
  static const int yqsitem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsitem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsitem, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsitem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsitem, type_),
  };
  yqsitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsitem_descriptor_,
      yqsitem::default_instance_,
      yqsitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsitem));
  yqsuser_descriptor_ = file->message_type(7);
  static const int yqsuser_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, cannontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, cannonlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, bank_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, cannonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, createbulletlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, backpack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, tubenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, cannonmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, lastfiretime_),
  };
  yqsuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsuser_descriptor_,
      yqsuser::default_instance_,
      yqsuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsuser));
  yqsuseitem_descriptor_ = file->message_type(8);
  static const int yqsuseitem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuseitem, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuseitem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuseitem, time_),
  };
  yqsuseitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsuseitem_descriptor_,
      yqsuseitem::default_instance_,
      yqsuseitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuseitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsuseitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsuseitem));
  yqsinfo_descriptor_ = file->message_type(9);
  static const int yqsinfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, minenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, maxenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, createfishlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, cursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, presceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, nextfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, useitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, shoalpathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, systime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, fishcfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, fishcfgnextidx_),
  };
  yqsinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqsinfo_descriptor_,
      yqsinfo::default_instance_,
      yqsinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqsinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqsinfo));
  yqscatchfish_descriptor_ = file->message_type(10);
  static const int yqscatchfish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscatchfish, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscatchfish, scoretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscatchfish, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscatchfish, scoremul_),
  };
  yqscatchfish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      yqscatchfish_descriptor_,
      yqscatchfish::default_instance_,
      yqscatchfish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscatchfish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(yqscatchfish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(yqscatchfish));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fyqs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsconffish_descriptor_, &yqsconffish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsconfcannon_descriptor_, &yqsconfcannon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsconfitem_descriptor_, &yqsconfitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsgameconf_descriptor_, &yqsgameconf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqscreatefish_descriptor_, &yqscreatefish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqscreatebullet_descriptor_, &yqscreatebullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsitem_descriptor_, &yqsitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsuser_descriptor_, &yqsuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsuseitem_descriptor_, &yqsuseitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqsinfo_descriptor_, &yqsinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    yqscatchfish_descriptor_, &yqscatchfish::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fyqs_2eproto() {
  delete yqsconffish::default_instance_;
  delete yqsconffish_reflection_;
  delete yqsconfcannon::default_instance_;
  delete yqsconfcannon_reflection_;
  delete yqsconfitem::default_instance_;
  delete yqsconfitem_reflection_;
  delete yqsgameconf::default_instance_;
  delete yqsgameconf_reflection_;
  delete yqscreatefish::default_instance_;
  delete yqscreatefish_reflection_;
  delete yqscreatebullet::default_instance_;
  delete yqscreatebullet_reflection_;
  delete yqsitem::default_instance_;
  delete yqsitem_reflection_;
  delete yqsuser::default_instance_;
  delete yqsuser_reflection_;
  delete yqsuseitem::default_instance_;
  delete yqsuseitem_reflection_;
  delete yqsinfo::default_instance_;
  delete yqsinfo_reflection_;
  delete yqscatchfish::default_instance_;
  delete yqscatchfish_reflection_;
}

void protobuf_AddDesc_st_5fyqs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014st_yqs.proto\022\007progame\032\016st_human.proto\""
    "~\n\013yqsconffish\022\014\n\004type\030\001 \001(\005\022\016\n\006enable\030\002"
    " \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\020\n\010p"
    "athtype\030\005 \001(\005\022\021\n\tscoretype\030\006 \001(\005\022\r\n\005scor"
    "e\030\007 \001(\t\"\217\001\n\ryqsconfcannon\022\014\n\004type\030\001 \001(\005\022"
    "\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\r\n\005speed\030"
    "\004 \001(\002\022\017\n\007tubenum\030\005 \001(\005\022\016\n\006jetton\030\006 \001(\t\022\r"
    "\n\005money\030\007 \001(\005\022\022\n\ngivejetton\030\010 \001(\005\"O\n\013yqs"
    "confitem\022\014\n\004type\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\023\n\013"
    "consumetype\030\003 \001(\005\022\017\n\007consume\030\004 \001(\005\"\242\002\n\013y"
    "qsgameconf\022&\n\010fishlist\030\001 \003(\0132\024.progame.y"
    "qsconffish\022*\n\ncannonlist\030\002 \003(\0132\026.progame"
    ".yqsconfcannon\022\024\n\014fireinterval\030\003 \001(\002\022\024\n\014"
    "ionneedpower\030\004 \001(\005\022\027\n\017rangebombradius\030\005 "
    "\001(\005\022\022\n\nfreezetime\030\006 \001(\002\022&\n\010itemlist\030\007 \003("
    "\0132\024.progame.yqsconfitem\022\026\n\016freezecooldow"
    "n\030\010 \001(\002\022\020\n\010locktime\030\t \001(\002\022\024\n\014lockcooldow"
    "n\030\n \001(\002\"\235\002\n\ryqscreatefish\022\014\n\004type\030\001 \001(\005\022"
    "\n\n\002id\030\002 \001(\005\022\016\n\006pathid\030\003 \001(\005\022\020\n\010pathtype\030"
    "\004 \001(\005\022\r\n\005width\030\005 \001(\005\022\016\n\006height\030\006 \001(\005\022\017\n\007"
    "offsetx\030\007 \001(\002\022\017\n\007offsety\030\010 \001(\002\022\r\n\005delay\030"
    "\t \001(\002\022\016\n\006elaspe\030\n \001(\002\022\r\n\005speed\030\013 \001(\002\022\020\n\010"
    "borntime\030\014 \001(\001\022\014\n\004data\030\r \001(\005\022\r\n\005score\030\016 "
    "\001(\005\022\016\n\006attrid\030\017 \001(\005\022\017\n\007chairid\030\020 \001(\005\022\021\n\t"
    "lifecycle\030\021 \001(\002\"\312\001\n\017yqscreatebullet\022\022\n\nc"
    "annontype\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005speed\030\003 \001"
    "(\002\022\014\n\004posx\030\004 \001(\002\022\014\n\004posy\030\005 \001(\002\022\021\n\tdirect"
    "ion\030\006 \001(\002\022\016\n\006elaspe\030\007 \001(\005\022\016\n\006itemid\030\010 \001("
    "\005\022\016\n\006fishid\030\t \001(\005\022\013\n\003mul\030\n \001(\005\022\013\n\003new\030\013 "
    "\001(\005\022\017\n\007tubenum\030\014 \001(\005\"H\n\007yqsitem\022\016\n\006itemi"
    "d\030\001 \001(\005\022\016\n\006slotid\030\002 \001(\005\022\017\n\007itemnum\030\003 \001(\005"
    "\022\014\n\004type\030\004 \001(\005\"\371\002\n\007yqsuser\022\016\n\006userid\030\001 \001"
    "(\005\022\017\n\007chairid\030\002 \001(\005\022\020\n\010nickname\030\003 \001(\t\022\016\n"
    "\006faceid\030\004 \001(\t\022\013\n\003sex\030\005 \001(\005\022\016\n\006jetton\030\006 \001"
    "(\t\022\r\n\005money\030\007 \001(\t\022\017\n\007isrobot\030\010 \001(\005\022\022\n\nca"
    "nnontype\030\t \001(\005\022\020\n\010cannonlv\030\n \001(\005\022\023\n\013bank"
    "_jetton\030\013 \001(\t\022\r\n\005state\030\014 \001(\005\022\022\n\ncannonli"
    "st\030\r \003(\005\0222\n\020createbulletlist\030\016 \003(\0132\030.pro"
    "game.yqscreatebullet\022\"\n\010backpack\030\017 \003(\0132\020"
    ".progame.yqsitem\022\017\n\007tubenum\030\020 \001(\005\022\021\n\tcan"
    "nonmul\030\021 \001(\005\022\024\n\014lastfiretime\030\022 \001(\001\"8\n\nyq"
    "suseitem\022\016\n\006userid\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\014"
    "\n\004time\030\003 \001(\001\"\242\003\n\007yqsinfo\022\017\n\007tableid\030\001 \001("
    "\005\022\021\n\ttabletype\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\020\n\010t"
    "imemark\030\004 \001(\005\022\020\n\010minenter\030\005 \001(\t\022\020\n\010maxen"
    "ter\030\006 \001(\t\022\017\n\007maxuser\030\r \001(\005\022!\n\007situser\030\016 "
    "\003(\0132\020.progame.yqsuser\022\021\n\tstanduser\030\017 \003(\005"
    "\022.\n\016createfishlist\030\020 \003(\0132\026.progame.yqscr"
    "eatefish\022\022\n\ncursceneid\030\021 \001(\005\022\022\n\nprescene"
    "id\030\022 \001(\005\022\022\n\nnextfishid\030\023 \001(\005\022(\n\013useiteml"
    "ist\030\024 \003(\0132\023.progame.yqsuseitem\022\025\n\rshoalp"
    "athtype\030\025 \001(\005\022\017\n\007systime\030\026 \001(\001\022\021\n\tfishcf"
    "gid\030\027 \001(\005\022\026\n\016fishcfgnextidx\030\030 \001(\005\"N\n\014yqs"
    "catchfish\022\n\n\002id\030\001 \001(\005\022\021\n\tscoretype\030\002 \001(\005"
    "\022\r\n\005score\030\003 \001(\005\022\020\n\010scoremul\030\004 \001(\005", 2193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_yqs.proto", &protobuf_RegisterTypes);
  yqsconffish::default_instance_ = new yqsconffish();
  yqsconfcannon::default_instance_ = new yqsconfcannon();
  yqsconfitem::default_instance_ = new yqsconfitem();
  yqsgameconf::default_instance_ = new yqsgameconf();
  yqscreatefish::default_instance_ = new yqscreatefish();
  yqscreatebullet::default_instance_ = new yqscreatebullet();
  yqsitem::default_instance_ = new yqsitem();
  yqsuser::default_instance_ = new yqsuser();
  yqsuseitem::default_instance_ = new yqsuseitem();
  yqsinfo::default_instance_ = new yqsinfo();
  yqscatchfish::default_instance_ = new yqscatchfish();
  yqsconffish::default_instance_->InitAsDefaultInstance();
  yqsconfcannon::default_instance_->InitAsDefaultInstance();
  yqsconfitem::default_instance_->InitAsDefaultInstance();
  yqsgameconf::default_instance_->InitAsDefaultInstance();
  yqscreatefish::default_instance_->InitAsDefaultInstance();
  yqscreatebullet::default_instance_->InitAsDefaultInstance();
  yqsitem::default_instance_->InitAsDefaultInstance();
  yqsuser::default_instance_->InitAsDefaultInstance();
  yqsuseitem::default_instance_->InitAsDefaultInstance();
  yqsinfo::default_instance_->InitAsDefaultInstance();
  yqscatchfish::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fyqs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fyqs_2eproto {
  StaticDescriptorInitializer_st_5fyqs_2eproto() {
    protobuf_AddDesc_st_5fyqs_2eproto();
  }
} static_descriptor_initializer_st_5fyqs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int yqsconffish::kTypeFieldNumber;
const int yqsconffish::kEnableFieldNumber;
const int yqsconffish::kWidthFieldNumber;
const int yqsconffish::kHeightFieldNumber;
const int yqsconffish::kPathtypeFieldNumber;
const int yqsconffish::kScoretypeFieldNumber;
const int yqsconffish::kScoreFieldNumber;
#endif  // !_MSC_VER

yqsconffish::yqsconffish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsconffish::InitAsDefaultInstance() {
}

yqsconffish::yqsconffish(const yqsconffish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsconffish::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  enable_ = 0;
  width_ = 0;
  height_ = 0;
  pathtype_ = 0;
  scoretype_ = 0;
  score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsconffish::~yqsconffish() {
  SharedDtor();
}

void yqsconffish::SharedDtor() {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (this != default_instance_) {
  }
}

void yqsconffish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsconffish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsconffish_descriptor_;
}

const yqsconffish& yqsconffish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsconffish* yqsconffish::default_instance_ = NULL;

yqsconffish* yqsconffish::New() const {
  return new yqsconffish;
}

void yqsconffish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    enable_ = 0;
    width_ = 0;
    height_ = 0;
    pathtype_ = 0;
    scoretype_ = 0;
    if (has_score()) {
      if (score_ != &::google::protobuf::internal::kEmptyString) {
        score_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsconffish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enable;
        break;
      }

      // optional int32 enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pathtype;
        break;
      }

      // optional int32 pathtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathtype_)));
          set_has_pathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scoretype;
        break;
      }

      // optional int32 scoretype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoretype_)));
          set_has_scoretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_score;
        break;
      }

      // optional string score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score().data(), this->score().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsconffish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 enable = 2;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enable(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional int32 pathtype = 5;
  if (has_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pathtype(), output);
  }

  // optional int32 scoretype = 6;
  if (has_scoretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->scoretype(), output);
  }

  // optional string score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsconffish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 enable = 2;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enable(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional int32 pathtype = 5;
  if (has_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pathtype(), target);
  }

  // optional int32 scoretype = 6;
  if (has_scoretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->scoretype(), target);
  }

  // optional string score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score().data(), this->score().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsconffish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 enable = 2;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 pathtype = 5;
    if (has_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathtype());
    }

    // optional int32 scoretype = 6;
    if (has_scoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoretype());
    }

    // optional string score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsconffish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsconffish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsconffish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsconffish::MergeFrom(const yqsconffish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_pathtype()) {
      set_pathtype(from.pathtype());
    }
    if (from.has_scoretype()) {
      set_scoretype(from.scoretype());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsconffish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsconffish::CopyFrom(const yqsconffish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsconffish::IsInitialized() const {

  return true;
}

void yqsconffish::Swap(yqsconffish* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enable_, other->enable_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(pathtype_, other->pathtype_);
    std::swap(scoretype_, other->scoretype_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsconffish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsconffish_descriptor_;
  metadata.reflection = yqsconffish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqsconfcannon::kTypeFieldNumber;
const int yqsconfcannon::kWidthFieldNumber;
const int yqsconfcannon::kHeightFieldNumber;
const int yqsconfcannon::kSpeedFieldNumber;
const int yqsconfcannon::kTubenumFieldNumber;
const int yqsconfcannon::kJettonFieldNumber;
const int yqsconfcannon::kMoneyFieldNumber;
const int yqsconfcannon::kGivejettonFieldNumber;
#endif  // !_MSC_VER

yqsconfcannon::yqsconfcannon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsconfcannon::InitAsDefaultInstance() {
}

yqsconfcannon::yqsconfcannon(const yqsconfcannon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsconfcannon::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  width_ = 0;
  height_ = 0;
  speed_ = 0;
  tubenum_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0;
  givejetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsconfcannon::~yqsconfcannon() {
  SharedDtor();
}

void yqsconfcannon::SharedDtor() {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (this != default_instance_) {
  }
}

void yqsconfcannon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsconfcannon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsconfcannon_descriptor_;
}

const yqsconfcannon& yqsconfcannon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsconfcannon* yqsconfcannon::default_instance_ = NULL;

yqsconfcannon* yqsconfcannon::New() const {
  return new yqsconfcannon;
}

void yqsconfcannon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    width_ = 0;
    height_ = 0;
    speed_ = 0;
    tubenum_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
    money_ = 0;
    givejetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsconfcannon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_speed;
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tubenum;
        break;
      }

      // optional int32 tubenum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tubenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubenum_)));
          set_has_tubenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jetton;
        break;
      }

      // optional string jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // optional int32 money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_givejetton;
        break;
      }

      // optional int32 givejetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_givejetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &givejetton_)));
          set_has_givejetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsconfcannon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional float speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // optional int32 tubenum = 5;
  if (has_tubenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tubenum(), output);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->jetton(), output);
  }

  // optional int32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }

  // optional int32 givejetton = 8;
  if (has_givejetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->givejetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsconfcannon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional float speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // optional int32 tubenum = 5;
  if (has_tubenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tubenum(), target);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->jetton(), target);
  }

  // optional int32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }

  // optional int32 givejetton = 8;
  if (has_givejetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->givejetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsconfcannon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 tubenum = 5;
    if (has_tubenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubenum());
    }

    // optional string jetton = 6;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

    // optional int32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 givejetton = 8;
    if (has_givejetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->givejetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsconfcannon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsconfcannon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsconfcannon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsconfcannon::MergeFrom(const yqsconfcannon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_tubenum()) {
      set_tubenum(from.tubenum());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_givejetton()) {
      set_givejetton(from.givejetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsconfcannon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsconfcannon::CopyFrom(const yqsconfcannon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsconfcannon::IsInitialized() const {

  return true;
}

void yqsconfcannon::Swap(yqsconfcannon* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(speed_, other->speed_);
    std::swap(tubenum_, other->tubenum_);
    std::swap(jetton_, other->jetton_);
    std::swap(money_, other->money_);
    std::swap(givejetton_, other->givejetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsconfcannon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsconfcannon_descriptor_;
  metadata.reflection = yqsconfcannon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqsconfitem::kTypeFieldNumber;
const int yqsconfitem::kNameFieldNumber;
const int yqsconfitem::kConsumetypeFieldNumber;
const int yqsconfitem::kConsumeFieldNumber;
#endif  // !_MSC_VER

yqsconfitem::yqsconfitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsconfitem::InitAsDefaultInstance() {
}

yqsconfitem::yqsconfitem(const yqsconfitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsconfitem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  consumetype_ = 0;
  consume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsconfitem::~yqsconfitem() {
  SharedDtor();
}

void yqsconfitem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void yqsconfitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsconfitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsconfitem_descriptor_;
}

const yqsconfitem& yqsconfitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsconfitem* yqsconfitem::default_instance_ = NULL;

yqsconfitem* yqsconfitem::New() const {
  return new yqsconfitem;
}

void yqsconfitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    consumetype_ = 0;
    consume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsconfitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consumetype;
        break;
      }

      // optional int32 consumetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumetype_)));
          set_has_consumetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume;
        break;
      }

      // optional int32 consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsconfitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 consumetype = 3;
  if (has_consumetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consumetype(), output);
  }

  // optional int32 consume = 4;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->consume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsconfitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 consumetype = 3;
  if (has_consumetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consumetype(), target);
  }

  // optional int32 consume = 4;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->consume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsconfitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 consumetype = 3;
    if (has_consumetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consumetype());
    }

    // optional int32 consume = 4;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsconfitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsconfitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsconfitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsconfitem::MergeFrom(const yqsconfitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_consumetype()) {
      set_consumetype(from.consumetype());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsconfitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsconfitem::CopyFrom(const yqsconfitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsconfitem::IsInitialized() const {

  return true;
}

void yqsconfitem::Swap(yqsconfitem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(consumetype_, other->consumetype_);
    std::swap(consume_, other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsconfitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsconfitem_descriptor_;
  metadata.reflection = yqsconfitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqsgameconf::kFishlistFieldNumber;
const int yqsgameconf::kCannonlistFieldNumber;
const int yqsgameconf::kFireintervalFieldNumber;
const int yqsgameconf::kIonneedpowerFieldNumber;
const int yqsgameconf::kRangebombradiusFieldNumber;
const int yqsgameconf::kFreezetimeFieldNumber;
const int yqsgameconf::kItemlistFieldNumber;
const int yqsgameconf::kFreezecooldownFieldNumber;
const int yqsgameconf::kLocktimeFieldNumber;
const int yqsgameconf::kLockcooldownFieldNumber;
#endif  // !_MSC_VER

yqsgameconf::yqsgameconf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsgameconf::InitAsDefaultInstance() {
}

yqsgameconf::yqsgameconf(const yqsgameconf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsgameconf::SharedCtor() {
  _cached_size_ = 0;
  fireinterval_ = 0;
  ionneedpower_ = 0;
  rangebombradius_ = 0;
  freezetime_ = 0;
  freezecooldown_ = 0;
  locktime_ = 0;
  lockcooldown_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsgameconf::~yqsgameconf() {
  SharedDtor();
}

void yqsgameconf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yqsgameconf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsgameconf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsgameconf_descriptor_;
}

const yqsgameconf& yqsgameconf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsgameconf* yqsgameconf::default_instance_ = NULL;

yqsgameconf* yqsgameconf::New() const {
  return new yqsgameconf;
}

void yqsgameconf::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    fireinterval_ = 0;
    ionneedpower_ = 0;
    rangebombradius_ = 0;
    freezetime_ = 0;
    freezecooldown_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    locktime_ = 0;
    lockcooldown_ = 0;
  }
  fishlist_.Clear();
  cannonlist_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsgameconf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .progame.yqsconffish fishlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fishlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fishlist;
        if (input->ExpectTag(18)) goto parse_cannonlist;
        break;
      }

      // repeated .progame.yqsconfcannon cannonlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cannonlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cannonlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cannonlist;
        if (input->ExpectTag(29)) goto parse_fireinterval;
        break;
      }

      // optional float fireinterval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fireinterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fireinterval_)));
          set_has_fireinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ionneedpower;
        break;
      }

      // optional int32 ionneedpower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ionneedpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ionneedpower_)));
          set_has_ionneedpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rangebombradius;
        break;
      }

      // optional int32 rangebombradius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rangebombradius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangebombradius_)));
          set_has_rangebombradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_freezetime;
        break;
      }

      // optional float freezetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freezetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freezetime_)));
          set_has_freezetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemlist;
        break;
      }

      // repeated .progame.yqsconfitem itemlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_itemlist;
        if (input->ExpectTag(69)) goto parse_freezecooldown;
        break;
      }

      // optional float freezecooldown = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_freezecooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &freezecooldown_)));
          set_has_freezecooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_locktime;
        break;
      }

      // optional float locktime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_locktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &locktime_)));
          set_has_locktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_lockcooldown;
        break;
      }

      // optional float lockcooldown = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lockcooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lockcooldown_)));
          set_has_lockcooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsgameconf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .progame.yqsconffish fishlist = 1;
  for (int i = 0; i < this->fishlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishlist(i), output);
  }

  // repeated .progame.yqsconfcannon cannonlist = 2;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cannonlist(i), output);
  }

  // optional float fireinterval = 3;
  if (has_fireinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fireinterval(), output);
  }

  // optional int32 ionneedpower = 4;
  if (has_ionneedpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ionneedpower(), output);
  }

  // optional int32 rangebombradius = 5;
  if (has_rangebombradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rangebombradius(), output);
  }

  // optional float freezetime = 6;
  if (has_freezetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->freezetime(), output);
  }

  // repeated .progame.yqsconfitem itemlist = 7;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->itemlist(i), output);
  }

  // optional float freezecooldown = 8;
  if (has_freezecooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->freezecooldown(), output);
  }

  // optional float locktime = 9;
  if (has_locktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->locktime(), output);
  }

  // optional float lockcooldown = 10;
  if (has_lockcooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lockcooldown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsgameconf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .progame.yqsconffish fishlist = 1;
  for (int i = 0; i < this->fishlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fishlist(i), target);
  }

  // repeated .progame.yqsconfcannon cannonlist = 2;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cannonlist(i), target);
  }

  // optional float fireinterval = 3;
  if (has_fireinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fireinterval(), target);
  }

  // optional int32 ionneedpower = 4;
  if (has_ionneedpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ionneedpower(), target);
  }

  // optional int32 rangebombradius = 5;
  if (has_rangebombradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rangebombradius(), target);
  }

  // optional float freezetime = 6;
  if (has_freezetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->freezetime(), target);
  }

  // repeated .progame.yqsconfitem itemlist = 7;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->itemlist(i), target);
  }

  // optional float freezecooldown = 8;
  if (has_freezecooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->freezecooldown(), target);
  }

  // optional float locktime = 9;
  if (has_locktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->locktime(), target);
  }

  // optional float lockcooldown = 10;
  if (has_lockcooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lockcooldown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsgameconf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional float fireinterval = 3;
    if (has_fireinterval()) {
      total_size += 1 + 4;
    }

    // optional int32 ionneedpower = 4;
    if (has_ionneedpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ionneedpower());
    }

    // optional int32 rangebombradius = 5;
    if (has_rangebombradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rangebombradius());
    }

    // optional float freezetime = 6;
    if (has_freezetime()) {
      total_size += 1 + 4;
    }

    // optional float freezecooldown = 8;
    if (has_freezecooldown()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float locktime = 9;
    if (has_locktime()) {
      total_size += 1 + 4;
    }

    // optional float lockcooldown = 10;
    if (has_lockcooldown()) {
      total_size += 1 + 4;
    }

  }
  // repeated .progame.yqsconffish fishlist = 1;
  total_size += 1 * this->fishlist_size();
  for (int i = 0; i < this->fishlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishlist(i));
  }

  // repeated .progame.yqsconfcannon cannonlist = 2;
  total_size += 1 * this->cannonlist_size();
  for (int i = 0; i < this->cannonlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cannonlist(i));
  }

  // repeated .progame.yqsconfitem itemlist = 7;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsgameconf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsgameconf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsgameconf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsgameconf::MergeFrom(const yqsgameconf& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishlist_.MergeFrom(from.fishlist_);
  cannonlist_.MergeFrom(from.cannonlist_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_fireinterval()) {
      set_fireinterval(from.fireinterval());
    }
    if (from.has_ionneedpower()) {
      set_ionneedpower(from.ionneedpower());
    }
    if (from.has_rangebombradius()) {
      set_rangebombradius(from.rangebombradius());
    }
    if (from.has_freezetime()) {
      set_freezetime(from.freezetime());
    }
    if (from.has_freezecooldown()) {
      set_freezecooldown(from.freezecooldown());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_locktime()) {
      set_locktime(from.locktime());
    }
    if (from.has_lockcooldown()) {
      set_lockcooldown(from.lockcooldown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsgameconf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsgameconf::CopyFrom(const yqsgameconf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsgameconf::IsInitialized() const {

  return true;
}

void yqsgameconf::Swap(yqsgameconf* other) {
  if (other != this) {
    fishlist_.Swap(&other->fishlist_);
    cannonlist_.Swap(&other->cannonlist_);
    std::swap(fireinterval_, other->fireinterval_);
    std::swap(ionneedpower_, other->ionneedpower_);
    std::swap(rangebombradius_, other->rangebombradius_);
    std::swap(freezetime_, other->freezetime_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(freezecooldown_, other->freezecooldown_);
    std::swap(locktime_, other->locktime_);
    std::swap(lockcooldown_, other->lockcooldown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsgameconf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsgameconf_descriptor_;
  metadata.reflection = yqsgameconf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqscreatefish::kTypeFieldNumber;
const int yqscreatefish::kIdFieldNumber;
const int yqscreatefish::kPathidFieldNumber;
const int yqscreatefish::kPathtypeFieldNumber;
const int yqscreatefish::kWidthFieldNumber;
const int yqscreatefish::kHeightFieldNumber;
const int yqscreatefish::kOffsetxFieldNumber;
const int yqscreatefish::kOffsetyFieldNumber;
const int yqscreatefish::kDelayFieldNumber;
const int yqscreatefish::kElaspeFieldNumber;
const int yqscreatefish::kSpeedFieldNumber;
const int yqscreatefish::kBorntimeFieldNumber;
const int yqscreatefish::kDataFieldNumber;
const int yqscreatefish::kScoreFieldNumber;
const int yqscreatefish::kAttridFieldNumber;
const int yqscreatefish::kChairidFieldNumber;
const int yqscreatefish::kLifecycleFieldNumber;
#endif  // !_MSC_VER

yqscreatefish::yqscreatefish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqscreatefish::InitAsDefaultInstance() {
}

yqscreatefish::yqscreatefish(const yqscreatefish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqscreatefish::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  pathid_ = 0;
  pathtype_ = 0;
  width_ = 0;
  height_ = 0;
  offsetx_ = 0;
  offsety_ = 0;
  delay_ = 0;
  elaspe_ = 0;
  speed_ = 0;
  borntime_ = 0;
  data_ = 0;
  score_ = 0;
  attrid_ = 0;
  chairid_ = 0;
  lifecycle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqscreatefish::~yqscreatefish() {
  SharedDtor();
}

void yqscreatefish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yqscreatefish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqscreatefish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqscreatefish_descriptor_;
}

const yqscreatefish& yqscreatefish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqscreatefish* yqscreatefish::default_instance_ = NULL;

yqscreatefish* yqscreatefish::New() const {
  return new yqscreatefish;
}

void yqscreatefish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    pathid_ = 0;
    pathtype_ = 0;
    width_ = 0;
    height_ = 0;
    offsetx_ = 0;
    offsety_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    delay_ = 0;
    elaspe_ = 0;
    speed_ = 0;
    borntime_ = 0;
    data_ = 0;
    score_ = 0;
    attrid_ = 0;
    chairid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lifecycle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqscreatefish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pathid;
        break;
      }

      // optional int32 pathid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathid_)));
          set_has_pathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pathtype;
        break;
      }

      // optional int32 pathtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathtype_)));
          set_has_pathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // optional int32 width = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional int32 height = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_offsetx;
        break;
      }

      // optional float offsetx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_offsety;
        break;
      }

      // optional float offsety = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_delay;
        break;
      }

      // optional float delay = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_elaspe;
        break;
      }

      // optional float elaspe = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_elaspe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elaspe_)));
          set_has_elaspe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_speed;
        break;
      }

      // optional float speed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_borntime;
        break;
      }

      // optional double borntime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_borntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &borntime_)));
          set_has_borntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_data;
        break;
      }

      // optional int32 data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_score;
        break;
      }

      // optional int32 score = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_attrid;
        break;
      }

      // optional int32 attrid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_lifecycle;
        break;
      }

      // optional float lifecycle = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lifecycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lifecycle_)));
          set_has_lifecycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqscreatefish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 pathid = 3;
  if (has_pathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pathid(), output);
  }

  // optional int32 pathtype = 4;
  if (has_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pathtype(), output);
  }

  // optional int32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->width(), output);
  }

  // optional int32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->height(), output);
  }

  // optional float offsetx = 7;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->offsetx(), output);
  }

  // optional float offsety = 8;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->offsety(), output);
  }

  // optional float delay = 9;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->delay(), output);
  }

  // optional float elaspe = 10;
  if (has_elaspe()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->elaspe(), output);
  }

  // optional float speed = 11;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->speed(), output);
  }

  // optional double borntime = 12;
  if (has_borntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->borntime(), output);
  }

  // optional int32 data = 13;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->data(), output);
  }

  // optional int32 score = 14;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->score(), output);
  }

  // optional int32 attrid = 15;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->attrid(), output);
  }

  // optional int32 chairid = 16;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->chairid(), output);
  }

  // optional float lifecycle = 17;
  if (has_lifecycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->lifecycle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqscreatefish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 pathid = 3;
  if (has_pathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pathid(), target);
  }

  // optional int32 pathtype = 4;
  if (has_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pathtype(), target);
  }

  // optional int32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->width(), target);
  }

  // optional int32 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->height(), target);
  }

  // optional float offsetx = 7;
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->offsetx(), target);
  }

  // optional float offsety = 8;
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->offsety(), target);
  }

  // optional float delay = 9;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->delay(), target);
  }

  // optional float elaspe = 10;
  if (has_elaspe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->elaspe(), target);
  }

  // optional float speed = 11;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->speed(), target);
  }

  // optional double borntime = 12;
  if (has_borntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->borntime(), target);
  }

  // optional int32 data = 13;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->data(), target);
  }

  // optional int32 score = 14;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->score(), target);
  }

  // optional int32 attrid = 15;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->attrid(), target);
  }

  // optional int32 chairid = 16;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->chairid(), target);
  }

  // optional float lifecycle = 17;
  if (has_lifecycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->lifecycle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqscreatefish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 pathid = 3;
    if (has_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathid());
    }

    // optional int32 pathtype = 4;
    if (has_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathtype());
    }

    // optional int32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional float offsetx = 7;
    if (has_offsetx()) {
      total_size += 1 + 4;
    }

    // optional float offsety = 8;
    if (has_offsety()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float delay = 9;
    if (has_delay()) {
      total_size += 1 + 4;
    }

    // optional float elaspe = 10;
    if (has_elaspe()) {
      total_size += 1 + 4;
    }

    // optional float speed = 11;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional double borntime = 12;
    if (has_borntime()) {
      total_size += 1 + 8;
    }

    // optional int32 data = 13;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 score = 14;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 attrid = 15;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrid());
    }

    // optional int32 chairid = 16;
    if (has_chairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float lifecycle = 17;
    if (has_lifecycle()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqscreatefish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqscreatefish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqscreatefish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqscreatefish::MergeFrom(const yqscreatefish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pathid()) {
      set_pathid(from.pathid());
    }
    if (from.has_pathtype()) {
      set_pathtype(from.pathtype());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_elaspe()) {
      set_elaspe(from.elaspe());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_borntime()) {
      set_borntime(from.borntime());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lifecycle()) {
      set_lifecycle(from.lifecycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqscreatefish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqscreatefish::CopyFrom(const yqscreatefish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqscreatefish::IsInitialized() const {

  return true;
}

void yqscreatefish::Swap(yqscreatefish* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(pathid_, other->pathid_);
    std::swap(pathtype_, other->pathtype_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(delay_, other->delay_);
    std::swap(elaspe_, other->elaspe_);
    std::swap(speed_, other->speed_);
    std::swap(borntime_, other->borntime_);
    std::swap(data_, other->data_);
    std::swap(score_, other->score_);
    std::swap(attrid_, other->attrid_);
    std::swap(chairid_, other->chairid_);
    std::swap(lifecycle_, other->lifecycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqscreatefish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqscreatefish_descriptor_;
  metadata.reflection = yqscreatefish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqscreatebullet::kCannontypeFieldNumber;
const int yqscreatebullet::kIdFieldNumber;
const int yqscreatebullet::kSpeedFieldNumber;
const int yqscreatebullet::kPosxFieldNumber;
const int yqscreatebullet::kPosyFieldNumber;
const int yqscreatebullet::kDirectionFieldNumber;
const int yqscreatebullet::kElaspeFieldNumber;
const int yqscreatebullet::kItemidFieldNumber;
const int yqscreatebullet::kFishidFieldNumber;
const int yqscreatebullet::kMulFieldNumber;
const int yqscreatebullet::kNewFieldNumber;
const int yqscreatebullet::kTubenumFieldNumber;
#endif  // !_MSC_VER

yqscreatebullet::yqscreatebullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqscreatebullet::InitAsDefaultInstance() {
}

yqscreatebullet::yqscreatebullet(const yqscreatebullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqscreatebullet::SharedCtor() {
  _cached_size_ = 0;
  cannontype_ = 0;
  id_ = 0;
  speed_ = 0;
  posx_ = 0;
  posy_ = 0;
  direction_ = 0;
  elaspe_ = 0;
  itemid_ = 0;
  fishid_ = 0;
  mul_ = 0;
  new__ = 0;
  tubenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqscreatebullet::~yqscreatebullet() {
  SharedDtor();
}

void yqscreatebullet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yqscreatebullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqscreatebullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqscreatebullet_descriptor_;
}

const yqscreatebullet& yqscreatebullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqscreatebullet* yqscreatebullet::default_instance_ = NULL;

yqscreatebullet* yqscreatebullet::New() const {
  return new yqscreatebullet;
}

void yqscreatebullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cannontype_ = 0;
    id_ = 0;
    speed_ = 0;
    posx_ = 0;
    posy_ = 0;
    direction_ = 0;
    elaspe_ = 0;
    itemid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fishid_ = 0;
    mul_ = 0;
    new__ = 0;
    tubenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqscreatebullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cannontype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannontype_)));
          set_has_cannontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_speed;
        break;
      }

      // optional float speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_posx;
        break;
      }

      // optional float posx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_posy;
        break;
      }

      // optional float posy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_direction;
        break;
      }

      // optional float direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_elaspe;
        break;
      }

      // optional int32 elaspe = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elaspe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elaspe_)));
          set_has_elaspe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fishid;
        break;
      }

      // optional int32 fishid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishid_)));
          set_has_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mul;
        break;
      }

      // optional int32 mul = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mul_)));
          set_has_mul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_new;
        break;
      }

      // optional int32 new = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new__)));
          set_has_new_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tubenum;
        break;
      }

      // optional int32 tubenum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tubenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubenum_)));
          set_has_tubenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqscreatebullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cannontype = 1;
  if (has_cannontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cannontype(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional float speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->speed(), output);
  }

  // optional float posx = 4;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->posx(), output);
  }

  // optional float posy = 5;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->posy(), output);
  }

  // optional float direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->direction(), output);
  }

  // optional int32 elaspe = 7;
  if (has_elaspe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->elaspe(), output);
  }

  // optional int32 itemid = 8;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->itemid(), output);
  }

  // optional int32 fishid = 9;
  if (has_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fishid(), output);
  }

  // optional int32 mul = 10;
  if (has_mul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mul(), output);
  }

  // optional int32 new = 11;
  if (has_new_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->new_(), output);
  }

  // optional int32 tubenum = 12;
  if (has_tubenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tubenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqscreatebullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cannontype = 1;
  if (has_cannontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cannontype(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional float speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->speed(), target);
  }

  // optional float posx = 4;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->posx(), target);
  }

  // optional float posy = 5;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->posy(), target);
  }

  // optional float direction = 6;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->direction(), target);
  }

  // optional int32 elaspe = 7;
  if (has_elaspe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->elaspe(), target);
  }

  // optional int32 itemid = 8;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->itemid(), target);
  }

  // optional int32 fishid = 9;
  if (has_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fishid(), target);
  }

  // optional int32 mul = 10;
  if (has_mul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mul(), target);
  }

  // optional int32 new = 11;
  if (has_new_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->new_(), target);
  }

  // optional int32 tubenum = 12;
  if (has_tubenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tubenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqscreatebullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cannontype = 1;
    if (has_cannontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannontype());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional float speed = 3;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float posx = 4;
    if (has_posx()) {
      total_size += 1 + 4;
    }

    // optional float posy = 5;
    if (has_posy()) {
      total_size += 1 + 4;
    }

    // optional float direction = 6;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // optional int32 elaspe = 7;
    if (has_elaspe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elaspe());
    }

    // optional int32 itemid = 8;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fishid = 9;
    if (has_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishid());
    }

    // optional int32 mul = 10;
    if (has_mul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mul());
    }

    // optional int32 new = 11;
    if (has_new_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_());
    }

    // optional int32 tubenum = 12;
    if (has_tubenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqscreatebullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqscreatebullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqscreatebullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqscreatebullet::MergeFrom(const yqscreatebullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cannontype()) {
      set_cannontype(from.cannontype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_elaspe()) {
      set_elaspe(from.elaspe());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fishid()) {
      set_fishid(from.fishid());
    }
    if (from.has_mul()) {
      set_mul(from.mul());
    }
    if (from.has_new_()) {
      set_new_(from.new_());
    }
    if (from.has_tubenum()) {
      set_tubenum(from.tubenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqscreatebullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqscreatebullet::CopyFrom(const yqscreatebullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqscreatebullet::IsInitialized() const {

  return true;
}

void yqscreatebullet::Swap(yqscreatebullet* other) {
  if (other != this) {
    std::swap(cannontype_, other->cannontype_);
    std::swap(id_, other->id_);
    std::swap(speed_, other->speed_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(direction_, other->direction_);
    std::swap(elaspe_, other->elaspe_);
    std::swap(itemid_, other->itemid_);
    std::swap(fishid_, other->fishid_);
    std::swap(mul_, other->mul_);
    std::swap(new__, other->new__);
    std::swap(tubenum_, other->tubenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqscreatebullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqscreatebullet_descriptor_;
  metadata.reflection = yqscreatebullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqsitem::kItemidFieldNumber;
const int yqsitem::kSlotidFieldNumber;
const int yqsitem::kItemnumFieldNumber;
const int yqsitem::kTypeFieldNumber;
#endif  // !_MSC_VER

yqsitem::yqsitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsitem::InitAsDefaultInstance() {
}

yqsitem::yqsitem(const yqsitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsitem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  slotid_ = 0;
  itemnum_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsitem::~yqsitem() {
  SharedDtor();
}

void yqsitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yqsitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsitem_descriptor_;
}

const yqsitem& yqsitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsitem* yqsitem::default_instance_ = NULL;

yqsitem* yqsitem::New() const {
  return new yqsitem;
}

void yqsitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    slotid_ = 0;
    itemnum_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slotid;
        break;
      }

      // optional int32 slotid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemnum;
        break;
      }

      // optional int32 itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 slotid = 2;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slotid(), output);
  }

  // optional int32 itemnum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 slotid = 2;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slotid(), target);
  }

  // optional int32 itemnum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 slotid = 2;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotid());
    }

    // optional int32 itemnum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsitem::MergeFrom(const yqsitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsitem::CopyFrom(const yqsitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsitem::IsInitialized() const {

  return true;
}

void yqsitem::Swap(yqsitem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(slotid_, other->slotid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsitem_descriptor_;
  metadata.reflection = yqsitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqsuser::kUseridFieldNumber;
const int yqsuser::kChairidFieldNumber;
const int yqsuser::kNicknameFieldNumber;
const int yqsuser::kFaceidFieldNumber;
const int yqsuser::kSexFieldNumber;
const int yqsuser::kJettonFieldNumber;
const int yqsuser::kMoneyFieldNumber;
const int yqsuser::kIsrobotFieldNumber;
const int yqsuser::kCannontypeFieldNumber;
const int yqsuser::kCannonlvFieldNumber;
const int yqsuser::kBankJettonFieldNumber;
const int yqsuser::kStateFieldNumber;
const int yqsuser::kCannonlistFieldNumber;
const int yqsuser::kCreatebulletlistFieldNumber;
const int yqsuser::kBackpackFieldNumber;
const int yqsuser::kTubenumFieldNumber;
const int yqsuser::kCannonmulFieldNumber;
const int yqsuser::kLastfiretimeFieldNumber;
#endif  // !_MSC_VER

yqsuser::yqsuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsuser::InitAsDefaultInstance() {
}

yqsuser::yqsuser(const yqsuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  chairid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isrobot_ = 0;
  cannontype_ = 0;
  cannonlv_ = 0;
  bank_jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  tubenum_ = 0;
  cannonmul_ = 0;
  lastfiretime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsuser::~yqsuser() {
  SharedDtor();
}

void yqsuser::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_jetton_;
  }
  if (this != default_instance_) {
  }
}

void yqsuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsuser_descriptor_;
}

const yqsuser& yqsuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsuser* yqsuser::default_instance_ = NULL;

yqsuser* yqsuser::New() const {
  return new yqsuser;
}

void yqsuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    chairid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
    sex_ = 0;
    if (has_jetton()) {
      if (jetton_ != &::google::protobuf::internal::kEmptyString) {
        jetton_->clear();
      }
    }
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    isrobot_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cannontype_ = 0;
    cannonlv_ = 0;
    if (has_bank_jetton()) {
      if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
        bank_jetton_->clear();
      }
    }
    state_ = 0;
    tubenum_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cannonmul_ = 0;
    lastfiretime_ = 0;
  }
  cannonlist_.Clear();
  createbulletlist_.Clear();
  backpack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_faceid;
        break;
      }

      // optional string faceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_jetton;
        break;
      }

      // optional string jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jetton().data(), this->jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_money;
        break;
      }

      // optional string money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->money().data(), this->money().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isrobot;
        break;
      }

      // optional int32 isrobot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cannontype;
        break;
      }

      // optional int32 cannontype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannontype_)));
          set_has_cannontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cannonlv;
        break;
      }

      // optional int32 cannonlv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannonlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannonlv_)));
          set_has_cannonlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bank_jetton;
        break;
      }

      // optional string bank_jetton = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_jetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_jetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_jetton().data(), this->bank_jetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_state;
        break;
      }

      // optional int32 state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cannonlist;
        break;
      }

      // repeated int32 cannonlist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannonlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_cannonlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cannonlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cannonlist;
        if (input->ExpectTag(114)) goto parse_createbulletlist;
        break;
      }

      // repeated .progame.yqscreatebullet createbulletlist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createbulletlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_createbulletlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_createbulletlist;
        if (input->ExpectTag(122)) goto parse_backpack;
        break;
      }

      // repeated .progame.yqsitem backpack = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backpack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backpack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_backpack;
        if (input->ExpectTag(128)) goto parse_tubenum;
        break;
      }

      // optional int32 tubenum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tubenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tubenum_)));
          set_has_tubenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cannonmul;
        break;
      }

      // optional int32 cannonmul = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannonmul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannonmul_)));
          set_has_cannonmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_lastfiretime;
        break;
      }

      // optional double lastfiretime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastfiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastfiretime_)));
          set_has_lastfiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional string faceid = 4;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->faceid(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->jetton(), output);
  }

  // optional string money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->money(), output);
  }

  // optional int32 isrobot = 8;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isrobot(), output);
  }

  // optional int32 cannontype = 9;
  if (has_cannontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cannontype(), output);
  }

  // optional int32 cannonlv = 10;
  if (has_cannonlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cannonlv(), output);
  }

  // optional string bank_jetton = 11;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_jetton().data(), this->bank_jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bank_jetton(), output);
  }

  // optional int32 state = 12;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->state(), output);
  }

  // repeated int32 cannonlist = 13;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->cannonlist(i), output);
  }

  // repeated .progame.yqscreatebullet createbulletlist = 14;
  for (int i = 0; i < this->createbulletlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->createbulletlist(i), output);
  }

  // repeated .progame.yqsitem backpack = 15;
  for (int i = 0; i < this->backpack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->backpack(i), output);
  }

  // optional int32 tubenum = 16;
  if (has_tubenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tubenum(), output);
  }

  // optional int32 cannonmul = 17;
  if (has_cannonmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cannonmul(), output);
  }

  // optional double lastfiretime = 18;
  if (has_lastfiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lastfiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string faceid = 4;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->faceid(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional string jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jetton().data(), this->jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->jetton(), target);
  }

  // optional string money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->money(), target);
  }

  // optional int32 isrobot = 8;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isrobot(), target);
  }

  // optional int32 cannontype = 9;
  if (has_cannontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cannontype(), target);
  }

  // optional int32 cannonlv = 10;
  if (has_cannonlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cannonlv(), target);
  }

  // optional string bank_jetton = 11;
  if (has_bank_jetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_jetton().data(), this->bank_jetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bank_jetton(), target);
  }

  // optional int32 state = 12;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->state(), target);
  }

  // repeated int32 cannonlist = 13;
  for (int i = 0; i < this->cannonlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->cannonlist(i), target);
  }

  // repeated .progame.yqscreatebullet createbulletlist = 14;
  for (int i = 0; i < this->createbulletlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->createbulletlist(i), target);
  }

  // repeated .progame.yqsitem backpack = 15;
  for (int i = 0; i < this->backpack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->backpack(i), target);
  }

  // optional int32 tubenum = 16;
  if (has_tubenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tubenum(), target);
  }

  // optional int32 cannonmul = 17;
  if (has_cannonmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cannonmul(), target);
  }

  // optional double lastfiretime = 18;
  if (has_lastfiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lastfiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string faceid = 4;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string jetton = 6;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jetton());
    }

    // optional string money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }

    // optional int32 isrobot = 8;
    if (has_isrobot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrobot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cannontype = 9;
    if (has_cannontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannontype());
    }

    // optional int32 cannonlv = 10;
    if (has_cannonlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannonlv());
    }

    // optional string bank_jetton = 11;
    if (has_bank_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_jetton());
    }

    // optional int32 state = 12;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 tubenum = 16;
    if (has_tubenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tubenum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 cannonmul = 17;
    if (has_cannonmul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannonmul());
    }

    // optional double lastfiretime = 18;
    if (has_lastfiretime()) {
      total_size += 2 + 8;
    }

  }
  // repeated int32 cannonlist = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->cannonlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cannonlist(i));
    }
    total_size += 1 * this->cannonlist_size() + data_size;
  }

  // repeated .progame.yqscreatebullet createbulletlist = 14;
  total_size += 1 * this->createbulletlist_size();
  for (int i = 0; i < this->createbulletlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->createbulletlist(i));
  }

  // repeated .progame.yqsitem backpack = 15;
  total_size += 1 * this->backpack_size();
  for (int i = 0; i < this->backpack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backpack(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsuser::MergeFrom(const yqsuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  cannonlist_.MergeFrom(from.cannonlist_);
  createbulletlist_.MergeFrom(from.createbulletlist_);
  backpack_.MergeFrom(from.backpack_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cannontype()) {
      set_cannontype(from.cannontype());
    }
    if (from.has_cannonlv()) {
      set_cannonlv(from.cannonlv());
    }
    if (from.has_bank_jetton()) {
      set_bank_jetton(from.bank_jetton());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_tubenum()) {
      set_tubenum(from.tubenum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cannonmul()) {
      set_cannonmul(from.cannonmul());
    }
    if (from.has_lastfiretime()) {
      set_lastfiretime(from.lastfiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsuser::CopyFrom(const yqsuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsuser::IsInitialized() const {

  return true;
}

void yqsuser::Swap(yqsuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(chairid_, other->chairid_);
    std::swap(nickname_, other->nickname_);
    std::swap(faceid_, other->faceid_);
    std::swap(sex_, other->sex_);
    std::swap(jetton_, other->jetton_);
    std::swap(money_, other->money_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(cannontype_, other->cannontype_);
    std::swap(cannonlv_, other->cannonlv_);
    std::swap(bank_jetton_, other->bank_jetton_);
    std::swap(state_, other->state_);
    cannonlist_.Swap(&other->cannonlist_);
    createbulletlist_.Swap(&other->createbulletlist_);
    backpack_.Swap(&other->backpack_);
    std::swap(tubenum_, other->tubenum_);
    std::swap(cannonmul_, other->cannonmul_);
    std::swap(lastfiretime_, other->lastfiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsuser_descriptor_;
  metadata.reflection = yqsuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqsuseitem::kUseridFieldNumber;
const int yqsuseitem::kTypeFieldNumber;
const int yqsuseitem::kTimeFieldNumber;
#endif  // !_MSC_VER

yqsuseitem::yqsuseitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsuseitem::InitAsDefaultInstance() {
}

yqsuseitem::yqsuseitem(const yqsuseitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsuseitem::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsuseitem::~yqsuseitem() {
  SharedDtor();
}

void yqsuseitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yqsuseitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsuseitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsuseitem_descriptor_;
}

const yqsuseitem& yqsuseitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsuseitem* yqsuseitem::default_instance_ = NULL;

yqsuseitem* yqsuseitem::New() const {
  return new yqsuseitem;
}

void yqsuseitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsuseitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time;
        break;
      }

      // optional double time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsuseitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional double time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsuseitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional double time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsuseitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional double time = 3;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsuseitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsuseitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsuseitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsuseitem::MergeFrom(const yqsuseitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsuseitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsuseitem::CopyFrom(const yqsuseitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsuseitem::IsInitialized() const {

  return true;
}

void yqsuseitem::Swap(yqsuseitem* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsuseitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsuseitem_descriptor_;
  metadata.reflection = yqsuseitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqsinfo::kTableidFieldNumber;
const int yqsinfo::kTabletypeFieldNumber;
const int yqsinfo::kStateFieldNumber;
const int yqsinfo::kTimemarkFieldNumber;
const int yqsinfo::kMinenterFieldNumber;
const int yqsinfo::kMaxenterFieldNumber;
const int yqsinfo::kMaxuserFieldNumber;
const int yqsinfo::kSituserFieldNumber;
const int yqsinfo::kStanduserFieldNumber;
const int yqsinfo::kCreatefishlistFieldNumber;
const int yqsinfo::kCursceneidFieldNumber;
const int yqsinfo::kPresceneidFieldNumber;
const int yqsinfo::kNextfishidFieldNumber;
const int yqsinfo::kUseitemlistFieldNumber;
const int yqsinfo::kShoalpathtypeFieldNumber;
const int yqsinfo::kSystimeFieldNumber;
const int yqsinfo::kFishcfgidFieldNumber;
const int yqsinfo::kFishcfgnextidxFieldNumber;
#endif  // !_MSC_VER

yqsinfo::yqsinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqsinfo::InitAsDefaultInstance() {
}

yqsinfo::yqsinfo(const yqsinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqsinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  state_ = 0;
  timemark_ = 0;
  minenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxuser_ = 0;
  cursceneid_ = 0;
  presceneid_ = 0;
  nextfishid_ = 0;
  shoalpathtype_ = 0;
  systime_ = 0;
  fishcfgid_ = 0;
  fishcfgnextidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqsinfo::~yqsinfo() {
  SharedDtor();
}

void yqsinfo::SharedDtor() {
  if (minenter_ != &::google::protobuf::internal::kEmptyString) {
    delete minenter_;
  }
  if (maxenter_ != &::google::protobuf::internal::kEmptyString) {
    delete maxenter_;
  }
  if (this != default_instance_) {
  }
}

void yqsinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqsinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqsinfo_descriptor_;
}

const yqsinfo& yqsinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqsinfo* yqsinfo::default_instance_ = NULL;

yqsinfo* yqsinfo::New() const {
  return new yqsinfo;
}

void yqsinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    state_ = 0;
    timemark_ = 0;
    if (has_minenter()) {
      if (minenter_ != &::google::protobuf::internal::kEmptyString) {
        minenter_->clear();
      }
    }
    if (has_maxenter()) {
      if (maxenter_ != &::google::protobuf::internal::kEmptyString) {
        maxenter_->clear();
      }
    }
    maxuser_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    cursceneid_ = 0;
    presceneid_ = 0;
    nextfishid_ = 0;
    shoalpathtype_ = 0;
    systime_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fishcfgid_ = 0;
    fishcfgnextidx_ = 0;
  }
  situser_.Clear();
  standuser_.Clear();
  createfishlist_.Clear();
  useitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqsinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_minenter;
        break;
      }

      // optional string minenter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minenter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->minenter().data(), this->minenter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_maxenter;
        break;
      }

      // optional string maxenter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxenter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxenter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maxenter().data(), this->maxenter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_situser;
        break;
      }

      // repeated .progame.yqsuser situser = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_situser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_situser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_situser;
        if (input->ExpectTag(120)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_standuser;
        if (input->ExpectTag(130)) goto parse_createfishlist;
        break;
      }

      // repeated .progame.yqscreatefish createfishlist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createfishlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_createfishlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_createfishlist;
        if (input->ExpectTag(136)) goto parse_cursceneid;
        break;
      }

      // optional int32 cursceneid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cursceneid_)));
          set_has_cursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_presceneid;
        break;
      }

      // optional int32 presceneid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presceneid_)));
          set_has_presceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nextfishid;
        break;
      }

      // optional int32 nextfishid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextfishid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextfishid_)));
          set_has_nextfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_useitemlist;
        break;
      }

      // repeated .progame.yqsuseitem useitemlist = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useitemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_useitemlist;
        if (input->ExpectTag(168)) goto parse_shoalpathtype;
        break;
      }

      // optional int32 shoalpathtype = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoalpathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoalpathtype_)));
          set_has_shoalpathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_systime;
        break;
      }

      // optional double systime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_systime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &systime_)));
          set_has_systime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fishcfgid;
        break;
      }

      // optional int32 fishcfgid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishcfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishcfgid_)));
          set_has_fishcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_fishcfgnextidx;
        break;
      }

      // optional int32 fishcfgnextidx = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishcfgnextidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishcfgnextidx_)));
          set_has_fishcfgnextidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqsinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timemark(), output);
  }

  // optional string minenter = 5;
  if (has_minenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minenter().data(), this->minenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->minenter(), output);
  }

  // optional string maxenter = 6;
  if (has_maxenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxenter().data(), this->maxenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->maxenter(), output);
  }

  // optional int32 maxuser = 13;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxuser(), output);
  }

  // repeated .progame.yqsuser situser = 14;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->situser(i), output);
  }

  // repeated int32 standuser = 15;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->standuser(i), output);
  }

  // repeated .progame.yqscreatefish createfishlist = 16;
  for (int i = 0; i < this->createfishlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->createfishlist(i), output);
  }

  // optional int32 cursceneid = 17;
  if (has_cursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cursceneid(), output);
  }

  // optional int32 presceneid = 18;
  if (has_presceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->presceneid(), output);
  }

  // optional int32 nextfishid = 19;
  if (has_nextfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nextfishid(), output);
  }

  // repeated .progame.yqsuseitem useitemlist = 20;
  for (int i = 0; i < this->useitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->useitemlist(i), output);
  }

  // optional int32 shoalpathtype = 21;
  if (has_shoalpathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->shoalpathtype(), output);
  }

  // optional double systime = 22;
  if (has_systime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->systime(), output);
  }

  // optional int32 fishcfgid = 23;
  if (has_fishcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->fishcfgid(), output);
  }

  // optional int32 fishcfgnextidx = 24;
  if (has_fishcfgnextidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->fishcfgnextidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqsinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timemark(), target);
  }

  // optional string minenter = 5;
  if (has_minenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minenter().data(), this->minenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->minenter(), target);
  }

  // optional string maxenter = 6;
  if (has_maxenter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maxenter().data(), this->maxenter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->maxenter(), target);
  }

  // optional int32 maxuser = 13;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxuser(), target);
  }

  // repeated .progame.yqsuser situser = 14;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->situser(i), target);
  }

  // repeated int32 standuser = 15;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->standuser(i), target);
  }

  // repeated .progame.yqscreatefish createfishlist = 16;
  for (int i = 0; i < this->createfishlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->createfishlist(i), target);
  }

  // optional int32 cursceneid = 17;
  if (has_cursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cursceneid(), target);
  }

  // optional int32 presceneid = 18;
  if (has_presceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->presceneid(), target);
  }

  // optional int32 nextfishid = 19;
  if (has_nextfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->nextfishid(), target);
  }

  // repeated .progame.yqsuseitem useitemlist = 20;
  for (int i = 0; i < this->useitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->useitemlist(i), target);
  }

  // optional int32 shoalpathtype = 21;
  if (has_shoalpathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->shoalpathtype(), target);
  }

  // optional double systime = 22;
  if (has_systime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->systime(), target);
  }

  // optional int32 fishcfgid = 23;
  if (has_fishcfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->fishcfgid(), target);
  }

  // optional int32 fishcfgnextidx = 24;
  if (has_fishcfgnextidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->fishcfgnextidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqsinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional string minenter = 5;
    if (has_minenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minenter());
    }

    // optional string maxenter = 6;
    if (has_maxenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maxenter());
    }

    // optional int32 maxuser = 13;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 cursceneid = 17;
    if (has_cursceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cursceneid());
    }

    // optional int32 presceneid = 18;
    if (has_presceneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presceneid());
    }

    // optional int32 nextfishid = 19;
    if (has_nextfishid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextfishid());
    }

    // optional int32 shoalpathtype = 21;
    if (has_shoalpathtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoalpathtype());
    }

    // optional double systime = 22;
    if (has_systime()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 fishcfgid = 23;
    if (has_fishcfgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishcfgid());
    }

    // optional int32 fishcfgnextidx = 24;
    if (has_fishcfgnextidx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishcfgnextidx());
    }

  }
  // repeated .progame.yqsuser situser = 14;
  total_size += 1 * this->situser_size();
  for (int i = 0; i < this->situser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->situser(i));
  }

  // repeated int32 standuser = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 1 * this->standuser_size() + data_size;
  }

  // repeated .progame.yqscreatefish createfishlist = 16;
  total_size += 2 * this->createfishlist_size();
  for (int i = 0; i < this->createfishlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->createfishlist(i));
  }

  // repeated .progame.yqsuseitem useitemlist = 20;
  total_size += 2 * this->useitemlist_size();
  for (int i = 0; i < this->useitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqsinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqsinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqsinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqsinfo::MergeFrom(const yqsinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  createfishlist_.MergeFrom(from.createfishlist_);
  useitemlist_.MergeFrom(from.useitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_minenter()) {
      set_minenter(from.minenter());
    }
    if (from.has_maxenter()) {
      set_maxenter(from.maxenter());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_cursceneid()) {
      set_cursceneid(from.cursceneid());
    }
    if (from.has_presceneid()) {
      set_presceneid(from.presceneid());
    }
    if (from.has_nextfishid()) {
      set_nextfishid(from.nextfishid());
    }
    if (from.has_shoalpathtype()) {
      set_shoalpathtype(from.shoalpathtype());
    }
    if (from.has_systime()) {
      set_systime(from.systime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fishcfgid()) {
      set_fishcfgid(from.fishcfgid());
    }
    if (from.has_fishcfgnextidx()) {
      set_fishcfgnextidx(from.fishcfgnextidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqsinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqsinfo::CopyFrom(const yqsinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqsinfo::IsInitialized() const {

  return true;
}

void yqsinfo::Swap(yqsinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(minenter_, other->minenter_);
    std::swap(maxenter_, other->maxenter_);
    std::swap(maxuser_, other->maxuser_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    createfishlist_.Swap(&other->createfishlist_);
    std::swap(cursceneid_, other->cursceneid_);
    std::swap(presceneid_, other->presceneid_);
    std::swap(nextfishid_, other->nextfishid_);
    useitemlist_.Swap(&other->useitemlist_);
    std::swap(shoalpathtype_, other->shoalpathtype_);
    std::swap(systime_, other->systime_);
    std::swap(fishcfgid_, other->fishcfgid_);
    std::swap(fishcfgnextidx_, other->fishcfgnextidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqsinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqsinfo_descriptor_;
  metadata.reflection = yqsinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int yqscatchfish::kIdFieldNumber;
const int yqscatchfish::kScoretypeFieldNumber;
const int yqscatchfish::kScoreFieldNumber;
const int yqscatchfish::kScoremulFieldNumber;
#endif  // !_MSC_VER

yqscatchfish::yqscatchfish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void yqscatchfish::InitAsDefaultInstance() {
}

yqscatchfish::yqscatchfish(const yqscatchfish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void yqscatchfish::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  scoretype_ = 0;
  score_ = 0;
  scoremul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

yqscatchfish::~yqscatchfish() {
  SharedDtor();
}

void yqscatchfish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void yqscatchfish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* yqscatchfish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return yqscatchfish_descriptor_;
}

const yqscatchfish& yqscatchfish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fyqs_2eproto();
  return *default_instance_;
}

yqscatchfish* yqscatchfish::default_instance_ = NULL;

yqscatchfish* yqscatchfish::New() const {
  return new yqscatchfish;
}

void yqscatchfish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    scoretype_ = 0;
    score_ = 0;
    scoremul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool yqscatchfish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scoretype;
        break;
      }

      // optional int32 scoretype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoretype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoretype_)));
          set_has_scoretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scoremul;
        break;
      }

      // optional int32 scoremul = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoremul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoremul_)));
          set_has_scoremul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void yqscatchfish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 scoretype = 2;
  if (has_scoretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scoretype(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int32 scoremul = 4;
  if (has_scoremul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scoremul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* yqscatchfish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 scoretype = 2;
  if (has_scoretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scoretype(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional int32 scoremul = 4;
  if (has_scoremul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scoremul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int yqscatchfish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 scoretype = 2;
    if (has_scoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoretype());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 scoremul = 4;
    if (has_scoremul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoremul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void yqscatchfish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const yqscatchfish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const yqscatchfish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void yqscatchfish::MergeFrom(const yqscatchfish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scoretype()) {
      set_scoretype(from.scoretype());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_scoremul()) {
      set_scoremul(from.scoremul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void yqscatchfish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void yqscatchfish::CopyFrom(const yqscatchfish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool yqscatchfish::IsInitialized() const {

  return true;
}

void yqscatchfish::Swap(yqscatchfish* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scoretype_, other->scoretype_);
    std::swap(score_, other->score_);
    std::swap(scoremul_, other->scoremul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata yqscatchfish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = yqscatchfish_descriptor_;
  metadata.reflection = yqscatchfish_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
