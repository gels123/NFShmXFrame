// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_yqs.proto

#ifndef PROTOBUF_st_5fyqs_2eproto__INCLUDED
#define PROTOBUF_st_5fyqs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fyqs_2eproto();
void protobuf_AssignDesc_st_5fyqs_2eproto();
void protobuf_ShutdownFile_st_5fyqs_2eproto();

class yqsconffish;
class yqsconfcannon;
class yqsconfitem;
class yqsgameconf;
class yqscreatefish;
class yqscreatebullet;
class yqsitem;
class yqsuser;
class yqsuseitem;
class yqsinfo;
class yqscatchfish;

// ===================================================================

class yqsconffish : public ::google::protobuf::Message {
 public:
  yqsconffish();
  virtual ~yqsconffish();

  yqsconffish(const yqsconffish& from);

  inline yqsconffish& operator=(const yqsconffish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsconffish& default_instance();

  void Swap(yqsconffish* other);

  // implements Message ----------------------------------------------

  yqsconffish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsconffish& from);
  void MergeFrom(const yqsconffish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 enable = 2;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 2;
  inline ::google::protobuf::int32 enable() const;
  inline void set_enable(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 pathtype = 5;
  inline bool has_pathtype() const;
  inline void clear_pathtype();
  static const int kPathtypeFieldNumber = 5;
  inline ::google::protobuf::int32 pathtype() const;
  inline void set_pathtype(::google::protobuf::int32 value);

  // optional int32 scoretype = 6;
  inline bool has_scoretype() const;
  inline void clear_scoretype();
  static const int kScoretypeFieldNumber = 6;
  inline ::google::protobuf::int32 scoretype() const;
  inline void set_scoretype(::google::protobuf::int32 value);

  // optional string score = 7;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline const ::std::string& score() const;
  inline void set_score(const ::std::string& value);
  inline void set_score(const char* value);
  inline void set_score(const char* value, size_t size);
  inline ::std::string* mutable_score();
  inline ::std::string* release_score();
  inline void set_allocated_score(::std::string* score);

  // @@protoc_insertion_point(class_scope:progame.yqsconffish)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_pathtype();
  inline void clear_has_pathtype();
  inline void set_has_scoretype();
  inline void clear_has_scoretype();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 enable_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 pathtype_;
  ::google::protobuf::int32 scoretype_;
  ::std::string* score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsconffish* default_instance_;
};
// -------------------------------------------------------------------

class yqsconfcannon : public ::google::protobuf::Message {
 public:
  yqsconfcannon();
  virtual ~yqsconfcannon();

  yqsconfcannon(const yqsconfcannon& from);

  inline yqsconfcannon& operator=(const yqsconfcannon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsconfcannon& default_instance();

  void Swap(yqsconfcannon* other);

  // implements Message ----------------------------------------------

  yqsconfcannon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsconfcannon& from);
  void MergeFrom(const yqsconfcannon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional float speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline float speed() const;
  inline void set_speed(float value);

  // optional int32 tubenum = 5;
  inline bool has_tubenum() const;
  inline void clear_tubenum();
  static const int kTubenumFieldNumber = 5;
  inline ::google::protobuf::int32 tubenum() const;
  inline void set_tubenum(::google::protobuf::int32 value);

  // optional string jetton = 6;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 6;
  inline const ::std::string& jetton() const;
  inline void set_jetton(const ::std::string& value);
  inline void set_jetton(const char* value);
  inline void set_jetton(const char* value, size_t size);
  inline ::std::string* mutable_jetton();
  inline ::std::string* release_jetton();
  inline void set_allocated_jetton(::std::string* jetton);

  // optional int32 money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 givejetton = 8;
  inline bool has_givejetton() const;
  inline void clear_givejetton();
  static const int kGivejettonFieldNumber = 8;
  inline ::google::protobuf::int32 givejetton() const;
  inline void set_givejetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.yqsconfcannon)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_tubenum();
  inline void clear_has_tubenum();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_givejetton();
  inline void clear_has_givejetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  float speed_;
  ::std::string* jetton_;
  ::google::protobuf::int32 tubenum_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 givejetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsconfcannon* default_instance_;
};
// -------------------------------------------------------------------

class yqsconfitem : public ::google::protobuf::Message {
 public:
  yqsconfitem();
  virtual ~yqsconfitem();

  yqsconfitem(const yqsconfitem& from);

  inline yqsconfitem& operator=(const yqsconfitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsconfitem& default_instance();

  void Swap(yqsconfitem* other);

  // implements Message ----------------------------------------------

  yqsconfitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsconfitem& from);
  void MergeFrom(const yqsconfitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 consumetype = 3;
  inline bool has_consumetype() const;
  inline void clear_consumetype();
  static const int kConsumetypeFieldNumber = 3;
  inline ::google::protobuf::int32 consumetype() const;
  inline void set_consumetype(::google::protobuf::int32 value);

  // optional int32 consume = 4;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 4;
  inline ::google::protobuf::int32 consume() const;
  inline void set_consume(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.yqsconfitem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_consumetype();
  inline void clear_has_consumetype();
  inline void set_has_consume();
  inline void clear_has_consume();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 consumetype_;
  ::google::protobuf::int32 consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsconfitem* default_instance_;
};
// -------------------------------------------------------------------

class yqsgameconf : public ::google::protobuf::Message {
 public:
  yqsgameconf();
  virtual ~yqsgameconf();

  yqsgameconf(const yqsgameconf& from);

  inline yqsgameconf& operator=(const yqsgameconf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsgameconf& default_instance();

  void Swap(yqsgameconf* other);

  // implements Message ----------------------------------------------

  yqsgameconf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsgameconf& from);
  void MergeFrom(const yqsgameconf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .progame.yqsconffish fishlist = 1;
  inline int fishlist_size() const;
  inline void clear_fishlist();
  static const int kFishlistFieldNumber = 1;
  inline const ::progame::yqsconffish& fishlist(int index) const;
  inline ::progame::yqsconffish* mutable_fishlist(int index);
  inline ::progame::yqsconffish* add_fishlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsconffish >&
      fishlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqsconffish >*
      mutable_fishlist();

  // repeated .progame.yqsconfcannon cannonlist = 2;
  inline int cannonlist_size() const;
  inline void clear_cannonlist();
  static const int kCannonlistFieldNumber = 2;
  inline const ::progame::yqsconfcannon& cannonlist(int index) const;
  inline ::progame::yqsconfcannon* mutable_cannonlist(int index);
  inline ::progame::yqsconfcannon* add_cannonlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsconfcannon >&
      cannonlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqsconfcannon >*
      mutable_cannonlist();

  // optional float fireinterval = 3;
  inline bool has_fireinterval() const;
  inline void clear_fireinterval();
  static const int kFireintervalFieldNumber = 3;
  inline float fireinterval() const;
  inline void set_fireinterval(float value);

  // optional int32 ionneedpower = 4;
  inline bool has_ionneedpower() const;
  inline void clear_ionneedpower();
  static const int kIonneedpowerFieldNumber = 4;
  inline ::google::protobuf::int32 ionneedpower() const;
  inline void set_ionneedpower(::google::protobuf::int32 value);

  // optional int32 rangebombradius = 5;
  inline bool has_rangebombradius() const;
  inline void clear_rangebombradius();
  static const int kRangebombradiusFieldNumber = 5;
  inline ::google::protobuf::int32 rangebombradius() const;
  inline void set_rangebombradius(::google::protobuf::int32 value);

  // optional float freezetime = 6;
  inline bool has_freezetime() const;
  inline void clear_freezetime();
  static const int kFreezetimeFieldNumber = 6;
  inline float freezetime() const;
  inline void set_freezetime(float value);

  // repeated .progame.yqsconfitem itemlist = 7;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemlistFieldNumber = 7;
  inline const ::progame::yqsconfitem& itemlist(int index) const;
  inline ::progame::yqsconfitem* mutable_itemlist(int index);
  inline ::progame::yqsconfitem* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsconfitem >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqsconfitem >*
      mutable_itemlist();

  // optional float freezecooldown = 8;
  inline bool has_freezecooldown() const;
  inline void clear_freezecooldown();
  static const int kFreezecooldownFieldNumber = 8;
  inline float freezecooldown() const;
  inline void set_freezecooldown(float value);

  // optional float locktime = 9;
  inline bool has_locktime() const;
  inline void clear_locktime();
  static const int kLocktimeFieldNumber = 9;
  inline float locktime() const;
  inline void set_locktime(float value);

  // optional float lockcooldown = 10;
  inline bool has_lockcooldown() const;
  inline void clear_lockcooldown();
  static const int kLockcooldownFieldNumber = 10;
  inline float lockcooldown() const;
  inline void set_lockcooldown(float value);

  // @@protoc_insertion_point(class_scope:progame.yqsgameconf)
 private:
  inline void set_has_fireinterval();
  inline void clear_has_fireinterval();
  inline void set_has_ionneedpower();
  inline void clear_has_ionneedpower();
  inline void set_has_rangebombradius();
  inline void clear_has_rangebombradius();
  inline void set_has_freezetime();
  inline void clear_has_freezetime();
  inline void set_has_freezecooldown();
  inline void clear_has_freezecooldown();
  inline void set_has_locktime();
  inline void clear_has_locktime();
  inline void set_has_lockcooldown();
  inline void clear_has_lockcooldown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::progame::yqsconffish > fishlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::yqsconfcannon > cannonlist_;
  float fireinterval_;
  ::google::protobuf::int32 ionneedpower_;
  ::google::protobuf::int32 rangebombradius_;
  float freezetime_;
  ::google::protobuf::RepeatedPtrField< ::progame::yqsconfitem > itemlist_;
  float freezecooldown_;
  float locktime_;
  float lockcooldown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsgameconf* default_instance_;
};
// -------------------------------------------------------------------

class yqscreatefish : public ::google::protobuf::Message {
 public:
  yqscreatefish();
  virtual ~yqscreatefish();

  yqscreatefish(const yqscreatefish& from);

  inline yqscreatefish& operator=(const yqscreatefish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqscreatefish& default_instance();

  void Swap(yqscreatefish* other);

  // implements Message ----------------------------------------------

  yqscreatefish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqscreatefish& from);
  void MergeFrom(const yqscreatefish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 pathid = 3;
  inline bool has_pathid() const;
  inline void clear_pathid();
  static const int kPathidFieldNumber = 3;
  inline ::google::protobuf::int32 pathid() const;
  inline void set_pathid(::google::protobuf::int32 value);

  // optional int32 pathtype = 4;
  inline bool has_pathtype() const;
  inline void clear_pathtype();
  static const int kPathtypeFieldNumber = 4;
  inline ::google::protobuf::int32 pathtype() const;
  inline void set_pathtype(::google::protobuf::int32 value);

  // optional int32 width = 5;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 6;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 6;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional float offsetx = 7;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetxFieldNumber = 7;
  inline float offsetx() const;
  inline void set_offsetx(float value);

  // optional float offsety = 8;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetyFieldNumber = 8;
  inline float offsety() const;
  inline void set_offsety(float value);

  // optional float delay = 9;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 9;
  inline float delay() const;
  inline void set_delay(float value);

  // optional float elaspe = 10;
  inline bool has_elaspe() const;
  inline void clear_elaspe();
  static const int kElaspeFieldNumber = 10;
  inline float elaspe() const;
  inline void set_elaspe(float value);

  // optional float speed = 11;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 11;
  inline float speed() const;
  inline void set_speed(float value);

  // optional double borntime = 12;
  inline bool has_borntime() const;
  inline void clear_borntime();
  static const int kBorntimeFieldNumber = 12;
  inline double borntime() const;
  inline void set_borntime(double value);

  // optional int32 data = 13;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 13;
  inline ::google::protobuf::int32 data() const;
  inline void set_data(::google::protobuf::int32 value);

  // optional int32 score = 14;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 14;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 attrid = 15;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttridFieldNumber = 15;
  inline ::google::protobuf::int32 attrid() const;
  inline void set_attrid(::google::protobuf::int32 value);

  // optional int32 chairid = 16;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 16;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional float lifecycle = 17;
  inline bool has_lifecycle() const;
  inline void clear_lifecycle();
  static const int kLifecycleFieldNumber = 17;
  inline float lifecycle() const;
  inline void set_lifecycle(float value);

  // @@protoc_insertion_point(class_scope:progame.yqscreatefish)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pathid();
  inline void clear_has_pathid();
  inline void set_has_pathtype();
  inline void clear_has_pathtype();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_elaspe();
  inline void clear_has_elaspe();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_borntime();
  inline void clear_has_borntime();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_lifecycle();
  inline void clear_has_lifecycle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pathid_;
  ::google::protobuf::int32 pathtype_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  float offsetx_;
  float offsety_;
  float delay_;
  float elaspe_;
  double borntime_;
  float speed_;
  ::google::protobuf::int32 data_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 attrid_;
  ::google::protobuf::int32 chairid_;
  float lifecycle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqscreatefish* default_instance_;
};
// -------------------------------------------------------------------

class yqscreatebullet : public ::google::protobuf::Message {
 public:
  yqscreatebullet();
  virtual ~yqscreatebullet();

  yqscreatebullet(const yqscreatebullet& from);

  inline yqscreatebullet& operator=(const yqscreatebullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqscreatebullet& default_instance();

  void Swap(yqscreatebullet* other);

  // implements Message ----------------------------------------------

  yqscreatebullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqscreatebullet& from);
  void MergeFrom(const yqscreatebullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cannontype = 1;
  inline bool has_cannontype() const;
  inline void clear_cannontype();
  static const int kCannontypeFieldNumber = 1;
  inline ::google::protobuf::int32 cannontype() const;
  inline void set_cannontype(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional float speed = 3;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline float speed() const;
  inline void set_speed(float value);

  // optional float posx = 4;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosxFieldNumber = 4;
  inline float posx() const;
  inline void set_posx(float value);

  // optional float posy = 5;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosyFieldNumber = 5;
  inline float posy() const;
  inline void set_posy(float value);

  // optional float direction = 6;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 6;
  inline float direction() const;
  inline void set_direction(float value);

  // optional int32 elaspe = 7;
  inline bool has_elaspe() const;
  inline void clear_elaspe();
  static const int kElaspeFieldNumber = 7;
  inline ::google::protobuf::int32 elaspe() const;
  inline void set_elaspe(::google::protobuf::int32 value);

  // optional int32 itemid = 8;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 8;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 fishid = 9;
  inline bool has_fishid() const;
  inline void clear_fishid();
  static const int kFishidFieldNumber = 9;
  inline ::google::protobuf::int32 fishid() const;
  inline void set_fishid(::google::protobuf::int32 value);

  // optional int32 mul = 10;
  inline bool has_mul() const;
  inline void clear_mul();
  static const int kMulFieldNumber = 10;
  inline ::google::protobuf::int32 mul() const;
  inline void set_mul(::google::protobuf::int32 value);

  // optional int32 new = 11;
  inline bool has_new_() const;
  inline void clear_new_();
  static const int kNewFieldNumber = 11;
  inline ::google::protobuf::int32 new_() const;
  inline void set_new_(::google::protobuf::int32 value);

  // optional int32 tubenum = 12;
  inline bool has_tubenum() const;
  inline void clear_tubenum();
  static const int kTubenumFieldNumber = 12;
  inline ::google::protobuf::int32 tubenum() const;
  inline void set_tubenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.yqscreatebullet)
 private:
  inline void set_has_cannontype();
  inline void clear_has_cannontype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_elaspe();
  inline void clear_has_elaspe();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_fishid();
  inline void clear_has_fishid();
  inline void set_has_mul();
  inline void clear_has_mul();
  inline void set_has_new_();
  inline void clear_has_new_();
  inline void set_has_tubenum();
  inline void clear_has_tubenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cannontype_;
  ::google::protobuf::int32 id_;
  float speed_;
  float posx_;
  float posy_;
  float direction_;
  ::google::protobuf::int32 elaspe_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 fishid_;
  ::google::protobuf::int32 mul_;
  ::google::protobuf::int32 new__;
  ::google::protobuf::int32 tubenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqscreatebullet* default_instance_;
};
// -------------------------------------------------------------------

class yqsitem : public ::google::protobuf::Message {
 public:
  yqsitem();
  virtual ~yqsitem();

  yqsitem(const yqsitem& from);

  inline yqsitem& operator=(const yqsitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsitem& default_instance();

  void Swap(yqsitem* other);

  // implements Message ----------------------------------------------

  yqsitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsitem& from);
  void MergeFrom(const yqsitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 slotid = 2;
  inline bool has_slotid() const;
  inline void clear_slotid();
  static const int kSlotidFieldNumber = 2;
  inline ::google::protobuf::int32 slotid() const;
  inline void set_slotid(::google::protobuf::int32 value);

  // optional int32 itemnum = 3;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemnumFieldNumber = 3;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.yqsitem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_slotid();
  inline void clear_has_slotid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 slotid_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsitem* default_instance_;
};
// -------------------------------------------------------------------

class yqsuser : public ::google::protobuf::Message {
 public:
  yqsuser();
  virtual ~yqsuser();

  yqsuser(const yqsuser& from);

  inline yqsuser& operator=(const yqsuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsuser& default_instance();

  void Swap(yqsuser* other);

  // implements Message ----------------------------------------------

  yqsuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsuser& from);
  void MergeFrom(const yqsuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 chairid = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string faceid = 4;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 4;
  inline const ::std::string& faceid() const;
  inline void set_faceid(const ::std::string& value);
  inline void set_faceid(const char* value);
  inline void set_faceid(const char* value, size_t size);
  inline ::std::string* mutable_faceid();
  inline ::std::string* release_faceid();
  inline void set_allocated_faceid(::std::string* faceid);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string jetton = 6;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 6;
  inline const ::std::string& jetton() const;
  inline void set_jetton(const ::std::string& value);
  inline void set_jetton(const char* value);
  inline void set_jetton(const char* value, size_t size);
  inline ::std::string* mutable_jetton();
  inline ::std::string* release_jetton();
  inline void set_allocated_jetton(::std::string* jetton);

  // optional string money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline const ::std::string& money() const;
  inline void set_money(const ::std::string& value);
  inline void set_money(const char* value);
  inline void set_money(const char* value, size_t size);
  inline ::std::string* mutable_money();
  inline ::std::string* release_money();
  inline void set_allocated_money(::std::string* money);

  // optional int32 isrobot = 8;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsrobotFieldNumber = 8;
  inline ::google::protobuf::int32 isrobot() const;
  inline void set_isrobot(::google::protobuf::int32 value);

  // optional int32 cannontype = 9;
  inline bool has_cannontype() const;
  inline void clear_cannontype();
  static const int kCannontypeFieldNumber = 9;
  inline ::google::protobuf::int32 cannontype() const;
  inline void set_cannontype(::google::protobuf::int32 value);

  // optional int32 cannonlv = 10;
  inline bool has_cannonlv() const;
  inline void clear_cannonlv();
  static const int kCannonlvFieldNumber = 10;
  inline ::google::protobuf::int32 cannonlv() const;
  inline void set_cannonlv(::google::protobuf::int32 value);

  // optional string bank_jetton = 11;
  inline bool has_bank_jetton() const;
  inline void clear_bank_jetton();
  static const int kBankJettonFieldNumber = 11;
  inline const ::std::string& bank_jetton() const;
  inline void set_bank_jetton(const ::std::string& value);
  inline void set_bank_jetton(const char* value);
  inline void set_bank_jetton(const char* value, size_t size);
  inline ::std::string* mutable_bank_jetton();
  inline ::std::string* release_bank_jetton();
  inline void set_allocated_bank_jetton(::std::string* bank_jetton);

  // optional int32 state = 12;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 12;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated int32 cannonlist = 13;
  inline int cannonlist_size() const;
  inline void clear_cannonlist();
  static const int kCannonlistFieldNumber = 13;
  inline ::google::protobuf::int32 cannonlist(int index) const;
  inline void set_cannonlist(int index, ::google::protobuf::int32 value);
  inline void add_cannonlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cannonlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cannonlist();

  // repeated .progame.yqscreatebullet createbulletlist = 14;
  inline int createbulletlist_size() const;
  inline void clear_createbulletlist();
  static const int kCreatebulletlistFieldNumber = 14;
  inline const ::progame::yqscreatebullet& createbulletlist(int index) const;
  inline ::progame::yqscreatebullet* mutable_createbulletlist(int index);
  inline ::progame::yqscreatebullet* add_createbulletlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqscreatebullet >&
      createbulletlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqscreatebullet >*
      mutable_createbulletlist();

  // repeated .progame.yqsitem backpack = 15;
  inline int backpack_size() const;
  inline void clear_backpack();
  static const int kBackpackFieldNumber = 15;
  inline const ::progame::yqsitem& backpack(int index) const;
  inline ::progame::yqsitem* mutable_backpack(int index);
  inline ::progame::yqsitem* add_backpack();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsitem >&
      backpack() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqsitem >*
      mutable_backpack();

  // optional int32 tubenum = 16;
  inline bool has_tubenum() const;
  inline void clear_tubenum();
  static const int kTubenumFieldNumber = 16;
  inline ::google::protobuf::int32 tubenum() const;
  inline void set_tubenum(::google::protobuf::int32 value);

  // optional int32 cannonmul = 17;
  inline bool has_cannonmul() const;
  inline void clear_cannonmul();
  static const int kCannonmulFieldNumber = 17;
  inline ::google::protobuf::int32 cannonmul() const;
  inline void set_cannonmul(::google::protobuf::int32 value);

  // optional double lastfiretime = 18;
  inline bool has_lastfiretime() const;
  inline void clear_lastfiretime();
  static const int kLastfiretimeFieldNumber = 18;
  inline double lastfiretime() const;
  inline void set_lastfiretime(double value);

  // @@protoc_insertion_point(class_scope:progame.yqsuser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  inline void set_has_cannontype();
  inline void clear_has_cannontype();
  inline void set_has_cannonlv();
  inline void clear_has_cannonlv();
  inline void set_has_bank_jetton();
  inline void clear_has_bank_jetton();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_tubenum();
  inline void clear_has_tubenum();
  inline void set_has_cannonmul();
  inline void clear_has_cannonmul();
  inline void set_has_lastfiretime();
  inline void clear_has_lastfiretime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairid_;
  ::std::string* nickname_;
  ::std::string* faceid_;
  ::std::string* jetton_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 isrobot_;
  ::std::string* money_;
  ::google::protobuf::int32 cannontype_;
  ::google::protobuf::int32 cannonlv_;
  ::std::string* bank_jetton_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cannonlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::yqscreatebullet > createbulletlist_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 tubenum_;
  ::google::protobuf::RepeatedPtrField< ::progame::yqsitem > backpack_;
  double lastfiretime_;
  ::google::protobuf::int32 cannonmul_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsuser* default_instance_;
};
// -------------------------------------------------------------------

class yqsuseitem : public ::google::protobuf::Message {
 public:
  yqsuseitem();
  virtual ~yqsuseitem();

  yqsuseitem(const yqsuseitem& from);

  inline yqsuseitem& operator=(const yqsuseitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsuseitem& default_instance();

  void Swap(yqsuseitem* other);

  // implements Message ----------------------------------------------

  yqsuseitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsuseitem& from);
  void MergeFrom(const yqsuseitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional double time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline double time() const;
  inline void set_time(double value);

  // @@protoc_insertion_point(class_scope:progame.yqsuseitem)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 type_;
  double time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsuseitem* default_instance_;
};
// -------------------------------------------------------------------

class yqsinfo : public ::google::protobuf::Message {
 public:
  yqsinfo();
  virtual ~yqsinfo();

  yqsinfo(const yqsinfo& from);

  inline yqsinfo& operator=(const yqsinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqsinfo& default_instance();

  void Swap(yqsinfo* other);

  // implements Message ----------------------------------------------

  yqsinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqsinfo& from);
  void MergeFrom(const yqsinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 2;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 2;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 4;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 4;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional string minenter = 5;
  inline bool has_minenter() const;
  inline void clear_minenter();
  static const int kMinenterFieldNumber = 5;
  inline const ::std::string& minenter() const;
  inline void set_minenter(const ::std::string& value);
  inline void set_minenter(const char* value);
  inline void set_minenter(const char* value, size_t size);
  inline ::std::string* mutable_minenter();
  inline ::std::string* release_minenter();
  inline void set_allocated_minenter(::std::string* minenter);

  // optional string maxenter = 6;
  inline bool has_maxenter() const;
  inline void clear_maxenter();
  static const int kMaxenterFieldNumber = 6;
  inline const ::std::string& maxenter() const;
  inline void set_maxenter(const ::std::string& value);
  inline void set_maxenter(const char* value);
  inline void set_maxenter(const char* value, size_t size);
  inline ::std::string* mutable_maxenter();
  inline ::std::string* release_maxenter();
  inline void set_allocated_maxenter(::std::string* maxenter);

  // optional int32 maxuser = 13;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 13;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // repeated .progame.yqsuser situser = 14;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 14;
  inline const ::progame::yqsuser& situser(int index) const;
  inline ::progame::yqsuser* mutable_situser(int index);
  inline ::progame::yqsuser* add_situser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsuser >&
      situser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqsuser >*
      mutable_situser();

  // repeated int32 standuser = 15;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 15;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // repeated .progame.yqscreatefish createfishlist = 16;
  inline int createfishlist_size() const;
  inline void clear_createfishlist();
  static const int kCreatefishlistFieldNumber = 16;
  inline const ::progame::yqscreatefish& createfishlist(int index) const;
  inline ::progame::yqscreatefish* mutable_createfishlist(int index);
  inline ::progame::yqscreatefish* add_createfishlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqscreatefish >&
      createfishlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqscreatefish >*
      mutable_createfishlist();

  // optional int32 cursceneid = 17;
  inline bool has_cursceneid() const;
  inline void clear_cursceneid();
  static const int kCursceneidFieldNumber = 17;
  inline ::google::protobuf::int32 cursceneid() const;
  inline void set_cursceneid(::google::protobuf::int32 value);

  // optional int32 presceneid = 18;
  inline bool has_presceneid() const;
  inline void clear_presceneid();
  static const int kPresceneidFieldNumber = 18;
  inline ::google::protobuf::int32 presceneid() const;
  inline void set_presceneid(::google::protobuf::int32 value);

  // optional int32 nextfishid = 19;
  inline bool has_nextfishid() const;
  inline void clear_nextfishid();
  static const int kNextfishidFieldNumber = 19;
  inline ::google::protobuf::int32 nextfishid() const;
  inline void set_nextfishid(::google::protobuf::int32 value);

  // repeated .progame.yqsuseitem useitemlist = 20;
  inline int useitemlist_size() const;
  inline void clear_useitemlist();
  static const int kUseitemlistFieldNumber = 20;
  inline const ::progame::yqsuseitem& useitemlist(int index) const;
  inline ::progame::yqsuseitem* mutable_useitemlist(int index);
  inline ::progame::yqsuseitem* add_useitemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsuseitem >&
      useitemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::yqsuseitem >*
      mutable_useitemlist();

  // optional int32 shoalpathtype = 21;
  inline bool has_shoalpathtype() const;
  inline void clear_shoalpathtype();
  static const int kShoalpathtypeFieldNumber = 21;
  inline ::google::protobuf::int32 shoalpathtype() const;
  inline void set_shoalpathtype(::google::protobuf::int32 value);

  // optional double systime = 22;
  inline bool has_systime() const;
  inline void clear_systime();
  static const int kSystimeFieldNumber = 22;
  inline double systime() const;
  inline void set_systime(double value);

  // optional int32 fishcfgid = 23;
  inline bool has_fishcfgid() const;
  inline void clear_fishcfgid();
  static const int kFishcfgidFieldNumber = 23;
  inline ::google::protobuf::int32 fishcfgid() const;
  inline void set_fishcfgid(::google::protobuf::int32 value);

  // optional int32 fishcfgnextidx = 24;
  inline bool has_fishcfgnextidx() const;
  inline void clear_fishcfgnextidx();
  static const int kFishcfgnextidxFieldNumber = 24;
  inline ::google::protobuf::int32 fishcfgnextidx() const;
  inline void set_fishcfgnextidx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.yqsinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_minenter();
  inline void clear_has_minenter();
  inline void set_has_maxenter();
  inline void clear_has_maxenter();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_cursceneid();
  inline void clear_has_cursceneid();
  inline void set_has_presceneid();
  inline void clear_has_presceneid();
  inline void set_has_nextfishid();
  inline void clear_has_nextfishid();
  inline void set_has_shoalpathtype();
  inline void clear_has_shoalpathtype();
  inline void set_has_systime();
  inline void clear_has_systime();
  inline void set_has_fishcfgid();
  inline void clear_has_fishcfgid();
  inline void set_has_fishcfgnextidx();
  inline void clear_has_fishcfgnextidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::std::string* minenter_;
  ::std::string* maxenter_;
  ::google::protobuf::RepeatedPtrField< ::progame::yqsuser > situser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 cursceneid_;
  ::google::protobuf::RepeatedPtrField< ::progame::yqscreatefish > createfishlist_;
  ::google::protobuf::int32 presceneid_;
  ::google::protobuf::int32 nextfishid_;
  ::google::protobuf::RepeatedPtrField< ::progame::yqsuseitem > useitemlist_;
  double systime_;
  ::google::protobuf::int32 shoalpathtype_;
  ::google::protobuf::int32 fishcfgid_;
  ::google::protobuf::int32 fishcfgnextidx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqsinfo* default_instance_;
};
// -------------------------------------------------------------------

class yqscatchfish : public ::google::protobuf::Message {
 public:
  yqscatchfish();
  virtual ~yqscatchfish();

  yqscatchfish(const yqscatchfish& from);

  inline yqscatchfish& operator=(const yqscatchfish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const yqscatchfish& default_instance();

  void Swap(yqscatchfish* other);

  // implements Message ----------------------------------------------

  yqscatchfish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const yqscatchfish& from);
  void MergeFrom(const yqscatchfish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 scoretype = 2;
  inline bool has_scoretype() const;
  inline void clear_scoretype();
  static const int kScoretypeFieldNumber = 2;
  inline ::google::protobuf::int32 scoretype() const;
  inline void set_scoretype(::google::protobuf::int32 value);

  // optional int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 scoremul = 4;
  inline bool has_scoremul() const;
  inline void clear_scoremul();
  static const int kScoremulFieldNumber = 4;
  inline ::google::protobuf::int32 scoremul() const;
  inline void set_scoremul(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.yqscatchfish)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_scoretype();
  inline void clear_has_scoretype();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_scoremul();
  inline void clear_has_scoremul();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 scoretype_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 scoremul_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fyqs_2eproto();
  friend void protobuf_AssignDesc_st_5fyqs_2eproto();
  friend void protobuf_ShutdownFile_st_5fyqs_2eproto();

  void InitAsDefaultInstance();
  static yqscatchfish* default_instance_;
};
// ===================================================================


// ===================================================================

// yqsconffish

// optional int32 type = 1;
inline bool yqsconffish::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqsconffish::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqsconffish::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqsconffish::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 yqsconffish::type() const {
  return type_;
}
inline void yqsconffish::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 enable = 2;
inline bool yqsconffish::has_enable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqsconffish::set_has_enable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqsconffish::clear_has_enable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqsconffish::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
inline ::google::protobuf::int32 yqsconffish::enable() const {
  return enable_;
}
inline void yqsconffish::set_enable(::google::protobuf::int32 value) {
  set_has_enable();
  enable_ = value;
}

// optional int32 width = 3;
inline bool yqsconffish::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsconffish::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsconffish::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsconffish::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 yqsconffish::width() const {
  return width_;
}
inline void yqsconffish::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 4;
inline bool yqsconffish::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqsconffish::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqsconffish::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqsconffish::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 yqsconffish::height() const {
  return height_;
}
inline void yqsconffish::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 pathtype = 5;
inline bool yqsconffish::has_pathtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yqsconffish::set_has_pathtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yqsconffish::clear_has_pathtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yqsconffish::clear_pathtype() {
  pathtype_ = 0;
  clear_has_pathtype();
}
inline ::google::protobuf::int32 yqsconffish::pathtype() const {
  return pathtype_;
}
inline void yqsconffish::set_pathtype(::google::protobuf::int32 value) {
  set_has_pathtype();
  pathtype_ = value;
}

// optional int32 scoretype = 6;
inline bool yqsconffish::has_scoretype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yqsconffish::set_has_scoretype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yqsconffish::clear_has_scoretype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yqsconffish::clear_scoretype() {
  scoretype_ = 0;
  clear_has_scoretype();
}
inline ::google::protobuf::int32 yqsconffish::scoretype() const {
  return scoretype_;
}
inline void yqsconffish::set_scoretype(::google::protobuf::int32 value) {
  set_has_scoretype();
  scoretype_ = value;
}

// optional string score = 7;
inline bool yqsconffish::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yqsconffish::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yqsconffish::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yqsconffish::clear_score() {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    score_->clear();
  }
  clear_has_score();
}
inline const ::std::string& yqsconffish::score() const {
  return *score_;
}
inline void yqsconffish::set_score(const ::std::string& value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void yqsconffish::set_score(const char* value) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(value);
}
inline void yqsconffish::set_score(const char* value, size_t size) {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  score_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsconffish::mutable_score() {
  set_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    score_ = new ::std::string;
  }
  return score_;
}
inline ::std::string* yqsconffish::release_score() {
  clear_has_score();
  if (score_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = score_;
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsconffish::set_allocated_score(::std::string* score) {
  if (score_ != &::google::protobuf::internal::kEmptyString) {
    delete score_;
  }
  if (score) {
    set_has_score();
    score_ = score;
  } else {
    clear_has_score();
    score_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// yqsconfcannon

// optional int32 type = 1;
inline bool yqsconfcannon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqsconfcannon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqsconfcannon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqsconfcannon::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 yqsconfcannon::type() const {
  return type_;
}
inline void yqsconfcannon::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 width = 2;
inline bool yqsconfcannon::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqsconfcannon::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqsconfcannon::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqsconfcannon::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 yqsconfcannon::width() const {
  return width_;
}
inline void yqsconfcannon::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 3;
inline bool yqsconfcannon::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsconfcannon::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsconfcannon::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsconfcannon::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 yqsconfcannon::height() const {
  return height_;
}
inline void yqsconfcannon::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional float speed = 4;
inline bool yqsconfcannon::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqsconfcannon::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqsconfcannon::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqsconfcannon::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float yqsconfcannon::speed() const {
  return speed_;
}
inline void yqsconfcannon::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional int32 tubenum = 5;
inline bool yqsconfcannon::has_tubenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yqsconfcannon::set_has_tubenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yqsconfcannon::clear_has_tubenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yqsconfcannon::clear_tubenum() {
  tubenum_ = 0;
  clear_has_tubenum();
}
inline ::google::protobuf::int32 yqsconfcannon::tubenum() const {
  return tubenum_;
}
inline void yqsconfcannon::set_tubenum(::google::protobuf::int32 value) {
  set_has_tubenum();
  tubenum_ = value;
}

// optional string jetton = 6;
inline bool yqsconfcannon::has_jetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yqsconfcannon::set_has_jetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yqsconfcannon::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yqsconfcannon::clear_jetton() {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    jetton_->clear();
  }
  clear_has_jetton();
}
inline const ::std::string& yqsconfcannon::jetton() const {
  return *jetton_;
}
inline void yqsconfcannon::set_jetton(const ::std::string& value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void yqsconfcannon::set_jetton(const char* value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void yqsconfcannon::set_jetton(const char* value, size_t size) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsconfcannon::mutable_jetton() {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  return jetton_;
}
inline ::std::string* yqsconfcannon::release_jetton() {
  clear_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jetton_;
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsconfcannon::set_allocated_jetton(::std::string* jetton) {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (jetton) {
    set_has_jetton();
    jetton_ = jetton;
  } else {
    clear_has_jetton();
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 money = 7;
inline bool yqsconfcannon::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yqsconfcannon::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yqsconfcannon::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yqsconfcannon::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 yqsconfcannon::money() const {
  return money_;
}
inline void yqsconfcannon::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 givejetton = 8;
inline bool yqsconfcannon::has_givejetton() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void yqsconfcannon::set_has_givejetton() {
  _has_bits_[0] |= 0x00000080u;
}
inline void yqsconfcannon::clear_has_givejetton() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void yqsconfcannon::clear_givejetton() {
  givejetton_ = 0;
  clear_has_givejetton();
}
inline ::google::protobuf::int32 yqsconfcannon::givejetton() const {
  return givejetton_;
}
inline void yqsconfcannon::set_givejetton(::google::protobuf::int32 value) {
  set_has_givejetton();
  givejetton_ = value;
}

// -------------------------------------------------------------------

// yqsconfitem

// optional int32 type = 1;
inline bool yqsconfitem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqsconfitem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqsconfitem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqsconfitem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 yqsconfitem::type() const {
  return type_;
}
inline void yqsconfitem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string name = 2;
inline bool yqsconfitem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqsconfitem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqsconfitem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqsconfitem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& yqsconfitem::name() const {
  return *name_;
}
inline void yqsconfitem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void yqsconfitem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void yqsconfitem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsconfitem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* yqsconfitem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsconfitem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 consumetype = 3;
inline bool yqsconfitem::has_consumetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsconfitem::set_has_consumetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsconfitem::clear_has_consumetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsconfitem::clear_consumetype() {
  consumetype_ = 0;
  clear_has_consumetype();
}
inline ::google::protobuf::int32 yqsconfitem::consumetype() const {
  return consumetype_;
}
inline void yqsconfitem::set_consumetype(::google::protobuf::int32 value) {
  set_has_consumetype();
  consumetype_ = value;
}

// optional int32 consume = 4;
inline bool yqsconfitem::has_consume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqsconfitem::set_has_consume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqsconfitem::clear_has_consume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqsconfitem::clear_consume() {
  consume_ = 0;
  clear_has_consume();
}
inline ::google::protobuf::int32 yqsconfitem::consume() const {
  return consume_;
}
inline void yqsconfitem::set_consume(::google::protobuf::int32 value) {
  set_has_consume();
  consume_ = value;
}

// -------------------------------------------------------------------

// yqsgameconf

// repeated .progame.yqsconffish fishlist = 1;
inline int yqsgameconf::fishlist_size() const {
  return fishlist_.size();
}
inline void yqsgameconf::clear_fishlist() {
  fishlist_.Clear();
}
inline const ::progame::yqsconffish& yqsgameconf::fishlist(int index) const {
  return fishlist_.Get(index);
}
inline ::progame::yqsconffish* yqsgameconf::mutable_fishlist(int index) {
  return fishlist_.Mutable(index);
}
inline ::progame::yqsconffish* yqsgameconf::add_fishlist() {
  return fishlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsconffish >&
yqsgameconf::fishlist() const {
  return fishlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqsconffish >*
yqsgameconf::mutable_fishlist() {
  return &fishlist_;
}

// repeated .progame.yqsconfcannon cannonlist = 2;
inline int yqsgameconf::cannonlist_size() const {
  return cannonlist_.size();
}
inline void yqsgameconf::clear_cannonlist() {
  cannonlist_.Clear();
}
inline const ::progame::yqsconfcannon& yqsgameconf::cannonlist(int index) const {
  return cannonlist_.Get(index);
}
inline ::progame::yqsconfcannon* yqsgameconf::mutable_cannonlist(int index) {
  return cannonlist_.Mutable(index);
}
inline ::progame::yqsconfcannon* yqsgameconf::add_cannonlist() {
  return cannonlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsconfcannon >&
yqsgameconf::cannonlist() const {
  return cannonlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqsconfcannon >*
yqsgameconf::mutable_cannonlist() {
  return &cannonlist_;
}

// optional float fireinterval = 3;
inline bool yqsgameconf::has_fireinterval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsgameconf::set_has_fireinterval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsgameconf::clear_has_fireinterval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsgameconf::clear_fireinterval() {
  fireinterval_ = 0;
  clear_has_fireinterval();
}
inline float yqsgameconf::fireinterval() const {
  return fireinterval_;
}
inline void yqsgameconf::set_fireinterval(float value) {
  set_has_fireinterval();
  fireinterval_ = value;
}

// optional int32 ionneedpower = 4;
inline bool yqsgameconf::has_ionneedpower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqsgameconf::set_has_ionneedpower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqsgameconf::clear_has_ionneedpower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqsgameconf::clear_ionneedpower() {
  ionneedpower_ = 0;
  clear_has_ionneedpower();
}
inline ::google::protobuf::int32 yqsgameconf::ionneedpower() const {
  return ionneedpower_;
}
inline void yqsgameconf::set_ionneedpower(::google::protobuf::int32 value) {
  set_has_ionneedpower();
  ionneedpower_ = value;
}

// optional int32 rangebombradius = 5;
inline bool yqsgameconf::has_rangebombradius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yqsgameconf::set_has_rangebombradius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yqsgameconf::clear_has_rangebombradius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yqsgameconf::clear_rangebombradius() {
  rangebombradius_ = 0;
  clear_has_rangebombradius();
}
inline ::google::protobuf::int32 yqsgameconf::rangebombradius() const {
  return rangebombradius_;
}
inline void yqsgameconf::set_rangebombradius(::google::protobuf::int32 value) {
  set_has_rangebombradius();
  rangebombradius_ = value;
}

// optional float freezetime = 6;
inline bool yqsgameconf::has_freezetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yqsgameconf::set_has_freezetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yqsgameconf::clear_has_freezetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yqsgameconf::clear_freezetime() {
  freezetime_ = 0;
  clear_has_freezetime();
}
inline float yqsgameconf::freezetime() const {
  return freezetime_;
}
inline void yqsgameconf::set_freezetime(float value) {
  set_has_freezetime();
  freezetime_ = value;
}

// repeated .progame.yqsconfitem itemlist = 7;
inline int yqsgameconf::itemlist_size() const {
  return itemlist_.size();
}
inline void yqsgameconf::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::progame::yqsconfitem& yqsgameconf::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::progame::yqsconfitem* yqsgameconf::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::progame::yqsconfitem* yqsgameconf::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsconfitem >&
yqsgameconf::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqsconfitem >*
yqsgameconf::mutable_itemlist() {
  return &itemlist_;
}

// optional float freezecooldown = 8;
inline bool yqsgameconf::has_freezecooldown() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void yqsgameconf::set_has_freezecooldown() {
  _has_bits_[0] |= 0x00000080u;
}
inline void yqsgameconf::clear_has_freezecooldown() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void yqsgameconf::clear_freezecooldown() {
  freezecooldown_ = 0;
  clear_has_freezecooldown();
}
inline float yqsgameconf::freezecooldown() const {
  return freezecooldown_;
}
inline void yqsgameconf::set_freezecooldown(float value) {
  set_has_freezecooldown();
  freezecooldown_ = value;
}

// optional float locktime = 9;
inline bool yqsgameconf::has_locktime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void yqsgameconf::set_has_locktime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void yqsgameconf::clear_has_locktime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void yqsgameconf::clear_locktime() {
  locktime_ = 0;
  clear_has_locktime();
}
inline float yqsgameconf::locktime() const {
  return locktime_;
}
inline void yqsgameconf::set_locktime(float value) {
  set_has_locktime();
  locktime_ = value;
}

// optional float lockcooldown = 10;
inline bool yqsgameconf::has_lockcooldown() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void yqsgameconf::set_has_lockcooldown() {
  _has_bits_[0] |= 0x00000200u;
}
inline void yqsgameconf::clear_has_lockcooldown() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void yqsgameconf::clear_lockcooldown() {
  lockcooldown_ = 0;
  clear_has_lockcooldown();
}
inline float yqsgameconf::lockcooldown() const {
  return lockcooldown_;
}
inline void yqsgameconf::set_lockcooldown(float value) {
  set_has_lockcooldown();
  lockcooldown_ = value;
}

// -------------------------------------------------------------------

// yqscreatefish

// optional int32 type = 1;
inline bool yqscreatefish::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqscreatefish::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqscreatefish::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqscreatefish::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 yqscreatefish::type() const {
  return type_;
}
inline void yqscreatefish::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool yqscreatefish::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqscreatefish::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqscreatefish::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqscreatefish::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 yqscreatefish::id() const {
  return id_;
}
inline void yqscreatefish::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pathid = 3;
inline bool yqscreatefish::has_pathid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqscreatefish::set_has_pathid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqscreatefish::clear_has_pathid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqscreatefish::clear_pathid() {
  pathid_ = 0;
  clear_has_pathid();
}
inline ::google::protobuf::int32 yqscreatefish::pathid() const {
  return pathid_;
}
inline void yqscreatefish::set_pathid(::google::protobuf::int32 value) {
  set_has_pathid();
  pathid_ = value;
}

// optional int32 pathtype = 4;
inline bool yqscreatefish::has_pathtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqscreatefish::set_has_pathtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqscreatefish::clear_has_pathtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqscreatefish::clear_pathtype() {
  pathtype_ = 0;
  clear_has_pathtype();
}
inline ::google::protobuf::int32 yqscreatefish::pathtype() const {
  return pathtype_;
}
inline void yqscreatefish::set_pathtype(::google::protobuf::int32 value) {
  set_has_pathtype();
  pathtype_ = value;
}

// optional int32 width = 5;
inline bool yqscreatefish::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yqscreatefish::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yqscreatefish::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yqscreatefish::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 yqscreatefish::width() const {
  return width_;
}
inline void yqscreatefish::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 6;
inline bool yqscreatefish::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yqscreatefish::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yqscreatefish::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yqscreatefish::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 yqscreatefish::height() const {
  return height_;
}
inline void yqscreatefish::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional float offsetx = 7;
inline bool yqscreatefish::has_offsetx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yqscreatefish::set_has_offsetx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yqscreatefish::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yqscreatefish::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline float yqscreatefish::offsetx() const {
  return offsetx_;
}
inline void yqscreatefish::set_offsetx(float value) {
  set_has_offsetx();
  offsetx_ = value;
}

// optional float offsety = 8;
inline bool yqscreatefish::has_offsety() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void yqscreatefish::set_has_offsety() {
  _has_bits_[0] |= 0x00000080u;
}
inline void yqscreatefish::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void yqscreatefish::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline float yqscreatefish::offsety() const {
  return offsety_;
}
inline void yqscreatefish::set_offsety(float value) {
  set_has_offsety();
  offsety_ = value;
}

// optional float delay = 9;
inline bool yqscreatefish::has_delay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void yqscreatefish::set_has_delay() {
  _has_bits_[0] |= 0x00000100u;
}
inline void yqscreatefish::clear_has_delay() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void yqscreatefish::clear_delay() {
  delay_ = 0;
  clear_has_delay();
}
inline float yqscreatefish::delay() const {
  return delay_;
}
inline void yqscreatefish::set_delay(float value) {
  set_has_delay();
  delay_ = value;
}

// optional float elaspe = 10;
inline bool yqscreatefish::has_elaspe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void yqscreatefish::set_has_elaspe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void yqscreatefish::clear_has_elaspe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void yqscreatefish::clear_elaspe() {
  elaspe_ = 0;
  clear_has_elaspe();
}
inline float yqscreatefish::elaspe() const {
  return elaspe_;
}
inline void yqscreatefish::set_elaspe(float value) {
  set_has_elaspe();
  elaspe_ = value;
}

// optional float speed = 11;
inline bool yqscreatefish::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void yqscreatefish::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void yqscreatefish::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void yqscreatefish::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float yqscreatefish::speed() const {
  return speed_;
}
inline void yqscreatefish::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional double borntime = 12;
inline bool yqscreatefish::has_borntime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void yqscreatefish::set_has_borntime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void yqscreatefish::clear_has_borntime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void yqscreatefish::clear_borntime() {
  borntime_ = 0;
  clear_has_borntime();
}
inline double yqscreatefish::borntime() const {
  return borntime_;
}
inline void yqscreatefish::set_borntime(double value) {
  set_has_borntime();
  borntime_ = value;
}

// optional int32 data = 13;
inline bool yqscreatefish::has_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void yqscreatefish::set_has_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void yqscreatefish::clear_has_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void yqscreatefish::clear_data() {
  data_ = 0;
  clear_has_data();
}
inline ::google::protobuf::int32 yqscreatefish::data() const {
  return data_;
}
inline void yqscreatefish::set_data(::google::protobuf::int32 value) {
  set_has_data();
  data_ = value;
}

// optional int32 score = 14;
inline bool yqscreatefish::has_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void yqscreatefish::set_has_score() {
  _has_bits_[0] |= 0x00002000u;
}
inline void yqscreatefish::clear_has_score() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void yqscreatefish::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 yqscreatefish::score() const {
  return score_;
}
inline void yqscreatefish::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 attrid = 15;
inline bool yqscreatefish::has_attrid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void yqscreatefish::set_has_attrid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void yqscreatefish::clear_has_attrid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void yqscreatefish::clear_attrid() {
  attrid_ = 0;
  clear_has_attrid();
}
inline ::google::protobuf::int32 yqscreatefish::attrid() const {
  return attrid_;
}
inline void yqscreatefish::set_attrid(::google::protobuf::int32 value) {
  set_has_attrid();
  attrid_ = value;
}

// optional int32 chairid = 16;
inline bool yqscreatefish::has_chairid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void yqscreatefish::set_has_chairid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void yqscreatefish::clear_has_chairid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void yqscreatefish::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 yqscreatefish::chairid() const {
  return chairid_;
}
inline void yqscreatefish::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional float lifecycle = 17;
inline bool yqscreatefish::has_lifecycle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void yqscreatefish::set_has_lifecycle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void yqscreatefish::clear_has_lifecycle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void yqscreatefish::clear_lifecycle() {
  lifecycle_ = 0;
  clear_has_lifecycle();
}
inline float yqscreatefish::lifecycle() const {
  return lifecycle_;
}
inline void yqscreatefish::set_lifecycle(float value) {
  set_has_lifecycle();
  lifecycle_ = value;
}

// -------------------------------------------------------------------

// yqscreatebullet

// optional int32 cannontype = 1;
inline bool yqscreatebullet::has_cannontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqscreatebullet::set_has_cannontype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqscreatebullet::clear_has_cannontype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqscreatebullet::clear_cannontype() {
  cannontype_ = 0;
  clear_has_cannontype();
}
inline ::google::protobuf::int32 yqscreatebullet::cannontype() const {
  return cannontype_;
}
inline void yqscreatebullet::set_cannontype(::google::protobuf::int32 value) {
  set_has_cannontype();
  cannontype_ = value;
}

// optional int32 id = 2;
inline bool yqscreatebullet::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqscreatebullet::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqscreatebullet::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqscreatebullet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 yqscreatebullet::id() const {
  return id_;
}
inline void yqscreatebullet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional float speed = 3;
inline bool yqscreatebullet::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqscreatebullet::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqscreatebullet::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqscreatebullet::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float yqscreatebullet::speed() const {
  return speed_;
}
inline void yqscreatebullet::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional float posx = 4;
inline bool yqscreatebullet::has_posx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqscreatebullet::set_has_posx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqscreatebullet::clear_has_posx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqscreatebullet::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline float yqscreatebullet::posx() const {
  return posx_;
}
inline void yqscreatebullet::set_posx(float value) {
  set_has_posx();
  posx_ = value;
}

// optional float posy = 5;
inline bool yqscreatebullet::has_posy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yqscreatebullet::set_has_posy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yqscreatebullet::clear_has_posy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yqscreatebullet::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline float yqscreatebullet::posy() const {
  return posy_;
}
inline void yqscreatebullet::set_posy(float value) {
  set_has_posy();
  posy_ = value;
}

// optional float direction = 6;
inline bool yqscreatebullet::has_direction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yqscreatebullet::set_has_direction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yqscreatebullet::clear_has_direction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yqscreatebullet::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline float yqscreatebullet::direction() const {
  return direction_;
}
inline void yqscreatebullet::set_direction(float value) {
  set_has_direction();
  direction_ = value;
}

// optional int32 elaspe = 7;
inline bool yqscreatebullet::has_elaspe() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yqscreatebullet::set_has_elaspe() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yqscreatebullet::clear_has_elaspe() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yqscreatebullet::clear_elaspe() {
  elaspe_ = 0;
  clear_has_elaspe();
}
inline ::google::protobuf::int32 yqscreatebullet::elaspe() const {
  return elaspe_;
}
inline void yqscreatebullet::set_elaspe(::google::protobuf::int32 value) {
  set_has_elaspe();
  elaspe_ = value;
}

// optional int32 itemid = 8;
inline bool yqscreatebullet::has_itemid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void yqscreatebullet::set_has_itemid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void yqscreatebullet::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void yqscreatebullet::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 yqscreatebullet::itemid() const {
  return itemid_;
}
inline void yqscreatebullet::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 fishid = 9;
inline bool yqscreatebullet::has_fishid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void yqscreatebullet::set_has_fishid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void yqscreatebullet::clear_has_fishid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void yqscreatebullet::clear_fishid() {
  fishid_ = 0;
  clear_has_fishid();
}
inline ::google::protobuf::int32 yqscreatebullet::fishid() const {
  return fishid_;
}
inline void yqscreatebullet::set_fishid(::google::protobuf::int32 value) {
  set_has_fishid();
  fishid_ = value;
}

// optional int32 mul = 10;
inline bool yqscreatebullet::has_mul() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void yqscreatebullet::set_has_mul() {
  _has_bits_[0] |= 0x00000200u;
}
inline void yqscreatebullet::clear_has_mul() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void yqscreatebullet::clear_mul() {
  mul_ = 0;
  clear_has_mul();
}
inline ::google::protobuf::int32 yqscreatebullet::mul() const {
  return mul_;
}
inline void yqscreatebullet::set_mul(::google::protobuf::int32 value) {
  set_has_mul();
  mul_ = value;
}

// optional int32 new = 11;
inline bool yqscreatebullet::has_new_() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void yqscreatebullet::set_has_new_() {
  _has_bits_[0] |= 0x00000400u;
}
inline void yqscreatebullet::clear_has_new_() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void yqscreatebullet::clear_new_() {
  new__ = 0;
  clear_has_new_();
}
inline ::google::protobuf::int32 yqscreatebullet::new_() const {
  return new__;
}
inline void yqscreatebullet::set_new_(::google::protobuf::int32 value) {
  set_has_new_();
  new__ = value;
}

// optional int32 tubenum = 12;
inline bool yqscreatebullet::has_tubenum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void yqscreatebullet::set_has_tubenum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void yqscreatebullet::clear_has_tubenum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void yqscreatebullet::clear_tubenum() {
  tubenum_ = 0;
  clear_has_tubenum();
}
inline ::google::protobuf::int32 yqscreatebullet::tubenum() const {
  return tubenum_;
}
inline void yqscreatebullet::set_tubenum(::google::protobuf::int32 value) {
  set_has_tubenum();
  tubenum_ = value;
}

// -------------------------------------------------------------------

// yqsitem

// optional int32 itemid = 1;
inline bool yqsitem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqsitem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqsitem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqsitem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 yqsitem::itemid() const {
  return itemid_;
}
inline void yqsitem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 slotid = 2;
inline bool yqsitem::has_slotid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqsitem::set_has_slotid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqsitem::clear_has_slotid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqsitem::clear_slotid() {
  slotid_ = 0;
  clear_has_slotid();
}
inline ::google::protobuf::int32 yqsitem::slotid() const {
  return slotid_;
}
inline void yqsitem::set_slotid(::google::protobuf::int32 value) {
  set_has_slotid();
  slotid_ = value;
}

// optional int32 itemnum = 3;
inline bool yqsitem::has_itemnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsitem::set_has_itemnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsitem::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsitem::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 yqsitem::itemnum() const {
  return itemnum_;
}
inline void yqsitem::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional int32 type = 4;
inline bool yqsitem::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqsitem::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqsitem::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqsitem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 yqsitem::type() const {
  return type_;
}
inline void yqsitem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// yqsuser

// optional int32 userid = 1;
inline bool yqsuser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqsuser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqsuser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqsuser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 yqsuser::userid() const {
  return userid_;
}
inline void yqsuser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 chairid = 2;
inline bool yqsuser::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqsuser::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqsuser::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqsuser::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 yqsuser::chairid() const {
  return chairid_;
}
inline void yqsuser::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional string nickname = 3;
inline bool yqsuser::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsuser::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsuser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsuser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& yqsuser::nickname() const {
  return *nickname_;
}
inline void yqsuser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void yqsuser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void yqsuser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsuser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* yqsuser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsuser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string faceid = 4;
inline bool yqsuser::has_faceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqsuser::set_has_faceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqsuser::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqsuser::clear_faceid() {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    faceid_->clear();
  }
  clear_has_faceid();
}
inline const ::std::string& yqsuser::faceid() const {
  return *faceid_;
}
inline void yqsuser::set_faceid(const ::std::string& value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void yqsuser::set_faceid(const char* value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void yqsuser::set_faceid(const char* value, size_t size) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsuser::mutable_faceid() {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  return faceid_;
}
inline ::std::string* yqsuser::release_faceid() {
  clear_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faceid_;
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsuser::set_allocated_faceid(::std::string* faceid) {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (faceid) {
    set_has_faceid();
    faceid_ = faceid;
  } else {
    clear_has_faceid();
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 5;
inline bool yqsuser::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yqsuser::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yqsuser::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yqsuser::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 yqsuser::sex() const {
  return sex_;
}
inline void yqsuser::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string jetton = 6;
inline bool yqsuser::has_jetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yqsuser::set_has_jetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yqsuser::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yqsuser::clear_jetton() {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    jetton_->clear();
  }
  clear_has_jetton();
}
inline const ::std::string& yqsuser::jetton() const {
  return *jetton_;
}
inline void yqsuser::set_jetton(const ::std::string& value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void yqsuser::set_jetton(const char* value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void yqsuser::set_jetton(const char* value, size_t size) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsuser::mutable_jetton() {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  return jetton_;
}
inline ::std::string* yqsuser::release_jetton() {
  clear_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jetton_;
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsuser::set_allocated_jetton(::std::string* jetton) {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (jetton) {
    set_has_jetton();
    jetton_ = jetton;
  } else {
    clear_has_jetton();
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string money = 7;
inline bool yqsuser::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yqsuser::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yqsuser::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yqsuser::clear_money() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    money_->clear();
  }
  clear_has_money();
}
inline const ::std::string& yqsuser::money() const {
  return *money_;
}
inline void yqsuser::set_money(const ::std::string& value) {
  set_has_money();
  if (money_ == &::google::protobuf::internal::kEmptyString) {
    money_ = new ::std::string;
  }
  money_->assign(value);
}
inline void yqsuser::set_money(const char* value) {
  set_has_money();
  if (money_ == &::google::protobuf::internal::kEmptyString) {
    money_ = new ::std::string;
  }
  money_->assign(value);
}
inline void yqsuser::set_money(const char* value, size_t size) {
  set_has_money();
  if (money_ == &::google::protobuf::internal::kEmptyString) {
    money_ = new ::std::string;
  }
  money_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsuser::mutable_money() {
  set_has_money();
  if (money_ == &::google::protobuf::internal::kEmptyString) {
    money_ = new ::std::string;
  }
  return money_;
}
inline ::std::string* yqsuser::release_money() {
  clear_has_money();
  if (money_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = money_;
    money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsuser::set_allocated_money(::std::string* money) {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (money) {
    set_has_money();
    money_ = money;
  } else {
    clear_has_money();
    money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isrobot = 8;
inline bool yqsuser::has_isrobot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void yqsuser::set_has_isrobot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void yqsuser::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void yqsuser::clear_isrobot() {
  isrobot_ = 0;
  clear_has_isrobot();
}
inline ::google::protobuf::int32 yqsuser::isrobot() const {
  return isrobot_;
}
inline void yqsuser::set_isrobot(::google::protobuf::int32 value) {
  set_has_isrobot();
  isrobot_ = value;
}

// optional int32 cannontype = 9;
inline bool yqsuser::has_cannontype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void yqsuser::set_has_cannontype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void yqsuser::clear_has_cannontype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void yqsuser::clear_cannontype() {
  cannontype_ = 0;
  clear_has_cannontype();
}
inline ::google::protobuf::int32 yqsuser::cannontype() const {
  return cannontype_;
}
inline void yqsuser::set_cannontype(::google::protobuf::int32 value) {
  set_has_cannontype();
  cannontype_ = value;
}

// optional int32 cannonlv = 10;
inline bool yqsuser::has_cannonlv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void yqsuser::set_has_cannonlv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void yqsuser::clear_has_cannonlv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void yqsuser::clear_cannonlv() {
  cannonlv_ = 0;
  clear_has_cannonlv();
}
inline ::google::protobuf::int32 yqsuser::cannonlv() const {
  return cannonlv_;
}
inline void yqsuser::set_cannonlv(::google::protobuf::int32 value) {
  set_has_cannonlv();
  cannonlv_ = value;
}

// optional string bank_jetton = 11;
inline bool yqsuser::has_bank_jetton() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void yqsuser::set_has_bank_jetton() {
  _has_bits_[0] |= 0x00000400u;
}
inline void yqsuser::clear_has_bank_jetton() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void yqsuser::clear_bank_jetton() {
  if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
    bank_jetton_->clear();
  }
  clear_has_bank_jetton();
}
inline const ::std::string& yqsuser::bank_jetton() const {
  return *bank_jetton_;
}
inline void yqsuser::set_bank_jetton(const ::std::string& value) {
  set_has_bank_jetton();
  if (bank_jetton_ == &::google::protobuf::internal::kEmptyString) {
    bank_jetton_ = new ::std::string;
  }
  bank_jetton_->assign(value);
}
inline void yqsuser::set_bank_jetton(const char* value) {
  set_has_bank_jetton();
  if (bank_jetton_ == &::google::protobuf::internal::kEmptyString) {
    bank_jetton_ = new ::std::string;
  }
  bank_jetton_->assign(value);
}
inline void yqsuser::set_bank_jetton(const char* value, size_t size) {
  set_has_bank_jetton();
  if (bank_jetton_ == &::google::protobuf::internal::kEmptyString) {
    bank_jetton_ = new ::std::string;
  }
  bank_jetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsuser::mutable_bank_jetton() {
  set_has_bank_jetton();
  if (bank_jetton_ == &::google::protobuf::internal::kEmptyString) {
    bank_jetton_ = new ::std::string;
  }
  return bank_jetton_;
}
inline ::std::string* yqsuser::release_bank_jetton() {
  clear_has_bank_jetton();
  if (bank_jetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bank_jetton_;
    bank_jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsuser::set_allocated_bank_jetton(::std::string* bank_jetton) {
  if (bank_jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_jetton_;
  }
  if (bank_jetton) {
    set_has_bank_jetton();
    bank_jetton_ = bank_jetton;
  } else {
    clear_has_bank_jetton();
    bank_jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 12;
inline bool yqsuser::has_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void yqsuser::set_has_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void yqsuser::clear_has_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void yqsuser::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 yqsuser::state() const {
  return state_;
}
inline void yqsuser::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// repeated int32 cannonlist = 13;
inline int yqsuser::cannonlist_size() const {
  return cannonlist_.size();
}
inline void yqsuser::clear_cannonlist() {
  cannonlist_.Clear();
}
inline ::google::protobuf::int32 yqsuser::cannonlist(int index) const {
  return cannonlist_.Get(index);
}
inline void yqsuser::set_cannonlist(int index, ::google::protobuf::int32 value) {
  cannonlist_.Set(index, value);
}
inline void yqsuser::add_cannonlist(::google::protobuf::int32 value) {
  cannonlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
yqsuser::cannonlist() const {
  return cannonlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
yqsuser::mutable_cannonlist() {
  return &cannonlist_;
}

// repeated .progame.yqscreatebullet createbulletlist = 14;
inline int yqsuser::createbulletlist_size() const {
  return createbulletlist_.size();
}
inline void yqsuser::clear_createbulletlist() {
  createbulletlist_.Clear();
}
inline const ::progame::yqscreatebullet& yqsuser::createbulletlist(int index) const {
  return createbulletlist_.Get(index);
}
inline ::progame::yqscreatebullet* yqsuser::mutable_createbulletlist(int index) {
  return createbulletlist_.Mutable(index);
}
inline ::progame::yqscreatebullet* yqsuser::add_createbulletlist() {
  return createbulletlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqscreatebullet >&
yqsuser::createbulletlist() const {
  return createbulletlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqscreatebullet >*
yqsuser::mutable_createbulletlist() {
  return &createbulletlist_;
}

// repeated .progame.yqsitem backpack = 15;
inline int yqsuser::backpack_size() const {
  return backpack_.size();
}
inline void yqsuser::clear_backpack() {
  backpack_.Clear();
}
inline const ::progame::yqsitem& yqsuser::backpack(int index) const {
  return backpack_.Get(index);
}
inline ::progame::yqsitem* yqsuser::mutable_backpack(int index) {
  return backpack_.Mutable(index);
}
inline ::progame::yqsitem* yqsuser::add_backpack() {
  return backpack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsitem >&
yqsuser::backpack() const {
  return backpack_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqsitem >*
yqsuser::mutable_backpack() {
  return &backpack_;
}

// optional int32 tubenum = 16;
inline bool yqsuser::has_tubenum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void yqsuser::set_has_tubenum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void yqsuser::clear_has_tubenum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void yqsuser::clear_tubenum() {
  tubenum_ = 0;
  clear_has_tubenum();
}
inline ::google::protobuf::int32 yqsuser::tubenum() const {
  return tubenum_;
}
inline void yqsuser::set_tubenum(::google::protobuf::int32 value) {
  set_has_tubenum();
  tubenum_ = value;
}

// optional int32 cannonmul = 17;
inline bool yqsuser::has_cannonmul() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void yqsuser::set_has_cannonmul() {
  _has_bits_[0] |= 0x00010000u;
}
inline void yqsuser::clear_has_cannonmul() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void yqsuser::clear_cannonmul() {
  cannonmul_ = 0;
  clear_has_cannonmul();
}
inline ::google::protobuf::int32 yqsuser::cannonmul() const {
  return cannonmul_;
}
inline void yqsuser::set_cannonmul(::google::protobuf::int32 value) {
  set_has_cannonmul();
  cannonmul_ = value;
}

// optional double lastfiretime = 18;
inline bool yqsuser::has_lastfiretime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void yqsuser::set_has_lastfiretime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void yqsuser::clear_has_lastfiretime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void yqsuser::clear_lastfiretime() {
  lastfiretime_ = 0;
  clear_has_lastfiretime();
}
inline double yqsuser::lastfiretime() const {
  return lastfiretime_;
}
inline void yqsuser::set_lastfiretime(double value) {
  set_has_lastfiretime();
  lastfiretime_ = value;
}

// -------------------------------------------------------------------

// yqsuseitem

// optional int32 userid = 1;
inline bool yqsuseitem::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqsuseitem::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqsuseitem::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqsuseitem::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 yqsuseitem::userid() const {
  return userid_;
}
inline void yqsuseitem::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 type = 2;
inline bool yqsuseitem::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqsuseitem::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqsuseitem::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqsuseitem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 yqsuseitem::type() const {
  return type_;
}
inline void yqsuseitem::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double time = 3;
inline bool yqsuseitem::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsuseitem::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsuseitem::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsuseitem::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double yqsuseitem::time() const {
  return time_;
}
inline void yqsuseitem::set_time(double value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// yqsinfo

// optional int32 tableid = 1;
inline bool yqsinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqsinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqsinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqsinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 yqsinfo::tableid() const {
  return tableid_;
}
inline void yqsinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 2;
inline bool yqsinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqsinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqsinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqsinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 yqsinfo::tabletype() const {
  return tabletype_;
}
inline void yqsinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 state = 3;
inline bool yqsinfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqsinfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqsinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqsinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 yqsinfo::state() const {
  return state_;
}
inline void yqsinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 4;
inline bool yqsinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqsinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqsinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqsinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 yqsinfo::timemark() const {
  return timemark_;
}
inline void yqsinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional string minenter = 5;
inline bool yqsinfo::has_minenter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void yqsinfo::set_has_minenter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void yqsinfo::clear_has_minenter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void yqsinfo::clear_minenter() {
  if (minenter_ != &::google::protobuf::internal::kEmptyString) {
    minenter_->clear();
  }
  clear_has_minenter();
}
inline const ::std::string& yqsinfo::minenter() const {
  return *minenter_;
}
inline void yqsinfo::set_minenter(const ::std::string& value) {
  set_has_minenter();
  if (minenter_ == &::google::protobuf::internal::kEmptyString) {
    minenter_ = new ::std::string;
  }
  minenter_->assign(value);
}
inline void yqsinfo::set_minenter(const char* value) {
  set_has_minenter();
  if (minenter_ == &::google::protobuf::internal::kEmptyString) {
    minenter_ = new ::std::string;
  }
  minenter_->assign(value);
}
inline void yqsinfo::set_minenter(const char* value, size_t size) {
  set_has_minenter();
  if (minenter_ == &::google::protobuf::internal::kEmptyString) {
    minenter_ = new ::std::string;
  }
  minenter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsinfo::mutable_minenter() {
  set_has_minenter();
  if (minenter_ == &::google::protobuf::internal::kEmptyString) {
    minenter_ = new ::std::string;
  }
  return minenter_;
}
inline ::std::string* yqsinfo::release_minenter() {
  clear_has_minenter();
  if (minenter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = minenter_;
    minenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsinfo::set_allocated_minenter(::std::string* minenter) {
  if (minenter_ != &::google::protobuf::internal::kEmptyString) {
    delete minenter_;
  }
  if (minenter) {
    set_has_minenter();
    minenter_ = minenter;
  } else {
    clear_has_minenter();
    minenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string maxenter = 6;
inline bool yqsinfo::has_maxenter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void yqsinfo::set_has_maxenter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void yqsinfo::clear_has_maxenter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void yqsinfo::clear_maxenter() {
  if (maxenter_ != &::google::protobuf::internal::kEmptyString) {
    maxenter_->clear();
  }
  clear_has_maxenter();
}
inline const ::std::string& yqsinfo::maxenter() const {
  return *maxenter_;
}
inline void yqsinfo::set_maxenter(const ::std::string& value) {
  set_has_maxenter();
  if (maxenter_ == &::google::protobuf::internal::kEmptyString) {
    maxenter_ = new ::std::string;
  }
  maxenter_->assign(value);
}
inline void yqsinfo::set_maxenter(const char* value) {
  set_has_maxenter();
  if (maxenter_ == &::google::protobuf::internal::kEmptyString) {
    maxenter_ = new ::std::string;
  }
  maxenter_->assign(value);
}
inline void yqsinfo::set_maxenter(const char* value, size_t size) {
  set_has_maxenter();
  if (maxenter_ == &::google::protobuf::internal::kEmptyString) {
    maxenter_ = new ::std::string;
  }
  maxenter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* yqsinfo::mutable_maxenter() {
  set_has_maxenter();
  if (maxenter_ == &::google::protobuf::internal::kEmptyString) {
    maxenter_ = new ::std::string;
  }
  return maxenter_;
}
inline ::std::string* yqsinfo::release_maxenter() {
  clear_has_maxenter();
  if (maxenter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maxenter_;
    maxenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void yqsinfo::set_allocated_maxenter(::std::string* maxenter) {
  if (maxenter_ != &::google::protobuf::internal::kEmptyString) {
    delete maxenter_;
  }
  if (maxenter) {
    set_has_maxenter();
    maxenter_ = maxenter;
  } else {
    clear_has_maxenter();
    maxenter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxuser = 13;
inline bool yqsinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void yqsinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x00000040u;
}
inline void yqsinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void yqsinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 yqsinfo::maxuser() const {
  return maxuser_;
}
inline void yqsinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// repeated .progame.yqsuser situser = 14;
inline int yqsinfo::situser_size() const {
  return situser_.size();
}
inline void yqsinfo::clear_situser() {
  situser_.Clear();
}
inline const ::progame::yqsuser& yqsinfo::situser(int index) const {
  return situser_.Get(index);
}
inline ::progame::yqsuser* yqsinfo::mutable_situser(int index) {
  return situser_.Mutable(index);
}
inline ::progame::yqsuser* yqsinfo::add_situser() {
  return situser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsuser >&
yqsinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqsuser >*
yqsinfo::mutable_situser() {
  return &situser_;
}

// repeated int32 standuser = 15;
inline int yqsinfo::standuser_size() const {
  return standuser_.size();
}
inline void yqsinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 yqsinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void yqsinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void yqsinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
yqsinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
yqsinfo::mutable_standuser() {
  return &standuser_;
}

// repeated .progame.yqscreatefish createfishlist = 16;
inline int yqsinfo::createfishlist_size() const {
  return createfishlist_.size();
}
inline void yqsinfo::clear_createfishlist() {
  createfishlist_.Clear();
}
inline const ::progame::yqscreatefish& yqsinfo::createfishlist(int index) const {
  return createfishlist_.Get(index);
}
inline ::progame::yqscreatefish* yqsinfo::mutable_createfishlist(int index) {
  return createfishlist_.Mutable(index);
}
inline ::progame::yqscreatefish* yqsinfo::add_createfishlist() {
  return createfishlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqscreatefish >&
yqsinfo::createfishlist() const {
  return createfishlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqscreatefish >*
yqsinfo::mutable_createfishlist() {
  return &createfishlist_;
}

// optional int32 cursceneid = 17;
inline bool yqsinfo::has_cursceneid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void yqsinfo::set_has_cursceneid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void yqsinfo::clear_has_cursceneid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void yqsinfo::clear_cursceneid() {
  cursceneid_ = 0;
  clear_has_cursceneid();
}
inline ::google::protobuf::int32 yqsinfo::cursceneid() const {
  return cursceneid_;
}
inline void yqsinfo::set_cursceneid(::google::protobuf::int32 value) {
  set_has_cursceneid();
  cursceneid_ = value;
}

// optional int32 presceneid = 18;
inline bool yqsinfo::has_presceneid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void yqsinfo::set_has_presceneid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void yqsinfo::clear_has_presceneid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void yqsinfo::clear_presceneid() {
  presceneid_ = 0;
  clear_has_presceneid();
}
inline ::google::protobuf::int32 yqsinfo::presceneid() const {
  return presceneid_;
}
inline void yqsinfo::set_presceneid(::google::protobuf::int32 value) {
  set_has_presceneid();
  presceneid_ = value;
}

// optional int32 nextfishid = 19;
inline bool yqsinfo::has_nextfishid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void yqsinfo::set_has_nextfishid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void yqsinfo::clear_has_nextfishid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void yqsinfo::clear_nextfishid() {
  nextfishid_ = 0;
  clear_has_nextfishid();
}
inline ::google::protobuf::int32 yqsinfo::nextfishid() const {
  return nextfishid_;
}
inline void yqsinfo::set_nextfishid(::google::protobuf::int32 value) {
  set_has_nextfishid();
  nextfishid_ = value;
}

// repeated .progame.yqsuseitem useitemlist = 20;
inline int yqsinfo::useitemlist_size() const {
  return useitemlist_.size();
}
inline void yqsinfo::clear_useitemlist() {
  useitemlist_.Clear();
}
inline const ::progame::yqsuseitem& yqsinfo::useitemlist(int index) const {
  return useitemlist_.Get(index);
}
inline ::progame::yqsuseitem* yqsinfo::mutable_useitemlist(int index) {
  return useitemlist_.Mutable(index);
}
inline ::progame::yqsuseitem* yqsinfo::add_useitemlist() {
  return useitemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::yqsuseitem >&
yqsinfo::useitemlist() const {
  return useitemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::yqsuseitem >*
yqsinfo::mutable_useitemlist() {
  return &useitemlist_;
}

// optional int32 shoalpathtype = 21;
inline bool yqsinfo::has_shoalpathtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void yqsinfo::set_has_shoalpathtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void yqsinfo::clear_has_shoalpathtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void yqsinfo::clear_shoalpathtype() {
  shoalpathtype_ = 0;
  clear_has_shoalpathtype();
}
inline ::google::protobuf::int32 yqsinfo::shoalpathtype() const {
  return shoalpathtype_;
}
inline void yqsinfo::set_shoalpathtype(::google::protobuf::int32 value) {
  set_has_shoalpathtype();
  shoalpathtype_ = value;
}

// optional double systime = 22;
inline bool yqsinfo::has_systime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void yqsinfo::set_has_systime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void yqsinfo::clear_has_systime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void yqsinfo::clear_systime() {
  systime_ = 0;
  clear_has_systime();
}
inline double yqsinfo::systime() const {
  return systime_;
}
inline void yqsinfo::set_systime(double value) {
  set_has_systime();
  systime_ = value;
}

// optional int32 fishcfgid = 23;
inline bool yqsinfo::has_fishcfgid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void yqsinfo::set_has_fishcfgid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void yqsinfo::clear_has_fishcfgid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void yqsinfo::clear_fishcfgid() {
  fishcfgid_ = 0;
  clear_has_fishcfgid();
}
inline ::google::protobuf::int32 yqsinfo::fishcfgid() const {
  return fishcfgid_;
}
inline void yqsinfo::set_fishcfgid(::google::protobuf::int32 value) {
  set_has_fishcfgid();
  fishcfgid_ = value;
}

// optional int32 fishcfgnextidx = 24;
inline bool yqsinfo::has_fishcfgnextidx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void yqsinfo::set_has_fishcfgnextidx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void yqsinfo::clear_has_fishcfgnextidx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void yqsinfo::clear_fishcfgnextidx() {
  fishcfgnextidx_ = 0;
  clear_has_fishcfgnextidx();
}
inline ::google::protobuf::int32 yqsinfo::fishcfgnextidx() const {
  return fishcfgnextidx_;
}
inline void yqsinfo::set_fishcfgnextidx(::google::protobuf::int32 value) {
  set_has_fishcfgnextidx();
  fishcfgnextidx_ = value;
}

// -------------------------------------------------------------------

// yqscatchfish

// optional int32 id = 1;
inline bool yqscatchfish::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void yqscatchfish::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void yqscatchfish::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void yqscatchfish::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 yqscatchfish::id() const {
  return id_;
}
inline void yqscatchfish::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 scoretype = 2;
inline bool yqscatchfish::has_scoretype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void yqscatchfish::set_has_scoretype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void yqscatchfish::clear_has_scoretype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void yqscatchfish::clear_scoretype() {
  scoretype_ = 0;
  clear_has_scoretype();
}
inline ::google::protobuf::int32 yqscatchfish::scoretype() const {
  return scoretype_;
}
inline void yqscatchfish::set_scoretype(::google::protobuf::int32 value) {
  set_has_scoretype();
  scoretype_ = value;
}

// optional int32 score = 3;
inline bool yqscatchfish::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void yqscatchfish::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void yqscatchfish::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void yqscatchfish::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 yqscatchfish::score() const {
  return score_;
}
inline void yqscatchfish::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 scoremul = 4;
inline bool yqscatchfish::has_scoremul() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void yqscatchfish::set_has_scoremul() {
  _has_bits_[0] |= 0x00000008u;
}
inline void yqscatchfish::clear_has_scoremul() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void yqscatchfish::clear_scoremul() {
  scoremul_ = 0;
  clear_has_scoremul();
}
inline ::google::protobuf::int32 yqscatchfish::scoremul() const {
  return scoremul_;
}
inline void yqscatchfish::set_scoremul(::google::protobuf::int32 value) {
  set_has_scoremul();
  scoremul_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fyqs_2eproto__INCLUDED
