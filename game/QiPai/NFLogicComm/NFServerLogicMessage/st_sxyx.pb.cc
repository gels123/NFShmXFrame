// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_sxyx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_sxyx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* sxyxjetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxjetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxhistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxcard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxcard_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxpouerjetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxpouerjetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxjettonrecordlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxjettonrecordlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxjettonrecorinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxjettonrecorinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* sxyxgamehistoryinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sxyxgamehistoryinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fsxyx_2eproto() {
  protobuf_AddDesc_st_5fsxyx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_sxyx.proto");
  GOOGLE_CHECK(file != NULL);
  sxyxjetton_descriptor_ = file->message_type(0);
  static const int sxyxjetton_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjetton, pourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjetton, jetton_),
  };
  sxyxjetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxjetton_descriptor_,
      sxyxjetton::default_instance_,
      sxyxjetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxjetton));
  sxyxplay_descriptor_ = file->message_type(1);
  static const int sxyxplay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxplay, playid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxplay, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxplay, cardtype_),
  };
  sxyxplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxplay_descriptor_,
      sxyxplay::default_instance_,
      sxyxplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxplay));
  sxyxinfo_descriptor_ = file->message_type(2);
  static const int sxyxinfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, bankerjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, applydrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, baccatattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, robotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, pilecardcont_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, historylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, xcardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, xpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, zcardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, zpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, bankerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, bankerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, maxrobotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, julebuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, bankercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, bankercountlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, legalkey_),
  };
  sxyxinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxinfo_descriptor_,
      sxyxinfo::default_instance_,
      sxyxinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxinfo));
  sxyxhistory_descriptor_ = file->message_type(3);
  static const int sxyxhistory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxhistory, xpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxhistory, zpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxhistory, winresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxhistory, duizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxhistory, recordidentification_),
  };
  sxyxhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxhistory_descriptor_,
      sxyxhistory::default_instance_,
      sxyxhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxhistory));
  sxyxcard_descriptor_ = file->message_type(4);
  static const int sxyxcard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxcard, poker_),
  };
  sxyxcard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxcard_descriptor_,
      sxyxcard::default_instance_,
      sxyxcard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxcard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxcard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxcard));
  sxyxpouerjetton_descriptor_ = file->message_type(5);
  static const int sxyxpouerjetton_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxpouerjetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxpouerjetton, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxpouerjetton, pourtype_),
  };
  sxyxpouerjetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxpouerjetton_descriptor_,
      sxyxpouerjetton::default_instance_,
      sxyxpouerjetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxpouerjetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxpouerjetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxpouerjetton));
  sxyxjettonrecordlist_descriptor_ = file->message_type(6);
  static const int sxyxjettonrecordlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecordlist, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecordlist, wincondition_),
  };
  sxyxjettonrecordlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxjettonrecordlist_descriptor_,
      sxyxjettonrecordlist::default_instance_,
      sxyxjettonrecordlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecordlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecordlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxjettonrecordlist));
  sxyxjettonrecorinfo_descriptor_ = file->message_type(7);
  static const int sxyxjettonrecorinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, facename_),
  };
  sxyxjettonrecorinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxjettonrecorinfo_descriptor_,
      sxyxjettonrecorinfo::default_instance_,
      sxyxjettonrecorinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxjettonrecorinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxjettonrecorinfo));
  sxyxgamehistoryinfo_descriptor_ = file->message_type(8);
  static const int sxyxgamehistoryinfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, magnification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, recordidentification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, xpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, zpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, winresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, duizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, limitred_),
  };
  sxyxgamehistoryinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sxyxgamehistoryinfo_descriptor_,
      sxyxgamehistoryinfo::default_instance_,
      sxyxgamehistoryinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sxyxgamehistoryinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sxyxgamehistoryinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fsxyx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxjetton_descriptor_, &sxyxjetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxplay_descriptor_, &sxyxplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxinfo_descriptor_, &sxyxinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxhistory_descriptor_, &sxyxhistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxcard_descriptor_, &sxyxcard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxpouerjetton_descriptor_, &sxyxpouerjetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxjettonrecordlist_descriptor_, &sxyxjettonrecordlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxjettonrecorinfo_descriptor_, &sxyxjettonrecorinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sxyxgamehistoryinfo_descriptor_, &sxyxgamehistoryinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fsxyx_2eproto() {
  delete sxyxjetton::default_instance_;
  delete sxyxjetton_reflection_;
  delete sxyxplay::default_instance_;
  delete sxyxplay_reflection_;
  delete sxyxinfo::default_instance_;
  delete sxyxinfo_reflection_;
  delete sxyxhistory::default_instance_;
  delete sxyxhistory_reflection_;
  delete sxyxcard::default_instance_;
  delete sxyxcard_reflection_;
  delete sxyxpouerjetton::default_instance_;
  delete sxyxpouerjetton_reflection_;
  delete sxyxjettonrecordlist::default_instance_;
  delete sxyxjettonrecordlist_reflection_;
  delete sxyxjettonrecorinfo::default_instance_;
  delete sxyxjettonrecorinfo_reflection_;
  delete sxyxgamehistoryinfo::default_instance_;
  delete sxyxgamehistoryinfo_reflection_;
}

void protobuf_AddDesc_st_5fsxyx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_sxyx.proto\022\007progame\032\016st_human.proto"
    "\">\n\nsxyxjetton\022\016\n\006userid\030\001 \001(\005\022\020\n\010pourty"
    "pe\030\002 \001(\005\022\016\n\006jetton\030\003 \001(\005\">\n\010sxyxplay\022\016\n\006"
    "playid\030\001 \001(\005\022\020\n\010cardlist\030\002 \003(\005\022\020\n\010cardty"
    "pe\030\003 \001(\005\"\256\004\n\010sxyxinfo\022\017\n\007tableid\030\001 \001(\005\022\017"
    "\n\007frameid\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\020\n\010timema"
    "rk\030\004 \001(\005\022\017\n\007situser\030\005 \003(\005\022\021\n\tstanduser\030\006"
    " \003(\005\022\017\n\007usernum\030\007 \001(\005\022\020\n\010bankerid\030\010 \001(\005\022"
    "\024\n\014bankerjetton\030\t \001(\t\022\017\n\007maxuser\030\n \001(\005\022\016"
    "\n\006faceid\030\013 \001(\t\022\022\n\nbankername\030\014 \001(\t\022\021\n\tap"
    "plydrop\030\r \001(\005\022\024\n\014baccatattype\030\016 \001(\005\022\021\n\tt"
    "abletype\030\017 \001(\005\022\020\n\010robotnum\030\020 \001(\005\022\024\n\014pile"
    "cardcont\030\021 \001(\005\022\023\n\013historylist\030\022 \003(\005\022\021\n\tx"
    "cardlist\030\023 \003(\005\022\016\n\006xpoint\030\024 \001(\005\022\021\n\tzcardl"
    "ist\030\025 \003(\005\022\016\n\006zpoint\030\026 \001(\005\022\022\n\nbankerlist\030"
    "\027 \003(\005\022\023\n\013bankerlimit\030\030 \001(\t\022\023\n\013maxrobotnu"
    "m\030\031 \001(\005\022\020\n\010julebuid\030\032 \001(\005\022\023\n\013bankercount"
    "\030\033 \001(\005\022\027\n\017bankercountlist\030\034 \003(\005\022\020\n\010legal"
    "key\030\035 \001(\t\"m\n\013sxyxhistory\022\016\n\006Xpoint\030\001 \001(\005"
    "\022\016\n\006ZPoint\030\002 \001(\005\022\021\n\tWinResult\030\003 \001(\005\022\r\n\005D"
    "uizi\030\004 \001(\005\022\034\n\024recordidentification\030\005 \001(\t"
    "\"\031\n\010sxyxcard\022\r\n\005poker\030\001 \003(\005\"C\n\017sxyxpouer"
    "jetton\022\016\n\006userid\030\001 \003(\005\022\016\n\006jetton\030\002 \003(\005\022\020"
    "\n\010pourtype\030\003 \003(\005\"<\n\024sxyxjettonrecordlist"
    "\022\016\n\006jetton\030\001 \003(\005\022\024\n\014wincondition\030\002 \003(\005\"x"
    "\n\023sxyxjettonrecorinfo\022\016\n\006userid\030\001 \001(\005\022\016\n"
    "\006jetton\030\002 \001(\005\022\016\n\006winnum\030\003 \001(\005\022\r\n\005jifen\030\004"
    " \001(\t\022\020\n\010nickname\030\005 \001(\t\022\020\n\010facename\030\006 \001(\t"
    "\"\343\001\n\023sxyxgamehistoryinfo\022\017\n\007tableid\030\001 \001("
    "\005\022\021\n\ttablename\030\002 \001(\t\022\025\n\rmagnification\030\003 "
    "\001(\005\022\r\n\005state\030\004 \001(\005\022\020\n\010timemark\030\005 \001(\005\022\034\n\024"
    "recordidentification\030\006 \003(\t\022\016\n\006Xpoint\030\007 \003"
    "(\005\022\016\n\006ZPoint\030\010 \003(\005\022\021\n\tWinResult\030\t \003(\005\022\r\n"
    "\005Duizi\030\n \003(\005\022\020\n\010limitred\030\013 \001(\005", 1350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_sxyx.proto", &protobuf_RegisterTypes);
  sxyxjetton::default_instance_ = new sxyxjetton();
  sxyxplay::default_instance_ = new sxyxplay();
  sxyxinfo::default_instance_ = new sxyxinfo();
  sxyxhistory::default_instance_ = new sxyxhistory();
  sxyxcard::default_instance_ = new sxyxcard();
  sxyxpouerjetton::default_instance_ = new sxyxpouerjetton();
  sxyxjettonrecordlist::default_instance_ = new sxyxjettonrecordlist();
  sxyxjettonrecorinfo::default_instance_ = new sxyxjettonrecorinfo();
  sxyxgamehistoryinfo::default_instance_ = new sxyxgamehistoryinfo();
  sxyxjetton::default_instance_->InitAsDefaultInstance();
  sxyxplay::default_instance_->InitAsDefaultInstance();
  sxyxinfo::default_instance_->InitAsDefaultInstance();
  sxyxhistory::default_instance_->InitAsDefaultInstance();
  sxyxcard::default_instance_->InitAsDefaultInstance();
  sxyxpouerjetton::default_instance_->InitAsDefaultInstance();
  sxyxjettonrecordlist::default_instance_->InitAsDefaultInstance();
  sxyxjettonrecorinfo::default_instance_->InitAsDefaultInstance();
  sxyxgamehistoryinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fsxyx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fsxyx_2eproto {
  StaticDescriptorInitializer_st_5fsxyx_2eproto() {
    protobuf_AddDesc_st_5fsxyx_2eproto();
  }
} static_descriptor_initializer_st_5fsxyx_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int sxyxjetton::kUseridFieldNumber;
const int sxyxjetton::kPourtypeFieldNumber;
const int sxyxjetton::kJettonFieldNumber;
#endif  // !_MSC_VER

sxyxjetton::sxyxjetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxjetton::InitAsDefaultInstance() {
}

sxyxjetton::sxyxjetton(const sxyxjetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxjetton::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourtype_ = 0;
  jetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxjetton::~sxyxjetton() {
  SharedDtor();
}

void sxyxjetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sxyxjetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxjetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxjetton_descriptor_;
}

const sxyxjetton& sxyxjetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxjetton* sxyxjetton::default_instance_ = NULL;

sxyxjetton* sxyxjetton::New() const {
  return new sxyxjetton;
}

void sxyxjetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourtype_ = 0;
    jetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxjetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourtype;
        break;
      }

      // optional int32 pourtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourtype_)));
          set_has_pourtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxjetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourtype(), output);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxjetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourtype(), target);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxjetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourtype = 2;
    if (has_pourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourtype());
    }

    // optional int32 jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxjetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxjetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxjetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxjetton::MergeFrom(const sxyxjetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourtype()) {
      set_pourtype(from.pourtype());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxjetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxjetton::CopyFrom(const sxyxjetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxjetton::IsInitialized() const {

  return true;
}

void sxyxjetton::Swap(sxyxjetton* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourtype_, other->pourtype_);
    std::swap(jetton_, other->jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxjetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxjetton_descriptor_;
  metadata.reflection = sxyxjetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxplay::kPlayidFieldNumber;
const int sxyxplay::kCardlistFieldNumber;
const int sxyxplay::kCardtypeFieldNumber;
#endif  // !_MSC_VER

sxyxplay::sxyxplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxplay::InitAsDefaultInstance() {
}

sxyxplay::sxyxplay(const sxyxplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxplay::SharedCtor() {
  _cached_size_ = 0;
  playid_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxplay::~sxyxplay() {
  SharedDtor();
}

void sxyxplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sxyxplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxplay_descriptor_;
}

const sxyxplay& sxyxplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxplay* sxyxplay::default_instance_ = NULL;

sxyxplay* sxyxplay::New() const {
  return new sxyxplay;
}

void sxyxplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playid_ = 0;
    cardtype_ = 0;
  }
  cardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playid_)));
          set_has_playid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        break;
      }

      // repeated int32 cardlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardlist;
        if (input->ExpectTag(24)) goto parse_cardtype;
        break;
      }

      // optional int32 cardtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playid(), output);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardlist(i), output);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 playid = 1;
  if (has_playid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playid(), target);
  }

  // repeated int32 cardlist = 2;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardlist(i), target);
  }

  // optional int32 cardtype = 3;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playid = 1;
    if (has_playid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playid());
    }

    // optional int32 cardtype = 3;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  // repeated int32 cardlist = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardlist(i));
    }
    total_size += 1 * this->cardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxplay::MergeFrom(const sxyxplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardlist_.MergeFrom(from.cardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playid()) {
      set_playid(from.playid());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxplay::CopyFrom(const sxyxplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxplay::IsInitialized() const {

  return true;
}

void sxyxplay::Swap(sxyxplay* other) {
  if (other != this) {
    std::swap(playid_, other->playid_);
    cardlist_.Swap(&other->cardlist_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxplay_descriptor_;
  metadata.reflection = sxyxplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxinfo::kTableidFieldNumber;
const int sxyxinfo::kFrameidFieldNumber;
const int sxyxinfo::kStateFieldNumber;
const int sxyxinfo::kTimemarkFieldNumber;
const int sxyxinfo::kSituserFieldNumber;
const int sxyxinfo::kStanduserFieldNumber;
const int sxyxinfo::kUsernumFieldNumber;
const int sxyxinfo::kBankeridFieldNumber;
const int sxyxinfo::kBankerjettonFieldNumber;
const int sxyxinfo::kMaxuserFieldNumber;
const int sxyxinfo::kFaceidFieldNumber;
const int sxyxinfo::kBankernameFieldNumber;
const int sxyxinfo::kApplydropFieldNumber;
const int sxyxinfo::kBaccatattypeFieldNumber;
const int sxyxinfo::kTabletypeFieldNumber;
const int sxyxinfo::kRobotnumFieldNumber;
const int sxyxinfo::kPilecardcontFieldNumber;
const int sxyxinfo::kHistorylistFieldNumber;
const int sxyxinfo::kXcardlistFieldNumber;
const int sxyxinfo::kXpointFieldNumber;
const int sxyxinfo::kZcardlistFieldNumber;
const int sxyxinfo::kZpointFieldNumber;
const int sxyxinfo::kBankerlistFieldNumber;
const int sxyxinfo::kBankerlimitFieldNumber;
const int sxyxinfo::kMaxrobotnumFieldNumber;
const int sxyxinfo::kJulebuidFieldNumber;
const int sxyxinfo::kBankercountFieldNumber;
const int sxyxinfo::kBankercountlistFieldNumber;
const int sxyxinfo::kLegalkeyFieldNumber;
#endif  // !_MSC_VER

sxyxinfo::sxyxinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxinfo::InitAsDefaultInstance() {
}

sxyxinfo::sxyxinfo(const sxyxinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  frameid_ = 0;
  state_ = 0;
  timemark_ = 0;
  usernum_ = 0;
  bankerid_ = 0;
  bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxuser_ = 0;
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applydrop_ = 0;
  baccatattype_ = 0;
  tabletype_ = 0;
  robotnum_ = 0;
  pilecardcont_ = 0;
  xpoint_ = 0;
  zpoint_ = 0;
  bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxrobotnum_ = 0;
  julebuid_ = 0;
  bankercount_ = 0;
  legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxinfo::~sxyxinfo() {
  SharedDtor();
}

void sxyxinfo::SharedDtor() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (this != default_instance_) {
  }
}

void sxyxinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxinfo_descriptor_;
}

const sxyxinfo& sxyxinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxinfo* sxyxinfo::default_instance_ = NULL;

sxyxinfo* sxyxinfo::New() const {
  return new sxyxinfo;
}

void sxyxinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    frameid_ = 0;
    state_ = 0;
    timemark_ = 0;
    usernum_ = 0;
    bankerid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bankerjetton()) {
      if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankerjetton_->clear();
      }
    }
    maxuser_ = 0;
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    applydrop_ = 0;
    baccatattype_ = 0;
    tabletype_ = 0;
    robotnum_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pilecardcont_ = 0;
    xpoint_ = 0;
    zpoint_ = 0;
    if (has_bankerlimit()) {
      if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
        bankerlimit_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    maxrobotnum_ = 0;
    julebuid_ = 0;
    bankercount_ = 0;
    if (has_legalkey()) {
      if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
        legalkey_->clear();
      }
    }
  }
  situser_.Clear();
  standuser_.Clear();
  historylist_.Clear();
  xcardlist_.Clear();
  zcardlist_.Clear();
  bankerlist_.Clear();
  bankercountlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameid;
        break;
      }

      // optional int32 frameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_situser;
        break;
      }

      // repeated int32 situser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_situser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_situser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_situser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_situser;
        if (input->ExpectTag(48)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_standuser;
        if (input->ExpectTag(56)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bankerjetton;
        break;
      }

      // optional string bankerjetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerjetton().data(), this->bankerjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_faceid;
        break;
      }

      // optional string faceid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bankername;
        break;
      }

      // optional string bankername = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_applydrop;
        break;
      }

      // optional int32 applydrop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applydrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applydrop_)));
          set_has_applydrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_baccatattype;
        break;
      }

      // optional int32 baccatattype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baccatattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baccatattype_)));
          set_has_baccatattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_robotnum;
        break;
      }

      // optional int32 robotnum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotnum_)));
          set_has_robotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_pilecardcont;
        break;
      }

      // optional int32 pilecardcont = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pilecardcont:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pilecardcont_)));
          set_has_pilecardcont();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_historylist;
        break;
      }

      // repeated int32 historylist = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historylist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_historylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_historylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_historylist;
        if (input->ExpectTag(152)) goto parse_xcardlist;
        break;
      }

      // repeated int32 xcardlist = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xcardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_xcardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xcardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_xcardlist;
        if (input->ExpectTag(160)) goto parse_xpoint;
        break;
      }

      // optional int32 xpoint = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpoint_)));
          set_has_xpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_zcardlist;
        break;
      }

      // repeated int32 zcardlist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zcardlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_zcardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zcardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_zcardlist;
        if (input->ExpectTag(176)) goto parse_zpoint;
        break;
      }

      // optional int32 zpoint = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zpoint_)));
          set_has_zpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bankerlist;
        break;
      }

      // repeated int32 bankerlist = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_bankerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bankerlist;
        if (input->ExpectTag(194)) goto parse_bankerlimit;
        break;
      }

      // optional string bankerlimit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerlimit().data(), this->bankerlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_maxrobotnum;
        break;
      }

      // optional int32 maxrobotnum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrobotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrobotnum_)));
          set_has_maxrobotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_julebuid;
        break;
      }

      // optional int32 julebuid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebuid_)));
          set_has_julebuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bankercount;
        break;
      }

      // optional int32 bankercount = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankercount_)));
          set_has_bankercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_bankercountlist;
        break;
      }

      // repeated int32 bankercountlist = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercountlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224, input, this->mutable_bankercountlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankercountlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_bankercountlist;
        if (input->ExpectTag(234)) goto parse_legalkey;
        break;
      }

      // optional string legalkey = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legalkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legalkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legalkey().data(), this->legalkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frameid(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timemark(), output);
  }

  // repeated int32 situser = 5;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->situser(i), output);
  }

  // repeated int32 standuser = 6;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->standuser(i), output);
  }

  // optional int32 usernum = 7;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->usernum(), output);
  }

  // optional int32 bankerid = 8;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bankerid(), output);
  }

  // optional string bankerjetton = 9;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bankerjetton(), output);
  }

  // optional int32 maxuser = 10;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxuser(), output);
  }

  // optional string faceid = 11;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->faceid(), output);
  }

  // optional string bankername = 12;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bankername(), output);
  }

  // optional int32 applydrop = 13;
  if (has_applydrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->applydrop(), output);
  }

  // optional int32 baccatattype = 14;
  if (has_baccatattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->baccatattype(), output);
  }

  // optional int32 tabletype = 15;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tabletype(), output);
  }

  // optional int32 robotnum = 16;
  if (has_robotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->robotnum(), output);
  }

  // optional int32 pilecardcont = 17;
  if (has_pilecardcont()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->pilecardcont(), output);
  }

  // repeated int32 historylist = 18;
  for (int i = 0; i < this->historylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->historylist(i), output);
  }

  // repeated int32 xcardlist = 19;
  for (int i = 0; i < this->xcardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->xcardlist(i), output);
  }

  // optional int32 xpoint = 20;
  if (has_xpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->xpoint(), output);
  }

  // repeated int32 zcardlist = 21;
  for (int i = 0; i < this->zcardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->zcardlist(i), output);
  }

  // optional int32 zpoint = 22;
  if (has_zpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->zpoint(), output);
  }

  // repeated int32 bankerlist = 23;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->bankerlist(i), output);
  }

  // optional string bankerlimit = 24;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->bankerlimit(), output);
  }

  // optional int32 maxrobotnum = 25;
  if (has_maxrobotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->maxrobotnum(), output);
  }

  // optional int32 julebuid = 26;
  if (has_julebuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->julebuid(), output);
  }

  // optional int32 bankercount = 27;
  if (has_bankercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->bankercount(), output);
  }

  // repeated int32 bankercountlist = 28;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->bankercountlist(i), output);
  }

  // optional string legalkey = 29;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->legalkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 frameid = 2;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frameid(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timemark(), target);
  }

  // repeated int32 situser = 5;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->situser(i), target);
  }

  // repeated int32 standuser = 6;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->standuser(i), target);
  }

  // optional int32 usernum = 7;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->usernum(), target);
  }

  // optional int32 bankerid = 8;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bankerid(), target);
  }

  // optional string bankerjetton = 9;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bankerjetton(), target);
  }

  // optional int32 maxuser = 10;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxuser(), target);
  }

  // optional string faceid = 11;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->faceid(), target);
  }

  // optional string bankername = 12;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bankername(), target);
  }

  // optional int32 applydrop = 13;
  if (has_applydrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->applydrop(), target);
  }

  // optional int32 baccatattype = 14;
  if (has_baccatattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->baccatattype(), target);
  }

  // optional int32 tabletype = 15;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tabletype(), target);
  }

  // optional int32 robotnum = 16;
  if (has_robotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->robotnum(), target);
  }

  // optional int32 pilecardcont = 17;
  if (has_pilecardcont()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->pilecardcont(), target);
  }

  // repeated int32 historylist = 18;
  for (int i = 0; i < this->historylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->historylist(i), target);
  }

  // repeated int32 xcardlist = 19;
  for (int i = 0; i < this->xcardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->xcardlist(i), target);
  }

  // optional int32 xpoint = 20;
  if (has_xpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->xpoint(), target);
  }

  // repeated int32 zcardlist = 21;
  for (int i = 0; i < this->zcardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->zcardlist(i), target);
  }

  // optional int32 zpoint = 22;
  if (has_zpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->zpoint(), target);
  }

  // repeated int32 bankerlist = 23;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->bankerlist(i), target);
  }

  // optional string bankerlimit = 24;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->bankerlimit(), target);
  }

  // optional int32 maxrobotnum = 25;
  if (has_maxrobotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->maxrobotnum(), target);
  }

  // optional int32 julebuid = 26;
  if (has_julebuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->julebuid(), target);
  }

  // optional int32 bankercount = 27;
  if (has_bankercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->bankercount(), target);
  }

  // repeated int32 bankercountlist = 28;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->bankercountlist(i), target);
  }

  // optional string legalkey = 29;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->legalkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 frameid = 2;
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 usernum = 7;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional int32 bankerid = 8;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bankerjetton = 9;
    if (has_bankerjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerjetton());
    }

    // optional int32 maxuser = 10;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional string faceid = 11;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

    // optional string bankername = 12;
    if (has_bankername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional int32 applydrop = 13;
    if (has_applydrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applydrop());
    }

    // optional int32 baccatattype = 14;
    if (has_baccatattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baccatattype());
    }

    // optional int32 tabletype = 15;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 robotnum = 16;
    if (has_robotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotnum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 pilecardcont = 17;
    if (has_pilecardcont()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pilecardcont());
    }

    // optional int32 xpoint = 20;
    if (has_xpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpoint());
    }

    // optional int32 zpoint = 22;
    if (has_zpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zpoint());
    }

    // optional string bankerlimit = 24;
    if (has_bankerlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerlimit());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 maxrobotnum = 25;
    if (has_maxrobotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrobotnum());
    }

    // optional int32 julebuid = 26;
    if (has_julebuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebuid());
    }

    // optional int32 bankercount = 27;
    if (has_bankercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankercount());
    }

    // optional string legalkey = 29;
    if (has_legalkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legalkey());
    }

  }
  // repeated int32 situser = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->situser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->situser(i));
    }
    total_size += 1 * this->situser_size() + data_size;
  }

  // repeated int32 standuser = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 1 * this->standuser_size() + data_size;
  }

  // repeated int32 historylist = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->historylist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->historylist(i));
    }
    total_size += 2 * this->historylist_size() + data_size;
  }

  // repeated int32 xcardlist = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->xcardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->xcardlist(i));
    }
    total_size += 2 * this->xcardlist_size() + data_size;
  }

  // repeated int32 zcardlist = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->zcardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zcardlist(i));
    }
    total_size += 2 * this->zcardlist_size() + data_size;
  }

  // repeated int32 bankerlist = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankerlist(i));
    }
    total_size += 2 * this->bankerlist_size() + data_size;
  }

  // repeated int32 bankercountlist = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankercountlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankercountlist(i));
    }
    total_size += 2 * this->bankercountlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxinfo::MergeFrom(const sxyxinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  historylist_.MergeFrom(from.historylist_);
  xcardlist_.MergeFrom(from.xcardlist_);
  zcardlist_.MergeFrom(from.zcardlist_);
  bankerlist_.MergeFrom(from.bankerlist_);
  bankercountlist_.MergeFrom(from.bankercountlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bankerjetton()) {
      set_bankerjetton(from.bankerjetton());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_applydrop()) {
      set_applydrop(from.applydrop());
    }
    if (from.has_baccatattype()) {
      set_baccatattype(from.baccatattype());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_robotnum()) {
      set_robotnum(from.robotnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pilecardcont()) {
      set_pilecardcont(from.pilecardcont());
    }
    if (from.has_xpoint()) {
      set_xpoint(from.xpoint());
    }
    if (from.has_zpoint()) {
      set_zpoint(from.zpoint());
    }
    if (from.has_bankerlimit()) {
      set_bankerlimit(from.bankerlimit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_maxrobotnum()) {
      set_maxrobotnum(from.maxrobotnum());
    }
    if (from.has_julebuid()) {
      set_julebuid(from.julebuid());
    }
    if (from.has_bankercount()) {
      set_bankercount(from.bankercount());
    }
    if (from.has_legalkey()) {
      set_legalkey(from.legalkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxinfo::CopyFrom(const sxyxinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxinfo::IsInitialized() const {

  return true;
}

void sxyxinfo::Swap(sxyxinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(frameid_, other->frameid_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(usernum_, other->usernum_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankerjetton_, other->bankerjetton_);
    std::swap(maxuser_, other->maxuser_);
    std::swap(faceid_, other->faceid_);
    std::swap(bankername_, other->bankername_);
    std::swap(applydrop_, other->applydrop_);
    std::swap(baccatattype_, other->baccatattype_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(robotnum_, other->robotnum_);
    std::swap(pilecardcont_, other->pilecardcont_);
    historylist_.Swap(&other->historylist_);
    xcardlist_.Swap(&other->xcardlist_);
    std::swap(xpoint_, other->xpoint_);
    zcardlist_.Swap(&other->zcardlist_);
    std::swap(zpoint_, other->zpoint_);
    bankerlist_.Swap(&other->bankerlist_);
    std::swap(bankerlimit_, other->bankerlimit_);
    std::swap(maxrobotnum_, other->maxrobotnum_);
    std::swap(julebuid_, other->julebuid_);
    std::swap(bankercount_, other->bankercount_);
    bankercountlist_.Swap(&other->bankercountlist_);
    std::swap(legalkey_, other->legalkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxinfo_descriptor_;
  metadata.reflection = sxyxinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxhistory::kXpointFieldNumber;
const int sxyxhistory::kZPointFieldNumber;
const int sxyxhistory::kWinResultFieldNumber;
const int sxyxhistory::kDuiziFieldNumber;
const int sxyxhistory::kRecordidentificationFieldNumber;
#endif  // !_MSC_VER

sxyxhistory::sxyxhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxhistory::InitAsDefaultInstance() {
}

sxyxhistory::sxyxhistory(const sxyxhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxhistory::SharedCtor() {
  _cached_size_ = 0;
  xpoint_ = 0;
  zpoint_ = 0;
  winresult_ = 0;
  duizi_ = 0;
  recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxhistory::~sxyxhistory() {
  SharedDtor();
}

void sxyxhistory::SharedDtor() {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    delete recordidentification_;
  }
  if (this != default_instance_) {
  }
}

void sxyxhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxhistory_descriptor_;
}

const sxyxhistory& sxyxhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxhistory* sxyxhistory::default_instance_ = NULL;

sxyxhistory* sxyxhistory::New() const {
  return new sxyxhistory;
}

void sxyxhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpoint_ = 0;
    zpoint_ = 0;
    winresult_ = 0;
    duizi_ = 0;
    if (has_recordidentification()) {
      if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
        recordidentification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Xpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpoint_)));
          set_has_xpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ZPoint;
        break;
      }

      // optional int32 ZPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zpoint_)));
          set_has_zpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WinResult;
        break;
      }

      // optional int32 WinResult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winresult_)));
          set_has_winresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Duizi;
        break;
      }

      // optional int32 Duizi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Duizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duizi_)));
          set_has_duizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recordidentification;
        break;
      }

      // optional string recordidentification = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordidentification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification().data(), this->recordidentification().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Xpoint = 1;
  if (has_xpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xpoint(), output);
  }

  // optional int32 ZPoint = 2;
  if (has_zpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zpoint(), output);
  }

  // optional int32 WinResult = 3;
  if (has_winresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winresult(), output);
  }

  // optional int32 Duizi = 4;
  if (has_duizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duizi(), output);
  }

  // optional string recordidentification = 5;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recordidentification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Xpoint = 1;
  if (has_xpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xpoint(), target);
  }

  // optional int32 ZPoint = 2;
  if (has_zpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zpoint(), target);
  }

  // optional int32 WinResult = 3;
  if (has_winresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winresult(), target);
  }

  // optional int32 Duizi = 4;
  if (has_duizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duizi(), target);
  }

  // optional string recordidentification = 5;
  if (has_recordidentification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification().data(), this->recordidentification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recordidentification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Xpoint = 1;
    if (has_xpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpoint());
    }

    // optional int32 ZPoint = 2;
    if (has_zpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zpoint());
    }

    // optional int32 WinResult = 3;
    if (has_winresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winresult());
    }

    // optional int32 Duizi = 4;
    if (has_duizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duizi());
    }

    // optional string recordidentification = 5;
    if (has_recordidentification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordidentification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxhistory::MergeFrom(const sxyxhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpoint()) {
      set_xpoint(from.xpoint());
    }
    if (from.has_zpoint()) {
      set_zpoint(from.zpoint());
    }
    if (from.has_winresult()) {
      set_winresult(from.winresult());
    }
    if (from.has_duizi()) {
      set_duizi(from.duizi());
    }
    if (from.has_recordidentification()) {
      set_recordidentification(from.recordidentification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxhistory::CopyFrom(const sxyxhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxhistory::IsInitialized() const {

  return true;
}

void sxyxhistory::Swap(sxyxhistory* other) {
  if (other != this) {
    std::swap(xpoint_, other->xpoint_);
    std::swap(zpoint_, other->zpoint_);
    std::swap(winresult_, other->winresult_);
    std::swap(duizi_, other->duizi_);
    std::swap(recordidentification_, other->recordidentification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxhistory_descriptor_;
  metadata.reflection = sxyxhistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxcard::kPokerFieldNumber;
#endif  // !_MSC_VER

sxyxcard::sxyxcard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxcard::InitAsDefaultInstance() {
}

sxyxcard::sxyxcard(const sxyxcard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxcard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxcard::~sxyxcard() {
  SharedDtor();
}

void sxyxcard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sxyxcard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxcard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxcard_descriptor_;
}

const sxyxcard& sxyxcard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxcard* sxyxcard::default_instance_ = NULL;

sxyxcard* sxyxcard::New() const {
  return new sxyxcard;
}

void sxyxcard::Clear() {
  poker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 poker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_poker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_poker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_poker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 poker = 1;
  for (int i = 0; i < this->poker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->poker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxcard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 poker = 1;
  for (int i = 0; i < this->poker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->poker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxcard::ByteSize() const {
  int total_size = 0;

  // repeated int32 poker = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->poker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->poker(i));
    }
    total_size += 1 * this->poker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxcard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxcard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxcard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxcard::MergeFrom(const sxyxcard& from) {
  GOOGLE_CHECK_NE(&from, this);
  poker_.MergeFrom(from.poker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxcard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxcard::CopyFrom(const sxyxcard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxcard::IsInitialized() const {

  return true;
}

void sxyxcard::Swap(sxyxcard* other) {
  if (other != this) {
    poker_.Swap(&other->poker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxcard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxcard_descriptor_;
  metadata.reflection = sxyxcard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxpouerjetton::kUseridFieldNumber;
const int sxyxpouerjetton::kJettonFieldNumber;
const int sxyxpouerjetton::kPourtypeFieldNumber;
#endif  // !_MSC_VER

sxyxpouerjetton::sxyxpouerjetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxpouerjetton::InitAsDefaultInstance() {
}

sxyxpouerjetton::sxyxpouerjetton(const sxyxpouerjetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxpouerjetton::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxpouerjetton::~sxyxpouerjetton() {
  SharedDtor();
}

void sxyxpouerjetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sxyxpouerjetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxpouerjetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxpouerjetton_descriptor_;
}

const sxyxpouerjetton& sxyxpouerjetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxpouerjetton* sxyxpouerjetton::default_instance_ = NULL;

sxyxpouerjetton* sxyxpouerjetton::New() const {
  return new sxyxpouerjetton;
}

void sxyxpouerjetton::Clear() {
  userid_.Clear();
  jetton_.Clear();
  pourtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxpouerjetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_userid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_userid;
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // repeated int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        if (input->ExpectTag(24)) goto parse_pourtype;
        break;
      }

      // repeated int32 pourtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pourtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pourtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pourtype;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxpouerjetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->userid(i), output);
  }

  // repeated int32 jetton = 2;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->jetton(i), output);
  }

  // repeated int32 pourtype = 3;
  for (int i = 0; i < this->pourtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pourtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxpouerjetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->userid(i), target);
  }

  // repeated int32 jetton = 2;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->jetton(i), target);
  }

  // repeated int32 pourtype = 3;
  for (int i = 0; i < this->pourtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pourtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxpouerjetton::ByteSize() const {
  int total_size = 0;

  // repeated int32 userid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->userid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userid(i));
    }
    total_size += 1 * this->userid_size() + data_size;
  }

  // repeated int32 jetton = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated int32 pourtype = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pourtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pourtype(i));
    }
    total_size += 1 * this->pourtype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxpouerjetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxpouerjetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxpouerjetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxpouerjetton::MergeFrom(const sxyxpouerjetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_.MergeFrom(from.userid_);
  jetton_.MergeFrom(from.jetton_);
  pourtype_.MergeFrom(from.pourtype_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxpouerjetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxpouerjetton::CopyFrom(const sxyxpouerjetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxpouerjetton::IsInitialized() const {

  return true;
}

void sxyxpouerjetton::Swap(sxyxpouerjetton* other) {
  if (other != this) {
    userid_.Swap(&other->userid_);
    jetton_.Swap(&other->jetton_);
    pourtype_.Swap(&other->pourtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxpouerjetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxpouerjetton_descriptor_;
  metadata.reflection = sxyxpouerjetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxjettonrecordlist::kJettonFieldNumber;
const int sxyxjettonrecordlist::kWinconditionFieldNumber;
#endif  // !_MSC_VER

sxyxjettonrecordlist::sxyxjettonrecordlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxjettonrecordlist::InitAsDefaultInstance() {
}

sxyxjettonrecordlist::sxyxjettonrecordlist(const sxyxjettonrecordlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxjettonrecordlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxjettonrecordlist::~sxyxjettonrecordlist() {
  SharedDtor();
}

void sxyxjettonrecordlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sxyxjettonrecordlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxjettonrecordlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxjettonrecordlist_descriptor_;
}

const sxyxjettonrecordlist& sxyxjettonrecordlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxjettonrecordlist* sxyxjettonrecordlist::default_instance_ = NULL;

sxyxjettonrecordlist* sxyxjettonrecordlist::New() const {
  return new sxyxjettonrecordlist;
}

void sxyxjettonrecordlist::Clear() {
  jetton_.Clear();
  wincondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxjettonrecordlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_jetton;
        if (input->ExpectTag(16)) goto parse_wincondition;
        break;
      }

      // repeated int32 wincondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wincondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_wincondition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wincondition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wincondition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxjettonrecordlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jetton(i), output);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->wincondition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxjettonrecordlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jetton(i), target);
  }

  // repeated int32 wincondition = 2;
  for (int i = 0; i < this->wincondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->wincondition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxjettonrecordlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 jetton = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated int32 wincondition = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->wincondition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wincondition(i));
    }
    total_size += 1 * this->wincondition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxjettonrecordlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxjettonrecordlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxjettonrecordlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxjettonrecordlist::MergeFrom(const sxyxjettonrecordlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  jetton_.MergeFrom(from.jetton_);
  wincondition_.MergeFrom(from.wincondition_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxjettonrecordlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxjettonrecordlist::CopyFrom(const sxyxjettonrecordlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxjettonrecordlist::IsInitialized() const {

  return true;
}

void sxyxjettonrecordlist::Swap(sxyxjettonrecordlist* other) {
  if (other != this) {
    jetton_.Swap(&other->jetton_);
    wincondition_.Swap(&other->wincondition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxjettonrecordlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxjettonrecordlist_descriptor_;
  metadata.reflection = sxyxjettonrecordlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxjettonrecorinfo::kUseridFieldNumber;
const int sxyxjettonrecorinfo::kJettonFieldNumber;
const int sxyxjettonrecorinfo::kWinnumFieldNumber;
const int sxyxjettonrecorinfo::kJifenFieldNumber;
const int sxyxjettonrecorinfo::kNicknameFieldNumber;
const int sxyxjettonrecorinfo::kFacenameFieldNumber;
#endif  // !_MSC_VER

sxyxjettonrecorinfo::sxyxjettonrecorinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxjettonrecorinfo::InitAsDefaultInstance() {
}

sxyxjettonrecorinfo::sxyxjettonrecorinfo(const sxyxjettonrecorinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxjettonrecorinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  jetton_ = 0;
  winnum_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxjettonrecorinfo::~sxyxjettonrecorinfo() {
  SharedDtor();
}

void sxyxjettonrecorinfo::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (this != default_instance_) {
  }
}

void sxyxjettonrecorinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxjettonrecorinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxjettonrecorinfo_descriptor_;
}

const sxyxjettonrecorinfo& sxyxjettonrecorinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxjettonrecorinfo* sxyxjettonrecorinfo::default_instance_ = NULL;

sxyxjettonrecorinfo* sxyxjettonrecorinfo::New() const {
  return new sxyxjettonrecorinfo;
}

void sxyxjettonrecorinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    jetton_ = 0;
    winnum_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxjettonrecorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jifen;
        break;
      }

      // optional string jifen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facename;
        break;
      }

      // optional string facename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxjettonrecorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jetton(), output);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winnum(), output);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jifen(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->facename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxjettonrecorinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jetton(), target);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winnum(), target);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jifen(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->facename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxjettonrecorinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 jetton = 2;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 winnum = 3;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional string jifen = 4;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string facename = 6;
    if (has_facename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxjettonrecorinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxjettonrecorinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxjettonrecorinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxjettonrecorinfo::MergeFrom(const sxyxjettonrecorinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxjettonrecorinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxjettonrecorinfo::CopyFrom(const sxyxjettonrecorinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxjettonrecorinfo::IsInitialized() const {

  return true;
}

void sxyxjettonrecorinfo::Swap(sxyxjettonrecorinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(jetton_, other->jetton_);
    std::swap(winnum_, other->winnum_);
    std::swap(jifen_, other->jifen_);
    std::swap(nickname_, other->nickname_);
    std::swap(facename_, other->facename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxjettonrecorinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxjettonrecorinfo_descriptor_;
  metadata.reflection = sxyxjettonrecorinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sxyxgamehistoryinfo::kTableidFieldNumber;
const int sxyxgamehistoryinfo::kTablenameFieldNumber;
const int sxyxgamehistoryinfo::kMagnificationFieldNumber;
const int sxyxgamehistoryinfo::kStateFieldNumber;
const int sxyxgamehistoryinfo::kTimemarkFieldNumber;
const int sxyxgamehistoryinfo::kRecordidentificationFieldNumber;
const int sxyxgamehistoryinfo::kXpointFieldNumber;
const int sxyxgamehistoryinfo::kZPointFieldNumber;
const int sxyxgamehistoryinfo::kWinResultFieldNumber;
const int sxyxgamehistoryinfo::kDuiziFieldNumber;
const int sxyxgamehistoryinfo::kLimitredFieldNumber;
#endif  // !_MSC_VER

sxyxgamehistoryinfo::sxyxgamehistoryinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sxyxgamehistoryinfo::InitAsDefaultInstance() {
}

sxyxgamehistoryinfo::sxyxgamehistoryinfo(const sxyxgamehistoryinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sxyxgamehistoryinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  magnification_ = 0;
  state_ = 0;
  timemark_ = 0;
  limitred_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sxyxgamehistoryinfo::~sxyxgamehistoryinfo() {
  SharedDtor();
}

void sxyxgamehistoryinfo::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void sxyxgamehistoryinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sxyxgamehistoryinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sxyxgamehistoryinfo_descriptor_;
}

const sxyxgamehistoryinfo& sxyxgamehistoryinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fsxyx_2eproto();
  return *default_instance_;
}

sxyxgamehistoryinfo* sxyxgamehistoryinfo::default_instance_ = NULL;

sxyxgamehistoryinfo* sxyxgamehistoryinfo::New() const {
  return new sxyxgamehistoryinfo;
}

void sxyxgamehistoryinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    magnification_ = 0;
    state_ = 0;
    timemark_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    limitred_ = 0;
  }
  recordidentification_.Clear();
  xpoint_.Clear();
  zpoint_.Clear();
  winresult_.Clear();
  duizi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sxyxgamehistoryinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tablename;
        break;
      }

      // optional string tablename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_magnification;
        break;
      }

      // optional int32 magnification = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magnification:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magnification_)));
          set_has_magnification();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        break;
      }

      // repeated string recordidentification = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordidentification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recordidentification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recordidentification(this->recordidentification_size() - 1).data(),
            this->recordidentification(this->recordidentification_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordidentification;
        if (input->ExpectTag(56)) goto parse_Xpoint;
        break;
      }

      // repeated int32 Xpoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Xpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_xpoint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xpoint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Xpoint;
        if (input->ExpectTag(64)) goto parse_ZPoint;
        break;
      }

      // repeated int32 ZPoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_zpoint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zpoint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ZPoint;
        if (input->ExpectTag(72)) goto parse_WinResult;
        break;
      }

      // repeated int32 WinResult = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_winresult())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winresult())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WinResult;
        if (input->ExpectTag(80)) goto parse_Duizi;
        break;
      }

      // repeated int32 Duizi = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Duizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_duizi())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_duizi())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Duizi;
        if (input->ExpectTag(88)) goto parse_limitred;
        break;
      }

      // optional int32 limitred = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitred_)));
          set_has_limitred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sxyxgamehistoryinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->magnification(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recordidentification(i).data(), this->recordidentification(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->recordidentification(i), output);
  }

  // repeated int32 Xpoint = 7;
  for (int i = 0; i < this->xpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->xpoint(i), output);
  }

  // repeated int32 ZPoint = 8;
  for (int i = 0; i < this->zpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->zpoint(i), output);
  }

  // repeated int32 WinResult = 9;
  for (int i = 0; i < this->winresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->winresult(i), output);
  }

  // repeated int32 Duizi = 10;
  for (int i = 0; i < this->duizi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->duizi(i), output);
  }

  // optional int32 limitred = 11;
  if (has_limitred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->limitred(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sxyxgamehistoryinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional string tablename = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // optional int32 magnification = 3;
  if (has_magnification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->magnification(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  // repeated string recordidentification = 6;
  for (int i = 0; i < this->recordidentification_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recordidentification(i).data(), this->recordidentification(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->recordidentification(i), target);
  }

  // repeated int32 Xpoint = 7;
  for (int i = 0; i < this->xpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->xpoint(i), target);
  }

  // repeated int32 ZPoint = 8;
  for (int i = 0; i < this->zpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->zpoint(i), target);
  }

  // repeated int32 WinResult = 9;
  for (int i = 0; i < this->winresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->winresult(i), target);
  }

  // repeated int32 Duizi = 10;
  for (int i = 0; i < this->duizi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->duizi(i), target);
  }

  // optional int32 limitred = 11;
  if (has_limitred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->limitred(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sxyxgamehistoryinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional string tablename = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional int32 magnification = 3;
    if (has_magnification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magnification());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 limitred = 11;
    if (has_limitred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitred());
    }

  }
  // repeated string recordidentification = 6;
  total_size += 1 * this->recordidentification_size();
  for (int i = 0; i < this->recordidentification_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recordidentification(i));
  }

  // repeated int32 Xpoint = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->xpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->xpoint(i));
    }
    total_size += 1 * this->xpoint_size() + data_size;
  }

  // repeated int32 ZPoint = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->zpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zpoint(i));
    }
    total_size += 1 * this->zpoint_size() + data_size;
  }

  // repeated int32 WinResult = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->winresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winresult(i));
    }
    total_size += 1 * this->winresult_size() + data_size;
  }

  // repeated int32 Duizi = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->duizi_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->duizi(i));
    }
    total_size += 1 * this->duizi_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sxyxgamehistoryinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sxyxgamehistoryinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sxyxgamehistoryinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sxyxgamehistoryinfo::MergeFrom(const sxyxgamehistoryinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordidentification_.MergeFrom(from.recordidentification_);
  xpoint_.MergeFrom(from.xpoint_);
  zpoint_.MergeFrom(from.zpoint_);
  winresult_.MergeFrom(from.winresult_);
  duizi_.MergeFrom(from.duizi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_magnification()) {
      set_magnification(from.magnification());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_limitred()) {
      set_limitred(from.limitred());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sxyxgamehistoryinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sxyxgamehistoryinfo::CopyFrom(const sxyxgamehistoryinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sxyxgamehistoryinfo::IsInitialized() const {

  return true;
}

void sxyxgamehistoryinfo::Swap(sxyxgamehistoryinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(magnification_, other->magnification_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    recordidentification_.Swap(&other->recordidentification_);
    xpoint_.Swap(&other->xpoint_);
    zpoint_.Swap(&other->zpoint_);
    winresult_.Swap(&other->winresult_);
    duizi_.Swap(&other->duizi_);
    std::swap(limitred_, other->limitred_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sxyxgamehistoryinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sxyxgamehistoryinfo_descriptor_;
  metadata.reflection = sxyxgamehistoryinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
