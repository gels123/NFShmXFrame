// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_forest.proto

#ifndef PROTOBUF_st_5fforest_2eproto__INCLUDED
#define PROTOBUF_st_5fforest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fforest_2eproto();
void protobuf_AssignDesc_st_5fforest_2eproto();
void protobuf_ShutdownFile_st_5fforest_2eproto();

class forestinfo;
class forestpour;

// ===================================================================

class forestinfo : public ::google::protobuf::Message {
 public:
  forestinfo();
  virtual ~forestinfo();

  forestinfo(const forestinfo& from);

  inline forestinfo& operator=(const forestinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const forestinfo& default_instance();

  void Swap(forestinfo* other);

  // implements Message ----------------------------------------------

  forestinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const forestinfo& from);
  void MergeFrom(const forestinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 2;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 2;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 minjetton = 3;
  inline bool has_minjetton() const;
  inline void clear_minjetton();
  static const int kMinjettonFieldNumber = 3;
  inline ::google::protobuf::int32 minjetton() const;
  inline void set_minjetton(::google::protobuf::int32 value);

  // optional int32 maxjetton = 4;
  inline bool has_maxjetton() const;
  inline void clear_maxjetton();
  static const int kMaxjettonFieldNumber = 4;
  inline ::google::protobuf::int32 maxjetton() const;
  inline void set_maxjetton(::google::protobuf::int32 value);

  // optional int32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 6;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 6;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated int32 useridlist = 7;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 7;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated int32 bankerlist = 8;
  inline int bankerlist_size() const;
  inline void clear_bankerlist();
  static const int kBankerlistFieldNumber = 8;
  inline ::google::protobuf::int32 bankerlist(int index) const;
  inline void set_bankerlist(int index, ::google::protobuf::int32 value);
  inline void add_bankerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bankerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bankerlist();

  // repeated int32 colourlist = 9;
  inline int colourlist_size() const;
  inline void clear_colourlist();
  static const int kColourlistFieldNumber = 9;
  inline ::google::protobuf::int32 colourlist(int index) const;
  inline void set_colourlist(int index, ::google::protobuf::int32 value);
  inline void add_colourlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      colourlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_colourlist();

  // optional int32 winid = 10;
  inline bool has_winid() const;
  inline void clear_winid();
  static const int kWinidFieldNumber = 10;
  inline ::google::protobuf::int32 winid() const;
  inline void set_winid(::google::protobuf::int32 value);

  // optional int32 wincolourindex = 11;
  inline bool has_wincolourindex() const;
  inline void clear_wincolourindex();
  static const int kWincolourindexFieldNumber = 11;
  inline ::google::protobuf::int32 wincolourindex() const;
  inline void set_wincolourindex(::google::protobuf::int32 value);

  // repeated int32 history = 12;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 12;
  inline ::google::protobuf::int32 history(int index) const;
  inline void set_history(int index, ::google::protobuf::int32 value);
  inline void add_history(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history();

  // optional int32 bankerid = 13;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankeridFieldNumber = 13;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // optional string bankerjetton = 14;
  inline bool has_bankerjetton() const;
  inline void clear_bankerjetton();
  static const int kBankerjettonFieldNumber = 14;
  inline const ::std::string& bankerjetton() const;
  inline void set_bankerjetton(const ::std::string& value);
  inline void set_bankerjetton(const char* value);
  inline void set_bankerjetton(const char* value, size_t size);
  inline ::std::string* mutable_bankerjetton();
  inline ::std::string* release_bankerjetton();
  inline void set_allocated_bankerjetton(::std::string* bankerjetton);

  // optional string bankername = 15;
  inline bool has_bankername() const;
  inline void clear_bankername();
  static const int kBankernameFieldNumber = 15;
  inline const ::std::string& bankername() const;
  inline void set_bankername(const ::std::string& value);
  inline void set_bankername(const char* value);
  inline void set_bankername(const char* value, size_t size);
  inline ::std::string* mutable_bankername();
  inline ::std::string* release_bankername();
  inline void set_allocated_bankername(::std::string* bankername);

  // optional string bankerfaceid = 16;
  inline bool has_bankerfaceid() const;
  inline void clear_bankerfaceid();
  static const int kBankerfaceidFieldNumber = 16;
  inline const ::std::string& bankerfaceid() const;
  inline void set_bankerfaceid(const ::std::string& value);
  inline void set_bankerfaceid(const char* value);
  inline void set_bankerfaceid(const char* value, size_t size);
  inline ::std::string* mutable_bankerfaceid();
  inline ::std::string* release_bankerfaceid();
  inline void set_allocated_bankerfaceid(::std::string* bankerfaceid);

  // optional int32 bankerlimit = 18;
  inline bool has_bankerlimit() const;
  inline void clear_bankerlimit();
  static const int kBankerlimitFieldNumber = 18;
  inline ::google::protobuf::int32 bankerlimit() const;
  inline void set_bankerlimit(::google::protobuf::int32 value);

  // repeated int32 beilist = 19;
  inline int beilist_size() const;
  inline void clear_beilist();
  static const int kBeilistFieldNumber = 19;
  inline ::google::protobuf::int32 beilist(int index) const;
  inline void set_beilist(int index, ::google::protobuf::int32 value);
  inline void add_beilist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      beilist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_beilist();

  // optional int32 dropbanker = 20;
  inline bool has_dropbanker() const;
  inline void clear_dropbanker();
  static const int kDropbankerFieldNumber = 20;
  inline ::google::protobuf::int32 dropbanker() const;
  inline void set_dropbanker(::google::protobuf::int32 value);

  // optional int32 usernum = 21;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 21;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 robotnum = 22;
  inline bool has_robotnum() const;
  inline void clear_robotnum();
  static const int kRobotnumFieldNumber = 22;
  inline ::google::protobuf::int32 robotnum() const;
  inline void set_robotnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.forestinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_minjetton();
  inline void clear_has_minjetton();
  inline void set_has_maxjetton();
  inline void clear_has_maxjetton();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_winid();
  inline void clear_has_winid();
  inline void set_has_wincolourindex();
  inline void clear_has_wincolourindex();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_bankerjetton();
  inline void clear_has_bankerjetton();
  inline void set_has_bankername();
  inline void clear_has_bankername();
  inline void set_has_bankerfaceid();
  inline void clear_has_bankerfaceid();
  inline void set_has_bankerlimit();
  inline void clear_has_bankerlimit();
  inline void set_has_dropbanker();
  inline void clear_has_dropbanker();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_robotnum();
  inline void clear_has_robotnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 minjetton_;
  ::google::protobuf::int32 maxjetton_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bankerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > colourlist_;
  ::google::protobuf::int32 winid_;
  ::google::protobuf::int32 wincolourindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_;
  ::std::string* bankerjetton_;
  ::std::string* bankername_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::int32 bankerlimit_;
  ::std::string* bankerfaceid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > beilist_;
  ::google::protobuf::int32 dropbanker_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 robotnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fforest_2eproto();
  friend void protobuf_AssignDesc_st_5fforest_2eproto();
  friend void protobuf_ShutdownFile_st_5fforest_2eproto();

  void InitAsDefaultInstance();
  static forestinfo* default_instance_;
};
// -------------------------------------------------------------------

class forestpour : public ::google::protobuf::Message {
 public:
  forestpour();
  virtual ~forestpour();

  forestpour(const forestpour& from);

  inline forestpour& operator=(const forestpour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const forestpour& default_instance();

  void Swap(forestpour* other);

  // implements Message ----------------------------------------------

  forestpour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const forestpour& from);
  void MergeFrom(const forestpour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourid = 2;
  inline bool has_pourid() const;
  inline void clear_pourid();
  static const int kPouridFieldNumber = 2;
  inline ::google::protobuf::int32 pourid() const;
  inline void set_pourid(::google::protobuf::int32 value);

  // optional int32 pourjetton = 3;
  inline bool has_pourjetton() const;
  inline void clear_pourjetton();
  static const int kPourjettonFieldNumber = 3;
  inline ::google::protobuf::int32 pourjetton() const;
  inline void set_pourjetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.forestpour)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourid();
  inline void clear_has_pourid();
  inline void set_has_pourjetton();
  inline void clear_has_pourjetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourid_;
  ::google::protobuf::int32 pourjetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fforest_2eproto();
  friend void protobuf_AssignDesc_st_5fforest_2eproto();
  friend void protobuf_ShutdownFile_st_5fforest_2eproto();

  void InitAsDefaultInstance();
  static forestpour* default_instance_;
};
// ===================================================================


// ===================================================================

// forestinfo

// optional int32 tableid = 1;
inline bool forestinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void forestinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void forestinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void forestinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 forestinfo::tableid() const {
  return tableid_;
}
inline void forestinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 2;
inline bool forestinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void forestinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void forestinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void forestinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 forestinfo::tabletype() const {
  return tabletype_;
}
inline void forestinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 minjetton = 3;
inline bool forestinfo::has_minjetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void forestinfo::set_has_minjetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void forestinfo::clear_has_minjetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void forestinfo::clear_minjetton() {
  minjetton_ = 0;
  clear_has_minjetton();
}
inline ::google::protobuf::int32 forestinfo::minjetton() const {
  return minjetton_;
}
inline void forestinfo::set_minjetton(::google::protobuf::int32 value) {
  set_has_minjetton();
  minjetton_ = value;
}

// optional int32 maxjetton = 4;
inline bool forestinfo::has_maxjetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void forestinfo::set_has_maxjetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void forestinfo::clear_has_maxjetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void forestinfo::clear_maxjetton() {
  maxjetton_ = 0;
  clear_has_maxjetton();
}
inline ::google::protobuf::int32 forestinfo::maxjetton() const {
  return maxjetton_;
}
inline void forestinfo::set_maxjetton(::google::protobuf::int32 value) {
  set_has_maxjetton();
  maxjetton_ = value;
}

// optional int32 state = 5;
inline bool forestinfo::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void forestinfo::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void forestinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void forestinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 forestinfo::state() const {
  return state_;
}
inline void forestinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 6;
inline bool forestinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void forestinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void forestinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void forestinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 forestinfo::timemark() const {
  return timemark_;
}
inline void forestinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated int32 useridlist = 7;
inline int forestinfo::useridlist_size() const {
  return useridlist_.size();
}
inline void forestinfo::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 forestinfo::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void forestinfo::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void forestinfo::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
forestinfo::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
forestinfo::mutable_useridlist() {
  return &useridlist_;
}

// repeated int32 bankerlist = 8;
inline int forestinfo::bankerlist_size() const {
  return bankerlist_.size();
}
inline void forestinfo::clear_bankerlist() {
  bankerlist_.Clear();
}
inline ::google::protobuf::int32 forestinfo::bankerlist(int index) const {
  return bankerlist_.Get(index);
}
inline void forestinfo::set_bankerlist(int index, ::google::protobuf::int32 value) {
  bankerlist_.Set(index, value);
}
inline void forestinfo::add_bankerlist(::google::protobuf::int32 value) {
  bankerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
forestinfo::bankerlist() const {
  return bankerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
forestinfo::mutable_bankerlist() {
  return &bankerlist_;
}

// repeated int32 colourlist = 9;
inline int forestinfo::colourlist_size() const {
  return colourlist_.size();
}
inline void forestinfo::clear_colourlist() {
  colourlist_.Clear();
}
inline ::google::protobuf::int32 forestinfo::colourlist(int index) const {
  return colourlist_.Get(index);
}
inline void forestinfo::set_colourlist(int index, ::google::protobuf::int32 value) {
  colourlist_.Set(index, value);
}
inline void forestinfo::add_colourlist(::google::protobuf::int32 value) {
  colourlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
forestinfo::colourlist() const {
  return colourlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
forestinfo::mutable_colourlist() {
  return &colourlist_;
}

// optional int32 winid = 10;
inline bool forestinfo::has_winid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void forestinfo::set_has_winid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void forestinfo::clear_has_winid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void forestinfo::clear_winid() {
  winid_ = 0;
  clear_has_winid();
}
inline ::google::protobuf::int32 forestinfo::winid() const {
  return winid_;
}
inline void forestinfo::set_winid(::google::protobuf::int32 value) {
  set_has_winid();
  winid_ = value;
}

// optional int32 wincolourindex = 11;
inline bool forestinfo::has_wincolourindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void forestinfo::set_has_wincolourindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void forestinfo::clear_has_wincolourindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void forestinfo::clear_wincolourindex() {
  wincolourindex_ = 0;
  clear_has_wincolourindex();
}
inline ::google::protobuf::int32 forestinfo::wincolourindex() const {
  return wincolourindex_;
}
inline void forestinfo::set_wincolourindex(::google::protobuf::int32 value) {
  set_has_wincolourindex();
  wincolourindex_ = value;
}

// repeated int32 history = 12;
inline int forestinfo::history_size() const {
  return history_.size();
}
inline void forestinfo::clear_history() {
  history_.Clear();
}
inline ::google::protobuf::int32 forestinfo::history(int index) const {
  return history_.Get(index);
}
inline void forestinfo::set_history(int index, ::google::protobuf::int32 value) {
  history_.Set(index, value);
}
inline void forestinfo::add_history(::google::protobuf::int32 value) {
  history_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
forestinfo::history() const {
  return history_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
forestinfo::mutable_history() {
  return &history_;
}

// optional int32 bankerid = 13;
inline bool forestinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void forestinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void forestinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void forestinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 forestinfo::bankerid() const {
  return bankerid_;
}
inline void forestinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// optional string bankerjetton = 14;
inline bool forestinfo::has_bankerjetton() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void forestinfo::set_has_bankerjetton() {
  _has_bits_[0] |= 0x00002000u;
}
inline void forestinfo::clear_has_bankerjetton() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void forestinfo::clear_bankerjetton() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    bankerjetton_->clear();
  }
  clear_has_bankerjetton();
}
inline const ::std::string& forestinfo::bankerjetton() const {
  return *bankerjetton_;
}
inline void forestinfo::set_bankerjetton(const ::std::string& value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void forestinfo::set_bankerjetton(const char* value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void forestinfo::set_bankerjetton(const char* value, size_t size) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* forestinfo::mutable_bankerjetton() {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  return bankerjetton_;
}
inline ::std::string* forestinfo::release_bankerjetton() {
  clear_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerjetton_;
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void forestinfo::set_allocated_bankerjetton(::std::string* bankerjetton) {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankerjetton) {
    set_has_bankerjetton();
    bankerjetton_ = bankerjetton;
  } else {
    clear_has_bankerjetton();
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankername = 15;
inline bool forestinfo::has_bankername() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void forestinfo::set_has_bankername() {
  _has_bits_[0] |= 0x00004000u;
}
inline void forestinfo::clear_has_bankername() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void forestinfo::clear_bankername() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    bankername_->clear();
  }
  clear_has_bankername();
}
inline const ::std::string& forestinfo::bankername() const {
  return *bankername_;
}
inline void forestinfo::set_bankername(const ::std::string& value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void forestinfo::set_bankername(const char* value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void forestinfo::set_bankername(const char* value, size_t size) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* forestinfo::mutable_bankername() {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  return bankername_;
}
inline ::std::string* forestinfo::release_bankername() {
  clear_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankername_;
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void forestinfo::set_allocated_bankername(::std::string* bankername) {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankername) {
    set_has_bankername();
    bankername_ = bankername;
  } else {
    clear_has_bankername();
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankerfaceid = 16;
inline bool forestinfo::has_bankerfaceid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void forestinfo::set_has_bankerfaceid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void forestinfo::clear_has_bankerfaceid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void forestinfo::clear_bankerfaceid() {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_->clear();
  }
  clear_has_bankerfaceid();
}
inline const ::std::string& forestinfo::bankerfaceid() const {
  return *bankerfaceid_;
}
inline void forestinfo::set_bankerfaceid(const ::std::string& value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void forestinfo::set_bankerfaceid(const char* value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void forestinfo::set_bankerfaceid(const char* value, size_t size) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* forestinfo::mutable_bankerfaceid() {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  return bankerfaceid_;
}
inline ::std::string* forestinfo::release_bankerfaceid() {
  clear_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerfaceid_;
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void forestinfo::set_allocated_bankerfaceid(::std::string* bankerfaceid) {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (bankerfaceid) {
    set_has_bankerfaceid();
    bankerfaceid_ = bankerfaceid;
  } else {
    clear_has_bankerfaceid();
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bankerlimit = 18;
inline bool forestinfo::has_bankerlimit() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void forestinfo::set_has_bankerlimit() {
  _has_bits_[0] |= 0x00010000u;
}
inline void forestinfo::clear_has_bankerlimit() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void forestinfo::clear_bankerlimit() {
  bankerlimit_ = 0;
  clear_has_bankerlimit();
}
inline ::google::protobuf::int32 forestinfo::bankerlimit() const {
  return bankerlimit_;
}
inline void forestinfo::set_bankerlimit(::google::protobuf::int32 value) {
  set_has_bankerlimit();
  bankerlimit_ = value;
}

// repeated int32 beilist = 19;
inline int forestinfo::beilist_size() const {
  return beilist_.size();
}
inline void forestinfo::clear_beilist() {
  beilist_.Clear();
}
inline ::google::protobuf::int32 forestinfo::beilist(int index) const {
  return beilist_.Get(index);
}
inline void forestinfo::set_beilist(int index, ::google::protobuf::int32 value) {
  beilist_.Set(index, value);
}
inline void forestinfo::add_beilist(::google::protobuf::int32 value) {
  beilist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
forestinfo::beilist() const {
  return beilist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
forestinfo::mutable_beilist() {
  return &beilist_;
}

// optional int32 dropbanker = 20;
inline bool forestinfo::has_dropbanker() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void forestinfo::set_has_dropbanker() {
  _has_bits_[0] |= 0x00040000u;
}
inline void forestinfo::clear_has_dropbanker() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void forestinfo::clear_dropbanker() {
  dropbanker_ = 0;
  clear_has_dropbanker();
}
inline ::google::protobuf::int32 forestinfo::dropbanker() const {
  return dropbanker_;
}
inline void forestinfo::set_dropbanker(::google::protobuf::int32 value) {
  set_has_dropbanker();
  dropbanker_ = value;
}

// optional int32 usernum = 21;
inline bool forestinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void forestinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00080000u;
}
inline void forestinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void forestinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 forestinfo::usernum() const {
  return usernum_;
}
inline void forestinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 robotnum = 22;
inline bool forestinfo::has_robotnum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void forestinfo::set_has_robotnum() {
  _has_bits_[0] |= 0x00100000u;
}
inline void forestinfo::clear_has_robotnum() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void forestinfo::clear_robotnum() {
  robotnum_ = 0;
  clear_has_robotnum();
}
inline ::google::protobuf::int32 forestinfo::robotnum() const {
  return robotnum_;
}
inline void forestinfo::set_robotnum(::google::protobuf::int32 value) {
  set_has_robotnum();
  robotnum_ = value;
}

// -------------------------------------------------------------------

// forestpour

// optional int32 userid = 1;
inline bool forestpour::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void forestpour::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void forestpour::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void forestpour::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 forestpour::userid() const {
  return userid_;
}
inline void forestpour::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourid = 2;
inline bool forestpour::has_pourid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void forestpour::set_has_pourid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void forestpour::clear_has_pourid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void forestpour::clear_pourid() {
  pourid_ = 0;
  clear_has_pourid();
}
inline ::google::protobuf::int32 forestpour::pourid() const {
  return pourid_;
}
inline void forestpour::set_pourid(::google::protobuf::int32 value) {
  set_has_pourid();
  pourid_ = value;
}

// optional int32 pourjetton = 3;
inline bool forestpour::has_pourjetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void forestpour::set_has_pourjetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void forestpour::clear_has_pourjetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void forestpour::clear_pourjetton() {
  pourjetton_ = 0;
  clear_has_pourjetton();
}
inline ::google::protobuf::int32 forestpour::pourjetton() const {
  return pourjetton_;
}
inline void forestpour::set_pourjetton(::google::protobuf::int32 value) {
  set_has_pourjetton();
  pourjetton_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fforest_2eproto__INCLUDED
