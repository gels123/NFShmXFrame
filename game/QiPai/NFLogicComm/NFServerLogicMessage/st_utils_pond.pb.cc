// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_utils_pond.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_utils_pond.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* pondinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pondinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* legalinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  legalinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5futils_5fpond_2eproto() {
  protobuf_AddDesc_st_5futils_5fpond_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_utils_pond.proto");
  GOOGLE_CHECK(file != NULL);
  pondinfo_descriptor_ = file->message_type(0);
  static const int pondinfo_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, pondid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, jiangjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, caijetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, level_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, rate_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, level_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, rate_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, level_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, rate_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, level_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, rate_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, taxrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, taxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, gradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, historywinpour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, todaywinpour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, historytotalpour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, todaytotalpour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, historywinrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, todaywinrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, huan_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, huan_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, huan_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, huan_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, huan_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, cur_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, cur_lun_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, cur_bi_huan_),
  };
  pondinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pondinfo_descriptor_,
      pondinfo::default_instance_,
      pondinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pondinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pondinfo));
  legalinfo_descriptor_ = file->message_type(1);
  static const int legalinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, legalkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, legalsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, cardlist_),
  };
  legalinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      legalinfo_descriptor_,
      legalinfo::default_instance_,
      legalinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(legalinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(legalinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5futils_5fpond_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pondinfo_descriptor_, &pondinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    legalinfo_descriptor_, &legalinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5futils_5fpond_2eproto() {
  delete pondinfo::default_instance_;
  delete pondinfo_reflection_;
  delete legalinfo::default_instance_;
  delete legalinfo_reflection_;
}

void protobuf_AddDesc_st_5futils_5fpond_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023st_utils_pond.proto\022\007progame\"\274\004\n\010pondi"
    "nfo\022\016\n\006pondid\030\001 \001(\005\022\020\n\010gametype\030\002 \001(\005\022\023\n"
    "\013jiangjetton\030\003 \001(\t\022\021\n\tcaijetton\030\004 \001(\t\022\021\n"
    "\ttabletype\030\005 \001(\005\022\017\n\007level_1\030\n \001(\005\022\016\n\006rat"
    "e_1\030\013 \001(\005\022\017\n\007level_2\030\014 \001(\005\022\016\n\006rate_2\030\r \001"
    "(\005\022\017\n\007level_3\030\016 \001(\005\022\016\n\006rate_3\030\017 \001(\005\022\017\n\007l"
    "evel_4\030\020 \001(\005\022\016\n\006rate_4\030\021 \001(\005\022\017\n\007taxrate\030"
    "\022 \001(\005\022\016\n\006taxnum\030\023 \001(\t\022\021\n\tgradetype\030\024 \001(\005"
    "\022\026\n\016historywinpour\030\025 \001(\t\022\024\n\014todaywinpour"
    "\030\026 \001(\t\022\030\n\020historytotalpour\030\027 \001(\t\022\026\n\016toda"
    "ytotalpour\030\030 \001(\t\022\026\n\016historywinrate\030\031 \001(\005"
    "\022\024\n\014todaywinrate\030\032 \001(\005\022\016\n\006huan_0\030\033 \001(\005\022\016"
    "\n\006huan_1\030\034 \001(\005\022\016\n\006huan_2\030\035 \001(\005\022\016\n\006huan_3"
    "\030\036 \001(\005\022\016\n\006huan_4\030\037 \001(\005\022\021\n\tcur_level\030  \001("
    "\005\022\025\n\rcur_lun_count\030! \001(\005\022\023\n\013cur_bi_huan\030"
    "\" \001(\005\"\235\001\n\tlegalinfo\022\n\n\002id\030\001 \001(\005\022\020\n\010legal"
    "key\030\002 \001(\t\022\016\n\006param1\030\003 \001(\t\022\016\n\006param2\030\004 \001("
    "\t\022\016\n\006param3\030\005 \001(\t\022\016\n\006param4\030\006 \001(\t\022\021\n\tleg"
    "alsign\030\007 \001(\t\022\r\n\005state\030\010 \001(\t\022\020\n\010cardlist\030"
    "\t \001(\t", 765);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_utils_pond.proto", &protobuf_RegisterTypes);
  pondinfo::default_instance_ = new pondinfo();
  legalinfo::default_instance_ = new legalinfo();
  pondinfo::default_instance_->InitAsDefaultInstance();
  legalinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5futils_5fpond_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5futils_5fpond_2eproto {
  StaticDescriptorInitializer_st_5futils_5fpond_2eproto() {
    protobuf_AddDesc_st_5futils_5fpond_2eproto();
  }
} static_descriptor_initializer_st_5futils_5fpond_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pondinfo::kPondidFieldNumber;
const int pondinfo::kGametypeFieldNumber;
const int pondinfo::kJiangjettonFieldNumber;
const int pondinfo::kCaijettonFieldNumber;
const int pondinfo::kTabletypeFieldNumber;
const int pondinfo::kLevel1FieldNumber;
const int pondinfo::kRate1FieldNumber;
const int pondinfo::kLevel2FieldNumber;
const int pondinfo::kRate2FieldNumber;
const int pondinfo::kLevel3FieldNumber;
const int pondinfo::kRate3FieldNumber;
const int pondinfo::kLevel4FieldNumber;
const int pondinfo::kRate4FieldNumber;
const int pondinfo::kTaxrateFieldNumber;
const int pondinfo::kTaxnumFieldNumber;
const int pondinfo::kGradetypeFieldNumber;
const int pondinfo::kHistorywinpourFieldNumber;
const int pondinfo::kTodaywinpourFieldNumber;
const int pondinfo::kHistorytotalpourFieldNumber;
const int pondinfo::kTodaytotalpourFieldNumber;
const int pondinfo::kHistorywinrateFieldNumber;
const int pondinfo::kTodaywinrateFieldNumber;
const int pondinfo::kHuan0FieldNumber;
const int pondinfo::kHuan1FieldNumber;
const int pondinfo::kHuan2FieldNumber;
const int pondinfo::kHuan3FieldNumber;
const int pondinfo::kHuan4FieldNumber;
const int pondinfo::kCurLevelFieldNumber;
const int pondinfo::kCurLunCountFieldNumber;
const int pondinfo::kCurBiHuanFieldNumber;
#endif  // !_MSC_VER

pondinfo::pondinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pondinfo::InitAsDefaultInstance() {
}

pondinfo::pondinfo(const pondinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pondinfo::SharedCtor() {
  _cached_size_ = 0;
  pondid_ = 0;
  gametype_ = 0;
  jiangjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  caijetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tabletype_ = 0;
  level_1_ = 0;
  rate_1_ = 0;
  level_2_ = 0;
  rate_2_ = 0;
  level_3_ = 0;
  rate_3_ = 0;
  level_4_ = 0;
  rate_4_ = 0;
  taxrate_ = 0;
  taxnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gradetype_ = 0;
  historywinpour_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  todaywinpour_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  historytotalpour_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  todaytotalpour_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  historywinrate_ = 0;
  todaywinrate_ = 0;
  huan_0_ = 0;
  huan_1_ = 0;
  huan_2_ = 0;
  huan_3_ = 0;
  huan_4_ = 0;
  cur_level_ = 0;
  cur_lun_count_ = 0;
  cur_bi_huan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pondinfo::~pondinfo() {
  SharedDtor();
}

void pondinfo::SharedDtor() {
  if (jiangjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jiangjetton_;
  }
  if (caijetton_ != &::google::protobuf::internal::kEmptyString) {
    delete caijetton_;
  }
  if (taxnum_ != &::google::protobuf::internal::kEmptyString) {
    delete taxnum_;
  }
  if (historywinpour_ != &::google::protobuf::internal::kEmptyString) {
    delete historywinpour_;
  }
  if (todaywinpour_ != &::google::protobuf::internal::kEmptyString) {
    delete todaywinpour_;
  }
  if (historytotalpour_ != &::google::protobuf::internal::kEmptyString) {
    delete historytotalpour_;
  }
  if (todaytotalpour_ != &::google::protobuf::internal::kEmptyString) {
    delete todaytotalpour_;
  }
  if (this != default_instance_) {
  }
}

void pondinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pondinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pondinfo_descriptor_;
}

const pondinfo& pondinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5futils_5fpond_2eproto();
  return *default_instance_;
}

pondinfo* pondinfo::default_instance_ = NULL;

pondinfo* pondinfo::New() const {
  return new pondinfo;
}

void pondinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pondid_ = 0;
    gametype_ = 0;
    if (has_jiangjetton()) {
      if (jiangjetton_ != &::google::protobuf::internal::kEmptyString) {
        jiangjetton_->clear();
      }
    }
    if (has_caijetton()) {
      if (caijetton_ != &::google::protobuf::internal::kEmptyString) {
        caijetton_->clear();
      }
    }
    tabletype_ = 0;
    level_1_ = 0;
    rate_1_ = 0;
    level_2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rate_2_ = 0;
    level_3_ = 0;
    rate_3_ = 0;
    level_4_ = 0;
    rate_4_ = 0;
    taxrate_ = 0;
    if (has_taxnum()) {
      if (taxnum_ != &::google::protobuf::internal::kEmptyString) {
        taxnum_->clear();
      }
    }
    gradetype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_historywinpour()) {
      if (historywinpour_ != &::google::protobuf::internal::kEmptyString) {
        historywinpour_->clear();
      }
    }
    if (has_todaywinpour()) {
      if (todaywinpour_ != &::google::protobuf::internal::kEmptyString) {
        todaywinpour_->clear();
      }
    }
    if (has_historytotalpour()) {
      if (historytotalpour_ != &::google::protobuf::internal::kEmptyString) {
        historytotalpour_->clear();
      }
    }
    if (has_todaytotalpour()) {
      if (todaytotalpour_ != &::google::protobuf::internal::kEmptyString) {
        todaytotalpour_->clear();
      }
    }
    historywinrate_ = 0;
    todaywinrate_ = 0;
    huan_0_ = 0;
    huan_1_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    huan_2_ = 0;
    huan_3_ = 0;
    huan_4_ = 0;
    cur_level_ = 0;
    cur_lun_count_ = 0;
    cur_bi_huan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pondinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pondid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pondid_)));
          set_has_pondid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gametype;
        break;
      }

      // optional int32 gametype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_jiangjetton;
        break;
      }

      // optional string jiangjetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jiangjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jiangjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jiangjetton().data(), this->jiangjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_caijetton;
        break;
      }

      // optional string caijetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caijetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caijetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->caijetton().data(), this->caijetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_level_1;
        break;
      }

      // optional int32 level_1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_1_)));
          set_has_level_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rate_1;
        break;
      }

      // optional int32 rate_1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_1_)));
          set_has_rate_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_level_2;
        break;
      }

      // optional int32 level_2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_2_)));
          set_has_level_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rate_2;
        break;
      }

      // optional int32 rate_2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_2_)));
          set_has_rate_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_level_3;
        break;
      }

      // optional int32 level_3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_3_)));
          set_has_level_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_rate_3;
        break;
      }

      // optional int32 rate_3 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_3_)));
          set_has_rate_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_level_4;
        break;
      }

      // optional int32 level_4 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_4_)));
          set_has_level_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_rate_4;
        break;
      }

      // optional int32 rate_4 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_4_)));
          set_has_rate_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_taxrate;
        break;
      }

      // optional int32 taxrate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taxrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taxrate_)));
          set_has_taxrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_taxnum;
        break;
      }

      // optional string taxnum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taxnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taxnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taxnum().data(), this->taxnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_gradetype;
        break;
      }

      // optional int32 gradetype = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gradetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gradetype_)));
          set_has_gradetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_historywinpour;
        break;
      }

      // optional string historywinpour = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_historywinpour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_historywinpour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->historywinpour().data(), this->historywinpour().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_todaywinpour;
        break;
      }

      // optional string todaywinpour = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_todaywinpour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todaywinpour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->todaywinpour().data(), this->todaywinpour().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_historytotalpour;
        break;
      }

      // optional string historytotalpour = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_historytotalpour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_historytotalpour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->historytotalpour().data(), this->historytotalpour().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_todaytotalpour;
        break;
      }

      // optional string todaytotalpour = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_todaytotalpour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todaytotalpour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->todaytotalpour().data(), this->todaytotalpour().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_historywinrate;
        break;
      }

      // optional int32 historywinrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historywinrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historywinrate_)));
          set_has_historywinrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_todaywinrate;
        break;
      }

      // optional int32 todaywinrate = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todaywinrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todaywinrate_)));
          set_has_todaywinrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_huan_0;
        break;
      }

      // optional int32 huan_0 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_0_)));
          set_has_huan_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_huan_1;
        break;
      }

      // optional int32 huan_1 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_1_)));
          set_has_huan_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_huan_2;
        break;
      }

      // optional int32 huan_2 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_2_)));
          set_has_huan_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_huan_3;
        break;
      }

      // optional int32 huan_3 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_3_)));
          set_has_huan_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_huan_4;
        break;
      }

      // optional int32 huan_4 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huan_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huan_4_)));
          set_has_huan_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_cur_level;
        break;
      }

      // optional int32 cur_level = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_level_)));
          set_has_cur_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_cur_lun_count;
        break;
      }

      // optional int32 cur_lun_count = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_lun_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_lun_count_)));
          set_has_cur_lun_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_cur_bi_huan;
        break;
      }

      // optional int32 cur_bi_huan = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_bi_huan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_bi_huan_)));
          set_has_cur_bi_huan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pondinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pondid = 1;
  if (has_pondid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pondid(), output);
  }

  // optional int32 gametype = 2;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gametype(), output);
  }

  // optional string jiangjetton = 3;
  if (has_jiangjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jiangjetton().data(), this->jiangjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->jiangjetton(), output);
  }

  // optional string caijetton = 4;
  if (has_caijetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caijetton().data(), this->caijetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->caijetton(), output);
  }

  // optional int32 tabletype = 5;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tabletype(), output);
  }

  // optional int32 level_1 = 10;
  if (has_level_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->level_1(), output);
  }

  // optional int32 rate_1 = 11;
  if (has_rate_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rate_1(), output);
  }

  // optional int32 level_2 = 12;
  if (has_level_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->level_2(), output);
  }

  // optional int32 rate_2 = 13;
  if (has_rate_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rate_2(), output);
  }

  // optional int32 level_3 = 14;
  if (has_level_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->level_3(), output);
  }

  // optional int32 rate_3 = 15;
  if (has_rate_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->rate_3(), output);
  }

  // optional int32 level_4 = 16;
  if (has_level_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->level_4(), output);
  }

  // optional int32 rate_4 = 17;
  if (has_rate_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->rate_4(), output);
  }

  // optional int32 taxrate = 18;
  if (has_taxrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->taxrate(), output);
  }

  // optional string taxnum = 19;
  if (has_taxnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taxnum().data(), this->taxnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->taxnum(), output);
  }

  // optional int32 gradetype = 20;
  if (has_gradetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->gradetype(), output);
  }

  // optional string historywinpour = 21;
  if (has_historywinpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->historywinpour().data(), this->historywinpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->historywinpour(), output);
  }

  // optional string todaywinpour = 22;
  if (has_todaywinpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todaywinpour().data(), this->todaywinpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->todaywinpour(), output);
  }

  // optional string historytotalpour = 23;
  if (has_historytotalpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->historytotalpour().data(), this->historytotalpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->historytotalpour(), output);
  }

  // optional string todaytotalpour = 24;
  if (has_todaytotalpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todaytotalpour().data(), this->todaytotalpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->todaytotalpour(), output);
  }

  // optional int32 historywinrate = 25;
  if (has_historywinrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->historywinrate(), output);
  }

  // optional int32 todaywinrate = 26;
  if (has_todaywinrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->todaywinrate(), output);
  }

  // optional int32 huan_0 = 27;
  if (has_huan_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->huan_0(), output);
  }

  // optional int32 huan_1 = 28;
  if (has_huan_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->huan_1(), output);
  }

  // optional int32 huan_2 = 29;
  if (has_huan_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->huan_2(), output);
  }

  // optional int32 huan_3 = 30;
  if (has_huan_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->huan_3(), output);
  }

  // optional int32 huan_4 = 31;
  if (has_huan_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->huan_4(), output);
  }

  // optional int32 cur_level = 32;
  if (has_cur_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->cur_level(), output);
  }

  // optional int32 cur_lun_count = 33;
  if (has_cur_lun_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->cur_lun_count(), output);
  }

  // optional int32 cur_bi_huan = 34;
  if (has_cur_bi_huan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->cur_bi_huan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pondinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pondid = 1;
  if (has_pondid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pondid(), target);
  }

  // optional int32 gametype = 2;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gametype(), target);
  }

  // optional string jiangjetton = 3;
  if (has_jiangjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jiangjetton().data(), this->jiangjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jiangjetton(), target);
  }

  // optional string caijetton = 4;
  if (has_caijetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->caijetton().data(), this->caijetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->caijetton(), target);
  }

  // optional int32 tabletype = 5;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tabletype(), target);
  }

  // optional int32 level_1 = 10;
  if (has_level_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->level_1(), target);
  }

  // optional int32 rate_1 = 11;
  if (has_rate_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rate_1(), target);
  }

  // optional int32 level_2 = 12;
  if (has_level_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->level_2(), target);
  }

  // optional int32 rate_2 = 13;
  if (has_rate_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rate_2(), target);
  }

  // optional int32 level_3 = 14;
  if (has_level_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->level_3(), target);
  }

  // optional int32 rate_3 = 15;
  if (has_rate_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->rate_3(), target);
  }

  // optional int32 level_4 = 16;
  if (has_level_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->level_4(), target);
  }

  // optional int32 rate_4 = 17;
  if (has_rate_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->rate_4(), target);
  }

  // optional int32 taxrate = 18;
  if (has_taxrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->taxrate(), target);
  }

  // optional string taxnum = 19;
  if (has_taxnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taxnum().data(), this->taxnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->taxnum(), target);
  }

  // optional int32 gradetype = 20;
  if (has_gradetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->gradetype(), target);
  }

  // optional string historywinpour = 21;
  if (has_historywinpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->historywinpour().data(), this->historywinpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->historywinpour(), target);
  }

  // optional string todaywinpour = 22;
  if (has_todaywinpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todaywinpour().data(), this->todaywinpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->todaywinpour(), target);
  }

  // optional string historytotalpour = 23;
  if (has_historytotalpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->historytotalpour().data(), this->historytotalpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->historytotalpour(), target);
  }

  // optional string todaytotalpour = 24;
  if (has_todaytotalpour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->todaytotalpour().data(), this->todaytotalpour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->todaytotalpour(), target);
  }

  // optional int32 historywinrate = 25;
  if (has_historywinrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->historywinrate(), target);
  }

  // optional int32 todaywinrate = 26;
  if (has_todaywinrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->todaywinrate(), target);
  }

  // optional int32 huan_0 = 27;
  if (has_huan_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->huan_0(), target);
  }

  // optional int32 huan_1 = 28;
  if (has_huan_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->huan_1(), target);
  }

  // optional int32 huan_2 = 29;
  if (has_huan_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->huan_2(), target);
  }

  // optional int32 huan_3 = 30;
  if (has_huan_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->huan_3(), target);
  }

  // optional int32 huan_4 = 31;
  if (has_huan_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->huan_4(), target);
  }

  // optional int32 cur_level = 32;
  if (has_cur_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->cur_level(), target);
  }

  // optional int32 cur_lun_count = 33;
  if (has_cur_lun_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->cur_lun_count(), target);
  }

  // optional int32 cur_bi_huan = 34;
  if (has_cur_bi_huan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->cur_bi_huan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pondinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pondid = 1;
    if (has_pondid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pondid());
    }

    // optional int32 gametype = 2;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional string jiangjetton = 3;
    if (has_jiangjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jiangjetton());
    }

    // optional string caijetton = 4;
    if (has_caijetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caijetton());
    }

    // optional int32 tabletype = 5;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 level_1 = 10;
    if (has_level_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_1());
    }

    // optional int32 rate_1 = 11;
    if (has_rate_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate_1());
    }

    // optional int32 level_2 = 12;
    if (has_level_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rate_2 = 13;
    if (has_rate_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate_2());
    }

    // optional int32 level_3 = 14;
    if (has_level_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_3());
    }

    // optional int32 rate_3 = 15;
    if (has_rate_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate_3());
    }

    // optional int32 level_4 = 16;
    if (has_level_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_4());
    }

    // optional int32 rate_4 = 17;
    if (has_rate_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate_4());
    }

    // optional int32 taxrate = 18;
    if (has_taxrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taxrate());
    }

    // optional string taxnum = 19;
    if (has_taxnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taxnum());
    }

    // optional int32 gradetype = 20;
    if (has_gradetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gradetype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string historywinpour = 21;
    if (has_historywinpour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->historywinpour());
    }

    // optional string todaywinpour = 22;
    if (has_todaywinpour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todaywinpour());
    }

    // optional string historytotalpour = 23;
    if (has_historytotalpour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->historytotalpour());
    }

    // optional string todaytotalpour = 24;
    if (has_todaytotalpour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->todaytotalpour());
    }

    // optional int32 historywinrate = 25;
    if (has_historywinrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historywinrate());
    }

    // optional int32 todaywinrate = 26;
    if (has_todaywinrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todaywinrate());
    }

    // optional int32 huan_0 = 27;
    if (has_huan_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_0());
    }

    // optional int32 huan_1 = 28;
    if (has_huan_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 huan_2 = 29;
    if (has_huan_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_2());
    }

    // optional int32 huan_3 = 30;
    if (has_huan_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_3());
    }

    // optional int32 huan_4 = 31;
    if (has_huan_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huan_4());
    }

    // optional int32 cur_level = 32;
    if (has_cur_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_level());
    }

    // optional int32 cur_lun_count = 33;
    if (has_cur_lun_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_lun_count());
    }

    // optional int32 cur_bi_huan = 34;
    if (has_cur_bi_huan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_bi_huan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pondinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pondinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pondinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pondinfo::MergeFrom(const pondinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pondid()) {
      set_pondid(from.pondid());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_jiangjetton()) {
      set_jiangjetton(from.jiangjetton());
    }
    if (from.has_caijetton()) {
      set_caijetton(from.caijetton());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_level_1()) {
      set_level_1(from.level_1());
    }
    if (from.has_rate_1()) {
      set_rate_1(from.rate_1());
    }
    if (from.has_level_2()) {
      set_level_2(from.level_2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rate_2()) {
      set_rate_2(from.rate_2());
    }
    if (from.has_level_3()) {
      set_level_3(from.level_3());
    }
    if (from.has_rate_3()) {
      set_rate_3(from.rate_3());
    }
    if (from.has_level_4()) {
      set_level_4(from.level_4());
    }
    if (from.has_rate_4()) {
      set_rate_4(from.rate_4());
    }
    if (from.has_taxrate()) {
      set_taxrate(from.taxrate());
    }
    if (from.has_taxnum()) {
      set_taxnum(from.taxnum());
    }
    if (from.has_gradetype()) {
      set_gradetype(from.gradetype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_historywinpour()) {
      set_historywinpour(from.historywinpour());
    }
    if (from.has_todaywinpour()) {
      set_todaywinpour(from.todaywinpour());
    }
    if (from.has_historytotalpour()) {
      set_historytotalpour(from.historytotalpour());
    }
    if (from.has_todaytotalpour()) {
      set_todaytotalpour(from.todaytotalpour());
    }
    if (from.has_historywinrate()) {
      set_historywinrate(from.historywinrate());
    }
    if (from.has_todaywinrate()) {
      set_todaywinrate(from.todaywinrate());
    }
    if (from.has_huan_0()) {
      set_huan_0(from.huan_0());
    }
    if (from.has_huan_1()) {
      set_huan_1(from.huan_1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_huan_2()) {
      set_huan_2(from.huan_2());
    }
    if (from.has_huan_3()) {
      set_huan_3(from.huan_3());
    }
    if (from.has_huan_4()) {
      set_huan_4(from.huan_4());
    }
    if (from.has_cur_level()) {
      set_cur_level(from.cur_level());
    }
    if (from.has_cur_lun_count()) {
      set_cur_lun_count(from.cur_lun_count());
    }
    if (from.has_cur_bi_huan()) {
      set_cur_bi_huan(from.cur_bi_huan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pondinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pondinfo::CopyFrom(const pondinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pondinfo::IsInitialized() const {

  return true;
}

void pondinfo::Swap(pondinfo* other) {
  if (other != this) {
    std::swap(pondid_, other->pondid_);
    std::swap(gametype_, other->gametype_);
    std::swap(jiangjetton_, other->jiangjetton_);
    std::swap(caijetton_, other->caijetton_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(level_1_, other->level_1_);
    std::swap(rate_1_, other->rate_1_);
    std::swap(level_2_, other->level_2_);
    std::swap(rate_2_, other->rate_2_);
    std::swap(level_3_, other->level_3_);
    std::swap(rate_3_, other->rate_3_);
    std::swap(level_4_, other->level_4_);
    std::swap(rate_4_, other->rate_4_);
    std::swap(taxrate_, other->taxrate_);
    std::swap(taxnum_, other->taxnum_);
    std::swap(gradetype_, other->gradetype_);
    std::swap(historywinpour_, other->historywinpour_);
    std::swap(todaywinpour_, other->todaywinpour_);
    std::swap(historytotalpour_, other->historytotalpour_);
    std::swap(todaytotalpour_, other->todaytotalpour_);
    std::swap(historywinrate_, other->historywinrate_);
    std::swap(todaywinrate_, other->todaywinrate_);
    std::swap(huan_0_, other->huan_0_);
    std::swap(huan_1_, other->huan_1_);
    std::swap(huan_2_, other->huan_2_);
    std::swap(huan_3_, other->huan_3_);
    std::swap(huan_4_, other->huan_4_);
    std::swap(cur_level_, other->cur_level_);
    std::swap(cur_lun_count_, other->cur_lun_count_);
    std::swap(cur_bi_huan_, other->cur_bi_huan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pondinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pondinfo_descriptor_;
  metadata.reflection = pondinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int legalinfo::kIdFieldNumber;
const int legalinfo::kLegalkeyFieldNumber;
const int legalinfo::kParam1FieldNumber;
const int legalinfo::kParam2FieldNumber;
const int legalinfo::kParam3FieldNumber;
const int legalinfo::kParam4FieldNumber;
const int legalinfo::kLegalsignFieldNumber;
const int legalinfo::kStateFieldNumber;
const int legalinfo::kCardlistFieldNumber;
#endif  // !_MSC_VER

legalinfo::legalinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void legalinfo::InitAsDefaultInstance() {
}

legalinfo::legalinfo(const legalinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void legalinfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  legalsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

legalinfo::~legalinfo() {
  SharedDtor();
}

void legalinfo::SharedDtor() {
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    delete param1_;
  }
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    delete param2_;
  }
  if (param3_ != &::google::protobuf::internal::kEmptyString) {
    delete param3_;
  }
  if (param4_ != &::google::protobuf::internal::kEmptyString) {
    delete param4_;
  }
  if (legalsign_ != &::google::protobuf::internal::kEmptyString) {
    delete legalsign_;
  }
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (cardlist_ != &::google::protobuf::internal::kEmptyString) {
    delete cardlist_;
  }
  if (this != default_instance_) {
  }
}

void legalinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* legalinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return legalinfo_descriptor_;
}

const legalinfo& legalinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5futils_5fpond_2eproto();
  return *default_instance_;
}

legalinfo* legalinfo::default_instance_ = NULL;

legalinfo* legalinfo::New() const {
  return new legalinfo;
}

void legalinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_legalkey()) {
      if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
        legalkey_->clear();
      }
    }
    if (has_param1()) {
      if (param1_ != &::google::protobuf::internal::kEmptyString) {
        param1_->clear();
      }
    }
    if (has_param2()) {
      if (param2_ != &::google::protobuf::internal::kEmptyString) {
        param2_->clear();
      }
    }
    if (has_param3()) {
      if (param3_ != &::google::protobuf::internal::kEmptyString) {
        param3_->clear();
      }
    }
    if (has_param4()) {
      if (param4_ != &::google::protobuf::internal::kEmptyString) {
        param4_->clear();
      }
    }
    if (has_legalsign()) {
      if (legalsign_ != &::google::protobuf::internal::kEmptyString) {
        legalsign_->clear();
      }
    }
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::kEmptyString) {
        state_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cardlist()) {
      if (cardlist_ != &::google::protobuf::internal::kEmptyString) {
        cardlist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool legalinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_legalkey;
        break;
      }

      // optional string legalkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legalkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legalkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legalkey().data(), this->legalkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param1;
        break;
      }

      // optional string param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param1().data(), this->param1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_param2;
        break;
      }

      // optional string param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param2().data(), this->param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_param3;
        break;
      }

      // optional string param3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param3().data(), this->param3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_param4;
        break;
      }

      // optional string param4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param4().data(), this->param4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_legalsign;
        break;
      }

      // optional string legalsign = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_legalsign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_legalsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->legalsign().data(), this->legalsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_state;
        break;
      }

      // optional string state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cardlist;
        break;
      }

      // optional string cardlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardlist().data(), this->cardlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void legalinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string legalkey = 2;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->legalkey(), output);
  }

  // optional string param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->param1(), output);
  }

  // optional string param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->param2(), output);
  }

  // optional string param3 = 5;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->param3(), output);
  }

  // optional string param4 = 6;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->param4(), output);
  }

  // optional string legalsign = 7;
  if (has_legalsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalsign().data(), this->legalsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->legalsign(), output);
  }

  // optional string state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->state(), output);
  }

  // optional string cardlist = 9;
  if (has_cardlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardlist().data(), this->cardlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cardlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* legalinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string legalkey = 2;
  if (has_legalkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalkey().data(), this->legalkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->legalkey(), target);
  }

  // optional string param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param1(), target);
  }

  // optional string param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param2(), target);
  }

  // optional string param3 = 5;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param3().data(), this->param3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->param3(), target);
  }

  // optional string param4 = 6;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param4().data(), this->param4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->param4(), target);
  }

  // optional string legalsign = 7;
  if (has_legalsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->legalsign().data(), this->legalsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->legalsign(), target);
  }

  // optional string state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->state(), target);
  }

  // optional string cardlist = 9;
  if (has_cardlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardlist().data(), this->cardlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cardlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int legalinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string legalkey = 2;
    if (has_legalkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legalkey());
    }

    // optional string param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }

    // optional string param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }

    // optional string param3 = 5;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param3());
    }

    // optional string param4 = 6;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }

    // optional string legalsign = 7;
    if (has_legalsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->legalsign());
    }

    // optional string state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cardlist = 9;
    if (has_cardlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void legalinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const legalinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const legalinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void legalinfo::MergeFrom(const legalinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_legalkey()) {
      set_legalkey(from.legalkey());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_legalsign()) {
      set_legalsign(from.legalsign());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cardlist()) {
      set_cardlist(from.cardlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void legalinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void legalinfo::CopyFrom(const legalinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool legalinfo::IsInitialized() const {

  return true;
}

void legalinfo::Swap(legalinfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(legalkey_, other->legalkey_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(legalsign_, other->legalsign_);
    std::swap(state_, other->state_);
    std::swap(cardlist_, other->cardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata legalinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = legalinfo_descriptor_;
  metadata.reflection = legalinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
