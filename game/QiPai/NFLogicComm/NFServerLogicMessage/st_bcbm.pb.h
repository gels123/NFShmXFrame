// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_bcbm.proto

#ifndef PROTOBUF_st_5fbcbm_2eproto__INCLUDED
#define PROTOBUF_st_5fbcbm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fbcbm_2eproto();
void protobuf_AssignDesc_st_5fbcbm_2eproto();
void protobuf_ShutdownFile_st_5fbcbm_2eproto();

class bcbminfo;
class bcbmpour;
class bcbmjettonrecorinfo;
class bcbmgamehistoryinfo;
class bcbmhistory;
class bcbmjettonrecordlist;

// ===================================================================

class bcbminfo : public ::google::protobuf::Message {
 public:
  bcbminfo();
  virtual ~bcbminfo();

  bcbminfo(const bcbminfo& from);

  inline bcbminfo& operator=(const bcbminfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bcbminfo& default_instance();

  void Swap(bcbminfo* other);

  // implements Message ----------------------------------------------

  bcbminfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bcbminfo& from);
  void MergeFrom(const bcbminfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tabletype = 2;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 2;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 minjetton = 3;
  inline bool has_minjetton() const;
  inline void clear_minjetton();
  static const int kMinjettonFieldNumber = 3;
  inline ::google::protobuf::int32 minjetton() const;
  inline void set_minjetton(::google::protobuf::int32 value);

  // optional int32 maxjetton = 4;
  inline bool has_maxjetton() const;
  inline void clear_maxjetton();
  static const int kMaxjettonFieldNumber = 4;
  inline ::google::protobuf::int32 maxjetton() const;
  inline void set_maxjetton(::google::protobuf::int32 value);

  // optional int32 state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 6;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 6;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated int32 useridlist = 7;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 7;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated int32 bankerlist = 9;
  inline int bankerlist_size() const;
  inline void clear_bankerlist();
  static const int kBankerlistFieldNumber = 9;
  inline ::google::protobuf::int32 bankerlist(int index) const;
  inline void set_bankerlist(int index, ::google::protobuf::int32 value);
  inline void add_bankerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bankerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bankerlist();

  // optional int32 winid = 10;
  inline bool has_winid() const;
  inline void clear_winid();
  static const int kWinidFieldNumber = 10;
  inline ::google::protobuf::int32 winid() const;
  inline void set_winid(::google::protobuf::int32 value);

  // repeated int32 history = 12;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 12;
  inline ::google::protobuf::int32 history(int index) const;
  inline void set_history(int index, ::google::protobuf::int32 value);
  inline void add_history(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      history() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_history();

  // optional int32 bankerid = 13;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankeridFieldNumber = 13;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // optional string bankerjetton = 14;
  inline bool has_bankerjetton() const;
  inline void clear_bankerjetton();
  static const int kBankerjettonFieldNumber = 14;
  inline const ::std::string& bankerjetton() const;
  inline void set_bankerjetton(const ::std::string& value);
  inline void set_bankerjetton(const char* value);
  inline void set_bankerjetton(const char* value, size_t size);
  inline ::std::string* mutable_bankerjetton();
  inline ::std::string* release_bankerjetton();
  inline void set_allocated_bankerjetton(::std::string* bankerjetton);

  // optional string bankername = 15;
  inline bool has_bankername() const;
  inline void clear_bankername();
  static const int kBankernameFieldNumber = 15;
  inline const ::std::string& bankername() const;
  inline void set_bankername(const ::std::string& value);
  inline void set_bankername(const char* value);
  inline void set_bankername(const char* value, size_t size);
  inline ::std::string* mutable_bankername();
  inline ::std::string* release_bankername();
  inline void set_allocated_bankername(::std::string* bankername);

  // optional string bankerfaceid = 16;
  inline bool has_bankerfaceid() const;
  inline void clear_bankerfaceid();
  static const int kBankerfaceidFieldNumber = 16;
  inline const ::std::string& bankerfaceid() const;
  inline void set_bankerfaceid(const ::std::string& value);
  inline void set_bankerfaceid(const char* value);
  inline void set_bankerfaceid(const char* value, size_t size);
  inline ::std::string* mutable_bankerfaceid();
  inline ::std::string* release_bankerfaceid();
  inline void set_allocated_bankerfaceid(::std::string* bankerfaceid);

  // optional int32 bankerlimit = 17;
  inline bool has_bankerlimit() const;
  inline void clear_bankerlimit();
  static const int kBankerlimitFieldNumber = 17;
  inline ::google::protobuf::int32 bankerlimit() const;
  inline void set_bankerlimit(::google::protobuf::int32 value);

  // optional int32 dropbanker = 18;
  inline bool has_dropbanker() const;
  inline void clear_dropbanker();
  static const int kDropbankerFieldNumber = 18;
  inline ::google::protobuf::int32 dropbanker() const;
  inline void set_dropbanker(::google::protobuf::int32 value);

  // optional string bankerwin = 19;
  inline bool has_bankerwin() const;
  inline void clear_bankerwin();
  static const int kBankerwinFieldNumber = 19;
  inline const ::std::string& bankerwin() const;
  inline void set_bankerwin(const ::std::string& value);
  inline void set_bankerwin(const char* value);
  inline void set_bankerwin(const char* value, size_t size);
  inline ::std::string* mutable_bankerwin();
  inline ::std::string* release_bankerwin();
  inline void set_allocated_bankerwin(::std::string* bankerwin);

  // optional int32 bebankernum = 20;
  inline bool has_bebankernum() const;
  inline void clear_bebankernum();
  static const int kBebankernumFieldNumber = 20;
  inline ::google::protobuf::int32 bebankernum() const;
  inline void set_bebankernum(::google::protobuf::int32 value);

  // optional int32 maxrobotnum = 21;
  inline bool has_maxrobotnum() const;
  inline void clear_maxrobotnum();
  static const int kMaxrobotnumFieldNumber = 21;
  inline ::google::protobuf::int32 maxrobotnum() const;
  inline void set_maxrobotnum(::google::protobuf::int32 value);

  // optional int32 robotnum = 22;
  inline bool has_robotnum() const;
  inline void clear_robotnum();
  static const int kRobotnumFieldNumber = 22;
  inline ::google::protobuf::int32 robotnum() const;
  inline void set_robotnum(::google::protobuf::int32 value);

  // optional int32 robotbanuserid = 23;
  inline bool has_robotbanuserid() const;
  inline void clear_robotbanuserid();
  static const int kRobotbanuseridFieldNumber = 23;
  inline ::google::protobuf::int32 robotbanuserid() const;
  inline void set_robotbanuserid(::google::protobuf::int32 value);

  // optional int32 bankercount = 24;
  inline bool has_bankercount() const;
  inline void clear_bankercount();
  static const int kBankercountFieldNumber = 24;
  inline ::google::protobuf::int32 bankercount() const;
  inline void set_bankercount(::google::protobuf::int32 value);

  // optional string legalkey = 25;
  inline bool has_legalkey() const;
  inline void clear_legalkey();
  static const int kLegalkeyFieldNumber = 25;
  inline const ::std::string& legalkey() const;
  inline void set_legalkey(const ::std::string& value);
  inline void set_legalkey(const char* value);
  inline void set_legalkey(const char* value, size_t size);
  inline ::std::string* mutable_legalkey();
  inline ::std::string* release_legalkey();
  inline void set_allocated_legalkey(::std::string* legalkey);

  // repeated string bankercountlist = 26;
  inline int bankercountlist_size() const;
  inline void clear_bankercountlist();
  static const int kBankercountlistFieldNumber = 26;
  inline const ::std::string& bankercountlist(int index) const;
  inline ::std::string* mutable_bankercountlist(int index);
  inline void set_bankercountlist(int index, const ::std::string& value);
  inline void set_bankercountlist(int index, const char* value);
  inline void set_bankercountlist(int index, const char* value, size_t size);
  inline ::std::string* add_bankercountlist();
  inline void add_bankercountlist(const ::std::string& value);
  inline void add_bankercountlist(const char* value);
  inline void add_bankercountlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bankercountlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bankercountlist();

  // @@protoc_insertion_point(class_scope:progame.bcbminfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_minjetton();
  inline void clear_has_minjetton();
  inline void set_has_maxjetton();
  inline void clear_has_maxjetton();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_winid();
  inline void clear_has_winid();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_bankerjetton();
  inline void clear_has_bankerjetton();
  inline void set_has_bankername();
  inline void clear_has_bankername();
  inline void set_has_bankerfaceid();
  inline void clear_has_bankerfaceid();
  inline void set_has_bankerlimit();
  inline void clear_has_bankerlimit();
  inline void set_has_dropbanker();
  inline void clear_has_dropbanker();
  inline void set_has_bankerwin();
  inline void clear_has_bankerwin();
  inline void set_has_bebankernum();
  inline void clear_has_bebankernum();
  inline void set_has_maxrobotnum();
  inline void clear_has_maxrobotnum();
  inline void set_has_robotnum();
  inline void clear_has_robotnum();
  inline void set_has_robotbanuserid();
  inline void clear_has_robotbanuserid();
  inline void set_has_bankercount();
  inline void clear_has_bankercount();
  inline void set_has_legalkey();
  inline void clear_has_legalkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 minjetton_;
  ::google::protobuf::int32 maxjetton_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bankerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > history_;
  ::google::protobuf::int32 winid_;
  ::google::protobuf::int32 bankerid_;
  ::std::string* bankerjetton_;
  ::std::string* bankername_;
  ::std::string* bankerfaceid_;
  ::google::protobuf::int32 bankerlimit_;
  ::google::protobuf::int32 dropbanker_;
  ::std::string* bankerwin_;
  ::google::protobuf::int32 bebankernum_;
  ::google::protobuf::int32 maxrobotnum_;
  ::google::protobuf::int32 robotnum_;
  ::google::protobuf::int32 robotbanuserid_;
  ::std::string* legalkey_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bankercountlist_;
  ::google::protobuf::int32 bankercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fbcbm_2eproto();
  friend void protobuf_AssignDesc_st_5fbcbm_2eproto();
  friend void protobuf_ShutdownFile_st_5fbcbm_2eproto();

  void InitAsDefaultInstance();
  static bcbminfo* default_instance_;
};
// -------------------------------------------------------------------

class bcbmpour : public ::google::protobuf::Message {
 public:
  bcbmpour();
  virtual ~bcbmpour();

  bcbmpour(const bcbmpour& from);

  inline bcbmpour& operator=(const bcbmpour& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bcbmpour& default_instance();

  void Swap(bcbmpour* other);

  // implements Message ----------------------------------------------

  bcbmpour* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bcbmpour& from);
  void MergeFrom(const bcbmpour& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourid = 2;
  inline bool has_pourid() const;
  inline void clear_pourid();
  static const int kPouridFieldNumber = 2;
  inline ::google::protobuf::int32 pourid() const;
  inline void set_pourid(::google::protobuf::int32 value);

  // optional int32 pourjetton = 3;
  inline bool has_pourjetton() const;
  inline void clear_pourjetton();
  static const int kPourjettonFieldNumber = 3;
  inline ::google::protobuf::int32 pourjetton() const;
  inline void set_pourjetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.bcbmpour)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourid();
  inline void clear_has_pourid();
  inline void set_has_pourjetton();
  inline void clear_has_pourjetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourid_;
  ::google::protobuf::int32 pourjetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fbcbm_2eproto();
  friend void protobuf_AssignDesc_st_5fbcbm_2eproto();
  friend void protobuf_ShutdownFile_st_5fbcbm_2eproto();

  void InitAsDefaultInstance();
  static bcbmpour* default_instance_;
};
// -------------------------------------------------------------------

class bcbmjettonrecorinfo : public ::google::protobuf::Message {
 public:
  bcbmjettonrecorinfo();
  virtual ~bcbmjettonrecorinfo();

  bcbmjettonrecorinfo(const bcbmjettonrecorinfo& from);

  inline bcbmjettonrecorinfo& operator=(const bcbmjettonrecorinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bcbmjettonrecorinfo& default_instance();

  void Swap(bcbmjettonrecorinfo* other);

  // implements Message ----------------------------------------------

  bcbmjettonrecorinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bcbmjettonrecorinfo& from);
  void MergeFrom(const bcbmjettonrecorinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 jetton = 2;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 2;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 winnum = 3;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 3;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional string jifen = 4;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 4;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional string nickname = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string facename = 6;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFacenameFieldNumber = 6;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // @@protoc_insertion_point(class_scope:progame.bcbmjettonrecorinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_facename();
  inline void clear_has_facename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 jetton_;
  ::std::string* jifen_;
  ::std::string* nickname_;
  ::std::string* facename_;
  ::google::protobuf::int32 winnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fbcbm_2eproto();
  friend void protobuf_AssignDesc_st_5fbcbm_2eproto();
  friend void protobuf_ShutdownFile_st_5fbcbm_2eproto();

  void InitAsDefaultInstance();
  static bcbmjettonrecorinfo* default_instance_;
};
// -------------------------------------------------------------------

class bcbmgamehistoryinfo : public ::google::protobuf::Message {
 public:
  bcbmgamehistoryinfo();
  virtual ~bcbmgamehistoryinfo();

  bcbmgamehistoryinfo(const bcbmgamehistoryinfo& from);

  inline bcbmgamehistoryinfo& operator=(const bcbmgamehistoryinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bcbmgamehistoryinfo& default_instance();

  void Swap(bcbmgamehistoryinfo* other);

  // implements Message ----------------------------------------------

  bcbmgamehistoryinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bcbmgamehistoryinfo& from);
  void MergeFrom(const bcbmgamehistoryinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional string tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional int32 magnification = 3;
  inline bool has_magnification() const;
  inline void clear_magnification();
  static const int kMagnificationFieldNumber = 3;
  inline ::google::protobuf::int32 magnification() const;
  inline void set_magnification(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated string recordidentification = 6;
  inline int recordidentification_size() const;
  inline void clear_recordidentification();
  static const int kRecordidentificationFieldNumber = 6;
  inline const ::std::string& recordidentification(int index) const;
  inline ::std::string* mutable_recordidentification(int index);
  inline void set_recordidentification(int index, const ::std::string& value);
  inline void set_recordidentification(int index, const char* value);
  inline void set_recordidentification(int index, const char* value, size_t size);
  inline ::std::string* add_recordidentification();
  inline void add_recordidentification(const ::std::string& value);
  inline void add_recordidentification(const char* value);
  inline void add_recordidentification(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recordidentification() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recordidentification();

  // repeated int32 winarea = 7;
  inline int winarea_size() const;
  inline void clear_winarea();
  static const int kWinareaFieldNumber = 7;
  inline ::google::protobuf::int32 winarea(int index) const;
  inline void set_winarea(int index, ::google::protobuf::int32 value);
  inline void add_winarea(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winarea() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winarea();

  // optional int32 limitred = 8;
  inline bool has_limitred() const;
  inline void clear_limitred();
  static const int kLimitredFieldNumber = 8;
  inline ::google::protobuf::int32 limitred() const;
  inline void set_limitred(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.bcbmgamehistoryinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_magnification();
  inline void clear_has_magnification();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_limitred();
  inline void clear_has_limitred();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 magnification_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recordidentification_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winarea_;
  ::google::protobuf::int32 limitred_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fbcbm_2eproto();
  friend void protobuf_AssignDesc_st_5fbcbm_2eproto();
  friend void protobuf_ShutdownFile_st_5fbcbm_2eproto();

  void InitAsDefaultInstance();
  static bcbmgamehistoryinfo* default_instance_;
};
// -------------------------------------------------------------------

class bcbmhistory : public ::google::protobuf::Message {
 public:
  bcbmhistory();
  virtual ~bcbmhistory();

  bcbmhistory(const bcbmhistory& from);

  inline bcbmhistory& operator=(const bcbmhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bcbmhistory& default_instance();

  void Swap(bcbmhistory* other);

  // implements Message ----------------------------------------------

  bcbmhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bcbmhistory& from);
  void MergeFrom(const bcbmhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 winarea = 1;
  inline bool has_winarea() const;
  inline void clear_winarea();
  static const int kWinareaFieldNumber = 1;
  inline ::google::protobuf::int32 winarea() const;
  inline void set_winarea(::google::protobuf::int32 value);

  // optional string recordidentification = 2;
  inline bool has_recordidentification() const;
  inline void clear_recordidentification();
  static const int kRecordidentificationFieldNumber = 2;
  inline const ::std::string& recordidentification() const;
  inline void set_recordidentification(const ::std::string& value);
  inline void set_recordidentification(const char* value);
  inline void set_recordidentification(const char* value, size_t size);
  inline ::std::string* mutable_recordidentification();
  inline ::std::string* release_recordidentification();
  inline void set_allocated_recordidentification(::std::string* recordidentification);

  // @@protoc_insertion_point(class_scope:progame.bcbmhistory)
 private:
  inline void set_has_winarea();
  inline void clear_has_winarea();
  inline void set_has_recordidentification();
  inline void clear_has_recordidentification();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* recordidentification_;
  ::google::protobuf::int32 winarea_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fbcbm_2eproto();
  friend void protobuf_AssignDesc_st_5fbcbm_2eproto();
  friend void protobuf_ShutdownFile_st_5fbcbm_2eproto();

  void InitAsDefaultInstance();
  static bcbmhistory* default_instance_;
};
// -------------------------------------------------------------------

class bcbmjettonrecordlist : public ::google::protobuf::Message {
 public:
  bcbmjettonrecordlist();
  virtual ~bcbmjettonrecordlist();

  bcbmjettonrecordlist(const bcbmjettonrecordlist& from);

  inline bcbmjettonrecordlist& operator=(const bcbmjettonrecordlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bcbmjettonrecordlist& default_instance();

  void Swap(bcbmjettonrecordlist* other);

  // implements Message ----------------------------------------------

  bcbmjettonrecordlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bcbmjettonrecordlist& from);
  void MergeFrom(const bcbmjettonrecordlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 jetton = 1;
  inline int jetton_size() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 1;
  inline ::google::protobuf::int32 jetton(int index) const;
  inline void set_jetton(int index, ::google::protobuf::int32 value);
  inline void add_jetton(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jetton() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jetton();

  // repeated int32 wincondition = 2;
  inline int wincondition_size() const;
  inline void clear_wincondition();
  static const int kWinconditionFieldNumber = 2;
  inline ::google::protobuf::int32 wincondition(int index) const;
  inline void set_wincondition(int index, ::google::protobuf::int32 value);
  inline void add_wincondition(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wincondition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wincondition();

  // @@protoc_insertion_point(class_scope:progame.bcbmjettonrecordlist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jetton_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wincondition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fbcbm_2eproto();
  friend void protobuf_AssignDesc_st_5fbcbm_2eproto();
  friend void protobuf_ShutdownFile_st_5fbcbm_2eproto();

  void InitAsDefaultInstance();
  static bcbmjettonrecordlist* default_instance_;
};
// ===================================================================


// ===================================================================

// bcbminfo

// optional int32 tableid = 1;
inline bool bcbminfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bcbminfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bcbminfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bcbminfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 bcbminfo::tableid() const {
  return tableid_;
}
inline void bcbminfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tabletype = 2;
inline bool bcbminfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bcbminfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bcbminfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bcbminfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 bcbminfo::tabletype() const {
  return tabletype_;
}
inline void bcbminfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 minjetton = 3;
inline bool bcbminfo::has_minjetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bcbminfo::set_has_minjetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bcbminfo::clear_has_minjetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bcbminfo::clear_minjetton() {
  minjetton_ = 0;
  clear_has_minjetton();
}
inline ::google::protobuf::int32 bcbminfo::minjetton() const {
  return minjetton_;
}
inline void bcbminfo::set_minjetton(::google::protobuf::int32 value) {
  set_has_minjetton();
  minjetton_ = value;
}

// optional int32 maxjetton = 4;
inline bool bcbminfo::has_maxjetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bcbminfo::set_has_maxjetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bcbminfo::clear_has_maxjetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bcbminfo::clear_maxjetton() {
  maxjetton_ = 0;
  clear_has_maxjetton();
}
inline ::google::protobuf::int32 bcbminfo::maxjetton() const {
  return maxjetton_;
}
inline void bcbminfo::set_maxjetton(::google::protobuf::int32 value) {
  set_has_maxjetton();
  maxjetton_ = value;
}

// optional int32 state = 5;
inline bool bcbminfo::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bcbminfo::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bcbminfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bcbminfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 bcbminfo::state() const {
  return state_;
}
inline void bcbminfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 6;
inline bool bcbminfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bcbminfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bcbminfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bcbminfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 bcbminfo::timemark() const {
  return timemark_;
}
inline void bcbminfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated int32 useridlist = 7;
inline int bcbminfo::useridlist_size() const {
  return useridlist_.size();
}
inline void bcbminfo::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 bcbminfo::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void bcbminfo::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void bcbminfo::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
bcbminfo::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
bcbminfo::mutable_useridlist() {
  return &useridlist_;
}

// repeated int32 bankerlist = 9;
inline int bcbminfo::bankerlist_size() const {
  return bankerlist_.size();
}
inline void bcbminfo::clear_bankerlist() {
  bankerlist_.Clear();
}
inline ::google::protobuf::int32 bcbminfo::bankerlist(int index) const {
  return bankerlist_.Get(index);
}
inline void bcbminfo::set_bankerlist(int index, ::google::protobuf::int32 value) {
  bankerlist_.Set(index, value);
}
inline void bcbminfo::add_bankerlist(::google::protobuf::int32 value) {
  bankerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
bcbminfo::bankerlist() const {
  return bankerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
bcbminfo::mutable_bankerlist() {
  return &bankerlist_;
}

// optional int32 winid = 10;
inline bool bcbminfo::has_winid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void bcbminfo::set_has_winid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void bcbminfo::clear_has_winid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void bcbminfo::clear_winid() {
  winid_ = 0;
  clear_has_winid();
}
inline ::google::protobuf::int32 bcbminfo::winid() const {
  return winid_;
}
inline void bcbminfo::set_winid(::google::protobuf::int32 value) {
  set_has_winid();
  winid_ = value;
}

// repeated int32 history = 12;
inline int bcbminfo::history_size() const {
  return history_.size();
}
inline void bcbminfo::clear_history() {
  history_.Clear();
}
inline ::google::protobuf::int32 bcbminfo::history(int index) const {
  return history_.Get(index);
}
inline void bcbminfo::set_history(int index, ::google::protobuf::int32 value) {
  history_.Set(index, value);
}
inline void bcbminfo::add_history(::google::protobuf::int32 value) {
  history_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
bcbminfo::history() const {
  return history_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
bcbminfo::mutable_history() {
  return &history_;
}

// optional int32 bankerid = 13;
inline bool bcbminfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void bcbminfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void bcbminfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void bcbminfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 bcbminfo::bankerid() const {
  return bankerid_;
}
inline void bcbminfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// optional string bankerjetton = 14;
inline bool bcbminfo::has_bankerjetton() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void bcbminfo::set_has_bankerjetton() {
  _has_bits_[0] |= 0x00000800u;
}
inline void bcbminfo::clear_has_bankerjetton() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void bcbminfo::clear_bankerjetton() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    bankerjetton_->clear();
  }
  clear_has_bankerjetton();
}
inline const ::std::string& bcbminfo::bankerjetton() const {
  return *bankerjetton_;
}
inline void bcbminfo::set_bankerjetton(const ::std::string& value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void bcbminfo::set_bankerjetton(const char* value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void bcbminfo::set_bankerjetton(const char* value, size_t size) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbminfo::mutable_bankerjetton() {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  return bankerjetton_;
}
inline ::std::string* bcbminfo::release_bankerjetton() {
  clear_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerjetton_;
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbminfo::set_allocated_bankerjetton(::std::string* bankerjetton) {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankerjetton) {
    set_has_bankerjetton();
    bankerjetton_ = bankerjetton;
  } else {
    clear_has_bankerjetton();
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankername = 15;
inline bool bcbminfo::has_bankername() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void bcbminfo::set_has_bankername() {
  _has_bits_[0] |= 0x00001000u;
}
inline void bcbminfo::clear_has_bankername() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void bcbminfo::clear_bankername() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    bankername_->clear();
  }
  clear_has_bankername();
}
inline const ::std::string& bcbminfo::bankername() const {
  return *bankername_;
}
inline void bcbminfo::set_bankername(const ::std::string& value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void bcbminfo::set_bankername(const char* value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void bcbminfo::set_bankername(const char* value, size_t size) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbminfo::mutable_bankername() {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  return bankername_;
}
inline ::std::string* bcbminfo::release_bankername() {
  clear_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankername_;
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbminfo::set_allocated_bankername(::std::string* bankername) {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankername) {
    set_has_bankername();
    bankername_ = bankername;
  } else {
    clear_has_bankername();
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankerfaceid = 16;
inline bool bcbminfo::has_bankerfaceid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void bcbminfo::set_has_bankerfaceid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void bcbminfo::clear_has_bankerfaceid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void bcbminfo::clear_bankerfaceid() {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_->clear();
  }
  clear_has_bankerfaceid();
}
inline const ::std::string& bcbminfo::bankerfaceid() const {
  return *bankerfaceid_;
}
inline void bcbminfo::set_bankerfaceid(const ::std::string& value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void bcbminfo::set_bankerfaceid(const char* value) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(value);
}
inline void bcbminfo::set_bankerfaceid(const char* value, size_t size) {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  bankerfaceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbminfo::mutable_bankerfaceid() {
  set_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    bankerfaceid_ = new ::std::string;
  }
  return bankerfaceid_;
}
inline ::std::string* bcbminfo::release_bankerfaceid() {
  clear_has_bankerfaceid();
  if (bankerfaceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerfaceid_;
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbminfo::set_allocated_bankerfaceid(::std::string* bankerfaceid) {
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (bankerfaceid) {
    set_has_bankerfaceid();
    bankerfaceid_ = bankerfaceid;
  } else {
    clear_has_bankerfaceid();
    bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bankerlimit = 17;
inline bool bcbminfo::has_bankerlimit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void bcbminfo::set_has_bankerlimit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void bcbminfo::clear_has_bankerlimit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void bcbminfo::clear_bankerlimit() {
  bankerlimit_ = 0;
  clear_has_bankerlimit();
}
inline ::google::protobuf::int32 bcbminfo::bankerlimit() const {
  return bankerlimit_;
}
inline void bcbminfo::set_bankerlimit(::google::protobuf::int32 value) {
  set_has_bankerlimit();
  bankerlimit_ = value;
}

// optional int32 dropbanker = 18;
inline bool bcbminfo::has_dropbanker() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void bcbminfo::set_has_dropbanker() {
  _has_bits_[0] |= 0x00008000u;
}
inline void bcbminfo::clear_has_dropbanker() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void bcbminfo::clear_dropbanker() {
  dropbanker_ = 0;
  clear_has_dropbanker();
}
inline ::google::protobuf::int32 bcbminfo::dropbanker() const {
  return dropbanker_;
}
inline void bcbminfo::set_dropbanker(::google::protobuf::int32 value) {
  set_has_dropbanker();
  dropbanker_ = value;
}

// optional string bankerwin = 19;
inline bool bcbminfo::has_bankerwin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void bcbminfo::set_has_bankerwin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void bcbminfo::clear_has_bankerwin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void bcbminfo::clear_bankerwin() {
  if (bankerwin_ != &::google::protobuf::internal::kEmptyString) {
    bankerwin_->clear();
  }
  clear_has_bankerwin();
}
inline const ::std::string& bcbminfo::bankerwin() const {
  return *bankerwin_;
}
inline void bcbminfo::set_bankerwin(const ::std::string& value) {
  set_has_bankerwin();
  if (bankerwin_ == &::google::protobuf::internal::kEmptyString) {
    bankerwin_ = new ::std::string;
  }
  bankerwin_->assign(value);
}
inline void bcbminfo::set_bankerwin(const char* value) {
  set_has_bankerwin();
  if (bankerwin_ == &::google::protobuf::internal::kEmptyString) {
    bankerwin_ = new ::std::string;
  }
  bankerwin_->assign(value);
}
inline void bcbminfo::set_bankerwin(const char* value, size_t size) {
  set_has_bankerwin();
  if (bankerwin_ == &::google::protobuf::internal::kEmptyString) {
    bankerwin_ = new ::std::string;
  }
  bankerwin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbminfo::mutable_bankerwin() {
  set_has_bankerwin();
  if (bankerwin_ == &::google::protobuf::internal::kEmptyString) {
    bankerwin_ = new ::std::string;
  }
  return bankerwin_;
}
inline ::std::string* bcbminfo::release_bankerwin() {
  clear_has_bankerwin();
  if (bankerwin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerwin_;
    bankerwin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbminfo::set_allocated_bankerwin(::std::string* bankerwin) {
  if (bankerwin_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerwin_;
  }
  if (bankerwin) {
    set_has_bankerwin();
    bankerwin_ = bankerwin;
  } else {
    clear_has_bankerwin();
    bankerwin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bebankernum = 20;
inline bool bcbminfo::has_bebankernum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void bcbminfo::set_has_bebankernum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void bcbminfo::clear_has_bebankernum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void bcbminfo::clear_bebankernum() {
  bebankernum_ = 0;
  clear_has_bebankernum();
}
inline ::google::protobuf::int32 bcbminfo::bebankernum() const {
  return bebankernum_;
}
inline void bcbminfo::set_bebankernum(::google::protobuf::int32 value) {
  set_has_bebankernum();
  bebankernum_ = value;
}

// optional int32 maxrobotnum = 21;
inline bool bcbminfo::has_maxrobotnum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void bcbminfo::set_has_maxrobotnum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void bcbminfo::clear_has_maxrobotnum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void bcbminfo::clear_maxrobotnum() {
  maxrobotnum_ = 0;
  clear_has_maxrobotnum();
}
inline ::google::protobuf::int32 bcbminfo::maxrobotnum() const {
  return maxrobotnum_;
}
inline void bcbminfo::set_maxrobotnum(::google::protobuf::int32 value) {
  set_has_maxrobotnum();
  maxrobotnum_ = value;
}

// optional int32 robotnum = 22;
inline bool bcbminfo::has_robotnum() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void bcbminfo::set_has_robotnum() {
  _has_bits_[0] |= 0x00080000u;
}
inline void bcbminfo::clear_has_robotnum() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void bcbminfo::clear_robotnum() {
  robotnum_ = 0;
  clear_has_robotnum();
}
inline ::google::protobuf::int32 bcbminfo::robotnum() const {
  return robotnum_;
}
inline void bcbminfo::set_robotnum(::google::protobuf::int32 value) {
  set_has_robotnum();
  robotnum_ = value;
}

// optional int32 robotbanuserid = 23;
inline bool bcbminfo::has_robotbanuserid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void bcbminfo::set_has_robotbanuserid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void bcbminfo::clear_has_robotbanuserid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void bcbminfo::clear_robotbanuserid() {
  robotbanuserid_ = 0;
  clear_has_robotbanuserid();
}
inline ::google::protobuf::int32 bcbminfo::robotbanuserid() const {
  return robotbanuserid_;
}
inline void bcbminfo::set_robotbanuserid(::google::protobuf::int32 value) {
  set_has_robotbanuserid();
  robotbanuserid_ = value;
}

// optional int32 bankercount = 24;
inline bool bcbminfo::has_bankercount() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void bcbminfo::set_has_bankercount() {
  _has_bits_[0] |= 0x00200000u;
}
inline void bcbminfo::clear_has_bankercount() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void bcbminfo::clear_bankercount() {
  bankercount_ = 0;
  clear_has_bankercount();
}
inline ::google::protobuf::int32 bcbminfo::bankercount() const {
  return bankercount_;
}
inline void bcbminfo::set_bankercount(::google::protobuf::int32 value) {
  set_has_bankercount();
  bankercount_ = value;
}

// optional string legalkey = 25;
inline bool bcbminfo::has_legalkey() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void bcbminfo::set_has_legalkey() {
  _has_bits_[0] |= 0x00400000u;
}
inline void bcbminfo::clear_has_legalkey() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void bcbminfo::clear_legalkey() {
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    legalkey_->clear();
  }
  clear_has_legalkey();
}
inline const ::std::string& bcbminfo::legalkey() const {
  return *legalkey_;
}
inline void bcbminfo::set_legalkey(const ::std::string& value) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(value);
}
inline void bcbminfo::set_legalkey(const char* value) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(value);
}
inline void bcbminfo::set_legalkey(const char* value, size_t size) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbminfo::mutable_legalkey() {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  return legalkey_;
}
inline ::std::string* bcbminfo::release_legalkey() {
  clear_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = legalkey_;
    legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbminfo::set_allocated_legalkey(::std::string* legalkey) {
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (legalkey) {
    set_has_legalkey();
    legalkey_ = legalkey;
  } else {
    clear_has_legalkey();
    legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string bankercountlist = 26;
inline int bcbminfo::bankercountlist_size() const {
  return bankercountlist_.size();
}
inline void bcbminfo::clear_bankercountlist() {
  bankercountlist_.Clear();
}
inline const ::std::string& bcbminfo::bankercountlist(int index) const {
  return bankercountlist_.Get(index);
}
inline ::std::string* bcbminfo::mutable_bankercountlist(int index) {
  return bankercountlist_.Mutable(index);
}
inline void bcbminfo::set_bankercountlist(int index, const ::std::string& value) {
  bankercountlist_.Mutable(index)->assign(value);
}
inline void bcbminfo::set_bankercountlist(int index, const char* value) {
  bankercountlist_.Mutable(index)->assign(value);
}
inline void bcbminfo::set_bankercountlist(int index, const char* value, size_t size) {
  bankercountlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbminfo::add_bankercountlist() {
  return bankercountlist_.Add();
}
inline void bcbminfo::add_bankercountlist(const ::std::string& value) {
  bankercountlist_.Add()->assign(value);
}
inline void bcbminfo::add_bankercountlist(const char* value) {
  bankercountlist_.Add()->assign(value);
}
inline void bcbminfo::add_bankercountlist(const char* value, size_t size) {
  bankercountlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
bcbminfo::bankercountlist() const {
  return bankercountlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
bcbminfo::mutable_bankercountlist() {
  return &bankercountlist_;
}

// -------------------------------------------------------------------

// bcbmpour

// optional int32 userid = 1;
inline bool bcbmpour::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bcbmpour::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bcbmpour::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bcbmpour::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 bcbmpour::userid() const {
  return userid_;
}
inline void bcbmpour::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourid = 2;
inline bool bcbmpour::has_pourid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bcbmpour::set_has_pourid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bcbmpour::clear_has_pourid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bcbmpour::clear_pourid() {
  pourid_ = 0;
  clear_has_pourid();
}
inline ::google::protobuf::int32 bcbmpour::pourid() const {
  return pourid_;
}
inline void bcbmpour::set_pourid(::google::protobuf::int32 value) {
  set_has_pourid();
  pourid_ = value;
}

// optional int32 pourjetton = 3;
inline bool bcbmpour::has_pourjetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bcbmpour::set_has_pourjetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bcbmpour::clear_has_pourjetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bcbmpour::clear_pourjetton() {
  pourjetton_ = 0;
  clear_has_pourjetton();
}
inline ::google::protobuf::int32 bcbmpour::pourjetton() const {
  return pourjetton_;
}
inline void bcbmpour::set_pourjetton(::google::protobuf::int32 value) {
  set_has_pourjetton();
  pourjetton_ = value;
}

// -------------------------------------------------------------------

// bcbmjettonrecorinfo

// optional int32 userid = 1;
inline bool bcbmjettonrecorinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bcbmjettonrecorinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bcbmjettonrecorinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bcbmjettonrecorinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 bcbmjettonrecorinfo::userid() const {
  return userid_;
}
inline void bcbmjettonrecorinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 jetton = 2;
inline bool bcbmjettonrecorinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bcbmjettonrecorinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bcbmjettonrecorinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bcbmjettonrecorinfo::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 bcbmjettonrecorinfo::jetton() const {
  return jetton_;
}
inline void bcbmjettonrecorinfo::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 winnum = 3;
inline bool bcbmjettonrecorinfo::has_winnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bcbmjettonrecorinfo::set_has_winnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bcbmjettonrecorinfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bcbmjettonrecorinfo::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 bcbmjettonrecorinfo::winnum() const {
  return winnum_;
}
inline void bcbmjettonrecorinfo::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional string jifen = 4;
inline bool bcbmjettonrecorinfo::has_jifen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bcbmjettonrecorinfo::set_has_jifen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bcbmjettonrecorinfo::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bcbmjettonrecorinfo::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& bcbmjettonrecorinfo::jifen() const {
  return *jifen_;
}
inline void bcbmjettonrecorinfo::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void bcbmjettonrecorinfo::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void bcbmjettonrecorinfo::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbmjettonrecorinfo::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* bcbmjettonrecorinfo::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbmjettonrecorinfo::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 5;
inline bool bcbmjettonrecorinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bcbmjettonrecorinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bcbmjettonrecorinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bcbmjettonrecorinfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& bcbmjettonrecorinfo::nickname() const {
  return *nickname_;
}
inline void bcbmjettonrecorinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void bcbmjettonrecorinfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void bcbmjettonrecorinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbmjettonrecorinfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* bcbmjettonrecorinfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbmjettonrecorinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string facename = 6;
inline bool bcbmjettonrecorinfo::has_facename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void bcbmjettonrecorinfo::set_has_facename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void bcbmjettonrecorinfo::clear_has_facename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void bcbmjettonrecorinfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& bcbmjettonrecorinfo::facename() const {
  return *facename_;
}
inline void bcbmjettonrecorinfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void bcbmjettonrecorinfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void bcbmjettonrecorinfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbmjettonrecorinfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* bcbmjettonrecorinfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbmjettonrecorinfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// bcbmgamehistoryinfo

// optional int32 tableid = 1;
inline bool bcbmgamehistoryinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bcbmgamehistoryinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bcbmgamehistoryinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bcbmgamehistoryinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 bcbmgamehistoryinfo::tableid() const {
  return tableid_;
}
inline void bcbmgamehistoryinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional string tablename = 2;
inline bool bcbmgamehistoryinfo::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bcbmgamehistoryinfo::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bcbmgamehistoryinfo::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bcbmgamehistoryinfo::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& bcbmgamehistoryinfo::tablename() const {
  return *tablename_;
}
inline void bcbmgamehistoryinfo::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void bcbmgamehistoryinfo::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void bcbmgamehistoryinfo::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbmgamehistoryinfo::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* bcbmgamehistoryinfo::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbmgamehistoryinfo::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 magnification = 3;
inline bool bcbmgamehistoryinfo::has_magnification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bcbmgamehistoryinfo::set_has_magnification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bcbmgamehistoryinfo::clear_has_magnification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bcbmgamehistoryinfo::clear_magnification() {
  magnification_ = 0;
  clear_has_magnification();
}
inline ::google::protobuf::int32 bcbmgamehistoryinfo::magnification() const {
  return magnification_;
}
inline void bcbmgamehistoryinfo::set_magnification(::google::protobuf::int32 value) {
  set_has_magnification();
  magnification_ = value;
}

// optional int32 state = 4;
inline bool bcbmgamehistoryinfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bcbmgamehistoryinfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bcbmgamehistoryinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bcbmgamehistoryinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 bcbmgamehistoryinfo::state() const {
  return state_;
}
inline void bcbmgamehistoryinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 5;
inline bool bcbmgamehistoryinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void bcbmgamehistoryinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void bcbmgamehistoryinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void bcbmgamehistoryinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 bcbmgamehistoryinfo::timemark() const {
  return timemark_;
}
inline void bcbmgamehistoryinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated string recordidentification = 6;
inline int bcbmgamehistoryinfo::recordidentification_size() const {
  return recordidentification_.size();
}
inline void bcbmgamehistoryinfo::clear_recordidentification() {
  recordidentification_.Clear();
}
inline const ::std::string& bcbmgamehistoryinfo::recordidentification(int index) const {
  return recordidentification_.Get(index);
}
inline ::std::string* bcbmgamehistoryinfo::mutable_recordidentification(int index) {
  return recordidentification_.Mutable(index);
}
inline void bcbmgamehistoryinfo::set_recordidentification(int index, const ::std::string& value) {
  recordidentification_.Mutable(index)->assign(value);
}
inline void bcbmgamehistoryinfo::set_recordidentification(int index, const char* value) {
  recordidentification_.Mutable(index)->assign(value);
}
inline void bcbmgamehistoryinfo::set_recordidentification(int index, const char* value, size_t size) {
  recordidentification_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbmgamehistoryinfo::add_recordidentification() {
  return recordidentification_.Add();
}
inline void bcbmgamehistoryinfo::add_recordidentification(const ::std::string& value) {
  recordidentification_.Add()->assign(value);
}
inline void bcbmgamehistoryinfo::add_recordidentification(const char* value) {
  recordidentification_.Add()->assign(value);
}
inline void bcbmgamehistoryinfo::add_recordidentification(const char* value, size_t size) {
  recordidentification_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
bcbmgamehistoryinfo::recordidentification() const {
  return recordidentification_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
bcbmgamehistoryinfo::mutable_recordidentification() {
  return &recordidentification_;
}

// repeated int32 winarea = 7;
inline int bcbmgamehistoryinfo::winarea_size() const {
  return winarea_.size();
}
inline void bcbmgamehistoryinfo::clear_winarea() {
  winarea_.Clear();
}
inline ::google::protobuf::int32 bcbmgamehistoryinfo::winarea(int index) const {
  return winarea_.Get(index);
}
inline void bcbmgamehistoryinfo::set_winarea(int index, ::google::protobuf::int32 value) {
  winarea_.Set(index, value);
}
inline void bcbmgamehistoryinfo::add_winarea(::google::protobuf::int32 value) {
  winarea_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
bcbmgamehistoryinfo::winarea() const {
  return winarea_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
bcbmgamehistoryinfo::mutable_winarea() {
  return &winarea_;
}

// optional int32 limitred = 8;
inline bool bcbmgamehistoryinfo::has_limitred() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void bcbmgamehistoryinfo::set_has_limitred() {
  _has_bits_[0] |= 0x00000080u;
}
inline void bcbmgamehistoryinfo::clear_has_limitred() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void bcbmgamehistoryinfo::clear_limitred() {
  limitred_ = 0;
  clear_has_limitred();
}
inline ::google::protobuf::int32 bcbmgamehistoryinfo::limitred() const {
  return limitred_;
}
inline void bcbmgamehistoryinfo::set_limitred(::google::protobuf::int32 value) {
  set_has_limitred();
  limitred_ = value;
}

// -------------------------------------------------------------------

// bcbmhistory

// optional int32 winarea = 1;
inline bool bcbmhistory::has_winarea() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bcbmhistory::set_has_winarea() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bcbmhistory::clear_has_winarea() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bcbmhistory::clear_winarea() {
  winarea_ = 0;
  clear_has_winarea();
}
inline ::google::protobuf::int32 bcbmhistory::winarea() const {
  return winarea_;
}
inline void bcbmhistory::set_winarea(::google::protobuf::int32 value) {
  set_has_winarea();
  winarea_ = value;
}

// optional string recordidentification = 2;
inline bool bcbmhistory::has_recordidentification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bcbmhistory::set_has_recordidentification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bcbmhistory::clear_has_recordidentification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bcbmhistory::clear_recordidentification() {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    recordidentification_->clear();
  }
  clear_has_recordidentification();
}
inline const ::std::string& bcbmhistory::recordidentification() const {
  return *recordidentification_;
}
inline void bcbmhistory::set_recordidentification(const ::std::string& value) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(value);
}
inline void bcbmhistory::set_recordidentification(const char* value) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(value);
}
inline void bcbmhistory::set_recordidentification(const char* value, size_t size) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bcbmhistory::mutable_recordidentification() {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  return recordidentification_;
}
inline ::std::string* bcbmhistory::release_recordidentification() {
  clear_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recordidentification_;
    recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void bcbmhistory::set_allocated_recordidentification(::std::string* recordidentification) {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    delete recordidentification_;
  }
  if (recordidentification) {
    set_has_recordidentification();
    recordidentification_ = recordidentification;
  } else {
    clear_has_recordidentification();
    recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// bcbmjettonrecordlist

// repeated int32 jetton = 1;
inline int bcbmjettonrecordlist::jetton_size() const {
  return jetton_.size();
}
inline void bcbmjettonrecordlist::clear_jetton() {
  jetton_.Clear();
}
inline ::google::protobuf::int32 bcbmjettonrecordlist::jetton(int index) const {
  return jetton_.Get(index);
}
inline void bcbmjettonrecordlist::set_jetton(int index, ::google::protobuf::int32 value) {
  jetton_.Set(index, value);
}
inline void bcbmjettonrecordlist::add_jetton(::google::protobuf::int32 value) {
  jetton_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
bcbmjettonrecordlist::jetton() const {
  return jetton_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
bcbmjettonrecordlist::mutable_jetton() {
  return &jetton_;
}

// repeated int32 wincondition = 2;
inline int bcbmjettonrecordlist::wincondition_size() const {
  return wincondition_.size();
}
inline void bcbmjettonrecordlist::clear_wincondition() {
  wincondition_.Clear();
}
inline ::google::protobuf::int32 bcbmjettonrecordlist::wincondition(int index) const {
  return wincondition_.Get(index);
}
inline void bcbmjettonrecordlist::set_wincondition(int index, ::google::protobuf::int32 value) {
  wincondition_.Set(index, value);
}
inline void bcbmjettonrecordlist::add_wincondition(::google::protobuf::int32 value) {
  wincondition_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
bcbmjettonrecordlist::wincondition() const {
  return wincondition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
bcbmjettonrecordlist::mutable_wincondition() {
  return &wincondition_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fbcbm_2eproto__INCLUDED
