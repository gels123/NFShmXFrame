// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_ddz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_ddz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* lasplayinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lasplayinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ddzuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ddzuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ddzinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ddzinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* multipleinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  multipleinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* noad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  noad_reflection_ = NULL;
const ::google::protobuf::Descriptor* ddzhistoryitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ddzhistoryitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ddzhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ddzhistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ddzhistorypair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ddzhistorypair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ddztaganalyseresult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ddztaganalyseresult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ddzpokerlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ddzpokerlist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fddz_2eproto() {
  protobuf_AddDesc_st_5fddz_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_ddz.proto");
  GOOGLE_CHECK(file != NULL);
  lasplayinfo_descriptor_ = file->message_type(0);
  static const int lasplayinfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lasplayinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lasplayinfo, pokertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lasplayinfo, pokerlist_),
  };
  lasplayinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lasplayinfo_descriptor_,
      lasplayinfo::default_instance_,
      lasplayinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lasplayinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lasplayinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lasplayinfo));
  ddzuser_descriptor_ = file->message_type(1);
  static const int ddzuser_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, face_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, handpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, playsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, mpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, qlandlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, jlandlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, bombnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, autoplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, timeouts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, islandlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, pokersum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, lasttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, lastpokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, doublestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, allhandpoker_),
  };
  ddzuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ddzuser_descriptor_,
      ddzuser::default_instance_,
      ddzuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ddzuser));
  ddzinfo_descriptor_ = file->message_type(2);
  static const int ddzinfo_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, ddztype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, pourjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, maxvipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, cap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, payway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, paynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, julebuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, tablemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, tabletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, landlordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, lasinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, usevipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, landlordpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, wildcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, dissolveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, straction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, maxplaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, actionuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, actionuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, isnotplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, qlandlordsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, afreshnum_),
  };
  ddzinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ddzinfo_descriptor_,
      ddzinfo::default_instance_,
      ddzinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ddzinfo));
  multipleinfo_descriptor_ = file->message_type(3);
  static const int multipleinfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, mpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, qdz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, dzp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, bomb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, spring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, multiplepublic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, landlordmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, peasantmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, summultiple_),
  };
  multipleinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      multipleinfo_descriptor_,
      multipleinfo::default_instance_,
      multipleinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multipleinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(multipleinfo));
  noad_descriptor_ = file->message_type(4);
  static const int noad_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, poker_kong_),
  };
  noad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      noad_descriptor_,
      noad::default_instance_,
      noad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(noad));
  ddzhistoryitem_descriptor_ = file->message_type(5);
  static const int ddzhistoryitem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, tableplayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, playtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, playstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, quitdes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, userdes_),
  };
  ddzhistoryitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ddzhistoryitem_descriptor_,
      ddzhistoryitem::default_instance_,
      ddzhistoryitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistoryitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ddzhistoryitem));
  ddzhistory_descriptor_ = file->message_type(6);
  static const int ddzhistory_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, tablemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, playnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, hitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, ddztype_),
  };
  ddzhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ddzhistory_descriptor_,
      ddzhistory::default_instance_,
      ddzhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ddzhistory));
  ddzhistorypair_descriptor_ = file->message_type(7);
  static const int ddzhistorypair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistorypair, packetcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistorypair, pkginfo_),
  };
  ddzhistorypair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ddzhistorypair_descriptor_,
      ddzhistorypair::default_instance_,
      ddzhistorypair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistorypair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzhistorypair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ddzhistorypair));
  ddztaganalyseresult_descriptor_ = file->message_type(8);
  static const int ddztaganalyseresult_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, onecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, twocount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, threecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, fourcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, onelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, twolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, threelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, fourlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, onecarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, twocarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, threecarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, fourcarddata_),
  };
  ddztaganalyseresult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ddztaganalyseresult_descriptor_,
      ddztaganalyseresult::default_instance_,
      ddztaganalyseresult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddztaganalyseresult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ddztaganalyseresult));
  ddzpokerlist_descriptor_ = file->message_type(9);
  static const int ddzpokerlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzpokerlist, card_),
  };
  ddzpokerlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ddzpokerlist_descriptor_,
      ddzpokerlist::default_instance_,
      ddzpokerlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzpokerlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ddzpokerlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ddzpokerlist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fddz_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lasplayinfo_descriptor_, &lasplayinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ddzuser_descriptor_, &ddzuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ddzinfo_descriptor_, &ddzinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    multipleinfo_descriptor_, &multipleinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    noad_descriptor_, &noad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ddzhistoryitem_descriptor_, &ddzhistoryitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ddzhistory_descriptor_, &ddzhistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ddzhistorypair_descriptor_, &ddzhistorypair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ddztaganalyseresult_descriptor_, &ddztaganalyseresult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ddzpokerlist_descriptor_, &ddzpokerlist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fddz_2eproto() {
  delete lasplayinfo::default_instance_;
  delete lasplayinfo_reflection_;
  delete ddzuser::default_instance_;
  delete ddzuser_reflection_;
  delete ddzinfo::default_instance_;
  delete ddzinfo_reflection_;
  delete multipleinfo::default_instance_;
  delete multipleinfo_reflection_;
  delete noad::default_instance_;
  delete noad_reflection_;
  delete ddzhistoryitem::default_instance_;
  delete ddzhistoryitem_reflection_;
  delete ddzhistory::default_instance_;
  delete ddzhistory_reflection_;
  delete ddzhistorypair::default_instance_;
  delete ddzhistorypair_reflection_;
  delete ddztaganalyseresult::default_instance_;
  delete ddztaganalyseresult_reflection_;
  delete ddzpokerlist::default_instance_;
  delete ddzpokerlist_reflection_;
}

void protobuf_AddDesc_st_5fddz_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014st_ddz.proto\022\007progame\"C\n\013lasplayinfo\022\016"
    "\n\006userid\030\001 \001(\005\022\021\n\tpokerType\030\002 \001(\005\022\021\n\tpok"
    "erList\030\003 \003(\005\"\266\003\n\007ddzuser\022\016\n\006userid\030\001 \001(\005"
    "\022\020\n\010nickname\030\002 \001(\t\022\016\n\006face_1\030\003 \001(\t\022\r\n\005ji"
    "fen\030\004 \001(\t\022\017\n\007chairid\030\005 \001(\005\022\021\n\thandpoker\030"
    "\006 \003(\005\022\017\n\007playsum\030\007 \001(\005\022\r\n\005state\030\010 \001(\005\022\016\n"
    "\006mPoker\030\t \001(\005\022\021\n\tqLandlord\030\n \001(\005\022\021\n\tjLan"
    "dlord\030\013 \001(\005\022\017\n\007bombNum\030\014 \001(\005\022\022\n\nautoplay"
    "er\030\r \001(\005\022\020\n\010timeouts\030\016 \001(\005\022\016\n\006winnum\030\017 \001"
    "(\005\022\020\n\010maxscore\030\020 \001(\005\022\022\n\nislandlord\030\021 \001(\005"
    "\022\013\n\003sex\030\022 \001(\005\022\020\n\010pokerSum\030\023 \001(\005\022\020\n\010lastt"
    "ype\030\024 \001(\005\022\025\n\rlastpokerlist\030\025 \003(\005\022\020\n\010mult"
    "iple\030\026 \001(\005\022\023\n\013doublestate\030\027 \001(\005\022\024\n\014allha"
    "ndpoker\030\030 \003(\005\"\200\005\n\007ddzinfo\022\017\n\007tableid\030\001 \001"
    "(\005\022\021\n\ttabletype\030\002 \001(\005\022\017\n\007ddztype\030\003 \001(\005\022\022"
    "\n\npourjetton\030\004 \001(\005\022\021\n\tmaxvipnum\030\005 \001(\005\022\013\n"
    "\003cap\030\006 \001(\005\022\017\n\007paytype\030\007 \001(\005\022\016\n\006payway\030\010 "
    "\001(\005\022\016\n\006paynum\030\t \001(\005\022\017\n\007ownerid\030\n \001(\005\022\020\n\010"
    "julebuid\030\013 \001(\005\022\021\n\ttablemark\030\014 \001(\005\022\021\n\ttab"
    "letime\030\r \001(\005\022\r\n\005state\030\016 \001(\005\022\020\n\010timemark\030"
    "\017 \001(\005\022\022\n\nlandlordid\030\020 \001(\005\022!\n\007situser\030\021 \003"
    "(\0132\020.progame.ddzuser\022\021\n\tstanduser\030\022 \003(\005\022"
    "%\n\007lasInfo\030\023 \001(\0132\024.progame.lasplayinfo\022\021"
    "\n\tusevipnum\030\024 \001(\005\022\020\n\010multiple\030\025 \001(\005\022\025\n\rl"
    "andlordPoker\030\026 \003(\005\022\020\n\010wildCard\030\027 \001(\005\022\024\n\014"
    "dissolveinfo\030\030 \001(\005\022\021\n\tstraction\030\031 \001(\t\022\022\n"
    "\nmaxplaynum\030\032 \001(\005\022\022\n\nactionuser\030\033 \001(\005\022\017\n"
    "\007frameid\030\034 \001(\005\022\024\n\014actionuserid\030\035 \001(\005\022\021\n\t"
    "isnotplay\030\036 \001(\005\022\024\n\014qlandlordsum\030\037 \001(\005\022\021\n"
    "\tafreshnum\030  \001(\005\"\266\001\n\014multipleinfo\022\016\n\006mPo"
    "ker\030\001 \001(\005\022\013\n\003qdz\030\002 \001(\005\022\013\n\003dzp\030\003 \001(\005\022\014\n\004b"
    "omb\030\004 \001(\005\022\016\n\006spring\030\005 \001(\005\022\026\n\016multiplePub"
    "lic\030\006 \001(\005\022\030\n\020landlordmultiple\030\007 \001(\005\022\027\n\017p"
    "easantmultiple\030\010 \001(\005\022\023\n\013summultiple\030\t \001("
    "\005\"\370\001\n\004noad\022\017\n\007poker_A\030\001 \001(\005\022\017\n\007poker_2\030\002"
    " \001(\005\022\017\n\007poker_3\030\003 \001(\005\022\017\n\007poker_4\030\004 \001(\005\022\017"
    "\n\007poker_5\030\005 \001(\005\022\017\n\007poker_6\030\006 \001(\005\022\017\n\007poke"
    "r_7\030\007 \001(\005\022\017\n\007poker_8\030\010 \001(\005\022\017\n\007poker_9\030\t "
    "\001(\005\022\020\n\010poker_10\030\n \001(\005\022\017\n\007poker_J\030\013 \001(\005\022\017"
    "\n\007poker_Q\030\014 \001(\005\022\017\n\007poker_K\030\r \001(\005\022\022\n\npoke"
    "r_Kong\030\016 \001(\005\"\264\001\n\016ddzhistoryitem\022\023\n\013table"
    "playid\030\001 \001(\005\022\017\n\007tableid\030\002 \001(\005\022\020\n\010playtim"
    "e\030\003 \001(\005\022\021\n\tplaystate\030\004 \001(\005\022\022\n\nuseridlist"
    "\030\005 \003(\005\022\020\n\010nicklist\030\006 \003(\t\022\017\n\007winlist\030\007 \003("
    "\005\022\017\n\007quitdes\030\010 \001(\t\022\017\n\007userdes\030\t \003(\t\"\307\001\n\n"
    "ddzhistory\022\017\n\007tableid\030\001 \001(\005\022\021\n\ttablemark"
    "\030\002 \001(\005\022\020\n\010gametime\030\003 \001(\005\022\017\n\007playnum\030\004 \001("
    "\005\022\022\n\nuseridlist\030\005 \003(\005\022\020\n\010nicklist\030\006 \003(\t\022"
    "\017\n\007winlist\030\007 \003(\005\022*\n\thitemlist\030\010 \003(\0132\027.pr"
    "ogame.ddzhistoryitem\022\017\n\007ddztype\030\t \001(\005\"5\n"
    "\016ddzhistorypair\022\022\n\npacketcode\030\001 \001(\005\022\017\n\007p"
    "kginfo\030\002 \001(\t\"\376\001\n\023ddztaganalyseresult\022\020\n\010"
    "onecount\030\001 \001(\005\022\020\n\010twocount\030\002 \001(\005\022\022\n\nthre"
    "ecount\030\003 \001(\005\022\021\n\tfourcount\030\004 \001(\005\022\017\n\007oneli"
    "st\030\005 \003(\005\022\017\n\007twolist\030\006 \003(\005\022\021\n\tthreelist\030\007"
    " \003(\005\022\020\n\010fourlist\030\010 \003(\005\022\023\n\013onecarddata\030\t "
    "\003(\005\022\023\n\013twocarddata\030\n \003(\005\022\025\n\rthreecarddat"
    "a\030\013 \003(\005\022\024\n\014fourcarddata\030\014 \003(\005\"\034\n\014ddzpoke"
    "rlist\022\014\n\004card\030\001 \003(\005", 2339);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_ddz.proto", &protobuf_RegisterTypes);
  lasplayinfo::default_instance_ = new lasplayinfo();
  ddzuser::default_instance_ = new ddzuser();
  ddzinfo::default_instance_ = new ddzinfo();
  multipleinfo::default_instance_ = new multipleinfo();
  noad::default_instance_ = new noad();
  ddzhistoryitem::default_instance_ = new ddzhistoryitem();
  ddzhistory::default_instance_ = new ddzhistory();
  ddzhistorypair::default_instance_ = new ddzhistorypair();
  ddztaganalyseresult::default_instance_ = new ddztaganalyseresult();
  ddzpokerlist::default_instance_ = new ddzpokerlist();
  lasplayinfo::default_instance_->InitAsDefaultInstance();
  ddzuser::default_instance_->InitAsDefaultInstance();
  ddzinfo::default_instance_->InitAsDefaultInstance();
  multipleinfo::default_instance_->InitAsDefaultInstance();
  noad::default_instance_->InitAsDefaultInstance();
  ddzhistoryitem::default_instance_->InitAsDefaultInstance();
  ddzhistory::default_instance_->InitAsDefaultInstance();
  ddzhistorypair::default_instance_->InitAsDefaultInstance();
  ddztaganalyseresult::default_instance_->InitAsDefaultInstance();
  ddzpokerlist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fddz_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fddz_2eproto {
  StaticDescriptorInitializer_st_5fddz_2eproto() {
    protobuf_AddDesc_st_5fddz_2eproto();
  }
} static_descriptor_initializer_st_5fddz_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int lasplayinfo::kUseridFieldNumber;
const int lasplayinfo::kPokerTypeFieldNumber;
const int lasplayinfo::kPokerListFieldNumber;
#endif  // !_MSC_VER

lasplayinfo::lasplayinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lasplayinfo::InitAsDefaultInstance() {
}

lasplayinfo::lasplayinfo(const lasplayinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lasplayinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pokertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lasplayinfo::~lasplayinfo() {
  SharedDtor();
}

void lasplayinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lasplayinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lasplayinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lasplayinfo_descriptor_;
}

const lasplayinfo& lasplayinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

lasplayinfo* lasplayinfo::default_instance_ = NULL;

lasplayinfo* lasplayinfo::New() const {
  return new lasplayinfo;
}

void lasplayinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pokertype_ = 0;
  }
  pokerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lasplayinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pokerType;
        break;
      }

      // optional int32 pokerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokertype_)));
          set_has_pokertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pokerList;
        break;
      }

      // repeated int32 pokerList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pokerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pokerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pokerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lasplayinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pokerType = 2;
  if (has_pokertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pokertype(), output);
  }

  // repeated int32 pokerList = 3;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pokerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lasplayinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pokerType = 2;
  if (has_pokertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pokertype(), target);
  }

  // repeated int32 pokerList = 3;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pokerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lasplayinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pokerType = 2;
    if (has_pokertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokertype());
    }

  }
  // repeated int32 pokerList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pokerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pokerlist(i));
    }
    total_size += 1 * this->pokerlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lasplayinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lasplayinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lasplayinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lasplayinfo::MergeFrom(const lasplayinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pokerlist_.MergeFrom(from.pokerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pokertype()) {
      set_pokertype(from.pokertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lasplayinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lasplayinfo::CopyFrom(const lasplayinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lasplayinfo::IsInitialized() const {

  return true;
}

void lasplayinfo::Swap(lasplayinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pokertype_, other->pokertype_);
    pokerlist_.Swap(&other->pokerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lasplayinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lasplayinfo_descriptor_;
  metadata.reflection = lasplayinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ddzuser::kUseridFieldNumber;
const int ddzuser::kNicknameFieldNumber;
const int ddzuser::kFace1FieldNumber;
const int ddzuser::kJifenFieldNumber;
const int ddzuser::kChairidFieldNumber;
const int ddzuser::kHandpokerFieldNumber;
const int ddzuser::kPlaysumFieldNumber;
const int ddzuser::kStateFieldNumber;
const int ddzuser::kMPokerFieldNumber;
const int ddzuser::kQLandlordFieldNumber;
const int ddzuser::kJLandlordFieldNumber;
const int ddzuser::kBombNumFieldNumber;
const int ddzuser::kAutoplayerFieldNumber;
const int ddzuser::kTimeoutsFieldNumber;
const int ddzuser::kWinnumFieldNumber;
const int ddzuser::kMaxscoreFieldNumber;
const int ddzuser::kIslandlordFieldNumber;
const int ddzuser::kSexFieldNumber;
const int ddzuser::kPokerSumFieldNumber;
const int ddzuser::kLasttypeFieldNumber;
const int ddzuser::kLastpokerlistFieldNumber;
const int ddzuser::kMultipleFieldNumber;
const int ddzuser::kDoublestateFieldNumber;
const int ddzuser::kAllhandpokerFieldNumber;
#endif  // !_MSC_VER

ddzuser::ddzuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ddzuser::InitAsDefaultInstance() {
}

ddzuser::ddzuser(const ddzuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ddzuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chairid_ = 0;
  playsum_ = 0;
  state_ = 0;
  mpoker_ = 0;
  qlandlord_ = 0;
  jlandlord_ = 0;
  bombnum_ = 0;
  autoplayer_ = 0;
  timeouts_ = 0;
  winnum_ = 0;
  maxscore_ = 0;
  islandlord_ = 0;
  sex_ = 0;
  pokersum_ = 0;
  lasttype_ = 0;
  multiple_ = 0;
  doublestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ddzuser::~ddzuser() {
  SharedDtor();
}

void ddzuser::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (this != default_instance_) {
  }
}

void ddzuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ddzuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ddzuser_descriptor_;
}

const ddzuser& ddzuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

ddzuser* ddzuser::default_instance_ = NULL;

ddzuser* ddzuser::New() const {
  return new ddzuser;
}

void ddzuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_face_1()) {
      if (face_1_ != &::google::protobuf::internal::kEmptyString) {
        face_1_->clear();
      }
    }
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    chairid_ = 0;
    playsum_ = 0;
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mpoker_ = 0;
    qlandlord_ = 0;
    jlandlord_ = 0;
    bombnum_ = 0;
    autoplayer_ = 0;
    timeouts_ = 0;
    winnum_ = 0;
    maxscore_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    islandlord_ = 0;
    sex_ = 0;
    pokersum_ = 0;
    lasttype_ = 0;
    multiple_ = 0;
    doublestate_ = 0;
  }
  handpoker_.Clear();
  lastpokerlist_.Clear();
  allhandpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ddzuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_face_1;
        break;
      }

      // optional string face_1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_1().data(), this->face_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jifen;
        break;
      }

      // optional string jifen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handpoker;
        break;
      }

      // repeated int32 handpoker = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handpoker;
        if (input->ExpectTag(56)) goto parse_playsum;
        break;
      }

      // optional int32 playsum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playsum_)));
          set_has_playsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mPoker;
        break;
      }

      // optional int32 mPoker = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mPoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpoker_)));
          set_has_mpoker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_qLandlord;
        break;
      }

      // optional int32 qLandlord = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qLandlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qlandlord_)));
          set_has_qlandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jLandlord;
        break;
      }

      // optional int32 jLandlord = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jLandlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jlandlord_)));
          set_has_jlandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bombNum;
        break;
      }

      // optional int32 bombNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bombNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombnum_)));
          set_has_bombnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_autoplayer;
        break;
      }

      // optional int32 autoplayer = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoplayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoplayer_)));
          set_has_autoplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_timeouts;
        break;
      }

      // optional int32 timeouts = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeouts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeouts_)));
          set_has_timeouts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_maxscore;
        break;
      }

      // optional int32 maxscore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_islandlord;
        break;
      }

      // optional int32 islandlord = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_islandlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islandlord_)));
          set_has_islandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sex;
        break;
      }

      // optional int32 sex = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_pokerSum;
        break;
      }

      // optional int32 pokerSum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokersum_)));
          set_has_pokersum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_lasttype;
        break;
      }

      // optional int32 lasttype = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttype_)));
          set_has_lasttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lastpokerlist;
        break;
      }

      // repeated int32 lastpokerlist = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastpokerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_lastpokerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lastpokerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lastpokerlist;
        if (input->ExpectTag(176)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_doublestate;
        break;
      }

      // optional int32 doublestate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doublestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doublestate_)));
          set_has_doublestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_allhandpoker;
        break;
      }

      // repeated int32 allhandpoker = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allhandpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_allhandpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allhandpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_allhandpoker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ddzuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional string face_1 = 3;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->face_1(), output);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jifen(), output);
  }

  // optional int32 chairid = 5;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chairid(), output);
  }

  // repeated int32 handpoker = 6;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handpoker(i), output);
  }

  // optional int32 playsum = 7;
  if (has_playsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playsum(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional int32 mPoker = 9;
  if (has_mpoker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mpoker(), output);
  }

  // optional int32 qLandlord = 10;
  if (has_qlandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->qlandlord(), output);
  }

  // optional int32 jLandlord = 11;
  if (has_jlandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->jlandlord(), output);
  }

  // optional int32 bombNum = 12;
  if (has_bombnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bombnum(), output);
  }

  // optional int32 autoplayer = 13;
  if (has_autoplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->autoplayer(), output);
  }

  // optional int32 timeouts = 14;
  if (has_timeouts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->timeouts(), output);
  }

  // optional int32 winnum = 15;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->winnum(), output);
  }

  // optional int32 maxscore = 16;
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->maxscore(), output);
  }

  // optional int32 islandlord = 17;
  if (has_islandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->islandlord(), output);
  }

  // optional int32 sex = 18;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sex(), output);
  }

  // optional int32 pokerSum = 19;
  if (has_pokersum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->pokersum(), output);
  }

  // optional int32 lasttype = 20;
  if (has_lasttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lasttype(), output);
  }

  // repeated int32 lastpokerlist = 21;
  for (int i = 0; i < this->lastpokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->lastpokerlist(i), output);
  }

  // optional int32 multiple = 22;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->multiple(), output);
  }

  // optional int32 doublestate = 23;
  if (has_doublestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->doublestate(), output);
  }

  // repeated int32 allhandpoker = 24;
  for (int i = 0; i < this->allhandpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->allhandpoker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ddzuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string face_1 = 3;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->face_1(), target);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jifen(), target);
  }

  // optional int32 chairid = 5;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chairid(), target);
  }

  // repeated int32 handpoker = 6;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handpoker(i), target);
  }

  // optional int32 playsum = 7;
  if (has_playsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playsum(), target);
  }

  // optional int32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // optional int32 mPoker = 9;
  if (has_mpoker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mpoker(), target);
  }

  // optional int32 qLandlord = 10;
  if (has_qlandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->qlandlord(), target);
  }

  // optional int32 jLandlord = 11;
  if (has_jlandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->jlandlord(), target);
  }

  // optional int32 bombNum = 12;
  if (has_bombnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bombnum(), target);
  }

  // optional int32 autoplayer = 13;
  if (has_autoplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->autoplayer(), target);
  }

  // optional int32 timeouts = 14;
  if (has_timeouts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->timeouts(), target);
  }

  // optional int32 winnum = 15;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->winnum(), target);
  }

  // optional int32 maxscore = 16;
  if (has_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->maxscore(), target);
  }

  // optional int32 islandlord = 17;
  if (has_islandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->islandlord(), target);
  }

  // optional int32 sex = 18;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sex(), target);
  }

  // optional int32 pokerSum = 19;
  if (has_pokersum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->pokersum(), target);
  }

  // optional int32 lasttype = 20;
  if (has_lasttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lasttype(), target);
  }

  // repeated int32 lastpokerlist = 21;
  for (int i = 0; i < this->lastpokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->lastpokerlist(i), target);
  }

  // optional int32 multiple = 22;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->multiple(), target);
  }

  // optional int32 doublestate = 23;
  if (has_doublestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->doublestate(), target);
  }

  // repeated int32 allhandpoker = 24;
  for (int i = 0; i < this->allhandpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->allhandpoker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ddzuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string face_1 = 3;
    if (has_face_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_1());
    }

    // optional string jifen = 4;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional int32 chairid = 5;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 playsum = 7;
    if (has_playsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playsum());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mPoker = 9;
    if (has_mpoker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpoker());
    }

    // optional int32 qLandlord = 10;
    if (has_qlandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qlandlord());
    }

    // optional int32 jLandlord = 11;
    if (has_jlandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jlandlord());
    }

    // optional int32 bombNum = 12;
    if (has_bombnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombnum());
    }

    // optional int32 autoplayer = 13;
    if (has_autoplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoplayer());
    }

    // optional int32 timeouts = 14;
    if (has_timeouts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeouts());
    }

    // optional int32 winnum = 15;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional int32 maxscore = 16;
    if (has_maxscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxscore());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 islandlord = 17;
    if (has_islandlord()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->islandlord());
    }

    // optional int32 sex = 18;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 pokerSum = 19;
    if (has_pokersum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokersum());
    }

    // optional int32 lasttype = 20;
    if (has_lasttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttype());
    }

    // optional int32 multiple = 22;
    if (has_multiple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple());
    }

    // optional int32 doublestate = 23;
    if (has_doublestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doublestate());
    }

  }
  // repeated int32 handpoker = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  // repeated int32 lastpokerlist = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->lastpokerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lastpokerlist(i));
    }
    total_size += 2 * this->lastpokerlist_size() + data_size;
  }

  // repeated int32 allhandpoker = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->allhandpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->allhandpoker(i));
    }
    total_size += 2 * this->allhandpoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ddzuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ddzuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ddzuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ddzuser::MergeFrom(const ddzuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  lastpokerlist_.MergeFrom(from.lastpokerlist_);
  allhandpoker_.MergeFrom(from.allhandpoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_face_1()) {
      set_face_1(from.face_1());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_playsum()) {
      set_playsum(from.playsum());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mpoker()) {
      set_mpoker(from.mpoker());
    }
    if (from.has_qlandlord()) {
      set_qlandlord(from.qlandlord());
    }
    if (from.has_jlandlord()) {
      set_jlandlord(from.jlandlord());
    }
    if (from.has_bombnum()) {
      set_bombnum(from.bombnum());
    }
    if (from.has_autoplayer()) {
      set_autoplayer(from.autoplayer());
    }
    if (from.has_timeouts()) {
      set_timeouts(from.timeouts());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_islandlord()) {
      set_islandlord(from.islandlord());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_pokersum()) {
      set_pokersum(from.pokersum());
    }
    if (from.has_lasttype()) {
      set_lasttype(from.lasttype());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_doublestate()) {
      set_doublestate(from.doublestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ddzuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddzuser::CopyFrom(const ddzuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddzuser::IsInitialized() const {

  return true;
}

void ddzuser::Swap(ddzuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(nickname_, other->nickname_);
    std::swap(face_1_, other->face_1_);
    std::swap(jifen_, other->jifen_);
    std::swap(chairid_, other->chairid_);
    handpoker_.Swap(&other->handpoker_);
    std::swap(playsum_, other->playsum_);
    std::swap(state_, other->state_);
    std::swap(mpoker_, other->mpoker_);
    std::swap(qlandlord_, other->qlandlord_);
    std::swap(jlandlord_, other->jlandlord_);
    std::swap(bombnum_, other->bombnum_);
    std::swap(autoplayer_, other->autoplayer_);
    std::swap(timeouts_, other->timeouts_);
    std::swap(winnum_, other->winnum_);
    std::swap(maxscore_, other->maxscore_);
    std::swap(islandlord_, other->islandlord_);
    std::swap(sex_, other->sex_);
    std::swap(pokersum_, other->pokersum_);
    std::swap(lasttype_, other->lasttype_);
    lastpokerlist_.Swap(&other->lastpokerlist_);
    std::swap(multiple_, other->multiple_);
    std::swap(doublestate_, other->doublestate_);
    allhandpoker_.Swap(&other->allhandpoker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ddzuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ddzuser_descriptor_;
  metadata.reflection = ddzuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ddzinfo::kTableidFieldNumber;
const int ddzinfo::kTabletypeFieldNumber;
const int ddzinfo::kDdztypeFieldNumber;
const int ddzinfo::kPourjettonFieldNumber;
const int ddzinfo::kMaxvipnumFieldNumber;
const int ddzinfo::kCapFieldNumber;
const int ddzinfo::kPaytypeFieldNumber;
const int ddzinfo::kPaywayFieldNumber;
const int ddzinfo::kPaynumFieldNumber;
const int ddzinfo::kOwneridFieldNumber;
const int ddzinfo::kJulebuidFieldNumber;
const int ddzinfo::kTablemarkFieldNumber;
const int ddzinfo::kTabletimeFieldNumber;
const int ddzinfo::kStateFieldNumber;
const int ddzinfo::kTimemarkFieldNumber;
const int ddzinfo::kLandlordidFieldNumber;
const int ddzinfo::kSituserFieldNumber;
const int ddzinfo::kStanduserFieldNumber;
const int ddzinfo::kLasInfoFieldNumber;
const int ddzinfo::kUsevipnumFieldNumber;
const int ddzinfo::kMultipleFieldNumber;
const int ddzinfo::kLandlordPokerFieldNumber;
const int ddzinfo::kWildCardFieldNumber;
const int ddzinfo::kDissolveinfoFieldNumber;
const int ddzinfo::kStractionFieldNumber;
const int ddzinfo::kMaxplaynumFieldNumber;
const int ddzinfo::kActionuserFieldNumber;
const int ddzinfo::kFrameidFieldNumber;
const int ddzinfo::kActionuseridFieldNumber;
const int ddzinfo::kIsnotplayFieldNumber;
const int ddzinfo::kQlandlordsumFieldNumber;
const int ddzinfo::kAfreshnumFieldNumber;
#endif  // !_MSC_VER

ddzinfo::ddzinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ddzinfo::InitAsDefaultInstance() {
  lasinfo_ = const_cast< ::progame::lasplayinfo*>(&::progame::lasplayinfo::default_instance());
}

ddzinfo::ddzinfo(const ddzinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ddzinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  ddztype_ = 0;
  pourjetton_ = 0;
  maxvipnum_ = 0;
  cap_ = 0;
  paytype_ = 0;
  payway_ = 0;
  paynum_ = 0;
  ownerid_ = 0;
  julebuid_ = 0;
  tablemark_ = 0;
  tabletime_ = 0;
  state_ = 0;
  timemark_ = 0;
  landlordid_ = 0;
  lasinfo_ = NULL;
  usevipnum_ = 0;
  multiple_ = 0;
  wildcard_ = 0;
  dissolveinfo_ = 0;
  straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxplaynum_ = 0;
  actionuser_ = 0;
  frameid_ = 0;
  actionuserid_ = 0;
  isnotplay_ = 0;
  qlandlordsum_ = 0;
  afreshnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ddzinfo::~ddzinfo() {
  SharedDtor();
}

void ddzinfo::SharedDtor() {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (this != default_instance_) {
    delete lasinfo_;
  }
}

void ddzinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ddzinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ddzinfo_descriptor_;
}

const ddzinfo& ddzinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

ddzinfo* ddzinfo::default_instance_ = NULL;

ddzinfo* ddzinfo::New() const {
  return new ddzinfo;
}

void ddzinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    ddztype_ = 0;
    pourjetton_ = 0;
    maxvipnum_ = 0;
    cap_ = 0;
    paytype_ = 0;
    payway_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    paynum_ = 0;
    ownerid_ = 0;
    julebuid_ = 0;
    tablemark_ = 0;
    tabletime_ = 0;
    state_ = 0;
    timemark_ = 0;
    landlordid_ = 0;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (has_lasinfo()) {
      if (lasinfo_ != NULL) lasinfo_->::progame::lasplayinfo::Clear();
    }
    usevipnum_ = 0;
    multiple_ = 0;
    wildcard_ = 0;
    dissolveinfo_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_straction()) {
      if (straction_ != &::google::protobuf::internal::kEmptyString) {
        straction_->clear();
      }
    }
    maxplaynum_ = 0;
    actionuser_ = 0;
    frameid_ = 0;
    actionuserid_ = 0;
    isnotplay_ = 0;
    qlandlordsum_ = 0;
    afreshnum_ = 0;
  }
  situser_.Clear();
  standuser_.Clear();
  landlordpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ddzinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ddztype;
        break;
      }

      // optional int32 ddztype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ddztype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ddztype_)));
          set_has_ddztype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pourjetton;
        break;
      }

      // optional int32 pourjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourjetton_)));
          set_has_pourjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxvipnum;
        break;
      }

      // optional int32 maxvipnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxvipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxvipnum_)));
          set_has_maxvipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cap;
        break;
      }

      // optional int32 cap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cap_)));
          set_has_cap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_paytype;
        break;
      }

      // optional int32 paytype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_payway;
        break;
      }

      // optional int32 payway = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payway_)));
          set_has_payway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_paynum;
        break;
      }

      // optional int32 paynum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paynum_)));
          set_has_paynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_julebuid;
        break;
      }

      // optional int32 julebuid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebuid_)));
          set_has_julebuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tabletime;
        break;
      }

      // optional int32 tabletime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletime_)));
          set_has_tabletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_state;
        break;
      }

      // optional int32 state = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_landlordid;
        break;
      }

      // optional int32 landlordid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landlordid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlordid_)));
          set_has_landlordid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_situser;
        break;
      }

      // repeated .progame.ddzuser situser = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_situser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_situser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_situser;
        if (input->ExpectTag(144)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_standuser;
        if (input->ExpectTag(154)) goto parse_lasInfo;
        break;
      }

      // optional .progame.lasplayinfo lasInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lasInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lasinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_usevipnum;
        break;
      }

      // optional int32 usevipnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usevipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usevipnum_)));
          set_has_usevipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_multiple;
        break;
      }

      // optional int32 multiple = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_landlordPoker;
        break;
      }

      // repeated int32 landlordPoker = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landlordPoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_landlordpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_landlordpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_landlordPoker;
        if (input->ExpectTag(184)) goto parse_wildCard;
        break;
      }

      // optional int32 wildCard = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wildCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wildcard_)));
          set_has_wildcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_dissolveinfo;
        break;
      }

      // optional int32 dissolveinfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolveinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolveinfo_)));
          set_has_dissolveinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_straction;
        break;
      }

      // optional string straction = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_straction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straction().data(), this->straction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_maxplaynum;
        break;
      }

      // optional int32 maxplaynum = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplaynum_)));
          set_has_maxplaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_actionuser;
        break;
      }

      // optional int32 actionuser = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionuser_)));
          set_has_actionuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_frameid;
        break;
      }

      // optional int32 frameid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_actionuserid;
        break;
      }

      // optional int32 actionuserid = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionuserid_)));
          set_has_actionuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_isnotplay;
        break;
      }

      // optional int32 isnotplay = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnotplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnotplay_)));
          set_has_isnotplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_qlandlordsum;
        break;
      }

      // optional int32 qlandlordsum = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qlandlordsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qlandlordsum_)));
          set_has_qlandlordsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_afreshnum;
        break;
      }

      // optional int32 afreshnum = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_afreshnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &afreshnum_)));
          set_has_afreshnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ddzinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 ddztype = 3;
  if (has_ddztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ddztype(), output);
  }

  // optional int32 pourjetton = 4;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pourjetton(), output);
  }

  // optional int32 maxvipnum = 5;
  if (has_maxvipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxvipnum(), output);
  }

  // optional int32 cap = 6;
  if (has_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cap(), output);
  }

  // optional int32 paytype = 7;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->paytype(), output);
  }

  // optional int32 payway = 8;
  if (has_payway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->payway(), output);
  }

  // optional int32 paynum = 9;
  if (has_paynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->paynum(), output);
  }

  // optional int32 ownerid = 10;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ownerid(), output);
  }

  // optional int32 julebuid = 11;
  if (has_julebuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->julebuid(), output);
  }

  // optional int32 tablemark = 12;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tablemark(), output);
  }

  // optional int32 tabletime = 13;
  if (has_tabletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tabletime(), output);
  }

  // optional int32 state = 14;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->state(), output);
  }

  // optional int32 timemark = 15;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->timemark(), output);
  }

  // optional int32 landlordid = 16;
  if (has_landlordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->landlordid(), output);
  }

  // repeated .progame.ddzuser situser = 17;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->situser(i), output);
  }

  // repeated int32 standuser = 18;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->standuser(i), output);
  }

  // optional .progame.lasplayinfo lasInfo = 19;
  if (has_lasinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->lasinfo(), output);
  }

  // optional int32 usevipnum = 20;
  if (has_usevipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->usevipnum(), output);
  }

  // optional int32 multiple = 21;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->multiple(), output);
  }

  // repeated int32 landlordPoker = 22;
  for (int i = 0; i < this->landlordpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->landlordpoker(i), output);
  }

  // optional int32 wildCard = 23;
  if (has_wildcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->wildcard(), output);
  }

  // optional int32 dissolveinfo = 24;
  if (has_dissolveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->dissolveinfo(), output);
  }

  // optional string straction = 25;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->straction(), output);
  }

  // optional int32 maxplaynum = 26;
  if (has_maxplaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->maxplaynum(), output);
  }

  // optional int32 actionuser = 27;
  if (has_actionuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->actionuser(), output);
  }

  // optional int32 frameid = 28;
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->frameid(), output);
  }

  // optional int32 actionuserid = 29;
  if (has_actionuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->actionuserid(), output);
  }

  // optional int32 isnotplay = 30;
  if (has_isnotplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->isnotplay(), output);
  }

  // optional int32 qlandlordsum = 31;
  if (has_qlandlordsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->qlandlordsum(), output);
  }

  // optional int32 afreshnum = 32;
  if (has_afreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->afreshnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ddzinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 ddztype = 3;
  if (has_ddztype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ddztype(), target);
  }

  // optional int32 pourjetton = 4;
  if (has_pourjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pourjetton(), target);
  }

  // optional int32 maxvipnum = 5;
  if (has_maxvipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxvipnum(), target);
  }

  // optional int32 cap = 6;
  if (has_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cap(), target);
  }

  // optional int32 paytype = 7;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->paytype(), target);
  }

  // optional int32 payway = 8;
  if (has_payway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->payway(), target);
  }

  // optional int32 paynum = 9;
  if (has_paynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->paynum(), target);
  }

  // optional int32 ownerid = 10;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ownerid(), target);
  }

  // optional int32 julebuid = 11;
  if (has_julebuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->julebuid(), target);
  }

  // optional int32 tablemark = 12;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tablemark(), target);
  }

  // optional int32 tabletime = 13;
  if (has_tabletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tabletime(), target);
  }

  // optional int32 state = 14;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->state(), target);
  }

  // optional int32 timemark = 15;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->timemark(), target);
  }

  // optional int32 landlordid = 16;
  if (has_landlordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->landlordid(), target);
  }

  // repeated .progame.ddzuser situser = 17;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->situser(i), target);
  }

  // repeated int32 standuser = 18;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->standuser(i), target);
  }

  // optional .progame.lasplayinfo lasInfo = 19;
  if (has_lasinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->lasinfo(), target);
  }

  // optional int32 usevipnum = 20;
  if (has_usevipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->usevipnum(), target);
  }

  // optional int32 multiple = 21;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->multiple(), target);
  }

  // repeated int32 landlordPoker = 22;
  for (int i = 0; i < this->landlordpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->landlordpoker(i), target);
  }

  // optional int32 wildCard = 23;
  if (has_wildcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->wildcard(), target);
  }

  // optional int32 dissolveinfo = 24;
  if (has_dissolveinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->dissolveinfo(), target);
  }

  // optional string straction = 25;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->straction(), target);
  }

  // optional int32 maxplaynum = 26;
  if (has_maxplaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->maxplaynum(), target);
  }

  // optional int32 actionuser = 27;
  if (has_actionuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->actionuser(), target);
  }

  // optional int32 frameid = 28;
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->frameid(), target);
  }

  // optional int32 actionuserid = 29;
  if (has_actionuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->actionuserid(), target);
  }

  // optional int32 isnotplay = 30;
  if (has_isnotplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->isnotplay(), target);
  }

  // optional int32 qlandlordsum = 31;
  if (has_qlandlordsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->qlandlordsum(), target);
  }

  // optional int32 afreshnum = 32;
  if (has_afreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->afreshnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ddzinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 ddztype = 3;
    if (has_ddztype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ddztype());
    }

    // optional int32 pourjetton = 4;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourjetton());
    }

    // optional int32 maxvipnum = 5;
    if (has_maxvipnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxvipnum());
    }

    // optional int32 cap = 6;
    if (has_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cap());
    }

    // optional int32 paytype = 7;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

    // optional int32 payway = 8;
    if (has_payway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payway());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 paynum = 9;
    if (has_paynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paynum());
    }

    // optional int32 ownerid = 10;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

    // optional int32 julebuid = 11;
    if (has_julebuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebuid());
    }

    // optional int32 tablemark = 12;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

    // optional int32 tabletime = 13;
    if (has_tabletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletime());
    }

    // optional int32 state = 14;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 15;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 landlordid = 16;
    if (has_landlordid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlordid());
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional .progame.lasplayinfo lasInfo = 19;
    if (has_lasinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lasinfo());
    }

    // optional int32 usevipnum = 20;
    if (has_usevipnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usevipnum());
    }

    // optional int32 multiple = 21;
    if (has_multiple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple());
    }

    // optional int32 wildCard = 23;
    if (has_wildcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wildcard());
    }

    // optional int32 dissolveinfo = 24;
    if (has_dissolveinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolveinfo());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string straction = 25;
    if (has_straction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straction());
    }

    // optional int32 maxplaynum = 26;
    if (has_maxplaynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplaynum());
    }

    // optional int32 actionuser = 27;
    if (has_actionuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionuser());
    }

    // optional int32 frameid = 28;
    if (has_frameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameid());
    }

    // optional int32 actionuserid = 29;
    if (has_actionuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionuserid());
    }

    // optional int32 isnotplay = 30;
    if (has_isnotplay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnotplay());
    }

    // optional int32 qlandlordsum = 31;
    if (has_qlandlordsum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qlandlordsum());
    }

    // optional int32 afreshnum = 32;
    if (has_afreshnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->afreshnum());
    }

  }
  // repeated .progame.ddzuser situser = 17;
  total_size += 2 * this->situser_size();
  for (int i = 0; i < this->situser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->situser(i));
  }

  // repeated int32 standuser = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 2 * this->standuser_size() + data_size;
  }

  // repeated int32 landlordPoker = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->landlordpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->landlordpoker(i));
    }
    total_size += 2 * this->landlordpoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ddzinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ddzinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ddzinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ddzinfo::MergeFrom(const ddzinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  landlordpoker_.MergeFrom(from.landlordpoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_ddztype()) {
      set_ddztype(from.ddztype());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
    if (from.has_maxvipnum()) {
      set_maxvipnum(from.maxvipnum());
    }
    if (from.has_cap()) {
      set_cap(from.cap());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_payway()) {
      set_payway(from.payway());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_paynum()) {
      set_paynum(from.paynum());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_julebuid()) {
      set_julebuid(from.julebuid());
    }
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
    if (from.has_tabletime()) {
      set_tabletime(from.tabletime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_landlordid()) {
      set_landlordid(from.landlordid());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_lasinfo()) {
      mutable_lasinfo()->::progame::lasplayinfo::MergeFrom(from.lasinfo());
    }
    if (from.has_usevipnum()) {
      set_usevipnum(from.usevipnum());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_wildcard()) {
      set_wildcard(from.wildcard());
    }
    if (from.has_dissolveinfo()) {
      set_dissolveinfo(from.dissolveinfo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_straction()) {
      set_straction(from.straction());
    }
    if (from.has_maxplaynum()) {
      set_maxplaynum(from.maxplaynum());
    }
    if (from.has_actionuser()) {
      set_actionuser(from.actionuser());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_actionuserid()) {
      set_actionuserid(from.actionuserid());
    }
    if (from.has_isnotplay()) {
      set_isnotplay(from.isnotplay());
    }
    if (from.has_qlandlordsum()) {
      set_qlandlordsum(from.qlandlordsum());
    }
    if (from.has_afreshnum()) {
      set_afreshnum(from.afreshnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ddzinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddzinfo::CopyFrom(const ddzinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddzinfo::IsInitialized() const {

  return true;
}

void ddzinfo::Swap(ddzinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(ddztype_, other->ddztype_);
    std::swap(pourjetton_, other->pourjetton_);
    std::swap(maxvipnum_, other->maxvipnum_);
    std::swap(cap_, other->cap_);
    std::swap(paytype_, other->paytype_);
    std::swap(payway_, other->payway_);
    std::swap(paynum_, other->paynum_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(julebuid_, other->julebuid_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(tabletime_, other->tabletime_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(landlordid_, other->landlordid_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(lasinfo_, other->lasinfo_);
    std::swap(usevipnum_, other->usevipnum_);
    std::swap(multiple_, other->multiple_);
    landlordpoker_.Swap(&other->landlordpoker_);
    std::swap(wildcard_, other->wildcard_);
    std::swap(dissolveinfo_, other->dissolveinfo_);
    std::swap(straction_, other->straction_);
    std::swap(maxplaynum_, other->maxplaynum_);
    std::swap(actionuser_, other->actionuser_);
    std::swap(frameid_, other->frameid_);
    std::swap(actionuserid_, other->actionuserid_);
    std::swap(isnotplay_, other->isnotplay_);
    std::swap(qlandlordsum_, other->qlandlordsum_);
    std::swap(afreshnum_, other->afreshnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ddzinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ddzinfo_descriptor_;
  metadata.reflection = ddzinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int multipleinfo::kMPokerFieldNumber;
const int multipleinfo::kQdzFieldNumber;
const int multipleinfo::kDzpFieldNumber;
const int multipleinfo::kBombFieldNumber;
const int multipleinfo::kSpringFieldNumber;
const int multipleinfo::kMultiplePublicFieldNumber;
const int multipleinfo::kLandlordmultipleFieldNumber;
const int multipleinfo::kPeasantmultipleFieldNumber;
const int multipleinfo::kSummultipleFieldNumber;
#endif  // !_MSC_VER

multipleinfo::multipleinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void multipleinfo::InitAsDefaultInstance() {
}

multipleinfo::multipleinfo(const multipleinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void multipleinfo::SharedCtor() {
  _cached_size_ = 0;
  mpoker_ = 0;
  qdz_ = 0;
  dzp_ = 0;
  bomb_ = 0;
  spring_ = 0;
  multiplepublic_ = 0;
  landlordmultiple_ = 0;
  peasantmultiple_ = 0;
  summultiple_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

multipleinfo::~multipleinfo() {
  SharedDtor();
}

void multipleinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void multipleinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* multipleinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return multipleinfo_descriptor_;
}

const multipleinfo& multipleinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

multipleinfo* multipleinfo::default_instance_ = NULL;

multipleinfo* multipleinfo::New() const {
  return new multipleinfo;
}

void multipleinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mpoker_ = 0;
    qdz_ = 0;
    dzp_ = 0;
    bomb_ = 0;
    spring_ = 0;
    multiplepublic_ = 0;
    landlordmultiple_ = 0;
    peasantmultiple_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    summultiple_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool multipleinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mPoker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpoker_)));
          set_has_mpoker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qdz;
        break;
      }

      // optional int32 qdz = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qdz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qdz_)));
          set_has_qdz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dzp;
        break;
      }

      // optional int32 dzp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dzp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dzp_)));
          set_has_dzp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bomb;
        break;
      }

      // optional int32 bomb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bomb_)));
          set_has_bomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_spring;
        break;
      }

      // optional int32 spring = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spring_)));
          set_has_spring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_multiplePublic;
        break;
      }

      // optional int32 multiplePublic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiplePublic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiplepublic_)));
          set_has_multiplepublic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_landlordmultiple;
        break;
      }

      // optional int32 landlordmultiple = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landlordmultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlordmultiple_)));
          set_has_landlordmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_peasantmultiple;
        break;
      }

      // optional int32 peasantmultiple = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peasantmultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peasantmultiple_)));
          set_has_peasantmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_summultiple;
        break;
      }

      // optional int32 summultiple = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &summultiple_)));
          set_has_summultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void multipleinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mPoker = 1;
  if (has_mpoker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mpoker(), output);
  }

  // optional int32 qdz = 2;
  if (has_qdz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->qdz(), output);
  }

  // optional int32 dzp = 3;
  if (has_dzp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dzp(), output);
  }

  // optional int32 bomb = 4;
  if (has_bomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bomb(), output);
  }

  // optional int32 spring = 5;
  if (has_spring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->spring(), output);
  }

  // optional int32 multiplePublic = 6;
  if (has_multiplepublic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->multiplepublic(), output);
  }

  // optional int32 landlordmultiple = 7;
  if (has_landlordmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->landlordmultiple(), output);
  }

  // optional int32 peasantmultiple = 8;
  if (has_peasantmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->peasantmultiple(), output);
  }

  // optional int32 summultiple = 9;
  if (has_summultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->summultiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* multipleinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mPoker = 1;
  if (has_mpoker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mpoker(), target);
  }

  // optional int32 qdz = 2;
  if (has_qdz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->qdz(), target);
  }

  // optional int32 dzp = 3;
  if (has_dzp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dzp(), target);
  }

  // optional int32 bomb = 4;
  if (has_bomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bomb(), target);
  }

  // optional int32 spring = 5;
  if (has_spring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->spring(), target);
  }

  // optional int32 multiplePublic = 6;
  if (has_multiplepublic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->multiplepublic(), target);
  }

  // optional int32 landlordmultiple = 7;
  if (has_landlordmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->landlordmultiple(), target);
  }

  // optional int32 peasantmultiple = 8;
  if (has_peasantmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->peasantmultiple(), target);
  }

  // optional int32 summultiple = 9;
  if (has_summultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->summultiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int multipleinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mPoker = 1;
    if (has_mpoker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpoker());
    }

    // optional int32 qdz = 2;
    if (has_qdz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qdz());
    }

    // optional int32 dzp = 3;
    if (has_dzp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dzp());
    }

    // optional int32 bomb = 4;
    if (has_bomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bomb());
    }

    // optional int32 spring = 5;
    if (has_spring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spring());
    }

    // optional int32 multiplePublic = 6;
    if (has_multiplepublic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiplepublic());
    }

    // optional int32 landlordmultiple = 7;
    if (has_landlordmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlordmultiple());
    }

    // optional int32 peasantmultiple = 8;
    if (has_peasantmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peasantmultiple());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 summultiple = 9;
    if (has_summultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->summultiple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void multipleinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const multipleinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const multipleinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void multipleinfo::MergeFrom(const multipleinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mpoker()) {
      set_mpoker(from.mpoker());
    }
    if (from.has_qdz()) {
      set_qdz(from.qdz());
    }
    if (from.has_dzp()) {
      set_dzp(from.dzp());
    }
    if (from.has_bomb()) {
      set_bomb(from.bomb());
    }
    if (from.has_spring()) {
      set_spring(from.spring());
    }
    if (from.has_multiplepublic()) {
      set_multiplepublic(from.multiplepublic());
    }
    if (from.has_landlordmultiple()) {
      set_landlordmultiple(from.landlordmultiple());
    }
    if (from.has_peasantmultiple()) {
      set_peasantmultiple(from.peasantmultiple());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_summultiple()) {
      set_summultiple(from.summultiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void multipleinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void multipleinfo::CopyFrom(const multipleinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool multipleinfo::IsInitialized() const {

  return true;
}

void multipleinfo::Swap(multipleinfo* other) {
  if (other != this) {
    std::swap(mpoker_, other->mpoker_);
    std::swap(qdz_, other->qdz_);
    std::swap(dzp_, other->dzp_);
    std::swap(bomb_, other->bomb_);
    std::swap(spring_, other->spring_);
    std::swap(multiplepublic_, other->multiplepublic_);
    std::swap(landlordmultiple_, other->landlordmultiple_);
    std::swap(peasantmultiple_, other->peasantmultiple_);
    std::swap(summultiple_, other->summultiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata multipleinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = multipleinfo_descriptor_;
  metadata.reflection = multipleinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int noad::kPokerAFieldNumber;
const int noad::kPoker2FieldNumber;
const int noad::kPoker3FieldNumber;
const int noad::kPoker4FieldNumber;
const int noad::kPoker5FieldNumber;
const int noad::kPoker6FieldNumber;
const int noad::kPoker7FieldNumber;
const int noad::kPoker8FieldNumber;
const int noad::kPoker9FieldNumber;
const int noad::kPoker10FieldNumber;
const int noad::kPokerJFieldNumber;
const int noad::kPokerQFieldNumber;
const int noad::kPokerKFieldNumber;
const int noad::kPokerKongFieldNumber;
#endif  // !_MSC_VER

noad::noad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void noad::InitAsDefaultInstance() {
}

noad::noad(const noad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void noad::SharedCtor() {
  _cached_size_ = 0;
  poker_a_ = 0;
  poker_2_ = 0;
  poker_3_ = 0;
  poker_4_ = 0;
  poker_5_ = 0;
  poker_6_ = 0;
  poker_7_ = 0;
  poker_8_ = 0;
  poker_9_ = 0;
  poker_10_ = 0;
  poker_j_ = 0;
  poker_q_ = 0;
  poker_k_ = 0;
  poker_kong_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

noad::~noad() {
  SharedDtor();
}

void noad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void noad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* noad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return noad_descriptor_;
}

const noad& noad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

noad* noad::default_instance_ = NULL;

noad* noad::New() const {
  return new noad;
}

void noad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poker_a_ = 0;
    poker_2_ = 0;
    poker_3_ = 0;
    poker_4_ = 0;
    poker_5_ = 0;
    poker_6_ = 0;
    poker_7_ = 0;
    poker_8_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    poker_9_ = 0;
    poker_10_ = 0;
    poker_j_ = 0;
    poker_q_ = 0;
    poker_k_ = 0;
    poker_kong_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool noad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 poker_A = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_a_)));
          set_has_poker_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_poker_2;
        break;
      }

      // optional int32 poker_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_2_)));
          set_has_poker_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_poker_3;
        break;
      }

      // optional int32 poker_3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_3_)));
          set_has_poker_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_poker_4;
        break;
      }

      // optional int32 poker_4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_4_)));
          set_has_poker_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_poker_5;
        break;
      }

      // optional int32 poker_5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_5_)));
          set_has_poker_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_poker_6;
        break;
      }

      // optional int32 poker_6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_6_)));
          set_has_poker_6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_poker_7;
        break;
      }

      // optional int32 poker_7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_7_)));
          set_has_poker_7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_poker_8;
        break;
      }

      // optional int32 poker_8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_8_)));
          set_has_poker_8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_poker_9;
        break;
      }

      // optional int32 poker_9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_9_)));
          set_has_poker_9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_poker_10;
        break;
      }

      // optional int32 poker_10 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_10_)));
          set_has_poker_10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_poker_J;
        break;
      }

      // optional int32 poker_J = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_J:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_j_)));
          set_has_poker_j();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_poker_Q;
        break;
      }

      // optional int32 poker_Q = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_Q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_q_)));
          set_has_poker_q();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_poker_K;
        break;
      }

      // optional int32 poker_K = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_K:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_k_)));
          set_has_poker_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_poker_Kong;
        break;
      }

      // optional int32 poker_Kong = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poker_Kong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poker_kong_)));
          set_has_poker_kong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void noad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 poker_A = 1;
  if (has_poker_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->poker_a(), output);
  }

  // optional int32 poker_2 = 2;
  if (has_poker_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->poker_2(), output);
  }

  // optional int32 poker_3 = 3;
  if (has_poker_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->poker_3(), output);
  }

  // optional int32 poker_4 = 4;
  if (has_poker_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->poker_4(), output);
  }

  // optional int32 poker_5 = 5;
  if (has_poker_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->poker_5(), output);
  }

  // optional int32 poker_6 = 6;
  if (has_poker_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->poker_6(), output);
  }

  // optional int32 poker_7 = 7;
  if (has_poker_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->poker_7(), output);
  }

  // optional int32 poker_8 = 8;
  if (has_poker_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->poker_8(), output);
  }

  // optional int32 poker_9 = 9;
  if (has_poker_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->poker_9(), output);
  }

  // optional int32 poker_10 = 10;
  if (has_poker_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->poker_10(), output);
  }

  // optional int32 poker_J = 11;
  if (has_poker_j()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->poker_j(), output);
  }

  // optional int32 poker_Q = 12;
  if (has_poker_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->poker_q(), output);
  }

  // optional int32 poker_K = 13;
  if (has_poker_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->poker_k(), output);
  }

  // optional int32 poker_Kong = 14;
  if (has_poker_kong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->poker_kong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* noad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 poker_A = 1;
  if (has_poker_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->poker_a(), target);
  }

  // optional int32 poker_2 = 2;
  if (has_poker_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->poker_2(), target);
  }

  // optional int32 poker_3 = 3;
  if (has_poker_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->poker_3(), target);
  }

  // optional int32 poker_4 = 4;
  if (has_poker_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->poker_4(), target);
  }

  // optional int32 poker_5 = 5;
  if (has_poker_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->poker_5(), target);
  }

  // optional int32 poker_6 = 6;
  if (has_poker_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->poker_6(), target);
  }

  // optional int32 poker_7 = 7;
  if (has_poker_7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->poker_7(), target);
  }

  // optional int32 poker_8 = 8;
  if (has_poker_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->poker_8(), target);
  }

  // optional int32 poker_9 = 9;
  if (has_poker_9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->poker_9(), target);
  }

  // optional int32 poker_10 = 10;
  if (has_poker_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->poker_10(), target);
  }

  // optional int32 poker_J = 11;
  if (has_poker_j()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->poker_j(), target);
  }

  // optional int32 poker_Q = 12;
  if (has_poker_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->poker_q(), target);
  }

  // optional int32 poker_K = 13;
  if (has_poker_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->poker_k(), target);
  }

  // optional int32 poker_Kong = 14;
  if (has_poker_kong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->poker_kong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int noad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 poker_A = 1;
    if (has_poker_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_a());
    }

    // optional int32 poker_2 = 2;
    if (has_poker_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_2());
    }

    // optional int32 poker_3 = 3;
    if (has_poker_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_3());
    }

    // optional int32 poker_4 = 4;
    if (has_poker_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_4());
    }

    // optional int32 poker_5 = 5;
    if (has_poker_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_5());
    }

    // optional int32 poker_6 = 6;
    if (has_poker_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_6());
    }

    // optional int32 poker_7 = 7;
    if (has_poker_7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_7());
    }

    // optional int32 poker_8 = 8;
    if (has_poker_8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_8());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 poker_9 = 9;
    if (has_poker_9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_9());
    }

    // optional int32 poker_10 = 10;
    if (has_poker_10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_10());
    }

    // optional int32 poker_J = 11;
    if (has_poker_j()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_j());
    }

    // optional int32 poker_Q = 12;
    if (has_poker_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_q());
    }

    // optional int32 poker_K = 13;
    if (has_poker_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_k());
    }

    // optional int32 poker_Kong = 14;
    if (has_poker_kong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poker_kong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void noad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const noad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const noad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void noad::MergeFrom(const noad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poker_a()) {
      set_poker_a(from.poker_a());
    }
    if (from.has_poker_2()) {
      set_poker_2(from.poker_2());
    }
    if (from.has_poker_3()) {
      set_poker_3(from.poker_3());
    }
    if (from.has_poker_4()) {
      set_poker_4(from.poker_4());
    }
    if (from.has_poker_5()) {
      set_poker_5(from.poker_5());
    }
    if (from.has_poker_6()) {
      set_poker_6(from.poker_6());
    }
    if (from.has_poker_7()) {
      set_poker_7(from.poker_7());
    }
    if (from.has_poker_8()) {
      set_poker_8(from.poker_8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_poker_9()) {
      set_poker_9(from.poker_9());
    }
    if (from.has_poker_10()) {
      set_poker_10(from.poker_10());
    }
    if (from.has_poker_j()) {
      set_poker_j(from.poker_j());
    }
    if (from.has_poker_q()) {
      set_poker_q(from.poker_q());
    }
    if (from.has_poker_k()) {
      set_poker_k(from.poker_k());
    }
    if (from.has_poker_kong()) {
      set_poker_kong(from.poker_kong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void noad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void noad::CopyFrom(const noad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool noad::IsInitialized() const {

  return true;
}

void noad::Swap(noad* other) {
  if (other != this) {
    std::swap(poker_a_, other->poker_a_);
    std::swap(poker_2_, other->poker_2_);
    std::swap(poker_3_, other->poker_3_);
    std::swap(poker_4_, other->poker_4_);
    std::swap(poker_5_, other->poker_5_);
    std::swap(poker_6_, other->poker_6_);
    std::swap(poker_7_, other->poker_7_);
    std::swap(poker_8_, other->poker_8_);
    std::swap(poker_9_, other->poker_9_);
    std::swap(poker_10_, other->poker_10_);
    std::swap(poker_j_, other->poker_j_);
    std::swap(poker_q_, other->poker_q_);
    std::swap(poker_k_, other->poker_k_);
    std::swap(poker_kong_, other->poker_kong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata noad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = noad_descriptor_;
  metadata.reflection = noad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ddzhistoryitem::kTableplayidFieldNumber;
const int ddzhistoryitem::kTableidFieldNumber;
const int ddzhistoryitem::kPlaytimeFieldNumber;
const int ddzhistoryitem::kPlaystateFieldNumber;
const int ddzhistoryitem::kUseridlistFieldNumber;
const int ddzhistoryitem::kNicklistFieldNumber;
const int ddzhistoryitem::kWinlistFieldNumber;
const int ddzhistoryitem::kQuitdesFieldNumber;
const int ddzhistoryitem::kUserdesFieldNumber;
#endif  // !_MSC_VER

ddzhistoryitem::ddzhistoryitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ddzhistoryitem::InitAsDefaultInstance() {
}

ddzhistoryitem::ddzhistoryitem(const ddzhistoryitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ddzhistoryitem::SharedCtor() {
  _cached_size_ = 0;
  tableplayid_ = 0;
  tableid_ = 0;
  playtime_ = 0;
  playstate_ = 0;
  quitdes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ddzhistoryitem::~ddzhistoryitem() {
  SharedDtor();
}

void ddzhistoryitem::SharedDtor() {
  if (quitdes_ != &::google::protobuf::internal::kEmptyString) {
    delete quitdes_;
  }
  if (this != default_instance_) {
  }
}

void ddzhistoryitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ddzhistoryitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ddzhistoryitem_descriptor_;
}

const ddzhistoryitem& ddzhistoryitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

ddzhistoryitem* ddzhistoryitem::default_instance_ = NULL;

ddzhistoryitem* ddzhistoryitem::New() const {
  return new ddzhistoryitem;
}

void ddzhistoryitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableplayid_ = 0;
    tableid_ = 0;
    playtime_ = 0;
    playstate_ = 0;
    if (has_quitdes()) {
      if (quitdes_ != &::google::protobuf::internal::kEmptyString) {
        quitdes_->clear();
      }
    }
  }
  useridlist_.Clear();
  nicklist_.Clear();
  winlist_.Clear();
  userdes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ddzhistoryitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableplayid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableplayid_)));
          set_has_tableplayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // optional int32 tableid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playtime;
        break;
      }

      // optional int32 playtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtime_)));
          set_has_playtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playstate;
        break;
      }

      // optional int32 playstate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playstate_)));
          set_has_playstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        if (input->ExpectTag(50)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nicklist;
        if (input->ExpectTag(56)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_winlist;
        if (input->ExpectTag(66)) goto parse_quitdes;
        break;
      }

      // optional string quitdes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quitdes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quitdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quitdes().data(), this->quitdes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userdes;
        break;
      }

      // repeated string userdes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userdes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userdes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userdes(this->userdes_size() - 1).data(),
            this->userdes(this->userdes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_userdes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ddzhistoryitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableplayid = 1;
  if (has_tableplayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableplayid(), output);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 playtime = 3;
  if (has_playtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playtime(), output);
  }

  // optional int32 playstate = 4;
  if (has_playstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playstate(), output);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->useridlist(i), output);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nicklist(i), output);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->winlist(i), output);
  }

  // optional string quitdes = 8;
  if (has_quitdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quitdes().data(), this->quitdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->quitdes(), output);
  }

  // repeated string userdes = 9;
  for (int i = 0; i < this->userdes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->userdes(i).data(), this->userdes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->userdes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ddzhistoryitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableplayid = 1;
  if (has_tableplayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableplayid(), target);
  }

  // optional int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 playtime = 3;
  if (has_playtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playtime(), target);
  }

  // optional int32 playstate = 4;
  if (has_playstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playstate(), target);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->useridlist(i), target);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->nicklist(i), target);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->winlist(i), target);
  }

  // optional string quitdes = 8;
  if (has_quitdes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quitdes().data(), this->quitdes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->quitdes(), target);
  }

  // repeated string userdes = 9;
  for (int i = 0; i < this->userdes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userdes(i).data(), this->userdes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->userdes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ddzhistoryitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableplayid = 1;
    if (has_tableplayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableplayid());
    }

    // optional int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 playtime = 3;
    if (has_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtime());
    }

    // optional int32 playstate = 4;
    if (has_playstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playstate());
    }

    // optional string quitdes = 8;
    if (has_quitdes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quitdes());
    }

  }
  // repeated int32 useridlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string nicklist = 6;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 winlist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated string userdes = 9;
  total_size += 1 * this->userdes_size();
  for (int i = 0; i < this->userdes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->userdes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ddzhistoryitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ddzhistoryitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ddzhistoryitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ddzhistoryitem::MergeFrom(const ddzhistoryitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  nicklist_.MergeFrom(from.nicklist_);
  winlist_.MergeFrom(from.winlist_);
  userdes_.MergeFrom(from.userdes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableplayid()) {
      set_tableplayid(from.tableplayid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_playtime()) {
      set_playtime(from.playtime());
    }
    if (from.has_playstate()) {
      set_playstate(from.playstate());
    }
    if (from.has_quitdes()) {
      set_quitdes(from.quitdes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ddzhistoryitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddzhistoryitem::CopyFrom(const ddzhistoryitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddzhistoryitem::IsInitialized() const {

  return true;
}

void ddzhistoryitem::Swap(ddzhistoryitem* other) {
  if (other != this) {
    std::swap(tableplayid_, other->tableplayid_);
    std::swap(tableid_, other->tableid_);
    std::swap(playtime_, other->playtime_);
    std::swap(playstate_, other->playstate_);
    useridlist_.Swap(&other->useridlist_);
    nicklist_.Swap(&other->nicklist_);
    winlist_.Swap(&other->winlist_);
    std::swap(quitdes_, other->quitdes_);
    userdes_.Swap(&other->userdes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ddzhistoryitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ddzhistoryitem_descriptor_;
  metadata.reflection = ddzhistoryitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ddzhistory::kTableidFieldNumber;
const int ddzhistory::kTablemarkFieldNumber;
const int ddzhistory::kGametimeFieldNumber;
const int ddzhistory::kPlaynumFieldNumber;
const int ddzhistory::kUseridlistFieldNumber;
const int ddzhistory::kNicklistFieldNumber;
const int ddzhistory::kWinlistFieldNumber;
const int ddzhistory::kHitemlistFieldNumber;
const int ddzhistory::kDdztypeFieldNumber;
#endif  // !_MSC_VER

ddzhistory::ddzhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ddzhistory::InitAsDefaultInstance() {
}

ddzhistory::ddzhistory(const ddzhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ddzhistory::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablemark_ = 0;
  gametime_ = 0;
  playnum_ = 0;
  ddztype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ddzhistory::~ddzhistory() {
  SharedDtor();
}

void ddzhistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ddzhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ddzhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ddzhistory_descriptor_;
}

const ddzhistory& ddzhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

ddzhistory* ddzhistory::default_instance_ = NULL;

ddzhistory* ddzhistory::New() const {
  return new ddzhistory;
}

void ddzhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tablemark_ = 0;
    gametime_ = 0;
    playnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ddztype_ = 0;
  }
  useridlist_.Clear();
  nicklist_.Clear();
  winlist_.Clear();
  hitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ddzhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gametime;
        break;
      }

      // optional int32 gametime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playnum;
        break;
      }

      // optional int32 playnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnum_)));
          set_has_playnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        if (input->ExpectTag(50)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nicklist;
        if (input->ExpectTag(56)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_winlist;
        if (input->ExpectTag(66)) goto parse_hitemlist;
        break;
      }

      // repeated .progame.ddzhistoryitem hitemlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hitemlist;
        if (input->ExpectTag(72)) goto parse_ddztype;
        break;
      }

      // optional int32 ddztype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ddztype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ddztype_)));
          set_has_ddztype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ddzhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tablemark(), output);
  }

  // optional int32 gametime = 3;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gametime(), output);
  }

  // optional int32 playnum = 4;
  if (has_playnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playnum(), output);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->useridlist(i), output);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nicklist(i), output);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->winlist(i), output);
  }

  // repeated .progame.ddzhistoryitem hitemlist = 8;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hitemlist(i), output);
  }

  // optional int32 ddztype = 9;
  if (has_ddztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ddztype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ddzhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tablemark(), target);
  }

  // optional int32 gametime = 3;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gametime(), target);
  }

  // optional int32 playnum = 4;
  if (has_playnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playnum(), target);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->useridlist(i), target);
  }

  // repeated string nicklist = 6;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->nicklist(i), target);
  }

  // repeated int32 winlist = 7;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->winlist(i), target);
  }

  // repeated .progame.ddzhistoryitem hitemlist = 8;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hitemlist(i), target);
  }

  // optional int32 ddztype = 9;
  if (has_ddztype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ddztype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ddzhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tablemark = 2;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

    // optional int32 gametime = 3;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

    // optional int32 playnum = 4;
    if (has_playnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ddztype = 9;
    if (has_ddztype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ddztype());
    }

  }
  // repeated int32 useridlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string nicklist = 6;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 winlist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated .progame.ddzhistoryitem hitemlist = 8;
  total_size += 1 * this->hitemlist_size();
  for (int i = 0; i < this->hitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ddzhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ddzhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ddzhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ddzhistory::MergeFrom(const ddzhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  nicklist_.MergeFrom(from.nicklist_);
  winlist_.MergeFrom(from.winlist_);
  hitemlist_.MergeFrom(from.hitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
    if (from.has_playnum()) {
      set_playnum(from.playnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ddztype()) {
      set_ddztype(from.ddztype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ddzhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddzhistory::CopyFrom(const ddzhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddzhistory::IsInitialized() const {

  return true;
}

void ddzhistory::Swap(ddzhistory* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(gametime_, other->gametime_);
    std::swap(playnum_, other->playnum_);
    useridlist_.Swap(&other->useridlist_);
    nicklist_.Swap(&other->nicklist_);
    winlist_.Swap(&other->winlist_);
    hitemlist_.Swap(&other->hitemlist_);
    std::swap(ddztype_, other->ddztype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ddzhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ddzhistory_descriptor_;
  metadata.reflection = ddzhistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ddzhistorypair::kPacketcodeFieldNumber;
const int ddzhistorypair::kPkginfoFieldNumber;
#endif  // !_MSC_VER

ddzhistorypair::ddzhistorypair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ddzhistorypair::InitAsDefaultInstance() {
}

ddzhistorypair::ddzhistorypair(const ddzhistorypair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ddzhistorypair::SharedCtor() {
  _cached_size_ = 0;
  packetcode_ = 0;
  pkginfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ddzhistorypair::~ddzhistorypair() {
  SharedDtor();
}

void ddzhistorypair::SharedDtor() {
  if (pkginfo_ != &::google::protobuf::internal::kEmptyString) {
    delete pkginfo_;
  }
  if (this != default_instance_) {
  }
}

void ddzhistorypair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ddzhistorypair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ddzhistorypair_descriptor_;
}

const ddzhistorypair& ddzhistorypair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

ddzhistorypair* ddzhistorypair::default_instance_ = NULL;

ddzhistorypair* ddzhistorypair::New() const {
  return new ddzhistorypair;
}

void ddzhistorypair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packetcode_ = 0;
    if (has_pkginfo()) {
      if (pkginfo_ != &::google::protobuf::internal::kEmptyString) {
        pkginfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ddzhistorypair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packetcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetcode_)));
          set_has_packetcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pkginfo;
        break;
      }

      // optional string pkginfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pkginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pkginfo().data(), this->pkginfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ddzhistorypair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 packetcode = 1;
  if (has_packetcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetcode(), output);
  }

  // optional string pkginfo = 2;
  if (has_pkginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkginfo().data(), this->pkginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pkginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ddzhistorypair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 packetcode = 1;
  if (has_packetcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetcode(), target);
  }

  // optional string pkginfo = 2;
  if (has_pkginfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pkginfo().data(), this->pkginfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pkginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ddzhistorypair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 packetcode = 1;
    if (has_packetcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetcode());
    }

    // optional string pkginfo = 2;
    if (has_pkginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pkginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ddzhistorypair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ddzhistorypair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ddzhistorypair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ddzhistorypair::MergeFrom(const ddzhistorypair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetcode()) {
      set_packetcode(from.packetcode());
    }
    if (from.has_pkginfo()) {
      set_pkginfo(from.pkginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ddzhistorypair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddzhistorypair::CopyFrom(const ddzhistorypair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddzhistorypair::IsInitialized() const {

  return true;
}

void ddzhistorypair::Swap(ddzhistorypair* other) {
  if (other != this) {
    std::swap(packetcode_, other->packetcode_);
    std::swap(pkginfo_, other->pkginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ddzhistorypair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ddzhistorypair_descriptor_;
  metadata.reflection = ddzhistorypair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ddztaganalyseresult::kOnecountFieldNumber;
const int ddztaganalyseresult::kTwocountFieldNumber;
const int ddztaganalyseresult::kThreecountFieldNumber;
const int ddztaganalyseresult::kFourcountFieldNumber;
const int ddztaganalyseresult::kOnelistFieldNumber;
const int ddztaganalyseresult::kTwolistFieldNumber;
const int ddztaganalyseresult::kThreelistFieldNumber;
const int ddztaganalyseresult::kFourlistFieldNumber;
const int ddztaganalyseresult::kOnecarddataFieldNumber;
const int ddztaganalyseresult::kTwocarddataFieldNumber;
const int ddztaganalyseresult::kThreecarddataFieldNumber;
const int ddztaganalyseresult::kFourcarddataFieldNumber;
#endif  // !_MSC_VER

ddztaganalyseresult::ddztaganalyseresult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ddztaganalyseresult::InitAsDefaultInstance() {
}

ddztaganalyseresult::ddztaganalyseresult(const ddztaganalyseresult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ddztaganalyseresult::SharedCtor() {
  _cached_size_ = 0;
  onecount_ = 0;
  twocount_ = 0;
  threecount_ = 0;
  fourcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ddztaganalyseresult::~ddztaganalyseresult() {
  SharedDtor();
}

void ddztaganalyseresult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ddztaganalyseresult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ddztaganalyseresult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ddztaganalyseresult_descriptor_;
}

const ddztaganalyseresult& ddztaganalyseresult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

ddztaganalyseresult* ddztaganalyseresult::default_instance_ = NULL;

ddztaganalyseresult* ddztaganalyseresult::New() const {
  return new ddztaganalyseresult;
}

void ddztaganalyseresult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onecount_ = 0;
    twocount_ = 0;
    threecount_ = 0;
    fourcount_ = 0;
  }
  onelist_.Clear();
  twolist_.Clear();
  threelist_.Clear();
  fourlist_.Clear();
  onecarddata_.Clear();
  twocarddata_.Clear();
  threecarddata_.Clear();
  fourcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ddztaganalyseresult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 onecount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onecount_)));
          set_has_onecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_twocount;
        break;
      }

      // optional int32 twocount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_twocount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &twocount_)));
          set_has_twocount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_threecount;
        break;
      }

      // optional int32 threecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threecount_)));
          set_has_threecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fourcount;
        break;
      }

      // optional int32 fourcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fourcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fourcount_)));
          set_has_fourcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_onelist;
        break;
      }

      // repeated int32 onelist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_onelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_onelist;
        if (input->ExpectTag(48)) goto parse_twolist;
        break;
      }

      // repeated int32 twolist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_twolist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_twolist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_twolist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_twolist;
        if (input->ExpectTag(56)) goto parse_threelist;
        break;
      }

      // repeated int32 threelist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_threelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_threelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_threelist;
        if (input->ExpectTag(64)) goto parse_fourlist;
        break;
      }

      // repeated int32 fourlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fourlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_fourlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fourlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fourlist;
        if (input->ExpectTag(72)) goto parse_onecarddata;
        break;
      }

      // repeated int32 onecarddata = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onecarddata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_onecarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onecarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_onecarddata;
        if (input->ExpectTag(80)) goto parse_twocarddata;
        break;
      }

      // repeated int32 twocarddata = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_twocarddata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_twocarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_twocarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_twocarddata;
        if (input->ExpectTag(88)) goto parse_threecarddata;
        break;
      }

      // repeated int32 threecarddata = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threecarddata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_threecarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_threecarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_threecarddata;
        if (input->ExpectTag(96)) goto parse_fourcarddata;
        break;
      }

      // repeated int32 fourcarddata = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fourcarddata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_fourcarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fourcarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fourcarddata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ddztaganalyseresult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 onecount = 1;
  if (has_onecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->onecount(), output);
  }

  // optional int32 twocount = 2;
  if (has_twocount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->twocount(), output);
  }

  // optional int32 threecount = 3;
  if (has_threecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->threecount(), output);
  }

  // optional int32 fourcount = 4;
  if (has_fourcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fourcount(), output);
  }

  // repeated int32 onelist = 5;
  for (int i = 0; i < this->onelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->onelist(i), output);
  }

  // repeated int32 twolist = 6;
  for (int i = 0; i < this->twolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->twolist(i), output);
  }

  // repeated int32 threelist = 7;
  for (int i = 0; i < this->threelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->threelist(i), output);
  }

  // repeated int32 fourlist = 8;
  for (int i = 0; i < this->fourlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->fourlist(i), output);
  }

  // repeated int32 onecarddata = 9;
  for (int i = 0; i < this->onecarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->onecarddata(i), output);
  }

  // repeated int32 twocarddata = 10;
  for (int i = 0; i < this->twocarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->twocarddata(i), output);
  }

  // repeated int32 threecarddata = 11;
  for (int i = 0; i < this->threecarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->threecarddata(i), output);
  }

  // repeated int32 fourcarddata = 12;
  for (int i = 0; i < this->fourcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->fourcarddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ddztaganalyseresult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 onecount = 1;
  if (has_onecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->onecount(), target);
  }

  // optional int32 twocount = 2;
  if (has_twocount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->twocount(), target);
  }

  // optional int32 threecount = 3;
  if (has_threecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->threecount(), target);
  }

  // optional int32 fourcount = 4;
  if (has_fourcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fourcount(), target);
  }

  // repeated int32 onelist = 5;
  for (int i = 0; i < this->onelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->onelist(i), target);
  }

  // repeated int32 twolist = 6;
  for (int i = 0; i < this->twolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->twolist(i), target);
  }

  // repeated int32 threelist = 7;
  for (int i = 0; i < this->threelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->threelist(i), target);
  }

  // repeated int32 fourlist = 8;
  for (int i = 0; i < this->fourlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->fourlist(i), target);
  }

  // repeated int32 onecarddata = 9;
  for (int i = 0; i < this->onecarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->onecarddata(i), target);
  }

  // repeated int32 twocarddata = 10;
  for (int i = 0; i < this->twocarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->twocarddata(i), target);
  }

  // repeated int32 threecarddata = 11;
  for (int i = 0; i < this->threecarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->threecarddata(i), target);
  }

  // repeated int32 fourcarddata = 12;
  for (int i = 0; i < this->fourcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->fourcarddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ddztaganalyseresult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 onecount = 1;
    if (has_onecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onecount());
    }

    // optional int32 twocount = 2;
    if (has_twocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->twocount());
    }

    // optional int32 threecount = 3;
    if (has_threecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threecount());
    }

    // optional int32 fourcount = 4;
    if (has_fourcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fourcount());
    }

  }
  // repeated int32 onelist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->onelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->onelist(i));
    }
    total_size += 1 * this->onelist_size() + data_size;
  }

  // repeated int32 twolist = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->twolist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->twolist(i));
    }
    total_size += 1 * this->twolist_size() + data_size;
  }

  // repeated int32 threelist = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->threelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->threelist(i));
    }
    total_size += 1 * this->threelist_size() + data_size;
  }

  // repeated int32 fourlist = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->fourlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fourlist(i));
    }
    total_size += 1 * this->fourlist_size() + data_size;
  }

  // repeated int32 onecarddata = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->onecarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->onecarddata(i));
    }
    total_size += 1 * this->onecarddata_size() + data_size;
  }

  // repeated int32 twocarddata = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->twocarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->twocarddata(i));
    }
    total_size += 1 * this->twocarddata_size() + data_size;
  }

  // repeated int32 threecarddata = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->threecarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->threecarddata(i));
    }
    total_size += 1 * this->threecarddata_size() + data_size;
  }

  // repeated int32 fourcarddata = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->fourcarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fourcarddata(i));
    }
    total_size += 1 * this->fourcarddata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ddztaganalyseresult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ddztaganalyseresult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ddztaganalyseresult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ddztaganalyseresult::MergeFrom(const ddztaganalyseresult& from) {
  GOOGLE_CHECK_NE(&from, this);
  onelist_.MergeFrom(from.onelist_);
  twolist_.MergeFrom(from.twolist_);
  threelist_.MergeFrom(from.threelist_);
  fourlist_.MergeFrom(from.fourlist_);
  onecarddata_.MergeFrom(from.onecarddata_);
  twocarddata_.MergeFrom(from.twocarddata_);
  threecarddata_.MergeFrom(from.threecarddata_);
  fourcarddata_.MergeFrom(from.fourcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onecount()) {
      set_onecount(from.onecount());
    }
    if (from.has_twocount()) {
      set_twocount(from.twocount());
    }
    if (from.has_threecount()) {
      set_threecount(from.threecount());
    }
    if (from.has_fourcount()) {
      set_fourcount(from.fourcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ddztaganalyseresult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddztaganalyseresult::CopyFrom(const ddztaganalyseresult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddztaganalyseresult::IsInitialized() const {

  return true;
}

void ddztaganalyseresult::Swap(ddztaganalyseresult* other) {
  if (other != this) {
    std::swap(onecount_, other->onecount_);
    std::swap(twocount_, other->twocount_);
    std::swap(threecount_, other->threecount_);
    std::swap(fourcount_, other->fourcount_);
    onelist_.Swap(&other->onelist_);
    twolist_.Swap(&other->twolist_);
    threelist_.Swap(&other->threelist_);
    fourlist_.Swap(&other->fourlist_);
    onecarddata_.Swap(&other->onecarddata_);
    twocarddata_.Swap(&other->twocarddata_);
    threecarddata_.Swap(&other->threecarddata_);
    fourcarddata_.Swap(&other->fourcarddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ddztaganalyseresult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ddztaganalyseresult_descriptor_;
  metadata.reflection = ddztaganalyseresult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ddzpokerlist::kCardFieldNumber;
#endif  // !_MSC_VER

ddzpokerlist::ddzpokerlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ddzpokerlist::InitAsDefaultInstance() {
}

ddzpokerlist::ddzpokerlist(const ddzpokerlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ddzpokerlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ddzpokerlist::~ddzpokerlist() {
  SharedDtor();
}

void ddzpokerlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ddzpokerlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ddzpokerlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ddzpokerlist_descriptor_;
}

const ddzpokerlist& ddzpokerlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fddz_2eproto();
  return *default_instance_;
}

ddzpokerlist* ddzpokerlist::default_instance_ = NULL;

ddzpokerlist* ddzpokerlist::New() const {
  return new ddzpokerlist;
}

void ddzpokerlist::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ddzpokerlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ddzpokerlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ddzpokerlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ddzpokerlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ddzpokerlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ddzpokerlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ddzpokerlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ddzpokerlist::MergeFrom(const ddzpokerlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ddzpokerlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddzpokerlist::CopyFrom(const ddzpokerlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddzpokerlist::IsInitialized() const {

  return true;
}

void ddzpokerlist::Swap(ddzpokerlist* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ddzpokerlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ddzpokerlist_descriptor_;
  metadata.reflection = ddzpokerlist_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
