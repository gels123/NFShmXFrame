// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_slhb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_slhb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* hongbao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hongbao_reflection_ = NULL;
const ::google::protobuf::Descriptor* robhb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  robhb_reflection_ = NULL;
const ::google::protobuf::Descriptor* slhbinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  slhbinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* slhbjettonrecordlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  slhbjettonrecordlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* slhbjettonrecorinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  slhbjettonrecorinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fslhb_2eproto() {
  protobuf_AddDesc_st_5fslhb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_slhb.proto");
  GOOGLE_CHECK(file != NULL);
  hongbao_descriptor_ = file->message_type(0);
  static const int hongbao_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hongbao, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hongbao, hbjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hongbao, hbbomb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hongbao, unickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hongbao, nfaceid_),
  };
  hongbao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hongbao_descriptor_,
      hongbao::default_instance_,
      hongbao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hongbao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hongbao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hongbao));
  robhb_descriptor_ = file->message_type(1);
  static const int robhb_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, unickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, nfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, hbjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, isbomb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, winjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, number_),
  };
  robhb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      robhb_descriptor_,
      robhb::default_instance_,
      robhb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robhb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(robhb));
  slhbinfo_descriptor_ = file->message_type(2);
  static const int slhbinfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hbuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hbnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hbfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hbjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hbnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hbbomb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hblist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, robhblist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, maxrobotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, issyswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, hbjettonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, robotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, maxhbnum_),
  };
  slhbinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      slhbinfo_descriptor_,
      slhbinfo::default_instance_,
      slhbinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(slhbinfo));
  slhbjettonrecordlist_descriptor_ = file->message_type(3);
  static const int slhbjettonrecordlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecordlist, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecordlist, boomcondition_),
  };
  slhbjettonrecordlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      slhbjettonrecordlist_descriptor_,
      slhbjettonrecordlist::default_instance_,
      slhbjettonrecordlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecordlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecordlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(slhbjettonrecordlist));
  slhbjettonrecorinfo_descriptor_ = file->message_type(4);
  static const int slhbjettonrecorinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, boomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, facename_),
  };
  slhbjettonrecorinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      slhbjettonrecorinfo_descriptor_,
      slhbjettonrecorinfo::default_instance_,
      slhbjettonrecorinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(slhbjettonrecorinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(slhbjettonrecorinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fslhb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hongbao_descriptor_, &hongbao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    robhb_descriptor_, &robhb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    slhbinfo_descriptor_, &slhbinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    slhbjettonrecordlist_descriptor_, &slhbjettonrecordlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    slhbjettonrecorinfo_descriptor_, &slhbjettonrecorinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fslhb_2eproto() {
  delete hongbao::default_instance_;
  delete hongbao_reflection_;
  delete robhb::default_instance_;
  delete robhb_reflection_;
  delete slhbinfo::default_instance_;
  delete slhbinfo_reflection_;
  delete slhbjettonrecordlist::default_instance_;
  delete slhbjettonrecordlist_reflection_;
  delete slhbjettonrecorinfo::default_instance_;
  delete slhbjettonrecorinfo_reflection_;
}

void protobuf_AddDesc_st_5fslhb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_slhb.proto\022\007progame\032\016st_human.proto"
    "\"_\n\007hongbao\022\016\n\006userid\030\001 \001(\005\022\020\n\010hbjetton\030"
    "\002 \001(\005\022\016\n\006hbbomb\030\003 \001(\005\022\021\n\tunickname\030\004 \001(\t"
    "\022\017\n\007nfaceid\030\005 \001(\t\"\200\001\n\005robhb\022\016\n\006userid\030\001 "
    "\001(\005\022\021\n\tunickname\030\002 \001(\t\022\017\n\007nfaceid\030\003 \001(\t\022"
    "\020\n\010hbjetton\030\004 \001(\005\022\016\n\006isbomb\030\005 \001(\005\022\021\n\twin"
    "jetton\030\006 \001(\005\022\016\n\006number\030\007 \001(\005\"\202\003\n\010slhbinf"
    "o\022\017\n\007tableid\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\022\020\n\010tim"
    "emark\030\003 \001(\005\022\021\n\ttabletype\030\004 \001(\005\022\020\n\010hbuser"
    "id\030\005 \001(\005\022\022\n\nhbnickname\030\006 \001(\t\022\020\n\010hbfaceid"
    "\030\007 \001(\t\022\020\n\010hbjetton\030\010 \001(\005\022\r\n\005hbnum\030\t \001(\005\022"
    "\016\n\006hbbomb\030\n \001(\005\022 \n\006hblist\030\013 \003(\0132\020.progam"
    "e.hongbao\022!\n\trobhblist\030\014 \003(\0132\016.progame.r"
    "obhb\022\021\n\tstanduser\030\r \003(\005\022\023\n\013maxrobotnum\030\016"
    " \001(\005\022\020\n\010issyswin\030\017 \001(\005\022\024\n\014hbjettonlist\030\020"
    " \003(\005\022\017\n\007usernum\030\021 \001(\005\022\020\n\010robotnum\030\022 \001(\005\022"
    "\020\n\010maxhbnum\030\023 \001(\005\"=\n\024slhbjettonrecordlis"
    "t\022\016\n\006jetton\030\001 \003(\005\022\025\n\rboomcondition\030\002 \003(\005"
    "\"y\n\023slhbjettonrecorinfo\022\016\n\006userid\030\001 \001(\005\022"
    "\016\n\006jetton\030\002 \001(\005\022\017\n\007boomnum\030\003 \001(\005\022\r\n\005jife"
    "n\030\004 \001(\t\022\020\n\010nickname\030\005 \001(\t\022\020\n\010facename\030\006 "
    "\001(\t", 843);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_slhb.proto", &protobuf_RegisterTypes);
  hongbao::default_instance_ = new hongbao();
  robhb::default_instance_ = new robhb();
  slhbinfo::default_instance_ = new slhbinfo();
  slhbjettonrecordlist::default_instance_ = new slhbjettonrecordlist();
  slhbjettonrecorinfo::default_instance_ = new slhbjettonrecorinfo();
  hongbao::default_instance_->InitAsDefaultInstance();
  robhb::default_instance_->InitAsDefaultInstance();
  slhbinfo::default_instance_->InitAsDefaultInstance();
  slhbjettonrecordlist::default_instance_->InitAsDefaultInstance();
  slhbjettonrecorinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fslhb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fslhb_2eproto {
  StaticDescriptorInitializer_st_5fslhb_2eproto() {
    protobuf_AddDesc_st_5fslhb_2eproto();
  }
} static_descriptor_initializer_st_5fslhb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int hongbao::kUseridFieldNumber;
const int hongbao::kHbjettonFieldNumber;
const int hongbao::kHbbombFieldNumber;
const int hongbao::kUnicknameFieldNumber;
const int hongbao::kNfaceidFieldNumber;
#endif  // !_MSC_VER

hongbao::hongbao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hongbao::InitAsDefaultInstance() {
}

hongbao::hongbao(const hongbao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hongbao::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  hbjetton_ = 0;
  hbbomb_ = 0;
  unickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hongbao::~hongbao() {
  SharedDtor();
}

void hongbao::SharedDtor() {
  if (unickname_ != &::google::protobuf::internal::kEmptyString) {
    delete unickname_;
  }
  if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete nfaceid_;
  }
  if (this != default_instance_) {
  }
}

void hongbao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hongbao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hongbao_descriptor_;
}

const hongbao& hongbao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslhb_2eproto();
  return *default_instance_;
}

hongbao* hongbao::default_instance_ = NULL;

hongbao* hongbao::New() const {
  return new hongbao;
}

void hongbao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    hbjetton_ = 0;
    hbbomb_ = 0;
    if (has_unickname()) {
      if (unickname_ != &::google::protobuf::internal::kEmptyString) {
        unickname_->clear();
      }
    }
    if (has_nfaceid()) {
      if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
        nfaceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hongbao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hbjetton;
        break;
      }

      // optional int32 hbjetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hbjetton_)));
          set_has_hbjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hbbomb;
        break;
      }

      // optional int32 hbbomb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbbomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hbbomb_)));
          set_has_hbbomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unickname;
        break;
      }

      // optional string unickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unickname().data(), this->unickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nfaceid;
        break;
      }

      // optional string nfaceid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nfaceid().data(), this->nfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hongbao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 hbjetton = 2;
  if (has_hbjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hbjetton(), output);
  }

  // optional int32 hbbomb = 3;
  if (has_hbbomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hbbomb(), output);
  }

  // optional string unickname = 4;
  if (has_unickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unickname().data(), this->unickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unickname(), output);
  }

  // optional string nfaceid = 5;
  if (has_nfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nfaceid().data(), this->nfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nfaceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hongbao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 hbjetton = 2;
  if (has_hbjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hbjetton(), target);
  }

  // optional int32 hbbomb = 3;
  if (has_hbbomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hbbomb(), target);
  }

  // optional string unickname = 4;
  if (has_unickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unickname().data(), this->unickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unickname(), target);
  }

  // optional string nfaceid = 5;
  if (has_nfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nfaceid().data(), this->nfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nfaceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hongbao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 hbjetton = 2;
    if (has_hbjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hbjetton());
    }

    // optional int32 hbbomb = 3;
    if (has_hbbomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hbbomb());
    }

    // optional string unickname = 4;
    if (has_unickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unickname());
    }

    // optional string nfaceid = 5;
    if (has_nfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nfaceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hongbao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hongbao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hongbao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hongbao::MergeFrom(const hongbao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_hbjetton()) {
      set_hbjetton(from.hbjetton());
    }
    if (from.has_hbbomb()) {
      set_hbbomb(from.hbbomb());
    }
    if (from.has_unickname()) {
      set_unickname(from.unickname());
    }
    if (from.has_nfaceid()) {
      set_nfaceid(from.nfaceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hongbao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hongbao::CopyFrom(const hongbao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hongbao::IsInitialized() const {

  return true;
}

void hongbao::Swap(hongbao* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(hbjetton_, other->hbjetton_);
    std::swap(hbbomb_, other->hbbomb_);
    std::swap(unickname_, other->unickname_);
    std::swap(nfaceid_, other->nfaceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hongbao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hongbao_descriptor_;
  metadata.reflection = hongbao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int robhb::kUseridFieldNumber;
const int robhb::kUnicknameFieldNumber;
const int robhb::kNfaceidFieldNumber;
const int robhb::kHbjettonFieldNumber;
const int robhb::kIsbombFieldNumber;
const int robhb::kWinjettonFieldNumber;
const int robhb::kNumberFieldNumber;
#endif  // !_MSC_VER

robhb::robhb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void robhb::InitAsDefaultInstance() {
}

robhb::robhb(const robhb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void robhb::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  unickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hbjetton_ = 0;
  isbomb_ = 0;
  winjetton_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

robhb::~robhb() {
  SharedDtor();
}

void robhb::SharedDtor() {
  if (unickname_ != &::google::protobuf::internal::kEmptyString) {
    delete unickname_;
  }
  if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete nfaceid_;
  }
  if (this != default_instance_) {
  }
}

void robhb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* robhb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return robhb_descriptor_;
}

const robhb& robhb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslhb_2eproto();
  return *default_instance_;
}

robhb* robhb::default_instance_ = NULL;

robhb* robhb::New() const {
  return new robhb;
}

void robhb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_unickname()) {
      if (unickname_ != &::google::protobuf::internal::kEmptyString) {
        unickname_->clear();
      }
    }
    if (has_nfaceid()) {
      if (nfaceid_ != &::google::protobuf::internal::kEmptyString) {
        nfaceid_->clear();
      }
    }
    hbjetton_ = 0;
    isbomb_ = 0;
    winjetton_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool robhb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unickname;
        break;
      }

      // optional string unickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unickname().data(), this->unickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nfaceid;
        break;
      }

      // optional string nfaceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nfaceid().data(), this->nfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hbjetton;
        break;
      }

      // optional int32 hbjetton = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hbjetton_)));
          set_has_hbjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isbomb;
        break;
      }

      // optional int32 isbomb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbomb_)));
          set_has_isbomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winjetton;
        break;
      }

      // optional int32 winjetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winjetton_)));
          set_has_winjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_number;
        break;
      }

      // optional int32 number = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void robhb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional string unickname = 2;
  if (has_unickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unickname().data(), this->unickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unickname(), output);
  }

  // optional string nfaceid = 3;
  if (has_nfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nfaceid().data(), this->nfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nfaceid(), output);
  }

  // optional int32 hbjetton = 4;
  if (has_hbjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hbjetton(), output);
  }

  // optional int32 isbomb = 5;
  if (has_isbomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isbomb(), output);
  }

  // optional int32 winjetton = 6;
  if (has_winjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winjetton(), output);
  }

  // optional int32 number = 7;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* robhb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional string unickname = 2;
  if (has_unickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unickname().data(), this->unickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unickname(), target);
  }

  // optional string nfaceid = 3;
  if (has_nfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nfaceid().data(), this->nfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nfaceid(), target);
  }

  // optional int32 hbjetton = 4;
  if (has_hbjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hbjetton(), target);
  }

  // optional int32 isbomb = 5;
  if (has_isbomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isbomb(), target);
  }

  // optional int32 winjetton = 6;
  if (has_winjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winjetton(), target);
  }

  // optional int32 number = 7;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int robhb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional string unickname = 2;
    if (has_unickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unickname());
    }

    // optional string nfaceid = 3;
    if (has_nfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nfaceid());
    }

    // optional int32 hbjetton = 4;
    if (has_hbjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hbjetton());
    }

    // optional int32 isbomb = 5;
    if (has_isbomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbomb());
    }

    // optional int32 winjetton = 6;
    if (has_winjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winjetton());
    }

    // optional int32 number = 7;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void robhb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const robhb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const robhb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void robhb::MergeFrom(const robhb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_unickname()) {
      set_unickname(from.unickname());
    }
    if (from.has_nfaceid()) {
      set_nfaceid(from.nfaceid());
    }
    if (from.has_hbjetton()) {
      set_hbjetton(from.hbjetton());
    }
    if (from.has_isbomb()) {
      set_isbomb(from.isbomb());
    }
    if (from.has_winjetton()) {
      set_winjetton(from.winjetton());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void robhb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void robhb::CopyFrom(const robhb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool robhb::IsInitialized() const {

  return true;
}

void robhb::Swap(robhb* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(unickname_, other->unickname_);
    std::swap(nfaceid_, other->nfaceid_);
    std::swap(hbjetton_, other->hbjetton_);
    std::swap(isbomb_, other->isbomb_);
    std::swap(winjetton_, other->winjetton_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata robhb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = robhb_descriptor_;
  metadata.reflection = robhb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int slhbinfo::kTableidFieldNumber;
const int slhbinfo::kStateFieldNumber;
const int slhbinfo::kTimemarkFieldNumber;
const int slhbinfo::kTabletypeFieldNumber;
const int slhbinfo::kHbuseridFieldNumber;
const int slhbinfo::kHbnicknameFieldNumber;
const int slhbinfo::kHbfaceidFieldNumber;
const int slhbinfo::kHbjettonFieldNumber;
const int slhbinfo::kHbnumFieldNumber;
const int slhbinfo::kHbbombFieldNumber;
const int slhbinfo::kHblistFieldNumber;
const int slhbinfo::kRobhblistFieldNumber;
const int slhbinfo::kStanduserFieldNumber;
const int slhbinfo::kMaxrobotnumFieldNumber;
const int slhbinfo::kIssyswinFieldNumber;
const int slhbinfo::kHbjettonlistFieldNumber;
const int slhbinfo::kUsernumFieldNumber;
const int slhbinfo::kRobotnumFieldNumber;
const int slhbinfo::kMaxhbnumFieldNumber;
#endif  // !_MSC_VER

slhbinfo::slhbinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void slhbinfo::InitAsDefaultInstance() {
}

slhbinfo::slhbinfo(const slhbinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void slhbinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  state_ = 0;
  timemark_ = 0;
  tabletype_ = 0;
  hbuserid_ = 0;
  hbnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hbfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hbjetton_ = 0;
  hbnum_ = 0;
  hbbomb_ = 0;
  maxrobotnum_ = 0;
  issyswin_ = 0;
  usernum_ = 0;
  robotnum_ = 0;
  maxhbnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

slhbinfo::~slhbinfo() {
  SharedDtor();
}

void slhbinfo::SharedDtor() {
  if (hbnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete hbnickname_;
  }
  if (hbfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete hbfaceid_;
  }
  if (this != default_instance_) {
  }
}

void slhbinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* slhbinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return slhbinfo_descriptor_;
}

const slhbinfo& slhbinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslhb_2eproto();
  return *default_instance_;
}

slhbinfo* slhbinfo::default_instance_ = NULL;

slhbinfo* slhbinfo::New() const {
  return new slhbinfo;
}

void slhbinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    state_ = 0;
    timemark_ = 0;
    tabletype_ = 0;
    hbuserid_ = 0;
    if (has_hbnickname()) {
      if (hbnickname_ != &::google::protobuf::internal::kEmptyString) {
        hbnickname_->clear();
      }
    }
    if (has_hbfaceid()) {
      if (hbfaceid_ != &::google::protobuf::internal::kEmptyString) {
        hbfaceid_->clear();
      }
    }
    hbjetton_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hbnum_ = 0;
    hbbomb_ = 0;
    maxrobotnum_ = 0;
    issyswin_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    usernum_ = 0;
    robotnum_ = 0;
    maxhbnum_ = 0;
  }
  hblist_.Clear();
  robhblist_.Clear();
  standuser_.Clear();
  hbjettonlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool slhbinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hbuserid;
        break;
      }

      // optional int32 hbuserid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hbuserid_)));
          set_has_hbuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hbnickname;
        break;
      }

      // optional string hbnickname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hbnickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hbnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hbnickname().data(), this->hbnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hbfaceid;
        break;
      }

      // optional string hbfaceid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hbfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hbfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hbfaceid().data(), this->hbfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hbjetton;
        break;
      }

      // optional int32 hbjetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hbjetton_)));
          set_has_hbjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hbnum;
        break;
      }

      // optional int32 hbnum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hbnum_)));
          set_has_hbnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hbbomb;
        break;
      }

      // optional int32 hbbomb = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbbomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hbbomb_)));
          set_has_hbbomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hblist;
        break;
      }

      // repeated .progame.hongbao hblist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hblist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hblist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hblist;
        if (input->ExpectTag(98)) goto parse_robhblist;
        break;
      }

      // repeated .progame.robhb robhblist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robhblist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robhblist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_robhblist;
        if (input->ExpectTag(104)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_standuser;
        if (input->ExpectTag(112)) goto parse_maxrobotnum;
        break;
      }

      // optional int32 maxrobotnum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrobotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrobotnum_)));
          set_has_maxrobotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_issyswin;
        break;
      }

      // optional int32 issyswin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issyswin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issyswin_)));
          set_has_issyswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hbjettonlist;
        break;
      }

      // repeated int32 hbjettonlist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hbjettonlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_hbjettonlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hbjettonlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hbjettonlist;
        if (input->ExpectTag(136)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_robotnum;
        break;
      }

      // optional int32 robotnum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotnum_)));
          set_has_robotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_maxhbnum;
        break;
      }

      // optional int32 maxhbnum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhbnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhbnum_)));
          set_has_maxhbnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void slhbinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 timemark = 3;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timemark(), output);
  }

  // optional int32 tabletype = 4;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tabletype(), output);
  }

  // optional int32 hbuserid = 5;
  if (has_hbuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hbuserid(), output);
  }

  // optional string hbnickname = 6;
  if (has_hbnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hbnickname().data(), this->hbnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->hbnickname(), output);
  }

  // optional string hbfaceid = 7;
  if (has_hbfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hbfaceid().data(), this->hbfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->hbfaceid(), output);
  }

  // optional int32 hbjetton = 8;
  if (has_hbjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hbjetton(), output);
  }

  // optional int32 hbnum = 9;
  if (has_hbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hbnum(), output);
  }

  // optional int32 hbbomb = 10;
  if (has_hbbomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hbbomb(), output);
  }

  // repeated .progame.hongbao hblist = 11;
  for (int i = 0; i < this->hblist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hblist(i), output);
  }

  // repeated .progame.robhb robhblist = 12;
  for (int i = 0; i < this->robhblist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->robhblist(i), output);
  }

  // repeated int32 standuser = 13;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->standuser(i), output);
  }

  // optional int32 maxrobotnum = 14;
  if (has_maxrobotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->maxrobotnum(), output);
  }

  // optional int32 issyswin = 15;
  if (has_issyswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->issyswin(), output);
  }

  // repeated int32 hbjettonlist = 16;
  for (int i = 0; i < this->hbjettonlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->hbjettonlist(i), output);
  }

  // optional int32 usernum = 17;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->usernum(), output);
  }

  // optional int32 robotnum = 18;
  if (has_robotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->robotnum(), output);
  }

  // optional int32 maxhbnum = 19;
  if (has_maxhbnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->maxhbnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* slhbinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 timemark = 3;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timemark(), target);
  }

  // optional int32 tabletype = 4;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tabletype(), target);
  }

  // optional int32 hbuserid = 5;
  if (has_hbuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hbuserid(), target);
  }

  // optional string hbnickname = 6;
  if (has_hbnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hbnickname().data(), this->hbnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hbnickname(), target);
  }

  // optional string hbfaceid = 7;
  if (has_hbfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hbfaceid().data(), this->hbfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hbfaceid(), target);
  }

  // optional int32 hbjetton = 8;
  if (has_hbjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hbjetton(), target);
  }

  // optional int32 hbnum = 9;
  if (has_hbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hbnum(), target);
  }

  // optional int32 hbbomb = 10;
  if (has_hbbomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hbbomb(), target);
  }

  // repeated .progame.hongbao hblist = 11;
  for (int i = 0; i < this->hblist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hblist(i), target);
  }

  // repeated .progame.robhb robhblist = 12;
  for (int i = 0; i < this->robhblist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->robhblist(i), target);
  }

  // repeated int32 standuser = 13;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->standuser(i), target);
  }

  // optional int32 maxrobotnum = 14;
  if (has_maxrobotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->maxrobotnum(), target);
  }

  // optional int32 issyswin = 15;
  if (has_issyswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->issyswin(), target);
  }

  // repeated int32 hbjettonlist = 16;
  for (int i = 0; i < this->hbjettonlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->hbjettonlist(i), target);
  }

  // optional int32 usernum = 17;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->usernum(), target);
  }

  // optional int32 robotnum = 18;
  if (has_robotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->robotnum(), target);
  }

  // optional int32 maxhbnum = 19;
  if (has_maxhbnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->maxhbnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int slhbinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 3;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 tabletype = 4;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 hbuserid = 5;
    if (has_hbuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hbuserid());
    }

    // optional string hbnickname = 6;
    if (has_hbnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hbnickname());
    }

    // optional string hbfaceid = 7;
    if (has_hbfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hbfaceid());
    }

    // optional int32 hbjetton = 8;
    if (has_hbjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hbjetton());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hbnum = 9;
    if (has_hbnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hbnum());
    }

    // optional int32 hbbomb = 10;
    if (has_hbbomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hbbomb());
    }

    // optional int32 maxrobotnum = 14;
    if (has_maxrobotnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrobotnum());
    }

    // optional int32 issyswin = 15;
    if (has_issyswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issyswin());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 usernum = 17;
    if (has_usernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

    // optional int32 robotnum = 18;
    if (has_robotnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotnum());
    }

    // optional int32 maxhbnum = 19;
    if (has_maxhbnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhbnum());
    }

  }
  // repeated .progame.hongbao hblist = 11;
  total_size += 1 * this->hblist_size();
  for (int i = 0; i < this->hblist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hblist(i));
  }

  // repeated .progame.robhb robhblist = 12;
  total_size += 1 * this->robhblist_size();
  for (int i = 0; i < this->robhblist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robhblist(i));
  }

  // repeated int32 standuser = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 1 * this->standuser_size() + data_size;
  }

  // repeated int32 hbjettonlist = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->hbjettonlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hbjettonlist(i));
    }
    total_size += 2 * this->hbjettonlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void slhbinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const slhbinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const slhbinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void slhbinfo::MergeFrom(const slhbinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hblist_.MergeFrom(from.hblist_);
  robhblist_.MergeFrom(from.robhblist_);
  standuser_.MergeFrom(from.standuser_);
  hbjettonlist_.MergeFrom(from.hbjettonlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_hbuserid()) {
      set_hbuserid(from.hbuserid());
    }
    if (from.has_hbnickname()) {
      set_hbnickname(from.hbnickname());
    }
    if (from.has_hbfaceid()) {
      set_hbfaceid(from.hbfaceid());
    }
    if (from.has_hbjetton()) {
      set_hbjetton(from.hbjetton());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hbnum()) {
      set_hbnum(from.hbnum());
    }
    if (from.has_hbbomb()) {
      set_hbbomb(from.hbbomb());
    }
    if (from.has_maxrobotnum()) {
      set_maxrobotnum(from.maxrobotnum());
    }
    if (from.has_issyswin()) {
      set_issyswin(from.issyswin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_robotnum()) {
      set_robotnum(from.robotnum());
    }
    if (from.has_maxhbnum()) {
      set_maxhbnum(from.maxhbnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void slhbinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slhbinfo::CopyFrom(const slhbinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slhbinfo::IsInitialized() const {

  return true;
}

void slhbinfo::Swap(slhbinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(hbuserid_, other->hbuserid_);
    std::swap(hbnickname_, other->hbnickname_);
    std::swap(hbfaceid_, other->hbfaceid_);
    std::swap(hbjetton_, other->hbjetton_);
    std::swap(hbnum_, other->hbnum_);
    std::swap(hbbomb_, other->hbbomb_);
    hblist_.Swap(&other->hblist_);
    robhblist_.Swap(&other->robhblist_);
    standuser_.Swap(&other->standuser_);
    std::swap(maxrobotnum_, other->maxrobotnum_);
    std::swap(issyswin_, other->issyswin_);
    hbjettonlist_.Swap(&other->hbjettonlist_);
    std::swap(usernum_, other->usernum_);
    std::swap(robotnum_, other->robotnum_);
    std::swap(maxhbnum_, other->maxhbnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata slhbinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = slhbinfo_descriptor_;
  metadata.reflection = slhbinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int slhbjettonrecordlist::kJettonFieldNumber;
const int slhbjettonrecordlist::kBoomconditionFieldNumber;
#endif  // !_MSC_VER

slhbjettonrecordlist::slhbjettonrecordlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void slhbjettonrecordlist::InitAsDefaultInstance() {
}

slhbjettonrecordlist::slhbjettonrecordlist(const slhbjettonrecordlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void slhbjettonrecordlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

slhbjettonrecordlist::~slhbjettonrecordlist() {
  SharedDtor();
}

void slhbjettonrecordlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void slhbjettonrecordlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* slhbjettonrecordlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return slhbjettonrecordlist_descriptor_;
}

const slhbjettonrecordlist& slhbjettonrecordlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslhb_2eproto();
  return *default_instance_;
}

slhbjettonrecordlist* slhbjettonrecordlist::default_instance_ = NULL;

slhbjettonrecordlist* slhbjettonrecordlist::New() const {
  return new slhbjettonrecordlist;
}

void slhbjettonrecordlist::Clear() {
  jetton_.Clear();
  boomcondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool slhbjettonrecordlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 jetton = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_jetton;
        if (input->ExpectTag(16)) goto parse_boomcondition;
        break;
      }

      // repeated int32 boomcondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boomcondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_boomcondition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boomcondition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boomcondition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void slhbjettonrecordlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->jetton(i), output);
  }

  // repeated int32 boomcondition = 2;
  for (int i = 0; i < this->boomcondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->boomcondition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* slhbjettonrecordlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 jetton = 1;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->jetton(i), target);
  }

  // repeated int32 boomcondition = 2;
  for (int i = 0; i < this->boomcondition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->boomcondition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int slhbjettonrecordlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 jetton = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated int32 boomcondition = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->boomcondition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boomcondition(i));
    }
    total_size += 1 * this->boomcondition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void slhbjettonrecordlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const slhbjettonrecordlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const slhbjettonrecordlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void slhbjettonrecordlist::MergeFrom(const slhbjettonrecordlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  jetton_.MergeFrom(from.jetton_);
  boomcondition_.MergeFrom(from.boomcondition_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void slhbjettonrecordlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slhbjettonrecordlist::CopyFrom(const slhbjettonrecordlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slhbjettonrecordlist::IsInitialized() const {

  return true;
}

void slhbjettonrecordlist::Swap(slhbjettonrecordlist* other) {
  if (other != this) {
    jetton_.Swap(&other->jetton_);
    boomcondition_.Swap(&other->boomcondition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata slhbjettonrecordlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = slhbjettonrecordlist_descriptor_;
  metadata.reflection = slhbjettonrecordlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int slhbjettonrecorinfo::kUseridFieldNumber;
const int slhbjettonrecorinfo::kJettonFieldNumber;
const int slhbjettonrecorinfo::kBoomnumFieldNumber;
const int slhbjettonrecorinfo::kJifenFieldNumber;
const int slhbjettonrecorinfo::kNicknameFieldNumber;
const int slhbjettonrecorinfo::kFacenameFieldNumber;
#endif  // !_MSC_VER

slhbjettonrecorinfo::slhbjettonrecorinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void slhbjettonrecorinfo::InitAsDefaultInstance() {
}

slhbjettonrecorinfo::slhbjettonrecorinfo(const slhbjettonrecorinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void slhbjettonrecorinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  jetton_ = 0;
  boomnum_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

slhbjettonrecorinfo::~slhbjettonrecorinfo() {
  SharedDtor();
}

void slhbjettonrecorinfo::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (this != default_instance_) {
  }
}

void slhbjettonrecorinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* slhbjettonrecorinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return slhbjettonrecorinfo_descriptor_;
}

const slhbjettonrecorinfo& slhbjettonrecorinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fslhb_2eproto();
  return *default_instance_;
}

slhbjettonrecorinfo* slhbjettonrecorinfo::default_instance_ = NULL;

slhbjettonrecorinfo* slhbjettonrecorinfo::New() const {
  return new slhbjettonrecorinfo;
}

void slhbjettonrecorinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    jetton_ = 0;
    boomnum_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool slhbjettonrecorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boomnum;
        break;
      }

      // optional int32 boomnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boomnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boomnum_)));
          set_has_boomnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jifen;
        break;
      }

      // optional string jifen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facename;
        break;
      }

      // optional string facename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void slhbjettonrecorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jetton(), output);
  }

  // optional int32 boomnum = 3;
  if (has_boomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boomnum(), output);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jifen(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->facename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* slhbjettonrecorinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jetton(), target);
  }

  // optional int32 boomnum = 3;
  if (has_boomnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boomnum(), target);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jifen(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->facename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int slhbjettonrecorinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 jetton = 2;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 boomnum = 3;
    if (has_boomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boomnum());
    }

    // optional string jifen = 4;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string facename = 6;
    if (has_facename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void slhbjettonrecorinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const slhbjettonrecorinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const slhbjettonrecorinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void slhbjettonrecorinfo::MergeFrom(const slhbjettonrecorinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_boomnum()) {
      set_boomnum(from.boomnum());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void slhbjettonrecorinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void slhbjettonrecorinfo::CopyFrom(const slhbjettonrecorinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slhbjettonrecorinfo::IsInitialized() const {

  return true;
}

void slhbjettonrecorinfo::Swap(slhbjettonrecorinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(jetton_, other->jetton_);
    std::swap(boomnum_, other->boomnum_);
    std::swap(jifen_, other->jifen_);
    std::swap(nickname_, other->nickname_);
    std::swap(facename_, other->facename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata slhbjettonrecorinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = slhbjettonrecorinfo_descriptor_;
  metadata.reflection = slhbjettonrecorinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
