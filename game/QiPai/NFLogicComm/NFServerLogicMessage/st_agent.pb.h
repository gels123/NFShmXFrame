// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_agent.proto

#ifndef PROTOBUF_st_5fagent_2eproto__INCLUDED
#define PROTOBUF_st_5fagent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fagent_2eproto();
void protobuf_AssignDesc_st_5fagent_2eproto();
void protobuf_ShutdownFile_st_5fagent_2eproto();

class agentinfo;
class wiringinfo;
class wiringdayachieve;
class wiringawardinfo;
class wiringwithdrawinfo;
class wiringuserinfo;
class fenchengdayinfo;
class fenchengweekinfo;
class wiringdaybonus;
class wiringcostweekbonus;
class wiringagentcostweekbonus;

// ===================================================================

class agentinfo : public ::google::protobuf::Message {
 public:
  agentinfo();
  virtual ~agentinfo();

  agentinfo(const agentinfo& from);

  inline agentinfo& operator=(const agentinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agentinfo& default_instance();

  void Swap(agentinfo* other);

  // implements Message ----------------------------------------------

  agentinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agentinfo& from);
  void MergeFrom(const agentinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string invitestr = 2;
  inline bool has_invitestr() const;
  inline void clear_invitestr();
  static const int kInvitestrFieldNumber = 2;
  inline const ::std::string& invitestr() const;
  inline void set_invitestr(const ::std::string& value);
  inline void set_invitestr(const char* value);
  inline void set_invitestr(const char* value, size_t size);
  inline ::std::string* mutable_invitestr();
  inline ::std::string* release_invitestr();
  inline void set_allocated_invitestr(::std::string* invitestr);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 soleagent = 4;
  inline bool has_soleagent() const;
  inline void clear_soleagent();
  static const int kSoleagentFieldNumber = 4;
  inline ::google::protobuf::int32 soleagent() const;
  inline void set_soleagent(::google::protobuf::int32 value);

  // optional int32 agent1 = 5;
  inline bool has_agent1() const;
  inline void clear_agent1();
  static const int kAgent1FieldNumber = 5;
  inline ::google::protobuf::int32 agent1() const;
  inline void set_agent1(::google::protobuf::int32 value);

  // optional int32 agent2 = 6;
  inline bool has_agent2() const;
  inline void clear_agent2();
  static const int kAgent2FieldNumber = 6;
  inline ::google::protobuf::int32 agent2() const;
  inline void set_agent2(::google::protobuf::int32 value);

  // optional int32 agent3 = 7;
  inline bool has_agent3() const;
  inline void clear_agent3();
  static const int kAgent3FieldNumber = 7;
  inline ::google::protobuf::int32 agent3() const;
  inline void set_agent3(::google::protobuf::int32 value);

  // optional int32 agent4 = 8;
  inline bool has_agent4() const;
  inline void clear_agent4();
  static const int kAgent4FieldNumber = 8;
  inline ::google::protobuf::int32 agent4() const;
  inline void set_agent4(::google::protobuf::int32 value);

  // optional string qrcodeurl = 10;
  inline bool has_qrcodeurl() const;
  inline void clear_qrcodeurl();
  static const int kQrcodeurlFieldNumber = 10;
  inline const ::std::string& qrcodeurl() const;
  inline void set_qrcodeurl(const ::std::string& value);
  inline void set_qrcodeurl(const char* value);
  inline void set_qrcodeurl(const char* value, size_t size);
  inline ::std::string* mutable_qrcodeurl();
  inline ::std::string* release_qrcodeurl();
  inline void set_allocated_qrcodeurl(::std::string* qrcodeurl);

  // optional string datemark = 11;
  inline bool has_datemark() const;
  inline void clear_datemark();
  static const int kDatemarkFieldNumber = 11;
  inline const ::std::string& datemark() const;
  inline void set_datemark(const ::std::string& value);
  inline void set_datemark(const char* value);
  inline void set_datemark(const char* value, size_t size);
  inline ::std::string* mutable_datemark();
  inline ::std::string* release_datemark();
  inline void set_allocated_datemark(::std::string* datemark);

  // optional int32 moneymark = 12;
  inline bool has_moneymark() const;
  inline void clear_moneymark();
  static const int kMoneymarkFieldNumber = 12;
  inline ::google::protobuf::int32 moneymark() const;
  inline void set_moneymark(::google::protobuf::int32 value);

  // optional int32 weekmoney = 13;
  inline bool has_weekmoney() const;
  inline void clear_weekmoney();
  static const int kWeekmoneyFieldNumber = 13;
  inline ::google::protobuf::int32 weekmoney() const;
  inline void set_weekmoney(::google::protobuf::int32 value);

  // optional string exclusiveurl = 14;
  inline bool has_exclusiveurl() const;
  inline void clear_exclusiveurl();
  static const int kExclusiveurlFieldNumber = 14;
  inline const ::std::string& exclusiveurl() const;
  inline void set_exclusiveurl(const ::std::string& value);
  inline void set_exclusiveurl(const char* value);
  inline void set_exclusiveurl(const char* value, size_t size);
  inline ::std::string* mutable_exclusiveurl();
  inline ::std::string* release_exclusiveurl();
  inline void set_allocated_exclusiveurl(::std::string* exclusiveurl);

  // optional string alipay = 15;
  inline bool has_alipay() const;
  inline void clear_alipay();
  static const int kAlipayFieldNumber = 15;
  inline const ::std::string& alipay() const;
  inline void set_alipay(const ::std::string& value);
  inline void set_alipay(const char* value);
  inline void set_alipay(const char* value, size_t size);
  inline ::std::string* mutable_alipay();
  inline ::std::string* release_alipay();
  inline void set_allocated_alipay(::std::string* alipay);

  // optional string bankaccount = 16;
  inline bool has_bankaccount() const;
  inline void clear_bankaccount();
  static const int kBankaccountFieldNumber = 16;
  inline const ::std::string& bankaccount() const;
  inline void set_bankaccount(const ::std::string& value);
  inline void set_bankaccount(const char* value);
  inline void set_bankaccount(const char* value, size_t size);
  inline ::std::string* mutable_bankaccount();
  inline ::std::string* release_bankaccount();
  inline void set_allocated_bankaccount(::std::string* bankaccount);

  // optional int32 wiringid = 17;
  inline bool has_wiringid() const;
  inline void clear_wiringid();
  static const int kWiringidFieldNumber = 17;
  inline ::google::protobuf::int32 wiringid() const;
  inline void set_wiringid(::google::protobuf::int32 value);

  // optional int32 grade = 18;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 18;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.agentinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_invitestr();
  inline void clear_has_invitestr();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_soleagent();
  inline void clear_has_soleagent();
  inline void set_has_agent1();
  inline void clear_has_agent1();
  inline void set_has_agent2();
  inline void clear_has_agent2();
  inline void set_has_agent3();
  inline void clear_has_agent3();
  inline void set_has_agent4();
  inline void clear_has_agent4();
  inline void set_has_qrcodeurl();
  inline void clear_has_qrcodeurl();
  inline void set_has_datemark();
  inline void clear_has_datemark();
  inline void set_has_moneymark();
  inline void clear_has_moneymark();
  inline void set_has_weekmoney();
  inline void clear_has_weekmoney();
  inline void set_has_exclusiveurl();
  inline void clear_has_exclusiveurl();
  inline void set_has_alipay();
  inline void clear_has_alipay();
  inline void set_has_bankaccount();
  inline void clear_has_bankaccount();
  inline void set_has_wiringid();
  inline void clear_has_wiringid();
  inline void set_has_grade();
  inline void clear_has_grade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* invitestr_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 soleagent_;
  ::google::protobuf::int32 agent1_;
  ::google::protobuf::int32 agent2_;
  ::google::protobuf::int32 agent3_;
  ::std::string* qrcodeurl_;
  ::google::protobuf::int32 agent4_;
  ::google::protobuf::int32 moneymark_;
  ::std::string* datemark_;
  ::std::string* exclusiveurl_;
  ::std::string* alipay_;
  ::google::protobuf::int32 weekmoney_;
  ::google::protobuf::int32 wiringid_;
  ::std::string* bankaccount_;
  ::google::protobuf::int32 grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static agentinfo* default_instance_;
};
// -------------------------------------------------------------------

class wiringinfo : public ::google::protobuf::Message {
 public:
  wiringinfo();
  virtual ~wiringinfo();

  wiringinfo(const wiringinfo& from);

  inline wiringinfo& operator=(const wiringinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringinfo& default_instance();

  void Swap(wiringinfo* other);

  // implements Message ----------------------------------------------

  wiringinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringinfo& from);
  void MergeFrom(const wiringinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 ownerid = 3;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 3;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // optional int32 maxnum = 4;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxnumFieldNumber = 4;
  inline ::google::protobuf::int32 maxnum() const;
  inline void set_maxnum(::google::protobuf::int32 value);

  // optional int32 currnum = 5;
  inline bool has_currnum() const;
  inline void clear_currnum();
  static const int kCurrnumFieldNumber = 5;
  inline ::google::protobuf::int32 currnum() const;
  inline void set_currnum(::google::protobuf::int32 value);

  // optional int32 usernum = 6;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 6;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional string createdate = 7;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreatedateFieldNumber = 7;
  inline const ::std::string& createdate() const;
  inline void set_createdate(const ::std::string& value);
  inline void set_createdate(const char* value);
  inline void set_createdate(const char* value, size_t size);
  inline ::std::string* mutable_createdate();
  inline ::std::string* release_createdate();
  inline void set_allocated_createdate(::std::string* createdate);

  // optional int32 newaddnum = 8;
  inline bool has_newaddnum() const;
  inline void clear_newaddnum();
  static const int kNewaddnumFieldNumber = 8;
  inline ::google::protobuf::int32 newaddnum() const;
  inline void set_newaddnum(::google::protobuf::int32 value);

  // optional string qrcodeurl = 9;
  inline bool has_qrcodeurl() const;
  inline void clear_qrcodeurl();
  static const int kQrcodeurlFieldNumber = 9;
  inline const ::std::string& qrcodeurl() const;
  inline void set_qrcodeurl(const ::std::string& value);
  inline void set_qrcodeurl(const char* value);
  inline void set_qrcodeurl(const char* value, size_t size);
  inline ::std::string* mutable_qrcodeurl();
  inline ::std::string* release_qrcodeurl();
  inline void set_allocated_qrcodeurl(::std::string* qrcodeurl);

  // @@protoc_insertion_point(class_scope:progame.wiringinfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_currnum();
  inline void clear_has_currnum();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_newaddnum();
  inline void clear_has_newaddnum();
  inline void set_has_qrcodeurl();
  inline void clear_has_qrcodeurl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 maxnum_;
  ::google::protobuf::int32 currnum_;
  ::std::string* createdate_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 newaddnum_;
  ::std::string* qrcodeurl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringinfo* default_instance_;
};
// -------------------------------------------------------------------

class wiringdayachieve : public ::google::protobuf::Message {
 public:
  wiringdayachieve();
  virtual ~wiringdayachieve();

  wiringdayachieve(const wiringdayachieve& from);

  inline wiringdayachieve& operator=(const wiringdayachieve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringdayachieve& default_instance();

  void Swap(wiringdayachieve* other);

  // implements Message ----------------------------------------------

  wiringdayachieve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringdayachieve& from);
  void MergeFrom(const wiringdayachieve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string datestr = 1;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 1;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional int32 allach = 2;
  inline bool has_allach() const;
  inline void clear_allach();
  static const int kAllachFieldNumber = 2;
  inline ::google::protobuf::int32 allach() const;
  inline void set_allach(::google::protobuf::int32 value);

  // optional int32 teamach = 3;
  inline bool has_teamach() const;
  inline void clear_teamach();
  static const int kTeamachFieldNumber = 3;
  inline ::google::protobuf::int32 teamach() const;
  inline void set_teamach(::google::protobuf::int32 value);

  // optional int32 selfach = 4;
  inline bool has_selfach() const;
  inline void clear_selfach();
  static const int kSelfachFieldNumber = 4;
  inline ::google::protobuf::int32 selfach() const;
  inline void set_selfach(::google::protobuf::int32 value);

  // optional string allach_1 = 5;
  inline bool has_allach_1() const;
  inline void clear_allach_1();
  static const int kAllach1FieldNumber = 5;
  inline const ::std::string& allach_1() const;
  inline void set_allach_1(const ::std::string& value);
  inline void set_allach_1(const char* value);
  inline void set_allach_1(const char* value, size_t size);
  inline ::std::string* mutable_allach_1();
  inline ::std::string* release_allach_1();
  inline void set_allocated_allach_1(::std::string* allach_1);

  // optional string teamach_1 = 6;
  inline bool has_teamach_1() const;
  inline void clear_teamach_1();
  static const int kTeamach1FieldNumber = 6;
  inline const ::std::string& teamach_1() const;
  inline void set_teamach_1(const ::std::string& value);
  inline void set_teamach_1(const char* value);
  inline void set_teamach_1(const char* value, size_t size);
  inline ::std::string* mutable_teamach_1();
  inline ::std::string* release_teamach_1();
  inline void set_allocated_teamach_1(::std::string* teamach_1);

  // optional string selfach_1 = 7;
  inline bool has_selfach_1() const;
  inline void clear_selfach_1();
  static const int kSelfach1FieldNumber = 7;
  inline const ::std::string& selfach_1() const;
  inline void set_selfach_1(const ::std::string& value);
  inline void set_selfach_1(const char* value);
  inline void set_selfach_1(const char* value, size_t size);
  inline ::std::string* mutable_selfach_1();
  inline ::std::string* release_selfach_1();
  inline void set_allocated_selfach_1(::std::string* selfach_1);

  // optional int32 getrate = 8;
  inline bool has_getrate() const;
  inline void clear_getrate();
  static const int kGetrateFieldNumber = 8;
  inline ::google::protobuf::int32 getrate() const;
  inline void set_getrate(::google::protobuf::int32 value);

  // optional int32 getmoney = 9;
  inline bool has_getmoney() const;
  inline void clear_getmoney();
  static const int kGetmoneyFieldNumber = 9;
  inline ::google::protobuf::int32 getmoney() const;
  inline void set_getmoney(::google::protobuf::int32 value);

  // optional string fivelevel_ach = 10;
  inline bool has_fivelevel_ach() const;
  inline void clear_fivelevel_ach();
  static const int kFivelevelAchFieldNumber = 10;
  inline const ::std::string& fivelevel_ach() const;
  inline void set_fivelevel_ach(const ::std::string& value);
  inline void set_fivelevel_ach(const char* value);
  inline void set_fivelevel_ach(const char* value, size_t size);
  inline ::std::string* mutable_fivelevel_ach();
  inline ::std::string* release_fivelevel_ach();
  inline void set_allocated_fivelevel_ach(::std::string* fivelevel_ach);

  // @@protoc_insertion_point(class_scope:progame.wiringdayachieve)
 private:
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_allach();
  inline void clear_has_allach();
  inline void set_has_teamach();
  inline void clear_has_teamach();
  inline void set_has_selfach();
  inline void clear_has_selfach();
  inline void set_has_allach_1();
  inline void clear_has_allach_1();
  inline void set_has_teamach_1();
  inline void clear_has_teamach_1();
  inline void set_has_selfach_1();
  inline void clear_has_selfach_1();
  inline void set_has_getrate();
  inline void clear_has_getrate();
  inline void set_has_getmoney();
  inline void clear_has_getmoney();
  inline void set_has_fivelevel_ach();
  inline void clear_has_fivelevel_ach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* datestr_;
  ::google::protobuf::int32 allach_;
  ::google::protobuf::int32 teamach_;
  ::std::string* allach_1_;
  ::std::string* teamach_1_;
  ::google::protobuf::int32 selfach_;
  ::google::protobuf::int32 getrate_;
  ::std::string* selfach_1_;
  ::std::string* fivelevel_ach_;
  ::google::protobuf::int32 getmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringdayachieve* default_instance_;
};
// -------------------------------------------------------------------

class wiringawardinfo : public ::google::protobuf::Message {
 public:
  wiringawardinfo();
  virtual ~wiringawardinfo();

  wiringawardinfo(const wiringawardinfo& from);

  inline wiringawardinfo& operator=(const wiringawardinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringawardinfo& default_instance();

  void Swap(wiringawardinfo* other);

  // implements Message ----------------------------------------------

  wiringawardinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringawardinfo& from);
  void MergeFrom(const wiringawardinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 awardid = 1;
  inline bool has_awardid() const;
  inline void clear_awardid();
  static const int kAwardidFieldNumber = 1;
  inline ::google::protobuf::int32 awardid() const;
  inline void set_awardid(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string datestr = 3;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 3;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional string weekallach = 4;
  inline bool has_weekallach() const;
  inline void clear_weekallach();
  static const int kWeekallachFieldNumber = 4;
  inline const ::std::string& weekallach() const;
  inline void set_weekallach(const ::std::string& value);
  inline void set_weekallach(const char* value);
  inline void set_weekallach(const char* value, size_t size);
  inline ::std::string* mutable_weekallach();
  inline ::std::string* release_weekallach();
  inline void set_allocated_weekallach(::std::string* weekallach);

  // optional string weekteamach = 5;
  inline bool has_weekteamach() const;
  inline void clear_weekteamach();
  static const int kWeekteamachFieldNumber = 5;
  inline const ::std::string& weekteamach() const;
  inline void set_weekteamach(const ::std::string& value);
  inline void set_weekteamach(const char* value);
  inline void set_weekteamach(const char* value, size_t size);
  inline ::std::string* mutable_weekteamach();
  inline ::std::string* release_weekteamach();
  inline void set_allocated_weekteamach(::std::string* weekteamach);

  // optional string weekselfach = 6;
  inline bool has_weekselfach() const;
  inline void clear_weekselfach();
  static const int kWeekselfachFieldNumber = 6;
  inline const ::std::string& weekselfach() const;
  inline void set_weekselfach(const ::std::string& value);
  inline void set_weekselfach(const char* value);
  inline void set_weekselfach(const char* value, size_t size);
  inline ::std::string* mutable_weekselfach();
  inline ::std::string* release_weekselfach();
  inline void set_allocated_weekselfach(::std::string* weekselfach);

  // optional string awardnum = 7;
  inline bool has_awardnum() const;
  inline void clear_awardnum();
  static const int kAwardnumFieldNumber = 7;
  inline const ::std::string& awardnum() const;
  inline void set_awardnum(const ::std::string& value);
  inline void set_awardnum(const char* value);
  inline void set_awardnum(const char* value, size_t size);
  inline ::std::string* mutable_awardnum();
  inline ::std::string* release_awardnum();
  inline void set_allocated_awardnum(::std::string* awardnum);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional string realhair = 9;
  inline bool has_realhair() const;
  inline void clear_realhair();
  static const int kRealhairFieldNumber = 9;
  inline const ::std::string& realhair() const;
  inline void set_realhair(const ::std::string& value);
  inline void set_realhair(const char* value);
  inline void set_realhair(const char* value, size_t size);
  inline ::std::string* mutable_realhair();
  inline ::std::string* release_realhair();
  inline void set_allocated_realhair(::std::string* realhair);

  // optional string preissue = 10;
  inline bool has_preissue() const;
  inline void clear_preissue();
  static const int kPreissueFieldNumber = 10;
  inline const ::std::string& preissue() const;
  inline void set_preissue(const ::std::string& value);
  inline void set_preissue(const char* value);
  inline void set_preissue(const char* value, size_t size);
  inline ::std::string* mutable_preissue();
  inline ::std::string* release_preissue();
  inline void set_allocated_preissue(::std::string* preissue);

  // @@protoc_insertion_point(class_scope:progame.wiringawardinfo)
 private:
  inline void set_has_awardid();
  inline void clear_has_awardid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_weekallach();
  inline void clear_has_weekallach();
  inline void set_has_weekteamach();
  inline void clear_has_weekteamach();
  inline void set_has_weekselfach();
  inline void clear_has_weekselfach();
  inline void set_has_awardnum();
  inline void clear_has_awardnum();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_realhair();
  inline void clear_has_realhair();
  inline void set_has_preissue();
  inline void clear_has_preissue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 awardid_;
  ::google::protobuf::int32 userid_;
  ::std::string* datestr_;
  ::std::string* weekallach_;
  ::std::string* weekteamach_;
  ::std::string* weekselfach_;
  ::std::string* awardnum_;
  ::std::string* realhair_;
  ::std::string* preissue_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringawardinfo* default_instance_;
};
// -------------------------------------------------------------------

class wiringwithdrawinfo : public ::google::protobuf::Message {
 public:
  wiringwithdrawinfo();
  virtual ~wiringwithdrawinfo();

  wiringwithdrawinfo(const wiringwithdrawinfo& from);

  inline wiringwithdrawinfo& operator=(const wiringwithdrawinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringwithdrawinfo& default_instance();

  void Swap(wiringwithdrawinfo* other);

  // implements Message ----------------------------------------------

  wiringwithdrawinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringwithdrawinfo& from);
  void MergeFrom(const wiringwithdrawinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string drawid = 1;
  inline bool has_drawid() const;
  inline void clear_drawid();
  static const int kDrawidFieldNumber = 1;
  inline const ::std::string& drawid() const;
  inline void set_drawid(const ::std::string& value);
  inline void set_drawid(const char* value);
  inline void set_drawid(const char* value, size_t size);
  inline ::std::string* mutable_drawid();
  inline ::std::string* release_drawid();
  inline void set_allocated_drawid(::std::string* drawid);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string datestr = 3;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 3;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional string amount = 4;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 4;
  inline const ::std::string& amount() const;
  inline void set_amount(const ::std::string& value);
  inline void set_amount(const char* value);
  inline void set_amount(const char* value, size_t size);
  inline ::std::string* mutable_amount();
  inline ::std::string* release_amount();
  inline void set_allocated_amount(::std::string* amount);

  // optional int32 drawtypw = 5;
  inline bool has_drawtypw() const;
  inline void clear_drawtypw();
  static const int kDrawtypwFieldNumber = 5;
  inline ::google::protobuf::int32 drawtypw() const;
  inline void set_drawtypw(::google::protobuf::int32 value);

  // optional string account = 6;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 6;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional int32 state = 7;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.wiringwithdrawinfo)
 private:
  inline void set_has_drawid();
  inline void clear_has_drawid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_drawtypw();
  inline void clear_has_drawtypw();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* drawid_;
  ::std::string* datestr_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 drawtypw_;
  ::std::string* amount_;
  ::std::string* account_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringwithdrawinfo* default_instance_;
};
// -------------------------------------------------------------------

class wiringuserinfo : public ::google::protobuf::Message {
 public:
  wiringuserinfo();
  virtual ~wiringuserinfo();

  wiringuserinfo(const wiringuserinfo& from);

  inline wiringuserinfo& operator=(const wiringuserinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringuserinfo& default_instance();

  void Swap(wiringuserinfo* other);

  // implements Message ----------------------------------------------

  wiringuserinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringuserinfo& from);
  void MergeFrom(const wiringuserinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 wiringid = 3;
  inline bool has_wiringid() const;
  inline void clear_wiringid();
  static const int kWiringidFieldNumber = 3;
  inline ::google::protobuf::int32 wiringid() const;
  inline void set_wiringid(::google::protobuf::int32 value);

  // optional string createdate = 4;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreatedateFieldNumber = 4;
  inline const ::std::string& createdate() const;
  inline void set_createdate(const ::std::string& value);
  inline void set_createdate(const char* value);
  inline void set_createdate(const char* value, size_t size);
  inline ::std::string* mutable_createdate();
  inline ::std::string* release_createdate();
  inline void set_allocated_createdate(::std::string* createdate);

  // optional int32 prelevel = 5;
  inline bool has_prelevel() const;
  inline void clear_prelevel();
  static const int kPrelevelFieldNumber = 5;
  inline ::google::protobuf::int32 prelevel() const;
  inline void set_prelevel(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string allperformance = 7;
  inline bool has_allperformance() const;
  inline void clear_allperformance();
  static const int kAllperformanceFieldNumber = 7;
  inline const ::std::string& allperformance() const;
  inline void set_allperformance(const ::std::string& value);
  inline void set_allperformance(const char* value);
  inline void set_allperformance(const char* value, size_t size);
  inline ::std::string* mutable_allperformance();
  inline ::std::string* release_allperformance();
  inline void set_allocated_allperformance(::std::string* allperformance);

  // optional string selfperformance = 8;
  inline bool has_selfperformance() const;
  inline void clear_selfperformance();
  static const int kSelfperformanceFieldNumber = 8;
  inline const ::std::string& selfperformance() const;
  inline void set_selfperformance(const ::std::string& value);
  inline void set_selfperformance(const char* value);
  inline void set_selfperformance(const char* value, size_t size);
  inline ::std::string* mutable_selfperformance();
  inline ::std::string* release_selfperformance();
  inline void set_allocated_selfperformance(::std::string* selfperformance);

  // optional string directperformance = 9;
  inline bool has_directperformance() const;
  inline void clear_directperformance();
  static const int kDirectperformanceFieldNumber = 9;
  inline const ::std::string& directperformance() const;
  inline void set_directperformance(const ::std::string& value);
  inline void set_directperformance(const char* value);
  inline void set_directperformance(const char* value, size_t size);
  inline ::std::string* mutable_directperformance();
  inline ::std::string* release_directperformance();
  inline void set_allocated_directperformance(::std::string* directperformance);

  // optional string teamperformance = 10;
  inline bool has_teamperformance() const;
  inline void clear_teamperformance();
  static const int kTeamperformanceFieldNumber = 10;
  inline const ::std::string& teamperformance() const;
  inline void set_teamperformance(const ::std::string& value);
  inline void set_teamperformance(const char* value);
  inline void set_teamperformance(const char* value, size_t size);
  inline ::std::string* mutable_teamperformance();
  inline ::std::string* release_teamperformance();
  inline void set_allocated_teamperformance(::std::string* teamperformance);

  // optional int32 allincome = 12;
  inline bool has_allincome() const;
  inline void clear_allincome();
  static const int kAllincomeFieldNumber = 12;
  inline ::google::protobuf::int32 allincome() const;
  inline void set_allincome(::google::protobuf::int32 value);

  // optional int32 getincome = 13;
  inline bool has_getincome() const;
  inline void clear_getincome();
  static const int kGetincomeFieldNumber = 13;
  inline ::google::protobuf::int32 getincome() const;
  inline void set_getincome(::google::protobuf::int32 value);

  // optional int32 allpreincome = 14;
  inline bool has_allpreincome() const;
  inline void clear_allpreincome();
  static const int kAllpreincomeFieldNumber = 14;
  inline ::google::protobuf::int32 allpreincome() const;
  inline void set_allpreincome(::google::protobuf::int32 value);

  // optional int32 getpreincome = 15;
  inline bool has_getpreincome() const;
  inline void clear_getpreincome();
  static const int kGetpreincomeFieldNumber = 15;
  inline ::google::protobuf::int32 getpreincome() const;
  inline void set_getpreincome(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.wiringuserinfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_wiringid();
  inline void clear_has_wiringid();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_prelevel();
  inline void clear_has_prelevel();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_allperformance();
  inline void clear_has_allperformance();
  inline void set_has_selfperformance();
  inline void clear_has_selfperformance();
  inline void set_has_directperformance();
  inline void clear_has_directperformance();
  inline void set_has_teamperformance();
  inline void clear_has_teamperformance();
  inline void set_has_allincome();
  inline void clear_has_allincome();
  inline void set_has_getincome();
  inline void clear_has_getincome();
  inline void set_has_allpreincome();
  inline void clear_has_allpreincome();
  inline void set_has_getpreincome();
  inline void clear_has_getpreincome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 userid_;
  ::std::string* createdate_;
  ::google::protobuf::int32 wiringid_;
  ::google::protobuf::int32 prelevel_;
  ::std::string* allperformance_;
  ::std::string* selfperformance_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 allincome_;
  ::std::string* directperformance_;
  ::std::string* teamperformance_;
  ::google::protobuf::int32 getincome_;
  ::google::protobuf::int32 allpreincome_;
  ::google::protobuf::int32 getpreincome_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringuserinfo* default_instance_;
};
// -------------------------------------------------------------------

class fenchengdayinfo : public ::google::protobuf::Message {
 public:
  fenchengdayinfo();
  virtual ~fenchengdayinfo();

  fenchengdayinfo(const fenchengdayinfo& from);

  inline fenchengdayinfo& operator=(const fenchengdayinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenchengdayinfo& default_instance();

  void Swap(fenchengdayinfo* other);

  // implements Message ----------------------------------------------

  fenchengdayinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenchengdayinfo& from);
  void MergeFrom(const fenchengdayinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string datestr = 1;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 1;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional int32 allincome = 2;
  inline bool has_allincome() const;
  inline void clear_allincome();
  static const int kAllincomeFieldNumber = 2;
  inline ::google::protobuf::int32 allincome() const;
  inline void set_allincome(::google::protobuf::int32 value);

  // optional int32 teamincome = 3;
  inline bool has_teamincome() const;
  inline void clear_teamincome();
  static const int kTeamincomeFieldNumber = 3;
  inline ::google::protobuf::int32 teamincome() const;
  inline void set_teamincome(::google::protobuf::int32 value);

  // optional int32 dirincome = 4;
  inline bool has_dirincome() const;
  inline void clear_dirincome();
  static const int kDirincomeFieldNumber = 4;
  inline ::google::protobuf::int32 dirincome() const;
  inline void set_dirincome(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.fenchengdayinfo)
 private:
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_allincome();
  inline void clear_has_allincome();
  inline void set_has_teamincome();
  inline void clear_has_teamincome();
  inline void set_has_dirincome();
  inline void clear_has_dirincome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* datestr_;
  ::google::protobuf::int32 allincome_;
  ::google::protobuf::int32 teamincome_;
  ::google::protobuf::int32 dirincome_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static fenchengdayinfo* default_instance_;
};
// -------------------------------------------------------------------

class fenchengweekinfo : public ::google::protobuf::Message {
 public:
  fenchengweekinfo();
  virtual ~fenchengweekinfo();

  fenchengweekinfo(const fenchengweekinfo& from);

  inline fenchengweekinfo& operator=(const fenchengweekinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fenchengweekinfo& default_instance();

  void Swap(fenchengweekinfo* other);

  // implements Message ----------------------------------------------

  fenchengweekinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fenchengweekinfo& from);
  void MergeFrom(const fenchengweekinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 awardid = 1;
  inline bool has_awardid() const;
  inline void clear_awardid();
  static const int kAwardidFieldNumber = 1;
  inline ::google::protobuf::int32 awardid() const;
  inline void set_awardid(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string datestr = 3;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 3;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional string weekallnum = 4;
  inline bool has_weekallnum() const;
  inline void clear_weekallnum();
  static const int kWeekallnumFieldNumber = 4;
  inline const ::std::string& weekallnum() const;
  inline void set_weekallnum(const ::std::string& value);
  inline void set_weekallnum(const char* value);
  inline void set_weekallnum(const char* value, size_t size);
  inline ::std::string* mutable_weekallnum();
  inline ::std::string* release_weekallnum();
  inline void set_allocated_weekallnum(::std::string* weekallnum);

  // optional string weekteamnum = 5;
  inline bool has_weekteamnum() const;
  inline void clear_weekteamnum();
  static const int kWeekteamnumFieldNumber = 5;
  inline const ::std::string& weekteamnum() const;
  inline void set_weekteamnum(const ::std::string& value);
  inline void set_weekteamnum(const char* value);
  inline void set_weekteamnum(const char* value, size_t size);
  inline ::std::string* mutable_weekteamnum();
  inline ::std::string* release_weekteamnum();
  inline void set_allocated_weekteamnum(::std::string* weekteamnum);

  // optional string weekdirnum = 6;
  inline bool has_weekdirnum() const;
  inline void clear_weekdirnum();
  static const int kWeekdirnumFieldNumber = 6;
  inline const ::std::string& weekdirnum() const;
  inline void set_weekdirnum(const ::std::string& value);
  inline void set_weekdirnum(const char* value);
  inline void set_weekdirnum(const char* value, size_t size);
  inline ::std::string* mutable_weekdirnum();
  inline ::std::string* release_weekdirnum();
  inline void set_allocated_weekdirnum(::std::string* weekdirnum);

  // optional string awardincome = 7;
  inline bool has_awardincome() const;
  inline void clear_awardincome();
  static const int kAwardincomeFieldNumber = 7;
  inline const ::std::string& awardincome() const;
  inline void set_awardincome(const ::std::string& value);
  inline void set_awardincome(const char* value);
  inline void set_awardincome(const char* value, size_t size);
  inline ::std::string* mutable_awardincome();
  inline ::std::string* release_awardincome();
  inline void set_allocated_awardincome(::std::string* awardincome);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional string realincome = 9;
  inline bool has_realincome() const;
  inline void clear_realincome();
  static const int kRealincomeFieldNumber = 9;
  inline const ::std::string& realincome() const;
  inline void set_realincome(const ::std::string& value);
  inline void set_realincome(const char* value);
  inline void set_realincome(const char* value, size_t size);
  inline ::std::string* mutable_realincome();
  inline ::std::string* release_realincome();
  inline void set_allocated_realincome(::std::string* realincome);

  // optional string preincome = 10;
  inline bool has_preincome() const;
  inline void clear_preincome();
  static const int kPreincomeFieldNumber = 10;
  inline const ::std::string& preincome() const;
  inline void set_preincome(const ::std::string& value);
  inline void set_preincome(const char* value);
  inline void set_preincome(const char* value, size_t size);
  inline ::std::string* mutable_preincome();
  inline ::std::string* release_preincome();
  inline void set_allocated_preincome(::std::string* preincome);

  // optional int32 weekpayall = 11;
  inline bool has_weekpayall() const;
  inline void clear_weekpayall();
  static const int kWeekpayallFieldNumber = 11;
  inline ::google::protobuf::int32 weekpayall() const;
  inline void set_weekpayall(::google::protobuf::int32 value);

  // optional int32 cfrate = 12;
  inline bool has_cfrate() const;
  inline void clear_cfrate();
  static const int kCfrateFieldNumber = 12;
  inline ::google::protobuf::int32 cfrate() const;
  inline void set_cfrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.fenchengweekinfo)
 private:
  inline void set_has_awardid();
  inline void clear_has_awardid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_weekallnum();
  inline void clear_has_weekallnum();
  inline void set_has_weekteamnum();
  inline void clear_has_weekteamnum();
  inline void set_has_weekdirnum();
  inline void clear_has_weekdirnum();
  inline void set_has_awardincome();
  inline void clear_has_awardincome();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_realincome();
  inline void clear_has_realincome();
  inline void set_has_preincome();
  inline void clear_has_preincome();
  inline void set_has_weekpayall();
  inline void clear_has_weekpayall();
  inline void set_has_cfrate();
  inline void clear_has_cfrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 awardid_;
  ::google::protobuf::int32 userid_;
  ::std::string* datestr_;
  ::std::string* weekallnum_;
  ::std::string* weekteamnum_;
  ::std::string* weekdirnum_;
  ::std::string* awardincome_;
  ::std::string* realincome_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 weekpayall_;
  ::std::string* preincome_;
  ::google::protobuf::int32 cfrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static fenchengweekinfo* default_instance_;
};
// -------------------------------------------------------------------

class wiringdaybonus : public ::google::protobuf::Message {
 public:
  wiringdaybonus();
  virtual ~wiringdaybonus();

  wiringdaybonus(const wiringdaybonus& from);

  inline wiringdaybonus& operator=(const wiringdaybonus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringdaybonus& default_instance();

  void Swap(wiringdaybonus* other);

  // implements Message ----------------------------------------------

  wiringdaybonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringdaybonus& from);
  void MergeFrom(const wiringdaybonus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string datestr = 1;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 1;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional string ach = 2;
  inline bool has_ach() const;
  inline void clear_ach();
  static const int kAchFieldNumber = 2;
  inline const ::std::string& ach() const;
  inline void set_ach(const ::std::string& value);
  inline void set_ach(const char* value);
  inline void set_ach(const char* value, size_t size);
  inline ::std::string* mutable_ach();
  inline ::std::string* release_ach();
  inline void set_allocated_ach(::std::string* ach);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 rate = 4;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 4;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // optional string bonus = 5;
  inline bool has_bonus() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 5;
  inline const ::std::string& bonus() const;
  inline void set_bonus(const ::std::string& value);
  inline void set_bonus(const char* value);
  inline void set_bonus(const char* value, size_t size);
  inline ::std::string* mutable_bonus();
  inline ::std::string* release_bonus();
  inline void set_allocated_bonus(::std::string* bonus);

  // @@protoc_insertion_point(class_scope:progame.wiringdaybonus)
 private:
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_ach();
  inline void clear_has_ach();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_bonus();
  inline void clear_has_bonus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* datestr_;
  ::std::string* ach_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rate_;
  ::std::string* bonus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringdaybonus* default_instance_;
};
// -------------------------------------------------------------------

class wiringcostweekbonus : public ::google::protobuf::Message {
 public:
  wiringcostweekbonus();
  virtual ~wiringcostweekbonus();

  wiringcostweekbonus(const wiringcostweekbonus& from);

  inline wiringcostweekbonus& operator=(const wiringcostweekbonus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringcostweekbonus& default_instance();

  void Swap(wiringcostweekbonus* other);

  // implements Message ----------------------------------------------

  wiringcostweekbonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringcostweekbonus& from);
  void MergeFrom(const wiringcostweekbonus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string datestr = 1;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 1;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional int32 allwin = 2;
  inline bool has_allwin() const;
  inline void clear_allwin();
  static const int kAllwinFieldNumber = 2;
  inline ::google::protobuf::int32 allwin() const;
  inline void set_allwin(::google::protobuf::int32 value);

  // optional int32 bonus_rate = 3;
  inline bool has_bonus_rate() const;
  inline void clear_bonus_rate();
  static const int kBonusRateFieldNumber = 3;
  inline ::google::protobuf::int32 bonus_rate() const;
  inline void set_bonus_rate(::google::protobuf::int32 value);

  // optional int32 self_bonus = 4;
  inline bool has_self_bonus() const;
  inline void clear_self_bonus();
  static const int kSelfBonusFieldNumber = 4;
  inline ::google::protobuf::int32 self_bonus() const;
  inline void set_self_bonus(::google::protobuf::int32 value);

  // optional int32 agent_bonus = 5;
  inline bool has_agent_bonus() const;
  inline void clear_agent_bonus();
  static const int kAgentBonusFieldNumber = 5;
  inline ::google::protobuf::int32 agent_bonus() const;
  inline void set_agent_bonus(::google::protobuf::int32 value);

  // optional int32 all_bonus = 6;
  inline bool has_all_bonus() const;
  inline void clear_all_bonus();
  static const int kAllBonusFieldNumber = 6;
  inline ::google::protobuf::int32 all_bonus() const;
  inline void set_all_bonus(::google::protobuf::int32 value);

  // optional int32 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.wiringcostweekbonus)
 private:
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_allwin();
  inline void clear_has_allwin();
  inline void set_has_bonus_rate();
  inline void clear_has_bonus_rate();
  inline void set_has_self_bonus();
  inline void clear_has_self_bonus();
  inline void set_has_agent_bonus();
  inline void clear_has_agent_bonus();
  inline void set_has_all_bonus();
  inline void clear_has_all_bonus();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* datestr_;
  ::google::protobuf::int32 allwin_;
  ::google::protobuf::int32 bonus_rate_;
  ::google::protobuf::int32 self_bonus_;
  ::google::protobuf::int32 agent_bonus_;
  ::google::protobuf::int32 all_bonus_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringcostweekbonus* default_instance_;
};
// -------------------------------------------------------------------

class wiringagentcostweekbonus : public ::google::protobuf::Message {
 public:
  wiringagentcostweekbonus();
  virtual ~wiringagentcostweekbonus();

  wiringagentcostweekbonus(const wiringagentcostweekbonus& from);

  inline wiringagentcostweekbonus& operator=(const wiringagentcostweekbonus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wiringagentcostweekbonus& default_instance();

  void Swap(wiringagentcostweekbonus* other);

  // implements Message ----------------------------------------------

  wiringagentcostweekbonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wiringagentcostweekbonus& from);
  void MergeFrom(const wiringagentcostweekbonus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string datestr = 1;
  inline bool has_datestr() const;
  inline void clear_datestr();
  static const int kDatestrFieldNumber = 1;
  inline const ::std::string& datestr() const;
  inline void set_datestr(const ::std::string& value);
  inline void set_datestr(const char* value);
  inline void set_datestr(const char* value, size_t size);
  inline ::std::string* mutable_datestr();
  inline ::std::string* release_datestr();
  inline void set_allocated_datestr(::std::string* datestr);

  // optional int32 agent_id = 2;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 2;
  inline ::google::protobuf::int32 agent_id() const;
  inline void set_agent_id(::google::protobuf::int32 value);

  // optional string agent_name = 3;
  inline bool has_agent_name() const;
  inline void clear_agent_name();
  static const int kAgentNameFieldNumber = 3;
  inline const ::std::string& agent_name() const;
  inline void set_agent_name(const ::std::string& value);
  inline void set_agent_name(const char* value);
  inline void set_agent_name(const char* value, size_t size);
  inline ::std::string* mutable_agent_name();
  inline ::std::string* release_agent_name();
  inline void set_allocated_agent_name(::std::string* agent_name);

  // optional int32 bonus_rate = 4;
  inline bool has_bonus_rate() const;
  inline void clear_bonus_rate();
  static const int kBonusRateFieldNumber = 4;
  inline ::google::protobuf::int32 bonus_rate() const;
  inline void set_bonus_rate(::google::protobuf::int32 value);

  // optional int32 self_bonus = 5;
  inline bool has_self_bonus() const;
  inline void clear_self_bonus();
  static const int kSelfBonusFieldNumber = 5;
  inline ::google::protobuf::int32 self_bonus() const;
  inline void set_self_bonus(::google::protobuf::int32 value);

  // optional int32 agent_bonus = 6;
  inline bool has_agent_bonus() const;
  inline void clear_agent_bonus();
  static const int kAgentBonusFieldNumber = 6;
  inline ::google::protobuf::int32 agent_bonus() const;
  inline void set_agent_bonus(::google::protobuf::int32 value);

  // optional int32 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.wiringagentcostweekbonus)
 private:
  inline void set_has_datestr();
  inline void clear_has_datestr();
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_agent_name();
  inline void clear_has_agent_name();
  inline void set_has_bonus_rate();
  inline void clear_has_bonus_rate();
  inline void set_has_self_bonus();
  inline void clear_has_self_bonus();
  inline void set_has_agent_bonus();
  inline void clear_has_agent_bonus();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* datestr_;
  ::std::string* agent_name_;
  ::google::protobuf::int32 agent_id_;
  ::google::protobuf::int32 bonus_rate_;
  ::google::protobuf::int32 self_bonus_;
  ::google::protobuf::int32 agent_bonus_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fagent_2eproto();
  friend void protobuf_AssignDesc_st_5fagent_2eproto();
  friend void protobuf_ShutdownFile_st_5fagent_2eproto();

  void InitAsDefaultInstance();
  static wiringagentcostweekbonus* default_instance_;
};
// ===================================================================


// ===================================================================

// agentinfo

// optional int32 userid = 1;
inline bool agentinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agentinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agentinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agentinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 agentinfo::userid() const {
  return userid_;
}
inline void agentinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string invitestr = 2;
inline bool agentinfo::has_invitestr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void agentinfo::set_has_invitestr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void agentinfo::clear_has_invitestr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void agentinfo::clear_invitestr() {
  if (invitestr_ != &::google::protobuf::internal::kEmptyString) {
    invitestr_->clear();
  }
  clear_has_invitestr();
}
inline const ::std::string& agentinfo::invitestr() const {
  return *invitestr_;
}
inline void agentinfo::set_invitestr(const ::std::string& value) {
  set_has_invitestr();
  if (invitestr_ == &::google::protobuf::internal::kEmptyString) {
    invitestr_ = new ::std::string;
  }
  invitestr_->assign(value);
}
inline void agentinfo::set_invitestr(const char* value) {
  set_has_invitestr();
  if (invitestr_ == &::google::protobuf::internal::kEmptyString) {
    invitestr_ = new ::std::string;
  }
  invitestr_->assign(value);
}
inline void agentinfo::set_invitestr(const char* value, size_t size) {
  set_has_invitestr();
  if (invitestr_ == &::google::protobuf::internal::kEmptyString) {
    invitestr_ = new ::std::string;
  }
  invitestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* agentinfo::mutable_invitestr() {
  set_has_invitestr();
  if (invitestr_ == &::google::protobuf::internal::kEmptyString) {
    invitestr_ = new ::std::string;
  }
  return invitestr_;
}
inline ::std::string* agentinfo::release_invitestr() {
  clear_has_invitestr();
  if (invitestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitestr_;
    invitestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void agentinfo::set_allocated_invitestr(::std::string* invitestr) {
  if (invitestr_ != &::google::protobuf::internal::kEmptyString) {
    delete invitestr_;
  }
  if (invitestr) {
    set_has_invitestr();
    invitestr_ = invitestr;
  } else {
    clear_has_invitestr();
    invitestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool agentinfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void agentinfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void agentinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void agentinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 agentinfo::level() const {
  return level_;
}
inline void agentinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 soleagent = 4;
inline bool agentinfo::has_soleagent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void agentinfo::set_has_soleagent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void agentinfo::clear_has_soleagent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void agentinfo::clear_soleagent() {
  soleagent_ = 0;
  clear_has_soleagent();
}
inline ::google::protobuf::int32 agentinfo::soleagent() const {
  return soleagent_;
}
inline void agentinfo::set_soleagent(::google::protobuf::int32 value) {
  set_has_soleagent();
  soleagent_ = value;
}

// optional int32 agent1 = 5;
inline bool agentinfo::has_agent1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void agentinfo::set_has_agent1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void agentinfo::clear_has_agent1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void agentinfo::clear_agent1() {
  agent1_ = 0;
  clear_has_agent1();
}
inline ::google::protobuf::int32 agentinfo::agent1() const {
  return agent1_;
}
inline void agentinfo::set_agent1(::google::protobuf::int32 value) {
  set_has_agent1();
  agent1_ = value;
}

// optional int32 agent2 = 6;
inline bool agentinfo::has_agent2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void agentinfo::set_has_agent2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void agentinfo::clear_has_agent2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void agentinfo::clear_agent2() {
  agent2_ = 0;
  clear_has_agent2();
}
inline ::google::protobuf::int32 agentinfo::agent2() const {
  return agent2_;
}
inline void agentinfo::set_agent2(::google::protobuf::int32 value) {
  set_has_agent2();
  agent2_ = value;
}

// optional int32 agent3 = 7;
inline bool agentinfo::has_agent3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void agentinfo::set_has_agent3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void agentinfo::clear_has_agent3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void agentinfo::clear_agent3() {
  agent3_ = 0;
  clear_has_agent3();
}
inline ::google::protobuf::int32 agentinfo::agent3() const {
  return agent3_;
}
inline void agentinfo::set_agent3(::google::protobuf::int32 value) {
  set_has_agent3();
  agent3_ = value;
}

// optional int32 agent4 = 8;
inline bool agentinfo::has_agent4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void agentinfo::set_has_agent4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void agentinfo::clear_has_agent4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void agentinfo::clear_agent4() {
  agent4_ = 0;
  clear_has_agent4();
}
inline ::google::protobuf::int32 agentinfo::agent4() const {
  return agent4_;
}
inline void agentinfo::set_agent4(::google::protobuf::int32 value) {
  set_has_agent4();
  agent4_ = value;
}

// optional string qrcodeurl = 10;
inline bool agentinfo::has_qrcodeurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void agentinfo::set_has_qrcodeurl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void agentinfo::clear_has_qrcodeurl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void agentinfo::clear_qrcodeurl() {
  if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_->clear();
  }
  clear_has_qrcodeurl();
}
inline const ::std::string& agentinfo::qrcodeurl() const {
  return *qrcodeurl_;
}
inline void agentinfo::set_qrcodeurl(const ::std::string& value) {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  qrcodeurl_->assign(value);
}
inline void agentinfo::set_qrcodeurl(const char* value) {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  qrcodeurl_->assign(value);
}
inline void agentinfo::set_qrcodeurl(const char* value, size_t size) {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  qrcodeurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* agentinfo::mutable_qrcodeurl() {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  return qrcodeurl_;
}
inline ::std::string* agentinfo::release_qrcodeurl() {
  clear_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrcodeurl_;
    qrcodeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void agentinfo::set_allocated_qrcodeurl(::std::string* qrcodeurl) {
  if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete qrcodeurl_;
  }
  if (qrcodeurl) {
    set_has_qrcodeurl();
    qrcodeurl_ = qrcodeurl;
  } else {
    clear_has_qrcodeurl();
    qrcodeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string datemark = 11;
inline bool agentinfo::has_datemark() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void agentinfo::set_has_datemark() {
  _has_bits_[0] |= 0x00000200u;
}
inline void agentinfo::clear_has_datemark() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void agentinfo::clear_datemark() {
  if (datemark_ != &::google::protobuf::internal::kEmptyString) {
    datemark_->clear();
  }
  clear_has_datemark();
}
inline const ::std::string& agentinfo::datemark() const {
  return *datemark_;
}
inline void agentinfo::set_datemark(const ::std::string& value) {
  set_has_datemark();
  if (datemark_ == &::google::protobuf::internal::kEmptyString) {
    datemark_ = new ::std::string;
  }
  datemark_->assign(value);
}
inline void agentinfo::set_datemark(const char* value) {
  set_has_datemark();
  if (datemark_ == &::google::protobuf::internal::kEmptyString) {
    datemark_ = new ::std::string;
  }
  datemark_->assign(value);
}
inline void agentinfo::set_datemark(const char* value, size_t size) {
  set_has_datemark();
  if (datemark_ == &::google::protobuf::internal::kEmptyString) {
    datemark_ = new ::std::string;
  }
  datemark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* agentinfo::mutable_datemark() {
  set_has_datemark();
  if (datemark_ == &::google::protobuf::internal::kEmptyString) {
    datemark_ = new ::std::string;
  }
  return datemark_;
}
inline ::std::string* agentinfo::release_datemark() {
  clear_has_datemark();
  if (datemark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datemark_;
    datemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void agentinfo::set_allocated_datemark(::std::string* datemark) {
  if (datemark_ != &::google::protobuf::internal::kEmptyString) {
    delete datemark_;
  }
  if (datemark) {
    set_has_datemark();
    datemark_ = datemark;
  } else {
    clear_has_datemark();
    datemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 moneymark = 12;
inline bool agentinfo::has_moneymark() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void agentinfo::set_has_moneymark() {
  _has_bits_[0] |= 0x00000400u;
}
inline void agentinfo::clear_has_moneymark() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void agentinfo::clear_moneymark() {
  moneymark_ = 0;
  clear_has_moneymark();
}
inline ::google::protobuf::int32 agentinfo::moneymark() const {
  return moneymark_;
}
inline void agentinfo::set_moneymark(::google::protobuf::int32 value) {
  set_has_moneymark();
  moneymark_ = value;
}

// optional int32 weekmoney = 13;
inline bool agentinfo::has_weekmoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void agentinfo::set_has_weekmoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void agentinfo::clear_has_weekmoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void agentinfo::clear_weekmoney() {
  weekmoney_ = 0;
  clear_has_weekmoney();
}
inline ::google::protobuf::int32 agentinfo::weekmoney() const {
  return weekmoney_;
}
inline void agentinfo::set_weekmoney(::google::protobuf::int32 value) {
  set_has_weekmoney();
  weekmoney_ = value;
}

// optional string exclusiveurl = 14;
inline bool agentinfo::has_exclusiveurl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void agentinfo::set_has_exclusiveurl() {
  _has_bits_[0] |= 0x00001000u;
}
inline void agentinfo::clear_has_exclusiveurl() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void agentinfo::clear_exclusiveurl() {
  if (exclusiveurl_ != &::google::protobuf::internal::kEmptyString) {
    exclusiveurl_->clear();
  }
  clear_has_exclusiveurl();
}
inline const ::std::string& agentinfo::exclusiveurl() const {
  return *exclusiveurl_;
}
inline void agentinfo::set_exclusiveurl(const ::std::string& value) {
  set_has_exclusiveurl();
  if (exclusiveurl_ == &::google::protobuf::internal::kEmptyString) {
    exclusiveurl_ = new ::std::string;
  }
  exclusiveurl_->assign(value);
}
inline void agentinfo::set_exclusiveurl(const char* value) {
  set_has_exclusiveurl();
  if (exclusiveurl_ == &::google::protobuf::internal::kEmptyString) {
    exclusiveurl_ = new ::std::string;
  }
  exclusiveurl_->assign(value);
}
inline void agentinfo::set_exclusiveurl(const char* value, size_t size) {
  set_has_exclusiveurl();
  if (exclusiveurl_ == &::google::protobuf::internal::kEmptyString) {
    exclusiveurl_ = new ::std::string;
  }
  exclusiveurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* agentinfo::mutable_exclusiveurl() {
  set_has_exclusiveurl();
  if (exclusiveurl_ == &::google::protobuf::internal::kEmptyString) {
    exclusiveurl_ = new ::std::string;
  }
  return exclusiveurl_;
}
inline ::std::string* agentinfo::release_exclusiveurl() {
  clear_has_exclusiveurl();
  if (exclusiveurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exclusiveurl_;
    exclusiveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void agentinfo::set_allocated_exclusiveurl(::std::string* exclusiveurl) {
  if (exclusiveurl_ != &::google::protobuf::internal::kEmptyString) {
    delete exclusiveurl_;
  }
  if (exclusiveurl) {
    set_has_exclusiveurl();
    exclusiveurl_ = exclusiveurl;
  } else {
    clear_has_exclusiveurl();
    exclusiveurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string alipay = 15;
inline bool agentinfo::has_alipay() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void agentinfo::set_has_alipay() {
  _has_bits_[0] |= 0x00002000u;
}
inline void agentinfo::clear_has_alipay() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void agentinfo::clear_alipay() {
  if (alipay_ != &::google::protobuf::internal::kEmptyString) {
    alipay_->clear();
  }
  clear_has_alipay();
}
inline const ::std::string& agentinfo::alipay() const {
  return *alipay_;
}
inline void agentinfo::set_alipay(const ::std::string& value) {
  set_has_alipay();
  if (alipay_ == &::google::protobuf::internal::kEmptyString) {
    alipay_ = new ::std::string;
  }
  alipay_->assign(value);
}
inline void agentinfo::set_alipay(const char* value) {
  set_has_alipay();
  if (alipay_ == &::google::protobuf::internal::kEmptyString) {
    alipay_ = new ::std::string;
  }
  alipay_->assign(value);
}
inline void agentinfo::set_alipay(const char* value, size_t size) {
  set_has_alipay();
  if (alipay_ == &::google::protobuf::internal::kEmptyString) {
    alipay_ = new ::std::string;
  }
  alipay_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* agentinfo::mutable_alipay() {
  set_has_alipay();
  if (alipay_ == &::google::protobuf::internal::kEmptyString) {
    alipay_ = new ::std::string;
  }
  return alipay_;
}
inline ::std::string* agentinfo::release_alipay() {
  clear_has_alipay();
  if (alipay_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alipay_;
    alipay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void agentinfo::set_allocated_alipay(::std::string* alipay) {
  if (alipay_ != &::google::protobuf::internal::kEmptyString) {
    delete alipay_;
  }
  if (alipay) {
    set_has_alipay();
    alipay_ = alipay;
  } else {
    clear_has_alipay();
    alipay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankaccount = 16;
inline bool agentinfo::has_bankaccount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void agentinfo::set_has_bankaccount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void agentinfo::clear_has_bankaccount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void agentinfo::clear_bankaccount() {
  if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
    bankaccount_->clear();
  }
  clear_has_bankaccount();
}
inline const ::std::string& agentinfo::bankaccount() const {
  return *bankaccount_;
}
inline void agentinfo::set_bankaccount(const ::std::string& value) {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  bankaccount_->assign(value);
}
inline void agentinfo::set_bankaccount(const char* value) {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  bankaccount_->assign(value);
}
inline void agentinfo::set_bankaccount(const char* value, size_t size) {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  bankaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* agentinfo::mutable_bankaccount() {
  set_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    bankaccount_ = new ::std::string;
  }
  return bankaccount_;
}
inline ::std::string* agentinfo::release_bankaccount() {
  clear_has_bankaccount();
  if (bankaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankaccount_;
    bankaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void agentinfo::set_allocated_bankaccount(::std::string* bankaccount) {
  if (bankaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete bankaccount_;
  }
  if (bankaccount) {
    set_has_bankaccount();
    bankaccount_ = bankaccount;
  } else {
    clear_has_bankaccount();
    bankaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 wiringid = 17;
inline bool agentinfo::has_wiringid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void agentinfo::set_has_wiringid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void agentinfo::clear_has_wiringid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void agentinfo::clear_wiringid() {
  wiringid_ = 0;
  clear_has_wiringid();
}
inline ::google::protobuf::int32 agentinfo::wiringid() const {
  return wiringid_;
}
inline void agentinfo::set_wiringid(::google::protobuf::int32 value) {
  set_has_wiringid();
  wiringid_ = value;
}

// optional int32 grade = 18;
inline bool agentinfo::has_grade() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void agentinfo::set_has_grade() {
  _has_bits_[0] |= 0x00010000u;
}
inline void agentinfo::clear_has_grade() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void agentinfo::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 agentinfo::grade() const {
  return grade_;
}
inline void agentinfo::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// wiringinfo

// optional int32 id = 1;
inline bool wiringinfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringinfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringinfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 wiringinfo::id() const {
  return id_;
}
inline void wiringinfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool wiringinfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringinfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& wiringinfo::name() const {
  return *name_;
}
inline void wiringinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void wiringinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void wiringinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* wiringinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringinfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ownerid = 3;
inline bool wiringinfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringinfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringinfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringinfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 wiringinfo::ownerid() const {
  return ownerid_;
}
inline void wiringinfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional int32 maxnum = 4;
inline bool wiringinfo::has_maxnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringinfo::set_has_maxnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringinfo::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringinfo::clear_maxnum() {
  maxnum_ = 0;
  clear_has_maxnum();
}
inline ::google::protobuf::int32 wiringinfo::maxnum() const {
  return maxnum_;
}
inline void wiringinfo::set_maxnum(::google::protobuf::int32 value) {
  set_has_maxnum();
  maxnum_ = value;
}

// optional int32 currnum = 5;
inline bool wiringinfo::has_currnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringinfo::set_has_currnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringinfo::clear_has_currnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringinfo::clear_currnum() {
  currnum_ = 0;
  clear_has_currnum();
}
inline ::google::protobuf::int32 wiringinfo::currnum() const {
  return currnum_;
}
inline void wiringinfo::set_currnum(::google::protobuf::int32 value) {
  set_has_currnum();
  currnum_ = value;
}

// optional int32 usernum = 6;
inline bool wiringinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wiringinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wiringinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wiringinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 wiringinfo::usernum() const {
  return usernum_;
}
inline void wiringinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional string createdate = 7;
inline bool wiringinfo::has_createdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wiringinfo::set_has_createdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wiringinfo::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wiringinfo::clear_createdate() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    createdate_->clear();
  }
  clear_has_createdate();
}
inline const ::std::string& wiringinfo::createdate() const {
  return *createdate_;
}
inline void wiringinfo::set_createdate(const ::std::string& value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void wiringinfo::set_createdate(const char* value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void wiringinfo::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringinfo::mutable_createdate() {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  return createdate_;
}
inline ::std::string* wiringinfo::release_createdate() {
  clear_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdate_;
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringinfo::set_allocated_createdate(::std::string* createdate) {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (createdate) {
    set_has_createdate();
    createdate_ = createdate;
  } else {
    clear_has_createdate();
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 newaddnum = 8;
inline bool wiringinfo::has_newaddnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wiringinfo::set_has_newaddnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wiringinfo::clear_has_newaddnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wiringinfo::clear_newaddnum() {
  newaddnum_ = 0;
  clear_has_newaddnum();
}
inline ::google::protobuf::int32 wiringinfo::newaddnum() const {
  return newaddnum_;
}
inline void wiringinfo::set_newaddnum(::google::protobuf::int32 value) {
  set_has_newaddnum();
  newaddnum_ = value;
}

// optional string qrcodeurl = 9;
inline bool wiringinfo::has_qrcodeurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wiringinfo::set_has_qrcodeurl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wiringinfo::clear_has_qrcodeurl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wiringinfo::clear_qrcodeurl() {
  if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_->clear();
  }
  clear_has_qrcodeurl();
}
inline const ::std::string& wiringinfo::qrcodeurl() const {
  return *qrcodeurl_;
}
inline void wiringinfo::set_qrcodeurl(const ::std::string& value) {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  qrcodeurl_->assign(value);
}
inline void wiringinfo::set_qrcodeurl(const char* value) {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  qrcodeurl_->assign(value);
}
inline void wiringinfo::set_qrcodeurl(const char* value, size_t size) {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  qrcodeurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringinfo::mutable_qrcodeurl() {
  set_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    qrcodeurl_ = new ::std::string;
  }
  return qrcodeurl_;
}
inline ::std::string* wiringinfo::release_qrcodeurl() {
  clear_has_qrcodeurl();
  if (qrcodeurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrcodeurl_;
    qrcodeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringinfo::set_allocated_qrcodeurl(::std::string* qrcodeurl) {
  if (qrcodeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete qrcodeurl_;
  }
  if (qrcodeurl) {
    set_has_qrcodeurl();
    qrcodeurl_ = qrcodeurl;
  } else {
    clear_has_qrcodeurl();
    qrcodeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// wiringdayachieve

// optional string datestr = 1;
inline bool wiringdayachieve::has_datestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringdayachieve::set_has_datestr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringdayachieve::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringdayachieve::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& wiringdayachieve::datestr() const {
  return *datestr_;
}
inline void wiringdayachieve::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringdayachieve::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringdayachieve::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdayachieve::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* wiringdayachieve::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdayachieve::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 allach = 2;
inline bool wiringdayachieve::has_allach() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringdayachieve::set_has_allach() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringdayachieve::clear_has_allach() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringdayachieve::clear_allach() {
  allach_ = 0;
  clear_has_allach();
}
inline ::google::protobuf::int32 wiringdayachieve::allach() const {
  return allach_;
}
inline void wiringdayachieve::set_allach(::google::protobuf::int32 value) {
  set_has_allach();
  allach_ = value;
}

// optional int32 teamach = 3;
inline bool wiringdayachieve::has_teamach() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringdayachieve::set_has_teamach() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringdayachieve::clear_has_teamach() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringdayachieve::clear_teamach() {
  teamach_ = 0;
  clear_has_teamach();
}
inline ::google::protobuf::int32 wiringdayachieve::teamach() const {
  return teamach_;
}
inline void wiringdayachieve::set_teamach(::google::protobuf::int32 value) {
  set_has_teamach();
  teamach_ = value;
}

// optional int32 selfach = 4;
inline bool wiringdayachieve::has_selfach() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringdayachieve::set_has_selfach() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringdayachieve::clear_has_selfach() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringdayachieve::clear_selfach() {
  selfach_ = 0;
  clear_has_selfach();
}
inline ::google::protobuf::int32 wiringdayachieve::selfach() const {
  return selfach_;
}
inline void wiringdayachieve::set_selfach(::google::protobuf::int32 value) {
  set_has_selfach();
  selfach_ = value;
}

// optional string allach_1 = 5;
inline bool wiringdayachieve::has_allach_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringdayachieve::set_has_allach_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringdayachieve::clear_has_allach_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringdayachieve::clear_allach_1() {
  if (allach_1_ != &::google::protobuf::internal::kEmptyString) {
    allach_1_->clear();
  }
  clear_has_allach_1();
}
inline const ::std::string& wiringdayachieve::allach_1() const {
  return *allach_1_;
}
inline void wiringdayachieve::set_allach_1(const ::std::string& value) {
  set_has_allach_1();
  if (allach_1_ == &::google::protobuf::internal::kEmptyString) {
    allach_1_ = new ::std::string;
  }
  allach_1_->assign(value);
}
inline void wiringdayachieve::set_allach_1(const char* value) {
  set_has_allach_1();
  if (allach_1_ == &::google::protobuf::internal::kEmptyString) {
    allach_1_ = new ::std::string;
  }
  allach_1_->assign(value);
}
inline void wiringdayachieve::set_allach_1(const char* value, size_t size) {
  set_has_allach_1();
  if (allach_1_ == &::google::protobuf::internal::kEmptyString) {
    allach_1_ = new ::std::string;
  }
  allach_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdayachieve::mutable_allach_1() {
  set_has_allach_1();
  if (allach_1_ == &::google::protobuf::internal::kEmptyString) {
    allach_1_ = new ::std::string;
  }
  return allach_1_;
}
inline ::std::string* wiringdayachieve::release_allach_1() {
  clear_has_allach_1();
  if (allach_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = allach_1_;
    allach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdayachieve::set_allocated_allach_1(::std::string* allach_1) {
  if (allach_1_ != &::google::protobuf::internal::kEmptyString) {
    delete allach_1_;
  }
  if (allach_1) {
    set_has_allach_1();
    allach_1_ = allach_1;
  } else {
    clear_has_allach_1();
    allach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string teamach_1 = 6;
inline bool wiringdayachieve::has_teamach_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wiringdayachieve::set_has_teamach_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wiringdayachieve::clear_has_teamach_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wiringdayachieve::clear_teamach_1() {
  if (teamach_1_ != &::google::protobuf::internal::kEmptyString) {
    teamach_1_->clear();
  }
  clear_has_teamach_1();
}
inline const ::std::string& wiringdayachieve::teamach_1() const {
  return *teamach_1_;
}
inline void wiringdayachieve::set_teamach_1(const ::std::string& value) {
  set_has_teamach_1();
  if (teamach_1_ == &::google::protobuf::internal::kEmptyString) {
    teamach_1_ = new ::std::string;
  }
  teamach_1_->assign(value);
}
inline void wiringdayachieve::set_teamach_1(const char* value) {
  set_has_teamach_1();
  if (teamach_1_ == &::google::protobuf::internal::kEmptyString) {
    teamach_1_ = new ::std::string;
  }
  teamach_1_->assign(value);
}
inline void wiringdayachieve::set_teamach_1(const char* value, size_t size) {
  set_has_teamach_1();
  if (teamach_1_ == &::google::protobuf::internal::kEmptyString) {
    teamach_1_ = new ::std::string;
  }
  teamach_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdayachieve::mutable_teamach_1() {
  set_has_teamach_1();
  if (teamach_1_ == &::google::protobuf::internal::kEmptyString) {
    teamach_1_ = new ::std::string;
  }
  return teamach_1_;
}
inline ::std::string* wiringdayachieve::release_teamach_1() {
  clear_has_teamach_1();
  if (teamach_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = teamach_1_;
    teamach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdayachieve::set_allocated_teamach_1(::std::string* teamach_1) {
  if (teamach_1_ != &::google::protobuf::internal::kEmptyString) {
    delete teamach_1_;
  }
  if (teamach_1) {
    set_has_teamach_1();
    teamach_1_ = teamach_1;
  } else {
    clear_has_teamach_1();
    teamach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string selfach_1 = 7;
inline bool wiringdayachieve::has_selfach_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wiringdayachieve::set_has_selfach_1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wiringdayachieve::clear_has_selfach_1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wiringdayachieve::clear_selfach_1() {
  if (selfach_1_ != &::google::protobuf::internal::kEmptyString) {
    selfach_1_->clear();
  }
  clear_has_selfach_1();
}
inline const ::std::string& wiringdayachieve::selfach_1() const {
  return *selfach_1_;
}
inline void wiringdayachieve::set_selfach_1(const ::std::string& value) {
  set_has_selfach_1();
  if (selfach_1_ == &::google::protobuf::internal::kEmptyString) {
    selfach_1_ = new ::std::string;
  }
  selfach_1_->assign(value);
}
inline void wiringdayachieve::set_selfach_1(const char* value) {
  set_has_selfach_1();
  if (selfach_1_ == &::google::protobuf::internal::kEmptyString) {
    selfach_1_ = new ::std::string;
  }
  selfach_1_->assign(value);
}
inline void wiringdayachieve::set_selfach_1(const char* value, size_t size) {
  set_has_selfach_1();
  if (selfach_1_ == &::google::protobuf::internal::kEmptyString) {
    selfach_1_ = new ::std::string;
  }
  selfach_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdayachieve::mutable_selfach_1() {
  set_has_selfach_1();
  if (selfach_1_ == &::google::protobuf::internal::kEmptyString) {
    selfach_1_ = new ::std::string;
  }
  return selfach_1_;
}
inline ::std::string* wiringdayachieve::release_selfach_1() {
  clear_has_selfach_1();
  if (selfach_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selfach_1_;
    selfach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdayachieve::set_allocated_selfach_1(::std::string* selfach_1) {
  if (selfach_1_ != &::google::protobuf::internal::kEmptyString) {
    delete selfach_1_;
  }
  if (selfach_1) {
    set_has_selfach_1();
    selfach_1_ = selfach_1;
  } else {
    clear_has_selfach_1();
    selfach_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 getrate = 8;
inline bool wiringdayachieve::has_getrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wiringdayachieve::set_has_getrate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wiringdayachieve::clear_has_getrate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wiringdayachieve::clear_getrate() {
  getrate_ = 0;
  clear_has_getrate();
}
inline ::google::protobuf::int32 wiringdayachieve::getrate() const {
  return getrate_;
}
inline void wiringdayachieve::set_getrate(::google::protobuf::int32 value) {
  set_has_getrate();
  getrate_ = value;
}

// optional int32 getmoney = 9;
inline bool wiringdayachieve::has_getmoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wiringdayachieve::set_has_getmoney() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wiringdayachieve::clear_has_getmoney() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wiringdayachieve::clear_getmoney() {
  getmoney_ = 0;
  clear_has_getmoney();
}
inline ::google::protobuf::int32 wiringdayachieve::getmoney() const {
  return getmoney_;
}
inline void wiringdayachieve::set_getmoney(::google::protobuf::int32 value) {
  set_has_getmoney();
  getmoney_ = value;
}

// optional string fivelevel_ach = 10;
inline bool wiringdayachieve::has_fivelevel_ach() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void wiringdayachieve::set_has_fivelevel_ach() {
  _has_bits_[0] |= 0x00000200u;
}
inline void wiringdayachieve::clear_has_fivelevel_ach() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void wiringdayachieve::clear_fivelevel_ach() {
  if (fivelevel_ach_ != &::google::protobuf::internal::kEmptyString) {
    fivelevel_ach_->clear();
  }
  clear_has_fivelevel_ach();
}
inline const ::std::string& wiringdayachieve::fivelevel_ach() const {
  return *fivelevel_ach_;
}
inline void wiringdayachieve::set_fivelevel_ach(const ::std::string& value) {
  set_has_fivelevel_ach();
  if (fivelevel_ach_ == &::google::protobuf::internal::kEmptyString) {
    fivelevel_ach_ = new ::std::string;
  }
  fivelevel_ach_->assign(value);
}
inline void wiringdayachieve::set_fivelevel_ach(const char* value) {
  set_has_fivelevel_ach();
  if (fivelevel_ach_ == &::google::protobuf::internal::kEmptyString) {
    fivelevel_ach_ = new ::std::string;
  }
  fivelevel_ach_->assign(value);
}
inline void wiringdayachieve::set_fivelevel_ach(const char* value, size_t size) {
  set_has_fivelevel_ach();
  if (fivelevel_ach_ == &::google::protobuf::internal::kEmptyString) {
    fivelevel_ach_ = new ::std::string;
  }
  fivelevel_ach_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdayachieve::mutable_fivelevel_ach() {
  set_has_fivelevel_ach();
  if (fivelevel_ach_ == &::google::protobuf::internal::kEmptyString) {
    fivelevel_ach_ = new ::std::string;
  }
  return fivelevel_ach_;
}
inline ::std::string* wiringdayachieve::release_fivelevel_ach() {
  clear_has_fivelevel_ach();
  if (fivelevel_ach_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fivelevel_ach_;
    fivelevel_ach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdayachieve::set_allocated_fivelevel_ach(::std::string* fivelevel_ach) {
  if (fivelevel_ach_ != &::google::protobuf::internal::kEmptyString) {
    delete fivelevel_ach_;
  }
  if (fivelevel_ach) {
    set_has_fivelevel_ach();
    fivelevel_ach_ = fivelevel_ach;
  } else {
    clear_has_fivelevel_ach();
    fivelevel_ach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// wiringawardinfo

// optional int32 awardid = 1;
inline bool wiringawardinfo::has_awardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringawardinfo::set_has_awardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringawardinfo::clear_has_awardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringawardinfo::clear_awardid() {
  awardid_ = 0;
  clear_has_awardid();
}
inline ::google::protobuf::int32 wiringawardinfo::awardid() const {
  return awardid_;
}
inline void wiringawardinfo::set_awardid(::google::protobuf::int32 value) {
  set_has_awardid();
  awardid_ = value;
}

// optional int32 userid = 2;
inline bool wiringawardinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringawardinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringawardinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringawardinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 wiringawardinfo::userid() const {
  return userid_;
}
inline void wiringawardinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string datestr = 3;
inline bool wiringawardinfo::has_datestr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringawardinfo::set_has_datestr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringawardinfo::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringawardinfo::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& wiringawardinfo::datestr() const {
  return *datestr_;
}
inline void wiringawardinfo::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringawardinfo::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringawardinfo::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringawardinfo::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* wiringawardinfo::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringawardinfo::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weekallach = 4;
inline bool wiringawardinfo::has_weekallach() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringawardinfo::set_has_weekallach() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringawardinfo::clear_has_weekallach() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringawardinfo::clear_weekallach() {
  if (weekallach_ != &::google::protobuf::internal::kEmptyString) {
    weekallach_->clear();
  }
  clear_has_weekallach();
}
inline const ::std::string& wiringawardinfo::weekallach() const {
  return *weekallach_;
}
inline void wiringawardinfo::set_weekallach(const ::std::string& value) {
  set_has_weekallach();
  if (weekallach_ == &::google::protobuf::internal::kEmptyString) {
    weekallach_ = new ::std::string;
  }
  weekallach_->assign(value);
}
inline void wiringawardinfo::set_weekallach(const char* value) {
  set_has_weekallach();
  if (weekallach_ == &::google::protobuf::internal::kEmptyString) {
    weekallach_ = new ::std::string;
  }
  weekallach_->assign(value);
}
inline void wiringawardinfo::set_weekallach(const char* value, size_t size) {
  set_has_weekallach();
  if (weekallach_ == &::google::protobuf::internal::kEmptyString) {
    weekallach_ = new ::std::string;
  }
  weekallach_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringawardinfo::mutable_weekallach() {
  set_has_weekallach();
  if (weekallach_ == &::google::protobuf::internal::kEmptyString) {
    weekallach_ = new ::std::string;
  }
  return weekallach_;
}
inline ::std::string* wiringawardinfo::release_weekallach() {
  clear_has_weekallach();
  if (weekallach_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weekallach_;
    weekallach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringawardinfo::set_allocated_weekallach(::std::string* weekallach) {
  if (weekallach_ != &::google::protobuf::internal::kEmptyString) {
    delete weekallach_;
  }
  if (weekallach) {
    set_has_weekallach();
    weekallach_ = weekallach;
  } else {
    clear_has_weekallach();
    weekallach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weekteamach = 5;
inline bool wiringawardinfo::has_weekteamach() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringawardinfo::set_has_weekteamach() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringawardinfo::clear_has_weekteamach() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringawardinfo::clear_weekteamach() {
  if (weekteamach_ != &::google::protobuf::internal::kEmptyString) {
    weekteamach_->clear();
  }
  clear_has_weekteamach();
}
inline const ::std::string& wiringawardinfo::weekteamach() const {
  return *weekteamach_;
}
inline void wiringawardinfo::set_weekteamach(const ::std::string& value) {
  set_has_weekteamach();
  if (weekteamach_ == &::google::protobuf::internal::kEmptyString) {
    weekteamach_ = new ::std::string;
  }
  weekteamach_->assign(value);
}
inline void wiringawardinfo::set_weekteamach(const char* value) {
  set_has_weekteamach();
  if (weekteamach_ == &::google::protobuf::internal::kEmptyString) {
    weekteamach_ = new ::std::string;
  }
  weekteamach_->assign(value);
}
inline void wiringawardinfo::set_weekteamach(const char* value, size_t size) {
  set_has_weekteamach();
  if (weekteamach_ == &::google::protobuf::internal::kEmptyString) {
    weekteamach_ = new ::std::string;
  }
  weekteamach_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringawardinfo::mutable_weekteamach() {
  set_has_weekteamach();
  if (weekteamach_ == &::google::protobuf::internal::kEmptyString) {
    weekteamach_ = new ::std::string;
  }
  return weekteamach_;
}
inline ::std::string* wiringawardinfo::release_weekteamach() {
  clear_has_weekteamach();
  if (weekteamach_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weekteamach_;
    weekteamach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringawardinfo::set_allocated_weekteamach(::std::string* weekteamach) {
  if (weekteamach_ != &::google::protobuf::internal::kEmptyString) {
    delete weekteamach_;
  }
  if (weekteamach) {
    set_has_weekteamach();
    weekteamach_ = weekteamach;
  } else {
    clear_has_weekteamach();
    weekteamach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weekselfach = 6;
inline bool wiringawardinfo::has_weekselfach() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wiringawardinfo::set_has_weekselfach() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wiringawardinfo::clear_has_weekselfach() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wiringawardinfo::clear_weekselfach() {
  if (weekselfach_ != &::google::protobuf::internal::kEmptyString) {
    weekselfach_->clear();
  }
  clear_has_weekselfach();
}
inline const ::std::string& wiringawardinfo::weekselfach() const {
  return *weekselfach_;
}
inline void wiringawardinfo::set_weekselfach(const ::std::string& value) {
  set_has_weekselfach();
  if (weekselfach_ == &::google::protobuf::internal::kEmptyString) {
    weekselfach_ = new ::std::string;
  }
  weekselfach_->assign(value);
}
inline void wiringawardinfo::set_weekselfach(const char* value) {
  set_has_weekselfach();
  if (weekselfach_ == &::google::protobuf::internal::kEmptyString) {
    weekselfach_ = new ::std::string;
  }
  weekselfach_->assign(value);
}
inline void wiringawardinfo::set_weekselfach(const char* value, size_t size) {
  set_has_weekselfach();
  if (weekselfach_ == &::google::protobuf::internal::kEmptyString) {
    weekselfach_ = new ::std::string;
  }
  weekselfach_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringawardinfo::mutable_weekselfach() {
  set_has_weekselfach();
  if (weekselfach_ == &::google::protobuf::internal::kEmptyString) {
    weekselfach_ = new ::std::string;
  }
  return weekselfach_;
}
inline ::std::string* wiringawardinfo::release_weekselfach() {
  clear_has_weekselfach();
  if (weekselfach_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weekselfach_;
    weekselfach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringawardinfo::set_allocated_weekselfach(::std::string* weekselfach) {
  if (weekselfach_ != &::google::protobuf::internal::kEmptyString) {
    delete weekselfach_;
  }
  if (weekselfach) {
    set_has_weekselfach();
    weekselfach_ = weekselfach;
  } else {
    clear_has_weekselfach();
    weekselfach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string awardnum = 7;
inline bool wiringawardinfo::has_awardnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wiringawardinfo::set_has_awardnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wiringawardinfo::clear_has_awardnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wiringawardinfo::clear_awardnum() {
  if (awardnum_ != &::google::protobuf::internal::kEmptyString) {
    awardnum_->clear();
  }
  clear_has_awardnum();
}
inline const ::std::string& wiringawardinfo::awardnum() const {
  return *awardnum_;
}
inline void wiringawardinfo::set_awardnum(const ::std::string& value) {
  set_has_awardnum();
  if (awardnum_ == &::google::protobuf::internal::kEmptyString) {
    awardnum_ = new ::std::string;
  }
  awardnum_->assign(value);
}
inline void wiringawardinfo::set_awardnum(const char* value) {
  set_has_awardnum();
  if (awardnum_ == &::google::protobuf::internal::kEmptyString) {
    awardnum_ = new ::std::string;
  }
  awardnum_->assign(value);
}
inline void wiringawardinfo::set_awardnum(const char* value, size_t size) {
  set_has_awardnum();
  if (awardnum_ == &::google::protobuf::internal::kEmptyString) {
    awardnum_ = new ::std::string;
  }
  awardnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringawardinfo::mutable_awardnum() {
  set_has_awardnum();
  if (awardnum_ == &::google::protobuf::internal::kEmptyString) {
    awardnum_ = new ::std::string;
  }
  return awardnum_;
}
inline ::std::string* wiringawardinfo::release_awardnum() {
  clear_has_awardnum();
  if (awardnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardnum_;
    awardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringawardinfo::set_allocated_awardnum(::std::string* awardnum) {
  if (awardnum_ != &::google::protobuf::internal::kEmptyString) {
    delete awardnum_;
  }
  if (awardnum) {
    set_has_awardnum();
    awardnum_ = awardnum;
  } else {
    clear_has_awardnum();
    awardnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 8;
inline bool wiringawardinfo::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wiringawardinfo::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wiringawardinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wiringawardinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 wiringawardinfo::state() const {
  return state_;
}
inline void wiringawardinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string realhair = 9;
inline bool wiringawardinfo::has_realhair() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wiringawardinfo::set_has_realhair() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wiringawardinfo::clear_has_realhair() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wiringawardinfo::clear_realhair() {
  if (realhair_ != &::google::protobuf::internal::kEmptyString) {
    realhair_->clear();
  }
  clear_has_realhair();
}
inline const ::std::string& wiringawardinfo::realhair() const {
  return *realhair_;
}
inline void wiringawardinfo::set_realhair(const ::std::string& value) {
  set_has_realhair();
  if (realhair_ == &::google::protobuf::internal::kEmptyString) {
    realhair_ = new ::std::string;
  }
  realhair_->assign(value);
}
inline void wiringawardinfo::set_realhair(const char* value) {
  set_has_realhair();
  if (realhair_ == &::google::protobuf::internal::kEmptyString) {
    realhair_ = new ::std::string;
  }
  realhair_->assign(value);
}
inline void wiringawardinfo::set_realhair(const char* value, size_t size) {
  set_has_realhair();
  if (realhair_ == &::google::protobuf::internal::kEmptyString) {
    realhair_ = new ::std::string;
  }
  realhair_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringawardinfo::mutable_realhair() {
  set_has_realhair();
  if (realhair_ == &::google::protobuf::internal::kEmptyString) {
    realhair_ = new ::std::string;
  }
  return realhair_;
}
inline ::std::string* wiringawardinfo::release_realhair() {
  clear_has_realhair();
  if (realhair_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realhair_;
    realhair_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringawardinfo::set_allocated_realhair(::std::string* realhair) {
  if (realhair_ != &::google::protobuf::internal::kEmptyString) {
    delete realhair_;
  }
  if (realhair) {
    set_has_realhair();
    realhair_ = realhair;
  } else {
    clear_has_realhair();
    realhair_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string preissue = 10;
inline bool wiringawardinfo::has_preissue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void wiringawardinfo::set_has_preissue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void wiringawardinfo::clear_has_preissue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void wiringawardinfo::clear_preissue() {
  if (preissue_ != &::google::protobuf::internal::kEmptyString) {
    preissue_->clear();
  }
  clear_has_preissue();
}
inline const ::std::string& wiringawardinfo::preissue() const {
  return *preissue_;
}
inline void wiringawardinfo::set_preissue(const ::std::string& value) {
  set_has_preissue();
  if (preissue_ == &::google::protobuf::internal::kEmptyString) {
    preissue_ = new ::std::string;
  }
  preissue_->assign(value);
}
inline void wiringawardinfo::set_preissue(const char* value) {
  set_has_preissue();
  if (preissue_ == &::google::protobuf::internal::kEmptyString) {
    preissue_ = new ::std::string;
  }
  preissue_->assign(value);
}
inline void wiringawardinfo::set_preissue(const char* value, size_t size) {
  set_has_preissue();
  if (preissue_ == &::google::protobuf::internal::kEmptyString) {
    preissue_ = new ::std::string;
  }
  preissue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringawardinfo::mutable_preissue() {
  set_has_preissue();
  if (preissue_ == &::google::protobuf::internal::kEmptyString) {
    preissue_ = new ::std::string;
  }
  return preissue_;
}
inline ::std::string* wiringawardinfo::release_preissue() {
  clear_has_preissue();
  if (preissue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preissue_;
    preissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringawardinfo::set_allocated_preissue(::std::string* preissue) {
  if (preissue_ != &::google::protobuf::internal::kEmptyString) {
    delete preissue_;
  }
  if (preissue) {
    set_has_preissue();
    preissue_ = preissue;
  } else {
    clear_has_preissue();
    preissue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// wiringwithdrawinfo

// optional string drawid = 1;
inline bool wiringwithdrawinfo::has_drawid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringwithdrawinfo::set_has_drawid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringwithdrawinfo::clear_has_drawid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringwithdrawinfo::clear_drawid() {
  if (drawid_ != &::google::protobuf::internal::kEmptyString) {
    drawid_->clear();
  }
  clear_has_drawid();
}
inline const ::std::string& wiringwithdrawinfo::drawid() const {
  return *drawid_;
}
inline void wiringwithdrawinfo::set_drawid(const ::std::string& value) {
  set_has_drawid();
  if (drawid_ == &::google::protobuf::internal::kEmptyString) {
    drawid_ = new ::std::string;
  }
  drawid_->assign(value);
}
inline void wiringwithdrawinfo::set_drawid(const char* value) {
  set_has_drawid();
  if (drawid_ == &::google::protobuf::internal::kEmptyString) {
    drawid_ = new ::std::string;
  }
  drawid_->assign(value);
}
inline void wiringwithdrawinfo::set_drawid(const char* value, size_t size) {
  set_has_drawid();
  if (drawid_ == &::google::protobuf::internal::kEmptyString) {
    drawid_ = new ::std::string;
  }
  drawid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringwithdrawinfo::mutable_drawid() {
  set_has_drawid();
  if (drawid_ == &::google::protobuf::internal::kEmptyString) {
    drawid_ = new ::std::string;
  }
  return drawid_;
}
inline ::std::string* wiringwithdrawinfo::release_drawid() {
  clear_has_drawid();
  if (drawid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = drawid_;
    drawid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringwithdrawinfo::set_allocated_drawid(::std::string* drawid) {
  if (drawid_ != &::google::protobuf::internal::kEmptyString) {
    delete drawid_;
  }
  if (drawid) {
    set_has_drawid();
    drawid_ = drawid;
  } else {
    clear_has_drawid();
    drawid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 userid = 2;
inline bool wiringwithdrawinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringwithdrawinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringwithdrawinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringwithdrawinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 wiringwithdrawinfo::userid() const {
  return userid_;
}
inline void wiringwithdrawinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string datestr = 3;
inline bool wiringwithdrawinfo::has_datestr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringwithdrawinfo::set_has_datestr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringwithdrawinfo::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringwithdrawinfo::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& wiringwithdrawinfo::datestr() const {
  return *datestr_;
}
inline void wiringwithdrawinfo::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringwithdrawinfo::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringwithdrawinfo::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringwithdrawinfo::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* wiringwithdrawinfo::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringwithdrawinfo::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string amount = 4;
inline bool wiringwithdrawinfo::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringwithdrawinfo::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringwithdrawinfo::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringwithdrawinfo::clear_amount() {
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    amount_->clear();
  }
  clear_has_amount();
}
inline const ::std::string& wiringwithdrawinfo::amount() const {
  return *amount_;
}
inline void wiringwithdrawinfo::set_amount(const ::std::string& value) {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  amount_->assign(value);
}
inline void wiringwithdrawinfo::set_amount(const char* value) {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  amount_->assign(value);
}
inline void wiringwithdrawinfo::set_amount(const char* value, size_t size) {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  amount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringwithdrawinfo::mutable_amount() {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  return amount_;
}
inline ::std::string* wiringwithdrawinfo::release_amount() {
  clear_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = amount_;
    amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringwithdrawinfo::set_allocated_amount(::std::string* amount) {
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (amount) {
    set_has_amount();
    amount_ = amount;
  } else {
    clear_has_amount();
    amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 drawtypw = 5;
inline bool wiringwithdrawinfo::has_drawtypw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringwithdrawinfo::set_has_drawtypw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringwithdrawinfo::clear_has_drawtypw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringwithdrawinfo::clear_drawtypw() {
  drawtypw_ = 0;
  clear_has_drawtypw();
}
inline ::google::protobuf::int32 wiringwithdrawinfo::drawtypw() const {
  return drawtypw_;
}
inline void wiringwithdrawinfo::set_drawtypw(::google::protobuf::int32 value) {
  set_has_drawtypw();
  drawtypw_ = value;
}

// optional string account = 6;
inline bool wiringwithdrawinfo::has_account() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wiringwithdrawinfo::set_has_account() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wiringwithdrawinfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wiringwithdrawinfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& wiringwithdrawinfo::account() const {
  return *account_;
}
inline void wiringwithdrawinfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void wiringwithdrawinfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void wiringwithdrawinfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringwithdrawinfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* wiringwithdrawinfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringwithdrawinfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 7;
inline bool wiringwithdrawinfo::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wiringwithdrawinfo::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wiringwithdrawinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wiringwithdrawinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 wiringwithdrawinfo::state() const {
  return state_;
}
inline void wiringwithdrawinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// wiringuserinfo

// optional int32 id = 1;
inline bool wiringuserinfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringuserinfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringuserinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringuserinfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 wiringuserinfo::id() const {
  return id_;
}
inline void wiringuserinfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool wiringuserinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringuserinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringuserinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringuserinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 wiringuserinfo::userid() const {
  return userid_;
}
inline void wiringuserinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 wiringid = 3;
inline bool wiringuserinfo::has_wiringid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringuserinfo::set_has_wiringid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringuserinfo::clear_has_wiringid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringuserinfo::clear_wiringid() {
  wiringid_ = 0;
  clear_has_wiringid();
}
inline ::google::protobuf::int32 wiringuserinfo::wiringid() const {
  return wiringid_;
}
inline void wiringuserinfo::set_wiringid(::google::protobuf::int32 value) {
  set_has_wiringid();
  wiringid_ = value;
}

// optional string createdate = 4;
inline bool wiringuserinfo::has_createdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringuserinfo::set_has_createdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringuserinfo::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringuserinfo::clear_createdate() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    createdate_->clear();
  }
  clear_has_createdate();
}
inline const ::std::string& wiringuserinfo::createdate() const {
  return *createdate_;
}
inline void wiringuserinfo::set_createdate(const ::std::string& value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void wiringuserinfo::set_createdate(const char* value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void wiringuserinfo::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringuserinfo::mutable_createdate() {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  return createdate_;
}
inline ::std::string* wiringuserinfo::release_createdate() {
  clear_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdate_;
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringuserinfo::set_allocated_createdate(::std::string* createdate) {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (createdate) {
    set_has_createdate();
    createdate_ = createdate;
  } else {
    clear_has_createdate();
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prelevel = 5;
inline bool wiringuserinfo::has_prelevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringuserinfo::set_has_prelevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringuserinfo::clear_has_prelevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringuserinfo::clear_prelevel() {
  prelevel_ = 0;
  clear_has_prelevel();
}
inline ::google::protobuf::int32 wiringuserinfo::prelevel() const {
  return prelevel_;
}
inline void wiringuserinfo::set_prelevel(::google::protobuf::int32 value) {
  set_has_prelevel();
  prelevel_ = value;
}

// optional int32 level = 6;
inline bool wiringuserinfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wiringuserinfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wiringuserinfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wiringuserinfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 wiringuserinfo::level() const {
  return level_;
}
inline void wiringuserinfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string allperformance = 7;
inline bool wiringuserinfo::has_allperformance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wiringuserinfo::set_has_allperformance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wiringuserinfo::clear_has_allperformance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wiringuserinfo::clear_allperformance() {
  if (allperformance_ != &::google::protobuf::internal::kEmptyString) {
    allperformance_->clear();
  }
  clear_has_allperformance();
}
inline const ::std::string& wiringuserinfo::allperformance() const {
  return *allperformance_;
}
inline void wiringuserinfo::set_allperformance(const ::std::string& value) {
  set_has_allperformance();
  if (allperformance_ == &::google::protobuf::internal::kEmptyString) {
    allperformance_ = new ::std::string;
  }
  allperformance_->assign(value);
}
inline void wiringuserinfo::set_allperformance(const char* value) {
  set_has_allperformance();
  if (allperformance_ == &::google::protobuf::internal::kEmptyString) {
    allperformance_ = new ::std::string;
  }
  allperformance_->assign(value);
}
inline void wiringuserinfo::set_allperformance(const char* value, size_t size) {
  set_has_allperformance();
  if (allperformance_ == &::google::protobuf::internal::kEmptyString) {
    allperformance_ = new ::std::string;
  }
  allperformance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringuserinfo::mutable_allperformance() {
  set_has_allperformance();
  if (allperformance_ == &::google::protobuf::internal::kEmptyString) {
    allperformance_ = new ::std::string;
  }
  return allperformance_;
}
inline ::std::string* wiringuserinfo::release_allperformance() {
  clear_has_allperformance();
  if (allperformance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = allperformance_;
    allperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringuserinfo::set_allocated_allperformance(::std::string* allperformance) {
  if (allperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete allperformance_;
  }
  if (allperformance) {
    set_has_allperformance();
    allperformance_ = allperformance;
  } else {
    clear_has_allperformance();
    allperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string selfperformance = 8;
inline bool wiringuserinfo::has_selfperformance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void wiringuserinfo::set_has_selfperformance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void wiringuserinfo::clear_has_selfperformance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void wiringuserinfo::clear_selfperformance() {
  if (selfperformance_ != &::google::protobuf::internal::kEmptyString) {
    selfperformance_->clear();
  }
  clear_has_selfperformance();
}
inline const ::std::string& wiringuserinfo::selfperformance() const {
  return *selfperformance_;
}
inline void wiringuserinfo::set_selfperformance(const ::std::string& value) {
  set_has_selfperformance();
  if (selfperformance_ == &::google::protobuf::internal::kEmptyString) {
    selfperformance_ = new ::std::string;
  }
  selfperformance_->assign(value);
}
inline void wiringuserinfo::set_selfperformance(const char* value) {
  set_has_selfperformance();
  if (selfperformance_ == &::google::protobuf::internal::kEmptyString) {
    selfperformance_ = new ::std::string;
  }
  selfperformance_->assign(value);
}
inline void wiringuserinfo::set_selfperformance(const char* value, size_t size) {
  set_has_selfperformance();
  if (selfperformance_ == &::google::protobuf::internal::kEmptyString) {
    selfperformance_ = new ::std::string;
  }
  selfperformance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringuserinfo::mutable_selfperformance() {
  set_has_selfperformance();
  if (selfperformance_ == &::google::protobuf::internal::kEmptyString) {
    selfperformance_ = new ::std::string;
  }
  return selfperformance_;
}
inline ::std::string* wiringuserinfo::release_selfperformance() {
  clear_has_selfperformance();
  if (selfperformance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selfperformance_;
    selfperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringuserinfo::set_allocated_selfperformance(::std::string* selfperformance) {
  if (selfperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete selfperformance_;
  }
  if (selfperformance) {
    set_has_selfperformance();
    selfperformance_ = selfperformance;
  } else {
    clear_has_selfperformance();
    selfperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string directperformance = 9;
inline bool wiringuserinfo::has_directperformance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void wiringuserinfo::set_has_directperformance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void wiringuserinfo::clear_has_directperformance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void wiringuserinfo::clear_directperformance() {
  if (directperformance_ != &::google::protobuf::internal::kEmptyString) {
    directperformance_->clear();
  }
  clear_has_directperformance();
}
inline const ::std::string& wiringuserinfo::directperformance() const {
  return *directperformance_;
}
inline void wiringuserinfo::set_directperformance(const ::std::string& value) {
  set_has_directperformance();
  if (directperformance_ == &::google::protobuf::internal::kEmptyString) {
    directperformance_ = new ::std::string;
  }
  directperformance_->assign(value);
}
inline void wiringuserinfo::set_directperformance(const char* value) {
  set_has_directperformance();
  if (directperformance_ == &::google::protobuf::internal::kEmptyString) {
    directperformance_ = new ::std::string;
  }
  directperformance_->assign(value);
}
inline void wiringuserinfo::set_directperformance(const char* value, size_t size) {
  set_has_directperformance();
  if (directperformance_ == &::google::protobuf::internal::kEmptyString) {
    directperformance_ = new ::std::string;
  }
  directperformance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringuserinfo::mutable_directperformance() {
  set_has_directperformance();
  if (directperformance_ == &::google::protobuf::internal::kEmptyString) {
    directperformance_ = new ::std::string;
  }
  return directperformance_;
}
inline ::std::string* wiringuserinfo::release_directperformance() {
  clear_has_directperformance();
  if (directperformance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directperformance_;
    directperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringuserinfo::set_allocated_directperformance(::std::string* directperformance) {
  if (directperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete directperformance_;
  }
  if (directperformance) {
    set_has_directperformance();
    directperformance_ = directperformance;
  } else {
    clear_has_directperformance();
    directperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string teamperformance = 10;
inline bool wiringuserinfo::has_teamperformance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void wiringuserinfo::set_has_teamperformance() {
  _has_bits_[0] |= 0x00000200u;
}
inline void wiringuserinfo::clear_has_teamperformance() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void wiringuserinfo::clear_teamperformance() {
  if (teamperformance_ != &::google::protobuf::internal::kEmptyString) {
    teamperformance_->clear();
  }
  clear_has_teamperformance();
}
inline const ::std::string& wiringuserinfo::teamperformance() const {
  return *teamperformance_;
}
inline void wiringuserinfo::set_teamperformance(const ::std::string& value) {
  set_has_teamperformance();
  if (teamperformance_ == &::google::protobuf::internal::kEmptyString) {
    teamperformance_ = new ::std::string;
  }
  teamperformance_->assign(value);
}
inline void wiringuserinfo::set_teamperformance(const char* value) {
  set_has_teamperformance();
  if (teamperformance_ == &::google::protobuf::internal::kEmptyString) {
    teamperformance_ = new ::std::string;
  }
  teamperformance_->assign(value);
}
inline void wiringuserinfo::set_teamperformance(const char* value, size_t size) {
  set_has_teamperformance();
  if (teamperformance_ == &::google::protobuf::internal::kEmptyString) {
    teamperformance_ = new ::std::string;
  }
  teamperformance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringuserinfo::mutable_teamperformance() {
  set_has_teamperformance();
  if (teamperformance_ == &::google::protobuf::internal::kEmptyString) {
    teamperformance_ = new ::std::string;
  }
  return teamperformance_;
}
inline ::std::string* wiringuserinfo::release_teamperformance() {
  clear_has_teamperformance();
  if (teamperformance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = teamperformance_;
    teamperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringuserinfo::set_allocated_teamperformance(::std::string* teamperformance) {
  if (teamperformance_ != &::google::protobuf::internal::kEmptyString) {
    delete teamperformance_;
  }
  if (teamperformance) {
    set_has_teamperformance();
    teamperformance_ = teamperformance;
  } else {
    clear_has_teamperformance();
    teamperformance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 allincome = 12;
inline bool wiringuserinfo::has_allincome() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void wiringuserinfo::set_has_allincome() {
  _has_bits_[0] |= 0x00000400u;
}
inline void wiringuserinfo::clear_has_allincome() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void wiringuserinfo::clear_allincome() {
  allincome_ = 0;
  clear_has_allincome();
}
inline ::google::protobuf::int32 wiringuserinfo::allincome() const {
  return allincome_;
}
inline void wiringuserinfo::set_allincome(::google::protobuf::int32 value) {
  set_has_allincome();
  allincome_ = value;
}

// optional int32 getincome = 13;
inline bool wiringuserinfo::has_getincome() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void wiringuserinfo::set_has_getincome() {
  _has_bits_[0] |= 0x00000800u;
}
inline void wiringuserinfo::clear_has_getincome() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void wiringuserinfo::clear_getincome() {
  getincome_ = 0;
  clear_has_getincome();
}
inline ::google::protobuf::int32 wiringuserinfo::getincome() const {
  return getincome_;
}
inline void wiringuserinfo::set_getincome(::google::protobuf::int32 value) {
  set_has_getincome();
  getincome_ = value;
}

// optional int32 allpreincome = 14;
inline bool wiringuserinfo::has_allpreincome() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void wiringuserinfo::set_has_allpreincome() {
  _has_bits_[0] |= 0x00001000u;
}
inline void wiringuserinfo::clear_has_allpreincome() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void wiringuserinfo::clear_allpreincome() {
  allpreincome_ = 0;
  clear_has_allpreincome();
}
inline ::google::protobuf::int32 wiringuserinfo::allpreincome() const {
  return allpreincome_;
}
inline void wiringuserinfo::set_allpreincome(::google::protobuf::int32 value) {
  set_has_allpreincome();
  allpreincome_ = value;
}

// optional int32 getpreincome = 15;
inline bool wiringuserinfo::has_getpreincome() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void wiringuserinfo::set_has_getpreincome() {
  _has_bits_[0] |= 0x00002000u;
}
inline void wiringuserinfo::clear_has_getpreincome() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void wiringuserinfo::clear_getpreincome() {
  getpreincome_ = 0;
  clear_has_getpreincome();
}
inline ::google::protobuf::int32 wiringuserinfo::getpreincome() const {
  return getpreincome_;
}
inline void wiringuserinfo::set_getpreincome(::google::protobuf::int32 value) {
  set_has_getpreincome();
  getpreincome_ = value;
}

// -------------------------------------------------------------------

// fenchengdayinfo

// optional string datestr = 1;
inline bool fenchengdayinfo::has_datestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenchengdayinfo::set_has_datestr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenchengdayinfo::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenchengdayinfo::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& fenchengdayinfo::datestr() const {
  return *datestr_;
}
inline void fenchengdayinfo::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void fenchengdayinfo::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void fenchengdayinfo::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengdayinfo::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* fenchengdayinfo::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengdayinfo::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 allincome = 2;
inline bool fenchengdayinfo::has_allincome() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenchengdayinfo::set_has_allincome() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenchengdayinfo::clear_has_allincome() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenchengdayinfo::clear_allincome() {
  allincome_ = 0;
  clear_has_allincome();
}
inline ::google::protobuf::int32 fenchengdayinfo::allincome() const {
  return allincome_;
}
inline void fenchengdayinfo::set_allincome(::google::protobuf::int32 value) {
  set_has_allincome();
  allincome_ = value;
}

// optional int32 teamincome = 3;
inline bool fenchengdayinfo::has_teamincome() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenchengdayinfo::set_has_teamincome() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenchengdayinfo::clear_has_teamincome() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenchengdayinfo::clear_teamincome() {
  teamincome_ = 0;
  clear_has_teamincome();
}
inline ::google::protobuf::int32 fenchengdayinfo::teamincome() const {
  return teamincome_;
}
inline void fenchengdayinfo::set_teamincome(::google::protobuf::int32 value) {
  set_has_teamincome();
  teamincome_ = value;
}

// optional int32 dirincome = 4;
inline bool fenchengdayinfo::has_dirincome() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fenchengdayinfo::set_has_dirincome() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fenchengdayinfo::clear_has_dirincome() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fenchengdayinfo::clear_dirincome() {
  dirincome_ = 0;
  clear_has_dirincome();
}
inline ::google::protobuf::int32 fenchengdayinfo::dirincome() const {
  return dirincome_;
}
inline void fenchengdayinfo::set_dirincome(::google::protobuf::int32 value) {
  set_has_dirincome();
  dirincome_ = value;
}

// -------------------------------------------------------------------

// fenchengweekinfo

// optional int32 awardid = 1;
inline bool fenchengweekinfo::has_awardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fenchengweekinfo::set_has_awardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fenchengweekinfo::clear_has_awardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fenchengweekinfo::clear_awardid() {
  awardid_ = 0;
  clear_has_awardid();
}
inline ::google::protobuf::int32 fenchengweekinfo::awardid() const {
  return awardid_;
}
inline void fenchengweekinfo::set_awardid(::google::protobuf::int32 value) {
  set_has_awardid();
  awardid_ = value;
}

// optional int32 userid = 2;
inline bool fenchengweekinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fenchengweekinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fenchengweekinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fenchengweekinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 fenchengweekinfo::userid() const {
  return userid_;
}
inline void fenchengweekinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string datestr = 3;
inline bool fenchengweekinfo::has_datestr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fenchengweekinfo::set_has_datestr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fenchengweekinfo::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fenchengweekinfo::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& fenchengweekinfo::datestr() const {
  return *datestr_;
}
inline void fenchengweekinfo::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void fenchengweekinfo::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void fenchengweekinfo::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengweekinfo::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* fenchengweekinfo::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengweekinfo::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weekallnum = 4;
inline bool fenchengweekinfo::has_weekallnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fenchengweekinfo::set_has_weekallnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fenchengweekinfo::clear_has_weekallnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fenchengweekinfo::clear_weekallnum() {
  if (weekallnum_ != &::google::protobuf::internal::kEmptyString) {
    weekallnum_->clear();
  }
  clear_has_weekallnum();
}
inline const ::std::string& fenchengweekinfo::weekallnum() const {
  return *weekallnum_;
}
inline void fenchengweekinfo::set_weekallnum(const ::std::string& value) {
  set_has_weekallnum();
  if (weekallnum_ == &::google::protobuf::internal::kEmptyString) {
    weekallnum_ = new ::std::string;
  }
  weekallnum_->assign(value);
}
inline void fenchengweekinfo::set_weekallnum(const char* value) {
  set_has_weekallnum();
  if (weekallnum_ == &::google::protobuf::internal::kEmptyString) {
    weekallnum_ = new ::std::string;
  }
  weekallnum_->assign(value);
}
inline void fenchengweekinfo::set_weekallnum(const char* value, size_t size) {
  set_has_weekallnum();
  if (weekallnum_ == &::google::protobuf::internal::kEmptyString) {
    weekallnum_ = new ::std::string;
  }
  weekallnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengweekinfo::mutable_weekallnum() {
  set_has_weekallnum();
  if (weekallnum_ == &::google::protobuf::internal::kEmptyString) {
    weekallnum_ = new ::std::string;
  }
  return weekallnum_;
}
inline ::std::string* fenchengweekinfo::release_weekallnum() {
  clear_has_weekallnum();
  if (weekallnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weekallnum_;
    weekallnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengweekinfo::set_allocated_weekallnum(::std::string* weekallnum) {
  if (weekallnum_ != &::google::protobuf::internal::kEmptyString) {
    delete weekallnum_;
  }
  if (weekallnum) {
    set_has_weekallnum();
    weekallnum_ = weekallnum;
  } else {
    clear_has_weekallnum();
    weekallnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weekteamnum = 5;
inline bool fenchengweekinfo::has_weekteamnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fenchengweekinfo::set_has_weekteamnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fenchengweekinfo::clear_has_weekteamnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fenchengweekinfo::clear_weekteamnum() {
  if (weekteamnum_ != &::google::protobuf::internal::kEmptyString) {
    weekteamnum_->clear();
  }
  clear_has_weekteamnum();
}
inline const ::std::string& fenchengweekinfo::weekteamnum() const {
  return *weekteamnum_;
}
inline void fenchengweekinfo::set_weekteamnum(const ::std::string& value) {
  set_has_weekteamnum();
  if (weekteamnum_ == &::google::protobuf::internal::kEmptyString) {
    weekteamnum_ = new ::std::string;
  }
  weekteamnum_->assign(value);
}
inline void fenchengweekinfo::set_weekteamnum(const char* value) {
  set_has_weekteamnum();
  if (weekteamnum_ == &::google::protobuf::internal::kEmptyString) {
    weekteamnum_ = new ::std::string;
  }
  weekteamnum_->assign(value);
}
inline void fenchengweekinfo::set_weekteamnum(const char* value, size_t size) {
  set_has_weekteamnum();
  if (weekteamnum_ == &::google::protobuf::internal::kEmptyString) {
    weekteamnum_ = new ::std::string;
  }
  weekteamnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengweekinfo::mutable_weekteamnum() {
  set_has_weekteamnum();
  if (weekteamnum_ == &::google::protobuf::internal::kEmptyString) {
    weekteamnum_ = new ::std::string;
  }
  return weekteamnum_;
}
inline ::std::string* fenchengweekinfo::release_weekteamnum() {
  clear_has_weekteamnum();
  if (weekteamnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weekteamnum_;
    weekteamnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengweekinfo::set_allocated_weekteamnum(::std::string* weekteamnum) {
  if (weekteamnum_ != &::google::protobuf::internal::kEmptyString) {
    delete weekteamnum_;
  }
  if (weekteamnum) {
    set_has_weekteamnum();
    weekteamnum_ = weekteamnum;
  } else {
    clear_has_weekteamnum();
    weekteamnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weekdirnum = 6;
inline bool fenchengweekinfo::has_weekdirnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void fenchengweekinfo::set_has_weekdirnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void fenchengweekinfo::clear_has_weekdirnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void fenchengweekinfo::clear_weekdirnum() {
  if (weekdirnum_ != &::google::protobuf::internal::kEmptyString) {
    weekdirnum_->clear();
  }
  clear_has_weekdirnum();
}
inline const ::std::string& fenchengweekinfo::weekdirnum() const {
  return *weekdirnum_;
}
inline void fenchengweekinfo::set_weekdirnum(const ::std::string& value) {
  set_has_weekdirnum();
  if (weekdirnum_ == &::google::protobuf::internal::kEmptyString) {
    weekdirnum_ = new ::std::string;
  }
  weekdirnum_->assign(value);
}
inline void fenchengweekinfo::set_weekdirnum(const char* value) {
  set_has_weekdirnum();
  if (weekdirnum_ == &::google::protobuf::internal::kEmptyString) {
    weekdirnum_ = new ::std::string;
  }
  weekdirnum_->assign(value);
}
inline void fenchengweekinfo::set_weekdirnum(const char* value, size_t size) {
  set_has_weekdirnum();
  if (weekdirnum_ == &::google::protobuf::internal::kEmptyString) {
    weekdirnum_ = new ::std::string;
  }
  weekdirnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengweekinfo::mutable_weekdirnum() {
  set_has_weekdirnum();
  if (weekdirnum_ == &::google::protobuf::internal::kEmptyString) {
    weekdirnum_ = new ::std::string;
  }
  return weekdirnum_;
}
inline ::std::string* fenchengweekinfo::release_weekdirnum() {
  clear_has_weekdirnum();
  if (weekdirnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weekdirnum_;
    weekdirnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengweekinfo::set_allocated_weekdirnum(::std::string* weekdirnum) {
  if (weekdirnum_ != &::google::protobuf::internal::kEmptyString) {
    delete weekdirnum_;
  }
  if (weekdirnum) {
    set_has_weekdirnum();
    weekdirnum_ = weekdirnum;
  } else {
    clear_has_weekdirnum();
    weekdirnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string awardincome = 7;
inline bool fenchengweekinfo::has_awardincome() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void fenchengweekinfo::set_has_awardincome() {
  _has_bits_[0] |= 0x00000040u;
}
inline void fenchengweekinfo::clear_has_awardincome() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void fenchengweekinfo::clear_awardincome() {
  if (awardincome_ != &::google::protobuf::internal::kEmptyString) {
    awardincome_->clear();
  }
  clear_has_awardincome();
}
inline const ::std::string& fenchengweekinfo::awardincome() const {
  return *awardincome_;
}
inline void fenchengweekinfo::set_awardincome(const ::std::string& value) {
  set_has_awardincome();
  if (awardincome_ == &::google::protobuf::internal::kEmptyString) {
    awardincome_ = new ::std::string;
  }
  awardincome_->assign(value);
}
inline void fenchengweekinfo::set_awardincome(const char* value) {
  set_has_awardincome();
  if (awardincome_ == &::google::protobuf::internal::kEmptyString) {
    awardincome_ = new ::std::string;
  }
  awardincome_->assign(value);
}
inline void fenchengweekinfo::set_awardincome(const char* value, size_t size) {
  set_has_awardincome();
  if (awardincome_ == &::google::protobuf::internal::kEmptyString) {
    awardincome_ = new ::std::string;
  }
  awardincome_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengweekinfo::mutable_awardincome() {
  set_has_awardincome();
  if (awardincome_ == &::google::protobuf::internal::kEmptyString) {
    awardincome_ = new ::std::string;
  }
  return awardincome_;
}
inline ::std::string* fenchengweekinfo::release_awardincome() {
  clear_has_awardincome();
  if (awardincome_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awardincome_;
    awardincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengweekinfo::set_allocated_awardincome(::std::string* awardincome) {
  if (awardincome_ != &::google::protobuf::internal::kEmptyString) {
    delete awardincome_;
  }
  if (awardincome) {
    set_has_awardincome();
    awardincome_ = awardincome;
  } else {
    clear_has_awardincome();
    awardincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 8;
inline bool fenchengweekinfo::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void fenchengweekinfo::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void fenchengweekinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void fenchengweekinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 fenchengweekinfo::state() const {
  return state_;
}
inline void fenchengweekinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string realincome = 9;
inline bool fenchengweekinfo::has_realincome() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void fenchengweekinfo::set_has_realincome() {
  _has_bits_[0] |= 0x00000100u;
}
inline void fenchengweekinfo::clear_has_realincome() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void fenchengweekinfo::clear_realincome() {
  if (realincome_ != &::google::protobuf::internal::kEmptyString) {
    realincome_->clear();
  }
  clear_has_realincome();
}
inline const ::std::string& fenchengweekinfo::realincome() const {
  return *realincome_;
}
inline void fenchengweekinfo::set_realincome(const ::std::string& value) {
  set_has_realincome();
  if (realincome_ == &::google::protobuf::internal::kEmptyString) {
    realincome_ = new ::std::string;
  }
  realincome_->assign(value);
}
inline void fenchengweekinfo::set_realincome(const char* value) {
  set_has_realincome();
  if (realincome_ == &::google::protobuf::internal::kEmptyString) {
    realincome_ = new ::std::string;
  }
  realincome_->assign(value);
}
inline void fenchengweekinfo::set_realincome(const char* value, size_t size) {
  set_has_realincome();
  if (realincome_ == &::google::protobuf::internal::kEmptyString) {
    realincome_ = new ::std::string;
  }
  realincome_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengweekinfo::mutable_realincome() {
  set_has_realincome();
  if (realincome_ == &::google::protobuf::internal::kEmptyString) {
    realincome_ = new ::std::string;
  }
  return realincome_;
}
inline ::std::string* fenchengweekinfo::release_realincome() {
  clear_has_realincome();
  if (realincome_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realincome_;
    realincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengweekinfo::set_allocated_realincome(::std::string* realincome) {
  if (realincome_ != &::google::protobuf::internal::kEmptyString) {
    delete realincome_;
  }
  if (realincome) {
    set_has_realincome();
    realincome_ = realincome;
  } else {
    clear_has_realincome();
    realincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string preincome = 10;
inline bool fenchengweekinfo::has_preincome() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void fenchengweekinfo::set_has_preincome() {
  _has_bits_[0] |= 0x00000200u;
}
inline void fenchengweekinfo::clear_has_preincome() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void fenchengweekinfo::clear_preincome() {
  if (preincome_ != &::google::protobuf::internal::kEmptyString) {
    preincome_->clear();
  }
  clear_has_preincome();
}
inline const ::std::string& fenchengweekinfo::preincome() const {
  return *preincome_;
}
inline void fenchengweekinfo::set_preincome(const ::std::string& value) {
  set_has_preincome();
  if (preincome_ == &::google::protobuf::internal::kEmptyString) {
    preincome_ = new ::std::string;
  }
  preincome_->assign(value);
}
inline void fenchengweekinfo::set_preincome(const char* value) {
  set_has_preincome();
  if (preincome_ == &::google::protobuf::internal::kEmptyString) {
    preincome_ = new ::std::string;
  }
  preincome_->assign(value);
}
inline void fenchengweekinfo::set_preincome(const char* value, size_t size) {
  set_has_preincome();
  if (preincome_ == &::google::protobuf::internal::kEmptyString) {
    preincome_ = new ::std::string;
  }
  preincome_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fenchengweekinfo::mutable_preincome() {
  set_has_preincome();
  if (preincome_ == &::google::protobuf::internal::kEmptyString) {
    preincome_ = new ::std::string;
  }
  return preincome_;
}
inline ::std::string* fenchengweekinfo::release_preincome() {
  clear_has_preincome();
  if (preincome_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preincome_;
    preincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void fenchengweekinfo::set_allocated_preincome(::std::string* preincome) {
  if (preincome_ != &::google::protobuf::internal::kEmptyString) {
    delete preincome_;
  }
  if (preincome) {
    set_has_preincome();
    preincome_ = preincome;
  } else {
    clear_has_preincome();
    preincome_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 weekpayall = 11;
inline bool fenchengweekinfo::has_weekpayall() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void fenchengweekinfo::set_has_weekpayall() {
  _has_bits_[0] |= 0x00000400u;
}
inline void fenchengweekinfo::clear_has_weekpayall() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void fenchengweekinfo::clear_weekpayall() {
  weekpayall_ = 0;
  clear_has_weekpayall();
}
inline ::google::protobuf::int32 fenchengweekinfo::weekpayall() const {
  return weekpayall_;
}
inline void fenchengweekinfo::set_weekpayall(::google::protobuf::int32 value) {
  set_has_weekpayall();
  weekpayall_ = value;
}

// optional int32 cfrate = 12;
inline bool fenchengweekinfo::has_cfrate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void fenchengweekinfo::set_has_cfrate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void fenchengweekinfo::clear_has_cfrate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void fenchengweekinfo::clear_cfrate() {
  cfrate_ = 0;
  clear_has_cfrate();
}
inline ::google::protobuf::int32 fenchengweekinfo::cfrate() const {
  return cfrate_;
}
inline void fenchengweekinfo::set_cfrate(::google::protobuf::int32 value) {
  set_has_cfrate();
  cfrate_ = value;
}

// -------------------------------------------------------------------

// wiringdaybonus

// optional string datestr = 1;
inline bool wiringdaybonus::has_datestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringdaybonus::set_has_datestr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringdaybonus::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringdaybonus::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& wiringdaybonus::datestr() const {
  return *datestr_;
}
inline void wiringdaybonus::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringdaybonus::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringdaybonus::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdaybonus::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* wiringdaybonus::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdaybonus::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ach = 2;
inline bool wiringdaybonus::has_ach() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringdaybonus::set_has_ach() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringdaybonus::clear_has_ach() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringdaybonus::clear_ach() {
  if (ach_ != &::google::protobuf::internal::kEmptyString) {
    ach_->clear();
  }
  clear_has_ach();
}
inline const ::std::string& wiringdaybonus::ach() const {
  return *ach_;
}
inline void wiringdaybonus::set_ach(const ::std::string& value) {
  set_has_ach();
  if (ach_ == &::google::protobuf::internal::kEmptyString) {
    ach_ = new ::std::string;
  }
  ach_->assign(value);
}
inline void wiringdaybonus::set_ach(const char* value) {
  set_has_ach();
  if (ach_ == &::google::protobuf::internal::kEmptyString) {
    ach_ = new ::std::string;
  }
  ach_->assign(value);
}
inline void wiringdaybonus::set_ach(const char* value, size_t size) {
  set_has_ach();
  if (ach_ == &::google::protobuf::internal::kEmptyString) {
    ach_ = new ::std::string;
  }
  ach_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdaybonus::mutable_ach() {
  set_has_ach();
  if (ach_ == &::google::protobuf::internal::kEmptyString) {
    ach_ = new ::std::string;
  }
  return ach_;
}
inline ::std::string* wiringdaybonus::release_ach() {
  clear_has_ach();
  if (ach_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ach_;
    ach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdaybonus::set_allocated_ach(::std::string* ach) {
  if (ach_ != &::google::protobuf::internal::kEmptyString) {
    delete ach_;
  }
  if (ach) {
    set_has_ach();
    ach_ = ach;
  } else {
    clear_has_ach();
    ach_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool wiringdaybonus::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringdaybonus::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringdaybonus::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringdaybonus::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 wiringdaybonus::level() const {
  return level_;
}
inline void wiringdaybonus::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 rate = 4;
inline bool wiringdaybonus::has_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringdaybonus::set_has_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringdaybonus::clear_has_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringdaybonus::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 wiringdaybonus::rate() const {
  return rate_;
}
inline void wiringdaybonus::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// optional string bonus = 5;
inline bool wiringdaybonus::has_bonus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringdaybonus::set_has_bonus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringdaybonus::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringdaybonus::clear_bonus() {
  if (bonus_ != &::google::protobuf::internal::kEmptyString) {
    bonus_->clear();
  }
  clear_has_bonus();
}
inline const ::std::string& wiringdaybonus::bonus() const {
  return *bonus_;
}
inline void wiringdaybonus::set_bonus(const ::std::string& value) {
  set_has_bonus();
  if (bonus_ == &::google::protobuf::internal::kEmptyString) {
    bonus_ = new ::std::string;
  }
  bonus_->assign(value);
}
inline void wiringdaybonus::set_bonus(const char* value) {
  set_has_bonus();
  if (bonus_ == &::google::protobuf::internal::kEmptyString) {
    bonus_ = new ::std::string;
  }
  bonus_->assign(value);
}
inline void wiringdaybonus::set_bonus(const char* value, size_t size) {
  set_has_bonus();
  if (bonus_ == &::google::protobuf::internal::kEmptyString) {
    bonus_ = new ::std::string;
  }
  bonus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringdaybonus::mutable_bonus() {
  set_has_bonus();
  if (bonus_ == &::google::protobuf::internal::kEmptyString) {
    bonus_ = new ::std::string;
  }
  return bonus_;
}
inline ::std::string* wiringdaybonus::release_bonus() {
  clear_has_bonus();
  if (bonus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bonus_;
    bonus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringdaybonus::set_allocated_bonus(::std::string* bonus) {
  if (bonus_ != &::google::protobuf::internal::kEmptyString) {
    delete bonus_;
  }
  if (bonus) {
    set_has_bonus();
    bonus_ = bonus;
  } else {
    clear_has_bonus();
    bonus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// wiringcostweekbonus

// optional string datestr = 1;
inline bool wiringcostweekbonus::has_datestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringcostweekbonus::set_has_datestr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringcostweekbonus::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringcostweekbonus::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& wiringcostweekbonus::datestr() const {
  return *datestr_;
}
inline void wiringcostweekbonus::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringcostweekbonus::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringcostweekbonus::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringcostweekbonus::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* wiringcostweekbonus::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringcostweekbonus::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 allwin = 2;
inline bool wiringcostweekbonus::has_allwin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringcostweekbonus::set_has_allwin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringcostweekbonus::clear_has_allwin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringcostweekbonus::clear_allwin() {
  allwin_ = 0;
  clear_has_allwin();
}
inline ::google::protobuf::int32 wiringcostweekbonus::allwin() const {
  return allwin_;
}
inline void wiringcostweekbonus::set_allwin(::google::protobuf::int32 value) {
  set_has_allwin();
  allwin_ = value;
}

// optional int32 bonus_rate = 3;
inline bool wiringcostweekbonus::has_bonus_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringcostweekbonus::set_has_bonus_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringcostweekbonus::clear_has_bonus_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringcostweekbonus::clear_bonus_rate() {
  bonus_rate_ = 0;
  clear_has_bonus_rate();
}
inline ::google::protobuf::int32 wiringcostweekbonus::bonus_rate() const {
  return bonus_rate_;
}
inline void wiringcostweekbonus::set_bonus_rate(::google::protobuf::int32 value) {
  set_has_bonus_rate();
  bonus_rate_ = value;
}

// optional int32 self_bonus = 4;
inline bool wiringcostweekbonus::has_self_bonus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringcostweekbonus::set_has_self_bonus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringcostweekbonus::clear_has_self_bonus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringcostweekbonus::clear_self_bonus() {
  self_bonus_ = 0;
  clear_has_self_bonus();
}
inline ::google::protobuf::int32 wiringcostweekbonus::self_bonus() const {
  return self_bonus_;
}
inline void wiringcostweekbonus::set_self_bonus(::google::protobuf::int32 value) {
  set_has_self_bonus();
  self_bonus_ = value;
}

// optional int32 agent_bonus = 5;
inline bool wiringcostweekbonus::has_agent_bonus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringcostweekbonus::set_has_agent_bonus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringcostweekbonus::clear_has_agent_bonus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringcostweekbonus::clear_agent_bonus() {
  agent_bonus_ = 0;
  clear_has_agent_bonus();
}
inline ::google::protobuf::int32 wiringcostweekbonus::agent_bonus() const {
  return agent_bonus_;
}
inline void wiringcostweekbonus::set_agent_bonus(::google::protobuf::int32 value) {
  set_has_agent_bonus();
  agent_bonus_ = value;
}

// optional int32 all_bonus = 6;
inline bool wiringcostweekbonus::has_all_bonus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wiringcostweekbonus::set_has_all_bonus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wiringcostweekbonus::clear_has_all_bonus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wiringcostweekbonus::clear_all_bonus() {
  all_bonus_ = 0;
  clear_has_all_bonus();
}
inline ::google::protobuf::int32 wiringcostweekbonus::all_bonus() const {
  return all_bonus_;
}
inline void wiringcostweekbonus::set_all_bonus(::google::protobuf::int32 value) {
  set_has_all_bonus();
  all_bonus_ = value;
}

// optional int32 status = 7;
inline bool wiringcostweekbonus::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wiringcostweekbonus::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wiringcostweekbonus::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wiringcostweekbonus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 wiringcostweekbonus::status() const {
  return status_;
}
inline void wiringcostweekbonus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// wiringagentcostweekbonus

// optional string datestr = 1;
inline bool wiringagentcostweekbonus::has_datestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wiringagentcostweekbonus::set_has_datestr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wiringagentcostweekbonus::clear_has_datestr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wiringagentcostweekbonus::clear_datestr() {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    datestr_->clear();
  }
  clear_has_datestr();
}
inline const ::std::string& wiringagentcostweekbonus::datestr() const {
  return *datestr_;
}
inline void wiringagentcostweekbonus::set_datestr(const ::std::string& value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringagentcostweekbonus::set_datestr(const char* value) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(value);
}
inline void wiringagentcostweekbonus::set_datestr(const char* value, size_t size) {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  datestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringagentcostweekbonus::mutable_datestr() {
  set_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    datestr_ = new ::std::string;
  }
  return datestr_;
}
inline ::std::string* wiringagentcostweekbonus::release_datestr() {
  clear_has_datestr();
  if (datestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datestr_;
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringagentcostweekbonus::set_allocated_datestr(::std::string* datestr) {
  if (datestr_ != &::google::protobuf::internal::kEmptyString) {
    delete datestr_;
  }
  if (datestr) {
    set_has_datestr();
    datestr_ = datestr;
  } else {
    clear_has_datestr();
    datestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 agent_id = 2;
inline bool wiringagentcostweekbonus::has_agent_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void wiringagentcostweekbonus::set_has_agent_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void wiringagentcostweekbonus::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void wiringagentcostweekbonus::clear_agent_id() {
  agent_id_ = 0;
  clear_has_agent_id();
}
inline ::google::protobuf::int32 wiringagentcostweekbonus::agent_id() const {
  return agent_id_;
}
inline void wiringagentcostweekbonus::set_agent_id(::google::protobuf::int32 value) {
  set_has_agent_id();
  agent_id_ = value;
}

// optional string agent_name = 3;
inline bool wiringagentcostweekbonus::has_agent_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wiringagentcostweekbonus::set_has_agent_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wiringagentcostweekbonus::clear_has_agent_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wiringagentcostweekbonus::clear_agent_name() {
  if (agent_name_ != &::google::protobuf::internal::kEmptyString) {
    agent_name_->clear();
  }
  clear_has_agent_name();
}
inline const ::std::string& wiringagentcostweekbonus::agent_name() const {
  return *agent_name_;
}
inline void wiringagentcostweekbonus::set_agent_name(const ::std::string& value) {
  set_has_agent_name();
  if (agent_name_ == &::google::protobuf::internal::kEmptyString) {
    agent_name_ = new ::std::string;
  }
  agent_name_->assign(value);
}
inline void wiringagentcostweekbonus::set_agent_name(const char* value) {
  set_has_agent_name();
  if (agent_name_ == &::google::protobuf::internal::kEmptyString) {
    agent_name_ = new ::std::string;
  }
  agent_name_->assign(value);
}
inline void wiringagentcostweekbonus::set_agent_name(const char* value, size_t size) {
  set_has_agent_name();
  if (agent_name_ == &::google::protobuf::internal::kEmptyString) {
    agent_name_ = new ::std::string;
  }
  agent_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* wiringagentcostweekbonus::mutable_agent_name() {
  set_has_agent_name();
  if (agent_name_ == &::google::protobuf::internal::kEmptyString) {
    agent_name_ = new ::std::string;
  }
  return agent_name_;
}
inline ::std::string* wiringagentcostweekbonus::release_agent_name() {
  clear_has_agent_name();
  if (agent_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = agent_name_;
    agent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void wiringagentcostweekbonus::set_allocated_agent_name(::std::string* agent_name) {
  if (agent_name_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_name_;
  }
  if (agent_name) {
    set_has_agent_name();
    agent_name_ = agent_name;
  } else {
    clear_has_agent_name();
    agent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bonus_rate = 4;
inline bool wiringagentcostweekbonus::has_bonus_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void wiringagentcostweekbonus::set_has_bonus_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void wiringagentcostweekbonus::clear_has_bonus_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void wiringagentcostweekbonus::clear_bonus_rate() {
  bonus_rate_ = 0;
  clear_has_bonus_rate();
}
inline ::google::protobuf::int32 wiringagentcostweekbonus::bonus_rate() const {
  return bonus_rate_;
}
inline void wiringagentcostweekbonus::set_bonus_rate(::google::protobuf::int32 value) {
  set_has_bonus_rate();
  bonus_rate_ = value;
}

// optional int32 self_bonus = 5;
inline bool wiringagentcostweekbonus::has_self_bonus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void wiringagentcostweekbonus::set_has_self_bonus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void wiringagentcostweekbonus::clear_has_self_bonus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void wiringagentcostweekbonus::clear_self_bonus() {
  self_bonus_ = 0;
  clear_has_self_bonus();
}
inline ::google::protobuf::int32 wiringagentcostweekbonus::self_bonus() const {
  return self_bonus_;
}
inline void wiringagentcostweekbonus::set_self_bonus(::google::protobuf::int32 value) {
  set_has_self_bonus();
  self_bonus_ = value;
}

// optional int32 agent_bonus = 6;
inline bool wiringagentcostweekbonus::has_agent_bonus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void wiringagentcostweekbonus::set_has_agent_bonus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void wiringagentcostweekbonus::clear_has_agent_bonus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void wiringagentcostweekbonus::clear_agent_bonus() {
  agent_bonus_ = 0;
  clear_has_agent_bonus();
}
inline ::google::protobuf::int32 wiringagentcostweekbonus::agent_bonus() const {
  return agent_bonus_;
}
inline void wiringagentcostweekbonus::set_agent_bonus(::google::protobuf::int32 value) {
  set_has_agent_bonus();
  agent_bonus_ = value;
}

// optional int32 status = 7;
inline bool wiringagentcostweekbonus::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void wiringagentcostweekbonus::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void wiringagentcostweekbonus::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void wiringagentcostweekbonus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 wiringagentcostweekbonus::status() const {
  return status_;
}
inline void wiringagentcostweekbonus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fagent_2eproto__INCLUDED
