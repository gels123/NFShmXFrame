// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_psz.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_psz.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* pszuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pszuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* pszinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pszinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* pszhandpoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pszhandpoker_reflection_ = NULL;
const ::google::protobuf::Descriptor* pszhistoryitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pszhistoryitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* pszhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pszhistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* pszcomparepoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pszcomparepoker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5fpsz_2eproto() {
  protobuf_AddDesc_st_5fpsz_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_psz.proto");
  GOOGLE_CHECK(file != NULL);
  pszuser_descriptor_ = file->message_type(0);
  static const int pszuser_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, handpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, psztype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, pokerstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, pokerstate_discard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, compare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, endshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, maxdntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, maxscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, audocingl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, jettonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, callnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, thannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, fillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, thanuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, timeoutsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, face_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, location_),
  };
  pszuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pszuser_descriptor_,
      pszuser::default_instance_,
      pszuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pszuser));
  pszinfo_descriptor_ = file->message_type(1);
  static const int pszinfo_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, tablemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, tabletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, doublecomp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, boutcapp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, mincomp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, menpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, maxplaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, restrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, autoready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, usevipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, guodi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, oncepour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, presentbout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, dissolveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, straction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, payway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, paynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, actionlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, deluser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, actionuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, julebuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, psztype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, pourcount_),
  };
  pszinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pszinfo_descriptor_,
      pszinfo::default_instance_,
      pszinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pszinfo));
  pszhandpoker_descriptor_ = file->message_type(2);
  static const int pszhandpoker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhandpoker, handpoker_),
  };
  pszhandpoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pszhandpoker_descriptor_,
      pszhandpoker::default_instance_,
      pszhandpoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhandpoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhandpoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pszhandpoker));
  pszhistoryitem_descriptor_ = file->message_type(3);
  static const int pszhistoryitem_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, guodi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, presentbout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, oncepour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, winerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, pokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, psztypelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, resultlist_),
  };
  pszhistoryitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pszhistoryitem_descriptor_,
      pszhistoryitem::default_instance_,
      pszhistoryitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistoryitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pszhistoryitem));
  pszhistory_descriptor_ = file->message_type(4);
  static const int pszhistory_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, playnummax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, playnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, difen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, nicklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, winlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, hitemlist_),
  };
  pszhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pszhistory_descriptor_,
      pszhistory::default_instance_,
      pszhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pszhistory));
  pszcomparepoker_descriptor_ = file->message_type(5);
  static const int pszcomparepoker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszcomparepoker, winnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszcomparepoker, loserid_),
  };
  pszcomparepoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pszcomparepoker_descriptor_,
      pszcomparepoker::default_instance_,
      pszcomparepoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszcomparepoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pszcomparepoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pszcomparepoker));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5fpsz_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pszuser_descriptor_, &pszuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pszinfo_descriptor_, &pszinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pszhandpoker_descriptor_, &pszhandpoker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pszhistoryitem_descriptor_, &pszhistoryitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pszhistory_descriptor_, &pszhistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pszcomparepoker_descriptor_, &pszcomparepoker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5fpsz_2eproto() {
  delete pszuser::default_instance_;
  delete pszuser_reflection_;
  delete pszinfo::default_instance_;
  delete pszinfo_reflection_;
  delete pszhandpoker::default_instance_;
  delete pszhandpoker_reflection_;
  delete pszhistoryitem::default_instance_;
  delete pszhistoryitem_reflection_;
  delete pszhistory::default_instance_;
  delete pszhistory_reflection_;
  delete pszcomparepoker::default_instance_;
  delete pszcomparepoker_reflection_;
}

void protobuf_AddDesc_st_5fpsz_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014st_psz.proto\022\007progame\032\016st_human.proto\""
    "\306\003\n\007pszuser\022\016\n\006userid\030\001 \001(\005\022\021\n\thandpoker"
    "\030\002 \003(\005\022\017\n\007psztype\030\003 \001(\005\022\017\n\007chairid\030\004 \001(\005"
    "\022\r\n\005jifen\030\005 \001(\t\022\016\n\006jetton\030\006 \001(\005\022\r\n\005state"
    "\030\007 \001(\005\022\022\n\npokerstate\030\010 \001(\005\022\032\n\022pokerstate"
    "_discard\030\t \001(\005\022\017\n\007compare\030\n \001(\005\022\017\n\007endsh"
    "ow\030\013 \001(\005\022\016\n\006winnum\030\014 \001(\005\022\021\n\tmaxdntype\030\r "
    "\001(\005\022\020\n\010maxscore\030\016 \001(\005\022\021\n\taudocingl\030\017 \001(\005"
    "\022\022\n\njettonlist\030\020 \003(\005\022\017\n\007callNum\030\021 \001(\005\022\017\n"
    "\007thanNum\030\022 \001(\005\022\017\n\007filList\030\023 \003(\005\022\022\n\nthanu"
    "serid\030\024 \003(\005\022\022\n\ntimeoutSum\030\025 \001(\005\022\020\n\010nickn"
    "ame\030\026 \001(\t\022\013\n\003sex\030\027 \001(\005\022\016\n\006face_1\030\030 \001(\t\022\020"
    "\n\010location\030\031 \001(\t\"\236\005\n\007pszinfo\022\017\n\007tableid\030"
    "\001 \001(\005\022\021\n\ttablemark\030\002 \001(\005\022\021\n\ttabletime\030\003 "
    "\001(\005\022\r\n\005state\030\004 \001(\005\022\020\n\010timemark\030\005 \001(\005\022\021\n\t"
    "tabletype\030\006 \001(\005\022\r\n\005difen\030\007 \001(\005\022\022\n\ndouble"
    "comp\030\010 \001(\005\022\020\n\010boutcapp\030\t \001(\005\022\017\n\007mincomp\030"
    "\n \001(\005\022\016\n\006menpai\030\013 \001(\005\022\022\n\nmaxplaynum\030\014 \001("
    "\005\022\017\n\007paytype\030\r \001(\005\022\020\n\010restrict\030\016 \001(\005\022\021\n\t"
    "autoready\030\017 \001(\005\022\017\n\007ownerid\030\020 \001(\005\022\020\n\010bank"
    "erID\030\021 \001(\005\022!\n\007situser\030\022 \003(\0132\020.progame.ps"
    "zuser\022\021\n\tstanduser\030\023 \003(\005\022\021\n\tusevipnum\030\024 "
    "\001(\005\022\r\n\005guodi\030\025 \001(\005\022\020\n\010oncepour\030\026 \001(\005\022\023\n\013"
    "presentbout\030\027 \001(\005\022\024\n\014dissolveinfo\030\030 \001(\005\022"
    "\021\n\tstraction\030\031 \001(\t\022\016\n\006payway\030\032 \001(\005\022\016\n\006pa"
    "ynum\030\033 \001(\005\022\017\n\007maxuser\030\035 \001(\005\022\022\n\nactionlis"
    "t\030\036 \003(\005\022\017\n\007deluser\030\037 \001(\005\022\022\n\nactionuser\030 "
    " \001(\005\022\017\n\007usernum\030! \001(\005\022\020\n\010julebuid\030\" \001(\005\022"
    "\014\n\004flag\030# \001(\005\022\017\n\007psztype\030$ \001(\005\022\021\n\tpourco"
    "unt\030% \001(\005\"!\n\014pszhandpoker\022\021\n\thandpoker\030\001"
    " \003(\005\"\376\001\n\016pszhistoryitem\022\013\n\003leg\030\001 \001(\005\022\r\n\005"
    "guodi\030\002 \001(\005\022\023\n\013presentbout\030\003 \001(\005\022\020\n\010once"
    "pour\030\004 \001(\005\022\017\n\007winerid\030\005 \001(\005\022\022\n\nuseridlis"
    "t\030\006 \003(\005\022\020\n\010nicklist\030\007 \003(\t\022\016\n\006jetton\030\010 \003("
    "\005\022(\n\tpokerlist\030\t \003(\0132\025.progame.pszhandpo"
    "ker\022\023\n\013psztypelist\030\n \003(\005\022\017\n\007winlist\030\013 \003("
    "\005\022\022\n\nresultlist\030\021 \003(\005\"\327\001\n\npszhistory\022\017\n\007"
    "tableid\030\001 \001(\005\022\022\n\nplaynummax\030\002 \001(\005\022\017\n\007pla"
    "ynum\030\003 \001(\005\022\r\n\005difen\030\004 \001(\005\022\020\n\010gametime\030\006 "
    "\001(\005\022\017\n\007ownerid\030\007 \001(\005\022\020\n\010nicklist\030\010 \003(\t\022\022"
    "\n\nuseridlist\030\t \003(\005\022\017\n\007winlist\030\n \003(\005\022*\n\th"
    "itemlist\030\013 \003(\0132\027.progame.pszhistoryitem\""
    "4\n\017pszcomparepoker\022\020\n\010winnerid\030\001 \001(\005\022\017\n\007"
    "loserid\030\002 \001(\005", 1733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_psz.proto", &protobuf_RegisterTypes);
  pszuser::default_instance_ = new pszuser();
  pszinfo::default_instance_ = new pszinfo();
  pszhandpoker::default_instance_ = new pszhandpoker();
  pszhistoryitem::default_instance_ = new pszhistoryitem();
  pszhistory::default_instance_ = new pszhistory();
  pszcomparepoker::default_instance_ = new pszcomparepoker();
  pszuser::default_instance_->InitAsDefaultInstance();
  pszinfo::default_instance_->InitAsDefaultInstance();
  pszhandpoker::default_instance_->InitAsDefaultInstance();
  pszhistoryitem::default_instance_->InitAsDefaultInstance();
  pszhistory::default_instance_->InitAsDefaultInstance();
  pszcomparepoker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5fpsz_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5fpsz_2eproto {
  StaticDescriptorInitializer_st_5fpsz_2eproto() {
    protobuf_AddDesc_st_5fpsz_2eproto();
  }
} static_descriptor_initializer_st_5fpsz_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pszuser::kUseridFieldNumber;
const int pszuser::kHandpokerFieldNumber;
const int pszuser::kPsztypeFieldNumber;
const int pszuser::kChairidFieldNumber;
const int pszuser::kJifenFieldNumber;
const int pszuser::kJettonFieldNumber;
const int pszuser::kStateFieldNumber;
const int pszuser::kPokerstateFieldNumber;
const int pszuser::kPokerstateDiscardFieldNumber;
const int pszuser::kCompareFieldNumber;
const int pszuser::kEndshowFieldNumber;
const int pszuser::kWinnumFieldNumber;
const int pszuser::kMaxdntypeFieldNumber;
const int pszuser::kMaxscoreFieldNumber;
const int pszuser::kAudocinglFieldNumber;
const int pszuser::kJettonlistFieldNumber;
const int pszuser::kCallNumFieldNumber;
const int pszuser::kThanNumFieldNumber;
const int pszuser::kFilListFieldNumber;
const int pszuser::kThanuseridFieldNumber;
const int pszuser::kTimeoutSumFieldNumber;
const int pszuser::kNicknameFieldNumber;
const int pszuser::kSexFieldNumber;
const int pszuser::kFace1FieldNumber;
const int pszuser::kLocationFieldNumber;
#endif  // !_MSC_VER

pszuser::pszuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pszuser::InitAsDefaultInstance() {
}

pszuser::pszuser(const pszuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pszuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  psztype_ = 0;
  chairid_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jetton_ = 0;
  state_ = 0;
  pokerstate_ = 0;
  pokerstate_discard_ = 0;
  compare_ = 0;
  endshow_ = 0;
  winnum_ = 0;
  maxdntype_ = 0;
  maxscore_ = 0;
  audocingl_ = 0;
  callnum_ = 0;
  thannum_ = 0;
  timeoutsum_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pszuser::~pszuser() {
  SharedDtor();
}

void pszuser::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void pszuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pszuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pszuser_descriptor_;
}

const pszuser& pszuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fpsz_2eproto();
  return *default_instance_;
}

pszuser* pszuser::default_instance_ = NULL;

pszuser* pszuser::New() const {
  return new pszuser;
}

void pszuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    psztype_ = 0;
    chairid_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    jetton_ = 0;
    state_ = 0;
    pokerstate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pokerstate_discard_ = 0;
    compare_ = 0;
    endshow_ = 0;
    winnum_ = 0;
    maxdntype_ = 0;
    maxscore_ = 0;
    audocingl_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    callnum_ = 0;
    thannum_ = 0;
    timeoutsum_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    sex_ = 0;
    if (has_face_1()) {
      if (face_1_ != &::google::protobuf::internal::kEmptyString) {
        face_1_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  handpoker_.Clear();
  jettonlist_.Clear();
  fillist_.Clear();
  thanuserid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pszuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        break;
      }

      // repeated int32 handpoker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        if (input->ExpectTag(24)) goto parse_psztype;
        break;
      }

      // optional int32 psztype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psztype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psztype_)));
          set_has_psztype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_jifen;
        break;
      }

      // optional string jifen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional int32 state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pokerstate;
        break;
      }

      // optional int32 pokerstate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokerstate_)));
          set_has_pokerstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pokerstate_discard;
        break;
      }

      // optional int32 pokerstate_discard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerstate_discard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokerstate_discard_)));
          set_has_pokerstate_discard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_compare;
        break;
      }

      // optional int32 compare = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compare_)));
          set_has_compare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_endshow;
        break;
      }

      // optional int32 endshow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endshow_)));
          set_has_endshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxdntype;
        break;
      }

      // optional int32 maxdntype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxdntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdntype_)));
          set_has_maxdntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_maxscore;
        break;
      }

      // optional int32 maxscore = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_audocingl;
        break;
      }

      // optional int32 audocingl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audocingl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audocingl_)));
          set_has_audocingl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_jettonlist;
        break;
      }

      // repeated int32 jettonlist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jettonlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_jettonlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jettonlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_jettonlist;
        if (input->ExpectTag(136)) goto parse_callNum;
        break;
      }

      // optional int32 callNum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callnum_)));
          set_has_callnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_thanNum;
        break;
      }

      // optional int32 thanNum = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thannum_)));
          set_has_thannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_filList;
        break;
      }

      // repeated int32 filList = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_fillist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fillist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_filList;
        if (input->ExpectTag(160)) goto parse_thanuserid;
        break;
      }

      // repeated int32 thanuserid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thanuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_thanuserid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_thanuserid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_thanuserid;
        if (input->ExpectTag(168)) goto parse_timeoutSum;
        break;
      }

      // optional int32 timeoutSum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeoutSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeoutsum_)));
          set_has_timeoutsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_nickname;
        break;
      }

      // optional string nickname = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_sex;
        break;
      }

      // optional int32 sex = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_face_1;
        break;
      }

      // optional string face_1 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_1().data(), this->face_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_location;
        break;
      }

      // optional string location = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pszuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handpoker(i), output);
  }

  // optional int32 psztype = 3;
  if (has_psztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->psztype(), output);
  }

  // optional int32 chairid = 4;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairid(), output);
  }

  // optional string jifen = 5;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->jifen(), output);
  }

  // optional int32 jetton = 6;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jetton(), output);
  }

  // optional int32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // optional int32 pokerstate = 8;
  if (has_pokerstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pokerstate(), output);
  }

  // optional int32 pokerstate_discard = 9;
  if (has_pokerstate_discard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pokerstate_discard(), output);
  }

  // optional int32 compare = 10;
  if (has_compare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->compare(), output);
  }

  // optional int32 endshow = 11;
  if (has_endshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->endshow(), output);
  }

  // optional int32 winnum = 12;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->winnum(), output);
  }

  // optional int32 maxdntype = 13;
  if (has_maxdntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxdntype(), output);
  }

  // optional int32 maxscore = 14;
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->maxscore(), output);
  }

  // optional int32 audocingl = 15;
  if (has_audocingl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->audocingl(), output);
  }

  // repeated int32 jettonlist = 16;
  for (int i = 0; i < this->jettonlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->jettonlist(i), output);
  }

  // optional int32 callNum = 17;
  if (has_callnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->callnum(), output);
  }

  // optional int32 thanNum = 18;
  if (has_thannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->thannum(), output);
  }

  // repeated int32 filList = 19;
  for (int i = 0; i < this->fillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->fillist(i), output);
  }

  // repeated int32 thanuserid = 20;
  for (int i = 0; i < this->thanuserid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->thanuserid(i), output);
  }

  // optional int32 timeoutSum = 21;
  if (has_timeoutsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->timeoutsum(), output);
  }

  // optional string nickname = 22;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->nickname(), output);
  }

  // optional int32 sex = 23;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sex(), output);
  }

  // optional string face_1 = 24;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->face_1(), output);
  }

  // optional string location = 25;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pszuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handpoker(i), target);
  }

  // optional int32 psztype = 3;
  if (has_psztype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->psztype(), target);
  }

  // optional int32 chairid = 4;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairid(), target);
  }

  // optional string jifen = 5;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->jifen(), target);
  }

  // optional int32 jetton = 6;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jetton(), target);
  }

  // optional int32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // optional int32 pokerstate = 8;
  if (has_pokerstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pokerstate(), target);
  }

  // optional int32 pokerstate_discard = 9;
  if (has_pokerstate_discard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pokerstate_discard(), target);
  }

  // optional int32 compare = 10;
  if (has_compare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->compare(), target);
  }

  // optional int32 endshow = 11;
  if (has_endshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->endshow(), target);
  }

  // optional int32 winnum = 12;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->winnum(), target);
  }

  // optional int32 maxdntype = 13;
  if (has_maxdntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxdntype(), target);
  }

  // optional int32 maxscore = 14;
  if (has_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->maxscore(), target);
  }

  // optional int32 audocingl = 15;
  if (has_audocingl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->audocingl(), target);
  }

  // repeated int32 jettonlist = 16;
  for (int i = 0; i < this->jettonlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->jettonlist(i), target);
  }

  // optional int32 callNum = 17;
  if (has_callnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->callnum(), target);
  }

  // optional int32 thanNum = 18;
  if (has_thannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->thannum(), target);
  }

  // repeated int32 filList = 19;
  for (int i = 0; i < this->fillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->fillist(i), target);
  }

  // repeated int32 thanuserid = 20;
  for (int i = 0; i < this->thanuserid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->thanuserid(i), target);
  }

  // optional int32 timeoutSum = 21;
  if (has_timeoutsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->timeoutsum(), target);
  }

  // optional string nickname = 22;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->nickname(), target);
  }

  // optional int32 sex = 23;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->sex(), target);
  }

  // optional string face_1 = 24;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->face_1(), target);
  }

  // optional string location = 25;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pszuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 psztype = 3;
    if (has_psztype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psztype());
    }

    // optional int32 chairid = 4;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional string jifen = 5;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional int32 jetton = 6;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 pokerstate = 8;
    if (has_pokerstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokerstate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pokerstate_discard = 9;
    if (has_pokerstate_discard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokerstate_discard());
    }

    // optional int32 compare = 10;
    if (has_compare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compare());
    }

    // optional int32 endshow = 11;
    if (has_endshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endshow());
    }

    // optional int32 winnum = 12;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional int32 maxdntype = 13;
    if (has_maxdntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxdntype());
    }

    // optional int32 maxscore = 14;
    if (has_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxscore());
    }

    // optional int32 audocingl = 15;
    if (has_audocingl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audocingl());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 callNum = 17;
    if (has_callnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callnum());
    }

    // optional int32 thanNum = 18;
    if (has_thannum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thannum());
    }

    // optional int32 timeoutSum = 21;
    if (has_timeoutsum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeoutsum());
    }

    // optional string nickname = 22;
    if (has_nickname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 sex = 23;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string face_1 = 24;
    if (has_face_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string location = 25;
    if (has_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  // repeated int32 handpoker = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  // repeated int32 jettonlist = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->jettonlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jettonlist(i));
    }
    total_size += 2 * this->jettonlist_size() + data_size;
  }

  // repeated int32 filList = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->fillist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fillist(i));
    }
    total_size += 2 * this->fillist_size() + data_size;
  }

  // repeated int32 thanuserid = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->thanuserid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->thanuserid(i));
    }
    total_size += 2 * this->thanuserid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pszuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pszuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pszuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pszuser::MergeFrom(const pszuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  jettonlist_.MergeFrom(from.jettonlist_);
  fillist_.MergeFrom(from.fillist_);
  thanuserid_.MergeFrom(from.thanuserid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_psztype()) {
      set_psztype(from.psztype());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_pokerstate()) {
      set_pokerstate(from.pokerstate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pokerstate_discard()) {
      set_pokerstate_discard(from.pokerstate_discard());
    }
    if (from.has_compare()) {
      set_compare(from.compare());
    }
    if (from.has_endshow()) {
      set_endshow(from.endshow());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_maxdntype()) {
      set_maxdntype(from.maxdntype());
    }
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
    if (from.has_audocingl()) {
      set_audocingl(from.audocingl());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_callnum()) {
      set_callnum(from.callnum());
    }
    if (from.has_thannum()) {
      set_thannum(from.thannum());
    }
    if (from.has_timeoutsum()) {
      set_timeoutsum(from.timeoutsum());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_face_1()) {
      set_face_1(from.face_1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pszuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pszuser::CopyFrom(const pszuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pszuser::IsInitialized() const {

  return true;
}

void pszuser::Swap(pszuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    handpoker_.Swap(&other->handpoker_);
    std::swap(psztype_, other->psztype_);
    std::swap(chairid_, other->chairid_);
    std::swap(jifen_, other->jifen_);
    std::swap(jetton_, other->jetton_);
    std::swap(state_, other->state_);
    std::swap(pokerstate_, other->pokerstate_);
    std::swap(pokerstate_discard_, other->pokerstate_discard_);
    std::swap(compare_, other->compare_);
    std::swap(endshow_, other->endshow_);
    std::swap(winnum_, other->winnum_);
    std::swap(maxdntype_, other->maxdntype_);
    std::swap(maxscore_, other->maxscore_);
    std::swap(audocingl_, other->audocingl_);
    jettonlist_.Swap(&other->jettonlist_);
    std::swap(callnum_, other->callnum_);
    std::swap(thannum_, other->thannum_);
    fillist_.Swap(&other->fillist_);
    thanuserid_.Swap(&other->thanuserid_);
    std::swap(timeoutsum_, other->timeoutsum_);
    std::swap(nickname_, other->nickname_);
    std::swap(sex_, other->sex_);
    std::swap(face_1_, other->face_1_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pszuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pszuser_descriptor_;
  metadata.reflection = pszuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pszinfo::kTableidFieldNumber;
const int pszinfo::kTablemarkFieldNumber;
const int pszinfo::kTabletimeFieldNumber;
const int pszinfo::kStateFieldNumber;
const int pszinfo::kTimemarkFieldNumber;
const int pszinfo::kTabletypeFieldNumber;
const int pszinfo::kDifenFieldNumber;
const int pszinfo::kDoublecompFieldNumber;
const int pszinfo::kBoutcappFieldNumber;
const int pszinfo::kMincompFieldNumber;
const int pszinfo::kMenpaiFieldNumber;
const int pszinfo::kMaxplaynumFieldNumber;
const int pszinfo::kPaytypeFieldNumber;
const int pszinfo::kRestrictFieldNumber;
const int pszinfo::kAutoreadyFieldNumber;
const int pszinfo::kOwneridFieldNumber;
const int pszinfo::kBankerIDFieldNumber;
const int pszinfo::kSituserFieldNumber;
const int pszinfo::kStanduserFieldNumber;
const int pszinfo::kUsevipnumFieldNumber;
const int pszinfo::kGuodiFieldNumber;
const int pszinfo::kOncepourFieldNumber;
const int pszinfo::kPresentboutFieldNumber;
const int pszinfo::kDissolveinfoFieldNumber;
const int pszinfo::kStractionFieldNumber;
const int pszinfo::kPaywayFieldNumber;
const int pszinfo::kPaynumFieldNumber;
const int pszinfo::kMaxuserFieldNumber;
const int pszinfo::kActionlistFieldNumber;
const int pszinfo::kDeluserFieldNumber;
const int pszinfo::kActionuserFieldNumber;
const int pszinfo::kUsernumFieldNumber;
const int pszinfo::kJulebuidFieldNumber;
const int pszinfo::kFlagFieldNumber;
const int pszinfo::kPsztypeFieldNumber;
const int pszinfo::kPourcountFieldNumber;
#endif  // !_MSC_VER

pszinfo::pszinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pszinfo::InitAsDefaultInstance() {
}

pszinfo::pszinfo(const pszinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pszinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablemark_ = 0;
  tabletime_ = 0;
  state_ = 0;
  timemark_ = 0;
  tabletype_ = 0;
  difen_ = 0;
  doublecomp_ = 0;
  boutcapp_ = 0;
  mincomp_ = 0;
  menpai_ = 0;
  maxplaynum_ = 0;
  paytype_ = 0;
  restrict_ = 0;
  autoready_ = 0;
  ownerid_ = 0;
  bankerid_ = 0;
  usevipnum_ = 0;
  guodi_ = 0;
  oncepour_ = 0;
  presentbout_ = 0;
  dissolveinfo_ = 0;
  straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payway_ = 0;
  paynum_ = 0;
  maxuser_ = 0;
  deluser_ = 0;
  actionuser_ = 0;
  usernum_ = 0;
  julebuid_ = 0;
  flag_ = 0;
  psztype_ = 0;
  pourcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pszinfo::~pszinfo() {
  SharedDtor();
}

void pszinfo::SharedDtor() {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (this != default_instance_) {
  }
}

void pszinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pszinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pszinfo_descriptor_;
}

const pszinfo& pszinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fpsz_2eproto();
  return *default_instance_;
}

pszinfo* pszinfo::default_instance_ = NULL;

pszinfo* pszinfo::New() const {
  return new pszinfo;
}

void pszinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tablemark_ = 0;
    tabletime_ = 0;
    state_ = 0;
    timemark_ = 0;
    tabletype_ = 0;
    difen_ = 0;
    doublecomp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boutcapp_ = 0;
    mincomp_ = 0;
    menpai_ = 0;
    maxplaynum_ = 0;
    paytype_ = 0;
    restrict_ = 0;
    autoready_ = 0;
    ownerid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bankerid_ = 0;
    usevipnum_ = 0;
    guodi_ = 0;
    oncepour_ = 0;
    presentbout_ = 0;
    dissolveinfo_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_straction()) {
      if (straction_ != &::google::protobuf::internal::kEmptyString) {
        straction_->clear();
      }
    }
    payway_ = 0;
    paynum_ = 0;
    maxuser_ = 0;
    deluser_ = 0;
    actionuser_ = 0;
    usernum_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    julebuid_ = 0;
    flag_ = 0;
    psztype_ = 0;
    pourcount_ = 0;
  }
  situser_.Clear();
  standuser_.Clear();
  actionlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pszinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tablemark;
        break;
      }

      // optional int32 tablemark = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tablemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemark_)));
          set_has_tablemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tabletime;
        break;
      }

      // optional int32 tabletime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletime_)));
          set_has_tabletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_difen;
        break;
      }

      // optional int32 difen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_doublecomp;
        break;
      }

      // optional int32 doublecomp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doublecomp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doublecomp_)));
          set_has_doublecomp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_boutcapp;
        break;
      }

      // optional int32 boutcapp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boutcapp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boutcapp_)));
          set_has_boutcapp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mincomp;
        break;
      }

      // optional int32 mincomp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mincomp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mincomp_)));
          set_has_mincomp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_menpai;
        break;
      }

      // optional int32 menpai = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menpai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menpai_)));
          set_has_menpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxplaynum;
        break;
      }

      // optional int32 maxplaynum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplaynum_)));
          set_has_maxplaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_paytype;
        break;
      }

      // optional int32 paytype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paytype_)));
          set_has_paytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_restrict;
        break;
      }

      // optional int32 restrict = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restrict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restrict_)));
          set_has_restrict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_autoready;
        break;
      }

      // optional int32 autoready = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoready_)));
          set_has_autoready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bankerID;
        break;
      }

      // optional int32 bankerID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_situser;
        break;
      }

      // repeated .progame.pszuser situser = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_situser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_situser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_situser;
        if (input->ExpectTag(152)) goto parse_standuser;
        break;
      }

      // repeated int32 standuser = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_standuser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_standuser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_standuser;
        if (input->ExpectTag(160)) goto parse_usevipnum;
        break;
      }

      // optional int32 usevipnum = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usevipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usevipnum_)));
          set_has_usevipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_guodi;
        break;
      }

      // optional int32 guodi = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guodi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guodi_)));
          set_has_guodi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_oncepour;
        break;
      }

      // optional int32 oncepour = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oncepour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oncepour_)));
          set_has_oncepour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_presentbout;
        break;
      }

      // optional int32 presentbout = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentbout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentbout_)));
          set_has_presentbout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_dissolveinfo;
        break;
      }

      // optional int32 dissolveinfo = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolveinfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolveinfo_)));
          set_has_dissolveinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_straction;
        break;
      }

      // optional string straction = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_straction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straction().data(), this->straction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_payway;
        break;
      }

      // optional int32 payway = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payway_)));
          set_has_payway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_paynum;
        break;
      }

      // optional int32 paynum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paynum_)));
          set_has_paynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_actionlist;
        break;
      }

      // repeated int32 actionlist = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 240, input, this->mutable_actionlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actionlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_actionlist;
        if (input->ExpectTag(248)) goto parse_deluser;
        break;
      }

      // optional int32 deluser = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deluser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deluser_)));
          set_has_deluser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_actionuser;
        break;
      }

      // optional int32 actionuser = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionuser_)));
          set_has_actionuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_usernum;
        break;
      }

      // optional int32 usernum = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_julebuid;
        break;
      }

      // optional int32 julebuid = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_julebuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &julebuid_)));
          set_has_julebuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_flag;
        break;
      }

      // optional int32 flag = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_psztype;
        break;
      }

      // optional int32 psztype = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psztype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &psztype_)));
          set_has_psztype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_pourcount;
        break;
      }

      // optional int32 pourcount = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourcount_)));
          set_has_pourcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pszinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tablemark(), output);
  }

  // optional int32 tabletime = 3;
  if (has_tabletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tabletime(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timemark(), output);
  }

  // optional int32 tabletype = 6;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tabletype(), output);
  }

  // optional int32 difen = 7;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->difen(), output);
  }

  // optional int32 doublecomp = 8;
  if (has_doublecomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->doublecomp(), output);
  }

  // optional int32 boutcapp = 9;
  if (has_boutcapp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->boutcapp(), output);
  }

  // optional int32 mincomp = 10;
  if (has_mincomp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mincomp(), output);
  }

  // optional int32 menpai = 11;
  if (has_menpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->menpai(), output);
  }

  // optional int32 maxplaynum = 12;
  if (has_maxplaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->maxplaynum(), output);
  }

  // optional int32 paytype = 13;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->paytype(), output);
  }

  // optional int32 restrict = 14;
  if (has_restrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->restrict(), output);
  }

  // optional int32 autoready = 15;
  if (has_autoready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->autoready(), output);
  }

  // optional int32 ownerid = 16;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ownerid(), output);
  }

  // optional int32 bankerID = 17;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bankerid(), output);
  }

  // repeated .progame.pszuser situser = 18;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->situser(i), output);
  }

  // repeated int32 standuser = 19;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->standuser(i), output);
  }

  // optional int32 usevipnum = 20;
  if (has_usevipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->usevipnum(), output);
  }

  // optional int32 guodi = 21;
  if (has_guodi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->guodi(), output);
  }

  // optional int32 oncepour = 22;
  if (has_oncepour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->oncepour(), output);
  }

  // optional int32 presentbout = 23;
  if (has_presentbout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->presentbout(), output);
  }

  // optional int32 dissolveinfo = 24;
  if (has_dissolveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->dissolveinfo(), output);
  }

  // optional string straction = 25;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->straction(), output);
  }

  // optional int32 payway = 26;
  if (has_payway()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->payway(), output);
  }

  // optional int32 paynum = 27;
  if (has_paynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->paynum(), output);
  }

  // optional int32 maxuser = 29;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->maxuser(), output);
  }

  // repeated int32 actionlist = 30;
  for (int i = 0; i < this->actionlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      30, this->actionlist(i), output);
  }

  // optional int32 deluser = 31;
  if (has_deluser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->deluser(), output);
  }

  // optional int32 actionuser = 32;
  if (has_actionuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->actionuser(), output);
  }

  // optional int32 usernum = 33;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->usernum(), output);
  }

  // optional int32 julebuid = 34;
  if (has_julebuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->julebuid(), output);
  }

  // optional int32 flag = 35;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->flag(), output);
  }

  // optional int32 psztype = 36;
  if (has_psztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->psztype(), output);
  }

  // optional int32 pourcount = 37;
  if (has_pourcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->pourcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pszinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tablemark = 2;
  if (has_tablemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tablemark(), target);
  }

  // optional int32 tabletime = 3;
  if (has_tabletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tabletime(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 timemark = 5;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timemark(), target);
  }

  // optional int32 tabletype = 6;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tabletype(), target);
  }

  // optional int32 difen = 7;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->difen(), target);
  }

  // optional int32 doublecomp = 8;
  if (has_doublecomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->doublecomp(), target);
  }

  // optional int32 boutcapp = 9;
  if (has_boutcapp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->boutcapp(), target);
  }

  // optional int32 mincomp = 10;
  if (has_mincomp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mincomp(), target);
  }

  // optional int32 menpai = 11;
  if (has_menpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->menpai(), target);
  }

  // optional int32 maxplaynum = 12;
  if (has_maxplaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->maxplaynum(), target);
  }

  // optional int32 paytype = 13;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->paytype(), target);
  }

  // optional int32 restrict = 14;
  if (has_restrict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->restrict(), target);
  }

  // optional int32 autoready = 15;
  if (has_autoready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->autoready(), target);
  }

  // optional int32 ownerid = 16;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ownerid(), target);
  }

  // optional int32 bankerID = 17;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bankerid(), target);
  }

  // repeated .progame.pszuser situser = 18;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->situser(i), target);
  }

  // repeated int32 standuser = 19;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->standuser(i), target);
  }

  // optional int32 usevipnum = 20;
  if (has_usevipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->usevipnum(), target);
  }

  // optional int32 guodi = 21;
  if (has_guodi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->guodi(), target);
  }

  // optional int32 oncepour = 22;
  if (has_oncepour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->oncepour(), target);
  }

  // optional int32 presentbout = 23;
  if (has_presentbout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->presentbout(), target);
  }

  // optional int32 dissolveinfo = 24;
  if (has_dissolveinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->dissolveinfo(), target);
  }

  // optional string straction = 25;
  if (has_straction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straction().data(), this->straction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->straction(), target);
  }

  // optional int32 payway = 26;
  if (has_payway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->payway(), target);
  }

  // optional int32 paynum = 27;
  if (has_paynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->paynum(), target);
  }

  // optional int32 maxuser = 29;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->maxuser(), target);
  }

  // repeated int32 actionlist = 30;
  for (int i = 0; i < this->actionlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(30, this->actionlist(i), target);
  }

  // optional int32 deluser = 31;
  if (has_deluser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->deluser(), target);
  }

  // optional int32 actionuser = 32;
  if (has_actionuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->actionuser(), target);
  }

  // optional int32 usernum = 33;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->usernum(), target);
  }

  // optional int32 julebuid = 34;
  if (has_julebuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->julebuid(), target);
  }

  // optional int32 flag = 35;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->flag(), target);
  }

  // optional int32 psztype = 36;
  if (has_psztype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->psztype(), target);
  }

  // optional int32 pourcount = 37;
  if (has_pourcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->pourcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pszinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tablemark = 2;
    if (has_tablemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemark());
    }

    // optional int32 tabletime = 3;
    if (has_tabletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletime());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 5;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 tabletype = 6;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 difen = 7;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }

    // optional int32 doublecomp = 8;
    if (has_doublecomp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doublecomp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 boutcapp = 9;
    if (has_boutcapp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boutcapp());
    }

    // optional int32 mincomp = 10;
    if (has_mincomp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mincomp());
    }

    // optional int32 menpai = 11;
    if (has_menpai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menpai());
    }

    // optional int32 maxplaynum = 12;
    if (has_maxplaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxplaynum());
    }

    // optional int32 paytype = 13;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paytype());
    }

    // optional int32 restrict = 14;
    if (has_restrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restrict());
    }

    // optional int32 autoready = 15;
    if (has_autoready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoready());
    }

    // optional int32 ownerid = 16;
    if (has_ownerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 bankerID = 17;
    if (has_bankerid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 usevipnum = 20;
    if (has_usevipnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usevipnum());
    }

    // optional int32 guodi = 21;
    if (has_guodi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guodi());
    }

    // optional int32 oncepour = 22;
    if (has_oncepour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oncepour());
    }

    // optional int32 presentbout = 23;
    if (has_presentbout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentbout());
    }

    // optional int32 dissolveinfo = 24;
    if (has_dissolveinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolveinfo());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string straction = 25;
    if (has_straction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straction());
    }

    // optional int32 payway = 26;
    if (has_payway()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payway());
    }

    // optional int32 paynum = 27;
    if (has_paynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paynum());
    }

    // optional int32 maxuser = 29;
    if (has_maxuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional int32 deluser = 31;
    if (has_deluser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deluser());
    }

    // optional int32 actionuser = 32;
    if (has_actionuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionuser());
    }

    // optional int32 usernum = 33;
    if (has_usernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usernum());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 julebuid = 34;
    if (has_julebuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->julebuid());
    }

    // optional int32 flag = 35;
    if (has_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 psztype = 36;
    if (has_psztype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->psztype());
    }

    // optional int32 pourcount = 37;
    if (has_pourcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourcount());
    }

  }
  // repeated .progame.pszuser situser = 18;
  total_size += 2 * this->situser_size();
  for (int i = 0; i < this->situser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->situser(i));
  }

  // repeated int32 standuser = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->standuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->standuser(i));
    }
    total_size += 2 * this->standuser_size() + data_size;
  }

  // repeated int32 actionlist = 30;
  {
    int data_size = 0;
    for (int i = 0; i < this->actionlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actionlist(i));
    }
    total_size += 2 * this->actionlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pszinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pszinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pszinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pszinfo::MergeFrom(const pszinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  actionlist_.MergeFrom(from.actionlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablemark()) {
      set_tablemark(from.tablemark());
    }
    if (from.has_tabletime()) {
      set_tabletime(from.tabletime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_doublecomp()) {
      set_doublecomp(from.doublecomp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boutcapp()) {
      set_boutcapp(from.boutcapp());
    }
    if (from.has_mincomp()) {
      set_mincomp(from.mincomp());
    }
    if (from.has_menpai()) {
      set_menpai(from.menpai());
    }
    if (from.has_maxplaynum()) {
      set_maxplaynum(from.maxplaynum());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_restrict()) {
      set_restrict(from.restrict());
    }
    if (from.has_autoready()) {
      set_autoready(from.autoready());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_usevipnum()) {
      set_usevipnum(from.usevipnum());
    }
    if (from.has_guodi()) {
      set_guodi(from.guodi());
    }
    if (from.has_oncepour()) {
      set_oncepour(from.oncepour());
    }
    if (from.has_presentbout()) {
      set_presentbout(from.presentbout());
    }
    if (from.has_dissolveinfo()) {
      set_dissolveinfo(from.dissolveinfo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_straction()) {
      set_straction(from.straction());
    }
    if (from.has_payway()) {
      set_payway(from.payway());
    }
    if (from.has_paynum()) {
      set_paynum(from.paynum());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_deluser()) {
      set_deluser(from.deluser());
    }
    if (from.has_actionuser()) {
      set_actionuser(from.actionuser());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_julebuid()) {
      set_julebuid(from.julebuid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_psztype()) {
      set_psztype(from.psztype());
    }
    if (from.has_pourcount()) {
      set_pourcount(from.pourcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pszinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pszinfo::CopyFrom(const pszinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pszinfo::IsInitialized() const {

  return true;
}

void pszinfo::Swap(pszinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablemark_, other->tablemark_);
    std::swap(tabletime_, other->tabletime_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(difen_, other->difen_);
    std::swap(doublecomp_, other->doublecomp_);
    std::swap(boutcapp_, other->boutcapp_);
    std::swap(mincomp_, other->mincomp_);
    std::swap(menpai_, other->menpai_);
    std::swap(maxplaynum_, other->maxplaynum_);
    std::swap(paytype_, other->paytype_);
    std::swap(restrict_, other->restrict_);
    std::swap(autoready_, other->autoready_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(bankerid_, other->bankerid_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(usevipnum_, other->usevipnum_);
    std::swap(guodi_, other->guodi_);
    std::swap(oncepour_, other->oncepour_);
    std::swap(presentbout_, other->presentbout_);
    std::swap(dissolveinfo_, other->dissolveinfo_);
    std::swap(straction_, other->straction_);
    std::swap(payway_, other->payway_);
    std::swap(paynum_, other->paynum_);
    std::swap(maxuser_, other->maxuser_);
    actionlist_.Swap(&other->actionlist_);
    std::swap(deluser_, other->deluser_);
    std::swap(actionuser_, other->actionuser_);
    std::swap(usernum_, other->usernum_);
    std::swap(julebuid_, other->julebuid_);
    std::swap(flag_, other->flag_);
    std::swap(psztype_, other->psztype_);
    std::swap(pourcount_, other->pourcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pszinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pszinfo_descriptor_;
  metadata.reflection = pszinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pszhandpoker::kHandpokerFieldNumber;
#endif  // !_MSC_VER

pszhandpoker::pszhandpoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pszhandpoker::InitAsDefaultInstance() {
}

pszhandpoker::pszhandpoker(const pszhandpoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pszhandpoker::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pszhandpoker::~pszhandpoker() {
  SharedDtor();
}

void pszhandpoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pszhandpoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pszhandpoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pszhandpoker_descriptor_;
}

const pszhandpoker& pszhandpoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fpsz_2eproto();
  return *default_instance_;
}

pszhandpoker* pszhandpoker::default_instance_ = NULL;

pszhandpoker* pszhandpoker::New() const {
  return new pszhandpoker;
}

void pszhandpoker::Clear() {
  handpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pszhandpoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 handpoker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_handpoker;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pszhandpoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 handpoker = 1;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->handpoker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pszhandpoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 handpoker = 1;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->handpoker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pszhandpoker::ByteSize() const {
  int total_size = 0;

  // repeated int32 handpoker = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pszhandpoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pszhandpoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pszhandpoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pszhandpoker::MergeFrom(const pszhandpoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pszhandpoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pszhandpoker::CopyFrom(const pszhandpoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pszhandpoker::IsInitialized() const {

  return true;
}

void pszhandpoker::Swap(pszhandpoker* other) {
  if (other != this) {
    handpoker_.Swap(&other->handpoker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pszhandpoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pszhandpoker_descriptor_;
  metadata.reflection = pszhandpoker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pszhistoryitem::kLegFieldNumber;
const int pszhistoryitem::kGuodiFieldNumber;
const int pszhistoryitem::kPresentboutFieldNumber;
const int pszhistoryitem::kOncepourFieldNumber;
const int pszhistoryitem::kWineridFieldNumber;
const int pszhistoryitem::kUseridlistFieldNumber;
const int pszhistoryitem::kNicklistFieldNumber;
const int pszhistoryitem::kJettonFieldNumber;
const int pszhistoryitem::kPokerlistFieldNumber;
const int pszhistoryitem::kPsztypelistFieldNumber;
const int pszhistoryitem::kWinlistFieldNumber;
const int pszhistoryitem::kResultlistFieldNumber;
#endif  // !_MSC_VER

pszhistoryitem::pszhistoryitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pszhistoryitem::InitAsDefaultInstance() {
}

pszhistoryitem::pszhistoryitem(const pszhistoryitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pszhistoryitem::SharedCtor() {
  _cached_size_ = 0;
  leg_ = 0;
  guodi_ = 0;
  presentbout_ = 0;
  oncepour_ = 0;
  winerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pszhistoryitem::~pszhistoryitem() {
  SharedDtor();
}

void pszhistoryitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pszhistoryitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pszhistoryitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pszhistoryitem_descriptor_;
}

const pszhistoryitem& pszhistoryitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fpsz_2eproto();
  return *default_instance_;
}

pszhistoryitem* pszhistoryitem::default_instance_ = NULL;

pszhistoryitem* pszhistoryitem::New() const {
  return new pszhistoryitem;
}

void pszhistoryitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leg_ = 0;
    guodi_ = 0;
    presentbout_ = 0;
    oncepour_ = 0;
    winerid_ = 0;
  }
  useridlist_.Clear();
  nicklist_.Clear();
  jetton_.Clear();
  pokerlist_.Clear();
  psztypelist_.Clear();
  winlist_.Clear();
  resultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pszhistoryitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leg_)));
          set_has_leg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guodi;
        break;
      }

      // optional int32 guodi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guodi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guodi_)));
          set_has_guodi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_presentbout;
        break;
      }

      // optional int32 presentbout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentbout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentbout_)));
          set_has_presentbout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oncepour;
        break;
      }

      // optional int32 oncepour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oncepour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oncepour_)));
          set_has_oncepour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winerid;
        break;
      }

      // optional int32 winerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winerid_)));
          set_has_winerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_useridlist;
        if (input->ExpectTag(58)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nicklist;
        if (input->ExpectTag(64)) goto parse_jetton;
        break;
      }

      // repeated int32 jetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_jetton())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jetton())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jetton;
        if (input->ExpectTag(74)) goto parse_pokerlist;
        break;
      }

      // repeated .progame.pszhandpoker pokerlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pokerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pokerlist;
        if (input->ExpectTag(80)) goto parse_psztypelist;
        break;
      }

      // repeated int32 psztypelist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_psztypelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_psztypelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_psztypelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_psztypelist;
        if (input->ExpectTag(88)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_winlist;
        if (input->ExpectTag(136)) goto parse_resultlist;
        break;
      }

      // repeated int32 resultlist = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_resultlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_resultlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_resultlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pszhistoryitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 leg = 1;
  if (has_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leg(), output);
  }

  // optional int32 guodi = 2;
  if (has_guodi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guodi(), output);
  }

  // optional int32 presentbout = 3;
  if (has_presentbout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->presentbout(), output);
  }

  // optional int32 oncepour = 4;
  if (has_oncepour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oncepour(), output);
  }

  // optional int32 winerid = 5;
  if (has_winerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winerid(), output);
  }

  // repeated int32 useridlist = 6;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->useridlist(i), output);
  }

  // repeated string nicklist = 7;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nicklist(i), output);
  }

  // repeated int32 jetton = 8;
  for (int i = 0; i < this->jetton_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->jetton(i), output);
  }

  // repeated .progame.pszhandpoker pokerlist = 9;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pokerlist(i), output);
  }

  // repeated int32 psztypelist = 10;
  for (int i = 0; i < this->psztypelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->psztypelist(i), output);
  }

  // repeated int32 winlist = 11;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->winlist(i), output);
  }

  // repeated int32 resultlist = 17;
  for (int i = 0; i < this->resultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->resultlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pszhistoryitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 leg = 1;
  if (has_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leg(), target);
  }

  // optional int32 guodi = 2;
  if (has_guodi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guodi(), target);
  }

  // optional int32 presentbout = 3;
  if (has_presentbout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->presentbout(), target);
  }

  // optional int32 oncepour = 4;
  if (has_oncepour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oncepour(), target);
  }

  // optional int32 winerid = 5;
  if (has_winerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winerid(), target);
  }

  // repeated int32 useridlist = 6;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->useridlist(i), target);
  }

  // repeated string nicklist = 7;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->nicklist(i), target);
  }

  // repeated int32 jetton = 8;
  for (int i = 0; i < this->jetton_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->jetton(i), target);
  }

  // repeated .progame.pszhandpoker pokerlist = 9;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pokerlist(i), target);
  }

  // repeated int32 psztypelist = 10;
  for (int i = 0; i < this->psztypelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->psztypelist(i), target);
  }

  // repeated int32 winlist = 11;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->winlist(i), target);
  }

  // repeated int32 resultlist = 17;
  for (int i = 0; i < this->resultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->resultlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pszhistoryitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leg = 1;
    if (has_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leg());
    }

    // optional int32 guodi = 2;
    if (has_guodi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guodi());
    }

    // optional int32 presentbout = 3;
    if (has_presentbout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentbout());
    }

    // optional int32 oncepour = 4;
    if (has_oncepour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oncepour());
    }

    // optional int32 winerid = 5;
    if (has_winerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winerid());
    }

  }
  // repeated int32 useridlist = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated string nicklist = 7;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 jetton = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->jetton_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jetton(i));
    }
    total_size += 1 * this->jetton_size() + data_size;
  }

  // repeated .progame.pszhandpoker pokerlist = 9;
  total_size += 1 * this->pokerlist_size();
  for (int i = 0; i < this->pokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokerlist(i));
  }

  // repeated int32 psztypelist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->psztypelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->psztypelist(i));
    }
    total_size += 1 * this->psztypelist_size() + data_size;
  }

  // repeated int32 winlist = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated int32 resultlist = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->resultlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->resultlist(i));
    }
    total_size += 2 * this->resultlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pszhistoryitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pszhistoryitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pszhistoryitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pszhistoryitem::MergeFrom(const pszhistoryitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  nicklist_.MergeFrom(from.nicklist_);
  jetton_.MergeFrom(from.jetton_);
  pokerlist_.MergeFrom(from.pokerlist_);
  psztypelist_.MergeFrom(from.psztypelist_);
  winlist_.MergeFrom(from.winlist_);
  resultlist_.MergeFrom(from.resultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg()) {
      set_leg(from.leg());
    }
    if (from.has_guodi()) {
      set_guodi(from.guodi());
    }
    if (from.has_presentbout()) {
      set_presentbout(from.presentbout());
    }
    if (from.has_oncepour()) {
      set_oncepour(from.oncepour());
    }
    if (from.has_winerid()) {
      set_winerid(from.winerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pszhistoryitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pszhistoryitem::CopyFrom(const pszhistoryitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pszhistoryitem::IsInitialized() const {

  return true;
}

void pszhistoryitem::Swap(pszhistoryitem* other) {
  if (other != this) {
    std::swap(leg_, other->leg_);
    std::swap(guodi_, other->guodi_);
    std::swap(presentbout_, other->presentbout_);
    std::swap(oncepour_, other->oncepour_);
    std::swap(winerid_, other->winerid_);
    useridlist_.Swap(&other->useridlist_);
    nicklist_.Swap(&other->nicklist_);
    jetton_.Swap(&other->jetton_);
    pokerlist_.Swap(&other->pokerlist_);
    psztypelist_.Swap(&other->psztypelist_);
    winlist_.Swap(&other->winlist_);
    resultlist_.Swap(&other->resultlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pszhistoryitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pszhistoryitem_descriptor_;
  metadata.reflection = pszhistoryitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pszhistory::kTableidFieldNumber;
const int pszhistory::kPlaynummaxFieldNumber;
const int pszhistory::kPlaynumFieldNumber;
const int pszhistory::kDifenFieldNumber;
const int pszhistory::kGametimeFieldNumber;
const int pszhistory::kOwneridFieldNumber;
const int pszhistory::kNicklistFieldNumber;
const int pszhistory::kUseridlistFieldNumber;
const int pszhistory::kWinlistFieldNumber;
const int pszhistory::kHitemlistFieldNumber;
#endif  // !_MSC_VER

pszhistory::pszhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pszhistory::InitAsDefaultInstance() {
}

pszhistory::pszhistory(const pszhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pszhistory::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  playnummax_ = 0;
  playnum_ = 0;
  difen_ = 0;
  gametime_ = 0;
  ownerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pszhistory::~pszhistory() {
  SharedDtor();
}

void pszhistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pszhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pszhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pszhistory_descriptor_;
}

const pszhistory& pszhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fpsz_2eproto();
  return *default_instance_;
}

pszhistory* pszhistory::default_instance_ = NULL;

pszhistory* pszhistory::New() const {
  return new pszhistory;
}

void pszhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    playnummax_ = 0;
    playnum_ = 0;
    difen_ = 0;
    gametime_ = 0;
    ownerid_ = 0;
  }
  nicklist_.Clear();
  useridlist_.Clear();
  winlist_.Clear();
  hitemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pszhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playnummax;
        break;
      }

      // optional int32 playnummax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnummax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnummax_)));
          set_has_playnummax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playnum;
        break;
      }

      // optional int32 playnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnum_)));
          set_has_playnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_difen;
        break;
      }

      // optional int32 difen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difen_)));
          set_has_difen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gametime;
        break;
      }

      // optional int32 gametime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ownerid;
        break;
      }

      // optional int32 ownerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nicklist;
        break;
      }

      // repeated string nicklist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nicklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nicklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nicklist(this->nicklist_size() - 1).data(),
            this->nicklist(this->nicklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nicklist;
        if (input->ExpectTag(72)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_useridlist;
        if (input->ExpectTag(80)) goto parse_winlist;
        break;
      }

      // repeated int32 winlist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_winlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_winlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_winlist;
        if (input->ExpectTag(90)) goto parse_hitemlist;
        break;
      }

      // repeated .progame.pszhistoryitem hitemlist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hitemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hitemlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pszhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 playnummax = 2;
  if (has_playnummax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playnummax(), output);
  }

  // optional int32 playnum = 3;
  if (has_playnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playnum(), output);
  }

  // optional int32 difen = 4;
  if (has_difen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difen(), output);
  }

  // optional int32 gametime = 6;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gametime(), output);
  }

  // optional int32 ownerid = 7;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ownerid(), output);
  }

  // repeated string nicklist = 8;
  for (int i = 0; i < this->nicklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nicklist(i).data(), this->nicklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->nicklist(i), output);
  }

  // repeated int32 useridlist = 9;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->useridlist(i), output);
  }

  // repeated int32 winlist = 10;
  for (int i = 0; i < this->winlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->winlist(i), output);
  }

  // repeated .progame.pszhistoryitem hitemlist = 11;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->hitemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pszhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 playnummax = 2;
  if (has_playnummax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playnummax(), target);
  }

  // optional int32 playnum = 3;
  if (has_playnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playnum(), target);
  }

  // optional int32 difen = 4;
  if (has_difen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difen(), target);
  }

  // optional int32 gametime = 6;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gametime(), target);
  }

  // optional int32 ownerid = 7;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ownerid(), target);
  }

  // repeated string nicklist = 8;
  for (int i = 0; i < this->nicklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nicklist(i).data(), this->nicklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->nicklist(i), target);
  }

  // repeated int32 useridlist = 9;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->useridlist(i), target);
  }

  // repeated int32 winlist = 10;
  for (int i = 0; i < this->winlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->winlist(i), target);
  }

  // repeated .progame.pszhistoryitem hitemlist = 11;
  for (int i = 0; i < this->hitemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->hitemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pszhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 playnummax = 2;
    if (has_playnummax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnummax());
    }

    // optional int32 playnum = 3;
    if (has_playnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnum());
    }

    // optional int32 difen = 4;
    if (has_difen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difen());
    }

    // optional int32 gametime = 6;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

    // optional int32 ownerid = 7;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerid());
    }

  }
  // repeated string nicklist = 8;
  total_size += 1 * this->nicklist_size();
  for (int i = 0; i < this->nicklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nicklist(i));
  }

  // repeated int32 useridlist = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  // repeated int32 winlist = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->winlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->winlist(i));
    }
    total_size += 1 * this->winlist_size() + data_size;
  }

  // repeated .progame.pszhistoryitem hitemlist = 11;
  total_size += 1 * this->hitemlist_size();
  for (int i = 0; i < this->hitemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hitemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pszhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pszhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pszhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pszhistory::MergeFrom(const pszhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  nicklist_.MergeFrom(from.nicklist_);
  useridlist_.MergeFrom(from.useridlist_);
  winlist_.MergeFrom(from.winlist_);
  hitemlist_.MergeFrom(from.hitemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_playnummax()) {
      set_playnummax(from.playnummax());
    }
    if (from.has_playnum()) {
      set_playnum(from.playnum());
    }
    if (from.has_difen()) {
      set_difen(from.difen());
    }
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pszhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pszhistory::CopyFrom(const pszhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pszhistory::IsInitialized() const {

  return true;
}

void pszhistory::Swap(pszhistory* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(playnummax_, other->playnummax_);
    std::swap(playnum_, other->playnum_);
    std::swap(difen_, other->difen_);
    std::swap(gametime_, other->gametime_);
    std::swap(ownerid_, other->ownerid_);
    nicklist_.Swap(&other->nicklist_);
    useridlist_.Swap(&other->useridlist_);
    winlist_.Swap(&other->winlist_);
    hitemlist_.Swap(&other->hitemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pszhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pszhistory_descriptor_;
  metadata.reflection = pszhistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pszcomparepoker::kWinneridFieldNumber;
const int pszcomparepoker::kLoseridFieldNumber;
#endif  // !_MSC_VER

pszcomparepoker::pszcomparepoker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pszcomparepoker::InitAsDefaultInstance() {
}

pszcomparepoker::pszcomparepoker(const pszcomparepoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pszcomparepoker::SharedCtor() {
  _cached_size_ = 0;
  winnerid_ = 0;
  loserid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pszcomparepoker::~pszcomparepoker() {
  SharedDtor();
}

void pszcomparepoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pszcomparepoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pszcomparepoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pszcomparepoker_descriptor_;
}

const pszcomparepoker& pszcomparepoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5fpsz_2eproto();
  return *default_instance_;
}

pszcomparepoker* pszcomparepoker::default_instance_ = NULL;

pszcomparepoker* pszcomparepoker::New() const {
  return new pszcomparepoker;
}

void pszcomparepoker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winnerid_ = 0;
    loserid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pszcomparepoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 winnerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnerid_)));
          set_has_winnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loserid;
        break;
      }

      // optional int32 loserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loserid_)));
          set_has_loserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pszcomparepoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 winnerid = 1;
  if (has_winnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winnerid(), output);
  }

  // optional int32 loserid = 2;
  if (has_loserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pszcomparepoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 winnerid = 1;
  if (has_winnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winnerid(), target);
  }

  // optional int32 loserid = 2;
  if (has_loserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pszcomparepoker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 winnerid = 1;
    if (has_winnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnerid());
    }

    // optional int32 loserid = 2;
    if (has_loserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pszcomparepoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pszcomparepoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pszcomparepoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pszcomparepoker::MergeFrom(const pszcomparepoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winnerid()) {
      set_winnerid(from.winnerid());
    }
    if (from.has_loserid()) {
      set_loserid(from.loserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pszcomparepoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pszcomparepoker::CopyFrom(const pszcomparepoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pszcomparepoker::IsInitialized() const {

  return true;
}

void pszcomparepoker::Swap(pszcomparepoker* other) {
  if (other != this) {
    std::swap(winnerid_, other->winnerid_);
    std::swap(loserid_, other->loserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pszcomparepoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pszcomparepoker_descriptor_;
  metadata.reflection = pszcomparepoker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
