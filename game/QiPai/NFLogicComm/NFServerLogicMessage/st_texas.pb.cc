// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_texas.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_texas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* texascardlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texascardlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* texasstanuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texasstanuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* texasuserpour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texasuserpour_reflection_ = NULL;
const ::google::protobuf::Descriptor* texasalluserpour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texasalluserpour_reflection_ = NULL;
const ::google::protobuf::Descriptor* texasuser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texasuser_reflection_ = NULL;
const ::google::protobuf::Descriptor* texasinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  texasinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5ftexas_2eproto() {
  protobuf_AddDesc_st_5ftexas_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_texas.proto");
  GOOGLE_CHECK(file != NULL);
  texascardlist_descriptor_ = file->message_type(0);
  static const int texascardlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texascardlist, card_),
  };
  texascardlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texascardlist_descriptor_,
      texascardlist::default_instance_,
      texascardlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texascardlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texascardlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texascardlist));
  texasstanuser_descriptor_ = file->message_type(1);
  static const int texasstanuser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasstanuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasstanuser, watchnum_),
  };
  texasstanuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texasstanuser_descriptor_,
      texasstanuser::default_instance_,
      texasstanuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasstanuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasstanuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texasstanuser));
  texasuserpour_descriptor_ = file->message_type(2);
  static const int texasuserpour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuserpour, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuserpour, pourjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuserpour, isallon_),
  };
  texasuserpour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texasuserpour_descriptor_,
      texasuserpour::default_instance_,
      texasuserpour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuserpour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuserpour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texasuserpour));
  texasalluserpour_descriptor_ = file->message_type(3);
  static const int texasalluserpour_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasalluserpour, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasalluserpour, pourjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasalluserpour, cards_),
  };
  texasalluserpour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texasalluserpour_descriptor_,
      texasalluserpour::default_instance_,
      texasalluserpour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasalluserpour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasalluserpour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texasalluserpour));
  texasuser_descriptor_ = file->message_type(4);
  static const int texasuser_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, handpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, texastype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, jettoncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, pokerstate_discard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, callnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, addjettonmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, addjettonmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, timeoutsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, face_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, fenchinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, selfcarry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, ismaxcardtype_),
  };
  texasuser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texasuser_descriptor_,
      texasuser::default_instance_,
      texasuser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasuser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texasuser));
  texasinfo_descriptor_ = file->message_type(5);
  static const int texasinfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, playtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, littleblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, bigblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, ante_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, maxrefuel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, boutcapp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, dicicount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, dicilist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, presentbout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, cradcircle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, followjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, actionuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, lastuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, commonpokerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, callflat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, pourlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, bankerchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, allpourlist_),
  };
  texasinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      texasinfo_descriptor_,
      texasinfo::default_instance_,
      texasinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(texasinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(texasinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5ftexas_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texascardlist_descriptor_, &texascardlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texasstanuser_descriptor_, &texasstanuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texasuserpour_descriptor_, &texasuserpour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texasalluserpour_descriptor_, &texasalluserpour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texasuser_descriptor_, &texasuser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    texasinfo_descriptor_, &texasinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5ftexas_2eproto() {
  delete texascardlist::default_instance_;
  delete texascardlist_reflection_;
  delete texasstanuser::default_instance_;
  delete texasstanuser_reflection_;
  delete texasuserpour::default_instance_;
  delete texasuserpour_reflection_;
  delete texasalluserpour::default_instance_;
  delete texasalluserpour_reflection_;
  delete texasuser::default_instance_;
  delete texasuser_reflection_;
  delete texasinfo::default_instance_;
  delete texasinfo_reflection_;
}

void protobuf_AddDesc_st_5ftexas_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016st_texas.proto\022\007progame\032\016st_human.prot"
    "o\"\035\n\rtexascardlist\022\014\n\004card\030\001 \003(\005\"1\n\rtexa"
    "sstanuser\022\016\n\006userid\030\001 \003(\005\022\020\n\010watchnum\030\002 "
    "\003(\005\"D\n\rtexasuserpour\022\016\n\006userid\030\001 \001(\005\022\022\n\n"
    "pourjetton\030\002 \001(\005\022\017\n\007isallon\030\003 \001(\005\"E\n\020tex"
    "asalluserpour\022\016\n\006userid\030\001 \001(\005\022\022\n\npourjet"
    "ton\030\002 \001(\005\022\r\n\005cards\030\003 \003(\005\"\336\002\n\ttexasuser\022\016"
    "\n\006userid\030\001 \001(\005\022\021\n\thandpoker\030\002 \003(\005\022\021\n\ttex"
    "astype\030\003 \001(\005\022\017\n\007chairid\030\004 \001(\005\022\r\n\005jifen\030\005"
    " \001(\t\022\023\n\013jettoncount\030\006 \001(\005\022\r\n\005state\030\007 \001(\005"
    "\022\032\n\022pokerstate_discard\030\010 \001(\005\022\017\n\007callNum\030"
    "\t \001(\005\022\024\n\014addjettonmin\030\n \001(\005\022\024\n\014addjetton"
    "max\030\013 \001(\005\022\022\n\ntimeoutSum\030\014 \001(\005\022\020\n\010nicknam"
    "e\030\r \001(\t\022\013\n\003sex\030\016 \001(\005\022\016\n\006face_1\030\017 \001(\t\022\021\n\t"
    "fenchinum\030\020 \001(\005\022\021\n\tselfcarry\030\021 \001(\t\022\025\n\ris"
    "maxcardtype\030\022 \001(\005\"\325\004\n\ttexasinfo\022\017\n\007table"
    "id\030\001 \001(\005\022\021\n\ttabletype\030\002 \001(\005\022\020\n\010playtype\030"
    "\003 \001(\005\022\023\n\013littleblind\030\004 \001(\005\022\020\n\010bigblind\030\005"
    " \001(\005\022\014\n\004ante\030\006 \001(\005\022\021\n\tmaxrefuel\030\007 \001(\005\022\020\n"
    "\010boutcapp\030\010 \001(\005\022\017\n\007maxuser\030\t \001(\005\022\r\n\005stat"
    "e\030\n \001(\005\022\020\n\010timemark\030\013 \001(\005\022\020\n\010bankerID\030\014 "
    "\001(\005\022#\n\007situser\030\r \003(\0132\022.progame.texasuser"
    "\022)\n\tstanduser\030\016 \003(\0132\026.progame.texasstanu"
    "ser\022\021\n\tdicicount\030\017 \001(\005\022\020\n\010dicilist\030\020 \003(\005"
    "\022\023\n\013presentbout\030\021 \001(\005\022\022\n\ncradcircle\030\022 \001("
    "\005\022\024\n\014followjetton\030\023 \001(\005\022\022\n\nactionuser\030\024 "
    "\001(\005\022\020\n\010lastuser\030\025 \001(\005\022\027\n\017commonpokerlist"
    "\030\026 \003(\005\022\020\n\010callflat\030\027 \001(\005\022(\n\010pourlist\030\030 \003"
    "(\0132\026.progame.texasuserpour\022\025\n\rbankerChai"
    "rid\030\031 \001(\005\022.\n\013allpourlist\030\032 \003(\0132\031.progame"
    ".texasalluserpour", 1217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_texas.proto", &protobuf_RegisterTypes);
  texascardlist::default_instance_ = new texascardlist();
  texasstanuser::default_instance_ = new texasstanuser();
  texasuserpour::default_instance_ = new texasuserpour();
  texasalluserpour::default_instance_ = new texasalluserpour();
  texasuser::default_instance_ = new texasuser();
  texasinfo::default_instance_ = new texasinfo();
  texascardlist::default_instance_->InitAsDefaultInstance();
  texasstanuser::default_instance_->InitAsDefaultInstance();
  texasuserpour::default_instance_->InitAsDefaultInstance();
  texasalluserpour::default_instance_->InitAsDefaultInstance();
  texasuser::default_instance_->InitAsDefaultInstance();
  texasinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5ftexas_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5ftexas_2eproto {
  StaticDescriptorInitializer_st_5ftexas_2eproto() {
    protobuf_AddDesc_st_5ftexas_2eproto();
  }
} static_descriptor_initializer_st_5ftexas_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int texascardlist::kCardFieldNumber;
#endif  // !_MSC_VER

texascardlist::texascardlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texascardlist::InitAsDefaultInstance() {
}

texascardlist::texascardlist(const texascardlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texascardlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texascardlist::~texascardlist() {
  SharedDtor();
}

void texascardlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void texascardlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texascardlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texascardlist_descriptor_;
}

const texascardlist& texascardlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftexas_2eproto();
  return *default_instance_;
}

texascardlist* texascardlist::default_instance_ = NULL;

texascardlist* texascardlist::New() const {
  return new texascardlist;
}

void texascardlist::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texascardlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texascardlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texascardlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texascardlist::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texascardlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texascardlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texascardlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texascardlist::MergeFrom(const texascardlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texascardlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texascardlist::CopyFrom(const texascardlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texascardlist::IsInitialized() const {

  return true;
}

void texascardlist::Swap(texascardlist* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texascardlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texascardlist_descriptor_;
  metadata.reflection = texascardlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int texasstanuser::kUseridFieldNumber;
const int texasstanuser::kWatchnumFieldNumber;
#endif  // !_MSC_VER

texasstanuser::texasstanuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texasstanuser::InitAsDefaultInstance() {
}

texasstanuser::texasstanuser(const texasstanuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texasstanuser::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texasstanuser::~texasstanuser() {
  SharedDtor();
}

void texasstanuser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void texasstanuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texasstanuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texasstanuser_descriptor_;
}

const texasstanuser& texasstanuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftexas_2eproto();
  return *default_instance_;
}

texasstanuser* texasstanuser::default_instance_ = NULL;

texasstanuser* texasstanuser::New() const {
  return new texasstanuser;
}

void texasstanuser::Clear() {
  userid_.Clear();
  watchnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texasstanuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_userid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_userid;
        if (input->ExpectTag(16)) goto parse_watchnum;
        break;
      }

      // repeated int32 watchnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watchnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_watchnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_watchnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_watchnum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texasstanuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->userid(i), output);
  }

  // repeated int32 watchnum = 2;
  for (int i = 0; i < this->watchnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->watchnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texasstanuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 userid = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->userid(i), target);
  }

  // repeated int32 watchnum = 2;
  for (int i = 0; i < this->watchnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->watchnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texasstanuser::ByteSize() const {
  int total_size = 0;

  // repeated int32 userid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->userid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userid(i));
    }
    total_size += 1 * this->userid_size() + data_size;
  }

  // repeated int32 watchnum = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->watchnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->watchnum(i));
    }
    total_size += 1 * this->watchnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texasstanuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texasstanuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texasstanuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texasstanuser::MergeFrom(const texasstanuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_.MergeFrom(from.userid_);
  watchnum_.MergeFrom(from.watchnum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texasstanuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texasstanuser::CopyFrom(const texasstanuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texasstanuser::IsInitialized() const {

  return true;
}

void texasstanuser::Swap(texasstanuser* other) {
  if (other != this) {
    userid_.Swap(&other->userid_);
    watchnum_.Swap(&other->watchnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texasstanuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texasstanuser_descriptor_;
  metadata.reflection = texasstanuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int texasuserpour::kUseridFieldNumber;
const int texasuserpour::kPourjettonFieldNumber;
const int texasuserpour::kIsallonFieldNumber;
#endif  // !_MSC_VER

texasuserpour::texasuserpour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texasuserpour::InitAsDefaultInstance() {
}

texasuserpour::texasuserpour(const texasuserpour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texasuserpour::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourjetton_ = 0;
  isallon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texasuserpour::~texasuserpour() {
  SharedDtor();
}

void texasuserpour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void texasuserpour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texasuserpour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texasuserpour_descriptor_;
}

const texasuserpour& texasuserpour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftexas_2eproto();
  return *default_instance_;
}

texasuserpour* texasuserpour::default_instance_ = NULL;

texasuserpour* texasuserpour::New() const {
  return new texasuserpour;
}

void texasuserpour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourjetton_ = 0;
    isallon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texasuserpour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourjetton;
        break;
      }

      // optional int32 pourjetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourjetton_)));
          set_has_pourjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isallon;
        break;
      }

      // optional int32 isallon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isallon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isallon_)));
          set_has_isallon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texasuserpour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourjetton = 2;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourjetton(), output);
  }

  // optional int32 isallon = 3;
  if (has_isallon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isallon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texasuserpour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourjetton = 2;
  if (has_pourjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourjetton(), target);
  }

  // optional int32 isallon = 3;
  if (has_isallon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isallon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texasuserpour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourjetton = 2;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourjetton());
    }

    // optional int32 isallon = 3;
    if (has_isallon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isallon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texasuserpour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texasuserpour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texasuserpour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texasuserpour::MergeFrom(const texasuserpour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
    if (from.has_isallon()) {
      set_isallon(from.isallon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texasuserpour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texasuserpour::CopyFrom(const texasuserpour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texasuserpour::IsInitialized() const {

  return true;
}

void texasuserpour::Swap(texasuserpour* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourjetton_, other->pourjetton_);
    std::swap(isallon_, other->isallon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texasuserpour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texasuserpour_descriptor_;
  metadata.reflection = texasuserpour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int texasalluserpour::kUseridFieldNumber;
const int texasalluserpour::kPourjettonFieldNumber;
const int texasalluserpour::kCardsFieldNumber;
#endif  // !_MSC_VER

texasalluserpour::texasalluserpour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texasalluserpour::InitAsDefaultInstance() {
}

texasalluserpour::texasalluserpour(const texasalluserpour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texasalluserpour::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourjetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texasalluserpour::~texasalluserpour() {
  SharedDtor();
}

void texasalluserpour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void texasalluserpour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texasalluserpour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texasalluserpour_descriptor_;
}

const texasalluserpour& texasalluserpour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftexas_2eproto();
  return *default_instance_;
}

texasalluserpour* texasalluserpour::default_instance_ = NULL;

texasalluserpour* texasalluserpour::New() const {
  return new texasalluserpour;
}

void texasalluserpour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourjetton_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texasalluserpour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourjetton;
        break;
      }

      // optional int32 pourjetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourjetton_)));
          set_has_pourjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texasalluserpour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourjetton = 2;
  if (has_pourjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourjetton(), output);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texasalluserpour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourjetton = 2;
  if (has_pourjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourjetton(), target);
  }

  // repeated int32 cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texasalluserpour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourjetton = 2;
    if (has_pourjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourjetton());
    }

  }
  // repeated int32 cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texasalluserpour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texasalluserpour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texasalluserpour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texasalluserpour::MergeFrom(const texasalluserpour& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourjetton()) {
      set_pourjetton(from.pourjetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texasalluserpour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texasalluserpour::CopyFrom(const texasalluserpour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texasalluserpour::IsInitialized() const {

  return true;
}

void texasalluserpour::Swap(texasalluserpour* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourjetton_, other->pourjetton_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texasalluserpour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texasalluserpour_descriptor_;
  metadata.reflection = texasalluserpour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int texasuser::kUseridFieldNumber;
const int texasuser::kHandpokerFieldNumber;
const int texasuser::kTexastypeFieldNumber;
const int texasuser::kChairidFieldNumber;
const int texasuser::kJifenFieldNumber;
const int texasuser::kJettoncountFieldNumber;
const int texasuser::kStateFieldNumber;
const int texasuser::kPokerstateDiscardFieldNumber;
const int texasuser::kCallNumFieldNumber;
const int texasuser::kAddjettonminFieldNumber;
const int texasuser::kAddjettonmaxFieldNumber;
const int texasuser::kTimeoutSumFieldNumber;
const int texasuser::kNicknameFieldNumber;
const int texasuser::kSexFieldNumber;
const int texasuser::kFace1FieldNumber;
const int texasuser::kFenchinumFieldNumber;
const int texasuser::kSelfcarryFieldNumber;
const int texasuser::kIsmaxcardtypeFieldNumber;
#endif  // !_MSC_VER

texasuser::texasuser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texasuser::InitAsDefaultInstance() {
}

texasuser::texasuser(const texasuser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texasuser::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  texastype_ = 0;
  chairid_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jettoncount_ = 0;
  state_ = 0;
  pokerstate_discard_ = 0;
  callnum_ = 0;
  addjettonmin_ = 0;
  addjettonmax_ = 0;
  timeoutsum_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fenchinum_ = 0;
  selfcarry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ismaxcardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texasuser::~texasuser() {
  SharedDtor();
}

void texasuser::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (selfcarry_ != &::google::protobuf::internal::kEmptyString) {
    delete selfcarry_;
  }
  if (this != default_instance_) {
  }
}

void texasuser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texasuser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texasuser_descriptor_;
}

const texasuser& texasuser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftexas_2eproto();
  return *default_instance_;
}

texasuser* texasuser::default_instance_ = NULL;

texasuser* texasuser::New() const {
  return new texasuser;
}

void texasuser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    texastype_ = 0;
    chairid_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    jettoncount_ = 0;
    state_ = 0;
    pokerstate_discard_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    callnum_ = 0;
    addjettonmin_ = 0;
    addjettonmax_ = 0;
    timeoutsum_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    sex_ = 0;
    if (has_face_1()) {
      if (face_1_ != &::google::protobuf::internal::kEmptyString) {
        face_1_->clear();
      }
    }
    fenchinum_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_selfcarry()) {
      if (selfcarry_ != &::google::protobuf::internal::kEmptyString) {
        selfcarry_->clear();
      }
    }
    ismaxcardtype_ = 0;
  }
  handpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texasuser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        break;
      }

      // repeated int32 handpoker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handpoker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handpoker())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handpoker())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handpoker;
        if (input->ExpectTag(24)) goto parse_texastype;
        break;
      }

      // optional int32 texastype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_texastype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texastype_)));
          set_has_texastype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_jifen;
        break;
      }

      // optional string jifen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jettoncount;
        break;
      }

      // optional int32 jettoncount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jettoncount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jettoncount_)));
          set_has_jettoncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional int32 state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pokerstate_discard;
        break;
      }

      // optional int32 pokerstate_discard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pokerstate_discard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokerstate_discard_)));
          set_has_pokerstate_discard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_callNum;
        break;
      }

      // optional int32 callNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callnum_)));
          set_has_callnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_addjettonmin;
        break;
      }

      // optional int32 addjettonmin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addjettonmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addjettonmin_)));
          set_has_addjettonmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_addjettonmax;
        break;
      }

      // optional int32 addjettonmax = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addjettonmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addjettonmax_)));
          set_has_addjettonmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_timeoutSum;
        break;
      }

      // optional int32 timeoutSum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeoutSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeoutsum_)));
          set_has_timeoutsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_nickname;
        break;
      }

      // optional string nickname = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_sex;
        break;
      }

      // optional int32 sex = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_face_1;
        break;
      }

      // optional string face_1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_1().data(), this->face_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fenchinum;
        break;
      }

      // optional int32 fenchinum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fenchinum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fenchinum_)));
          set_has_fenchinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_selfcarry;
        break;
      }

      // optional string selfcarry = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfcarry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfcarry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfcarry().data(), this->selfcarry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ismaxcardtype;
        break;
      }

      // optional int32 ismaxcardtype = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismaxcardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ismaxcardtype_)));
          set_has_ismaxcardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texasuser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handpoker(i), output);
  }

  // optional int32 texastype = 3;
  if (has_texastype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->texastype(), output);
  }

  // optional int32 chairid = 4;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chairid(), output);
  }

  // optional string jifen = 5;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->jifen(), output);
  }

  // optional int32 jettoncount = 6;
  if (has_jettoncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->jettoncount(), output);
  }

  // optional int32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // optional int32 pokerstate_discard = 8;
  if (has_pokerstate_discard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pokerstate_discard(), output);
  }

  // optional int32 callNum = 9;
  if (has_callnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->callnum(), output);
  }

  // optional int32 addjettonmin = 10;
  if (has_addjettonmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->addjettonmin(), output);
  }

  // optional int32 addjettonmax = 11;
  if (has_addjettonmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->addjettonmax(), output);
  }

  // optional int32 timeoutSum = 12;
  if (has_timeoutsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->timeoutsum(), output);
  }

  // optional string nickname = 13;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->nickname(), output);
  }

  // optional int32 sex = 14;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->sex(), output);
  }

  // optional string face_1 = 15;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->face_1(), output);
  }

  // optional int32 fenchinum = 16;
  if (has_fenchinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->fenchinum(), output);
  }

  // optional string selfcarry = 17;
  if (has_selfcarry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfcarry().data(), this->selfcarry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->selfcarry(), output);
  }

  // optional int32 ismaxcardtype = 18;
  if (has_ismaxcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ismaxcardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texasuser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // repeated int32 handpoker = 2;
  for (int i = 0; i < this->handpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handpoker(i), target);
  }

  // optional int32 texastype = 3;
  if (has_texastype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->texastype(), target);
  }

  // optional int32 chairid = 4;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chairid(), target);
  }

  // optional string jifen = 5;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->jifen(), target);
  }

  // optional int32 jettoncount = 6;
  if (has_jettoncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->jettoncount(), target);
  }

  // optional int32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // optional int32 pokerstate_discard = 8;
  if (has_pokerstate_discard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pokerstate_discard(), target);
  }

  // optional int32 callNum = 9;
  if (has_callnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->callnum(), target);
  }

  // optional int32 addjettonmin = 10;
  if (has_addjettonmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->addjettonmin(), target);
  }

  // optional int32 addjettonmax = 11;
  if (has_addjettonmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->addjettonmax(), target);
  }

  // optional int32 timeoutSum = 12;
  if (has_timeoutsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->timeoutsum(), target);
  }

  // optional string nickname = 13;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->nickname(), target);
  }

  // optional int32 sex = 14;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->sex(), target);
  }

  // optional string face_1 = 15;
  if (has_face_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_1().data(), this->face_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->face_1(), target);
  }

  // optional int32 fenchinum = 16;
  if (has_fenchinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->fenchinum(), target);
  }

  // optional string selfcarry = 17;
  if (has_selfcarry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfcarry().data(), this->selfcarry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->selfcarry(), target);
  }

  // optional int32 ismaxcardtype = 18;
  if (has_ismaxcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ismaxcardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texasuser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 texastype = 3;
    if (has_texastype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texastype());
    }

    // optional int32 chairid = 4;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional string jifen = 5;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional int32 jettoncount = 6;
    if (has_jettoncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jettoncount());
    }

    // optional int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 pokerstate_discard = 8;
    if (has_pokerstate_discard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokerstate_discard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 callNum = 9;
    if (has_callnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callnum());
    }

    // optional int32 addjettonmin = 10;
    if (has_addjettonmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addjettonmin());
    }

    // optional int32 addjettonmax = 11;
    if (has_addjettonmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addjettonmax());
    }

    // optional int32 timeoutSum = 12;
    if (has_timeoutsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeoutsum());
    }

    // optional string nickname = 13;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 sex = 14;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string face_1 = 15;
    if (has_face_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_1());
    }

    // optional int32 fenchinum = 16;
    if (has_fenchinum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fenchinum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string selfcarry = 17;
    if (has_selfcarry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfcarry());
    }

    // optional int32 ismaxcardtype = 18;
    if (has_ismaxcardtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ismaxcardtype());
    }

  }
  // repeated int32 handpoker = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handpoker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handpoker(i));
    }
    total_size += 1 * this->handpoker_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texasuser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texasuser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texasuser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texasuser::MergeFrom(const texasuser& from) {
  GOOGLE_CHECK_NE(&from, this);
  handpoker_.MergeFrom(from.handpoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_texastype()) {
      set_texastype(from.texastype());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_jettoncount()) {
      set_jettoncount(from.jettoncount());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_pokerstate_discard()) {
      set_pokerstate_discard(from.pokerstate_discard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_callnum()) {
      set_callnum(from.callnum());
    }
    if (from.has_addjettonmin()) {
      set_addjettonmin(from.addjettonmin());
    }
    if (from.has_addjettonmax()) {
      set_addjettonmax(from.addjettonmax());
    }
    if (from.has_timeoutsum()) {
      set_timeoutsum(from.timeoutsum());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_face_1()) {
      set_face_1(from.face_1());
    }
    if (from.has_fenchinum()) {
      set_fenchinum(from.fenchinum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_selfcarry()) {
      set_selfcarry(from.selfcarry());
    }
    if (from.has_ismaxcardtype()) {
      set_ismaxcardtype(from.ismaxcardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texasuser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texasuser::CopyFrom(const texasuser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texasuser::IsInitialized() const {

  return true;
}

void texasuser::Swap(texasuser* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    handpoker_.Swap(&other->handpoker_);
    std::swap(texastype_, other->texastype_);
    std::swap(chairid_, other->chairid_);
    std::swap(jifen_, other->jifen_);
    std::swap(jettoncount_, other->jettoncount_);
    std::swap(state_, other->state_);
    std::swap(pokerstate_discard_, other->pokerstate_discard_);
    std::swap(callnum_, other->callnum_);
    std::swap(addjettonmin_, other->addjettonmin_);
    std::swap(addjettonmax_, other->addjettonmax_);
    std::swap(timeoutsum_, other->timeoutsum_);
    std::swap(nickname_, other->nickname_);
    std::swap(sex_, other->sex_);
    std::swap(face_1_, other->face_1_);
    std::swap(fenchinum_, other->fenchinum_);
    std::swap(selfcarry_, other->selfcarry_);
    std::swap(ismaxcardtype_, other->ismaxcardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texasuser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texasuser_descriptor_;
  metadata.reflection = texasuser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int texasinfo::kTableidFieldNumber;
const int texasinfo::kTabletypeFieldNumber;
const int texasinfo::kPlaytypeFieldNumber;
const int texasinfo::kLittleblindFieldNumber;
const int texasinfo::kBigblindFieldNumber;
const int texasinfo::kAnteFieldNumber;
const int texasinfo::kMaxrefuelFieldNumber;
const int texasinfo::kBoutcappFieldNumber;
const int texasinfo::kMaxuserFieldNumber;
const int texasinfo::kStateFieldNumber;
const int texasinfo::kTimemarkFieldNumber;
const int texasinfo::kBankerIDFieldNumber;
const int texasinfo::kSituserFieldNumber;
const int texasinfo::kStanduserFieldNumber;
const int texasinfo::kDicicountFieldNumber;
const int texasinfo::kDicilistFieldNumber;
const int texasinfo::kPresentboutFieldNumber;
const int texasinfo::kCradcircleFieldNumber;
const int texasinfo::kFollowjettonFieldNumber;
const int texasinfo::kActionuserFieldNumber;
const int texasinfo::kLastuserFieldNumber;
const int texasinfo::kCommonpokerlistFieldNumber;
const int texasinfo::kCallflatFieldNumber;
const int texasinfo::kPourlistFieldNumber;
const int texasinfo::kBankerChairidFieldNumber;
const int texasinfo::kAllpourlistFieldNumber;
#endif  // !_MSC_VER

texasinfo::texasinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void texasinfo::InitAsDefaultInstance() {
}

texasinfo::texasinfo(const texasinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void texasinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  playtype_ = 0;
  littleblind_ = 0;
  bigblind_ = 0;
  ante_ = 0;
  maxrefuel_ = 0;
  boutcapp_ = 0;
  maxuser_ = 0;
  state_ = 0;
  timemark_ = 0;
  bankerid_ = 0;
  dicicount_ = 0;
  presentbout_ = 0;
  cradcircle_ = 0;
  followjetton_ = 0;
  actionuser_ = 0;
  lastuser_ = 0;
  callflat_ = 0;
  bankerchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

texasinfo::~texasinfo() {
  SharedDtor();
}

void texasinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void texasinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* texasinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return texasinfo_descriptor_;
}

const texasinfo& texasinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftexas_2eproto();
  return *default_instance_;
}

texasinfo* texasinfo::default_instance_ = NULL;

texasinfo* texasinfo::New() const {
  return new texasinfo;
}

void texasinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    playtype_ = 0;
    littleblind_ = 0;
    bigblind_ = 0;
    ante_ = 0;
    maxrefuel_ = 0;
    boutcapp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxuser_ = 0;
    state_ = 0;
    timemark_ = 0;
    bankerid_ = 0;
    dicicount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    presentbout_ = 0;
    cradcircle_ = 0;
    followjetton_ = 0;
    actionuser_ = 0;
    lastuser_ = 0;
    callflat_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    bankerchairid_ = 0;
  }
  situser_.Clear();
  standuser_.Clear();
  dicilist_.Clear();
  commonpokerlist_.Clear();
  pourlist_.Clear();
  allpourlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool texasinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playtype;
        break;
      }

      // optional int32 playtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtype_)));
          set_has_playtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_littleblind;
        break;
      }

      // optional int32 littleblind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_littleblind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &littleblind_)));
          set_has_littleblind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bigblind;
        break;
      }

      // optional int32 bigblind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigblind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigblind_)));
          set_has_bigblind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ante;
        break;
      }

      // optional int32 ante = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ante:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ante_)));
          set_has_ante();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxrefuel;
        break;
      }

      // optional int32 maxrefuel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrefuel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrefuel_)));
          set_has_maxrefuel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boutcapp;
        break;
      }

      // optional int32 boutcapp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boutcapp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boutcapp_)));
          set_has_boutcapp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_state;
        break;
      }

      // optional int32 state = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bankerID;
        break;
      }

      // optional int32 bankerID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_situser;
        break;
      }

      // repeated .progame.texasuser situser = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_situser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_situser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_situser;
        if (input->ExpectTag(114)) goto parse_standuser;
        break;
      }

      // repeated .progame.texasstanuser standuser = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_standuser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_standuser;
        if (input->ExpectTag(120)) goto parse_dicicount;
        break;
      }

      // optional int32 dicicount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicicount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicicount_)));
          set_has_dicicount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dicilist;
        break;
      }

      // repeated int32 dicilist = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicilist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_dicilist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dicilist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dicilist;
        if (input->ExpectTag(136)) goto parse_presentbout;
        break;
      }

      // optional int32 presentbout = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presentbout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presentbout_)));
          set_has_presentbout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cradcircle;
        break;
      }

      // optional int32 cradcircle = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cradcircle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cradcircle_)));
          set_has_cradcircle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_followjetton;
        break;
      }

      // optional int32 followjetton = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &followjetton_)));
          set_has_followjetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_actionuser;
        break;
      }

      // optional int32 actionuser = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionuser_)));
          set_has_actionuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lastuser;
        break;
      }

      // optional int32 lastuser = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastuser_)));
          set_has_lastuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_commonpokerlist;
        break;
      }

      // repeated int32 commonpokerlist = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonpokerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_commonpokerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_commonpokerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_commonpokerlist;
        if (input->ExpectTag(184)) goto parse_callflat;
        break;
      }

      // optional int32 callflat = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_callflat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callflat_)));
          set_has_callflat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pourlist;
        break;
      }

      // repeated .progame.texasuserpour pourlist = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pourlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pourlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pourlist;
        if (input->ExpectTag(200)) goto parse_bankerChairid;
        break;
      }

      // optional int32 bankerChairid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerChairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerchairid_)));
          set_has_bankerchairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_allpourlist;
        break;
      }

      // repeated .progame.texasalluserpour allpourlist = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allpourlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allpourlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_allpourlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void texasinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 playtype = 3;
  if (has_playtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playtype(), output);
  }

  // optional int32 littleblind = 4;
  if (has_littleblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->littleblind(), output);
  }

  // optional int32 bigblind = 5;
  if (has_bigblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bigblind(), output);
  }

  // optional int32 ante = 6;
  if (has_ante()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ante(), output);
  }

  // optional int32 maxrefuel = 7;
  if (has_maxrefuel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxrefuel(), output);
  }

  // optional int32 boutcapp = 8;
  if (has_boutcapp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->boutcapp(), output);
  }

  // optional int32 maxuser = 9;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxuser(), output);
  }

  // optional int32 state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->state(), output);
  }

  // optional int32 timemark = 11;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->timemark(), output);
  }

  // optional int32 bankerID = 12;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bankerid(), output);
  }

  // repeated .progame.texasuser situser = 13;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->situser(i), output);
  }

  // repeated .progame.texasstanuser standuser = 14;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->standuser(i), output);
  }

  // optional int32 dicicount = 15;
  if (has_dicicount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dicicount(), output);
  }

  // repeated int32 dicilist = 16;
  for (int i = 0; i < this->dicilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->dicilist(i), output);
  }

  // optional int32 presentbout = 17;
  if (has_presentbout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->presentbout(), output);
  }

  // optional int32 cradcircle = 18;
  if (has_cradcircle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->cradcircle(), output);
  }

  // optional int32 followjetton = 19;
  if (has_followjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->followjetton(), output);
  }

  // optional int32 actionuser = 20;
  if (has_actionuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->actionuser(), output);
  }

  // optional int32 lastuser = 21;
  if (has_lastuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lastuser(), output);
  }

  // repeated int32 commonpokerlist = 22;
  for (int i = 0; i < this->commonpokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->commonpokerlist(i), output);
  }

  // optional int32 callflat = 23;
  if (has_callflat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->callflat(), output);
  }

  // repeated .progame.texasuserpour pourlist = 24;
  for (int i = 0; i < this->pourlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->pourlist(i), output);
  }

  // optional int32 bankerChairid = 25;
  if (has_bankerchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->bankerchairid(), output);
  }

  // repeated .progame.texasalluserpour allpourlist = 26;
  for (int i = 0; i < this->allpourlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->allpourlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* texasinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 playtype = 3;
  if (has_playtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playtype(), target);
  }

  // optional int32 littleblind = 4;
  if (has_littleblind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->littleblind(), target);
  }

  // optional int32 bigblind = 5;
  if (has_bigblind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bigblind(), target);
  }

  // optional int32 ante = 6;
  if (has_ante()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ante(), target);
  }

  // optional int32 maxrefuel = 7;
  if (has_maxrefuel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxrefuel(), target);
  }

  // optional int32 boutcapp = 8;
  if (has_boutcapp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->boutcapp(), target);
  }

  // optional int32 maxuser = 9;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxuser(), target);
  }

  // optional int32 state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->state(), target);
  }

  // optional int32 timemark = 11;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->timemark(), target);
  }

  // optional int32 bankerID = 12;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bankerid(), target);
  }

  // repeated .progame.texasuser situser = 13;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->situser(i), target);
  }

  // repeated .progame.texasstanuser standuser = 14;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->standuser(i), target);
  }

  // optional int32 dicicount = 15;
  if (has_dicicount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dicicount(), target);
  }

  // repeated int32 dicilist = 16;
  for (int i = 0; i < this->dicilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->dicilist(i), target);
  }

  // optional int32 presentbout = 17;
  if (has_presentbout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->presentbout(), target);
  }

  // optional int32 cradcircle = 18;
  if (has_cradcircle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->cradcircle(), target);
  }

  // optional int32 followjetton = 19;
  if (has_followjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->followjetton(), target);
  }

  // optional int32 actionuser = 20;
  if (has_actionuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->actionuser(), target);
  }

  // optional int32 lastuser = 21;
  if (has_lastuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lastuser(), target);
  }

  // repeated int32 commonpokerlist = 22;
  for (int i = 0; i < this->commonpokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->commonpokerlist(i), target);
  }

  // optional int32 callflat = 23;
  if (has_callflat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->callflat(), target);
  }

  // repeated .progame.texasuserpour pourlist = 24;
  for (int i = 0; i < this->pourlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->pourlist(i), target);
  }

  // optional int32 bankerChairid = 25;
  if (has_bankerchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->bankerchairid(), target);
  }

  // repeated .progame.texasalluserpour allpourlist = 26;
  for (int i = 0; i < this->allpourlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->allpourlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int texasinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 playtype = 3;
    if (has_playtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtype());
    }

    // optional int32 littleblind = 4;
    if (has_littleblind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->littleblind());
    }

    // optional int32 bigblind = 5;
    if (has_bigblind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigblind());
    }

    // optional int32 ante = 6;
    if (has_ante()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ante());
    }

    // optional int32 maxrefuel = 7;
    if (has_maxrefuel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrefuel());
    }

    // optional int32 boutcapp = 8;
    if (has_boutcapp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boutcapp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 maxuser = 9;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional int32 state = 10;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 11;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 bankerID = 12;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional int32 dicicount = 15;
    if (has_dicicount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicicount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 presentbout = 17;
    if (has_presentbout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presentbout());
    }

    // optional int32 cradcircle = 18;
    if (has_cradcircle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cradcircle());
    }

    // optional int32 followjetton = 19;
    if (has_followjetton()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->followjetton());
    }

    // optional int32 actionuser = 20;
    if (has_actionuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionuser());
    }

    // optional int32 lastuser = 21;
    if (has_lastuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastuser());
    }

    // optional int32 callflat = 23;
    if (has_callflat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callflat());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 bankerChairid = 25;
    if (has_bankerchairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerchairid());
    }

  }
  // repeated .progame.texasuser situser = 13;
  total_size += 1 * this->situser_size();
  for (int i = 0; i < this->situser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->situser(i));
  }

  // repeated .progame.texasstanuser standuser = 14;
  total_size += 1 * this->standuser_size();
  for (int i = 0; i < this->standuser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->standuser(i));
  }

  // repeated int32 dicilist = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->dicilist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dicilist(i));
    }
    total_size += 2 * this->dicilist_size() + data_size;
  }

  // repeated int32 commonpokerlist = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->commonpokerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->commonpokerlist(i));
    }
    total_size += 2 * this->commonpokerlist_size() + data_size;
  }

  // repeated .progame.texasuserpour pourlist = 24;
  total_size += 2 * this->pourlist_size();
  for (int i = 0; i < this->pourlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pourlist(i));
  }

  // repeated .progame.texasalluserpour allpourlist = 26;
  total_size += 2 * this->allpourlist_size();
  for (int i = 0; i < this->allpourlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allpourlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void texasinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const texasinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const texasinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void texasinfo::MergeFrom(const texasinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  standuser_.MergeFrom(from.standuser_);
  dicilist_.MergeFrom(from.dicilist_);
  commonpokerlist_.MergeFrom(from.commonpokerlist_);
  pourlist_.MergeFrom(from.pourlist_);
  allpourlist_.MergeFrom(from.allpourlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_playtype()) {
      set_playtype(from.playtype());
    }
    if (from.has_littleblind()) {
      set_littleblind(from.littleblind());
    }
    if (from.has_bigblind()) {
      set_bigblind(from.bigblind());
    }
    if (from.has_ante()) {
      set_ante(from.ante());
    }
    if (from.has_maxrefuel()) {
      set_maxrefuel(from.maxrefuel());
    }
    if (from.has_boutcapp()) {
      set_boutcapp(from.boutcapp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_dicicount()) {
      set_dicicount(from.dicicount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_presentbout()) {
      set_presentbout(from.presentbout());
    }
    if (from.has_cradcircle()) {
      set_cradcircle(from.cradcircle());
    }
    if (from.has_followjetton()) {
      set_followjetton(from.followjetton());
    }
    if (from.has_actionuser()) {
      set_actionuser(from.actionuser());
    }
    if (from.has_lastuser()) {
      set_lastuser(from.lastuser());
    }
    if (from.has_callflat()) {
      set_callflat(from.callflat());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bankerchairid()) {
      set_bankerchairid(from.bankerchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void texasinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void texasinfo::CopyFrom(const texasinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool texasinfo::IsInitialized() const {

  return true;
}

void texasinfo::Swap(texasinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(playtype_, other->playtype_);
    std::swap(littleblind_, other->littleblind_);
    std::swap(bigblind_, other->bigblind_);
    std::swap(ante_, other->ante_);
    std::swap(maxrefuel_, other->maxrefuel_);
    std::swap(boutcapp_, other->boutcapp_);
    std::swap(maxuser_, other->maxuser_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    std::swap(bankerid_, other->bankerid_);
    situser_.Swap(&other->situser_);
    standuser_.Swap(&other->standuser_);
    std::swap(dicicount_, other->dicicount_);
    dicilist_.Swap(&other->dicilist_);
    std::swap(presentbout_, other->presentbout_);
    std::swap(cradcircle_, other->cradcircle_);
    std::swap(followjetton_, other->followjetton_);
    std::swap(actionuser_, other->actionuser_);
    std::swap(lastuser_, other->lastuser_);
    commonpokerlist_.Swap(&other->commonpokerlist_);
    std::swap(callflat_, other->callflat_);
    pourlist_.Swap(&other->pourlist_);
    std::swap(bankerchairid_, other->bankerchairid_);
    allpourlist_.Swap(&other->allpourlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata texasinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = texasinfo_descriptor_;
  metadata.reflection = texasinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
