// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_fenfencai.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_fenfencai.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* fenfencaijetton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenfencaijetton_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenfencaihangupinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenfencaihangupinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenfencaiplayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenfencaiplayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenfencaihistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenfencaihistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenfencaiinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenfencaiinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenfencaijettonrecorinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenfencaijettonrecorinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* fenfencaiuseridhistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fenfencaiuseridhistory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5ffenfencai_2eproto() {
  protobuf_AddDesc_st_5ffenfencai_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_fenfencai.proto");
  GOOGLE_CHECK(file != NULL);
  fenfencaijetton_descriptor_ = file->message_type(0);
  static const int fenfencaijetton_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijetton, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijetton, pourtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijetton, jetton_),
  };
  fenfencaijetton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenfencaijetton_descriptor_,
      fenfencaijetton::default_instance_,
      fenfencaijetton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijetton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijetton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenfencaijetton));
  fenfencaihangupinfo_descriptor_ = file->message_type(1);
  static const int fenfencaihangupinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, losenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, playnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, playtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, moduletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, msginfo_),
  };
  fenfencaihangupinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenfencaihangupinfo_descriptor_,
      fenfencaihangupinfo::default_instance_,
      fenfencaihangupinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihangupinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenfencaihangupinfo));
  fenfencaiplayer_descriptor_ = file->message_type(2);
  static const int fenfencaiplayer_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, choice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, nopournum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, pour_20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, win_20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, hangupstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, gj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, currentwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, currentplaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, currentinumber_),
  };
  fenfencaiplayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenfencaiplayer_descriptor_,
      fenfencaiplayer::default_instance_,
      fenfencaiplayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiplayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenfencaiplayer));
  fenfencaihistory_descriptor_ = file->message_type(3);
  static const int fenfencaihistory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihistory, issuenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihistory, awardnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihistory, awardresult_),
  };
  fenfencaihistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenfencaihistory_descriptor_,
      fenfencaihistory::default_instance_,
      fenfencaihistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaihistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenfencaihistory));
  fenfencaiinfo_descriptor_ = file->message_type(4);
  static const int fenfencaiinfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, situser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, bankerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, standuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, bankerjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, maxuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, applydrop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, bankerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, maxrobotnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, bankercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, robotbanuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, issuenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, latelynumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, bankercountlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, thistory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, suspend_),
  };
  fenfencaiinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenfencaiinfo_descriptor_,
      fenfencaiinfo::default_instance_,
      fenfencaiinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenfencaiinfo));
  fenfencaijettonrecorinfo_descriptor_ = file->message_type(5);
  static const int fenfencaijettonrecorinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, jifen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, facename_),
  };
  fenfencaijettonrecorinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenfencaijettonrecorinfo_descriptor_,
      fenfencaijettonrecorinfo::default_instance_,
      fenfencaijettonrecorinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaijettonrecorinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenfencaijettonrecorinfo));
  fenfencaiuseridhistory_descriptor_ = file->message_type(6);
  static const int fenfencaiuseridhistory_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, issuenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, pour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, awardnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, awardresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, winnum_),
  };
  fenfencaiuseridhistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fenfencaiuseridhistory_descriptor_,
      fenfencaiuseridhistory::default_instance_,
      fenfencaiuseridhistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fenfencaiuseridhistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fenfencaiuseridhistory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5ffenfencai_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenfencaijetton_descriptor_, &fenfencaijetton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenfencaihangupinfo_descriptor_, &fenfencaihangupinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenfencaiplayer_descriptor_, &fenfencaiplayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenfencaihistory_descriptor_, &fenfencaihistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenfencaiinfo_descriptor_, &fenfencaiinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenfencaijettonrecorinfo_descriptor_, &fenfencaijettonrecorinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fenfencaiuseridhistory_descriptor_, &fenfencaiuseridhistory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5ffenfencai_2eproto() {
  delete fenfencaijetton::default_instance_;
  delete fenfencaijetton_reflection_;
  delete fenfencaihangupinfo::default_instance_;
  delete fenfencaihangupinfo_reflection_;
  delete fenfencaiplayer::default_instance_;
  delete fenfencaiplayer_reflection_;
  delete fenfencaihistory::default_instance_;
  delete fenfencaihistory_reflection_;
  delete fenfencaiinfo::default_instance_;
  delete fenfencaiinfo_reflection_;
  delete fenfencaijettonrecorinfo::default_instance_;
  delete fenfencaijettonrecorinfo_reflection_;
  delete fenfencaiuseridhistory::default_instance_;
  delete fenfencaiuseridhistory_reflection_;
}

void protobuf_AddDesc_st_5ffenfencai_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022st_fenfencai.proto\022\007progame\032\016st_human."
    "proto\"C\n\017fenfencaijetton\022\016\n\006userid\030\001 \001(\005"
    "\022\020\n\010pourtype\030\002 \001(\005\022\016\n\006jetton\030\003 \001(\005\"~\n\023fe"
    "nfencaihangupinfo\022\017\n\007losenum\030\001 \001(\005\022\016\n\006wi"
    "nnum\030\002 \001(\005\022\017\n\007playNum\030\003 \001(\005\022\020\n\010playtype\030"
    "\004 \001(\005\022\022\n\nmoduletype\030\005 \001(\005\022\017\n\007msgInfo\030\006 \003"
    "(\t\"\350\001\n\017fenfencaiplayer\022\016\n\006userid\030\001 \001(\005\022\016"
    "\n\006Choice\030\002 \001(\005\022\021\n\tnopournum\030\003 \001(\005\022\017\n\007pou"
    "r_20\030\004 \003(\005\022\016\n\006win_20\030\005 \003(\005\022\023\n\013hangupstat"
    "e\030\006 \001(\005\022(\n\002gj\030\007 \001(\0132\034.progame.fenfencaih"
    "angupinfo\022\022\n\ncurrentWin\030\010 \001(\005\022\026\n\016current"
    "playnum\030\t \001(\005\022\026\n\016currentinumber\030\n \001(\005\"Q\n"
    "\020fenfencaihistory\022\023\n\013issuenumber\030\003 \001(\t\022\023"
    "\n\013awardnumber\030\004 \001(\t\022\023\n\013awardresult\030\005 \001(\t"
    "\"\223\004\n\rfenfencaiinfo\022\017\n\007tableid\030\001 \001(\005\022\r\n\005s"
    "tate\030\002 \001(\005\022\020\n\010timemark\030\003 \001(\005\022\017\n\007situser\030"
    "\004 \003(\005\022\022\n\nbankerlist\030\005 \003(\005\022+\n\tstanduser\030\006"
    " \003(\0132\030.progame.fenfencaiplayer\022\020\n\010banker"
    "id\030\007 \001(\005\022\024\n\014bankerjetton\030\010 \001(\t\022\022\n\nbanker"
    "name\030\t \001(\t\022\017\n\007maxuser\030\n \001(\005\022\021\n\tapplydrop"
    "\030\013 \001(\005\022\021\n\ttabletype\030\r \001(\005\022\023\n\013bankerlimit"
    "\030\016 \001(\t\022\023\n\013maxrobotnum\030\017 \001(\005\022\023\n\013bankercou"
    "nt\030\020 \001(\005\022\026\n\016robotbanuserid\030\021 \001(\005\022\023\n\013issu"
    "enumber\030\022 \001(\t\022\024\n\014latelynumber\030\023 \001(\t\022\021\n\ts"
    "tarttime\030\024 \001(\005\022\017\n\007endtime\030\025 \001(\005\022\016\n\006facei"
    "d\030\026 \001(\t\022\027\n\017bankercountlist\030\027 \003(\t\022+\n\010this"
    "tory\030\030 \003(\0132\031.progame.fenfencaihistory\022\017\n"
    "\007suspend\030\031 \001(\005\"}\n\030fenfencaijettonrecorin"
    "fo\022\016\n\006userid\030\001 \001(\005\022\016\n\006jetton\030\002 \001(\005\022\016\n\006wi"
    "nnum\030\003 \001(\005\022\r\n\005jifen\030\004 \001(\t\022\020\n\010nickname\030\005 "
    "\001(\t\022\020\n\010facename\030\006 \001(\t\"\205\001\n\026fenfencaiuseri"
    "dhistory\022\023\n\013issuenumber\030\003 \001(\t\022\014\n\004pour\030\004 "
    "\001(\t\022\016\n\006jetton\030\005 \001(\005\022\023\n\013awardnumber\030\006 \001(\t"
    "\022\023\n\013awardresult\030\007 \001(\t\022\016\n\006winnum\030\010 \001(\005", 1357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_fenfencai.proto", &protobuf_RegisterTypes);
  fenfencaijetton::default_instance_ = new fenfencaijetton();
  fenfencaihangupinfo::default_instance_ = new fenfencaihangupinfo();
  fenfencaiplayer::default_instance_ = new fenfencaiplayer();
  fenfencaihistory::default_instance_ = new fenfencaihistory();
  fenfencaiinfo::default_instance_ = new fenfencaiinfo();
  fenfencaijettonrecorinfo::default_instance_ = new fenfencaijettonrecorinfo();
  fenfencaiuseridhistory::default_instance_ = new fenfencaiuseridhistory();
  fenfencaijetton::default_instance_->InitAsDefaultInstance();
  fenfencaihangupinfo::default_instance_->InitAsDefaultInstance();
  fenfencaiplayer::default_instance_->InitAsDefaultInstance();
  fenfencaihistory::default_instance_->InitAsDefaultInstance();
  fenfencaiinfo::default_instance_->InitAsDefaultInstance();
  fenfencaijettonrecorinfo::default_instance_->InitAsDefaultInstance();
  fenfencaiuseridhistory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5ffenfencai_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5ffenfencai_2eproto {
  StaticDescriptorInitializer_st_5ffenfencai_2eproto() {
    protobuf_AddDesc_st_5ffenfencai_2eproto();
  }
} static_descriptor_initializer_st_5ffenfencai_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int fenfencaijetton::kUseridFieldNumber;
const int fenfencaijetton::kPourtypeFieldNumber;
const int fenfencaijetton::kJettonFieldNumber;
#endif  // !_MSC_VER

fenfencaijetton::fenfencaijetton()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenfencaijetton::InitAsDefaultInstance() {
}

fenfencaijetton::fenfencaijetton(const fenfencaijetton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenfencaijetton::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  pourtype_ = 0;
  jetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenfencaijetton::~fenfencaijetton() {
  SharedDtor();
}

void fenfencaijetton::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fenfencaijetton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenfencaijetton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenfencaijetton_descriptor_;
}

const fenfencaijetton& fenfencaijetton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffenfencai_2eproto();
  return *default_instance_;
}

fenfencaijetton* fenfencaijetton::default_instance_ = NULL;

fenfencaijetton* fenfencaijetton::New() const {
  return new fenfencaijetton;
}

void fenfencaijetton::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    pourtype_ = 0;
    jetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenfencaijetton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pourtype;
        break;
      }

      // optional int32 pourtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourtype_)));
          set_has_pourtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenfencaijetton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pourtype(), output);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenfencaijetton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 pourtype = 2;
  if (has_pourtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pourtype(), target);
  }

  // optional int32 jetton = 3;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenfencaijetton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 pourtype = 2;
    if (has_pourtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourtype());
    }

    // optional int32 jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenfencaijetton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenfencaijetton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenfencaijetton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenfencaijetton::MergeFrom(const fenfencaijetton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_pourtype()) {
      set_pourtype(from.pourtype());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenfencaijetton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenfencaijetton::CopyFrom(const fenfencaijetton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenfencaijetton::IsInitialized() const {

  return true;
}

void fenfencaijetton::Swap(fenfencaijetton* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(pourtype_, other->pourtype_);
    std::swap(jetton_, other->jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenfencaijetton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenfencaijetton_descriptor_;
  metadata.reflection = fenfencaijetton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenfencaihangupinfo::kLosenumFieldNumber;
const int fenfencaihangupinfo::kWinnumFieldNumber;
const int fenfencaihangupinfo::kPlayNumFieldNumber;
const int fenfencaihangupinfo::kPlaytypeFieldNumber;
const int fenfencaihangupinfo::kModuletypeFieldNumber;
const int fenfencaihangupinfo::kMsgInfoFieldNumber;
#endif  // !_MSC_VER

fenfencaihangupinfo::fenfencaihangupinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenfencaihangupinfo::InitAsDefaultInstance() {
}

fenfencaihangupinfo::fenfencaihangupinfo(const fenfencaihangupinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenfencaihangupinfo::SharedCtor() {
  _cached_size_ = 0;
  losenum_ = 0;
  winnum_ = 0;
  playnum_ = 0;
  playtype_ = 0;
  moduletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenfencaihangupinfo::~fenfencaihangupinfo() {
  SharedDtor();
}

void fenfencaihangupinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fenfencaihangupinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenfencaihangupinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenfencaihangupinfo_descriptor_;
}

const fenfencaihangupinfo& fenfencaihangupinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffenfencai_2eproto();
  return *default_instance_;
}

fenfencaihangupinfo* fenfencaihangupinfo::default_instance_ = NULL;

fenfencaihangupinfo* fenfencaihangupinfo::New() const {
  return new fenfencaihangupinfo;
}

void fenfencaihangupinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    losenum_ = 0;
    winnum_ = 0;
    playnum_ = 0;
    playtype_ = 0;
    moduletype_ = 0;
  }
  msginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenfencaihangupinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 losenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playNum;
        break;
      }

      // optional int32 playNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnum_)));
          set_has_playnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playtype;
        break;
      }

      // optional int32 playtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtype_)));
          set_has_playtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_moduletype;
        break;
      }

      // optional int32 moduletype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moduletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moduletype_)));
          set_has_moduletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msgInfo;
        break;
      }

      // repeated string msgInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msginfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msginfo(this->msginfo_size() - 1).data(),
            this->msginfo(this->msginfo_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msgInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenfencaihangupinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 losenum = 1;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->losenum(), output);
  }

  // optional int32 winnum = 2;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winnum(), output);
  }

  // optional int32 playNum = 3;
  if (has_playnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playnum(), output);
  }

  // optional int32 playtype = 4;
  if (has_playtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playtype(), output);
  }

  // optional int32 moduletype = 5;
  if (has_moduletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moduletype(), output);
  }

  // repeated string msgInfo = 6;
  for (int i = 0; i < this->msginfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->msginfo(i).data(), this->msginfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msginfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenfencaihangupinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 losenum = 1;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->losenum(), target);
  }

  // optional int32 winnum = 2;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winnum(), target);
  }

  // optional int32 playNum = 3;
  if (has_playnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playnum(), target);
  }

  // optional int32 playtype = 4;
  if (has_playtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playtype(), target);
  }

  // optional int32 moduletype = 5;
  if (has_moduletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moduletype(), target);
  }

  // repeated string msgInfo = 6;
  for (int i = 0; i < this->msginfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msginfo(i).data(), this->msginfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->msginfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenfencaihangupinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 losenum = 1;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losenum());
    }

    // optional int32 winnum = 2;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional int32 playNum = 3;
    if (has_playnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnum());
    }

    // optional int32 playtype = 4;
    if (has_playtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtype());
    }

    // optional int32 moduletype = 5;
    if (has_moduletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moduletype());
    }

  }
  // repeated string msgInfo = 6;
  total_size += 1 * this->msginfo_size();
  for (int i = 0; i < this->msginfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenfencaihangupinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenfencaihangupinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenfencaihangupinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenfencaihangupinfo::MergeFrom(const fenfencaihangupinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  msginfo_.MergeFrom(from.msginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_playnum()) {
      set_playnum(from.playnum());
    }
    if (from.has_playtype()) {
      set_playtype(from.playtype());
    }
    if (from.has_moduletype()) {
      set_moduletype(from.moduletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenfencaihangupinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenfencaihangupinfo::CopyFrom(const fenfencaihangupinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenfencaihangupinfo::IsInitialized() const {

  return true;
}

void fenfencaihangupinfo::Swap(fenfencaihangupinfo* other) {
  if (other != this) {
    std::swap(losenum_, other->losenum_);
    std::swap(winnum_, other->winnum_);
    std::swap(playnum_, other->playnum_);
    std::swap(playtype_, other->playtype_);
    std::swap(moduletype_, other->moduletype_);
    msginfo_.Swap(&other->msginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenfencaihangupinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenfencaihangupinfo_descriptor_;
  metadata.reflection = fenfencaihangupinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenfencaiplayer::kUseridFieldNumber;
const int fenfencaiplayer::kChoiceFieldNumber;
const int fenfencaiplayer::kNopournumFieldNumber;
const int fenfencaiplayer::kPour20FieldNumber;
const int fenfencaiplayer::kWin20FieldNumber;
const int fenfencaiplayer::kHangupstateFieldNumber;
const int fenfencaiplayer::kGjFieldNumber;
const int fenfencaiplayer::kCurrentWinFieldNumber;
const int fenfencaiplayer::kCurrentplaynumFieldNumber;
const int fenfencaiplayer::kCurrentinumberFieldNumber;
#endif  // !_MSC_VER

fenfencaiplayer::fenfencaiplayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenfencaiplayer::InitAsDefaultInstance() {
  gj_ = const_cast< ::progame::fenfencaihangupinfo*>(&::progame::fenfencaihangupinfo::default_instance());
}

fenfencaiplayer::fenfencaiplayer(const fenfencaiplayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenfencaiplayer::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  choice_ = 0;
  nopournum_ = 0;
  hangupstate_ = 0;
  gj_ = NULL;
  currentwin_ = 0;
  currentplaynum_ = 0;
  currentinumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenfencaiplayer::~fenfencaiplayer() {
  SharedDtor();
}

void fenfencaiplayer::SharedDtor() {
  if (this != default_instance_) {
    delete gj_;
  }
}

void fenfencaiplayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenfencaiplayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenfencaiplayer_descriptor_;
}

const fenfencaiplayer& fenfencaiplayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffenfencai_2eproto();
  return *default_instance_;
}

fenfencaiplayer* fenfencaiplayer::default_instance_ = NULL;

fenfencaiplayer* fenfencaiplayer::New() const {
  return new fenfencaiplayer;
}

void fenfencaiplayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    choice_ = 0;
    nopournum_ = 0;
    hangupstate_ = 0;
    if (has_gj()) {
      if (gj_ != NULL) gj_->::progame::fenfencaihangupinfo::Clear();
    }
    currentwin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    currentplaynum_ = 0;
    currentinumber_ = 0;
  }
  pour_20_.Clear();
  win_20_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenfencaiplayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Choice;
        break;
      }

      // optional int32 Choice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Choice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_)));
          set_has_choice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nopournum;
        break;
      }

      // optional int32 nopournum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nopournum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nopournum_)));
          set_has_nopournum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pour_20;
        break;
      }

      // repeated int32 pour_20 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pour_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pour_20())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pour_20())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pour_20;
        if (input->ExpectTag(40)) goto parse_win_20;
        break;
      }

      // repeated int32 win_20 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_20:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_win_20())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_20())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_20;
        if (input->ExpectTag(48)) goto parse_hangupstate;
        break;
      }

      // optional int32 hangupstate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hangupstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hangupstate_)));
          set_has_hangupstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gj;
        break;
      }

      // optional .progame.fenfencaihangupinfo gj = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gj()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_currentWin;
        break;
      }

      // optional int32 currentWin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentwin_)));
          set_has_currentwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_currentplaynum;
        break;
      }

      // optional int32 currentplaynum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentplaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentplaynum_)));
          set_has_currentplaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_currentinumber;
        break;
      }

      // optional int32 currentinumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentinumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentinumber_)));
          set_has_currentinumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenfencaiplayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 Choice = 2;
  if (has_choice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->choice(), output);
  }

  // optional int32 nopournum = 3;
  if (has_nopournum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nopournum(), output);
  }

  // repeated int32 pour_20 = 4;
  for (int i = 0; i < this->pour_20_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pour_20(i), output);
  }

  // repeated int32 win_20 = 5;
  for (int i = 0; i < this->win_20_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->win_20(i), output);
  }

  // optional int32 hangupstate = 6;
  if (has_hangupstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hangupstate(), output);
  }

  // optional .progame.fenfencaihangupinfo gj = 7;
  if (has_gj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gj(), output);
  }

  // optional int32 currentWin = 8;
  if (has_currentwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currentwin(), output);
  }

  // optional int32 currentplaynum = 9;
  if (has_currentplaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->currentplaynum(), output);
  }

  // optional int32 currentinumber = 10;
  if (has_currentinumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->currentinumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenfencaiplayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 Choice = 2;
  if (has_choice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->choice(), target);
  }

  // optional int32 nopournum = 3;
  if (has_nopournum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nopournum(), target);
  }

  // repeated int32 pour_20 = 4;
  for (int i = 0; i < this->pour_20_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pour_20(i), target);
  }

  // repeated int32 win_20 = 5;
  for (int i = 0; i < this->win_20_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->win_20(i), target);
  }

  // optional int32 hangupstate = 6;
  if (has_hangupstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hangupstate(), target);
  }

  // optional .progame.fenfencaihangupinfo gj = 7;
  if (has_gj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gj(), target);
  }

  // optional int32 currentWin = 8;
  if (has_currentwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currentwin(), target);
  }

  // optional int32 currentplaynum = 9;
  if (has_currentplaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->currentplaynum(), target);
  }

  // optional int32 currentinumber = 10;
  if (has_currentinumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->currentinumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenfencaiplayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 Choice = 2;
    if (has_choice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choice());
    }

    // optional int32 nopournum = 3;
    if (has_nopournum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nopournum());
    }

    // optional int32 hangupstate = 6;
    if (has_hangupstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hangupstate());
    }

    // optional .progame.fenfencaihangupinfo gj = 7;
    if (has_gj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gj());
    }

    // optional int32 currentWin = 8;
    if (has_currentwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentwin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 currentplaynum = 9;
    if (has_currentplaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentplaynum());
    }

    // optional int32 currentinumber = 10;
    if (has_currentinumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentinumber());
    }

  }
  // repeated int32 pour_20 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pour_20_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pour_20(i));
    }
    total_size += 1 * this->pour_20_size() + data_size;
  }

  // repeated int32 win_20 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_20_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_20(i));
    }
    total_size += 1 * this->win_20_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenfencaiplayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenfencaiplayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenfencaiplayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenfencaiplayer::MergeFrom(const fenfencaiplayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  pour_20_.MergeFrom(from.pour_20_);
  win_20_.MergeFrom(from.win_20_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_choice()) {
      set_choice(from.choice());
    }
    if (from.has_nopournum()) {
      set_nopournum(from.nopournum());
    }
    if (from.has_hangupstate()) {
      set_hangupstate(from.hangupstate());
    }
    if (from.has_gj()) {
      mutable_gj()->::progame::fenfencaihangupinfo::MergeFrom(from.gj());
    }
    if (from.has_currentwin()) {
      set_currentwin(from.currentwin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currentplaynum()) {
      set_currentplaynum(from.currentplaynum());
    }
    if (from.has_currentinumber()) {
      set_currentinumber(from.currentinumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenfencaiplayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenfencaiplayer::CopyFrom(const fenfencaiplayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenfencaiplayer::IsInitialized() const {

  return true;
}

void fenfencaiplayer::Swap(fenfencaiplayer* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(choice_, other->choice_);
    std::swap(nopournum_, other->nopournum_);
    pour_20_.Swap(&other->pour_20_);
    win_20_.Swap(&other->win_20_);
    std::swap(hangupstate_, other->hangupstate_);
    std::swap(gj_, other->gj_);
    std::swap(currentwin_, other->currentwin_);
    std::swap(currentplaynum_, other->currentplaynum_);
    std::swap(currentinumber_, other->currentinumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenfencaiplayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenfencaiplayer_descriptor_;
  metadata.reflection = fenfencaiplayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenfencaihistory::kIssuenumberFieldNumber;
const int fenfencaihistory::kAwardnumberFieldNumber;
const int fenfencaihistory::kAwardresultFieldNumber;
#endif  // !_MSC_VER

fenfencaihistory::fenfencaihistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenfencaihistory::InitAsDefaultInstance() {
}

fenfencaihistory::fenfencaihistory(const fenfencaihistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenfencaihistory::SharedCtor() {
  _cached_size_ = 0;
  issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenfencaihistory::~fenfencaihistory() {
  SharedDtor();
}

void fenfencaihistory::SharedDtor() {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete issuenumber_;
  }
  if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete awardnumber_;
  }
  if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
    delete awardresult_;
  }
  if (this != default_instance_) {
  }
}

void fenfencaihistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenfencaihistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenfencaihistory_descriptor_;
}

const fenfencaihistory& fenfencaihistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffenfencai_2eproto();
  return *default_instance_;
}

fenfencaihistory* fenfencaihistory::default_instance_ = NULL;

fenfencaihistory* fenfencaihistory::New() const {
  return new fenfencaihistory;
}

void fenfencaihistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_issuenumber()) {
      if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
        issuenumber_->clear();
      }
    }
    if (has_awardnumber()) {
      if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
        awardnumber_->clear();
      }
    }
    if (has_awardresult()) {
      if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
        awardresult_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenfencaihistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string issuenumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->issuenumber().data(), this->issuenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_awardnumber;
        break;
      }

      // optional string awardnumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardnumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardnumber().data(), this->awardnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_awardresult;
        break;
      }

      // optional string awardresult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardresult().data(), this->awardresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenfencaihistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string issuenumber = 3;
  if (has_issuenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuenumber().data(), this->issuenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->issuenumber(), output);
  }

  // optional string awardnumber = 4;
  if (has_awardnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardnumber().data(), this->awardnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->awardnumber(), output);
  }

  // optional string awardresult = 5;
  if (has_awardresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardresult().data(), this->awardresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->awardresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenfencaihistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string issuenumber = 3;
  if (has_issuenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuenumber().data(), this->issuenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->issuenumber(), target);
  }

  // optional string awardnumber = 4;
  if (has_awardnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardnumber().data(), this->awardnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->awardnumber(), target);
  }

  // optional string awardresult = 5;
  if (has_awardresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardresult().data(), this->awardresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->awardresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenfencaihistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string issuenumber = 3;
    if (has_issuenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuenumber());
    }

    // optional string awardnumber = 4;
    if (has_awardnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardnumber());
    }

    // optional string awardresult = 5;
    if (has_awardresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenfencaihistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenfencaihistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenfencaihistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenfencaihistory::MergeFrom(const fenfencaihistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuenumber()) {
      set_issuenumber(from.issuenumber());
    }
    if (from.has_awardnumber()) {
      set_awardnumber(from.awardnumber());
    }
    if (from.has_awardresult()) {
      set_awardresult(from.awardresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenfencaihistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenfencaihistory::CopyFrom(const fenfencaihistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenfencaihistory::IsInitialized() const {

  return true;
}

void fenfencaihistory::Swap(fenfencaihistory* other) {
  if (other != this) {
    std::swap(issuenumber_, other->issuenumber_);
    std::swap(awardnumber_, other->awardnumber_);
    std::swap(awardresult_, other->awardresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenfencaihistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenfencaihistory_descriptor_;
  metadata.reflection = fenfencaihistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenfencaiinfo::kTableidFieldNumber;
const int fenfencaiinfo::kStateFieldNumber;
const int fenfencaiinfo::kTimemarkFieldNumber;
const int fenfencaiinfo::kSituserFieldNumber;
const int fenfencaiinfo::kBankerlistFieldNumber;
const int fenfencaiinfo::kStanduserFieldNumber;
const int fenfencaiinfo::kBankeridFieldNumber;
const int fenfencaiinfo::kBankerjettonFieldNumber;
const int fenfencaiinfo::kBankernameFieldNumber;
const int fenfencaiinfo::kMaxuserFieldNumber;
const int fenfencaiinfo::kApplydropFieldNumber;
const int fenfencaiinfo::kTabletypeFieldNumber;
const int fenfencaiinfo::kBankerlimitFieldNumber;
const int fenfencaiinfo::kMaxrobotnumFieldNumber;
const int fenfencaiinfo::kBankercountFieldNumber;
const int fenfencaiinfo::kRobotbanuseridFieldNumber;
const int fenfencaiinfo::kIssuenumberFieldNumber;
const int fenfencaiinfo::kLatelynumberFieldNumber;
const int fenfencaiinfo::kStarttimeFieldNumber;
const int fenfencaiinfo::kEndtimeFieldNumber;
const int fenfencaiinfo::kFaceidFieldNumber;
const int fenfencaiinfo::kBankercountlistFieldNumber;
const int fenfencaiinfo::kThistoryFieldNumber;
const int fenfencaiinfo::kSuspendFieldNumber;
#endif  // !_MSC_VER

fenfencaiinfo::fenfencaiinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenfencaiinfo::InitAsDefaultInstance() {
}

fenfencaiinfo::fenfencaiinfo(const fenfencaiinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenfencaiinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  state_ = 0;
  timemark_ = 0;
  bankerid_ = 0;
  bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxuser_ = 0;
  applydrop_ = 0;
  tabletype_ = 0;
  bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxrobotnum_ = 0;
  bankercount_ = 0;
  robotbanuserid_ = 0;
  issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latelynumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = 0;
  endtime_ = 0;
  faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suspend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenfencaiinfo::~fenfencaiinfo() {
  SharedDtor();
}

void fenfencaiinfo::SharedDtor() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete issuenumber_;
  }
  if (latelynumber_ != &::google::protobuf::internal::kEmptyString) {
    delete latelynumber_;
  }
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (this != default_instance_) {
  }
}

void fenfencaiinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenfencaiinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenfencaiinfo_descriptor_;
}

const fenfencaiinfo& fenfencaiinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffenfencai_2eproto();
  return *default_instance_;
}

fenfencaiinfo* fenfencaiinfo::default_instance_ = NULL;

fenfencaiinfo* fenfencaiinfo::New() const {
  return new fenfencaiinfo;
}

void fenfencaiinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    state_ = 0;
    timemark_ = 0;
    bankerid_ = 0;
    if (has_bankerjetton()) {
      if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankerjetton_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    maxuser_ = 0;
    applydrop_ = 0;
    tabletype_ = 0;
    if (has_bankerlimit()) {
      if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
        bankerlimit_->clear();
      }
    }
    maxrobotnum_ = 0;
    bankercount_ = 0;
    robotbanuserid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_issuenumber()) {
      if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
        issuenumber_->clear();
      }
    }
    if (has_latelynumber()) {
      if (latelynumber_ != &::google::protobuf::internal::kEmptyString) {
        latelynumber_->clear();
      }
    }
    starttime_ = 0;
    endtime_ = 0;
    if (has_faceid()) {
      if (faceid_ != &::google::protobuf::internal::kEmptyString) {
        faceid_->clear();
      }
    }
    suspend_ = 0;
  }
  situser_.Clear();
  bankerlist_.Clear();
  standuser_.Clear();
  bankercountlist_.Clear();
  thistory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenfencaiinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_situser;
        break;
      }

      // repeated int32 situser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_situser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_situser())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_situser())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_situser;
        if (input->ExpectTag(40)) goto parse_bankerlist;
        break;
      }

      // repeated int32 bankerlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_bankerlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bankerlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bankerlist;
        if (input->ExpectTag(50)) goto parse_standuser;
        break;
      }

      // repeated .progame.fenfencaiplayer standuser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_standuser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_standuser;
        if (input->ExpectTag(56)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bankerjetton;
        break;
      }

      // optional string bankerjetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerjetton().data(), this->bankerjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bankername;
        break;
      }

      // optional string bankername = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxuser;
        break;
      }

      // optional int32 maxuser = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxuser_)));
          set_has_maxuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_applydrop;
        break;
      }

      // optional int32 applydrop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applydrop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applydrop_)));
          set_has_applydrop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_bankerlimit;
        break;
      }

      // optional string bankerlimit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerlimit().data(), this->bankerlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_maxrobotnum;
        break;
      }

      // optional int32 maxrobotnum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrobotnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrobotnum_)));
          set_has_maxrobotnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bankercount;
        break;
      }

      // optional int32 bankercount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankercount_)));
          set_has_bankercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_robotbanuserid;
        break;
      }

      // optional int32 robotbanuserid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotbanuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotbanuserid_)));
          set_has_robotbanuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_issuenumber;
        break;
      }

      // optional string issuenumber = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_issuenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->issuenumber().data(), this->issuenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_latelynumber;
        break;
      }

      // optional string latelynumber = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latelynumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latelynumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latelynumber().data(), this->latelynumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_starttime;
        break;
      }

      // optional int32 starttime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_faceid;
        break;
      }

      // optional string faceid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faceid().data(), this->faceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_bankercountlist;
        break;
      }

      // repeated string bankercountlist = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankercountlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bankercountlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankercountlist(this->bankercountlist_size() - 1).data(),
            this->bankercountlist(this->bankercountlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_bankercountlist;
        if (input->ExpectTag(194)) goto parse_thistory;
        break;
      }

      // repeated .progame.fenfencaihistory thistory = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thistory()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_thistory;
        if (input->ExpectTag(200)) goto parse_suspend;
        break;
      }

      // optional int32 suspend = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suspend_)));
          set_has_suspend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenfencaiinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 timemark = 3;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timemark(), output);
  }

  // repeated int32 situser = 4;
  for (int i = 0; i < this->situser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->situser(i), output);
  }

  // repeated int32 bankerlist = 5;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->bankerlist(i), output);
  }

  // repeated .progame.fenfencaiplayer standuser = 6;
  for (int i = 0; i < this->standuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->standuser(i), output);
  }

  // optional int32 bankerid = 7;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bankerid(), output);
  }

  // optional string bankerjetton = 8;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->bankerjetton(), output);
  }

  // optional string bankername = 9;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bankername(), output);
  }

  // optional int32 maxuser = 10;
  if (has_maxuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->maxuser(), output);
  }

  // optional int32 applydrop = 11;
  if (has_applydrop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->applydrop(), output);
  }

  // optional int32 tabletype = 13;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tabletype(), output);
  }

  // optional string bankerlimit = 14;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->bankerlimit(), output);
  }

  // optional int32 maxrobotnum = 15;
  if (has_maxrobotnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->maxrobotnum(), output);
  }

  // optional int32 bankercount = 16;
  if (has_bankercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bankercount(), output);
  }

  // optional int32 robotbanuserid = 17;
  if (has_robotbanuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->robotbanuserid(), output);
  }

  // optional string issuenumber = 18;
  if (has_issuenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuenumber().data(), this->issuenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->issuenumber(), output);
  }

  // optional string latelynumber = 19;
  if (has_latelynumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latelynumber().data(), this->latelynumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->latelynumber(), output);
  }

  // optional int32 starttime = 20;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->starttime(), output);
  }

  // optional int32 endtime = 21;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->endtime(), output);
  }

  // optional string faceid = 22;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->faceid(), output);
  }

  // repeated string bankercountlist = 23;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bankercountlist(i).data(), this->bankercountlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->bankercountlist(i), output);
  }

  // repeated .progame.fenfencaihistory thistory = 24;
  for (int i = 0; i < this->thistory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->thistory(i), output);
  }

  // optional int32 suspend = 25;
  if (has_suspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->suspend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenfencaiinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 timemark = 3;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timemark(), target);
  }

  // repeated int32 situser = 4;
  for (int i = 0; i < this->situser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->situser(i), target);
  }

  // repeated int32 bankerlist = 5;
  for (int i = 0; i < this->bankerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->bankerlist(i), target);
  }

  // repeated .progame.fenfencaiplayer standuser = 6;
  for (int i = 0; i < this->standuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->standuser(i), target);
  }

  // optional int32 bankerid = 7;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bankerid(), target);
  }

  // optional string bankerjetton = 8;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bankerjetton(), target);
  }

  // optional string bankername = 9;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bankername(), target);
  }

  // optional int32 maxuser = 10;
  if (has_maxuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->maxuser(), target);
  }

  // optional int32 applydrop = 11;
  if (has_applydrop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->applydrop(), target);
  }

  // optional int32 tabletype = 13;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tabletype(), target);
  }

  // optional string bankerlimit = 14;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bankerlimit(), target);
  }

  // optional int32 maxrobotnum = 15;
  if (has_maxrobotnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->maxrobotnum(), target);
  }

  // optional int32 bankercount = 16;
  if (has_bankercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->bankercount(), target);
  }

  // optional int32 robotbanuserid = 17;
  if (has_robotbanuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->robotbanuserid(), target);
  }

  // optional string issuenumber = 18;
  if (has_issuenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuenumber().data(), this->issuenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->issuenumber(), target);
  }

  // optional string latelynumber = 19;
  if (has_latelynumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latelynumber().data(), this->latelynumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->latelynumber(), target);
  }

  // optional int32 starttime = 20;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->starttime(), target);
  }

  // optional int32 endtime = 21;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->endtime(), target);
  }

  // optional string faceid = 22;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faceid().data(), this->faceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->faceid(), target);
  }

  // repeated string bankercountlist = 23;
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankercountlist(i).data(), this->bankercountlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(23, this->bankercountlist(i), target);
  }

  // repeated .progame.fenfencaihistory thistory = 24;
  for (int i = 0; i < this->thistory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->thistory(i), target);
  }

  // optional int32 suspend = 25;
  if (has_suspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->suspend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenfencaiinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 3;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional int32 bankerid = 7;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional string bankerjetton = 8;
    if (has_bankerjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerjetton());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bankername = 9;
    if (has_bankername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional int32 maxuser = 10;
    if (has_maxuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxuser());
    }

    // optional int32 applydrop = 11;
    if (has_applydrop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applydrop());
    }

    // optional int32 tabletype = 13;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional string bankerlimit = 14;
    if (has_bankerlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerlimit());
    }

    // optional int32 maxrobotnum = 15;
    if (has_maxrobotnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrobotnum());
    }

    // optional int32 bankercount = 16;
    if (has_bankercount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankercount());
    }

    // optional int32 robotbanuserid = 17;
    if (has_robotbanuserid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotbanuserid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string issuenumber = 18;
    if (has_issuenumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuenumber());
    }

    // optional string latelynumber = 19;
    if (has_latelynumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latelynumber());
    }

    // optional int32 starttime = 20;
    if (has_starttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 endtime = 21;
    if (has_endtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // optional string faceid = 22;
    if (has_faceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faceid());
    }

    // optional int32 suspend = 25;
    if (has_suspend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suspend());
    }

  }
  // repeated int32 situser = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->situser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->situser(i));
    }
    total_size += 1 * this->situser_size() + data_size;
  }

  // repeated int32 bankerlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->bankerlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bankerlist(i));
    }
    total_size += 1 * this->bankerlist_size() + data_size;
  }

  // repeated .progame.fenfencaiplayer standuser = 6;
  total_size += 1 * this->standuser_size();
  for (int i = 0; i < this->standuser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->standuser(i));
  }

  // repeated string bankercountlist = 23;
  total_size += 2 * this->bankercountlist_size();
  for (int i = 0; i < this->bankercountlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bankercountlist(i));
  }

  // repeated .progame.fenfencaihistory thistory = 24;
  total_size += 2 * this->thistory_size();
  for (int i = 0; i < this->thistory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thistory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenfencaiinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenfencaiinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenfencaiinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenfencaiinfo::MergeFrom(const fenfencaiinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  situser_.MergeFrom(from.situser_);
  bankerlist_.MergeFrom(from.bankerlist_);
  standuser_.MergeFrom(from.standuser_);
  bankercountlist_.MergeFrom(from.bankercountlist_);
  thistory_.MergeFrom(from.thistory_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_bankerjetton()) {
      set_bankerjetton(from.bankerjetton());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_maxuser()) {
      set_maxuser(from.maxuser());
    }
    if (from.has_applydrop()) {
      set_applydrop(from.applydrop());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_bankerlimit()) {
      set_bankerlimit(from.bankerlimit());
    }
    if (from.has_maxrobotnum()) {
      set_maxrobotnum(from.maxrobotnum());
    }
    if (from.has_bankercount()) {
      set_bankercount(from.bankercount());
    }
    if (from.has_robotbanuserid()) {
      set_robotbanuserid(from.robotbanuserid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_issuenumber()) {
      set_issuenumber(from.issuenumber());
    }
    if (from.has_latelynumber()) {
      set_latelynumber(from.latelynumber());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_suspend()) {
      set_suspend(from.suspend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenfencaiinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenfencaiinfo::CopyFrom(const fenfencaiinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenfencaiinfo::IsInitialized() const {

  return true;
}

void fenfencaiinfo::Swap(fenfencaiinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    situser_.Swap(&other->situser_);
    bankerlist_.Swap(&other->bankerlist_);
    standuser_.Swap(&other->standuser_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankerjetton_, other->bankerjetton_);
    std::swap(bankername_, other->bankername_);
    std::swap(maxuser_, other->maxuser_);
    std::swap(applydrop_, other->applydrop_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(bankerlimit_, other->bankerlimit_);
    std::swap(maxrobotnum_, other->maxrobotnum_);
    std::swap(bankercount_, other->bankercount_);
    std::swap(robotbanuserid_, other->robotbanuserid_);
    std::swap(issuenumber_, other->issuenumber_);
    std::swap(latelynumber_, other->latelynumber_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(faceid_, other->faceid_);
    bankercountlist_.Swap(&other->bankercountlist_);
    thistory_.Swap(&other->thistory_);
    std::swap(suspend_, other->suspend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenfencaiinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenfencaiinfo_descriptor_;
  metadata.reflection = fenfencaiinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenfencaijettonrecorinfo::kUseridFieldNumber;
const int fenfencaijettonrecorinfo::kJettonFieldNumber;
const int fenfencaijettonrecorinfo::kWinnumFieldNumber;
const int fenfencaijettonrecorinfo::kJifenFieldNumber;
const int fenfencaijettonrecorinfo::kNicknameFieldNumber;
const int fenfencaijettonrecorinfo::kFacenameFieldNumber;
#endif  // !_MSC_VER

fenfencaijettonrecorinfo::fenfencaijettonrecorinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenfencaijettonrecorinfo::InitAsDefaultInstance() {
}

fenfencaijettonrecorinfo::fenfencaijettonrecorinfo(const fenfencaijettonrecorinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenfencaijettonrecorinfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  jetton_ = 0;
  winnum_ = 0;
  jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenfencaijettonrecorinfo::~fenfencaijettonrecorinfo() {
  SharedDtor();
}

void fenfencaijettonrecorinfo::SharedDtor() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (this != default_instance_) {
  }
}

void fenfencaijettonrecorinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenfencaijettonrecorinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenfencaijettonrecorinfo_descriptor_;
}

const fenfencaijettonrecorinfo& fenfencaijettonrecorinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffenfencai_2eproto();
  return *default_instance_;
}

fenfencaijettonrecorinfo* fenfencaijettonrecorinfo::default_instance_ = NULL;

fenfencaijettonrecorinfo* fenfencaijettonrecorinfo::New() const {
  return new fenfencaijettonrecorinfo;
}

void fenfencaijettonrecorinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    jetton_ = 0;
    winnum_ = 0;
    if (has_jifen()) {
      if (jifen_ != &::google::protobuf::internal::kEmptyString) {
        jifen_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_facename()) {
      if (facename_ != &::google::protobuf::internal::kEmptyString) {
        facename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenfencaijettonrecorinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jifen;
        break;
      }

      // optional string jifen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jifen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jifen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jifen().data(), this->jifen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facename;
        break;
      }

      // optional string facename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facename().data(), this->facename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenfencaijettonrecorinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jetton(), output);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winnum(), output);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->jifen(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->facename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenfencaijettonrecorinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // optional int32 jetton = 2;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jetton(), target);
  }

  // optional int32 winnum = 3;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winnum(), target);
  }

  // optional string jifen = 4;
  if (has_jifen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jifen().data(), this->jifen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jifen(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional string facename = 6;
  if (has_facename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facename().data(), this->facename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->facename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenfencaijettonrecorinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 jetton = 2;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional int32 winnum = 3;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional string jifen = 4;
    if (has_jifen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jifen());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string facename = 6;
    if (has_facename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenfencaijettonrecorinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenfencaijettonrecorinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenfencaijettonrecorinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenfencaijettonrecorinfo::MergeFrom(const fenfencaijettonrecorinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_jifen()) {
      set_jifen(from.jifen());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_facename()) {
      set_facename(from.facename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenfencaijettonrecorinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenfencaijettonrecorinfo::CopyFrom(const fenfencaijettonrecorinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenfencaijettonrecorinfo::IsInitialized() const {

  return true;
}

void fenfencaijettonrecorinfo::Swap(fenfencaijettonrecorinfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(jetton_, other->jetton_);
    std::swap(winnum_, other->winnum_);
    std::swap(jifen_, other->jifen_);
    std::swap(nickname_, other->nickname_);
    std::swap(facename_, other->facename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenfencaijettonrecorinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenfencaijettonrecorinfo_descriptor_;
  metadata.reflection = fenfencaijettonrecorinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fenfencaiuseridhistory::kIssuenumberFieldNumber;
const int fenfencaiuseridhistory::kPourFieldNumber;
const int fenfencaiuseridhistory::kJettonFieldNumber;
const int fenfencaiuseridhistory::kAwardnumberFieldNumber;
const int fenfencaiuseridhistory::kAwardresultFieldNumber;
const int fenfencaiuseridhistory::kWinnumFieldNumber;
#endif  // !_MSC_VER

fenfencaiuseridhistory::fenfencaiuseridhistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fenfencaiuseridhistory::InitAsDefaultInstance() {
}

fenfencaiuseridhistory::fenfencaiuseridhistory(const fenfencaiuseridhistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fenfencaiuseridhistory::SharedCtor() {
  _cached_size_ = 0;
  issuenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pour_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jetton_ = 0;
  awardnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fenfencaiuseridhistory::~fenfencaiuseridhistory() {
  SharedDtor();
}

void fenfencaiuseridhistory::SharedDtor() {
  if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete issuenumber_;
  }
  if (pour_ != &::google::protobuf::internal::kEmptyString) {
    delete pour_;
  }
  if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete awardnumber_;
  }
  if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
    delete awardresult_;
  }
  if (this != default_instance_) {
  }
}

void fenfencaiuseridhistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fenfencaiuseridhistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fenfencaiuseridhistory_descriptor_;
}

const fenfencaiuseridhistory& fenfencaiuseridhistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ffenfencai_2eproto();
  return *default_instance_;
}

fenfencaiuseridhistory* fenfencaiuseridhistory::default_instance_ = NULL;

fenfencaiuseridhistory* fenfencaiuseridhistory::New() const {
  return new fenfencaiuseridhistory;
}

void fenfencaiuseridhistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_issuenumber()) {
      if (issuenumber_ != &::google::protobuf::internal::kEmptyString) {
        issuenumber_->clear();
      }
    }
    if (has_pour()) {
      if (pour_ != &::google::protobuf::internal::kEmptyString) {
        pour_->clear();
      }
    }
    jetton_ = 0;
    if (has_awardnumber()) {
      if (awardnumber_ != &::google::protobuf::internal::kEmptyString) {
        awardnumber_->clear();
      }
    }
    if (has_awardresult()) {
      if (awardresult_ != &::google::protobuf::internal::kEmptyString) {
        awardresult_->clear();
      }
    }
    winnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fenfencaiuseridhistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string issuenumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->issuenumber().data(), this->issuenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pour;
        break;
      }

      // optional string pour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pour().data(), this->pour().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jetton;
        break;
      }

      // optional int32 jetton = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_awardnumber;
        break;
      }

      // optional string awardnumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardnumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardnumber().data(), this->awardnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_awardresult;
        break;
      }

      // optional string awardresult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardresult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awardresult().data(), this->awardresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_winnum;
        break;
      }

      // optional int32 winnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fenfencaiuseridhistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string issuenumber = 3;
  if (has_issuenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuenumber().data(), this->issuenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->issuenumber(), output);
  }

  // optional string pour = 4;
  if (has_pour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pour().data(), this->pour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pour(), output);
  }

  // optional int32 jetton = 5;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jetton(), output);
  }

  // optional string awardnumber = 6;
  if (has_awardnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardnumber().data(), this->awardnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->awardnumber(), output);
  }

  // optional string awardresult = 7;
  if (has_awardresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardresult().data(), this->awardresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->awardresult(), output);
  }

  // optional int32 winnum = 8;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->winnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fenfencaiuseridhistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string issuenumber = 3;
  if (has_issuenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuenumber().data(), this->issuenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->issuenumber(), target);
  }

  // optional string pour = 4;
  if (has_pour()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pour().data(), this->pour().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pour(), target);
  }

  // optional int32 jetton = 5;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jetton(), target);
  }

  // optional string awardnumber = 6;
  if (has_awardnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardnumber().data(), this->awardnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->awardnumber(), target);
  }

  // optional string awardresult = 7;
  if (has_awardresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awardresult().data(), this->awardresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->awardresult(), target);
  }

  // optional int32 winnum = 8;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->winnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fenfencaiuseridhistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string issuenumber = 3;
    if (has_issuenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuenumber());
    }

    // optional string pour = 4;
    if (has_pour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pour());
    }

    // optional int32 jetton = 5;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // optional string awardnumber = 6;
    if (has_awardnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardnumber());
    }

    // optional string awardresult = 7;
    if (has_awardresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardresult());
    }

    // optional int32 winnum = 8;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fenfencaiuseridhistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fenfencaiuseridhistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fenfencaiuseridhistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fenfencaiuseridhistory::MergeFrom(const fenfencaiuseridhistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuenumber()) {
      set_issuenumber(from.issuenumber());
    }
    if (from.has_pour()) {
      set_pour(from.pour());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_awardnumber()) {
      set_awardnumber(from.awardnumber());
    }
    if (from.has_awardresult()) {
      set_awardresult(from.awardresult());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fenfencaiuseridhistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fenfencaiuseridhistory::CopyFrom(const fenfencaiuseridhistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fenfencaiuseridhistory::IsInitialized() const {

  return true;
}

void fenfencaiuseridhistory::Swap(fenfencaiuseridhistory* other) {
  if (other != this) {
    std::swap(issuenumber_, other->issuenumber_);
    std::swap(pour_, other->pour_);
    std::swap(jetton_, other->jetton_);
    std::swap(awardnumber_, other->awardnumber_);
    std::swap(awardresult_, other->awardresult_);
    std::swap(winnum_, other->winnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fenfencaiuseridhistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fenfencaiuseridhistory_descriptor_;
  metadata.reflection = fenfencaiuseridhistory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
