// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_psz.proto

#ifndef PROTOBUF_st_5fpsz_2eproto__INCLUDED
#define PROTOBUF_st_5fpsz_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fpsz_2eproto();
void protobuf_AssignDesc_st_5fpsz_2eproto();
void protobuf_ShutdownFile_st_5fpsz_2eproto();

class pszuser;
class pszinfo;
class pszhandpoker;
class pszhistoryitem;
class pszhistory;
class pszcomparepoker;

// ===================================================================

class pszuser : public ::google::protobuf::Message {
 public:
  pszuser();
  virtual ~pszuser();

  pszuser(const pszuser& from);

  inline pszuser& operator=(const pszuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pszuser& default_instance();

  void Swap(pszuser* other);

  // implements Message ----------------------------------------------

  pszuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pszuser& from);
  void MergeFrom(const pszuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // repeated int32 handpoker = 2;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 2;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // optional int32 psztype = 3;
  inline bool has_psztype() const;
  inline void clear_psztype();
  static const int kPsztypeFieldNumber = 3;
  inline ::google::protobuf::int32 psztype() const;
  inline void set_psztype(::google::protobuf::int32 value);

  // optional int32 chairid = 4;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 4;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional string jifen = 5;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 5;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional int32 jetton = 6;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 6;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 state = 7;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 7;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 pokerstate = 8;
  inline bool has_pokerstate() const;
  inline void clear_pokerstate();
  static const int kPokerstateFieldNumber = 8;
  inline ::google::protobuf::int32 pokerstate() const;
  inline void set_pokerstate(::google::protobuf::int32 value);

  // optional int32 pokerstate_discard = 9;
  inline bool has_pokerstate_discard() const;
  inline void clear_pokerstate_discard();
  static const int kPokerstateDiscardFieldNumber = 9;
  inline ::google::protobuf::int32 pokerstate_discard() const;
  inline void set_pokerstate_discard(::google::protobuf::int32 value);

  // optional int32 compare = 10;
  inline bool has_compare() const;
  inline void clear_compare();
  static const int kCompareFieldNumber = 10;
  inline ::google::protobuf::int32 compare() const;
  inline void set_compare(::google::protobuf::int32 value);

  // optional int32 endshow = 11;
  inline bool has_endshow() const;
  inline void clear_endshow();
  static const int kEndshowFieldNumber = 11;
  inline ::google::protobuf::int32 endshow() const;
  inline void set_endshow(::google::protobuf::int32 value);

  // optional int32 winnum = 12;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 12;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional int32 maxdntype = 13;
  inline bool has_maxdntype() const;
  inline void clear_maxdntype();
  static const int kMaxdntypeFieldNumber = 13;
  inline ::google::protobuf::int32 maxdntype() const;
  inline void set_maxdntype(::google::protobuf::int32 value);

  // optional int32 maxscore = 14;
  inline bool has_maxscore() const;
  inline void clear_maxscore();
  static const int kMaxscoreFieldNumber = 14;
  inline ::google::protobuf::int32 maxscore() const;
  inline void set_maxscore(::google::protobuf::int32 value);

  // optional int32 audocingl = 15;
  inline bool has_audocingl() const;
  inline void clear_audocingl();
  static const int kAudocinglFieldNumber = 15;
  inline ::google::protobuf::int32 audocingl() const;
  inline void set_audocingl(::google::protobuf::int32 value);

  // repeated int32 jettonlist = 16;
  inline int jettonlist_size() const;
  inline void clear_jettonlist();
  static const int kJettonlistFieldNumber = 16;
  inline ::google::protobuf::int32 jettonlist(int index) const;
  inline void set_jettonlist(int index, ::google::protobuf::int32 value);
  inline void add_jettonlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jettonlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jettonlist();

  // optional int32 callNum = 17;
  inline bool has_callnum() const;
  inline void clear_callnum();
  static const int kCallNumFieldNumber = 17;
  inline ::google::protobuf::int32 callnum() const;
  inline void set_callnum(::google::protobuf::int32 value);

  // optional int32 thanNum = 18;
  inline bool has_thannum() const;
  inline void clear_thannum();
  static const int kThanNumFieldNumber = 18;
  inline ::google::protobuf::int32 thannum() const;
  inline void set_thannum(::google::protobuf::int32 value);

  // repeated int32 filList = 19;
  inline int fillist_size() const;
  inline void clear_fillist();
  static const int kFilListFieldNumber = 19;
  inline ::google::protobuf::int32 fillist(int index) const;
  inline void set_fillist(int index, ::google::protobuf::int32 value);
  inline void add_fillist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fillist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fillist();

  // repeated int32 thanuserid = 20;
  inline int thanuserid_size() const;
  inline void clear_thanuserid();
  static const int kThanuseridFieldNumber = 20;
  inline ::google::protobuf::int32 thanuserid(int index) const;
  inline void set_thanuserid(int index, ::google::protobuf::int32 value);
  inline void add_thanuserid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      thanuserid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_thanuserid();

  // optional int32 timeoutSum = 21;
  inline bool has_timeoutsum() const;
  inline void clear_timeoutsum();
  static const int kTimeoutSumFieldNumber = 21;
  inline ::google::protobuf::int32 timeoutsum() const;
  inline void set_timeoutsum(::google::protobuf::int32 value);

  // optional string nickname = 22;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 22;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 sex = 23;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 23;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string face_1 = 24;
  inline bool has_face_1() const;
  inline void clear_face_1();
  static const int kFace1FieldNumber = 24;
  inline const ::std::string& face_1() const;
  inline void set_face_1(const ::std::string& value);
  inline void set_face_1(const char* value);
  inline void set_face_1(const char* value, size_t size);
  inline ::std::string* mutable_face_1();
  inline ::std::string* release_face_1();
  inline void set_allocated_face_1(::std::string* face_1);

  // optional string location = 25;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 25;
  inline const ::std::string& location() const;
  inline void set_location(const ::std::string& value);
  inline void set_location(const char* value);
  inline void set_location(const char* value, size_t size);
  inline ::std::string* mutable_location();
  inline ::std::string* release_location();
  inline void set_allocated_location(::std::string* location);

  // @@protoc_insertion_point(class_scope:progame.pszuser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_psztype();
  inline void clear_has_psztype();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_pokerstate();
  inline void clear_has_pokerstate();
  inline void set_has_pokerstate_discard();
  inline void clear_has_pokerstate_discard();
  inline void set_has_compare();
  inline void clear_has_compare();
  inline void set_has_endshow();
  inline void clear_has_endshow();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_maxdntype();
  inline void clear_has_maxdntype();
  inline void set_has_maxscore();
  inline void clear_has_maxscore();
  inline void set_has_audocingl();
  inline void clear_has_audocingl();
  inline void set_has_callnum();
  inline void clear_has_callnum();
  inline void set_has_thannum();
  inline void clear_has_thannum();
  inline void set_has_timeoutsum();
  inline void clear_has_timeoutsum();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_face_1();
  inline void clear_has_face_1();
  inline void set_has_location();
  inline void clear_has_location();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 psztype_;
  ::std::string* jifen_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 jetton_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 pokerstate_;
  ::google::protobuf::int32 pokerstate_discard_;
  ::google::protobuf::int32 compare_;
  ::google::protobuf::int32 endshow_;
  ::google::protobuf::int32 winnum_;
  ::google::protobuf::int32 maxdntype_;
  ::google::protobuf::int32 maxscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jettonlist_;
  ::google::protobuf::int32 audocingl_;
  ::google::protobuf::int32 callnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fillist_;
  ::google::protobuf::int32 thannum_;
  ::google::protobuf::int32 timeoutsum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > thanuserid_;
  ::std::string* nickname_;
  ::std::string* face_1_;
  ::std::string* location_;
  ::google::protobuf::int32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fpsz_2eproto();
  friend void protobuf_AssignDesc_st_5fpsz_2eproto();
  friend void protobuf_ShutdownFile_st_5fpsz_2eproto();

  void InitAsDefaultInstance();
  static pszuser* default_instance_;
};
// -------------------------------------------------------------------

class pszinfo : public ::google::protobuf::Message {
 public:
  pszinfo();
  virtual ~pszinfo();

  pszinfo(const pszinfo& from);

  inline pszinfo& operator=(const pszinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pszinfo& default_instance();

  void Swap(pszinfo* other);

  // implements Message ----------------------------------------------

  pszinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pszinfo& from);
  void MergeFrom(const pszinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tablemark = 2;
  inline bool has_tablemark() const;
  inline void clear_tablemark();
  static const int kTablemarkFieldNumber = 2;
  inline ::google::protobuf::int32 tablemark() const;
  inline void set_tablemark(::google::protobuf::int32 value);

  // optional int32 tabletime = 3;
  inline bool has_tabletime() const;
  inline void clear_tabletime();
  static const int kTabletimeFieldNumber = 3;
  inline ::google::protobuf::int32 tabletime() const;
  inline void set_tabletime(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional int32 tabletype = 6;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 6;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 difen = 7;
  inline bool has_difen() const;
  inline void clear_difen();
  static const int kDifenFieldNumber = 7;
  inline ::google::protobuf::int32 difen() const;
  inline void set_difen(::google::protobuf::int32 value);

  // optional int32 doublecomp = 8;
  inline bool has_doublecomp() const;
  inline void clear_doublecomp();
  static const int kDoublecompFieldNumber = 8;
  inline ::google::protobuf::int32 doublecomp() const;
  inline void set_doublecomp(::google::protobuf::int32 value);

  // optional int32 boutcapp = 9;
  inline bool has_boutcapp() const;
  inline void clear_boutcapp();
  static const int kBoutcappFieldNumber = 9;
  inline ::google::protobuf::int32 boutcapp() const;
  inline void set_boutcapp(::google::protobuf::int32 value);

  // optional int32 mincomp = 10;
  inline bool has_mincomp() const;
  inline void clear_mincomp();
  static const int kMincompFieldNumber = 10;
  inline ::google::protobuf::int32 mincomp() const;
  inline void set_mincomp(::google::protobuf::int32 value);

  // optional int32 menpai = 11;
  inline bool has_menpai() const;
  inline void clear_menpai();
  static const int kMenpaiFieldNumber = 11;
  inline ::google::protobuf::int32 menpai() const;
  inline void set_menpai(::google::protobuf::int32 value);

  // optional int32 maxplaynum = 12;
  inline bool has_maxplaynum() const;
  inline void clear_maxplaynum();
  static const int kMaxplaynumFieldNumber = 12;
  inline ::google::protobuf::int32 maxplaynum() const;
  inline void set_maxplaynum(::google::protobuf::int32 value);

  // optional int32 paytype = 13;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPaytypeFieldNumber = 13;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);

  // optional int32 restrict = 14;
  inline bool has_restrict() const;
  inline void clear_restrict();
  static const int kRestrictFieldNumber = 14;
  inline ::google::protobuf::int32 restrict() const;
  inline void set_restrict(::google::protobuf::int32 value);

  // optional int32 autoready = 15;
  inline bool has_autoready() const;
  inline void clear_autoready();
  static const int kAutoreadyFieldNumber = 15;
  inline ::google::protobuf::int32 autoready() const;
  inline void set_autoready(::google::protobuf::int32 value);

  // optional int32 ownerid = 16;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 16;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // optional int32 bankerID = 17;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankerIDFieldNumber = 17;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // repeated .progame.pszuser situser = 18;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 18;
  inline const ::progame::pszuser& situser(int index) const;
  inline ::progame::pszuser* mutable_situser(int index);
  inline ::progame::pszuser* add_situser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::pszuser >&
      situser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::pszuser >*
      mutable_situser();

  // repeated int32 standuser = 19;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 19;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional int32 usevipnum = 20;
  inline bool has_usevipnum() const;
  inline void clear_usevipnum();
  static const int kUsevipnumFieldNumber = 20;
  inline ::google::protobuf::int32 usevipnum() const;
  inline void set_usevipnum(::google::protobuf::int32 value);

  // optional int32 guodi = 21;
  inline bool has_guodi() const;
  inline void clear_guodi();
  static const int kGuodiFieldNumber = 21;
  inline ::google::protobuf::int32 guodi() const;
  inline void set_guodi(::google::protobuf::int32 value);

  // optional int32 oncepour = 22;
  inline bool has_oncepour() const;
  inline void clear_oncepour();
  static const int kOncepourFieldNumber = 22;
  inline ::google::protobuf::int32 oncepour() const;
  inline void set_oncepour(::google::protobuf::int32 value);

  // optional int32 presentbout = 23;
  inline bool has_presentbout() const;
  inline void clear_presentbout();
  static const int kPresentboutFieldNumber = 23;
  inline ::google::protobuf::int32 presentbout() const;
  inline void set_presentbout(::google::protobuf::int32 value);

  // optional int32 dissolveinfo = 24;
  inline bool has_dissolveinfo() const;
  inline void clear_dissolveinfo();
  static const int kDissolveinfoFieldNumber = 24;
  inline ::google::protobuf::int32 dissolveinfo() const;
  inline void set_dissolveinfo(::google::protobuf::int32 value);

  // optional string straction = 25;
  inline bool has_straction() const;
  inline void clear_straction();
  static const int kStractionFieldNumber = 25;
  inline const ::std::string& straction() const;
  inline void set_straction(const ::std::string& value);
  inline void set_straction(const char* value);
  inline void set_straction(const char* value, size_t size);
  inline ::std::string* mutable_straction();
  inline ::std::string* release_straction();
  inline void set_allocated_straction(::std::string* straction);

  // optional int32 payway = 26;
  inline bool has_payway() const;
  inline void clear_payway();
  static const int kPaywayFieldNumber = 26;
  inline ::google::protobuf::int32 payway() const;
  inline void set_payway(::google::protobuf::int32 value);

  // optional int32 paynum = 27;
  inline bool has_paynum() const;
  inline void clear_paynum();
  static const int kPaynumFieldNumber = 27;
  inline ::google::protobuf::int32 paynum() const;
  inline void set_paynum(::google::protobuf::int32 value);

  // optional int32 maxuser = 29;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 29;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // repeated int32 actionlist = 30;
  inline int actionlist_size() const;
  inline void clear_actionlist();
  static const int kActionlistFieldNumber = 30;
  inline ::google::protobuf::int32 actionlist(int index) const;
  inline void set_actionlist(int index, ::google::protobuf::int32 value);
  inline void add_actionlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      actionlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_actionlist();

  // optional int32 deluser = 31;
  inline bool has_deluser() const;
  inline void clear_deluser();
  static const int kDeluserFieldNumber = 31;
  inline ::google::protobuf::int32 deluser() const;
  inline void set_deluser(::google::protobuf::int32 value);

  // optional int32 actionuser = 32;
  inline bool has_actionuser() const;
  inline void clear_actionuser();
  static const int kActionuserFieldNumber = 32;
  inline ::google::protobuf::int32 actionuser() const;
  inline void set_actionuser(::google::protobuf::int32 value);

  // optional int32 usernum = 33;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 33;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 julebuid = 34;
  inline bool has_julebuid() const;
  inline void clear_julebuid();
  static const int kJulebuidFieldNumber = 34;
  inline ::google::protobuf::int32 julebuid() const;
  inline void set_julebuid(::google::protobuf::int32 value);

  // optional int32 flag = 35;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 35;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 psztype = 36;
  inline bool has_psztype() const;
  inline void clear_psztype();
  static const int kPsztypeFieldNumber = 36;
  inline ::google::protobuf::int32 psztype() const;
  inline void set_psztype(::google::protobuf::int32 value);

  // optional int32 pourcount = 37;
  inline bool has_pourcount() const;
  inline void clear_pourcount();
  static const int kPourcountFieldNumber = 37;
  inline ::google::protobuf::int32 pourcount() const;
  inline void set_pourcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.pszinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablemark();
  inline void clear_has_tablemark();
  inline void set_has_tabletime();
  inline void clear_has_tabletime();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_difen();
  inline void clear_has_difen();
  inline void set_has_doublecomp();
  inline void clear_has_doublecomp();
  inline void set_has_boutcapp();
  inline void clear_has_boutcapp();
  inline void set_has_mincomp();
  inline void clear_has_mincomp();
  inline void set_has_menpai();
  inline void clear_has_menpai();
  inline void set_has_maxplaynum();
  inline void clear_has_maxplaynum();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_restrict();
  inline void clear_has_restrict();
  inline void set_has_autoready();
  inline void clear_has_autoready();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_usevipnum();
  inline void clear_has_usevipnum();
  inline void set_has_guodi();
  inline void clear_has_guodi();
  inline void set_has_oncepour();
  inline void clear_has_oncepour();
  inline void set_has_presentbout();
  inline void clear_has_presentbout();
  inline void set_has_dissolveinfo();
  inline void clear_has_dissolveinfo();
  inline void set_has_straction();
  inline void clear_has_straction();
  inline void set_has_payway();
  inline void clear_has_payway();
  inline void set_has_paynum();
  inline void clear_has_paynum();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_deluser();
  inline void clear_has_deluser();
  inline void set_has_actionuser();
  inline void clear_has_actionuser();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_julebuid();
  inline void clear_has_julebuid();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_psztype();
  inline void clear_has_psztype();
  inline void set_has_pourcount();
  inline void clear_has_pourcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tablemark_;
  ::google::protobuf::int32 tabletime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 difen_;
  ::google::protobuf::int32 doublecomp_;
  ::google::protobuf::int32 boutcapp_;
  ::google::protobuf::int32 mincomp_;
  ::google::protobuf::int32 menpai_;
  ::google::protobuf::int32 maxplaynum_;
  ::google::protobuf::int32 paytype_;
  ::google::protobuf::int32 restrict_;
  ::google::protobuf::int32 autoready_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::RepeatedPtrField< ::progame::pszuser > situser_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::int32 usevipnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 guodi_;
  ::google::protobuf::int32 oncepour_;
  ::google::protobuf::int32 presentbout_;
  ::google::protobuf::int32 dissolveinfo_;
  ::std::string* straction_;
  ::google::protobuf::int32 payway_;
  ::google::protobuf::int32 paynum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > actionlist_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 deluser_;
  ::google::protobuf::int32 actionuser_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 julebuid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 psztype_;
  ::google::protobuf::int32 pourcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(36 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fpsz_2eproto();
  friend void protobuf_AssignDesc_st_5fpsz_2eproto();
  friend void protobuf_ShutdownFile_st_5fpsz_2eproto();

  void InitAsDefaultInstance();
  static pszinfo* default_instance_;
};
// -------------------------------------------------------------------

class pszhandpoker : public ::google::protobuf::Message {
 public:
  pszhandpoker();
  virtual ~pszhandpoker();

  pszhandpoker(const pszhandpoker& from);

  inline pszhandpoker& operator=(const pszhandpoker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pszhandpoker& default_instance();

  void Swap(pszhandpoker* other);

  // implements Message ----------------------------------------------

  pszhandpoker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pszhandpoker& from);
  void MergeFrom(const pszhandpoker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 handpoker = 1;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 1;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // @@protoc_insertion_point(class_scope:progame.pszhandpoker)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fpsz_2eproto();
  friend void protobuf_AssignDesc_st_5fpsz_2eproto();
  friend void protobuf_ShutdownFile_st_5fpsz_2eproto();

  void InitAsDefaultInstance();
  static pszhandpoker* default_instance_;
};
// -------------------------------------------------------------------

class pszhistoryitem : public ::google::protobuf::Message {
 public:
  pszhistoryitem();
  virtual ~pszhistoryitem();

  pszhistoryitem(const pszhistoryitem& from);

  inline pszhistoryitem& operator=(const pszhistoryitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pszhistoryitem& default_instance();

  void Swap(pszhistoryitem* other);

  // implements Message ----------------------------------------------

  pszhistoryitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pszhistoryitem& from);
  void MergeFrom(const pszhistoryitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 leg = 1;
  inline bool has_leg() const;
  inline void clear_leg();
  static const int kLegFieldNumber = 1;
  inline ::google::protobuf::int32 leg() const;
  inline void set_leg(::google::protobuf::int32 value);

  // optional int32 guodi = 2;
  inline bool has_guodi() const;
  inline void clear_guodi();
  static const int kGuodiFieldNumber = 2;
  inline ::google::protobuf::int32 guodi() const;
  inline void set_guodi(::google::protobuf::int32 value);

  // optional int32 presentbout = 3;
  inline bool has_presentbout() const;
  inline void clear_presentbout();
  static const int kPresentboutFieldNumber = 3;
  inline ::google::protobuf::int32 presentbout() const;
  inline void set_presentbout(::google::protobuf::int32 value);

  // optional int32 oncepour = 4;
  inline bool has_oncepour() const;
  inline void clear_oncepour();
  static const int kOncepourFieldNumber = 4;
  inline ::google::protobuf::int32 oncepour() const;
  inline void set_oncepour(::google::protobuf::int32 value);

  // optional int32 winerid = 5;
  inline bool has_winerid() const;
  inline void clear_winerid();
  static const int kWineridFieldNumber = 5;
  inline ::google::protobuf::int32 winerid() const;
  inline void set_winerid(::google::protobuf::int32 value);

  // repeated int32 useridlist = 6;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 6;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated string nicklist = 7;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 7;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 jetton = 8;
  inline int jetton_size() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 8;
  inline ::google::protobuf::int32 jetton(int index) const;
  inline void set_jetton(int index, ::google::protobuf::int32 value);
  inline void add_jetton(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jetton() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jetton();

  // repeated .progame.pszhandpoker pokerlist = 9;
  inline int pokerlist_size() const;
  inline void clear_pokerlist();
  static const int kPokerlistFieldNumber = 9;
  inline const ::progame::pszhandpoker& pokerlist(int index) const;
  inline ::progame::pszhandpoker* mutable_pokerlist(int index);
  inline ::progame::pszhandpoker* add_pokerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::pszhandpoker >&
      pokerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::pszhandpoker >*
      mutable_pokerlist();

  // repeated int32 psztypelist = 10;
  inline int psztypelist_size() const;
  inline void clear_psztypelist();
  static const int kPsztypelistFieldNumber = 10;
  inline ::google::protobuf::int32 psztypelist(int index) const;
  inline void set_psztypelist(int index, ::google::protobuf::int32 value);
  inline void add_psztypelist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      psztypelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_psztypelist();

  // repeated int32 winlist = 11;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 11;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // repeated int32 resultlist = 17;
  inline int resultlist_size() const;
  inline void clear_resultlist();
  static const int kResultlistFieldNumber = 17;
  inline ::google::protobuf::int32 resultlist(int index) const;
  inline void set_resultlist(int index, ::google::protobuf::int32 value);
  inline void add_resultlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      resultlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_resultlist();

  // @@protoc_insertion_point(class_scope:progame.pszhistoryitem)
 private:
  inline void set_has_leg();
  inline void clear_has_leg();
  inline void set_has_guodi();
  inline void clear_has_guodi();
  inline void set_has_presentbout();
  inline void clear_has_presentbout();
  inline void set_has_oncepour();
  inline void clear_has_oncepour();
  inline void set_has_winerid();
  inline void clear_has_winerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 leg_;
  ::google::protobuf::int32 guodi_;
  ::google::protobuf::int32 presentbout_;
  ::google::protobuf::int32 oncepour_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jetton_;
  ::google::protobuf::RepeatedPtrField< ::progame::pszhandpoker > pokerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > psztypelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > resultlist_;
  ::google::protobuf::int32 winerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fpsz_2eproto();
  friend void protobuf_AssignDesc_st_5fpsz_2eproto();
  friend void protobuf_ShutdownFile_st_5fpsz_2eproto();

  void InitAsDefaultInstance();
  static pszhistoryitem* default_instance_;
};
// -------------------------------------------------------------------

class pszhistory : public ::google::protobuf::Message {
 public:
  pszhistory();
  virtual ~pszhistory();

  pszhistory(const pszhistory& from);

  inline pszhistory& operator=(const pszhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pszhistory& default_instance();

  void Swap(pszhistory* other);

  // implements Message ----------------------------------------------

  pszhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pszhistory& from);
  void MergeFrom(const pszhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 playnummax = 2;
  inline bool has_playnummax() const;
  inline void clear_playnummax();
  static const int kPlaynummaxFieldNumber = 2;
  inline ::google::protobuf::int32 playnummax() const;
  inline void set_playnummax(::google::protobuf::int32 value);

  // optional int32 playnum = 3;
  inline bool has_playnum() const;
  inline void clear_playnum();
  static const int kPlaynumFieldNumber = 3;
  inline ::google::protobuf::int32 playnum() const;
  inline void set_playnum(::google::protobuf::int32 value);

  // optional int32 difen = 4;
  inline bool has_difen() const;
  inline void clear_difen();
  static const int kDifenFieldNumber = 4;
  inline ::google::protobuf::int32 difen() const;
  inline void set_difen(::google::protobuf::int32 value);

  // optional int32 gametime = 6;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGametimeFieldNumber = 6;
  inline ::google::protobuf::int32 gametime() const;
  inline void set_gametime(::google::protobuf::int32 value);

  // optional int32 ownerid = 7;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 7;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // repeated string nicklist = 8;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 8;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 useridlist = 9;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 9;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated int32 winlist = 10;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 10;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // repeated .progame.pszhistoryitem hitemlist = 11;
  inline int hitemlist_size() const;
  inline void clear_hitemlist();
  static const int kHitemlistFieldNumber = 11;
  inline const ::progame::pszhistoryitem& hitemlist(int index) const;
  inline ::progame::pszhistoryitem* mutable_hitemlist(int index);
  inline ::progame::pszhistoryitem* add_hitemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::pszhistoryitem >&
      hitemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::pszhistoryitem >*
      mutable_hitemlist();

  // @@protoc_insertion_point(class_scope:progame.pszhistory)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_playnummax();
  inline void clear_has_playnummax();
  inline void set_has_playnum();
  inline void clear_has_playnum();
  inline void set_has_difen();
  inline void clear_has_difen();
  inline void set_has_gametime();
  inline void clear_has_gametime();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 playnummax_;
  ::google::protobuf::int32 playnum_;
  ::google::protobuf::int32 difen_;
  ::google::protobuf::int32 gametime_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::pszhistoryitem > hitemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fpsz_2eproto();
  friend void protobuf_AssignDesc_st_5fpsz_2eproto();
  friend void protobuf_ShutdownFile_st_5fpsz_2eproto();

  void InitAsDefaultInstance();
  static pszhistory* default_instance_;
};
// -------------------------------------------------------------------

class pszcomparepoker : public ::google::protobuf::Message {
 public:
  pszcomparepoker();
  virtual ~pszcomparepoker();

  pszcomparepoker(const pszcomparepoker& from);

  inline pszcomparepoker& operator=(const pszcomparepoker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pszcomparepoker& default_instance();

  void Swap(pszcomparepoker* other);

  // implements Message ----------------------------------------------

  pszcomparepoker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pszcomparepoker& from);
  void MergeFrom(const pszcomparepoker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 winnerid = 1;
  inline bool has_winnerid() const;
  inline void clear_winnerid();
  static const int kWinneridFieldNumber = 1;
  inline ::google::protobuf::int32 winnerid() const;
  inline void set_winnerid(::google::protobuf::int32 value);

  // optional int32 loserid = 2;
  inline bool has_loserid() const;
  inline void clear_loserid();
  static const int kLoseridFieldNumber = 2;
  inline ::google::protobuf::int32 loserid() const;
  inline void set_loserid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.pszcomparepoker)
 private:
  inline void set_has_winnerid();
  inline void clear_has_winnerid();
  inline void set_has_loserid();
  inline void clear_has_loserid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 winnerid_;
  ::google::protobuf::int32 loserid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fpsz_2eproto();
  friend void protobuf_AssignDesc_st_5fpsz_2eproto();
  friend void protobuf_ShutdownFile_st_5fpsz_2eproto();

  void InitAsDefaultInstance();
  static pszcomparepoker* default_instance_;
};
// ===================================================================


// ===================================================================

// pszuser

// optional int32 userid = 1;
inline bool pszuser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pszuser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pszuser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pszuser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 pszuser::userid() const {
  return userid_;
}
inline void pszuser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// repeated int32 handpoker = 2;
inline int pszuser::handpoker_size() const {
  return handpoker_.size();
}
inline void pszuser::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 pszuser::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void pszuser::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void pszuser::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszuser::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszuser::mutable_handpoker() {
  return &handpoker_;
}

// optional int32 psztype = 3;
inline bool pszuser::has_psztype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pszuser::set_has_psztype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pszuser::clear_has_psztype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pszuser::clear_psztype() {
  psztype_ = 0;
  clear_has_psztype();
}
inline ::google::protobuf::int32 pszuser::psztype() const {
  return psztype_;
}
inline void pszuser::set_psztype(::google::protobuf::int32 value) {
  set_has_psztype();
  psztype_ = value;
}

// optional int32 chairid = 4;
inline bool pszuser::has_chairid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pszuser::set_has_chairid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pszuser::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pszuser::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 pszuser::chairid() const {
  return chairid_;
}
inline void pszuser::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional string jifen = 5;
inline bool pszuser::has_jifen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pszuser::set_has_jifen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pszuser::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pszuser::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& pszuser::jifen() const {
  return *jifen_;
}
inline void pszuser::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void pszuser::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void pszuser::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pszuser::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* pszuser::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pszuser::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 jetton = 6;
inline bool pszuser::has_jetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pszuser::set_has_jetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pszuser::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pszuser::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 pszuser::jetton() const {
  return jetton_;
}
inline void pszuser::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 state = 7;
inline bool pszuser::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pszuser::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pszuser::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pszuser::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 pszuser::state() const {
  return state_;
}
inline void pszuser::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 pokerstate = 8;
inline bool pszuser::has_pokerstate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pszuser::set_has_pokerstate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pszuser::clear_has_pokerstate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pszuser::clear_pokerstate() {
  pokerstate_ = 0;
  clear_has_pokerstate();
}
inline ::google::protobuf::int32 pszuser::pokerstate() const {
  return pokerstate_;
}
inline void pszuser::set_pokerstate(::google::protobuf::int32 value) {
  set_has_pokerstate();
  pokerstate_ = value;
}

// optional int32 pokerstate_discard = 9;
inline bool pszuser::has_pokerstate_discard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pszuser::set_has_pokerstate_discard() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pszuser::clear_has_pokerstate_discard() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pszuser::clear_pokerstate_discard() {
  pokerstate_discard_ = 0;
  clear_has_pokerstate_discard();
}
inline ::google::protobuf::int32 pszuser::pokerstate_discard() const {
  return pokerstate_discard_;
}
inline void pszuser::set_pokerstate_discard(::google::protobuf::int32 value) {
  set_has_pokerstate_discard();
  pokerstate_discard_ = value;
}

// optional int32 compare = 10;
inline bool pszuser::has_compare() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pszuser::set_has_compare() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pszuser::clear_has_compare() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pszuser::clear_compare() {
  compare_ = 0;
  clear_has_compare();
}
inline ::google::protobuf::int32 pszuser::compare() const {
  return compare_;
}
inline void pszuser::set_compare(::google::protobuf::int32 value) {
  set_has_compare();
  compare_ = value;
}

// optional int32 endshow = 11;
inline bool pszuser::has_endshow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pszuser::set_has_endshow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pszuser::clear_has_endshow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pszuser::clear_endshow() {
  endshow_ = 0;
  clear_has_endshow();
}
inline ::google::protobuf::int32 pszuser::endshow() const {
  return endshow_;
}
inline void pszuser::set_endshow(::google::protobuf::int32 value) {
  set_has_endshow();
  endshow_ = value;
}

// optional int32 winnum = 12;
inline bool pszuser::has_winnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pszuser::set_has_winnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pszuser::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pszuser::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 pszuser::winnum() const {
  return winnum_;
}
inline void pszuser::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional int32 maxdntype = 13;
inline bool pszuser::has_maxdntype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pszuser::set_has_maxdntype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pszuser::clear_has_maxdntype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pszuser::clear_maxdntype() {
  maxdntype_ = 0;
  clear_has_maxdntype();
}
inline ::google::protobuf::int32 pszuser::maxdntype() const {
  return maxdntype_;
}
inline void pszuser::set_maxdntype(::google::protobuf::int32 value) {
  set_has_maxdntype();
  maxdntype_ = value;
}

// optional int32 maxscore = 14;
inline bool pszuser::has_maxscore() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pszuser::set_has_maxscore() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pszuser::clear_has_maxscore() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pszuser::clear_maxscore() {
  maxscore_ = 0;
  clear_has_maxscore();
}
inline ::google::protobuf::int32 pszuser::maxscore() const {
  return maxscore_;
}
inline void pszuser::set_maxscore(::google::protobuf::int32 value) {
  set_has_maxscore();
  maxscore_ = value;
}

// optional int32 audocingl = 15;
inline bool pszuser::has_audocingl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pszuser::set_has_audocingl() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pszuser::clear_has_audocingl() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pszuser::clear_audocingl() {
  audocingl_ = 0;
  clear_has_audocingl();
}
inline ::google::protobuf::int32 pszuser::audocingl() const {
  return audocingl_;
}
inline void pszuser::set_audocingl(::google::protobuf::int32 value) {
  set_has_audocingl();
  audocingl_ = value;
}

// repeated int32 jettonlist = 16;
inline int pszuser::jettonlist_size() const {
  return jettonlist_.size();
}
inline void pszuser::clear_jettonlist() {
  jettonlist_.Clear();
}
inline ::google::protobuf::int32 pszuser::jettonlist(int index) const {
  return jettonlist_.Get(index);
}
inline void pszuser::set_jettonlist(int index, ::google::protobuf::int32 value) {
  jettonlist_.Set(index, value);
}
inline void pszuser::add_jettonlist(::google::protobuf::int32 value) {
  jettonlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszuser::jettonlist() const {
  return jettonlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszuser::mutable_jettonlist() {
  return &jettonlist_;
}

// optional int32 callNum = 17;
inline bool pszuser::has_callnum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pszuser::set_has_callnum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pszuser::clear_has_callnum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pszuser::clear_callnum() {
  callnum_ = 0;
  clear_has_callnum();
}
inline ::google::protobuf::int32 pszuser::callnum() const {
  return callnum_;
}
inline void pszuser::set_callnum(::google::protobuf::int32 value) {
  set_has_callnum();
  callnum_ = value;
}

// optional int32 thanNum = 18;
inline bool pszuser::has_thannum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void pszuser::set_has_thannum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void pszuser::clear_has_thannum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void pszuser::clear_thannum() {
  thannum_ = 0;
  clear_has_thannum();
}
inline ::google::protobuf::int32 pszuser::thannum() const {
  return thannum_;
}
inline void pszuser::set_thannum(::google::protobuf::int32 value) {
  set_has_thannum();
  thannum_ = value;
}

// repeated int32 filList = 19;
inline int pszuser::fillist_size() const {
  return fillist_.size();
}
inline void pszuser::clear_fillist() {
  fillist_.Clear();
}
inline ::google::protobuf::int32 pszuser::fillist(int index) const {
  return fillist_.Get(index);
}
inline void pszuser::set_fillist(int index, ::google::protobuf::int32 value) {
  fillist_.Set(index, value);
}
inline void pszuser::add_fillist(::google::protobuf::int32 value) {
  fillist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszuser::fillist() const {
  return fillist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszuser::mutable_fillist() {
  return &fillist_;
}

// repeated int32 thanuserid = 20;
inline int pszuser::thanuserid_size() const {
  return thanuserid_.size();
}
inline void pszuser::clear_thanuserid() {
  thanuserid_.Clear();
}
inline ::google::protobuf::int32 pszuser::thanuserid(int index) const {
  return thanuserid_.Get(index);
}
inline void pszuser::set_thanuserid(int index, ::google::protobuf::int32 value) {
  thanuserid_.Set(index, value);
}
inline void pszuser::add_thanuserid(::google::protobuf::int32 value) {
  thanuserid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszuser::thanuserid() const {
  return thanuserid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszuser::mutable_thanuserid() {
  return &thanuserid_;
}

// optional int32 timeoutSum = 21;
inline bool pszuser::has_timeoutsum() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void pszuser::set_has_timeoutsum() {
  _has_bits_[0] |= 0x00100000u;
}
inline void pszuser::clear_has_timeoutsum() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void pszuser::clear_timeoutsum() {
  timeoutsum_ = 0;
  clear_has_timeoutsum();
}
inline ::google::protobuf::int32 pszuser::timeoutsum() const {
  return timeoutsum_;
}
inline void pszuser::set_timeoutsum(::google::protobuf::int32 value) {
  set_has_timeoutsum();
  timeoutsum_ = value;
}

// optional string nickname = 22;
inline bool pszuser::has_nickname() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void pszuser::set_has_nickname() {
  _has_bits_[0] |= 0x00200000u;
}
inline void pszuser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void pszuser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& pszuser::nickname() const {
  return *nickname_;
}
inline void pszuser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void pszuser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void pszuser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pszuser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* pszuser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pszuser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 23;
inline bool pszuser::has_sex() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void pszuser::set_has_sex() {
  _has_bits_[0] |= 0x00400000u;
}
inline void pszuser::clear_has_sex() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void pszuser::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 pszuser::sex() const {
  return sex_;
}
inline void pszuser::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string face_1 = 24;
inline bool pszuser::has_face_1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void pszuser::set_has_face_1() {
  _has_bits_[0] |= 0x00800000u;
}
inline void pszuser::clear_has_face_1() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void pszuser::clear_face_1() {
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    face_1_->clear();
  }
  clear_has_face_1();
}
inline const ::std::string& pszuser::face_1() const {
  return *face_1_;
}
inline void pszuser::set_face_1(const ::std::string& value) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(value);
}
inline void pszuser::set_face_1(const char* value) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(value);
}
inline void pszuser::set_face_1(const char* value, size_t size) {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  face_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pszuser::mutable_face_1() {
  set_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    face_1_ = new ::std::string;
  }
  return face_1_;
}
inline ::std::string* pszuser::release_face_1() {
  clear_has_face_1();
  if (face_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = face_1_;
    face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pszuser::set_allocated_face_1(::std::string* face_1) {
  if (face_1_ != &::google::protobuf::internal::kEmptyString) {
    delete face_1_;
  }
  if (face_1) {
    set_has_face_1();
    face_1_ = face_1;
  } else {
    clear_has_face_1();
    face_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string location = 25;
inline bool pszuser::has_location() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void pszuser::set_has_location() {
  _has_bits_[0] |= 0x01000000u;
}
inline void pszuser::clear_has_location() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void pszuser::clear_location() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    location_->clear();
  }
  clear_has_location();
}
inline const ::std::string& pszuser::location() const {
  return *location_;
}
inline void pszuser::set_location(const ::std::string& value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(value);
}
inline void pszuser::set_location(const char* value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(value);
}
inline void pszuser::set_location(const char* value, size_t size) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pszuser::mutable_location() {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  return location_;
}
inline ::std::string* pszuser::release_location() {
  clear_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = location_;
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pszuser::set_allocated_location(::std::string* location) {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (location) {
    set_has_location();
    location_ = location;
  } else {
    clear_has_location();
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pszinfo

// optional int32 tableid = 1;
inline bool pszinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pszinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pszinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pszinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 pszinfo::tableid() const {
  return tableid_;
}
inline void pszinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tablemark = 2;
inline bool pszinfo::has_tablemark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pszinfo::set_has_tablemark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pszinfo::clear_has_tablemark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pszinfo::clear_tablemark() {
  tablemark_ = 0;
  clear_has_tablemark();
}
inline ::google::protobuf::int32 pszinfo::tablemark() const {
  return tablemark_;
}
inline void pszinfo::set_tablemark(::google::protobuf::int32 value) {
  set_has_tablemark();
  tablemark_ = value;
}

// optional int32 tabletime = 3;
inline bool pszinfo::has_tabletime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pszinfo::set_has_tabletime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pszinfo::clear_has_tabletime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pszinfo::clear_tabletime() {
  tabletime_ = 0;
  clear_has_tabletime();
}
inline ::google::protobuf::int32 pszinfo::tabletime() const {
  return tabletime_;
}
inline void pszinfo::set_tabletime(::google::protobuf::int32 value) {
  set_has_tabletime();
  tabletime_ = value;
}

// optional int32 state = 4;
inline bool pszinfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pszinfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pszinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pszinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 pszinfo::state() const {
  return state_;
}
inline void pszinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 5;
inline bool pszinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pszinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pszinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pszinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 pszinfo::timemark() const {
  return timemark_;
}
inline void pszinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional int32 tabletype = 6;
inline bool pszinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pszinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pszinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pszinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 pszinfo::tabletype() const {
  return tabletype_;
}
inline void pszinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 difen = 7;
inline bool pszinfo::has_difen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pszinfo::set_has_difen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void pszinfo::clear_has_difen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void pszinfo::clear_difen() {
  difen_ = 0;
  clear_has_difen();
}
inline ::google::protobuf::int32 pszinfo::difen() const {
  return difen_;
}
inline void pszinfo::set_difen(::google::protobuf::int32 value) {
  set_has_difen();
  difen_ = value;
}

// optional int32 doublecomp = 8;
inline bool pszinfo::has_doublecomp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pszinfo::set_has_doublecomp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void pszinfo::clear_has_doublecomp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void pszinfo::clear_doublecomp() {
  doublecomp_ = 0;
  clear_has_doublecomp();
}
inline ::google::protobuf::int32 pszinfo::doublecomp() const {
  return doublecomp_;
}
inline void pszinfo::set_doublecomp(::google::protobuf::int32 value) {
  set_has_doublecomp();
  doublecomp_ = value;
}

// optional int32 boutcapp = 9;
inline bool pszinfo::has_boutcapp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pszinfo::set_has_boutcapp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void pszinfo::clear_has_boutcapp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void pszinfo::clear_boutcapp() {
  boutcapp_ = 0;
  clear_has_boutcapp();
}
inline ::google::protobuf::int32 pszinfo::boutcapp() const {
  return boutcapp_;
}
inline void pszinfo::set_boutcapp(::google::protobuf::int32 value) {
  set_has_boutcapp();
  boutcapp_ = value;
}

// optional int32 mincomp = 10;
inline bool pszinfo::has_mincomp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pszinfo::set_has_mincomp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void pszinfo::clear_has_mincomp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void pszinfo::clear_mincomp() {
  mincomp_ = 0;
  clear_has_mincomp();
}
inline ::google::protobuf::int32 pszinfo::mincomp() const {
  return mincomp_;
}
inline void pszinfo::set_mincomp(::google::protobuf::int32 value) {
  set_has_mincomp();
  mincomp_ = value;
}

// optional int32 menpai = 11;
inline bool pszinfo::has_menpai() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void pszinfo::set_has_menpai() {
  _has_bits_[0] |= 0x00000400u;
}
inline void pszinfo::clear_has_menpai() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void pszinfo::clear_menpai() {
  menpai_ = 0;
  clear_has_menpai();
}
inline ::google::protobuf::int32 pszinfo::menpai() const {
  return menpai_;
}
inline void pszinfo::set_menpai(::google::protobuf::int32 value) {
  set_has_menpai();
  menpai_ = value;
}

// optional int32 maxplaynum = 12;
inline bool pszinfo::has_maxplaynum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void pszinfo::set_has_maxplaynum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void pszinfo::clear_has_maxplaynum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void pszinfo::clear_maxplaynum() {
  maxplaynum_ = 0;
  clear_has_maxplaynum();
}
inline ::google::protobuf::int32 pszinfo::maxplaynum() const {
  return maxplaynum_;
}
inline void pszinfo::set_maxplaynum(::google::protobuf::int32 value) {
  set_has_maxplaynum();
  maxplaynum_ = value;
}

// optional int32 paytype = 13;
inline bool pszinfo::has_paytype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void pszinfo::set_has_paytype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void pszinfo::clear_has_paytype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void pszinfo::clear_paytype() {
  paytype_ = 0;
  clear_has_paytype();
}
inline ::google::protobuf::int32 pszinfo::paytype() const {
  return paytype_;
}
inline void pszinfo::set_paytype(::google::protobuf::int32 value) {
  set_has_paytype();
  paytype_ = value;
}

// optional int32 restrict = 14;
inline bool pszinfo::has_restrict() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void pszinfo::set_has_restrict() {
  _has_bits_[0] |= 0x00002000u;
}
inline void pszinfo::clear_has_restrict() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void pszinfo::clear_restrict() {
  restrict_ = 0;
  clear_has_restrict();
}
inline ::google::protobuf::int32 pszinfo::restrict() const {
  return restrict_;
}
inline void pszinfo::set_restrict(::google::protobuf::int32 value) {
  set_has_restrict();
  restrict_ = value;
}

// optional int32 autoready = 15;
inline bool pszinfo::has_autoready() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void pszinfo::set_has_autoready() {
  _has_bits_[0] |= 0x00004000u;
}
inline void pszinfo::clear_has_autoready() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void pszinfo::clear_autoready() {
  autoready_ = 0;
  clear_has_autoready();
}
inline ::google::protobuf::int32 pszinfo::autoready() const {
  return autoready_;
}
inline void pszinfo::set_autoready(::google::protobuf::int32 value) {
  set_has_autoready();
  autoready_ = value;
}

// optional int32 ownerid = 16;
inline bool pszinfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void pszinfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void pszinfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void pszinfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 pszinfo::ownerid() const {
  return ownerid_;
}
inline void pszinfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional int32 bankerID = 17;
inline bool pszinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void pszinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void pszinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void pszinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 pszinfo::bankerid() const {
  return bankerid_;
}
inline void pszinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// repeated .progame.pszuser situser = 18;
inline int pszinfo::situser_size() const {
  return situser_.size();
}
inline void pszinfo::clear_situser() {
  situser_.Clear();
}
inline const ::progame::pszuser& pszinfo::situser(int index) const {
  return situser_.Get(index);
}
inline ::progame::pszuser* pszinfo::mutable_situser(int index) {
  return situser_.Mutable(index);
}
inline ::progame::pszuser* pszinfo::add_situser() {
  return situser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::pszuser >&
pszinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::pszuser >*
pszinfo::mutable_situser() {
  return &situser_;
}

// repeated int32 standuser = 19;
inline int pszinfo::standuser_size() const {
  return standuser_.size();
}
inline void pszinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 pszinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void pszinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void pszinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 usevipnum = 20;
inline bool pszinfo::has_usevipnum() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void pszinfo::set_has_usevipnum() {
  _has_bits_[0] |= 0x00080000u;
}
inline void pszinfo::clear_has_usevipnum() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void pszinfo::clear_usevipnum() {
  usevipnum_ = 0;
  clear_has_usevipnum();
}
inline ::google::protobuf::int32 pszinfo::usevipnum() const {
  return usevipnum_;
}
inline void pszinfo::set_usevipnum(::google::protobuf::int32 value) {
  set_has_usevipnum();
  usevipnum_ = value;
}

// optional int32 guodi = 21;
inline bool pszinfo::has_guodi() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void pszinfo::set_has_guodi() {
  _has_bits_[0] |= 0x00100000u;
}
inline void pszinfo::clear_has_guodi() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void pszinfo::clear_guodi() {
  guodi_ = 0;
  clear_has_guodi();
}
inline ::google::protobuf::int32 pszinfo::guodi() const {
  return guodi_;
}
inline void pszinfo::set_guodi(::google::protobuf::int32 value) {
  set_has_guodi();
  guodi_ = value;
}

// optional int32 oncepour = 22;
inline bool pszinfo::has_oncepour() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void pszinfo::set_has_oncepour() {
  _has_bits_[0] |= 0x00200000u;
}
inline void pszinfo::clear_has_oncepour() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void pszinfo::clear_oncepour() {
  oncepour_ = 0;
  clear_has_oncepour();
}
inline ::google::protobuf::int32 pszinfo::oncepour() const {
  return oncepour_;
}
inline void pszinfo::set_oncepour(::google::protobuf::int32 value) {
  set_has_oncepour();
  oncepour_ = value;
}

// optional int32 presentbout = 23;
inline bool pszinfo::has_presentbout() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void pszinfo::set_has_presentbout() {
  _has_bits_[0] |= 0x00400000u;
}
inline void pszinfo::clear_has_presentbout() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void pszinfo::clear_presentbout() {
  presentbout_ = 0;
  clear_has_presentbout();
}
inline ::google::protobuf::int32 pszinfo::presentbout() const {
  return presentbout_;
}
inline void pszinfo::set_presentbout(::google::protobuf::int32 value) {
  set_has_presentbout();
  presentbout_ = value;
}

// optional int32 dissolveinfo = 24;
inline bool pszinfo::has_dissolveinfo() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void pszinfo::set_has_dissolveinfo() {
  _has_bits_[0] |= 0x00800000u;
}
inline void pszinfo::clear_has_dissolveinfo() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void pszinfo::clear_dissolveinfo() {
  dissolveinfo_ = 0;
  clear_has_dissolveinfo();
}
inline ::google::protobuf::int32 pszinfo::dissolveinfo() const {
  return dissolveinfo_;
}
inline void pszinfo::set_dissolveinfo(::google::protobuf::int32 value) {
  set_has_dissolveinfo();
  dissolveinfo_ = value;
}

// optional string straction = 25;
inline bool pszinfo::has_straction() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void pszinfo::set_has_straction() {
  _has_bits_[0] |= 0x01000000u;
}
inline void pszinfo::clear_has_straction() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void pszinfo::clear_straction() {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    straction_->clear();
  }
  clear_has_straction();
}
inline const ::std::string& pszinfo::straction() const {
  return *straction_;
}
inline void pszinfo::set_straction(const ::std::string& value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void pszinfo::set_straction(const char* value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void pszinfo::set_straction(const char* value, size_t size) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pszinfo::mutable_straction() {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  return straction_;
}
inline ::std::string* pszinfo::release_straction() {
  clear_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = straction_;
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pszinfo::set_allocated_straction(::std::string* straction) {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (straction) {
    set_has_straction();
    straction_ = straction;
  } else {
    clear_has_straction();
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 payway = 26;
inline bool pszinfo::has_payway() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void pszinfo::set_has_payway() {
  _has_bits_[0] |= 0x02000000u;
}
inline void pszinfo::clear_has_payway() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void pszinfo::clear_payway() {
  payway_ = 0;
  clear_has_payway();
}
inline ::google::protobuf::int32 pszinfo::payway() const {
  return payway_;
}
inline void pszinfo::set_payway(::google::protobuf::int32 value) {
  set_has_payway();
  payway_ = value;
}

// optional int32 paynum = 27;
inline bool pszinfo::has_paynum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void pszinfo::set_has_paynum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void pszinfo::clear_has_paynum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void pszinfo::clear_paynum() {
  paynum_ = 0;
  clear_has_paynum();
}
inline ::google::protobuf::int32 pszinfo::paynum() const {
  return paynum_;
}
inline void pszinfo::set_paynum(::google::protobuf::int32 value) {
  set_has_paynum();
  paynum_ = value;
}

// optional int32 maxuser = 29;
inline bool pszinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void pszinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x08000000u;
}
inline void pszinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void pszinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 pszinfo::maxuser() const {
  return maxuser_;
}
inline void pszinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// repeated int32 actionlist = 30;
inline int pszinfo::actionlist_size() const {
  return actionlist_.size();
}
inline void pszinfo::clear_actionlist() {
  actionlist_.Clear();
}
inline ::google::protobuf::int32 pszinfo::actionlist(int index) const {
  return actionlist_.Get(index);
}
inline void pszinfo::set_actionlist(int index, ::google::protobuf::int32 value) {
  actionlist_.Set(index, value);
}
inline void pszinfo::add_actionlist(::google::protobuf::int32 value) {
  actionlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszinfo::actionlist() const {
  return actionlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszinfo::mutable_actionlist() {
  return &actionlist_;
}

// optional int32 deluser = 31;
inline bool pszinfo::has_deluser() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void pszinfo::set_has_deluser() {
  _has_bits_[0] |= 0x20000000u;
}
inline void pszinfo::clear_has_deluser() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void pszinfo::clear_deluser() {
  deluser_ = 0;
  clear_has_deluser();
}
inline ::google::protobuf::int32 pszinfo::deluser() const {
  return deluser_;
}
inline void pszinfo::set_deluser(::google::protobuf::int32 value) {
  set_has_deluser();
  deluser_ = value;
}

// optional int32 actionuser = 32;
inline bool pszinfo::has_actionuser() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void pszinfo::set_has_actionuser() {
  _has_bits_[0] |= 0x40000000u;
}
inline void pszinfo::clear_has_actionuser() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void pszinfo::clear_actionuser() {
  actionuser_ = 0;
  clear_has_actionuser();
}
inline ::google::protobuf::int32 pszinfo::actionuser() const {
  return actionuser_;
}
inline void pszinfo::set_actionuser(::google::protobuf::int32 value) {
  set_has_actionuser();
  actionuser_ = value;
}

// optional int32 usernum = 33;
inline bool pszinfo::has_usernum() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void pszinfo::set_has_usernum() {
  _has_bits_[0] |= 0x80000000u;
}
inline void pszinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void pszinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 pszinfo::usernum() const {
  return usernum_;
}
inline void pszinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 julebuid = 34;
inline bool pszinfo::has_julebuid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void pszinfo::set_has_julebuid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void pszinfo::clear_has_julebuid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void pszinfo::clear_julebuid() {
  julebuid_ = 0;
  clear_has_julebuid();
}
inline ::google::protobuf::int32 pszinfo::julebuid() const {
  return julebuid_;
}
inline void pszinfo::set_julebuid(::google::protobuf::int32 value) {
  set_has_julebuid();
  julebuid_ = value;
}

// optional int32 flag = 35;
inline bool pszinfo::has_flag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void pszinfo::set_has_flag() {
  _has_bits_[1] |= 0x00000002u;
}
inline void pszinfo::clear_has_flag() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void pszinfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 pszinfo::flag() const {
  return flag_;
}
inline void pszinfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 psztype = 36;
inline bool pszinfo::has_psztype() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void pszinfo::set_has_psztype() {
  _has_bits_[1] |= 0x00000004u;
}
inline void pszinfo::clear_has_psztype() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void pszinfo::clear_psztype() {
  psztype_ = 0;
  clear_has_psztype();
}
inline ::google::protobuf::int32 pszinfo::psztype() const {
  return psztype_;
}
inline void pszinfo::set_psztype(::google::protobuf::int32 value) {
  set_has_psztype();
  psztype_ = value;
}

// optional int32 pourcount = 37;
inline bool pszinfo::has_pourcount() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void pszinfo::set_has_pourcount() {
  _has_bits_[1] |= 0x00000008u;
}
inline void pszinfo::clear_has_pourcount() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void pszinfo::clear_pourcount() {
  pourcount_ = 0;
  clear_has_pourcount();
}
inline ::google::protobuf::int32 pszinfo::pourcount() const {
  return pourcount_;
}
inline void pszinfo::set_pourcount(::google::protobuf::int32 value) {
  set_has_pourcount();
  pourcount_ = value;
}

// -------------------------------------------------------------------

// pszhandpoker

// repeated int32 handpoker = 1;
inline int pszhandpoker::handpoker_size() const {
  return handpoker_.size();
}
inline void pszhandpoker::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 pszhandpoker::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void pszhandpoker::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void pszhandpoker::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhandpoker::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhandpoker::mutable_handpoker() {
  return &handpoker_;
}

// -------------------------------------------------------------------

// pszhistoryitem

// optional int32 leg = 1;
inline bool pszhistoryitem::has_leg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pszhistoryitem::set_has_leg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pszhistoryitem::clear_has_leg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pszhistoryitem::clear_leg() {
  leg_ = 0;
  clear_has_leg();
}
inline ::google::protobuf::int32 pszhistoryitem::leg() const {
  return leg_;
}
inline void pszhistoryitem::set_leg(::google::protobuf::int32 value) {
  set_has_leg();
  leg_ = value;
}

// optional int32 guodi = 2;
inline bool pszhistoryitem::has_guodi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pszhistoryitem::set_has_guodi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pszhistoryitem::clear_has_guodi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pszhistoryitem::clear_guodi() {
  guodi_ = 0;
  clear_has_guodi();
}
inline ::google::protobuf::int32 pszhistoryitem::guodi() const {
  return guodi_;
}
inline void pszhistoryitem::set_guodi(::google::protobuf::int32 value) {
  set_has_guodi();
  guodi_ = value;
}

// optional int32 presentbout = 3;
inline bool pszhistoryitem::has_presentbout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pszhistoryitem::set_has_presentbout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pszhistoryitem::clear_has_presentbout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pszhistoryitem::clear_presentbout() {
  presentbout_ = 0;
  clear_has_presentbout();
}
inline ::google::protobuf::int32 pszhistoryitem::presentbout() const {
  return presentbout_;
}
inline void pszhistoryitem::set_presentbout(::google::protobuf::int32 value) {
  set_has_presentbout();
  presentbout_ = value;
}

// optional int32 oncepour = 4;
inline bool pszhistoryitem::has_oncepour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pszhistoryitem::set_has_oncepour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pszhistoryitem::clear_has_oncepour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pszhistoryitem::clear_oncepour() {
  oncepour_ = 0;
  clear_has_oncepour();
}
inline ::google::protobuf::int32 pszhistoryitem::oncepour() const {
  return oncepour_;
}
inline void pszhistoryitem::set_oncepour(::google::protobuf::int32 value) {
  set_has_oncepour();
  oncepour_ = value;
}

// optional int32 winerid = 5;
inline bool pszhistoryitem::has_winerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pszhistoryitem::set_has_winerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pszhistoryitem::clear_has_winerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pszhistoryitem::clear_winerid() {
  winerid_ = 0;
  clear_has_winerid();
}
inline ::google::protobuf::int32 pszhistoryitem::winerid() const {
  return winerid_;
}
inline void pszhistoryitem::set_winerid(::google::protobuf::int32 value) {
  set_has_winerid();
  winerid_ = value;
}

// repeated int32 useridlist = 6;
inline int pszhistoryitem::useridlist_size() const {
  return useridlist_.size();
}
inline void pszhistoryitem::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 pszhistoryitem::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void pszhistoryitem::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void pszhistoryitem::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhistoryitem::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhistoryitem::mutable_useridlist() {
  return &useridlist_;
}

// repeated string nicklist = 7;
inline int pszhistoryitem::nicklist_size() const {
  return nicklist_.size();
}
inline void pszhistoryitem::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& pszhistoryitem::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* pszhistoryitem::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void pszhistoryitem::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void pszhistoryitem::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void pszhistoryitem::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pszhistoryitem::add_nicklist() {
  return nicklist_.Add();
}
inline void pszhistoryitem::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void pszhistoryitem::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void pszhistoryitem::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pszhistoryitem::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pszhistoryitem::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 jetton = 8;
inline int pszhistoryitem::jetton_size() const {
  return jetton_.size();
}
inline void pszhistoryitem::clear_jetton() {
  jetton_.Clear();
}
inline ::google::protobuf::int32 pszhistoryitem::jetton(int index) const {
  return jetton_.Get(index);
}
inline void pszhistoryitem::set_jetton(int index, ::google::protobuf::int32 value) {
  jetton_.Set(index, value);
}
inline void pszhistoryitem::add_jetton(::google::protobuf::int32 value) {
  jetton_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhistoryitem::jetton() const {
  return jetton_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhistoryitem::mutable_jetton() {
  return &jetton_;
}

// repeated .progame.pszhandpoker pokerlist = 9;
inline int pszhistoryitem::pokerlist_size() const {
  return pokerlist_.size();
}
inline void pszhistoryitem::clear_pokerlist() {
  pokerlist_.Clear();
}
inline const ::progame::pszhandpoker& pszhistoryitem::pokerlist(int index) const {
  return pokerlist_.Get(index);
}
inline ::progame::pszhandpoker* pszhistoryitem::mutable_pokerlist(int index) {
  return pokerlist_.Mutable(index);
}
inline ::progame::pszhandpoker* pszhistoryitem::add_pokerlist() {
  return pokerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::pszhandpoker >&
pszhistoryitem::pokerlist() const {
  return pokerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::pszhandpoker >*
pszhistoryitem::mutable_pokerlist() {
  return &pokerlist_;
}

// repeated int32 psztypelist = 10;
inline int pszhistoryitem::psztypelist_size() const {
  return psztypelist_.size();
}
inline void pszhistoryitem::clear_psztypelist() {
  psztypelist_.Clear();
}
inline ::google::protobuf::int32 pszhistoryitem::psztypelist(int index) const {
  return psztypelist_.Get(index);
}
inline void pszhistoryitem::set_psztypelist(int index, ::google::protobuf::int32 value) {
  psztypelist_.Set(index, value);
}
inline void pszhistoryitem::add_psztypelist(::google::protobuf::int32 value) {
  psztypelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhistoryitem::psztypelist() const {
  return psztypelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhistoryitem::mutable_psztypelist() {
  return &psztypelist_;
}

// repeated int32 winlist = 11;
inline int pszhistoryitem::winlist_size() const {
  return winlist_.size();
}
inline void pszhistoryitem::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 pszhistoryitem::winlist(int index) const {
  return winlist_.Get(index);
}
inline void pszhistoryitem::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void pszhistoryitem::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhistoryitem::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhistoryitem::mutable_winlist() {
  return &winlist_;
}

// repeated int32 resultlist = 17;
inline int pszhistoryitem::resultlist_size() const {
  return resultlist_.size();
}
inline void pszhistoryitem::clear_resultlist() {
  resultlist_.Clear();
}
inline ::google::protobuf::int32 pszhistoryitem::resultlist(int index) const {
  return resultlist_.Get(index);
}
inline void pszhistoryitem::set_resultlist(int index, ::google::protobuf::int32 value) {
  resultlist_.Set(index, value);
}
inline void pszhistoryitem::add_resultlist(::google::protobuf::int32 value) {
  resultlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhistoryitem::resultlist() const {
  return resultlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhistoryitem::mutable_resultlist() {
  return &resultlist_;
}

// -------------------------------------------------------------------

// pszhistory

// optional int32 tableid = 1;
inline bool pszhistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pszhistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pszhistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pszhistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 pszhistory::tableid() const {
  return tableid_;
}
inline void pszhistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 playnummax = 2;
inline bool pszhistory::has_playnummax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pszhistory::set_has_playnummax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pszhistory::clear_has_playnummax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pszhistory::clear_playnummax() {
  playnummax_ = 0;
  clear_has_playnummax();
}
inline ::google::protobuf::int32 pszhistory::playnummax() const {
  return playnummax_;
}
inline void pszhistory::set_playnummax(::google::protobuf::int32 value) {
  set_has_playnummax();
  playnummax_ = value;
}

// optional int32 playnum = 3;
inline bool pszhistory::has_playnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pszhistory::set_has_playnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pszhistory::clear_has_playnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pszhistory::clear_playnum() {
  playnum_ = 0;
  clear_has_playnum();
}
inline ::google::protobuf::int32 pszhistory::playnum() const {
  return playnum_;
}
inline void pszhistory::set_playnum(::google::protobuf::int32 value) {
  set_has_playnum();
  playnum_ = value;
}

// optional int32 difen = 4;
inline bool pszhistory::has_difen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pszhistory::set_has_difen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pszhistory::clear_has_difen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pszhistory::clear_difen() {
  difen_ = 0;
  clear_has_difen();
}
inline ::google::protobuf::int32 pszhistory::difen() const {
  return difen_;
}
inline void pszhistory::set_difen(::google::protobuf::int32 value) {
  set_has_difen();
  difen_ = value;
}

// optional int32 gametime = 6;
inline bool pszhistory::has_gametime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pszhistory::set_has_gametime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pszhistory::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pszhistory::clear_gametime() {
  gametime_ = 0;
  clear_has_gametime();
}
inline ::google::protobuf::int32 pszhistory::gametime() const {
  return gametime_;
}
inline void pszhistory::set_gametime(::google::protobuf::int32 value) {
  set_has_gametime();
  gametime_ = value;
}

// optional int32 ownerid = 7;
inline bool pszhistory::has_ownerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pszhistory::set_has_ownerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void pszhistory::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void pszhistory::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 pszhistory::ownerid() const {
  return ownerid_;
}
inline void pszhistory::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// repeated string nicklist = 8;
inline int pszhistory::nicklist_size() const {
  return nicklist_.size();
}
inline void pszhistory::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& pszhistory::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* pszhistory::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void pszhistory::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void pszhistory::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void pszhistory::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pszhistory::add_nicklist() {
  return nicklist_.Add();
}
inline void pszhistory::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void pszhistory::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void pszhistory::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
pszhistory::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
pszhistory::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 useridlist = 9;
inline int pszhistory::useridlist_size() const {
  return useridlist_.size();
}
inline void pszhistory::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 pszhistory::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void pszhistory::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void pszhistory::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhistory::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhistory::mutable_useridlist() {
  return &useridlist_;
}

// repeated int32 winlist = 10;
inline int pszhistory::winlist_size() const {
  return winlist_.size();
}
inline void pszhistory::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 pszhistory::winlist(int index) const {
  return winlist_.Get(index);
}
inline void pszhistory::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void pszhistory::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pszhistory::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pszhistory::mutable_winlist() {
  return &winlist_;
}

// repeated .progame.pszhistoryitem hitemlist = 11;
inline int pszhistory::hitemlist_size() const {
  return hitemlist_.size();
}
inline void pszhistory::clear_hitemlist() {
  hitemlist_.Clear();
}
inline const ::progame::pszhistoryitem& pszhistory::hitemlist(int index) const {
  return hitemlist_.Get(index);
}
inline ::progame::pszhistoryitem* pszhistory::mutable_hitemlist(int index) {
  return hitemlist_.Mutable(index);
}
inline ::progame::pszhistoryitem* pszhistory::add_hitemlist() {
  return hitemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::pszhistoryitem >&
pszhistory::hitemlist() const {
  return hitemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::pszhistoryitem >*
pszhistory::mutable_hitemlist() {
  return &hitemlist_;
}

// -------------------------------------------------------------------

// pszcomparepoker

// optional int32 winnerid = 1;
inline bool pszcomparepoker::has_winnerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pszcomparepoker::set_has_winnerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pszcomparepoker::clear_has_winnerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pszcomparepoker::clear_winnerid() {
  winnerid_ = 0;
  clear_has_winnerid();
}
inline ::google::protobuf::int32 pszcomparepoker::winnerid() const {
  return winnerid_;
}
inline void pszcomparepoker::set_winnerid(::google::protobuf::int32 value) {
  set_has_winnerid();
  winnerid_ = value;
}

// optional int32 loserid = 2;
inline bool pszcomparepoker::has_loserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pszcomparepoker::set_has_loserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pszcomparepoker::clear_has_loserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pszcomparepoker::clear_loserid() {
  loserid_ = 0;
  clear_has_loserid();
}
inline ::google::protobuf::int32 pszcomparepoker::loserid() const {
  return loserid_;
}
inline void pszcomparepoker::set_loserid(::google::protobuf::int32 value) {
  set_has_loserid();
  loserid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fpsz_2eproto__INCLUDED
