// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_shop.proto

#ifndef PROTOBUF_st_5fshop_2eproto__INCLUDED
#define PROTOBUF_st_5fshop_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fshop_2eproto();
void protobuf_AssignDesc_st_5fshop_2eproto();
void protobuf_ShutdownFile_st_5fshop_2eproto();

class payinfo;
class buymoneyinfo;
class convertinfo;
class convertlog;
class shopconfinfo;

// ===================================================================

class payinfo : public ::google::protobuf::Message {
 public:
  payinfo();
  virtual ~payinfo();

  payinfo(const payinfo& from);

  inline payinfo& operator=(const payinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const payinfo& default_instance();

  void Swap(payinfo* other);

  // implements Message ----------------------------------------------

  payinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const payinfo& from);
  void MergeFrom(const payinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 payid = 1;
  inline bool has_payid() const;
  inline void clear_payid();
  static const int kPayidFieldNumber = 1;
  inline ::google::protobuf::int32 payid() const;
  inline void set_payid(::google::protobuf::int32 value);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional int32 paymoney = 3;
  inline bool has_paymoney() const;
  inline void clear_paymoney();
  static const int kPaymoneyFieldNumber = 3;
  inline ::google::protobuf::int32 paymoney() const;
  inline void set_paymoney(::google::protobuf::int32 value);

  // optional int32 getmoney = 4;
  inline bool has_getmoney() const;
  inline void clear_getmoney();
  static const int kGetmoneyFieldNumber = 4;
  inline ::google::protobuf::int32 getmoney() const;
  inline void set_getmoney(::google::protobuf::int32 value);

  // optional int32 addtype = 5;
  inline bool has_addtype() const;
  inline void clear_addtype();
  static const int kAddtypeFieldNumber = 5;
  inline ::google::protobuf::int32 addtype() const;
  inline void set_addtype(::google::protobuf::int32 value);

  // optional int32 addamount = 6;
  inline bool has_addamount() const;
  inline void clear_addamount();
  static const int kAddamountFieldNumber = 6;
  inline ::google::protobuf::int32 addamount() const;
  inline void set_addamount(::google::protobuf::int32 value);

  // optional string adddes = 7;
  inline bool has_adddes() const;
  inline void clear_adddes();
  static const int kAdddesFieldNumber = 7;
  inline const ::std::string& adddes() const;
  inline void set_adddes(const ::std::string& value);
  inline void set_adddes(const char* value);
  inline void set_adddes(const char* value, size_t size);
  inline ::std::string* mutable_adddes();
  inline ::std::string* release_adddes();
  inline void set_allocated_adddes(::std::string* adddes);

  // optional int32 addtime = 8;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 8;
  inline ::google::protobuf::int32 addtime() const;
  inline void set_addtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.payinfo)
 private:
  inline void set_has_payid();
  inline void clear_has_payid();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_paymoney();
  inline void clear_has_paymoney();
  inline void set_has_getmoney();
  inline void clear_has_getmoney();
  inline void set_has_addtype();
  inline void clear_has_addtype();
  inline void set_has_addamount();
  inline void clear_has_addamount();
  inline void set_has_adddes();
  inline void clear_has_adddes();
  inline void set_has_addtime();
  inline void clear_has_addtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* description_;
  ::google::protobuf::int32 payid_;
  ::google::protobuf::int32 paymoney_;
  ::google::protobuf::int32 getmoney_;
  ::google::protobuf::int32 addtype_;
  ::std::string* adddes_;
  ::google::protobuf::int32 addamount_;
  ::google::protobuf::int32 addtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fshop_2eproto();
  friend void protobuf_AssignDesc_st_5fshop_2eproto();
  friend void protobuf_ShutdownFile_st_5fshop_2eproto();

  void InitAsDefaultInstance();
  static payinfo* default_instance_;
};
// -------------------------------------------------------------------

class buymoneyinfo : public ::google::protobuf::Message {
 public:
  buymoneyinfo();
  virtual ~buymoneyinfo();

  buymoneyinfo(const buymoneyinfo& from);

  inline buymoneyinfo& operator=(const buymoneyinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const buymoneyinfo& default_instance();

  void Swap(buymoneyinfo* other);

  // implements Message ----------------------------------------------

  buymoneyinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const buymoneyinfo& from);
  void MergeFrom(const buymoneyinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 orderid = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 1;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 buyid = 3;
  inline bool has_buyid() const;
  inline void clear_buyid();
  static const int kBuyidFieldNumber = 3;
  inline ::google::protobuf::int32 buyid() const;
  inline void set_buyid(::google::protobuf::int32 value);

  // optional int32 timeid = 4;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeidFieldNumber = 4;
  inline ::google::protobuf::int32 timeid() const;
  inline void set_timeid(::google::protobuf::int32 value);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string channel = 6;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 6;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional string sign = 7;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 7;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional int32 shoptype = 8;
  inline bool has_shoptype() const;
  inline void clear_shoptype();
  static const int kShoptypeFieldNumber = 8;
  inline ::google::protobuf::int32 shoptype() const;
  inline void set_shoptype(::google::protobuf::int32 value);

  // optional int32 paymoney = 9;
  inline bool has_paymoney() const;
  inline void clear_paymoney();
  static const int kPaymoneyFieldNumber = 9;
  inline ::google::protobuf::int32 paymoney() const;
  inline void set_paymoney(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.buymoneyinfo)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_buyid();
  inline void clear_has_buyid();
  inline void set_has_timeid();
  inline void clear_has_timeid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_shoptype();
  inline void clear_has_shoptype();
  inline void set_has_paymoney();
  inline void clear_has_paymoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 buyid_;
  ::google::protobuf::int32 timeid_;
  ::std::string* channel_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 shoptype_;
  ::std::string* sign_;
  ::google::protobuf::int32 paymoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fshop_2eproto();
  friend void protobuf_AssignDesc_st_5fshop_2eproto();
  friend void protobuf_ShutdownFile_st_5fshop_2eproto();

  void InitAsDefaultInstance();
  static buymoneyinfo* default_instance_;
};
// -------------------------------------------------------------------

class convertinfo : public ::google::protobuf::Message {
 public:
  convertinfo();
  virtual ~convertinfo();

  convertinfo(const convertinfo& from);

  inline convertinfo& operator=(const convertinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const convertinfo& default_instance();

  void Swap(convertinfo* other);

  // implements Message ----------------------------------------------

  convertinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const convertinfo& from);
  void MergeFrom(const convertinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string phone = 3;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 3;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional string address1 = 4;
  inline bool has_address1() const;
  inline void clear_address1();
  static const int kAddress1FieldNumber = 4;
  inline const ::std::string& address1() const;
  inline void set_address1(const ::std::string& value);
  inline void set_address1(const char* value);
  inline void set_address1(const char* value, size_t size);
  inline ::std::string* mutable_address1();
  inline ::std::string* release_address1();
  inline void set_allocated_address1(::std::string* address1);

  // optional string address2 = 5;
  inline bool has_address2() const;
  inline void clear_address2();
  static const int kAddress2FieldNumber = 5;
  inline const ::std::string& address2() const;
  inline void set_address2(const ::std::string& value);
  inline void set_address2(const char* value);
  inline void set_address2(const char* value, size_t size);
  inline ::std::string* mutable_address2();
  inline ::std::string* release_address2();
  inline void set_allocated_address2(::std::string* address2);

  // optional string address3 = 6;
  inline bool has_address3() const;
  inline void clear_address3();
  static const int kAddress3FieldNumber = 6;
  inline const ::std::string& address3() const;
  inline void set_address3(const ::std::string& value);
  inline void set_address3(const char* value);
  inline void set_address3(const char* value, size_t size);
  inline ::std::string* mutable_address3();
  inline ::std::string* release_address3();
  inline void set_allocated_address3(::std::string* address3);

  // optional int32 addselect = 7;
  inline bool has_addselect() const;
  inline void clear_addselect();
  static const int kAddselectFieldNumber = 7;
  inline ::google::protobuf::int32 addselect() const;
  inline void set_addselect(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.convertinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_address1();
  inline void clear_has_address1();
  inline void set_has_address2();
  inline void clear_has_address2();
  inline void set_has_address3();
  inline void clear_has_address3();
  inline void set_has_addselect();
  inline void clear_has_addselect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* phone_;
  ::std::string* address1_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 addselect_;
  ::std::string* address2_;
  ::std::string* address3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fshop_2eproto();
  friend void protobuf_AssignDesc_st_5fshop_2eproto();
  friend void protobuf_ShutdownFile_st_5fshop_2eproto();

  void InitAsDefaultInstance();
  static convertinfo* default_instance_;
};
// -------------------------------------------------------------------

class convertlog : public ::google::protobuf::Message {
 public:
  convertlog();
  virtual ~convertlog();

  convertlog(const convertlog& from);

  inline convertlog& operator=(const convertlog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const convertlog& default_instance();

  void Swap(convertlog* other);

  // implements Message ----------------------------------------------

  convertlog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const convertlog& from);
  void MergeFrom(const convertlog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 convertid = 3;
  inline bool has_convertid() const;
  inline void clear_convertid();
  static const int kConvertidFieldNumber = 3;
  inline ::google::protobuf::int32 convertid() const;
  inline void set_convertid(::google::protobuf::int32 value);

  // optional string convertname = 4;
  inline bool has_convertname() const;
  inline void clear_convertname();
  static const int kConvertnameFieldNumber = 4;
  inline const ::std::string& convertname() const;
  inline void set_convertname(const ::std::string& value);
  inline void set_convertname(const char* value);
  inline void set_convertname(const char* value, size_t size);
  inline ::std::string* mutable_convertname();
  inline ::std::string* release_convertname();
  inline void set_allocated_convertname(::std::string* convertname);

  // optional int32 convertnum = 5;
  inline bool has_convertnum() const;
  inline void clear_convertnum();
  static const int kConvertnumFieldNumber = 5;
  inline ::google::protobuf::int32 convertnum() const;
  inline void set_convertnum(::google::protobuf::int32 value);

  // optional int32 paytype = 6;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPaytypeFieldNumber = 6;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);

  // optional int32 paynum = 7;
  inline bool has_paynum() const;
  inline void clear_paynum();
  static const int kPaynumFieldNumber = 7;
  inline ::google::protobuf::int32 paynum() const;
  inline void set_paynum(::google::protobuf::int32 value);

  // optional string addname = 8;
  inline bool has_addname() const;
  inline void clear_addname();
  static const int kAddnameFieldNumber = 8;
  inline const ::std::string& addname() const;
  inline void set_addname(const ::std::string& value);
  inline void set_addname(const char* value);
  inline void set_addname(const char* value, size_t size);
  inline ::std::string* mutable_addname();
  inline ::std::string* release_addname();
  inline void set_allocated_addname(::std::string* addname);

  // optional string addphone = 9;
  inline bool has_addphone() const;
  inline void clear_addphone();
  static const int kAddphoneFieldNumber = 9;
  inline const ::std::string& addphone() const;
  inline void set_addphone(const ::std::string& value);
  inline void set_addphone(const char* value);
  inline void set_addphone(const char* value, size_t size);
  inline ::std::string* mutable_addphone();
  inline ::std::string* release_addphone();
  inline void set_allocated_addphone(::std::string* addphone);

  // optional string address = 10;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 10;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional string timemark = 11;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 11;
  inline const ::std::string& timemark() const;
  inline void set_timemark(const ::std::string& value);
  inline void set_timemark(const char* value);
  inline void set_timemark(const char* value, size_t size);
  inline ::std::string* mutable_timemark();
  inline ::std::string* release_timemark();
  inline void set_allocated_timemark(::std::string* timemark);

  // optional int32 state = 12;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 12;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.convertlog)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_convertid();
  inline void clear_has_convertid();
  inline void set_has_convertname();
  inline void clear_has_convertname();
  inline void set_has_convertnum();
  inline void clear_has_convertnum();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_paynum();
  inline void clear_has_paynum();
  inline void set_has_addname();
  inline void clear_has_addname();
  inline void set_has_addphone();
  inline void clear_has_addphone();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 userid_;
  ::std::string* convertname_;
  ::google::protobuf::int32 convertid_;
  ::google::protobuf::int32 convertnum_;
  ::google::protobuf::int32 paytype_;
  ::google::protobuf::int32 paynum_;
  ::std::string* addname_;
  ::std::string* addphone_;
  ::std::string* address_;
  ::std::string* timemark_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fshop_2eproto();
  friend void protobuf_AssignDesc_st_5fshop_2eproto();
  friend void protobuf_ShutdownFile_st_5fshop_2eproto();

  void InitAsDefaultInstance();
  static convertlog* default_instance_;
};
// -------------------------------------------------------------------

class shopconfinfo : public ::google::protobuf::Message {
 public:
  shopconfinfo();
  virtual ~shopconfinfo();

  shopconfinfo(const shopconfinfo& from);

  inline shopconfinfo& operator=(const shopconfinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shopconfinfo& default_instance();

  void Swap(shopconfinfo* other);

  // implements Message ----------------------------------------------

  shopconfinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shopconfinfo& from);
  void MergeFrom(const shopconfinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 shopid = 2;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopidFieldNumber = 2;
  inline ::google::protobuf::int32 shopid() const;
  inline void set_shopid(::google::protobuf::int32 value);

  // optional int32 shoptype = 3;
  inline bool has_shoptype() const;
  inline void clear_shoptype();
  static const int kShoptypeFieldNumber = 3;
  inline ::google::protobuf::int32 shoptype() const;
  inline void set_shoptype(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string des = 5;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 5;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional int32 minmoney = 6;
  inline bool has_minmoney() const;
  inline void clear_minmoney();
  static const int kMinmoneyFieldNumber = 6;
  inline ::google::protobuf::int32 minmoney() const;
  inline void set_minmoney(::google::protobuf::int32 value);

  // optional int32 maxmoney = 7;
  inline bool has_maxmoney() const;
  inline void clear_maxmoney();
  static const int kMaxmoneyFieldNumber = 7;
  inline ::google::protobuf::int32 maxmoney() const;
  inline void set_maxmoney(::google::protobuf::int32 value);

  // optional int32 iscustom = 8;
  inline bool has_iscustom() const;
  inline void clear_iscustom();
  static const int kIscustomFieldNumber = 8;
  inline ::google::protobuf::int32 iscustom() const;
  inline void set_iscustom(::google::protobuf::int32 value);

  // optional int32 rebate = 9;
  inline bool has_rebate() const;
  inline void clear_rebate();
  static const int kRebateFieldNumber = 9;
  inline ::google::protobuf::int32 rebate() const;
  inline void set_rebate(::google::protobuf::int32 value);

  // repeated int32 normlist = 10;
  inline int normlist_size() const;
  inline void clear_normlist();
  static const int kNormlistFieldNumber = 10;
  inline ::google::protobuf::int32 normlist(int index) const;
  inline void set_normlist(int index, ::google::protobuf::int32 value);
  inline void add_normlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      normlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_normlist();

  // @@protoc_insertion_point(class_scope:progame.shopconfinfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_shoptype();
  inline void clear_has_shoptype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_minmoney();
  inline void clear_has_minmoney();
  inline void set_has_maxmoney();
  inline void clear_has_maxmoney();
  inline void set_has_iscustom();
  inline void clear_has_iscustom();
  inline void set_has_rebate();
  inline void clear_has_rebate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 shopid_;
  ::std::string* name_;
  ::google::protobuf::int32 shoptype_;
  ::google::protobuf::int32 minmoney_;
  ::std::string* des_;
  ::google::protobuf::int32 maxmoney_;
  ::google::protobuf::int32 iscustom_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > normlist_;
  ::google::protobuf::int32 rebate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fshop_2eproto();
  friend void protobuf_AssignDesc_st_5fshop_2eproto();
  friend void protobuf_ShutdownFile_st_5fshop_2eproto();

  void InitAsDefaultInstance();
  static shopconfinfo* default_instance_;
};
// ===================================================================


// ===================================================================

// payinfo

// optional int32 payid = 1;
inline bool payinfo::has_payid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void payinfo::set_has_payid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void payinfo::clear_has_payid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void payinfo::clear_payid() {
  payid_ = 0;
  clear_has_payid();
}
inline ::google::protobuf::int32 payinfo::payid() const {
  return payid_;
}
inline void payinfo::set_payid(::google::protobuf::int32 value) {
  set_has_payid();
  payid_ = value;
}

// optional string description = 2;
inline bool payinfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void payinfo::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void payinfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void payinfo::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& payinfo::description() const {
  return *description_;
}
inline void payinfo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void payinfo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void payinfo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* payinfo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* payinfo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void payinfo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 paymoney = 3;
inline bool payinfo::has_paymoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void payinfo::set_has_paymoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void payinfo::clear_has_paymoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void payinfo::clear_paymoney() {
  paymoney_ = 0;
  clear_has_paymoney();
}
inline ::google::protobuf::int32 payinfo::paymoney() const {
  return paymoney_;
}
inline void payinfo::set_paymoney(::google::protobuf::int32 value) {
  set_has_paymoney();
  paymoney_ = value;
}

// optional int32 getmoney = 4;
inline bool payinfo::has_getmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void payinfo::set_has_getmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void payinfo::clear_has_getmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void payinfo::clear_getmoney() {
  getmoney_ = 0;
  clear_has_getmoney();
}
inline ::google::protobuf::int32 payinfo::getmoney() const {
  return getmoney_;
}
inline void payinfo::set_getmoney(::google::protobuf::int32 value) {
  set_has_getmoney();
  getmoney_ = value;
}

// optional int32 addtype = 5;
inline bool payinfo::has_addtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void payinfo::set_has_addtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void payinfo::clear_has_addtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void payinfo::clear_addtype() {
  addtype_ = 0;
  clear_has_addtype();
}
inline ::google::protobuf::int32 payinfo::addtype() const {
  return addtype_;
}
inline void payinfo::set_addtype(::google::protobuf::int32 value) {
  set_has_addtype();
  addtype_ = value;
}

// optional int32 addamount = 6;
inline bool payinfo::has_addamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void payinfo::set_has_addamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void payinfo::clear_has_addamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void payinfo::clear_addamount() {
  addamount_ = 0;
  clear_has_addamount();
}
inline ::google::protobuf::int32 payinfo::addamount() const {
  return addamount_;
}
inline void payinfo::set_addamount(::google::protobuf::int32 value) {
  set_has_addamount();
  addamount_ = value;
}

// optional string adddes = 7;
inline bool payinfo::has_adddes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void payinfo::set_has_adddes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void payinfo::clear_has_adddes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void payinfo::clear_adddes() {
  if (adddes_ != &::google::protobuf::internal::kEmptyString) {
    adddes_->clear();
  }
  clear_has_adddes();
}
inline const ::std::string& payinfo::adddes() const {
  return *adddes_;
}
inline void payinfo::set_adddes(const ::std::string& value) {
  set_has_adddes();
  if (adddes_ == &::google::protobuf::internal::kEmptyString) {
    adddes_ = new ::std::string;
  }
  adddes_->assign(value);
}
inline void payinfo::set_adddes(const char* value) {
  set_has_adddes();
  if (adddes_ == &::google::protobuf::internal::kEmptyString) {
    adddes_ = new ::std::string;
  }
  adddes_->assign(value);
}
inline void payinfo::set_adddes(const char* value, size_t size) {
  set_has_adddes();
  if (adddes_ == &::google::protobuf::internal::kEmptyString) {
    adddes_ = new ::std::string;
  }
  adddes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* payinfo::mutable_adddes() {
  set_has_adddes();
  if (adddes_ == &::google::protobuf::internal::kEmptyString) {
    adddes_ = new ::std::string;
  }
  return adddes_;
}
inline ::std::string* payinfo::release_adddes() {
  clear_has_adddes();
  if (adddes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adddes_;
    adddes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void payinfo::set_allocated_adddes(::std::string* adddes) {
  if (adddes_ != &::google::protobuf::internal::kEmptyString) {
    delete adddes_;
  }
  if (adddes) {
    set_has_adddes();
    adddes_ = adddes;
  } else {
    clear_has_adddes();
    adddes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 addtime = 8;
inline bool payinfo::has_addtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void payinfo::set_has_addtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void payinfo::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void payinfo::clear_addtime() {
  addtime_ = 0;
  clear_has_addtime();
}
inline ::google::protobuf::int32 payinfo::addtime() const {
  return addtime_;
}
inline void payinfo::set_addtime(::google::protobuf::int32 value) {
  set_has_addtime();
  addtime_ = value;
}

// -------------------------------------------------------------------

// buymoneyinfo

// optional int32 orderid = 1;
inline bool buymoneyinfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void buymoneyinfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void buymoneyinfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void buymoneyinfo::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 buymoneyinfo::orderid() const {
  return orderid_;
}
inline void buymoneyinfo::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
}

// optional int32 userid = 2;
inline bool buymoneyinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void buymoneyinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void buymoneyinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void buymoneyinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 buymoneyinfo::userid() const {
  return userid_;
}
inline void buymoneyinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 buyid = 3;
inline bool buymoneyinfo::has_buyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void buymoneyinfo::set_has_buyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void buymoneyinfo::clear_has_buyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void buymoneyinfo::clear_buyid() {
  buyid_ = 0;
  clear_has_buyid();
}
inline ::google::protobuf::int32 buymoneyinfo::buyid() const {
  return buyid_;
}
inline void buymoneyinfo::set_buyid(::google::protobuf::int32 value) {
  set_has_buyid();
  buyid_ = value;
}

// optional int32 timeid = 4;
inline bool buymoneyinfo::has_timeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void buymoneyinfo::set_has_timeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void buymoneyinfo::clear_has_timeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void buymoneyinfo::clear_timeid() {
  timeid_ = 0;
  clear_has_timeid();
}
inline ::google::protobuf::int32 buymoneyinfo::timeid() const {
  return timeid_;
}
inline void buymoneyinfo::set_timeid(::google::protobuf::int32 value) {
  set_has_timeid();
  timeid_ = value;
}

// optional int32 status = 5;
inline bool buymoneyinfo::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void buymoneyinfo::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void buymoneyinfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void buymoneyinfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 buymoneyinfo::status() const {
  return status_;
}
inline void buymoneyinfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string channel = 6;
inline bool buymoneyinfo::has_channel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void buymoneyinfo::set_has_channel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void buymoneyinfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void buymoneyinfo::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& buymoneyinfo::channel() const {
  return *channel_;
}
inline void buymoneyinfo::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void buymoneyinfo::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void buymoneyinfo::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* buymoneyinfo::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* buymoneyinfo::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void buymoneyinfo::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 7;
inline bool buymoneyinfo::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void buymoneyinfo::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void buymoneyinfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void buymoneyinfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& buymoneyinfo::sign() const {
  return *sign_;
}
inline void buymoneyinfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void buymoneyinfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void buymoneyinfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* buymoneyinfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* buymoneyinfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void buymoneyinfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 shoptype = 8;
inline bool buymoneyinfo::has_shoptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void buymoneyinfo::set_has_shoptype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void buymoneyinfo::clear_has_shoptype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void buymoneyinfo::clear_shoptype() {
  shoptype_ = 0;
  clear_has_shoptype();
}
inline ::google::protobuf::int32 buymoneyinfo::shoptype() const {
  return shoptype_;
}
inline void buymoneyinfo::set_shoptype(::google::protobuf::int32 value) {
  set_has_shoptype();
  shoptype_ = value;
}

// optional int32 paymoney = 9;
inline bool buymoneyinfo::has_paymoney() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void buymoneyinfo::set_has_paymoney() {
  _has_bits_[0] |= 0x00000100u;
}
inline void buymoneyinfo::clear_has_paymoney() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void buymoneyinfo::clear_paymoney() {
  paymoney_ = 0;
  clear_has_paymoney();
}
inline ::google::protobuf::int32 buymoneyinfo::paymoney() const {
  return paymoney_;
}
inline void buymoneyinfo::set_paymoney(::google::protobuf::int32 value) {
  set_has_paymoney();
  paymoney_ = value;
}

// -------------------------------------------------------------------

// convertinfo

// optional int32 userid = 1;
inline bool convertinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void convertinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void convertinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void convertinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 convertinfo::userid() const {
  return userid_;
}
inline void convertinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string name = 2;
inline bool convertinfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void convertinfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void convertinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void convertinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& convertinfo::name() const {
  return *name_;
}
inline void convertinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void convertinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void convertinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* convertinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertinfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone = 3;
inline bool convertinfo::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void convertinfo::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void convertinfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void convertinfo::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& convertinfo::phone() const {
  return *phone_;
}
inline void convertinfo::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void convertinfo::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void convertinfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertinfo::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* convertinfo::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertinfo::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address1 = 4;
inline bool convertinfo::has_address1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void convertinfo::set_has_address1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void convertinfo::clear_has_address1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void convertinfo::clear_address1() {
  if (address1_ != &::google::protobuf::internal::kEmptyString) {
    address1_->clear();
  }
  clear_has_address1();
}
inline const ::std::string& convertinfo::address1() const {
  return *address1_;
}
inline void convertinfo::set_address1(const ::std::string& value) {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  address1_->assign(value);
}
inline void convertinfo::set_address1(const char* value) {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  address1_->assign(value);
}
inline void convertinfo::set_address1(const char* value, size_t size) {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  address1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertinfo::mutable_address1() {
  set_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    address1_ = new ::std::string;
  }
  return address1_;
}
inline ::std::string* convertinfo::release_address1() {
  clear_has_address1();
  if (address1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address1_;
    address1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertinfo::set_allocated_address1(::std::string* address1) {
  if (address1_ != &::google::protobuf::internal::kEmptyString) {
    delete address1_;
  }
  if (address1) {
    set_has_address1();
    address1_ = address1;
  } else {
    clear_has_address1();
    address1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address2 = 5;
inline bool convertinfo::has_address2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void convertinfo::set_has_address2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void convertinfo::clear_has_address2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void convertinfo::clear_address2() {
  if (address2_ != &::google::protobuf::internal::kEmptyString) {
    address2_->clear();
  }
  clear_has_address2();
}
inline const ::std::string& convertinfo::address2() const {
  return *address2_;
}
inline void convertinfo::set_address2(const ::std::string& value) {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  address2_->assign(value);
}
inline void convertinfo::set_address2(const char* value) {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  address2_->assign(value);
}
inline void convertinfo::set_address2(const char* value, size_t size) {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  address2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertinfo::mutable_address2() {
  set_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    address2_ = new ::std::string;
  }
  return address2_;
}
inline ::std::string* convertinfo::release_address2() {
  clear_has_address2();
  if (address2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address2_;
    address2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertinfo::set_allocated_address2(::std::string* address2) {
  if (address2_ != &::google::protobuf::internal::kEmptyString) {
    delete address2_;
  }
  if (address2) {
    set_has_address2();
    address2_ = address2;
  } else {
    clear_has_address2();
    address2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address3 = 6;
inline bool convertinfo::has_address3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void convertinfo::set_has_address3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void convertinfo::clear_has_address3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void convertinfo::clear_address3() {
  if (address3_ != &::google::protobuf::internal::kEmptyString) {
    address3_->clear();
  }
  clear_has_address3();
}
inline const ::std::string& convertinfo::address3() const {
  return *address3_;
}
inline void convertinfo::set_address3(const ::std::string& value) {
  set_has_address3();
  if (address3_ == &::google::protobuf::internal::kEmptyString) {
    address3_ = new ::std::string;
  }
  address3_->assign(value);
}
inline void convertinfo::set_address3(const char* value) {
  set_has_address3();
  if (address3_ == &::google::protobuf::internal::kEmptyString) {
    address3_ = new ::std::string;
  }
  address3_->assign(value);
}
inline void convertinfo::set_address3(const char* value, size_t size) {
  set_has_address3();
  if (address3_ == &::google::protobuf::internal::kEmptyString) {
    address3_ = new ::std::string;
  }
  address3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertinfo::mutable_address3() {
  set_has_address3();
  if (address3_ == &::google::protobuf::internal::kEmptyString) {
    address3_ = new ::std::string;
  }
  return address3_;
}
inline ::std::string* convertinfo::release_address3() {
  clear_has_address3();
  if (address3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address3_;
    address3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertinfo::set_allocated_address3(::std::string* address3) {
  if (address3_ != &::google::protobuf::internal::kEmptyString) {
    delete address3_;
  }
  if (address3) {
    set_has_address3();
    address3_ = address3;
  } else {
    clear_has_address3();
    address3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 addselect = 7;
inline bool convertinfo::has_addselect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void convertinfo::set_has_addselect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void convertinfo::clear_has_addselect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void convertinfo::clear_addselect() {
  addselect_ = 0;
  clear_has_addselect();
}
inline ::google::protobuf::int32 convertinfo::addselect() const {
  return addselect_;
}
inline void convertinfo::set_addselect(::google::protobuf::int32 value) {
  set_has_addselect();
  addselect_ = value;
}

// -------------------------------------------------------------------

// convertlog

// optional int32 id = 1;
inline bool convertlog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void convertlog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void convertlog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void convertlog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 convertlog::id() const {
  return id_;
}
inline void convertlog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool convertlog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void convertlog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void convertlog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void convertlog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 convertlog::userid() const {
  return userid_;
}
inline void convertlog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 convertid = 3;
inline bool convertlog::has_convertid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void convertlog::set_has_convertid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void convertlog::clear_has_convertid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void convertlog::clear_convertid() {
  convertid_ = 0;
  clear_has_convertid();
}
inline ::google::protobuf::int32 convertlog::convertid() const {
  return convertid_;
}
inline void convertlog::set_convertid(::google::protobuf::int32 value) {
  set_has_convertid();
  convertid_ = value;
}

// optional string convertname = 4;
inline bool convertlog::has_convertname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void convertlog::set_has_convertname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void convertlog::clear_has_convertname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void convertlog::clear_convertname() {
  if (convertname_ != &::google::protobuf::internal::kEmptyString) {
    convertname_->clear();
  }
  clear_has_convertname();
}
inline const ::std::string& convertlog::convertname() const {
  return *convertname_;
}
inline void convertlog::set_convertname(const ::std::string& value) {
  set_has_convertname();
  if (convertname_ == &::google::protobuf::internal::kEmptyString) {
    convertname_ = new ::std::string;
  }
  convertname_->assign(value);
}
inline void convertlog::set_convertname(const char* value) {
  set_has_convertname();
  if (convertname_ == &::google::protobuf::internal::kEmptyString) {
    convertname_ = new ::std::string;
  }
  convertname_->assign(value);
}
inline void convertlog::set_convertname(const char* value, size_t size) {
  set_has_convertname();
  if (convertname_ == &::google::protobuf::internal::kEmptyString) {
    convertname_ = new ::std::string;
  }
  convertname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertlog::mutable_convertname() {
  set_has_convertname();
  if (convertname_ == &::google::protobuf::internal::kEmptyString) {
    convertname_ = new ::std::string;
  }
  return convertname_;
}
inline ::std::string* convertlog::release_convertname() {
  clear_has_convertname();
  if (convertname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = convertname_;
    convertname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertlog::set_allocated_convertname(::std::string* convertname) {
  if (convertname_ != &::google::protobuf::internal::kEmptyString) {
    delete convertname_;
  }
  if (convertname) {
    set_has_convertname();
    convertname_ = convertname;
  } else {
    clear_has_convertname();
    convertname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 convertnum = 5;
inline bool convertlog::has_convertnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void convertlog::set_has_convertnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void convertlog::clear_has_convertnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void convertlog::clear_convertnum() {
  convertnum_ = 0;
  clear_has_convertnum();
}
inline ::google::protobuf::int32 convertlog::convertnum() const {
  return convertnum_;
}
inline void convertlog::set_convertnum(::google::protobuf::int32 value) {
  set_has_convertnum();
  convertnum_ = value;
}

// optional int32 paytype = 6;
inline bool convertlog::has_paytype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void convertlog::set_has_paytype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void convertlog::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void convertlog::clear_paytype() {
  paytype_ = 0;
  clear_has_paytype();
}
inline ::google::protobuf::int32 convertlog::paytype() const {
  return paytype_;
}
inline void convertlog::set_paytype(::google::protobuf::int32 value) {
  set_has_paytype();
  paytype_ = value;
}

// optional int32 paynum = 7;
inline bool convertlog::has_paynum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void convertlog::set_has_paynum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void convertlog::clear_has_paynum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void convertlog::clear_paynum() {
  paynum_ = 0;
  clear_has_paynum();
}
inline ::google::protobuf::int32 convertlog::paynum() const {
  return paynum_;
}
inline void convertlog::set_paynum(::google::protobuf::int32 value) {
  set_has_paynum();
  paynum_ = value;
}

// optional string addname = 8;
inline bool convertlog::has_addname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void convertlog::set_has_addname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void convertlog::clear_has_addname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void convertlog::clear_addname() {
  if (addname_ != &::google::protobuf::internal::kEmptyString) {
    addname_->clear();
  }
  clear_has_addname();
}
inline const ::std::string& convertlog::addname() const {
  return *addname_;
}
inline void convertlog::set_addname(const ::std::string& value) {
  set_has_addname();
  if (addname_ == &::google::protobuf::internal::kEmptyString) {
    addname_ = new ::std::string;
  }
  addname_->assign(value);
}
inline void convertlog::set_addname(const char* value) {
  set_has_addname();
  if (addname_ == &::google::protobuf::internal::kEmptyString) {
    addname_ = new ::std::string;
  }
  addname_->assign(value);
}
inline void convertlog::set_addname(const char* value, size_t size) {
  set_has_addname();
  if (addname_ == &::google::protobuf::internal::kEmptyString) {
    addname_ = new ::std::string;
  }
  addname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertlog::mutable_addname() {
  set_has_addname();
  if (addname_ == &::google::protobuf::internal::kEmptyString) {
    addname_ = new ::std::string;
  }
  return addname_;
}
inline ::std::string* convertlog::release_addname() {
  clear_has_addname();
  if (addname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addname_;
    addname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertlog::set_allocated_addname(::std::string* addname) {
  if (addname_ != &::google::protobuf::internal::kEmptyString) {
    delete addname_;
  }
  if (addname) {
    set_has_addname();
    addname_ = addname;
  } else {
    clear_has_addname();
    addname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string addphone = 9;
inline bool convertlog::has_addphone() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void convertlog::set_has_addphone() {
  _has_bits_[0] |= 0x00000100u;
}
inline void convertlog::clear_has_addphone() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void convertlog::clear_addphone() {
  if (addphone_ != &::google::protobuf::internal::kEmptyString) {
    addphone_->clear();
  }
  clear_has_addphone();
}
inline const ::std::string& convertlog::addphone() const {
  return *addphone_;
}
inline void convertlog::set_addphone(const ::std::string& value) {
  set_has_addphone();
  if (addphone_ == &::google::protobuf::internal::kEmptyString) {
    addphone_ = new ::std::string;
  }
  addphone_->assign(value);
}
inline void convertlog::set_addphone(const char* value) {
  set_has_addphone();
  if (addphone_ == &::google::protobuf::internal::kEmptyString) {
    addphone_ = new ::std::string;
  }
  addphone_->assign(value);
}
inline void convertlog::set_addphone(const char* value, size_t size) {
  set_has_addphone();
  if (addphone_ == &::google::protobuf::internal::kEmptyString) {
    addphone_ = new ::std::string;
  }
  addphone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertlog::mutable_addphone() {
  set_has_addphone();
  if (addphone_ == &::google::protobuf::internal::kEmptyString) {
    addphone_ = new ::std::string;
  }
  return addphone_;
}
inline ::std::string* convertlog::release_addphone() {
  clear_has_addphone();
  if (addphone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addphone_;
    addphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertlog::set_allocated_addphone(::std::string* addphone) {
  if (addphone_ != &::google::protobuf::internal::kEmptyString) {
    delete addphone_;
  }
  if (addphone) {
    set_has_addphone();
    addphone_ = addphone;
  } else {
    clear_has_addphone();
    addphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 10;
inline bool convertlog::has_address() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void convertlog::set_has_address() {
  _has_bits_[0] |= 0x00000200u;
}
inline void convertlog::clear_has_address() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void convertlog::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& convertlog::address() const {
  return *address_;
}
inline void convertlog::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void convertlog::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void convertlog::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertlog::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* convertlog::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertlog::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timemark = 11;
inline bool convertlog::has_timemark() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void convertlog::set_has_timemark() {
  _has_bits_[0] |= 0x00000400u;
}
inline void convertlog::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void convertlog::clear_timemark() {
  if (timemark_ != &::google::protobuf::internal::kEmptyString) {
    timemark_->clear();
  }
  clear_has_timemark();
}
inline const ::std::string& convertlog::timemark() const {
  return *timemark_;
}
inline void convertlog::set_timemark(const ::std::string& value) {
  set_has_timemark();
  if (timemark_ == &::google::protobuf::internal::kEmptyString) {
    timemark_ = new ::std::string;
  }
  timemark_->assign(value);
}
inline void convertlog::set_timemark(const char* value) {
  set_has_timemark();
  if (timemark_ == &::google::protobuf::internal::kEmptyString) {
    timemark_ = new ::std::string;
  }
  timemark_->assign(value);
}
inline void convertlog::set_timemark(const char* value, size_t size) {
  set_has_timemark();
  if (timemark_ == &::google::protobuf::internal::kEmptyString) {
    timemark_ = new ::std::string;
  }
  timemark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* convertlog::mutable_timemark() {
  set_has_timemark();
  if (timemark_ == &::google::protobuf::internal::kEmptyString) {
    timemark_ = new ::std::string;
  }
  return timemark_;
}
inline ::std::string* convertlog::release_timemark() {
  clear_has_timemark();
  if (timemark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timemark_;
    timemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void convertlog::set_allocated_timemark(::std::string* timemark) {
  if (timemark_ != &::google::protobuf::internal::kEmptyString) {
    delete timemark_;
  }
  if (timemark) {
    set_has_timemark();
    timemark_ = timemark;
  } else {
    clear_has_timemark();
    timemark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 12;
inline bool convertlog::has_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void convertlog::set_has_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void convertlog::clear_has_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void convertlog::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 convertlog::state() const {
  return state_;
}
inline void convertlog::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// shopconfinfo

// optional int32 id = 1;
inline bool shopconfinfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void shopconfinfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void shopconfinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void shopconfinfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 shopconfinfo::id() const {
  return id_;
}
inline void shopconfinfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 shopid = 2;
inline bool shopconfinfo::has_shopid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void shopconfinfo::set_has_shopid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void shopconfinfo::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void shopconfinfo::clear_shopid() {
  shopid_ = 0;
  clear_has_shopid();
}
inline ::google::protobuf::int32 shopconfinfo::shopid() const {
  return shopid_;
}
inline void shopconfinfo::set_shopid(::google::protobuf::int32 value) {
  set_has_shopid();
  shopid_ = value;
}

// optional int32 shoptype = 3;
inline bool shopconfinfo::has_shoptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void shopconfinfo::set_has_shoptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void shopconfinfo::clear_has_shoptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void shopconfinfo::clear_shoptype() {
  shoptype_ = 0;
  clear_has_shoptype();
}
inline ::google::protobuf::int32 shopconfinfo::shoptype() const {
  return shoptype_;
}
inline void shopconfinfo::set_shoptype(::google::protobuf::int32 value) {
  set_has_shoptype();
  shoptype_ = value;
}

// optional string name = 4;
inline bool shopconfinfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void shopconfinfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void shopconfinfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void shopconfinfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& shopconfinfo::name() const {
  return *name_;
}
inline void shopconfinfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void shopconfinfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void shopconfinfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* shopconfinfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* shopconfinfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void shopconfinfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string des = 5;
inline bool shopconfinfo::has_des() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void shopconfinfo::set_has_des() {
  _has_bits_[0] |= 0x00000010u;
}
inline void shopconfinfo::clear_has_des() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void shopconfinfo::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& shopconfinfo::des() const {
  return *des_;
}
inline void shopconfinfo::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void shopconfinfo::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void shopconfinfo::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* shopconfinfo::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* shopconfinfo::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void shopconfinfo::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 minmoney = 6;
inline bool shopconfinfo::has_minmoney() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void shopconfinfo::set_has_minmoney() {
  _has_bits_[0] |= 0x00000020u;
}
inline void shopconfinfo::clear_has_minmoney() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void shopconfinfo::clear_minmoney() {
  minmoney_ = 0;
  clear_has_minmoney();
}
inline ::google::protobuf::int32 shopconfinfo::minmoney() const {
  return minmoney_;
}
inline void shopconfinfo::set_minmoney(::google::protobuf::int32 value) {
  set_has_minmoney();
  minmoney_ = value;
}

// optional int32 maxmoney = 7;
inline bool shopconfinfo::has_maxmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void shopconfinfo::set_has_maxmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void shopconfinfo::clear_has_maxmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void shopconfinfo::clear_maxmoney() {
  maxmoney_ = 0;
  clear_has_maxmoney();
}
inline ::google::protobuf::int32 shopconfinfo::maxmoney() const {
  return maxmoney_;
}
inline void shopconfinfo::set_maxmoney(::google::protobuf::int32 value) {
  set_has_maxmoney();
  maxmoney_ = value;
}

// optional int32 iscustom = 8;
inline bool shopconfinfo::has_iscustom() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void shopconfinfo::set_has_iscustom() {
  _has_bits_[0] |= 0x00000080u;
}
inline void shopconfinfo::clear_has_iscustom() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void shopconfinfo::clear_iscustom() {
  iscustom_ = 0;
  clear_has_iscustom();
}
inline ::google::protobuf::int32 shopconfinfo::iscustom() const {
  return iscustom_;
}
inline void shopconfinfo::set_iscustom(::google::protobuf::int32 value) {
  set_has_iscustom();
  iscustom_ = value;
}

// optional int32 rebate = 9;
inline bool shopconfinfo::has_rebate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void shopconfinfo::set_has_rebate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void shopconfinfo::clear_has_rebate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void shopconfinfo::clear_rebate() {
  rebate_ = 0;
  clear_has_rebate();
}
inline ::google::protobuf::int32 shopconfinfo::rebate() const {
  return rebate_;
}
inline void shopconfinfo::set_rebate(::google::protobuf::int32 value) {
  set_has_rebate();
  rebate_ = value;
}

// repeated int32 normlist = 10;
inline int shopconfinfo::normlist_size() const {
  return normlist_.size();
}
inline void shopconfinfo::clear_normlist() {
  normlist_.Clear();
}
inline ::google::protobuf::int32 shopconfinfo::normlist(int index) const {
  return normlist_.Get(index);
}
inline void shopconfinfo::set_normlist(int index, ::google::protobuf::int32 value) {
  normlist_.Set(index, value);
}
inline void shopconfinfo::add_normlist(::google::protobuf::int32 value) {
  normlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
shopconfinfo::normlist() const {
  return normlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
shopconfinfo::mutable_normlist() {
  return &normlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fshop_2eproto__INCLUDED
