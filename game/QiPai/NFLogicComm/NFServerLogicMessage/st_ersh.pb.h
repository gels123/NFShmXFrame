// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_ersh.proto

#ifndef PROTOBUF_st_5fersh_2eproto__INCLUDED
#define PROTOBUF_st_5fersh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fersh_2eproto();
void protobuf_AssignDesc_st_5fersh_2eproto();
void protobuf_ShutdownFile_st_5fersh_2eproto();

class ershuser;
class ershoptinfo;
class ershinfo;
class ershhandpoker;
class ershhistoryitem;
class ershhistory;
class ershcardlist;

// ===================================================================

class ershuser : public ::google::protobuf::Message {
 public:
  ershuser();
  virtual ~ershuser();

  ershuser(const ershuser& from);

  inline ershuser& operator=(const ershuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ershuser& default_instance();

  void Swap(ershuser* other);

  // implements Message ----------------------------------------------

  ershuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ershuser& from);
  void MergeFrom(const ershuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 chairid = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional string jifen = 3;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 3;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated int32 handpoker = 5;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 5;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // optional int32 pattern = 6;
  inline bool has_pattern() const;
  inline void clear_pattern();
  static const int kPatternFieldNumber = 6;
  inline ::google::protobuf::int32 pattern() const;
  inline void set_pattern(::google::protobuf::int32 value);

  // optional string jetton = 7;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 7;
  inline const ::std::string& jetton() const;
  inline void set_jetton(const ::std::string& value);
  inline void set_jetton(const char* value);
  inline void set_jetton(const char* value, size_t size);
  inline ::std::string* mutable_jetton();
  inline ::std::string* release_jetton();
  inline void set_allocated_jetton(::std::string* jetton);

  // repeated string jettonlist = 8;
  inline int jettonlist_size() const;
  inline void clear_jettonlist();
  static const int kJettonlistFieldNumber = 8;
  inline const ::std::string& jettonlist(int index) const;
  inline ::std::string* mutable_jettonlist(int index);
  inline void set_jettonlist(int index, const ::std::string& value);
  inline void set_jettonlist(int index, const char* value);
  inline void set_jettonlist(int index, const char* value, size_t size);
  inline ::std::string* add_jettonlist();
  inline void add_jettonlist(const ::std::string& value);
  inline void add_jettonlist(const char* value);
  inline void add_jettonlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& jettonlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_jettonlist();

  // optional string nickname = 9;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 9;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // repeated string raiselist = 10;
  inline int raiselist_size() const;
  inline void clear_raiselist();
  static const int kRaiselistFieldNumber = 10;
  inline const ::std::string& raiselist(int index) const;
  inline ::std::string* mutable_raiselist(int index);
  inline void set_raiselist(int index, const ::std::string& value);
  inline void set_raiselist(int index, const char* value);
  inline void set_raiselist(int index, const char* value, size_t size);
  inline ::std::string* add_raiselist();
  inline void add_raiselist(const ::std::string& value);
  inline void add_raiselist(const char* value);
  inline void add_raiselist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& raiselist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_raiselist();

  // repeated int32 actionlist = 11;
  inline int actionlist_size() const;
  inline void clear_actionlist();
  static const int kActionlistFieldNumber = 11;
  inline ::google::protobuf::int32 actionlist(int index) const;
  inline void set_actionlist(int index, ::google::protobuf::int32 value);
  inline void add_actionlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      actionlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_actionlist();

  // optional int32 lastaction = 12;
  inline bool has_lastaction() const;
  inline void clear_lastaction();
  static const int kLastactionFieldNumber = 12;
  inline ::google::protobuf::int32 lastaction() const;
  inline void set_lastaction(::google::protobuf::int32 value);

  // optional int32 cardtype = 13;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardtypeFieldNumber = 13;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.ershuser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_pattern();
  inline void clear_has_pattern();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_lastaction();
  inline void clear_has_lastaction();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairid_;
  ::std::string* jifen_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 pattern_;
  ::std::string* jetton_;
  ::google::protobuf::RepeatedPtrField< ::std::string> jettonlist_;
  ::std::string* nickname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> raiselist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > actionlist_;
  ::google::protobuf::int32 lastaction_;
  ::google::protobuf::int32 cardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fersh_2eproto();
  friend void protobuf_AssignDesc_st_5fersh_2eproto();
  friend void protobuf_ShutdownFile_st_5fersh_2eproto();

  void InitAsDefaultInstance();
  static ershuser* default_instance_;
};
// -------------------------------------------------------------------

class ershoptinfo : public ::google::protobuf::Message {
 public:
  ershoptinfo();
  virtual ~ershoptinfo();

  ershoptinfo(const ershoptinfo& from);

  inline ershoptinfo& operator=(const ershoptinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ershoptinfo& default_instance();

  void Swap(ershoptinfo* other);

  // implements Message ----------------------------------------------

  ershoptinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ershoptinfo& from);
  void MergeFrom(const ershoptinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 actiontype = 2;
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActiontypeFieldNumber = 2;
  inline ::google::protobuf::int32 actiontype() const;
  inline void set_actiontype(::google::protobuf::int32 value);

  // optional string jetton = 3;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 3;
  inline const ::std::string& jetton() const;
  inline void set_jetton(const ::std::string& value);
  inline void set_jetton(const char* value);
  inline void set_jetton(const char* value, size_t size);
  inline ::std::string* mutable_jetton();
  inline ::std::string* release_jetton();
  inline void set_allocated_jetton(::std::string* jetton);

  // @@protoc_insertion_point(class_scope:progame.ershoptinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_jetton();
  inline void clear_has_jetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 actiontype_;
  ::std::string* jetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fersh_2eproto();
  friend void protobuf_AssignDesc_st_5fersh_2eproto();
  friend void protobuf_ShutdownFile_st_5fersh_2eproto();

  void InitAsDefaultInstance();
  static ershoptinfo* default_instance_;
};
// -------------------------------------------------------------------

class ershinfo : public ::google::protobuf::Message {
 public:
  ershinfo();
  virtual ~ershinfo();

  ershinfo(const ershinfo& from);

  inline ershinfo& operator=(const ershinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ershinfo& default_instance();

  void Swap(ershinfo* other);

  // implements Message ----------------------------------------------

  ershinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ershinfo& from);
  void MergeFrom(const ershinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tablemark = 2;
  inline bool has_tablemark() const;
  inline void clear_tablemark();
  static const int kTablemarkFieldNumber = 2;
  inline ::google::protobuf::int32 tablemark() const;
  inline void set_tablemark(::google::protobuf::int32 value);

  // optional int32 tabletime = 3;
  inline bool has_tabletime() const;
  inline void clear_tabletime();
  static const int kTabletimeFieldNumber = 3;
  inline ::google::protobuf::int32 tabletime() const;
  inline void set_tabletime(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional int32 tabletype = 6;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 6;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional string difen = 7;
  inline bool has_difen() const;
  inline void clear_difen();
  static const int kDifenFieldNumber = 7;
  inline const ::std::string& difen() const;
  inline void set_difen(const ::std::string& value);
  inline void set_difen(const char* value);
  inline void set_difen(const char* value, size_t size);
  inline ::std::string* mutable_difen();
  inline ::std::string* release_difen();
  inline void set_allocated_difen(::std::string* difen);

  // optional int32 doublecomp = 8;
  inline bool has_doublecomp() const;
  inline void clear_doublecomp();
  static const int kDoublecompFieldNumber = 8;
  inline ::google::protobuf::int32 doublecomp() const;
  inline void set_doublecomp(::google::protobuf::int32 value);

  // optional int32 boutcapp = 9;
  inline bool has_boutcapp() const;
  inline void clear_boutcapp();
  static const int kBoutcappFieldNumber = 9;
  inline ::google::protobuf::int32 boutcapp() const;
  inline void set_boutcapp(::google::protobuf::int32 value);

  // optional int32 mincomp = 10;
  inline bool has_mincomp() const;
  inline void clear_mincomp();
  static const int kMincompFieldNumber = 10;
  inline ::google::protobuf::int32 mincomp() const;
  inline void set_mincomp(::google::protobuf::int32 value);

  // optional int32 menpai = 11;
  inline bool has_menpai() const;
  inline void clear_menpai();
  static const int kMenpaiFieldNumber = 11;
  inline ::google::protobuf::int32 menpai() const;
  inline void set_menpai(::google::protobuf::int32 value);

  // optional int32 maxplaynum = 12;
  inline bool has_maxplaynum() const;
  inline void clear_maxplaynum();
  static const int kMaxplaynumFieldNumber = 12;
  inline ::google::protobuf::int32 maxplaynum() const;
  inline void set_maxplaynum(::google::protobuf::int32 value);

  // optional int32 paytype = 13;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPaytypeFieldNumber = 13;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);

  // optional int32 restrict = 14;
  inline bool has_restrict() const;
  inline void clear_restrict();
  static const int kRestrictFieldNumber = 14;
  inline ::google::protobuf::int32 restrict() const;
  inline void set_restrict(::google::protobuf::int32 value);

  // optional int32 autoready = 15;
  inline bool has_autoready() const;
  inline void clear_autoready();
  static const int kAutoreadyFieldNumber = 15;
  inline ::google::protobuf::int32 autoready() const;
  inline void set_autoready(::google::protobuf::int32 value);

  // optional int32 ownerid = 16;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 16;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // optional int32 bankerID = 17;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankerIDFieldNumber = 17;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // repeated .progame.ershuser situser = 18;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 18;
  inline const ::progame::ershuser& situser(int index) const;
  inline ::progame::ershuser* mutable_situser(int index);
  inline ::progame::ershuser* add_situser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ershuser >&
      situser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ershuser >*
      mutable_situser();

  // repeated int32 standuser = 19;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 19;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional int32 usevipnum = 20;
  inline bool has_usevipnum() const;
  inline void clear_usevipnum();
  static const int kUsevipnumFieldNumber = 20;
  inline ::google::protobuf::int32 usevipnum() const;
  inline void set_usevipnum(::google::protobuf::int32 value);

  // optional int32 guodi = 21;
  inline bool has_guodi() const;
  inline void clear_guodi();
  static const int kGuodiFieldNumber = 21;
  inline ::google::protobuf::int32 guodi() const;
  inline void set_guodi(::google::protobuf::int32 value);

  // optional int32 oncepour = 22;
  inline bool has_oncepour() const;
  inline void clear_oncepour();
  static const int kOncepourFieldNumber = 22;
  inline ::google::protobuf::int32 oncepour() const;
  inline void set_oncepour(::google::protobuf::int32 value);

  // optional int32 presentbout = 23;
  inline bool has_presentbout() const;
  inline void clear_presentbout();
  static const int kPresentboutFieldNumber = 23;
  inline ::google::protobuf::int32 presentbout() const;
  inline void set_presentbout(::google::protobuf::int32 value);

  // optional int32 dissolveinfo = 24;
  inline bool has_dissolveinfo() const;
  inline void clear_dissolveinfo();
  static const int kDissolveinfoFieldNumber = 24;
  inline ::google::protobuf::int32 dissolveinfo() const;
  inline void set_dissolveinfo(::google::protobuf::int32 value);

  // optional string straction = 25;
  inline bool has_straction() const;
  inline void clear_straction();
  static const int kStractionFieldNumber = 25;
  inline const ::std::string& straction() const;
  inline void set_straction(const ::std::string& value);
  inline void set_straction(const char* value);
  inline void set_straction(const char* value, size_t size);
  inline ::std::string* mutable_straction();
  inline ::std::string* release_straction();
  inline void set_allocated_straction(::std::string* straction);

  // optional int32 payway = 26;
  inline bool has_payway() const;
  inline void clear_payway();
  static const int kPaywayFieldNumber = 26;
  inline ::google::protobuf::int32 payway() const;
  inline void set_payway(::google::protobuf::int32 value);

  // optional int32 paynum = 27;
  inline bool has_paynum() const;
  inline void clear_paynum();
  static const int kPaynumFieldNumber = 27;
  inline ::google::protobuf::int32 paynum() const;
  inline void set_paynum(::google::protobuf::int32 value);

  // optional int32 maxuser = 29;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 29;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // repeated int32 actionlist = 30;
  inline int actionlist_size() const;
  inline void clear_actionlist();
  static const int kActionlistFieldNumber = 30;
  inline ::google::protobuf::int32 actionlist(int index) const;
  inline void set_actionlist(int index, ::google::protobuf::int32 value);
  inline void add_actionlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      actionlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_actionlist();

  // optional int32 deluser = 31;
  inline bool has_deluser() const;
  inline void clear_deluser();
  static const int kDeluserFieldNumber = 31;
  inline ::google::protobuf::int32 deluser() const;
  inline void set_deluser(::google::protobuf::int32 value);

  // optional int32 actionuser = 32;
  inline bool has_actionuser() const;
  inline void clear_actionuser();
  static const int kActionuserFieldNumber = 32;
  inline ::google::protobuf::int32 actionuser() const;
  inline void set_actionuser(::google::protobuf::int32 value);

  // optional int32 usernum = 33;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 33;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 julebuid = 34;
  inline bool has_julebuid() const;
  inline void clear_julebuid();
  static const int kJulebuidFieldNumber = 34;
  inline ::google::protobuf::int32 julebuid() const;
  inline void set_julebuid(::google::protobuf::int32 value);

  // optional int32 flag = 35;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 35;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 ershtype = 36;
  inline bool has_ershtype() const;
  inline void clear_ershtype();
  static const int kErshtypeFieldNumber = 36;
  inline ::google::protobuf::int32 ershtype() const;
  inline void set_ershtype(::google::protobuf::int32 value);

  // optional int32 dealcnt = 37;
  inline bool has_dealcnt() const;
  inline void clear_dealcnt();
  static const int kDealcntFieldNumber = 37;
  inline ::google::protobuf::int32 dealcnt() const;
  inline void set_dealcnt(::google::protobuf::int32 value);

  // optional .progame.ershoptinfo maxactioninfo = 38;
  inline bool has_maxactioninfo() const;
  inline void clear_maxactioninfo();
  static const int kMaxactioninfoFieldNumber = 38;
  inline const ::progame::ershoptinfo& maxactioninfo() const;
  inline ::progame::ershoptinfo* mutable_maxactioninfo();
  inline ::progame::ershoptinfo* release_maxactioninfo();
  inline void set_allocated_maxactioninfo(::progame::ershoptinfo* maxactioninfo);

  // optional string maxpourjetton = 39;
  inline bool has_maxpourjetton() const;
  inline void clear_maxpourjetton();
  static const int kMaxpourjettonFieldNumber = 39;
  inline const ::std::string& maxpourjetton() const;
  inline void set_maxpourjetton(const ::std::string& value);
  inline void set_maxpourjetton(const char* value);
  inline void set_maxpourjetton(const char* value, size_t size);
  inline ::std::string* mutable_maxpourjetton();
  inline ::std::string* release_maxpourjetton();
  inline void set_allocated_maxpourjetton(::std::string* maxpourjetton);

  // @@protoc_insertion_point(class_scope:progame.ershinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablemark();
  inline void clear_has_tablemark();
  inline void set_has_tabletime();
  inline void clear_has_tabletime();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_difen();
  inline void clear_has_difen();
  inline void set_has_doublecomp();
  inline void clear_has_doublecomp();
  inline void set_has_boutcapp();
  inline void clear_has_boutcapp();
  inline void set_has_mincomp();
  inline void clear_has_mincomp();
  inline void set_has_menpai();
  inline void clear_has_menpai();
  inline void set_has_maxplaynum();
  inline void clear_has_maxplaynum();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_restrict();
  inline void clear_has_restrict();
  inline void set_has_autoready();
  inline void clear_has_autoready();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_usevipnum();
  inline void clear_has_usevipnum();
  inline void set_has_guodi();
  inline void clear_has_guodi();
  inline void set_has_oncepour();
  inline void clear_has_oncepour();
  inline void set_has_presentbout();
  inline void clear_has_presentbout();
  inline void set_has_dissolveinfo();
  inline void clear_has_dissolveinfo();
  inline void set_has_straction();
  inline void clear_has_straction();
  inline void set_has_payway();
  inline void clear_has_payway();
  inline void set_has_paynum();
  inline void clear_has_paynum();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_deluser();
  inline void clear_has_deluser();
  inline void set_has_actionuser();
  inline void clear_has_actionuser();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_julebuid();
  inline void clear_has_julebuid();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_ershtype();
  inline void clear_has_ershtype();
  inline void set_has_dealcnt();
  inline void clear_has_dealcnt();
  inline void set_has_maxactioninfo();
  inline void clear_has_maxactioninfo();
  inline void set_has_maxpourjetton();
  inline void clear_has_maxpourjetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tablemark_;
  ::google::protobuf::int32 tabletime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 tabletype_;
  ::std::string* difen_;
  ::google::protobuf::int32 doublecomp_;
  ::google::protobuf::int32 boutcapp_;
  ::google::protobuf::int32 mincomp_;
  ::google::protobuf::int32 menpai_;
  ::google::protobuf::int32 maxplaynum_;
  ::google::protobuf::int32 paytype_;
  ::google::protobuf::int32 restrict_;
  ::google::protobuf::int32 autoready_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::RepeatedPtrField< ::progame::ershuser > situser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 usevipnum_;
  ::google::protobuf::int32 guodi_;
  ::google::protobuf::int32 oncepour_;
  ::google::protobuf::int32 presentbout_;
  ::std::string* straction_;
  ::google::protobuf::int32 dissolveinfo_;
  ::google::protobuf::int32 payway_;
  ::google::protobuf::int32 paynum_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > actionlist_;
  ::google::protobuf::int32 deluser_;
  ::google::protobuf::int32 actionuser_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 julebuid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 ershtype_;
  ::progame::ershoptinfo* maxactioninfo_;
  ::std::string* maxpourjetton_;
  ::google::protobuf::int32 dealcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(38 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fersh_2eproto();
  friend void protobuf_AssignDesc_st_5fersh_2eproto();
  friend void protobuf_ShutdownFile_st_5fersh_2eproto();

  void InitAsDefaultInstance();
  static ershinfo* default_instance_;
};
// -------------------------------------------------------------------

class ershhandpoker : public ::google::protobuf::Message {
 public:
  ershhandpoker();
  virtual ~ershhandpoker();

  ershhandpoker(const ershhandpoker& from);

  inline ershhandpoker& operator=(const ershhandpoker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ershhandpoker& default_instance();

  void Swap(ershhandpoker* other);

  // implements Message ----------------------------------------------

  ershhandpoker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ershhandpoker& from);
  void MergeFrom(const ershhandpoker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 handpoker = 1;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 1;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // @@protoc_insertion_point(class_scope:progame.ershhandpoker)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fersh_2eproto();
  friend void protobuf_AssignDesc_st_5fersh_2eproto();
  friend void protobuf_ShutdownFile_st_5fersh_2eproto();

  void InitAsDefaultInstance();
  static ershhandpoker* default_instance_;
};
// -------------------------------------------------------------------

class ershhistoryitem : public ::google::protobuf::Message {
 public:
  ershhistoryitem();
  virtual ~ershhistoryitem();

  ershhistoryitem(const ershhistoryitem& from);

  inline ershhistoryitem& operator=(const ershhistoryitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ershhistoryitem& default_instance();

  void Swap(ershhistoryitem* other);

  // implements Message ----------------------------------------------

  ershhistoryitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ershhistoryitem& from);
  void MergeFrom(const ershhistoryitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 leg = 1;
  inline bool has_leg() const;
  inline void clear_leg();
  static const int kLegFieldNumber = 1;
  inline ::google::protobuf::int32 leg() const;
  inline void set_leg(::google::protobuf::int32 value);

  // optional int32 guodi = 2;
  inline bool has_guodi() const;
  inline void clear_guodi();
  static const int kGuodiFieldNumber = 2;
  inline ::google::protobuf::int32 guodi() const;
  inline void set_guodi(::google::protobuf::int32 value);

  // optional int32 presentbout = 3;
  inline bool has_presentbout() const;
  inline void clear_presentbout();
  static const int kPresentboutFieldNumber = 3;
  inline ::google::protobuf::int32 presentbout() const;
  inline void set_presentbout(::google::protobuf::int32 value);

  // optional int32 oncepour = 4;
  inline bool has_oncepour() const;
  inline void clear_oncepour();
  static const int kOncepourFieldNumber = 4;
  inline ::google::protobuf::int32 oncepour() const;
  inline void set_oncepour(::google::protobuf::int32 value);

  // optional int32 winerid = 5;
  inline bool has_winerid() const;
  inline void clear_winerid();
  static const int kWineridFieldNumber = 5;
  inline ::google::protobuf::int32 winerid() const;
  inline void set_winerid(::google::protobuf::int32 value);

  // repeated int32 useridlist = 6;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 6;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated string nicklist = 7;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 7;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 jetton = 8;
  inline int jetton_size() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 8;
  inline ::google::protobuf::int32 jetton(int index) const;
  inline void set_jetton(int index, ::google::protobuf::int32 value);
  inline void add_jetton(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jetton() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jetton();

  // repeated .progame.ershhandpoker pokerlist = 9;
  inline int pokerlist_size() const;
  inline void clear_pokerlist();
  static const int kPokerlistFieldNumber = 9;
  inline const ::progame::ershhandpoker& pokerlist(int index) const;
  inline ::progame::ershhandpoker* mutable_pokerlist(int index);
  inline ::progame::ershhandpoker* add_pokerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ershhandpoker >&
      pokerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ershhandpoker >*
      mutable_pokerlist();

  // repeated int32 ershtypelist = 10;
  inline int ershtypelist_size() const;
  inline void clear_ershtypelist();
  static const int kErshtypelistFieldNumber = 10;
  inline ::google::protobuf::int32 ershtypelist(int index) const;
  inline void set_ershtypelist(int index, ::google::protobuf::int32 value);
  inline void add_ershtypelist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ershtypelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ershtypelist();

  // repeated int32 winlist = 11;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 11;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // repeated int32 resultlist = 17;
  inline int resultlist_size() const;
  inline void clear_resultlist();
  static const int kResultlistFieldNumber = 17;
  inline ::google::protobuf::int32 resultlist(int index) const;
  inline void set_resultlist(int index, ::google::protobuf::int32 value);
  inline void add_resultlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      resultlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_resultlist();

  // @@protoc_insertion_point(class_scope:progame.ershhistoryitem)
 private:
  inline void set_has_leg();
  inline void clear_has_leg();
  inline void set_has_guodi();
  inline void clear_has_guodi();
  inline void set_has_presentbout();
  inline void clear_has_presentbout();
  inline void set_has_oncepour();
  inline void clear_has_oncepour();
  inline void set_has_winerid();
  inline void clear_has_winerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 leg_;
  ::google::protobuf::int32 guodi_;
  ::google::protobuf::int32 presentbout_;
  ::google::protobuf::int32 oncepour_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jetton_;
  ::google::protobuf::RepeatedPtrField< ::progame::ershhandpoker > pokerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ershtypelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > resultlist_;
  ::google::protobuf::int32 winerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fersh_2eproto();
  friend void protobuf_AssignDesc_st_5fersh_2eproto();
  friend void protobuf_ShutdownFile_st_5fersh_2eproto();

  void InitAsDefaultInstance();
  static ershhistoryitem* default_instance_;
};
// -------------------------------------------------------------------

class ershhistory : public ::google::protobuf::Message {
 public:
  ershhistory();
  virtual ~ershhistory();

  ershhistory(const ershhistory& from);

  inline ershhistory& operator=(const ershhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ershhistory& default_instance();

  void Swap(ershhistory* other);

  // implements Message ----------------------------------------------

  ershhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ershhistory& from);
  void MergeFrom(const ershhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 playnummax = 2;
  inline bool has_playnummax() const;
  inline void clear_playnummax();
  static const int kPlaynummaxFieldNumber = 2;
  inline ::google::protobuf::int32 playnummax() const;
  inline void set_playnummax(::google::protobuf::int32 value);

  // optional int32 playnum = 3;
  inline bool has_playnum() const;
  inline void clear_playnum();
  static const int kPlaynumFieldNumber = 3;
  inline ::google::protobuf::int32 playnum() const;
  inline void set_playnum(::google::protobuf::int32 value);

  // optional int32 difen = 4;
  inline bool has_difen() const;
  inline void clear_difen();
  static const int kDifenFieldNumber = 4;
  inline ::google::protobuf::int32 difen() const;
  inline void set_difen(::google::protobuf::int32 value);

  // optional int32 gametime = 6;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGametimeFieldNumber = 6;
  inline ::google::protobuf::int32 gametime() const;
  inline void set_gametime(::google::protobuf::int32 value);

  // optional int32 ownerid = 7;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 7;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // repeated string nicklist = 8;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 8;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 useridlist = 9;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 9;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated int32 winlist = 10;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 10;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // repeated .progame.ershhistoryitem hitemlist = 11;
  inline int hitemlist_size() const;
  inline void clear_hitemlist();
  static const int kHitemlistFieldNumber = 11;
  inline const ::progame::ershhistoryitem& hitemlist(int index) const;
  inline ::progame::ershhistoryitem* mutable_hitemlist(int index);
  inline ::progame::ershhistoryitem* add_hitemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ershhistoryitem >&
      hitemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ershhistoryitem >*
      mutable_hitemlist();

  // @@protoc_insertion_point(class_scope:progame.ershhistory)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_playnummax();
  inline void clear_has_playnummax();
  inline void set_has_playnum();
  inline void clear_has_playnum();
  inline void set_has_difen();
  inline void clear_has_difen();
  inline void set_has_gametime();
  inline void clear_has_gametime();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 playnummax_;
  ::google::protobuf::int32 playnum_;
  ::google::protobuf::int32 difen_;
  ::google::protobuf::int32 gametime_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::ershhistoryitem > hitemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fersh_2eproto();
  friend void protobuf_AssignDesc_st_5fersh_2eproto();
  friend void protobuf_ShutdownFile_st_5fersh_2eproto();

  void InitAsDefaultInstance();
  static ershhistory* default_instance_;
};
// -------------------------------------------------------------------

class ershcardlist : public ::google::protobuf::Message {
 public:
  ershcardlist();
  virtual ~ershcardlist();

  ershcardlist(const ershcardlist& from);

  inline ershcardlist& operator=(const ershcardlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ershcardlist& default_instance();

  void Swap(ershcardlist* other);

  // implements Message ----------------------------------------------

  ershcardlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ershcardlist& from);
  void MergeFrom(const ershcardlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline ::google::protobuf::int32 list(int index) const;
  inline void set_list(int index, ::google::protobuf::int32 value);
  inline void add_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:progame.ershcardlist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fersh_2eproto();
  friend void protobuf_AssignDesc_st_5fersh_2eproto();
  friend void protobuf_ShutdownFile_st_5fersh_2eproto();

  void InitAsDefaultInstance();
  static ershcardlist* default_instance_;
};
// ===================================================================


// ===================================================================

// ershuser

// optional int32 userid = 1;
inline bool ershuser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ershuser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ershuser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ershuser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ershuser::userid() const {
  return userid_;
}
inline void ershuser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 chairid = 2;
inline bool ershuser::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ershuser::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ershuser::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ershuser::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 ershuser::chairid() const {
  return chairid_;
}
inline void ershuser::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional string jifen = 3;
inline bool ershuser::has_jifen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ershuser::set_has_jifen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ershuser::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ershuser::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& ershuser::jifen() const {
  return *jifen_;
}
inline void ershuser::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void ershuser::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void ershuser::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershuser::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* ershuser::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ershuser::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 4;
inline bool ershuser::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ershuser::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ershuser::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ershuser::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ershuser::state() const {
  return state_;
}
inline void ershuser::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// repeated int32 handpoker = 5;
inline int ershuser::handpoker_size() const {
  return handpoker_.size();
}
inline void ershuser::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 ershuser::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void ershuser::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void ershuser::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershuser::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershuser::mutable_handpoker() {
  return &handpoker_;
}

// optional int32 pattern = 6;
inline bool ershuser::has_pattern() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ershuser::set_has_pattern() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ershuser::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ershuser::clear_pattern() {
  pattern_ = 0;
  clear_has_pattern();
}
inline ::google::protobuf::int32 ershuser::pattern() const {
  return pattern_;
}
inline void ershuser::set_pattern(::google::protobuf::int32 value) {
  set_has_pattern();
  pattern_ = value;
}

// optional string jetton = 7;
inline bool ershuser::has_jetton() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ershuser::set_has_jetton() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ershuser::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ershuser::clear_jetton() {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    jetton_->clear();
  }
  clear_has_jetton();
}
inline const ::std::string& ershuser::jetton() const {
  return *jetton_;
}
inline void ershuser::set_jetton(const ::std::string& value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void ershuser::set_jetton(const char* value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void ershuser::set_jetton(const char* value, size_t size) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershuser::mutable_jetton() {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  return jetton_;
}
inline ::std::string* ershuser::release_jetton() {
  clear_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jetton_;
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ershuser::set_allocated_jetton(::std::string* jetton) {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (jetton) {
    set_has_jetton();
    jetton_ = jetton;
  } else {
    clear_has_jetton();
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string jettonlist = 8;
inline int ershuser::jettonlist_size() const {
  return jettonlist_.size();
}
inline void ershuser::clear_jettonlist() {
  jettonlist_.Clear();
}
inline const ::std::string& ershuser::jettonlist(int index) const {
  return jettonlist_.Get(index);
}
inline ::std::string* ershuser::mutable_jettonlist(int index) {
  return jettonlist_.Mutable(index);
}
inline void ershuser::set_jettonlist(int index, const ::std::string& value) {
  jettonlist_.Mutable(index)->assign(value);
}
inline void ershuser::set_jettonlist(int index, const char* value) {
  jettonlist_.Mutable(index)->assign(value);
}
inline void ershuser::set_jettonlist(int index, const char* value, size_t size) {
  jettonlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershuser::add_jettonlist() {
  return jettonlist_.Add();
}
inline void ershuser::add_jettonlist(const ::std::string& value) {
  jettonlist_.Add()->assign(value);
}
inline void ershuser::add_jettonlist(const char* value) {
  jettonlist_.Add()->assign(value);
}
inline void ershuser::add_jettonlist(const char* value, size_t size) {
  jettonlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ershuser::jettonlist() const {
  return jettonlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ershuser::mutable_jettonlist() {
  return &jettonlist_;
}

// optional string nickname = 9;
inline bool ershuser::has_nickname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ershuser::set_has_nickname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ershuser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ershuser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ershuser::nickname() const {
  return *nickname_;
}
inline void ershuser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ershuser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ershuser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershuser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ershuser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ershuser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string raiselist = 10;
inline int ershuser::raiselist_size() const {
  return raiselist_.size();
}
inline void ershuser::clear_raiselist() {
  raiselist_.Clear();
}
inline const ::std::string& ershuser::raiselist(int index) const {
  return raiselist_.Get(index);
}
inline ::std::string* ershuser::mutable_raiselist(int index) {
  return raiselist_.Mutable(index);
}
inline void ershuser::set_raiselist(int index, const ::std::string& value) {
  raiselist_.Mutable(index)->assign(value);
}
inline void ershuser::set_raiselist(int index, const char* value) {
  raiselist_.Mutable(index)->assign(value);
}
inline void ershuser::set_raiselist(int index, const char* value, size_t size) {
  raiselist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershuser::add_raiselist() {
  return raiselist_.Add();
}
inline void ershuser::add_raiselist(const ::std::string& value) {
  raiselist_.Add()->assign(value);
}
inline void ershuser::add_raiselist(const char* value) {
  raiselist_.Add()->assign(value);
}
inline void ershuser::add_raiselist(const char* value, size_t size) {
  raiselist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ershuser::raiselist() const {
  return raiselist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ershuser::mutable_raiselist() {
  return &raiselist_;
}

// repeated int32 actionlist = 11;
inline int ershuser::actionlist_size() const {
  return actionlist_.size();
}
inline void ershuser::clear_actionlist() {
  actionlist_.Clear();
}
inline ::google::protobuf::int32 ershuser::actionlist(int index) const {
  return actionlist_.Get(index);
}
inline void ershuser::set_actionlist(int index, ::google::protobuf::int32 value) {
  actionlist_.Set(index, value);
}
inline void ershuser::add_actionlist(::google::protobuf::int32 value) {
  actionlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershuser::actionlist() const {
  return actionlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershuser::mutable_actionlist() {
  return &actionlist_;
}

// optional int32 lastaction = 12;
inline bool ershuser::has_lastaction() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ershuser::set_has_lastaction() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ershuser::clear_has_lastaction() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ershuser::clear_lastaction() {
  lastaction_ = 0;
  clear_has_lastaction();
}
inline ::google::protobuf::int32 ershuser::lastaction() const {
  return lastaction_;
}
inline void ershuser::set_lastaction(::google::protobuf::int32 value) {
  set_has_lastaction();
  lastaction_ = value;
}

// optional int32 cardtype = 13;
inline bool ershuser::has_cardtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ershuser::set_has_cardtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ershuser::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ershuser::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 ershuser::cardtype() const {
  return cardtype_;
}
inline void ershuser::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// -------------------------------------------------------------------

// ershoptinfo

// optional int32 userid = 1;
inline bool ershoptinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ershoptinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ershoptinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ershoptinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ershoptinfo::userid() const {
  return userid_;
}
inline void ershoptinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 actiontype = 2;
inline bool ershoptinfo::has_actiontype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ershoptinfo::set_has_actiontype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ershoptinfo::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ershoptinfo::clear_actiontype() {
  actiontype_ = 0;
  clear_has_actiontype();
}
inline ::google::protobuf::int32 ershoptinfo::actiontype() const {
  return actiontype_;
}
inline void ershoptinfo::set_actiontype(::google::protobuf::int32 value) {
  set_has_actiontype();
  actiontype_ = value;
}

// optional string jetton = 3;
inline bool ershoptinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ershoptinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ershoptinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ershoptinfo::clear_jetton() {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    jetton_->clear();
  }
  clear_has_jetton();
}
inline const ::std::string& ershoptinfo::jetton() const {
  return *jetton_;
}
inline void ershoptinfo::set_jetton(const ::std::string& value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void ershoptinfo::set_jetton(const char* value) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(value);
}
inline void ershoptinfo::set_jetton(const char* value, size_t size) {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  jetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershoptinfo::mutable_jetton() {
  set_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    jetton_ = new ::std::string;
  }
  return jetton_;
}
inline ::std::string* ershoptinfo::release_jetton() {
  clear_has_jetton();
  if (jetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jetton_;
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ershoptinfo::set_allocated_jetton(::std::string* jetton) {
  if (jetton_ != &::google::protobuf::internal::kEmptyString) {
    delete jetton_;
  }
  if (jetton) {
    set_has_jetton();
    jetton_ = jetton;
  } else {
    clear_has_jetton();
    jetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ershinfo

// optional int32 tableid = 1;
inline bool ershinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ershinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ershinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ershinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ershinfo::tableid() const {
  return tableid_;
}
inline void ershinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tablemark = 2;
inline bool ershinfo::has_tablemark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ershinfo::set_has_tablemark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ershinfo::clear_has_tablemark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ershinfo::clear_tablemark() {
  tablemark_ = 0;
  clear_has_tablemark();
}
inline ::google::protobuf::int32 ershinfo::tablemark() const {
  return tablemark_;
}
inline void ershinfo::set_tablemark(::google::protobuf::int32 value) {
  set_has_tablemark();
  tablemark_ = value;
}

// optional int32 tabletime = 3;
inline bool ershinfo::has_tabletime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ershinfo::set_has_tabletime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ershinfo::clear_has_tabletime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ershinfo::clear_tabletime() {
  tabletime_ = 0;
  clear_has_tabletime();
}
inline ::google::protobuf::int32 ershinfo::tabletime() const {
  return tabletime_;
}
inline void ershinfo::set_tabletime(::google::protobuf::int32 value) {
  set_has_tabletime();
  tabletime_ = value;
}

// optional int32 state = 4;
inline bool ershinfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ershinfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ershinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ershinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ershinfo::state() const {
  return state_;
}
inline void ershinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 5;
inline bool ershinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ershinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ershinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ershinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 ershinfo::timemark() const {
  return timemark_;
}
inline void ershinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional int32 tabletype = 6;
inline bool ershinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ershinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ershinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ershinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 ershinfo::tabletype() const {
  return tabletype_;
}
inline void ershinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional string difen = 7;
inline bool ershinfo::has_difen() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ershinfo::set_has_difen() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ershinfo::clear_has_difen() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ershinfo::clear_difen() {
  if (difen_ != &::google::protobuf::internal::kEmptyString) {
    difen_->clear();
  }
  clear_has_difen();
}
inline const ::std::string& ershinfo::difen() const {
  return *difen_;
}
inline void ershinfo::set_difen(const ::std::string& value) {
  set_has_difen();
  if (difen_ == &::google::protobuf::internal::kEmptyString) {
    difen_ = new ::std::string;
  }
  difen_->assign(value);
}
inline void ershinfo::set_difen(const char* value) {
  set_has_difen();
  if (difen_ == &::google::protobuf::internal::kEmptyString) {
    difen_ = new ::std::string;
  }
  difen_->assign(value);
}
inline void ershinfo::set_difen(const char* value, size_t size) {
  set_has_difen();
  if (difen_ == &::google::protobuf::internal::kEmptyString) {
    difen_ = new ::std::string;
  }
  difen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershinfo::mutable_difen() {
  set_has_difen();
  if (difen_ == &::google::protobuf::internal::kEmptyString) {
    difen_ = new ::std::string;
  }
  return difen_;
}
inline ::std::string* ershinfo::release_difen() {
  clear_has_difen();
  if (difen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = difen_;
    difen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ershinfo::set_allocated_difen(::std::string* difen) {
  if (difen_ != &::google::protobuf::internal::kEmptyString) {
    delete difen_;
  }
  if (difen) {
    set_has_difen();
    difen_ = difen;
  } else {
    clear_has_difen();
    difen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 doublecomp = 8;
inline bool ershinfo::has_doublecomp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ershinfo::set_has_doublecomp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ershinfo::clear_has_doublecomp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ershinfo::clear_doublecomp() {
  doublecomp_ = 0;
  clear_has_doublecomp();
}
inline ::google::protobuf::int32 ershinfo::doublecomp() const {
  return doublecomp_;
}
inline void ershinfo::set_doublecomp(::google::protobuf::int32 value) {
  set_has_doublecomp();
  doublecomp_ = value;
}

// optional int32 boutcapp = 9;
inline bool ershinfo::has_boutcapp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ershinfo::set_has_boutcapp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ershinfo::clear_has_boutcapp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ershinfo::clear_boutcapp() {
  boutcapp_ = 0;
  clear_has_boutcapp();
}
inline ::google::protobuf::int32 ershinfo::boutcapp() const {
  return boutcapp_;
}
inline void ershinfo::set_boutcapp(::google::protobuf::int32 value) {
  set_has_boutcapp();
  boutcapp_ = value;
}

// optional int32 mincomp = 10;
inline bool ershinfo::has_mincomp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ershinfo::set_has_mincomp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ershinfo::clear_has_mincomp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ershinfo::clear_mincomp() {
  mincomp_ = 0;
  clear_has_mincomp();
}
inline ::google::protobuf::int32 ershinfo::mincomp() const {
  return mincomp_;
}
inline void ershinfo::set_mincomp(::google::protobuf::int32 value) {
  set_has_mincomp();
  mincomp_ = value;
}

// optional int32 menpai = 11;
inline bool ershinfo::has_menpai() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ershinfo::set_has_menpai() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ershinfo::clear_has_menpai() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ershinfo::clear_menpai() {
  menpai_ = 0;
  clear_has_menpai();
}
inline ::google::protobuf::int32 ershinfo::menpai() const {
  return menpai_;
}
inline void ershinfo::set_menpai(::google::protobuf::int32 value) {
  set_has_menpai();
  menpai_ = value;
}

// optional int32 maxplaynum = 12;
inline bool ershinfo::has_maxplaynum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ershinfo::set_has_maxplaynum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ershinfo::clear_has_maxplaynum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ershinfo::clear_maxplaynum() {
  maxplaynum_ = 0;
  clear_has_maxplaynum();
}
inline ::google::protobuf::int32 ershinfo::maxplaynum() const {
  return maxplaynum_;
}
inline void ershinfo::set_maxplaynum(::google::protobuf::int32 value) {
  set_has_maxplaynum();
  maxplaynum_ = value;
}

// optional int32 paytype = 13;
inline bool ershinfo::has_paytype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ershinfo::set_has_paytype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ershinfo::clear_has_paytype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ershinfo::clear_paytype() {
  paytype_ = 0;
  clear_has_paytype();
}
inline ::google::protobuf::int32 ershinfo::paytype() const {
  return paytype_;
}
inline void ershinfo::set_paytype(::google::protobuf::int32 value) {
  set_has_paytype();
  paytype_ = value;
}

// optional int32 restrict = 14;
inline bool ershinfo::has_restrict() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ershinfo::set_has_restrict() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ershinfo::clear_has_restrict() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ershinfo::clear_restrict() {
  restrict_ = 0;
  clear_has_restrict();
}
inline ::google::protobuf::int32 ershinfo::restrict() const {
  return restrict_;
}
inline void ershinfo::set_restrict(::google::protobuf::int32 value) {
  set_has_restrict();
  restrict_ = value;
}

// optional int32 autoready = 15;
inline bool ershinfo::has_autoready() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ershinfo::set_has_autoready() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ershinfo::clear_has_autoready() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ershinfo::clear_autoready() {
  autoready_ = 0;
  clear_has_autoready();
}
inline ::google::protobuf::int32 ershinfo::autoready() const {
  return autoready_;
}
inline void ershinfo::set_autoready(::google::protobuf::int32 value) {
  set_has_autoready();
  autoready_ = value;
}

// optional int32 ownerid = 16;
inline bool ershinfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ershinfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ershinfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ershinfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 ershinfo::ownerid() const {
  return ownerid_;
}
inline void ershinfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional int32 bankerID = 17;
inline bool ershinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ershinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ershinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ershinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 ershinfo::bankerid() const {
  return bankerid_;
}
inline void ershinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// repeated .progame.ershuser situser = 18;
inline int ershinfo::situser_size() const {
  return situser_.size();
}
inline void ershinfo::clear_situser() {
  situser_.Clear();
}
inline const ::progame::ershuser& ershinfo::situser(int index) const {
  return situser_.Get(index);
}
inline ::progame::ershuser* ershinfo::mutable_situser(int index) {
  return situser_.Mutable(index);
}
inline ::progame::ershuser* ershinfo::add_situser() {
  return situser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ershuser >&
ershinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ershuser >*
ershinfo::mutable_situser() {
  return &situser_;
}

// repeated int32 standuser = 19;
inline int ershinfo::standuser_size() const {
  return standuser_.size();
}
inline void ershinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 ershinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void ershinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void ershinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 usevipnum = 20;
inline bool ershinfo::has_usevipnum() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ershinfo::set_has_usevipnum() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ershinfo::clear_has_usevipnum() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ershinfo::clear_usevipnum() {
  usevipnum_ = 0;
  clear_has_usevipnum();
}
inline ::google::protobuf::int32 ershinfo::usevipnum() const {
  return usevipnum_;
}
inline void ershinfo::set_usevipnum(::google::protobuf::int32 value) {
  set_has_usevipnum();
  usevipnum_ = value;
}

// optional int32 guodi = 21;
inline bool ershinfo::has_guodi() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ershinfo::set_has_guodi() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ershinfo::clear_has_guodi() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ershinfo::clear_guodi() {
  guodi_ = 0;
  clear_has_guodi();
}
inline ::google::protobuf::int32 ershinfo::guodi() const {
  return guodi_;
}
inline void ershinfo::set_guodi(::google::protobuf::int32 value) {
  set_has_guodi();
  guodi_ = value;
}

// optional int32 oncepour = 22;
inline bool ershinfo::has_oncepour() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ershinfo::set_has_oncepour() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ershinfo::clear_has_oncepour() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ershinfo::clear_oncepour() {
  oncepour_ = 0;
  clear_has_oncepour();
}
inline ::google::protobuf::int32 ershinfo::oncepour() const {
  return oncepour_;
}
inline void ershinfo::set_oncepour(::google::protobuf::int32 value) {
  set_has_oncepour();
  oncepour_ = value;
}

// optional int32 presentbout = 23;
inline bool ershinfo::has_presentbout() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ershinfo::set_has_presentbout() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ershinfo::clear_has_presentbout() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ershinfo::clear_presentbout() {
  presentbout_ = 0;
  clear_has_presentbout();
}
inline ::google::protobuf::int32 ershinfo::presentbout() const {
  return presentbout_;
}
inline void ershinfo::set_presentbout(::google::protobuf::int32 value) {
  set_has_presentbout();
  presentbout_ = value;
}

// optional int32 dissolveinfo = 24;
inline bool ershinfo::has_dissolveinfo() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ershinfo::set_has_dissolveinfo() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ershinfo::clear_has_dissolveinfo() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ershinfo::clear_dissolveinfo() {
  dissolveinfo_ = 0;
  clear_has_dissolveinfo();
}
inline ::google::protobuf::int32 ershinfo::dissolveinfo() const {
  return dissolveinfo_;
}
inline void ershinfo::set_dissolveinfo(::google::protobuf::int32 value) {
  set_has_dissolveinfo();
  dissolveinfo_ = value;
}

// optional string straction = 25;
inline bool ershinfo::has_straction() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ershinfo::set_has_straction() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ershinfo::clear_has_straction() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ershinfo::clear_straction() {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    straction_->clear();
  }
  clear_has_straction();
}
inline const ::std::string& ershinfo::straction() const {
  return *straction_;
}
inline void ershinfo::set_straction(const ::std::string& value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void ershinfo::set_straction(const char* value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void ershinfo::set_straction(const char* value, size_t size) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershinfo::mutable_straction() {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  return straction_;
}
inline ::std::string* ershinfo::release_straction() {
  clear_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = straction_;
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ershinfo::set_allocated_straction(::std::string* straction) {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (straction) {
    set_has_straction();
    straction_ = straction;
  } else {
    clear_has_straction();
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 payway = 26;
inline bool ershinfo::has_payway() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ershinfo::set_has_payway() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ershinfo::clear_has_payway() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ershinfo::clear_payway() {
  payway_ = 0;
  clear_has_payway();
}
inline ::google::protobuf::int32 ershinfo::payway() const {
  return payway_;
}
inline void ershinfo::set_payway(::google::protobuf::int32 value) {
  set_has_payway();
  payway_ = value;
}

// optional int32 paynum = 27;
inline bool ershinfo::has_paynum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ershinfo::set_has_paynum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ershinfo::clear_has_paynum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ershinfo::clear_paynum() {
  paynum_ = 0;
  clear_has_paynum();
}
inline ::google::protobuf::int32 ershinfo::paynum() const {
  return paynum_;
}
inline void ershinfo::set_paynum(::google::protobuf::int32 value) {
  set_has_paynum();
  paynum_ = value;
}

// optional int32 maxuser = 29;
inline bool ershinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ershinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ershinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ershinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 ershinfo::maxuser() const {
  return maxuser_;
}
inline void ershinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// repeated int32 actionlist = 30;
inline int ershinfo::actionlist_size() const {
  return actionlist_.size();
}
inline void ershinfo::clear_actionlist() {
  actionlist_.Clear();
}
inline ::google::protobuf::int32 ershinfo::actionlist(int index) const {
  return actionlist_.Get(index);
}
inline void ershinfo::set_actionlist(int index, ::google::protobuf::int32 value) {
  actionlist_.Set(index, value);
}
inline void ershinfo::add_actionlist(::google::protobuf::int32 value) {
  actionlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershinfo::actionlist() const {
  return actionlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershinfo::mutable_actionlist() {
  return &actionlist_;
}

// optional int32 deluser = 31;
inline bool ershinfo::has_deluser() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ershinfo::set_has_deluser() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ershinfo::clear_has_deluser() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ershinfo::clear_deluser() {
  deluser_ = 0;
  clear_has_deluser();
}
inline ::google::protobuf::int32 ershinfo::deluser() const {
  return deluser_;
}
inline void ershinfo::set_deluser(::google::protobuf::int32 value) {
  set_has_deluser();
  deluser_ = value;
}

// optional int32 actionuser = 32;
inline bool ershinfo::has_actionuser() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ershinfo::set_has_actionuser() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ershinfo::clear_has_actionuser() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ershinfo::clear_actionuser() {
  actionuser_ = 0;
  clear_has_actionuser();
}
inline ::google::protobuf::int32 ershinfo::actionuser() const {
  return actionuser_;
}
inline void ershinfo::set_actionuser(::google::protobuf::int32 value) {
  set_has_actionuser();
  actionuser_ = value;
}

// optional int32 usernum = 33;
inline bool ershinfo::has_usernum() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ershinfo::set_has_usernum() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ershinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ershinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 ershinfo::usernum() const {
  return usernum_;
}
inline void ershinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 julebuid = 34;
inline bool ershinfo::has_julebuid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ershinfo::set_has_julebuid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ershinfo::clear_has_julebuid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ershinfo::clear_julebuid() {
  julebuid_ = 0;
  clear_has_julebuid();
}
inline ::google::protobuf::int32 ershinfo::julebuid() const {
  return julebuid_;
}
inline void ershinfo::set_julebuid(::google::protobuf::int32 value) {
  set_has_julebuid();
  julebuid_ = value;
}

// optional int32 flag = 35;
inline bool ershinfo::has_flag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ershinfo::set_has_flag() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ershinfo::clear_has_flag() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ershinfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 ershinfo::flag() const {
  return flag_;
}
inline void ershinfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 ershtype = 36;
inline bool ershinfo::has_ershtype() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ershinfo::set_has_ershtype() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ershinfo::clear_has_ershtype() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ershinfo::clear_ershtype() {
  ershtype_ = 0;
  clear_has_ershtype();
}
inline ::google::protobuf::int32 ershinfo::ershtype() const {
  return ershtype_;
}
inline void ershinfo::set_ershtype(::google::protobuf::int32 value) {
  set_has_ershtype();
  ershtype_ = value;
}

// optional int32 dealcnt = 37;
inline bool ershinfo::has_dealcnt() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ershinfo::set_has_dealcnt() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ershinfo::clear_has_dealcnt() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ershinfo::clear_dealcnt() {
  dealcnt_ = 0;
  clear_has_dealcnt();
}
inline ::google::protobuf::int32 ershinfo::dealcnt() const {
  return dealcnt_;
}
inline void ershinfo::set_dealcnt(::google::protobuf::int32 value) {
  set_has_dealcnt();
  dealcnt_ = value;
}

// optional .progame.ershoptinfo maxactioninfo = 38;
inline bool ershinfo::has_maxactioninfo() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ershinfo::set_has_maxactioninfo() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ershinfo::clear_has_maxactioninfo() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ershinfo::clear_maxactioninfo() {
  if (maxactioninfo_ != NULL) maxactioninfo_->::progame::ershoptinfo::Clear();
  clear_has_maxactioninfo();
}
inline const ::progame::ershoptinfo& ershinfo::maxactioninfo() const {
  return maxactioninfo_ != NULL ? *maxactioninfo_ : *default_instance_->maxactioninfo_;
}
inline ::progame::ershoptinfo* ershinfo::mutable_maxactioninfo() {
  set_has_maxactioninfo();
  if (maxactioninfo_ == NULL) maxactioninfo_ = new ::progame::ershoptinfo;
  return maxactioninfo_;
}
inline ::progame::ershoptinfo* ershinfo::release_maxactioninfo() {
  clear_has_maxactioninfo();
  ::progame::ershoptinfo* temp = maxactioninfo_;
  maxactioninfo_ = NULL;
  return temp;
}
inline void ershinfo::set_allocated_maxactioninfo(::progame::ershoptinfo* maxactioninfo) {
  delete maxactioninfo_;
  maxactioninfo_ = maxactioninfo;
  if (maxactioninfo) {
    set_has_maxactioninfo();
  } else {
    clear_has_maxactioninfo();
  }
}

// optional string maxpourjetton = 39;
inline bool ershinfo::has_maxpourjetton() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ershinfo::set_has_maxpourjetton() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ershinfo::clear_has_maxpourjetton() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ershinfo::clear_maxpourjetton() {
  if (maxpourjetton_ != &::google::protobuf::internal::kEmptyString) {
    maxpourjetton_->clear();
  }
  clear_has_maxpourjetton();
}
inline const ::std::string& ershinfo::maxpourjetton() const {
  return *maxpourjetton_;
}
inline void ershinfo::set_maxpourjetton(const ::std::string& value) {
  set_has_maxpourjetton();
  if (maxpourjetton_ == &::google::protobuf::internal::kEmptyString) {
    maxpourjetton_ = new ::std::string;
  }
  maxpourjetton_->assign(value);
}
inline void ershinfo::set_maxpourjetton(const char* value) {
  set_has_maxpourjetton();
  if (maxpourjetton_ == &::google::protobuf::internal::kEmptyString) {
    maxpourjetton_ = new ::std::string;
  }
  maxpourjetton_->assign(value);
}
inline void ershinfo::set_maxpourjetton(const char* value, size_t size) {
  set_has_maxpourjetton();
  if (maxpourjetton_ == &::google::protobuf::internal::kEmptyString) {
    maxpourjetton_ = new ::std::string;
  }
  maxpourjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershinfo::mutable_maxpourjetton() {
  set_has_maxpourjetton();
  if (maxpourjetton_ == &::google::protobuf::internal::kEmptyString) {
    maxpourjetton_ = new ::std::string;
  }
  return maxpourjetton_;
}
inline ::std::string* ershinfo::release_maxpourjetton() {
  clear_has_maxpourjetton();
  if (maxpourjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = maxpourjetton_;
    maxpourjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ershinfo::set_allocated_maxpourjetton(::std::string* maxpourjetton) {
  if (maxpourjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete maxpourjetton_;
  }
  if (maxpourjetton) {
    set_has_maxpourjetton();
    maxpourjetton_ = maxpourjetton;
  } else {
    clear_has_maxpourjetton();
    maxpourjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ershhandpoker

// repeated int32 handpoker = 1;
inline int ershhandpoker::handpoker_size() const {
  return handpoker_.size();
}
inline void ershhandpoker::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 ershhandpoker::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void ershhandpoker::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void ershhandpoker::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhandpoker::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhandpoker::mutable_handpoker() {
  return &handpoker_;
}

// -------------------------------------------------------------------

// ershhistoryitem

// optional int32 leg = 1;
inline bool ershhistoryitem::has_leg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ershhistoryitem::set_has_leg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ershhistoryitem::clear_has_leg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ershhistoryitem::clear_leg() {
  leg_ = 0;
  clear_has_leg();
}
inline ::google::protobuf::int32 ershhistoryitem::leg() const {
  return leg_;
}
inline void ershhistoryitem::set_leg(::google::protobuf::int32 value) {
  set_has_leg();
  leg_ = value;
}

// optional int32 guodi = 2;
inline bool ershhistoryitem::has_guodi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ershhistoryitem::set_has_guodi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ershhistoryitem::clear_has_guodi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ershhistoryitem::clear_guodi() {
  guodi_ = 0;
  clear_has_guodi();
}
inline ::google::protobuf::int32 ershhistoryitem::guodi() const {
  return guodi_;
}
inline void ershhistoryitem::set_guodi(::google::protobuf::int32 value) {
  set_has_guodi();
  guodi_ = value;
}

// optional int32 presentbout = 3;
inline bool ershhistoryitem::has_presentbout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ershhistoryitem::set_has_presentbout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ershhistoryitem::clear_has_presentbout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ershhistoryitem::clear_presentbout() {
  presentbout_ = 0;
  clear_has_presentbout();
}
inline ::google::protobuf::int32 ershhistoryitem::presentbout() const {
  return presentbout_;
}
inline void ershhistoryitem::set_presentbout(::google::protobuf::int32 value) {
  set_has_presentbout();
  presentbout_ = value;
}

// optional int32 oncepour = 4;
inline bool ershhistoryitem::has_oncepour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ershhistoryitem::set_has_oncepour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ershhistoryitem::clear_has_oncepour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ershhistoryitem::clear_oncepour() {
  oncepour_ = 0;
  clear_has_oncepour();
}
inline ::google::protobuf::int32 ershhistoryitem::oncepour() const {
  return oncepour_;
}
inline void ershhistoryitem::set_oncepour(::google::protobuf::int32 value) {
  set_has_oncepour();
  oncepour_ = value;
}

// optional int32 winerid = 5;
inline bool ershhistoryitem::has_winerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ershhistoryitem::set_has_winerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ershhistoryitem::clear_has_winerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ershhistoryitem::clear_winerid() {
  winerid_ = 0;
  clear_has_winerid();
}
inline ::google::protobuf::int32 ershhistoryitem::winerid() const {
  return winerid_;
}
inline void ershhistoryitem::set_winerid(::google::protobuf::int32 value) {
  set_has_winerid();
  winerid_ = value;
}

// repeated int32 useridlist = 6;
inline int ershhistoryitem::useridlist_size() const {
  return useridlist_.size();
}
inline void ershhistoryitem::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 ershhistoryitem::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void ershhistoryitem::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void ershhistoryitem::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhistoryitem::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhistoryitem::mutable_useridlist() {
  return &useridlist_;
}

// repeated string nicklist = 7;
inline int ershhistoryitem::nicklist_size() const {
  return nicklist_.size();
}
inline void ershhistoryitem::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& ershhistoryitem::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* ershhistoryitem::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void ershhistoryitem::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ershhistoryitem::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ershhistoryitem::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershhistoryitem::add_nicklist() {
  return nicklist_.Add();
}
inline void ershhistoryitem::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void ershhistoryitem::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void ershhistoryitem::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ershhistoryitem::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ershhistoryitem::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 jetton = 8;
inline int ershhistoryitem::jetton_size() const {
  return jetton_.size();
}
inline void ershhistoryitem::clear_jetton() {
  jetton_.Clear();
}
inline ::google::protobuf::int32 ershhistoryitem::jetton(int index) const {
  return jetton_.Get(index);
}
inline void ershhistoryitem::set_jetton(int index, ::google::protobuf::int32 value) {
  jetton_.Set(index, value);
}
inline void ershhistoryitem::add_jetton(::google::protobuf::int32 value) {
  jetton_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhistoryitem::jetton() const {
  return jetton_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhistoryitem::mutable_jetton() {
  return &jetton_;
}

// repeated .progame.ershhandpoker pokerlist = 9;
inline int ershhistoryitem::pokerlist_size() const {
  return pokerlist_.size();
}
inline void ershhistoryitem::clear_pokerlist() {
  pokerlist_.Clear();
}
inline const ::progame::ershhandpoker& ershhistoryitem::pokerlist(int index) const {
  return pokerlist_.Get(index);
}
inline ::progame::ershhandpoker* ershhistoryitem::mutable_pokerlist(int index) {
  return pokerlist_.Mutable(index);
}
inline ::progame::ershhandpoker* ershhistoryitem::add_pokerlist() {
  return pokerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ershhandpoker >&
ershhistoryitem::pokerlist() const {
  return pokerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ershhandpoker >*
ershhistoryitem::mutable_pokerlist() {
  return &pokerlist_;
}

// repeated int32 ershtypelist = 10;
inline int ershhistoryitem::ershtypelist_size() const {
  return ershtypelist_.size();
}
inline void ershhistoryitem::clear_ershtypelist() {
  ershtypelist_.Clear();
}
inline ::google::protobuf::int32 ershhistoryitem::ershtypelist(int index) const {
  return ershtypelist_.Get(index);
}
inline void ershhistoryitem::set_ershtypelist(int index, ::google::protobuf::int32 value) {
  ershtypelist_.Set(index, value);
}
inline void ershhistoryitem::add_ershtypelist(::google::protobuf::int32 value) {
  ershtypelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhistoryitem::ershtypelist() const {
  return ershtypelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhistoryitem::mutable_ershtypelist() {
  return &ershtypelist_;
}

// repeated int32 winlist = 11;
inline int ershhistoryitem::winlist_size() const {
  return winlist_.size();
}
inline void ershhistoryitem::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 ershhistoryitem::winlist(int index) const {
  return winlist_.Get(index);
}
inline void ershhistoryitem::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void ershhistoryitem::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhistoryitem::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhistoryitem::mutable_winlist() {
  return &winlist_;
}

// repeated int32 resultlist = 17;
inline int ershhistoryitem::resultlist_size() const {
  return resultlist_.size();
}
inline void ershhistoryitem::clear_resultlist() {
  resultlist_.Clear();
}
inline ::google::protobuf::int32 ershhistoryitem::resultlist(int index) const {
  return resultlist_.Get(index);
}
inline void ershhistoryitem::set_resultlist(int index, ::google::protobuf::int32 value) {
  resultlist_.Set(index, value);
}
inline void ershhistoryitem::add_resultlist(::google::protobuf::int32 value) {
  resultlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhistoryitem::resultlist() const {
  return resultlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhistoryitem::mutable_resultlist() {
  return &resultlist_;
}

// -------------------------------------------------------------------

// ershhistory

// optional int32 tableid = 1;
inline bool ershhistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ershhistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ershhistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ershhistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ershhistory::tableid() const {
  return tableid_;
}
inline void ershhistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 playnummax = 2;
inline bool ershhistory::has_playnummax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ershhistory::set_has_playnummax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ershhistory::clear_has_playnummax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ershhistory::clear_playnummax() {
  playnummax_ = 0;
  clear_has_playnummax();
}
inline ::google::protobuf::int32 ershhistory::playnummax() const {
  return playnummax_;
}
inline void ershhistory::set_playnummax(::google::protobuf::int32 value) {
  set_has_playnummax();
  playnummax_ = value;
}

// optional int32 playnum = 3;
inline bool ershhistory::has_playnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ershhistory::set_has_playnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ershhistory::clear_has_playnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ershhistory::clear_playnum() {
  playnum_ = 0;
  clear_has_playnum();
}
inline ::google::protobuf::int32 ershhistory::playnum() const {
  return playnum_;
}
inline void ershhistory::set_playnum(::google::protobuf::int32 value) {
  set_has_playnum();
  playnum_ = value;
}

// optional int32 difen = 4;
inline bool ershhistory::has_difen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ershhistory::set_has_difen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ershhistory::clear_has_difen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ershhistory::clear_difen() {
  difen_ = 0;
  clear_has_difen();
}
inline ::google::protobuf::int32 ershhistory::difen() const {
  return difen_;
}
inline void ershhistory::set_difen(::google::protobuf::int32 value) {
  set_has_difen();
  difen_ = value;
}

// optional int32 gametime = 6;
inline bool ershhistory::has_gametime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ershhistory::set_has_gametime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ershhistory::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ershhistory::clear_gametime() {
  gametime_ = 0;
  clear_has_gametime();
}
inline ::google::protobuf::int32 ershhistory::gametime() const {
  return gametime_;
}
inline void ershhistory::set_gametime(::google::protobuf::int32 value) {
  set_has_gametime();
  gametime_ = value;
}

// optional int32 ownerid = 7;
inline bool ershhistory::has_ownerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ershhistory::set_has_ownerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ershhistory::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ershhistory::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 ershhistory::ownerid() const {
  return ownerid_;
}
inline void ershhistory::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// repeated string nicklist = 8;
inline int ershhistory::nicklist_size() const {
  return nicklist_.size();
}
inline void ershhistory::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& ershhistory::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* ershhistory::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void ershhistory::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ershhistory::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ershhistory::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ershhistory::add_nicklist() {
  return nicklist_.Add();
}
inline void ershhistory::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void ershhistory::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void ershhistory::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ershhistory::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ershhistory::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 useridlist = 9;
inline int ershhistory::useridlist_size() const {
  return useridlist_.size();
}
inline void ershhistory::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 ershhistory::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void ershhistory::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void ershhistory::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhistory::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhistory::mutable_useridlist() {
  return &useridlist_;
}

// repeated int32 winlist = 10;
inline int ershhistory::winlist_size() const {
  return winlist_.size();
}
inline void ershhistory::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 ershhistory::winlist(int index) const {
  return winlist_.Get(index);
}
inline void ershhistory::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void ershhistory::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershhistory::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershhistory::mutable_winlist() {
  return &winlist_;
}

// repeated .progame.ershhistoryitem hitemlist = 11;
inline int ershhistory::hitemlist_size() const {
  return hitemlist_.size();
}
inline void ershhistory::clear_hitemlist() {
  hitemlist_.Clear();
}
inline const ::progame::ershhistoryitem& ershhistory::hitemlist(int index) const {
  return hitemlist_.Get(index);
}
inline ::progame::ershhistoryitem* ershhistory::mutable_hitemlist(int index) {
  return hitemlist_.Mutable(index);
}
inline ::progame::ershhistoryitem* ershhistory::add_hitemlist() {
  return hitemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ershhistoryitem >&
ershhistory::hitemlist() const {
  return hitemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ershhistoryitem >*
ershhistory::mutable_hitemlist() {
  return &hitemlist_;
}

// -------------------------------------------------------------------

// ershcardlist

// repeated int32 list = 1;
inline int ershcardlist::list_size() const {
  return list_.size();
}
inline void ershcardlist::clear_list() {
  list_.Clear();
}
inline ::google::protobuf::int32 ershcardlist::list(int index) const {
  return list_.Get(index);
}
inline void ershcardlist::set_list(int index, ::google::protobuf::int32 value) {
  list_.Set(index, value);
}
inline void ershcardlist::add_list(::google::protobuf::int32 value) {
  list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ershcardlist::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ershcardlist::mutable_list() {
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fersh_2eproto__INCLUDED
