// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_ernn.proto

#ifndef PROTOBUF_st_5fernn_2eproto__INCLUDED
#define PROTOBUF_st_5fernn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fernn_2eproto();
void protobuf_AssignDesc_st_5fernn_2eproto();
void protobuf_ShutdownFile_st_5fernn_2eproto();

class ernnuser;
class ernninfo;
class ernnhandpoker;
class ernnspecialtype;
class ernnhistoryitem;
class ernnhistory;

// ===================================================================

class ernnuser : public ::google::protobuf::Message {
 public:
  ernnuser();
  virtual ~ernnuser();

  ernnuser(const ernnuser& from);

  inline ernnuser& operator=(const ernnuser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ernnuser& default_instance();

  void Swap(ernnuser* other);

  // implements Message ----------------------------------------------

  ernnuser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ernnuser& from);
  void MergeFrom(const ernnuser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // repeated int32 handpoker = 2;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 2;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string carryjetton = 4;
  inline bool has_carryjetton() const;
  inline void clear_carryjetton();
  static const int kCarryjettonFieldNumber = 4;
  inline const ::std::string& carryjetton() const;
  inline void set_carryjetton(const ::std::string& value);
  inline void set_carryjetton(const char* value);
  inline void set_carryjetton(const char* value, size_t size);
  inline ::std::string* mutable_carryjetton();
  inline ::std::string* release_carryjetton();
  inline void set_allocated_carryjetton(::std::string* carryjetton);

  // optional string faceid = 5;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 5;
  inline const ::std::string& faceid() const;
  inline void set_faceid(const ::std::string& value);
  inline void set_faceid(const char* value);
  inline void set_faceid(const char* value, size_t size);
  inline ::std::string* mutable_faceid();
  inline ::std::string* release_faceid();
  inline void set_allocated_faceid(::std::string* faceid);

  // optional int32 chairid = 6;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 6;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 pourtype = 8;
  inline bool has_pourtype() const;
  inline void clear_pourtype();
  static const int kPourtypeFieldNumber = 8;
  inline ::google::protobuf::int32 pourtype() const;
  inline void set_pourtype(::google::protobuf::int32 value);

  // optional int32 jetton = 9;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 9;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 state = 10;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 10;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 nntype = 11;
  inline bool has_nntype() const;
  inline void clear_nntype();
  static const int kNntypeFieldNumber = 11;
  inline ::google::protobuf::int32 nntype() const;
  inline void set_nntype(::google::protobuf::int32 value);

  // optional int32 basicsmul = 12;
  inline bool has_basicsmul() const;
  inline void clear_basicsmul();
  static const int kBasicsmulFieldNumber = 12;
  inline ::google::protobuf::int32 basicsmul() const;
  inline void set_basicsmul(::google::protobuf::int32 value);

  // optional string location = 13;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 13;
  inline const ::std::string& location() const;
  inline void set_location(const ::std::string& value);
  inline void set_location(const char* value);
  inline void set_location(const char* value, size_t size);
  inline ::std::string* mutable_location();
  inline ::std::string* release_location();
  inline void set_allocated_location(::std::string* location);

  // optional int32 winnum = 14;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 14;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional int32 maxdntype = 15;
  inline bool has_maxdntype() const;
  inline void clear_maxdntype();
  static const int kMaxdntypeFieldNumber = 15;
  inline ::google::protobuf::int32 maxdntype() const;
  inline void set_maxdntype(::google::protobuf::int32 value);

  // optional int32 maxscore = 16;
  inline bool has_maxscore() const;
  inline void clear_maxscore();
  static const int kMaxscoreFieldNumber = 16;
  inline ::google::protobuf::int32 maxscore() const;
  inline void set_maxscore(::google::protobuf::int32 value);

  // optional int32 bankernum = 17;
  inline bool has_bankernum() const;
  inline void clear_bankernum();
  static const int kBankernumFieldNumber = 17;
  inline ::google::protobuf::int32 bankernum() const;
  inline void set_bankernum(::google::protobuf::int32 value);

  // optional int32 volun = 18;
  inline bool has_volun() const;
  inline void clear_volun();
  static const int kVolunFieldNumber = 18;
  inline ::google::protobuf::int32 volun() const;
  inline void set_volun(::google::protobuf::int32 value);

  // optional int32 overtimenum = 19;
  inline bool has_overtimenum() const;
  inline void clear_overtimenum();
  static const int kOvertimenumFieldNumber = 19;
  inline ::google::protobuf::int32 overtimenum() const;
  inline void set_overtimenum(::google::protobuf::int32 value);

  // optional int32 trusteeship = 20;
  inline bool has_trusteeship() const;
  inline void clear_trusteeship();
  static const int kTrusteeshipFieldNumber = 20;
  inline ::google::protobuf::int32 trusteeship() const;
  inline void set_trusteeship(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.ernnuser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_carryjetton();
  inline void clear_has_carryjetton();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_pourtype();
  inline void clear_has_pourtype();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_nntype();
  inline void clear_has_nntype();
  inline void set_has_basicsmul();
  inline void clear_has_basicsmul();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_maxdntype();
  inline void clear_has_maxdntype();
  inline void set_has_maxscore();
  inline void clear_has_maxscore();
  inline void set_has_bankernum();
  inline void clear_has_bankernum();
  inline void set_has_volun();
  inline void clear_has_volun();
  inline void set_has_overtimenum();
  inline void clear_has_overtimenum();
  inline void set_has_trusteeship();
  inline void clear_has_trusteeship();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;
  ::std::string* nickname_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 chairid_;
  ::std::string* carryjetton_;
  ::std::string* faceid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 pourtype_;
  ::google::protobuf::int32 jetton_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 nntype_;
  ::google::protobuf::int32 basicsmul_;
  ::std::string* location_;
  ::google::protobuf::int32 winnum_;
  ::google::protobuf::int32 maxdntype_;
  ::google::protobuf::int32 maxscore_;
  ::google::protobuf::int32 bankernum_;
  ::google::protobuf::int32 volun_;
  ::google::protobuf::int32 overtimenum_;
  ::google::protobuf::int32 trusteeship_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fernn_2eproto();
  friend void protobuf_AssignDesc_st_5fernn_2eproto();
  friend void protobuf_ShutdownFile_st_5fernn_2eproto();

  void InitAsDefaultInstance();
  static ernnuser* default_instance_;
};
// -------------------------------------------------------------------

class ernninfo : public ::google::protobuf::Message {
 public:
  ernninfo();
  virtual ~ernninfo();

  ernninfo(const ernninfo& from);

  inline ernninfo& operator=(const ernninfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ernninfo& default_instance();

  void Swap(ernninfo* other);

  // implements Message ----------------------------------------------

  ernninfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ernninfo& from);
  void MergeFrom(const ernninfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 tablemark = 2;
  inline bool has_tablemark() const;
  inline void clear_tablemark();
  static const int kTablemarkFieldNumber = 2;
  inline ::google::protobuf::int32 tablemark() const;
  inline void set_tablemark(::google::protobuf::int32 value);

  // optional int32 tabletime = 3;
  inline bool has_tabletime() const;
  inline void clear_tabletime();
  static const int kTabletimeFieldNumber = 3;
  inline ::google::protobuf::int32 tabletime() const;
  inline void set_tabletime(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // optional int32 viptable = 6;
  inline bool has_viptable() const;
  inline void clear_viptable();
  static const int kViptableFieldNumber = 6;
  inline ::google::protobuf::int32 viptable() const;
  inline void set_viptable(::google::protobuf::int32 value);

  // optional int32 julebuid = 7;
  inline bool has_julebuid() const;
  inline void clear_julebuid();
  static const int kJulebuidFieldNumber = 7;
  inline ::google::protobuf::int32 julebuid() const;
  inline void set_julebuid(::google::protobuf::int32 value);

  // optional int32 tabletype = 8;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 8;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 dntype = 9;
  inline bool has_dntype() const;
  inline void clear_dntype();
  static const int kDntypeFieldNumber = 9;
  inline ::google::protobuf::int32 dntype() const;
  inline void set_dntype(::google::protobuf::int32 value);

  // optional int32 difen = 10;
  inline bool has_difen() const;
  inline void clear_difen();
  static const int kDifenFieldNumber = 10;
  inline ::google::protobuf::int32 difen() const;
  inline void set_difen(::google::protobuf::int32 value);

  // optional int32 maxplaynum = 11;
  inline bool has_maxplaynum() const;
  inline void clear_maxplaynum();
  static const int kMaxplaynumFieldNumber = 11;
  inline ::google::protobuf::int32 maxplaynum() const;
  inline void set_maxplaynum(::google::protobuf::int32 value);

  // optional int32 paytype = 12;
  inline bool has_paytype() const;
  inline void clear_paytype();
  static const int kPaytypeFieldNumber = 12;
  inline ::google::protobuf::int32 paytype() const;
  inline void set_paytype(::google::protobuf::int32 value);

  // repeated int32 mullist = 13;
  inline int mullist_size() const;
  inline void clear_mullist();
  static const int kMullistFieldNumber = 13;
  inline ::google::protobuf::int32 mullist(int index) const;
  inline void set_mullist(int index, ::google::protobuf::int32 value);
  inline void add_mullist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mullist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mullist();

  // optional int32 typeodds = 14;
  inline bool has_typeodds() const;
  inline void clear_typeodds();
  static const int kTypeoddsFieldNumber = 14;
  inline ::google::protobuf::int32 typeodds() const;
  inline void set_typeodds(::google::protobuf::int32 value);

  // optional string specialtype = 15;
  inline bool has_specialtype() const;
  inline void clear_specialtype();
  static const int kSpecialtypeFieldNumber = 15;
  inline const ::std::string& specialtype() const;
  inline void set_specialtype(const ::std::string& value);
  inline void set_specialtype(const char* value);
  inline void set_specialtype(const char* value, size_t size);
  inline ::std::string* mutable_specialtype();
  inline ::std::string* release_specialtype();
  inline void set_allocated_specialtype(::std::string* specialtype);

  // optional int32 restrict = 16;
  inline bool has_restrict() const;
  inline void clear_restrict();
  static const int kRestrictFieldNumber = 16;
  inline ::google::protobuf::int32 restrict() const;
  inline void set_restrict(::google::protobuf::int32 value);

  // optional int32 integralmax = 17;
  inline bool has_integralmax() const;
  inline void clear_integralmax();
  static const int kIntegralmaxFieldNumber = 17;
  inline ::google::protobuf::int32 integralmax() const;
  inline void set_integralmax(::google::protobuf::int32 value);

  // optional int32 bankermultiple = 18;
  inline bool has_bankermultiple() const;
  inline void clear_bankermultiple();
  static const int kBankermultipleFieldNumber = 18;
  inline ::google::protobuf::int32 bankermultiple() const;
  inline void set_bankermultiple(::google::protobuf::int32 value);

  // optional int32 ownerid = 19;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 19;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // optional int32 bankerID = 20;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankerIDFieldNumber = 20;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // repeated .progame.ernnuser situser = 21;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 21;
  inline const ::progame::ernnuser& situser(int index) const;
  inline ::progame::ernnuser* mutable_situser(int index);
  inline ::progame::ernnuser* add_situser();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ernnuser >&
      situser() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ernnuser >*
      mutable_situser();

  // repeated int32 standuser = 22;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 22;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional int32 usernum = 23;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 23;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 usevipnum = 24;
  inline bool has_usevipnum() const;
  inline void clear_usevipnum();
  static const int kUsevipnumFieldNumber = 24;
  inline ::google::protobuf::int32 usevipnum() const;
  inline void set_usevipnum(::google::protobuf::int32 value);

  // optional int32 dissolveinfo = 25;
  inline bool has_dissolveinfo() const;
  inline void clear_dissolveinfo();
  static const int kDissolveinfoFieldNumber = 25;
  inline ::google::protobuf::int32 dissolveinfo() const;
  inline void set_dissolveinfo(::google::protobuf::int32 value);

  // optional string straction = 26;
  inline bool has_straction() const;
  inline void clear_straction();
  static const int kStractionFieldNumber = 26;
  inline const ::std::string& straction() const;
  inline void set_straction(const ::std::string& value);
  inline void set_straction(const char* value);
  inline void set_straction(const char* value, size_t size);
  inline ::std::string* mutable_straction();
  inline ::std::string* release_straction();
  inline void set_allocated_straction(::std::string* straction);

  // optional int32 frameid = 27;
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 27;
  inline ::google::protobuf::int32 frameid() const;
  inline void set_frameid(::google::protobuf::int32 value);

  // optional int32 basicsmul = 28;
  inline bool has_basicsmul() const;
  inline void clear_basicsmul();
  static const int kBasicsmulFieldNumber = 28;
  inline ::google::protobuf::int32 basicsmul() const;
  inline void set_basicsmul(::google::protobuf::int32 value);

  // optional int32 bankerindex = 29;
  inline bool has_bankerindex() const;
  inline void clear_bankerindex();
  static const int kBankerindexFieldNumber = 29;
  inline ::google::protobuf::int32 bankerindex() const;
  inline void set_bankerindex(::google::protobuf::int32 value);

  // optional int32 payway = 30;
  inline bool has_payway() const;
  inline void clear_payway();
  static const int kPaywayFieldNumber = 30;
  inline ::google::protobuf::int32 payway() const;
  inline void set_payway(::google::protobuf::int32 value);

  // optional int32 paynum = 31;
  inline bool has_paynum() const;
  inline void clear_paynum();
  static const int kPaynumFieldNumber = 31;
  inline ::google::protobuf::int32 paynum() const;
  inline void set_paynum(::google::protobuf::int32 value);

  // repeated int32 pokerlist = 32;
  inline int pokerlist_size() const;
  inline void clear_pokerlist();
  static const int kPokerlistFieldNumber = 32;
  inline ::google::protobuf::int32 pokerlist(int index) const;
  inline void set_pokerlist(int index, ::google::protobuf::int32 value);
  inline void add_pokerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pokerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pokerlist();

  // optional int32 autoready = 33;
  inline bool has_autoready() const;
  inline void clear_autoready();
  static const int kAutoreadyFieldNumber = 33;
  inline ::google::protobuf::int32 autoready() const;
  inline void set_autoready(::google::protobuf::int32 value);

  // optional int32 banker_no = 34;
  inline bool has_banker_no() const;
  inline void clear_banker_no();
  static const int kBankerNoFieldNumber = 34;
  inline ::google::protobuf::int32 banker_no() const;
  inline void set_banker_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.ernninfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablemark();
  inline void clear_has_tablemark();
  inline void set_has_tabletime();
  inline void clear_has_tabletime();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_viptable();
  inline void clear_has_viptable();
  inline void set_has_julebuid();
  inline void clear_has_julebuid();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_dntype();
  inline void clear_has_dntype();
  inline void set_has_difen();
  inline void clear_has_difen();
  inline void set_has_maxplaynum();
  inline void clear_has_maxplaynum();
  inline void set_has_paytype();
  inline void clear_has_paytype();
  inline void set_has_typeodds();
  inline void clear_has_typeodds();
  inline void set_has_specialtype();
  inline void clear_has_specialtype();
  inline void set_has_restrict();
  inline void clear_has_restrict();
  inline void set_has_integralmax();
  inline void clear_has_integralmax();
  inline void set_has_bankermultiple();
  inline void clear_has_bankermultiple();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_usevipnum();
  inline void clear_has_usevipnum();
  inline void set_has_dissolveinfo();
  inline void clear_has_dissolveinfo();
  inline void set_has_straction();
  inline void clear_has_straction();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_basicsmul();
  inline void clear_has_basicsmul();
  inline void set_has_bankerindex();
  inline void clear_has_bankerindex();
  inline void set_has_payway();
  inline void clear_has_payway();
  inline void set_has_paynum();
  inline void clear_has_paynum();
  inline void set_has_autoready();
  inline void clear_has_autoready();
  inline void set_has_banker_no();
  inline void clear_has_banker_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tablemark_;
  ::google::protobuf::int32 tabletime_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::int32 viptable_;
  ::google::protobuf::int32 julebuid_;
  ::google::protobuf::int32 tabletype_;
  ::google::protobuf::int32 dntype_;
  ::google::protobuf::int32 difen_;
  ::google::protobuf::int32 maxplaynum_;
  ::google::protobuf::int32 paytype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mullist_;
  ::std::string* specialtype_;
  ::google::protobuf::int32 typeodds_;
  ::google::protobuf::int32 restrict_;
  ::google::protobuf::int32 integralmax_;
  ::google::protobuf::int32 bankermultiple_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::RepeatedPtrField< ::progame::ernnuser > situser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 usevipnum_;
  ::std::string* straction_;
  ::google::protobuf::int32 dissolveinfo_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 basicsmul_;
  ::google::protobuf::int32 bankerindex_;
  ::google::protobuf::int32 payway_;
  ::google::protobuf::int32 paynum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pokerlist_;
  ::google::protobuf::int32 autoready_;
  ::google::protobuf::int32 banker_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(34 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fernn_2eproto();
  friend void protobuf_AssignDesc_st_5fernn_2eproto();
  friend void protobuf_ShutdownFile_st_5fernn_2eproto();

  void InitAsDefaultInstance();
  static ernninfo* default_instance_;
};
// -------------------------------------------------------------------

class ernnhandpoker : public ::google::protobuf::Message {
 public:
  ernnhandpoker();
  virtual ~ernnhandpoker();

  ernnhandpoker(const ernnhandpoker& from);

  inline ernnhandpoker& operator=(const ernnhandpoker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ernnhandpoker& default_instance();

  void Swap(ernnhandpoker* other);

  // implements Message ----------------------------------------------

  ernnhandpoker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ernnhandpoker& from);
  void MergeFrom(const ernnhandpoker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 handpoker = 1;
  inline int handpoker_size() const;
  inline void clear_handpoker();
  static const int kHandpokerFieldNumber = 1;
  inline ::google::protobuf::int32 handpoker(int index) const;
  inline void set_handpoker(int index, ::google::protobuf::int32 value);
  inline void add_handpoker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handpoker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handpoker();

  // @@protoc_insertion_point(class_scope:progame.ernnhandpoker)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handpoker_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fernn_2eproto();
  friend void protobuf_AssignDesc_st_5fernn_2eproto();
  friend void protobuf_ShutdownFile_st_5fernn_2eproto();

  void InitAsDefaultInstance();
  static ernnhandpoker* default_instance_;
};
// -------------------------------------------------------------------

class ernnspecialtype : public ::google::protobuf::Message {
 public:
  ernnspecialtype();
  virtual ~ernnspecialtype();

  ernnspecialtype(const ernnspecialtype& from);

  inline ernnspecialtype& operator=(const ernnspecialtype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ernnspecialtype& default_instance();

  void Swap(ernnspecialtype* other);

  // implements Message ----------------------------------------------

  ernnspecialtype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ernnspecialtype& from);
  void MergeFrom(const ernnspecialtype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zhadan = 1;
  inline bool has_zhadan() const;
  inline void clear_zhadan();
  static const int kZhadanFieldNumber = 1;
  inline ::google::protobuf::int32 zhadan() const;
  inline void set_zhadan(::google::protobuf::int32 value);

  // optional int32 wuhua = 2;
  inline bool has_wuhua() const;
  inline void clear_wuhua();
  static const int kWuhuaFieldNumber = 2;
  inline ::google::protobuf::int32 wuhua() const;
  inline void set_wuhua(::google::protobuf::int32 value);

  // optional int32 wuxiao = 3;
  inline bool has_wuxiao() const;
  inline void clear_wuxiao();
  static const int kWuxiaoFieldNumber = 3;
  inline ::google::protobuf::int32 wuxiao() const;
  inline void set_wuxiao(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.ernnspecialtype)
 private:
  inline void set_has_zhadan();
  inline void clear_has_zhadan();
  inline void set_has_wuhua();
  inline void clear_has_wuhua();
  inline void set_has_wuxiao();
  inline void clear_has_wuxiao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 zhadan_;
  ::google::protobuf::int32 wuhua_;
  ::google::protobuf::int32 wuxiao_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fernn_2eproto();
  friend void protobuf_AssignDesc_st_5fernn_2eproto();
  friend void protobuf_ShutdownFile_st_5fernn_2eproto();

  void InitAsDefaultInstance();
  static ernnspecialtype* default_instance_;
};
// -------------------------------------------------------------------

class ernnhistoryitem : public ::google::protobuf::Message {
 public:
  ernnhistoryitem();
  virtual ~ernnhistoryitem();

  ernnhistoryitem(const ernnhistoryitem& from);

  inline ernnhistoryitem& operator=(const ernnhistoryitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ernnhistoryitem& default_instance();

  void Swap(ernnhistoryitem* other);

  // implements Message ----------------------------------------------

  ernnhistoryitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ernnhistoryitem& from);
  void MergeFrom(const ernnhistoryitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 leg = 1;
  inline bool has_leg() const;
  inline void clear_leg();
  static const int kLegFieldNumber = 1;
  inline ::google::protobuf::int32 leg() const;
  inline void set_leg(::google::protobuf::int32 value);

  // optional int32 bankerID = 2;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankerIDFieldNumber = 2;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // repeated int32 useridlist = 3;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 3;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated string nicklist = 4;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 4;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 winlist = 5;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 5;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // repeated .progame.ernnhandpoker pokerlist = 6;
  inline int pokerlist_size() const;
  inline void clear_pokerlist();
  static const int kPokerlistFieldNumber = 6;
  inline const ::progame::ernnhandpoker& pokerlist(int index) const;
  inline ::progame::ernnhandpoker* mutable_pokerlist(int index);
  inline ::progame::ernnhandpoker* add_pokerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ernnhandpoker >&
      pokerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ernnhandpoker >*
      mutable_pokerlist();

  // repeated int32 nntypelist = 7;
  inline int nntypelist_size() const;
  inline void clear_nntypelist();
  static const int kNntypelistFieldNumber = 7;
  inline ::google::protobuf::int32 nntypelist(int index) const;
  inline void set_nntypelist(int index, ::google::protobuf::int32 value);
  inline void add_nntypelist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nntypelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nntypelist();

  // repeated int32 qzbslist = 8;
  inline int qzbslist_size() const;
  inline void clear_qzbslist();
  static const int kQzbslistFieldNumber = 8;
  inline ::google::protobuf::int32 qzbslist(int index) const;
  inline void set_qzbslist(int index, ::google::protobuf::int32 value);
  inline void add_qzbslist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qzbslist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qzbslist();

  // repeated int32 pournumlist = 9;
  inline int pournumlist_size() const;
  inline void clear_pournumlist();
  static const int kPournumlistFieldNumber = 9;
  inline ::google::protobuf::int32 pournumlist(int index) const;
  inline void set_pournumlist(int index, ::google::protobuf::int32 value);
  inline void add_pournumlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pournumlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pournumlist();

  // @@protoc_insertion_point(class_scope:progame.ernnhistoryitem)
 private:
  inline void set_has_leg();
  inline void clear_has_leg();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 leg_;
  ::google::protobuf::int32 bankerid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::ernnhandpoker > pokerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nntypelist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qzbslist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pournumlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fernn_2eproto();
  friend void protobuf_AssignDesc_st_5fernn_2eproto();
  friend void protobuf_ShutdownFile_st_5fernn_2eproto();

  void InitAsDefaultInstance();
  static ernnhistoryitem* default_instance_;
};
// -------------------------------------------------------------------

class ernnhistory : public ::google::protobuf::Message {
 public:
  ernnhistory();
  virtual ~ernnhistory();

  ernnhistory(const ernnhistory& from);

  inline ernnhistory& operator=(const ernnhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ernnhistory& default_instance();

  void Swap(ernnhistory* other);

  // implements Message ----------------------------------------------

  ernnhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ernnhistory& from);
  void MergeFrom(const ernnhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 playnummax = 2;
  inline bool has_playnummax() const;
  inline void clear_playnummax();
  static const int kPlaynummaxFieldNumber = 2;
  inline ::google::protobuf::int32 playnummax() const;
  inline void set_playnummax(::google::protobuf::int32 value);

  // optional int32 playnum = 3;
  inline bool has_playnum() const;
  inline void clear_playnum();
  static const int kPlaynumFieldNumber = 3;
  inline ::google::protobuf::int32 playnum() const;
  inline void set_playnum(::google::protobuf::int32 value);

  // optional int32 difen = 4;
  inline bool has_difen() const;
  inline void clear_difen();
  static const int kDifenFieldNumber = 4;
  inline ::google::protobuf::int32 difen() const;
  inline void set_difen(::google::protobuf::int32 value);

  // optional int32 dntypelist = 5;
  inline bool has_dntypelist() const;
  inline void clear_dntypelist();
  static const int kDntypelistFieldNumber = 5;
  inline ::google::protobuf::int32 dntypelist() const;
  inline void set_dntypelist(::google::protobuf::int32 value);

  // optional int32 gametime = 6;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGametimeFieldNumber = 6;
  inline ::google::protobuf::int32 gametime() const;
  inline void set_gametime(::google::protobuf::int32 value);

  // optional int32 ownerid = 7;
  inline bool has_ownerid() const;
  inline void clear_ownerid();
  static const int kOwneridFieldNumber = 7;
  inline ::google::protobuf::int32 ownerid() const;
  inline void set_ownerid(::google::protobuf::int32 value);

  // repeated string nicklist = 8;
  inline int nicklist_size() const;
  inline void clear_nicklist();
  static const int kNicklistFieldNumber = 8;
  inline const ::std::string& nicklist(int index) const;
  inline ::std::string* mutable_nicklist(int index);
  inline void set_nicklist(int index, const ::std::string& value);
  inline void set_nicklist(int index, const char* value);
  inline void set_nicklist(int index, const char* value, size_t size);
  inline ::std::string* add_nicklist();
  inline void add_nicklist(const ::std::string& value);
  inline void add_nicklist(const char* value);
  inline void add_nicklist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nicklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nicklist();

  // repeated int32 useridlist = 9;
  inline int useridlist_size() const;
  inline void clear_useridlist();
  static const int kUseridlistFieldNumber = 9;
  inline ::google::protobuf::int32 useridlist(int index) const;
  inline void set_useridlist(int index, ::google::protobuf::int32 value);
  inline void add_useridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      useridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_useridlist();

  // repeated int32 winlist = 10;
  inline int winlist_size() const;
  inline void clear_winlist();
  static const int kWinlistFieldNumber = 10;
  inline ::google::protobuf::int32 winlist(int index) const;
  inline void set_winlist(int index, ::google::protobuf::int32 value);
  inline void add_winlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      winlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_winlist();

  // repeated .progame.ernnhistoryitem hitemlist = 11;
  inline int hitemlist_size() const;
  inline void clear_hitemlist();
  static const int kHitemlistFieldNumber = 11;
  inline const ::progame::ernnhistoryitem& hitemlist(int index) const;
  inline ::progame::ernnhistoryitem* mutable_hitemlist(int index);
  inline ::progame::ernnhistoryitem* add_hitemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::progame::ernnhistoryitem >&
      hitemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::progame::ernnhistoryitem >*
      mutable_hitemlist();

  // optional int32 tablemark = 12;
  inline bool has_tablemark() const;
  inline void clear_tablemark();
  static const int kTablemarkFieldNumber = 12;
  inline ::google::protobuf::int32 tablemark() const;
  inline void set_tablemark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.ernnhistory)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_playnummax();
  inline void clear_has_playnummax();
  inline void set_has_playnum();
  inline void clear_has_playnum();
  inline void set_has_difen();
  inline void clear_has_difen();
  inline void set_has_dntypelist();
  inline void clear_has_dntypelist();
  inline void set_has_gametime();
  inline void clear_has_gametime();
  inline void set_has_ownerid();
  inline void clear_has_ownerid();
  inline void set_has_tablemark();
  inline void clear_has_tablemark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 playnummax_;
  ::google::protobuf::int32 playnum_;
  ::google::protobuf::int32 difen_;
  ::google::protobuf::int32 dntypelist_;
  ::google::protobuf::int32 gametime_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nicklist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > useridlist_;
  ::google::protobuf::int32 ownerid_;
  ::google::protobuf::int32 tablemark_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > winlist_;
  ::google::protobuf::RepeatedPtrField< ::progame::ernnhistoryitem > hitemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fernn_2eproto();
  friend void protobuf_AssignDesc_st_5fernn_2eproto();
  friend void protobuf_ShutdownFile_st_5fernn_2eproto();

  void InitAsDefaultInstance();
  static ernnhistory* default_instance_;
};
// ===================================================================


// ===================================================================

// ernnuser

// optional int32 userid = 1;
inline bool ernnuser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ernnuser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ernnuser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ernnuser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ernnuser::userid() const {
  return userid_;
}
inline void ernnuser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// repeated int32 handpoker = 2;
inline int ernnuser::handpoker_size() const {
  return handpoker_.size();
}
inline void ernnuser::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 ernnuser::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void ernnuser::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void ernnuser::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnuser::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnuser::mutable_handpoker() {
  return &handpoker_;
}

// optional string nickname = 3;
inline bool ernnuser::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ernnuser::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ernnuser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ernnuser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ernnuser::nickname() const {
  return *nickname_;
}
inline void ernnuser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ernnuser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ernnuser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernnuser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ernnuser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ernnuser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string carryjetton = 4;
inline bool ernnuser::has_carryjetton() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ernnuser::set_has_carryjetton() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ernnuser::clear_has_carryjetton() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ernnuser::clear_carryjetton() {
  if (carryjetton_ != &::google::protobuf::internal::kEmptyString) {
    carryjetton_->clear();
  }
  clear_has_carryjetton();
}
inline const ::std::string& ernnuser::carryjetton() const {
  return *carryjetton_;
}
inline void ernnuser::set_carryjetton(const ::std::string& value) {
  set_has_carryjetton();
  if (carryjetton_ == &::google::protobuf::internal::kEmptyString) {
    carryjetton_ = new ::std::string;
  }
  carryjetton_->assign(value);
}
inline void ernnuser::set_carryjetton(const char* value) {
  set_has_carryjetton();
  if (carryjetton_ == &::google::protobuf::internal::kEmptyString) {
    carryjetton_ = new ::std::string;
  }
  carryjetton_->assign(value);
}
inline void ernnuser::set_carryjetton(const char* value, size_t size) {
  set_has_carryjetton();
  if (carryjetton_ == &::google::protobuf::internal::kEmptyString) {
    carryjetton_ = new ::std::string;
  }
  carryjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernnuser::mutable_carryjetton() {
  set_has_carryjetton();
  if (carryjetton_ == &::google::protobuf::internal::kEmptyString) {
    carryjetton_ = new ::std::string;
  }
  return carryjetton_;
}
inline ::std::string* ernnuser::release_carryjetton() {
  clear_has_carryjetton();
  if (carryjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = carryjetton_;
    carryjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ernnuser::set_allocated_carryjetton(::std::string* carryjetton) {
  if (carryjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete carryjetton_;
  }
  if (carryjetton) {
    set_has_carryjetton();
    carryjetton_ = carryjetton;
  } else {
    clear_has_carryjetton();
    carryjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string faceid = 5;
inline bool ernnuser::has_faceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ernnuser::set_has_faceid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ernnuser::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ernnuser::clear_faceid() {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    faceid_->clear();
  }
  clear_has_faceid();
}
inline const ::std::string& ernnuser::faceid() const {
  return *faceid_;
}
inline void ernnuser::set_faceid(const ::std::string& value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void ernnuser::set_faceid(const char* value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void ernnuser::set_faceid(const char* value, size_t size) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernnuser::mutable_faceid() {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  return faceid_;
}
inline ::std::string* ernnuser::release_faceid() {
  clear_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faceid_;
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ernnuser::set_allocated_faceid(::std::string* faceid) {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (faceid) {
    set_has_faceid();
    faceid_ = faceid;
  } else {
    clear_has_faceid();
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 chairid = 6;
inline bool ernnuser::has_chairid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ernnuser::set_has_chairid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ernnuser::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ernnuser::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 ernnuser::chairid() const {
  return chairid_;
}
inline void ernnuser::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 sex = 7;
inline bool ernnuser::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ernnuser::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ernnuser::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ernnuser::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 ernnuser::sex() const {
  return sex_;
}
inline void ernnuser::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 pourtype = 8;
inline bool ernnuser::has_pourtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ernnuser::set_has_pourtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ernnuser::clear_has_pourtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ernnuser::clear_pourtype() {
  pourtype_ = 0;
  clear_has_pourtype();
}
inline ::google::protobuf::int32 ernnuser::pourtype() const {
  return pourtype_;
}
inline void ernnuser::set_pourtype(::google::protobuf::int32 value) {
  set_has_pourtype();
  pourtype_ = value;
}

// optional int32 jetton = 9;
inline bool ernnuser::has_jetton() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ernnuser::set_has_jetton() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ernnuser::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ernnuser::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 ernnuser::jetton() const {
  return jetton_;
}
inline void ernnuser::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 state = 10;
inline bool ernnuser::has_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ernnuser::set_has_state() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ernnuser::clear_has_state() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ernnuser::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ernnuser::state() const {
  return state_;
}
inline void ernnuser::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 nntype = 11;
inline bool ernnuser::has_nntype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ernnuser::set_has_nntype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ernnuser::clear_has_nntype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ernnuser::clear_nntype() {
  nntype_ = 0;
  clear_has_nntype();
}
inline ::google::protobuf::int32 ernnuser::nntype() const {
  return nntype_;
}
inline void ernnuser::set_nntype(::google::protobuf::int32 value) {
  set_has_nntype();
  nntype_ = value;
}

// optional int32 basicsmul = 12;
inline bool ernnuser::has_basicsmul() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ernnuser::set_has_basicsmul() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ernnuser::clear_has_basicsmul() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ernnuser::clear_basicsmul() {
  basicsmul_ = 0;
  clear_has_basicsmul();
}
inline ::google::protobuf::int32 ernnuser::basicsmul() const {
  return basicsmul_;
}
inline void ernnuser::set_basicsmul(::google::protobuf::int32 value) {
  set_has_basicsmul();
  basicsmul_ = value;
}

// optional string location = 13;
inline bool ernnuser::has_location() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ernnuser::set_has_location() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ernnuser::clear_has_location() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ernnuser::clear_location() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    location_->clear();
  }
  clear_has_location();
}
inline const ::std::string& ernnuser::location() const {
  return *location_;
}
inline void ernnuser::set_location(const ::std::string& value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(value);
}
inline void ernnuser::set_location(const char* value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(value);
}
inline void ernnuser::set_location(const char* value, size_t size) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernnuser::mutable_location() {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  return location_;
}
inline ::std::string* ernnuser::release_location() {
  clear_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = location_;
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ernnuser::set_allocated_location(::std::string* location) {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (location) {
    set_has_location();
    location_ = location;
  } else {
    clear_has_location();
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 winnum = 14;
inline bool ernnuser::has_winnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ernnuser::set_has_winnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ernnuser::clear_has_winnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ernnuser::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 ernnuser::winnum() const {
  return winnum_;
}
inline void ernnuser::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional int32 maxdntype = 15;
inline bool ernnuser::has_maxdntype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ernnuser::set_has_maxdntype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ernnuser::clear_has_maxdntype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ernnuser::clear_maxdntype() {
  maxdntype_ = 0;
  clear_has_maxdntype();
}
inline ::google::protobuf::int32 ernnuser::maxdntype() const {
  return maxdntype_;
}
inline void ernnuser::set_maxdntype(::google::protobuf::int32 value) {
  set_has_maxdntype();
  maxdntype_ = value;
}

// optional int32 maxscore = 16;
inline bool ernnuser::has_maxscore() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ernnuser::set_has_maxscore() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ernnuser::clear_has_maxscore() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ernnuser::clear_maxscore() {
  maxscore_ = 0;
  clear_has_maxscore();
}
inline ::google::protobuf::int32 ernnuser::maxscore() const {
  return maxscore_;
}
inline void ernnuser::set_maxscore(::google::protobuf::int32 value) {
  set_has_maxscore();
  maxscore_ = value;
}

// optional int32 bankernum = 17;
inline bool ernnuser::has_bankernum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ernnuser::set_has_bankernum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ernnuser::clear_has_bankernum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ernnuser::clear_bankernum() {
  bankernum_ = 0;
  clear_has_bankernum();
}
inline ::google::protobuf::int32 ernnuser::bankernum() const {
  return bankernum_;
}
inline void ernnuser::set_bankernum(::google::protobuf::int32 value) {
  set_has_bankernum();
  bankernum_ = value;
}

// optional int32 volun = 18;
inline bool ernnuser::has_volun() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ernnuser::set_has_volun() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ernnuser::clear_has_volun() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ernnuser::clear_volun() {
  volun_ = 0;
  clear_has_volun();
}
inline ::google::protobuf::int32 ernnuser::volun() const {
  return volun_;
}
inline void ernnuser::set_volun(::google::protobuf::int32 value) {
  set_has_volun();
  volun_ = value;
}

// optional int32 overtimenum = 19;
inline bool ernnuser::has_overtimenum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ernnuser::set_has_overtimenum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ernnuser::clear_has_overtimenum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ernnuser::clear_overtimenum() {
  overtimenum_ = 0;
  clear_has_overtimenum();
}
inline ::google::protobuf::int32 ernnuser::overtimenum() const {
  return overtimenum_;
}
inline void ernnuser::set_overtimenum(::google::protobuf::int32 value) {
  set_has_overtimenum();
  overtimenum_ = value;
}

// optional int32 trusteeship = 20;
inline bool ernnuser::has_trusteeship() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ernnuser::set_has_trusteeship() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ernnuser::clear_has_trusteeship() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ernnuser::clear_trusteeship() {
  trusteeship_ = 0;
  clear_has_trusteeship();
}
inline ::google::protobuf::int32 ernnuser::trusteeship() const {
  return trusteeship_;
}
inline void ernnuser::set_trusteeship(::google::protobuf::int32 value) {
  set_has_trusteeship();
  trusteeship_ = value;
}

// -------------------------------------------------------------------

// ernninfo

// optional int32 tableid = 1;
inline bool ernninfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ernninfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ernninfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ernninfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ernninfo::tableid() const {
  return tableid_;
}
inline void ernninfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 tablemark = 2;
inline bool ernninfo::has_tablemark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ernninfo::set_has_tablemark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ernninfo::clear_has_tablemark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ernninfo::clear_tablemark() {
  tablemark_ = 0;
  clear_has_tablemark();
}
inline ::google::protobuf::int32 ernninfo::tablemark() const {
  return tablemark_;
}
inline void ernninfo::set_tablemark(::google::protobuf::int32 value) {
  set_has_tablemark();
  tablemark_ = value;
}

// optional int32 tabletime = 3;
inline bool ernninfo::has_tabletime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ernninfo::set_has_tabletime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ernninfo::clear_has_tabletime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ernninfo::clear_tabletime() {
  tabletime_ = 0;
  clear_has_tabletime();
}
inline ::google::protobuf::int32 ernninfo::tabletime() const {
  return tabletime_;
}
inline void ernninfo::set_tabletime(::google::protobuf::int32 value) {
  set_has_tabletime();
  tabletime_ = value;
}

// optional int32 state = 4;
inline bool ernninfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ernninfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ernninfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ernninfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ernninfo::state() const {
  return state_;
}
inline void ernninfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 5;
inline bool ernninfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ernninfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ernninfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ernninfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 ernninfo::timemark() const {
  return timemark_;
}
inline void ernninfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// optional int32 viptable = 6;
inline bool ernninfo::has_viptable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ernninfo::set_has_viptable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ernninfo::clear_has_viptable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ernninfo::clear_viptable() {
  viptable_ = 0;
  clear_has_viptable();
}
inline ::google::protobuf::int32 ernninfo::viptable() const {
  return viptable_;
}
inline void ernninfo::set_viptable(::google::protobuf::int32 value) {
  set_has_viptable();
  viptable_ = value;
}

// optional int32 julebuid = 7;
inline bool ernninfo::has_julebuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ernninfo::set_has_julebuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ernninfo::clear_has_julebuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ernninfo::clear_julebuid() {
  julebuid_ = 0;
  clear_has_julebuid();
}
inline ::google::protobuf::int32 ernninfo::julebuid() const {
  return julebuid_;
}
inline void ernninfo::set_julebuid(::google::protobuf::int32 value) {
  set_has_julebuid();
  julebuid_ = value;
}

// optional int32 tabletype = 8;
inline bool ernninfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ernninfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ernninfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ernninfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 ernninfo::tabletype() const {
  return tabletype_;
}
inline void ernninfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 dntype = 9;
inline bool ernninfo::has_dntype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ernninfo::set_has_dntype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ernninfo::clear_has_dntype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ernninfo::clear_dntype() {
  dntype_ = 0;
  clear_has_dntype();
}
inline ::google::protobuf::int32 ernninfo::dntype() const {
  return dntype_;
}
inline void ernninfo::set_dntype(::google::protobuf::int32 value) {
  set_has_dntype();
  dntype_ = value;
}

// optional int32 difen = 10;
inline bool ernninfo::has_difen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ernninfo::set_has_difen() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ernninfo::clear_has_difen() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ernninfo::clear_difen() {
  difen_ = 0;
  clear_has_difen();
}
inline ::google::protobuf::int32 ernninfo::difen() const {
  return difen_;
}
inline void ernninfo::set_difen(::google::protobuf::int32 value) {
  set_has_difen();
  difen_ = value;
}

// optional int32 maxplaynum = 11;
inline bool ernninfo::has_maxplaynum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ernninfo::set_has_maxplaynum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ernninfo::clear_has_maxplaynum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ernninfo::clear_maxplaynum() {
  maxplaynum_ = 0;
  clear_has_maxplaynum();
}
inline ::google::protobuf::int32 ernninfo::maxplaynum() const {
  return maxplaynum_;
}
inline void ernninfo::set_maxplaynum(::google::protobuf::int32 value) {
  set_has_maxplaynum();
  maxplaynum_ = value;
}

// optional int32 paytype = 12;
inline bool ernninfo::has_paytype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ernninfo::set_has_paytype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ernninfo::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ernninfo::clear_paytype() {
  paytype_ = 0;
  clear_has_paytype();
}
inline ::google::protobuf::int32 ernninfo::paytype() const {
  return paytype_;
}
inline void ernninfo::set_paytype(::google::protobuf::int32 value) {
  set_has_paytype();
  paytype_ = value;
}

// repeated int32 mullist = 13;
inline int ernninfo::mullist_size() const {
  return mullist_.size();
}
inline void ernninfo::clear_mullist() {
  mullist_.Clear();
}
inline ::google::protobuf::int32 ernninfo::mullist(int index) const {
  return mullist_.Get(index);
}
inline void ernninfo::set_mullist(int index, ::google::protobuf::int32 value) {
  mullist_.Set(index, value);
}
inline void ernninfo::add_mullist(::google::protobuf::int32 value) {
  mullist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernninfo::mullist() const {
  return mullist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernninfo::mutable_mullist() {
  return &mullist_;
}

// optional int32 typeodds = 14;
inline bool ernninfo::has_typeodds() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ernninfo::set_has_typeodds() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ernninfo::clear_has_typeodds() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ernninfo::clear_typeodds() {
  typeodds_ = 0;
  clear_has_typeodds();
}
inline ::google::protobuf::int32 ernninfo::typeodds() const {
  return typeodds_;
}
inline void ernninfo::set_typeodds(::google::protobuf::int32 value) {
  set_has_typeodds();
  typeodds_ = value;
}

// optional string specialtype = 15;
inline bool ernninfo::has_specialtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ernninfo::set_has_specialtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ernninfo::clear_has_specialtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ernninfo::clear_specialtype() {
  if (specialtype_ != &::google::protobuf::internal::kEmptyString) {
    specialtype_->clear();
  }
  clear_has_specialtype();
}
inline const ::std::string& ernninfo::specialtype() const {
  return *specialtype_;
}
inline void ernninfo::set_specialtype(const ::std::string& value) {
  set_has_specialtype();
  if (specialtype_ == &::google::protobuf::internal::kEmptyString) {
    specialtype_ = new ::std::string;
  }
  specialtype_->assign(value);
}
inline void ernninfo::set_specialtype(const char* value) {
  set_has_specialtype();
  if (specialtype_ == &::google::protobuf::internal::kEmptyString) {
    specialtype_ = new ::std::string;
  }
  specialtype_->assign(value);
}
inline void ernninfo::set_specialtype(const char* value, size_t size) {
  set_has_specialtype();
  if (specialtype_ == &::google::protobuf::internal::kEmptyString) {
    specialtype_ = new ::std::string;
  }
  specialtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernninfo::mutable_specialtype() {
  set_has_specialtype();
  if (specialtype_ == &::google::protobuf::internal::kEmptyString) {
    specialtype_ = new ::std::string;
  }
  return specialtype_;
}
inline ::std::string* ernninfo::release_specialtype() {
  clear_has_specialtype();
  if (specialtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = specialtype_;
    specialtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ernninfo::set_allocated_specialtype(::std::string* specialtype) {
  if (specialtype_ != &::google::protobuf::internal::kEmptyString) {
    delete specialtype_;
  }
  if (specialtype) {
    set_has_specialtype();
    specialtype_ = specialtype;
  } else {
    clear_has_specialtype();
    specialtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 restrict = 16;
inline bool ernninfo::has_restrict() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ernninfo::set_has_restrict() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ernninfo::clear_has_restrict() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ernninfo::clear_restrict() {
  restrict_ = 0;
  clear_has_restrict();
}
inline ::google::protobuf::int32 ernninfo::restrict() const {
  return restrict_;
}
inline void ernninfo::set_restrict(::google::protobuf::int32 value) {
  set_has_restrict();
  restrict_ = value;
}

// optional int32 integralmax = 17;
inline bool ernninfo::has_integralmax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ernninfo::set_has_integralmax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ernninfo::clear_has_integralmax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ernninfo::clear_integralmax() {
  integralmax_ = 0;
  clear_has_integralmax();
}
inline ::google::protobuf::int32 ernninfo::integralmax() const {
  return integralmax_;
}
inline void ernninfo::set_integralmax(::google::protobuf::int32 value) {
  set_has_integralmax();
  integralmax_ = value;
}

// optional int32 bankermultiple = 18;
inline bool ernninfo::has_bankermultiple() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ernninfo::set_has_bankermultiple() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ernninfo::clear_has_bankermultiple() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ernninfo::clear_bankermultiple() {
  bankermultiple_ = 0;
  clear_has_bankermultiple();
}
inline ::google::protobuf::int32 ernninfo::bankermultiple() const {
  return bankermultiple_;
}
inline void ernninfo::set_bankermultiple(::google::protobuf::int32 value) {
  set_has_bankermultiple();
  bankermultiple_ = value;
}

// optional int32 ownerid = 19;
inline bool ernninfo::has_ownerid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ernninfo::set_has_ownerid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ernninfo::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ernninfo::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 ernninfo::ownerid() const {
  return ownerid_;
}
inline void ernninfo::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// optional int32 bankerID = 20;
inline bool ernninfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ernninfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ernninfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ernninfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 ernninfo::bankerid() const {
  return bankerid_;
}
inline void ernninfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// repeated .progame.ernnuser situser = 21;
inline int ernninfo::situser_size() const {
  return situser_.size();
}
inline void ernninfo::clear_situser() {
  situser_.Clear();
}
inline const ::progame::ernnuser& ernninfo::situser(int index) const {
  return situser_.Get(index);
}
inline ::progame::ernnuser* ernninfo::mutable_situser(int index) {
  return situser_.Mutable(index);
}
inline ::progame::ernnuser* ernninfo::add_situser() {
  return situser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ernnuser >&
ernninfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ernnuser >*
ernninfo::mutable_situser() {
  return &situser_;
}

// repeated int32 standuser = 22;
inline int ernninfo::standuser_size() const {
  return standuser_.size();
}
inline void ernninfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 ernninfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void ernninfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void ernninfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernninfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernninfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 usernum = 23;
inline bool ernninfo::has_usernum() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ernninfo::set_has_usernum() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ernninfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ernninfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 ernninfo::usernum() const {
  return usernum_;
}
inline void ernninfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 usevipnum = 24;
inline bool ernninfo::has_usevipnum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ernninfo::set_has_usevipnum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ernninfo::clear_has_usevipnum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ernninfo::clear_usevipnum() {
  usevipnum_ = 0;
  clear_has_usevipnum();
}
inline ::google::protobuf::int32 ernninfo::usevipnum() const {
  return usevipnum_;
}
inline void ernninfo::set_usevipnum(::google::protobuf::int32 value) {
  set_has_usevipnum();
  usevipnum_ = value;
}

// optional int32 dissolveinfo = 25;
inline bool ernninfo::has_dissolveinfo() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ernninfo::set_has_dissolveinfo() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ernninfo::clear_has_dissolveinfo() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ernninfo::clear_dissolveinfo() {
  dissolveinfo_ = 0;
  clear_has_dissolveinfo();
}
inline ::google::protobuf::int32 ernninfo::dissolveinfo() const {
  return dissolveinfo_;
}
inline void ernninfo::set_dissolveinfo(::google::protobuf::int32 value) {
  set_has_dissolveinfo();
  dissolveinfo_ = value;
}

// optional string straction = 26;
inline bool ernninfo::has_straction() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ernninfo::set_has_straction() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ernninfo::clear_has_straction() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ernninfo::clear_straction() {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    straction_->clear();
  }
  clear_has_straction();
}
inline const ::std::string& ernninfo::straction() const {
  return *straction_;
}
inline void ernninfo::set_straction(const ::std::string& value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void ernninfo::set_straction(const char* value) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(value);
}
inline void ernninfo::set_straction(const char* value, size_t size) {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  straction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernninfo::mutable_straction() {
  set_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    straction_ = new ::std::string;
  }
  return straction_;
}
inline ::std::string* ernninfo::release_straction() {
  clear_has_straction();
  if (straction_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = straction_;
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ernninfo::set_allocated_straction(::std::string* straction) {
  if (straction_ != &::google::protobuf::internal::kEmptyString) {
    delete straction_;
  }
  if (straction) {
    set_has_straction();
    straction_ = straction;
  } else {
    clear_has_straction();
    straction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 frameid = 27;
inline bool ernninfo::has_frameid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ernninfo::set_has_frameid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ernninfo::clear_has_frameid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ernninfo::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 ernninfo::frameid() const {
  return frameid_;
}
inline void ernninfo::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
}

// optional int32 basicsmul = 28;
inline bool ernninfo::has_basicsmul() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ernninfo::set_has_basicsmul() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ernninfo::clear_has_basicsmul() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ernninfo::clear_basicsmul() {
  basicsmul_ = 0;
  clear_has_basicsmul();
}
inline ::google::protobuf::int32 ernninfo::basicsmul() const {
  return basicsmul_;
}
inline void ernninfo::set_basicsmul(::google::protobuf::int32 value) {
  set_has_basicsmul();
  basicsmul_ = value;
}

// optional int32 bankerindex = 29;
inline bool ernninfo::has_bankerindex() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ernninfo::set_has_bankerindex() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ernninfo::clear_has_bankerindex() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ernninfo::clear_bankerindex() {
  bankerindex_ = 0;
  clear_has_bankerindex();
}
inline ::google::protobuf::int32 ernninfo::bankerindex() const {
  return bankerindex_;
}
inline void ernninfo::set_bankerindex(::google::protobuf::int32 value) {
  set_has_bankerindex();
  bankerindex_ = value;
}

// optional int32 payway = 30;
inline bool ernninfo::has_payway() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ernninfo::set_has_payway() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ernninfo::clear_has_payway() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ernninfo::clear_payway() {
  payway_ = 0;
  clear_has_payway();
}
inline ::google::protobuf::int32 ernninfo::payway() const {
  return payway_;
}
inline void ernninfo::set_payway(::google::protobuf::int32 value) {
  set_has_payway();
  payway_ = value;
}

// optional int32 paynum = 31;
inline bool ernninfo::has_paynum() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ernninfo::set_has_paynum() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ernninfo::clear_has_paynum() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ernninfo::clear_paynum() {
  paynum_ = 0;
  clear_has_paynum();
}
inline ::google::protobuf::int32 ernninfo::paynum() const {
  return paynum_;
}
inline void ernninfo::set_paynum(::google::protobuf::int32 value) {
  set_has_paynum();
  paynum_ = value;
}

// repeated int32 pokerlist = 32;
inline int ernninfo::pokerlist_size() const {
  return pokerlist_.size();
}
inline void ernninfo::clear_pokerlist() {
  pokerlist_.Clear();
}
inline ::google::protobuf::int32 ernninfo::pokerlist(int index) const {
  return pokerlist_.Get(index);
}
inline void ernninfo::set_pokerlist(int index, ::google::protobuf::int32 value) {
  pokerlist_.Set(index, value);
}
inline void ernninfo::add_pokerlist(::google::protobuf::int32 value) {
  pokerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernninfo::pokerlist() const {
  return pokerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernninfo::mutable_pokerlist() {
  return &pokerlist_;
}

// optional int32 autoready = 33;
inline bool ernninfo::has_autoready() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ernninfo::set_has_autoready() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ernninfo::clear_has_autoready() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ernninfo::clear_autoready() {
  autoready_ = 0;
  clear_has_autoready();
}
inline ::google::protobuf::int32 ernninfo::autoready() const {
  return autoready_;
}
inline void ernninfo::set_autoready(::google::protobuf::int32 value) {
  set_has_autoready();
  autoready_ = value;
}

// optional int32 banker_no = 34;
inline bool ernninfo::has_banker_no() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ernninfo::set_has_banker_no() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ernninfo::clear_has_banker_no() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ernninfo::clear_banker_no() {
  banker_no_ = 0;
  clear_has_banker_no();
}
inline ::google::protobuf::int32 ernninfo::banker_no() const {
  return banker_no_;
}
inline void ernninfo::set_banker_no(::google::protobuf::int32 value) {
  set_has_banker_no();
  banker_no_ = value;
}

// -------------------------------------------------------------------

// ernnhandpoker

// repeated int32 handpoker = 1;
inline int ernnhandpoker::handpoker_size() const {
  return handpoker_.size();
}
inline void ernnhandpoker::clear_handpoker() {
  handpoker_.Clear();
}
inline ::google::protobuf::int32 ernnhandpoker::handpoker(int index) const {
  return handpoker_.Get(index);
}
inline void ernnhandpoker::set_handpoker(int index, ::google::protobuf::int32 value) {
  handpoker_.Set(index, value);
}
inline void ernnhandpoker::add_handpoker(::google::protobuf::int32 value) {
  handpoker_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhandpoker::handpoker() const {
  return handpoker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhandpoker::mutable_handpoker() {
  return &handpoker_;
}

// -------------------------------------------------------------------

// ernnspecialtype

// optional int32 zhadan = 1;
inline bool ernnspecialtype::has_zhadan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ernnspecialtype::set_has_zhadan() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ernnspecialtype::clear_has_zhadan() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ernnspecialtype::clear_zhadan() {
  zhadan_ = 0;
  clear_has_zhadan();
}
inline ::google::protobuf::int32 ernnspecialtype::zhadan() const {
  return zhadan_;
}
inline void ernnspecialtype::set_zhadan(::google::protobuf::int32 value) {
  set_has_zhadan();
  zhadan_ = value;
}

// optional int32 wuhua = 2;
inline bool ernnspecialtype::has_wuhua() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ernnspecialtype::set_has_wuhua() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ernnspecialtype::clear_has_wuhua() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ernnspecialtype::clear_wuhua() {
  wuhua_ = 0;
  clear_has_wuhua();
}
inline ::google::protobuf::int32 ernnspecialtype::wuhua() const {
  return wuhua_;
}
inline void ernnspecialtype::set_wuhua(::google::protobuf::int32 value) {
  set_has_wuhua();
  wuhua_ = value;
}

// optional int32 wuxiao = 3;
inline bool ernnspecialtype::has_wuxiao() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ernnspecialtype::set_has_wuxiao() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ernnspecialtype::clear_has_wuxiao() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ernnspecialtype::clear_wuxiao() {
  wuxiao_ = 0;
  clear_has_wuxiao();
}
inline ::google::protobuf::int32 ernnspecialtype::wuxiao() const {
  return wuxiao_;
}
inline void ernnspecialtype::set_wuxiao(::google::protobuf::int32 value) {
  set_has_wuxiao();
  wuxiao_ = value;
}

// -------------------------------------------------------------------

// ernnhistoryitem

// optional int32 leg = 1;
inline bool ernnhistoryitem::has_leg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ernnhistoryitem::set_has_leg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ernnhistoryitem::clear_has_leg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ernnhistoryitem::clear_leg() {
  leg_ = 0;
  clear_has_leg();
}
inline ::google::protobuf::int32 ernnhistoryitem::leg() const {
  return leg_;
}
inline void ernnhistoryitem::set_leg(::google::protobuf::int32 value) {
  set_has_leg();
  leg_ = value;
}

// optional int32 bankerID = 2;
inline bool ernnhistoryitem::has_bankerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ernnhistoryitem::set_has_bankerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ernnhistoryitem::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ernnhistoryitem::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 ernnhistoryitem::bankerid() const {
  return bankerid_;
}
inline void ernnhistoryitem::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// repeated int32 useridlist = 3;
inline int ernnhistoryitem::useridlist_size() const {
  return useridlist_.size();
}
inline void ernnhistoryitem::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 ernnhistoryitem::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void ernnhistoryitem::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void ernnhistoryitem::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhistoryitem::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhistoryitem::mutable_useridlist() {
  return &useridlist_;
}

// repeated string nicklist = 4;
inline int ernnhistoryitem::nicklist_size() const {
  return nicklist_.size();
}
inline void ernnhistoryitem::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& ernnhistoryitem::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* ernnhistoryitem::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void ernnhistoryitem::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ernnhistoryitem::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ernnhistoryitem::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernnhistoryitem::add_nicklist() {
  return nicklist_.Add();
}
inline void ernnhistoryitem::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void ernnhistoryitem::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void ernnhistoryitem::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ernnhistoryitem::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ernnhistoryitem::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 winlist = 5;
inline int ernnhistoryitem::winlist_size() const {
  return winlist_.size();
}
inline void ernnhistoryitem::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 ernnhistoryitem::winlist(int index) const {
  return winlist_.Get(index);
}
inline void ernnhistoryitem::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void ernnhistoryitem::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhistoryitem::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhistoryitem::mutable_winlist() {
  return &winlist_;
}

// repeated .progame.ernnhandpoker pokerlist = 6;
inline int ernnhistoryitem::pokerlist_size() const {
  return pokerlist_.size();
}
inline void ernnhistoryitem::clear_pokerlist() {
  pokerlist_.Clear();
}
inline const ::progame::ernnhandpoker& ernnhistoryitem::pokerlist(int index) const {
  return pokerlist_.Get(index);
}
inline ::progame::ernnhandpoker* ernnhistoryitem::mutable_pokerlist(int index) {
  return pokerlist_.Mutable(index);
}
inline ::progame::ernnhandpoker* ernnhistoryitem::add_pokerlist() {
  return pokerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ernnhandpoker >&
ernnhistoryitem::pokerlist() const {
  return pokerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ernnhandpoker >*
ernnhistoryitem::mutable_pokerlist() {
  return &pokerlist_;
}

// repeated int32 nntypelist = 7;
inline int ernnhistoryitem::nntypelist_size() const {
  return nntypelist_.size();
}
inline void ernnhistoryitem::clear_nntypelist() {
  nntypelist_.Clear();
}
inline ::google::protobuf::int32 ernnhistoryitem::nntypelist(int index) const {
  return nntypelist_.Get(index);
}
inline void ernnhistoryitem::set_nntypelist(int index, ::google::protobuf::int32 value) {
  nntypelist_.Set(index, value);
}
inline void ernnhistoryitem::add_nntypelist(::google::protobuf::int32 value) {
  nntypelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhistoryitem::nntypelist() const {
  return nntypelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhistoryitem::mutable_nntypelist() {
  return &nntypelist_;
}

// repeated int32 qzbslist = 8;
inline int ernnhistoryitem::qzbslist_size() const {
  return qzbslist_.size();
}
inline void ernnhistoryitem::clear_qzbslist() {
  qzbslist_.Clear();
}
inline ::google::protobuf::int32 ernnhistoryitem::qzbslist(int index) const {
  return qzbslist_.Get(index);
}
inline void ernnhistoryitem::set_qzbslist(int index, ::google::protobuf::int32 value) {
  qzbslist_.Set(index, value);
}
inline void ernnhistoryitem::add_qzbslist(::google::protobuf::int32 value) {
  qzbslist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhistoryitem::qzbslist() const {
  return qzbslist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhistoryitem::mutable_qzbslist() {
  return &qzbslist_;
}

// repeated int32 pournumlist = 9;
inline int ernnhistoryitem::pournumlist_size() const {
  return pournumlist_.size();
}
inline void ernnhistoryitem::clear_pournumlist() {
  pournumlist_.Clear();
}
inline ::google::protobuf::int32 ernnhistoryitem::pournumlist(int index) const {
  return pournumlist_.Get(index);
}
inline void ernnhistoryitem::set_pournumlist(int index, ::google::protobuf::int32 value) {
  pournumlist_.Set(index, value);
}
inline void ernnhistoryitem::add_pournumlist(::google::protobuf::int32 value) {
  pournumlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhistoryitem::pournumlist() const {
  return pournumlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhistoryitem::mutable_pournumlist() {
  return &pournumlist_;
}

// -------------------------------------------------------------------

// ernnhistory

// optional int32 tableid = 1;
inline bool ernnhistory::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ernnhistory::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ernnhistory::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ernnhistory::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ernnhistory::tableid() const {
  return tableid_;
}
inline void ernnhistory::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 playnummax = 2;
inline bool ernnhistory::has_playnummax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ernnhistory::set_has_playnummax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ernnhistory::clear_has_playnummax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ernnhistory::clear_playnummax() {
  playnummax_ = 0;
  clear_has_playnummax();
}
inline ::google::protobuf::int32 ernnhistory::playnummax() const {
  return playnummax_;
}
inline void ernnhistory::set_playnummax(::google::protobuf::int32 value) {
  set_has_playnummax();
  playnummax_ = value;
}

// optional int32 playnum = 3;
inline bool ernnhistory::has_playnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ernnhistory::set_has_playnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ernnhistory::clear_has_playnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ernnhistory::clear_playnum() {
  playnum_ = 0;
  clear_has_playnum();
}
inline ::google::protobuf::int32 ernnhistory::playnum() const {
  return playnum_;
}
inline void ernnhistory::set_playnum(::google::protobuf::int32 value) {
  set_has_playnum();
  playnum_ = value;
}

// optional int32 difen = 4;
inline bool ernnhistory::has_difen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ernnhistory::set_has_difen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ernnhistory::clear_has_difen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ernnhistory::clear_difen() {
  difen_ = 0;
  clear_has_difen();
}
inline ::google::protobuf::int32 ernnhistory::difen() const {
  return difen_;
}
inline void ernnhistory::set_difen(::google::protobuf::int32 value) {
  set_has_difen();
  difen_ = value;
}

// optional int32 dntypelist = 5;
inline bool ernnhistory::has_dntypelist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ernnhistory::set_has_dntypelist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ernnhistory::clear_has_dntypelist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ernnhistory::clear_dntypelist() {
  dntypelist_ = 0;
  clear_has_dntypelist();
}
inline ::google::protobuf::int32 ernnhistory::dntypelist() const {
  return dntypelist_;
}
inline void ernnhistory::set_dntypelist(::google::protobuf::int32 value) {
  set_has_dntypelist();
  dntypelist_ = value;
}

// optional int32 gametime = 6;
inline bool ernnhistory::has_gametime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ernnhistory::set_has_gametime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ernnhistory::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ernnhistory::clear_gametime() {
  gametime_ = 0;
  clear_has_gametime();
}
inline ::google::protobuf::int32 ernnhistory::gametime() const {
  return gametime_;
}
inline void ernnhistory::set_gametime(::google::protobuf::int32 value) {
  set_has_gametime();
  gametime_ = value;
}

// optional int32 ownerid = 7;
inline bool ernnhistory::has_ownerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ernnhistory::set_has_ownerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ernnhistory::clear_has_ownerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ernnhistory::clear_ownerid() {
  ownerid_ = 0;
  clear_has_ownerid();
}
inline ::google::protobuf::int32 ernnhistory::ownerid() const {
  return ownerid_;
}
inline void ernnhistory::set_ownerid(::google::protobuf::int32 value) {
  set_has_ownerid();
  ownerid_ = value;
}

// repeated string nicklist = 8;
inline int ernnhistory::nicklist_size() const {
  return nicklist_.size();
}
inline void ernnhistory::clear_nicklist() {
  nicklist_.Clear();
}
inline const ::std::string& ernnhistory::nicklist(int index) const {
  return nicklist_.Get(index);
}
inline ::std::string* ernnhistory::mutable_nicklist(int index) {
  return nicklist_.Mutable(index);
}
inline void ernnhistory::set_nicklist(int index, const ::std::string& value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ernnhistory::set_nicklist(int index, const char* value) {
  nicklist_.Mutable(index)->assign(value);
}
inline void ernnhistory::set_nicklist(int index, const char* value, size_t size) {
  nicklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ernnhistory::add_nicklist() {
  return nicklist_.Add();
}
inline void ernnhistory::add_nicklist(const ::std::string& value) {
  nicklist_.Add()->assign(value);
}
inline void ernnhistory::add_nicklist(const char* value) {
  nicklist_.Add()->assign(value);
}
inline void ernnhistory::add_nicklist(const char* value, size_t size) {
  nicklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ernnhistory::nicklist() const {
  return nicklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ernnhistory::mutable_nicklist() {
  return &nicklist_;
}

// repeated int32 useridlist = 9;
inline int ernnhistory::useridlist_size() const {
  return useridlist_.size();
}
inline void ernnhistory::clear_useridlist() {
  useridlist_.Clear();
}
inline ::google::protobuf::int32 ernnhistory::useridlist(int index) const {
  return useridlist_.Get(index);
}
inline void ernnhistory::set_useridlist(int index, ::google::protobuf::int32 value) {
  useridlist_.Set(index, value);
}
inline void ernnhistory::add_useridlist(::google::protobuf::int32 value) {
  useridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhistory::useridlist() const {
  return useridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhistory::mutable_useridlist() {
  return &useridlist_;
}

// repeated int32 winlist = 10;
inline int ernnhistory::winlist_size() const {
  return winlist_.size();
}
inline void ernnhistory::clear_winlist() {
  winlist_.Clear();
}
inline ::google::protobuf::int32 ernnhistory::winlist(int index) const {
  return winlist_.Get(index);
}
inline void ernnhistory::set_winlist(int index, ::google::protobuf::int32 value) {
  winlist_.Set(index, value);
}
inline void ernnhistory::add_winlist(::google::protobuf::int32 value) {
  winlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ernnhistory::winlist() const {
  return winlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ernnhistory::mutable_winlist() {
  return &winlist_;
}

// repeated .progame.ernnhistoryitem hitemlist = 11;
inline int ernnhistory::hitemlist_size() const {
  return hitemlist_.size();
}
inline void ernnhistory::clear_hitemlist() {
  hitemlist_.Clear();
}
inline const ::progame::ernnhistoryitem& ernnhistory::hitemlist(int index) const {
  return hitemlist_.Get(index);
}
inline ::progame::ernnhistoryitem* ernnhistory::mutable_hitemlist(int index) {
  return hitemlist_.Mutable(index);
}
inline ::progame::ernnhistoryitem* ernnhistory::add_hitemlist() {
  return hitemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::progame::ernnhistoryitem >&
ernnhistory::hitemlist() const {
  return hitemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::progame::ernnhistoryitem >*
ernnhistory::mutable_hitemlist() {
  return &hitemlist_;
}

// optional int32 tablemark = 12;
inline bool ernnhistory::has_tablemark() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ernnhistory::set_has_tablemark() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ernnhistory::clear_has_tablemark() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ernnhistory::clear_tablemark() {
  tablemark_ = 0;
  clear_has_tablemark();
}
inline ::google::protobuf::int32 ernnhistory::tablemark() const {
  return tablemark_;
}
inline void ernnhistory::set_tablemark(::google::protobuf::int32 value) {
  set_has_tablemark();
  tablemark_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fernn_2eproto__INCLUDED
