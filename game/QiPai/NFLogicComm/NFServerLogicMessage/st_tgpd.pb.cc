// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_tgpd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "st_tgpd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace progame {

namespace {

const ::google::protobuf::Descriptor* tgpdinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgpdinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tgpdpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgpdpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* tgpdgemcolumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgpdgemcolumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* tgpdscoreitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgpdscoreitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* tgpdscorelist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgpdscorelist_reflection_ = NULL;
const ::google::protobuf::Descriptor* tgpdpriavedata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tgpdpriavedata_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_st_5ftgpd_2eproto() {
  protobuf_AddDesc_st_5ftgpd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "st_tgpd.proto");
  GOOGLE_CHECK(file != NULL);
  tgpdinfo_descriptor_ = file->message_type(0);
  static const int tgpdinfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, tabletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, timemark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, useridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, minjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, bankerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, bankerjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, bankername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, bankerfaceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, bankerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, dropbanker_),
  };
  tgpdinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgpdinfo_descriptor_,
      tgpdinfo::default_instance_,
      tgpdinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgpdinfo));
  tgpdpoint_descriptor_ = file->message_type(1);
  static const int tgpdpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpoint, y_),
  };
  tgpdpoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgpdpoint_descriptor_,
      tgpdpoint::default_instance_,
      tgpdpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgpdpoint));
  tgpdgemcolumn_descriptor_ = file->message_type(2);
  static const int tgpdgemcolumn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdgemcolumn, list_),
  };
  tgpdgemcolumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgpdgemcolumn_descriptor_,
      tgpdgemcolumn::default_instance_,
      tgpdgemcolumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdgemcolumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdgemcolumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgpdgemcolumn));
  tgpdscoreitem_descriptor_ = file->message_type(3);
  static const int tgpdscoreitem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscoreitem, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscoreitem, scorelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscoreitem, pointlist_),
  };
  tgpdscoreitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgpdscoreitem_descriptor_,
      tgpdscoreitem::default_instance_,
      tgpdscoreitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscoreitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscoreitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgpdscoreitem));
  tgpdscorelist_descriptor_ = file->message_type(4);
  static const int tgpdscorelist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscorelist, list_),
  };
  tgpdscorelist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgpdscorelist_descriptor_,
      tgpdscorelist::default_instance_,
      tgpdscorelist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscorelist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdscorelist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgpdscorelist));
  tgpdpriavedata_descriptor_ = file->message_type(5);
  static const int tgpdpriavedata_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, boardlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, gemmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, reservegemmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, pourjettonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, timemark_),
  };
  tgpdpriavedata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tgpdpriavedata_descriptor_,
      tgpdpriavedata::default_instance_,
      tgpdpriavedata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tgpdpriavedata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tgpdpriavedata));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_st_5ftgpd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgpdinfo_descriptor_, &tgpdinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgpdpoint_descriptor_, &tgpdpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgpdgemcolumn_descriptor_, &tgpdgemcolumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgpdscoreitem_descriptor_, &tgpdscoreitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgpdscorelist_descriptor_, &tgpdscorelist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tgpdpriavedata_descriptor_, &tgpdpriavedata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_st_5ftgpd_2eproto() {
  delete tgpdinfo::default_instance_;
  delete tgpdinfo_reflection_;
  delete tgpdpoint::default_instance_;
  delete tgpdpoint_reflection_;
  delete tgpdgemcolumn::default_instance_;
  delete tgpdgemcolumn_reflection_;
  delete tgpdscoreitem::default_instance_;
  delete tgpdscoreitem_reflection_;
  delete tgpdscorelist::default_instance_;
  delete tgpdscorelist_reflection_;
  delete tgpdpriavedata::default_instance_;
  delete tgpdpriavedata_reflection_;
}

void protobuf_AddDesc_st_5ftgpd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::progame::protobuf_AddDesc_st_5fhuman_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rst_tgpd.proto\022\007progame\032\016st_human.proto"
    "\"\361\001\n\010tgpdinfo\022\017\n\007tableid\030\001 \001(\005\022\021\n\ttablet"
    "ype\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\020\n\010timemark\030\004 \001"
    "(\005\022\022\n\nuseridlist\030\005 \003(\005\022\021\n\tminjetton\030\006 \001("
    "\t\022\020\n\010bankerid\030\010 \001(\005\022\024\n\014bankerjetton\030\t \001("
    "\t\022\022\n\nbankername\030\n \001(\t\022\024\n\014bankerfaceid\030\013 "
    "\001(\t\022\023\n\013bankerlimit\030\014 \001(\t\022\022\n\ndropbanker\030\r"
    " \001(\005\"!\n\ttgpdpoint\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\""
    "\035\n\rtgpdgemcolumn\022\014\n\004list\030\001 \003(\005\"V\n\rtgpdsc"
    "oreitem\022\013\n\003gem\030\001 \001(\005\022\021\n\tscorelist\030\002 \003(\t\022"
    "%\n\tpointlist\030\003 \003(\0132\022.progame.tgpdpoint\"5"
    "\n\rtgpdscorelist\022$\n\004list\030\001 \003(\0132\026.progame."
    "tgpdscoreitem\"\311\001\n\016tgpdpriavedata\022\022\n\ntota"
    "lscore\030\001 \001(\t\022\r\n\005round\030\002 \001(\005\022\023\n\013boardleng"
    "th\030\003 \001(\005\022&\n\006gemmap\030\004 \003(\0132\026.progame.tgpdg"
    "emcolumn\022-\n\rreservegemmap\030\005 \003(\0132\026.progam"
    "e.tgpdgemcolumn\022\026\n\016pourjettonlist\030\006 \003(\t\022"
    "\020\n\010timemark\030\007 \001(\003", 697);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "st_tgpd.proto", &protobuf_RegisterTypes);
  tgpdinfo::default_instance_ = new tgpdinfo();
  tgpdpoint::default_instance_ = new tgpdpoint();
  tgpdgemcolumn::default_instance_ = new tgpdgemcolumn();
  tgpdscoreitem::default_instance_ = new tgpdscoreitem();
  tgpdscorelist::default_instance_ = new tgpdscorelist();
  tgpdpriavedata::default_instance_ = new tgpdpriavedata();
  tgpdinfo::default_instance_->InitAsDefaultInstance();
  tgpdpoint::default_instance_->InitAsDefaultInstance();
  tgpdgemcolumn::default_instance_->InitAsDefaultInstance();
  tgpdscoreitem::default_instance_->InitAsDefaultInstance();
  tgpdscorelist::default_instance_->InitAsDefaultInstance();
  tgpdpriavedata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_st_5ftgpd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_st_5ftgpd_2eproto {
  StaticDescriptorInitializer_st_5ftgpd_2eproto() {
    protobuf_AddDesc_st_5ftgpd_2eproto();
  }
} static_descriptor_initializer_st_5ftgpd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tgpdinfo::kTableidFieldNumber;
const int tgpdinfo::kTabletypeFieldNumber;
const int tgpdinfo::kStateFieldNumber;
const int tgpdinfo::kTimemarkFieldNumber;
const int tgpdinfo::kUseridlistFieldNumber;
const int tgpdinfo::kMinjettonFieldNumber;
const int tgpdinfo::kBankeridFieldNumber;
const int tgpdinfo::kBankerjettonFieldNumber;
const int tgpdinfo::kBankernameFieldNumber;
const int tgpdinfo::kBankerfaceidFieldNumber;
const int tgpdinfo::kBankerlimitFieldNumber;
const int tgpdinfo::kDropbankerFieldNumber;
#endif  // !_MSC_VER

tgpdinfo::tgpdinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgpdinfo::InitAsDefaultInstance() {
}

tgpdinfo::tgpdinfo(const tgpdinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgpdinfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tabletype_ = 0;
  state_ = 0;
  timemark_ = 0;
  minjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerid_ = 0;
  bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerfaceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dropbanker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgpdinfo::~tgpdinfo() {
  SharedDtor();
}

void tgpdinfo::SharedDtor() {
  if (minjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete minjetton_;
  }
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerfaceid_;
  }
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (this != default_instance_) {
  }
}

void tgpdinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgpdinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgpdinfo_descriptor_;
}

const tgpdinfo& tgpdinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftgpd_2eproto();
  return *default_instance_;
}

tgpdinfo* tgpdinfo::default_instance_ = NULL;

tgpdinfo* tgpdinfo::New() const {
  return new tgpdinfo;
}

void tgpdinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    tabletype_ = 0;
    state_ = 0;
    timemark_ = 0;
    if (has_minjetton()) {
      if (minjetton_ != &::google::protobuf::internal::kEmptyString) {
        minjetton_->clear();
      }
    }
    bankerid_ = 0;
    if (has_bankerjetton()) {
      if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
        bankerjetton_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bankername()) {
      if (bankername_ != &::google::protobuf::internal::kEmptyString) {
        bankername_->clear();
      }
    }
    if (has_bankerfaceid()) {
      if (bankerfaceid_ != &::google::protobuf::internal::kEmptyString) {
        bankerfaceid_->clear();
      }
    }
    if (has_bankerlimit()) {
      if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
        bankerlimit_->clear();
      }
    }
    dropbanker_ = 0;
  }
  useridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgpdinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tabletype;
        break;
      }

      // optional int32 tabletype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tabletype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabletype_)));
          set_has_tabletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timemark;
        break;
      }

      // optional int32 timemark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        break;
      }

      // repeated int32 useridlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useridlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_useridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_useridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useridlist;
        if (input->ExpectTag(50)) goto parse_minjetton;
        break;
      }

      // optional string minjetton = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_minjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->minjetton().data(), this->minjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bankerid;
        break;
      }

      // optional int32 bankerid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bankerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerid_)));
          set_has_bankerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bankerjetton;
        break;
      }

      // optional string bankerjetton = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerjetton:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerjetton()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerjetton().data(), this->bankerjetton().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bankername;
        break;
      }

      // optional string bankername = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankername().data(), this->bankername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bankerfaceid;
        break;
      }

      // optional string bankerfaceid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerfaceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerfaceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerfaceid().data(), this->bankerfaceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bankerlimit;
        break;
      }

      // optional string bankerlimit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankerlimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankerlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankerlimit().data(), this->bankerlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dropbanker;
        break;
      }

      // optional int32 dropbanker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropbanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropbanker_)));
          set_has_dropbanker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgpdinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabletype(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timemark(), output);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->useridlist(i), output);
  }

  // optional string minjetton = 6;
  if (has_minjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minjetton().data(), this->minjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->minjetton(), output);
  }

  // optional int32 bankerid = 8;
  if (has_bankerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bankerid(), output);
  }

  // optional string bankerjetton = 9;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->bankerjetton(), output);
  }

  // optional string bankername = 10;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->bankername(), output);
  }

  // optional string bankerfaceid = 11;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->bankerfaceid(), output);
  }

  // optional string bankerlimit = 12;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bankerlimit(), output);
  }

  // optional int32 dropbanker = 13;
  if (has_dropbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dropbanker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgpdinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int32 tabletype = 2;
  if (has_tabletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabletype(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 timemark = 4;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timemark(), target);
  }

  // repeated int32 useridlist = 5;
  for (int i = 0; i < this->useridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->useridlist(i), target);
  }

  // optional string minjetton = 6;
  if (has_minjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->minjetton().data(), this->minjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->minjetton(), target);
  }

  // optional int32 bankerid = 8;
  if (has_bankerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bankerid(), target);
  }

  // optional string bankerjetton = 9;
  if (has_bankerjetton()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerjetton().data(), this->bankerjetton().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bankerjetton(), target);
  }

  // optional string bankername = 10;
  if (has_bankername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankername().data(), this->bankername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->bankername(), target);
  }

  // optional string bankerfaceid = 11;
  if (has_bankerfaceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerfaceid().data(), this->bankerfaceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->bankerfaceid(), target);
  }

  // optional string bankerlimit = 12;
  if (has_bankerlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankerlimit().data(), this->bankerlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bankerlimit(), target);
  }

  // optional int32 dropbanker = 13;
  if (has_dropbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dropbanker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgpdinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 tabletype = 2;
    if (has_tabletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabletype());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 timemark = 4;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timemark());
    }

    // optional string minjetton = 6;
    if (has_minjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->minjetton());
    }

    // optional int32 bankerid = 8;
    if (has_bankerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerid());
    }

    // optional string bankerjetton = 9;
    if (has_bankerjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerjetton());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string bankername = 10;
    if (has_bankername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankername());
    }

    // optional string bankerfaceid = 11;
    if (has_bankerfaceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerfaceid());
    }

    // optional string bankerlimit = 12;
    if (has_bankerlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankerlimit());
    }

    // optional int32 dropbanker = 13;
    if (has_dropbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropbanker());
    }

  }
  // repeated int32 useridlist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->useridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->useridlist(i));
    }
    total_size += 1 * this->useridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgpdinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgpdinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgpdinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgpdinfo::MergeFrom(const tgpdinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  useridlist_.MergeFrom(from.useridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tabletype()) {
      set_tabletype(from.tabletype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
    if (from.has_minjetton()) {
      set_minjetton(from.minjetton());
    }
    if (from.has_bankerid()) {
      set_bankerid(from.bankerid());
    }
    if (from.has_bankerjetton()) {
      set_bankerjetton(from.bankerjetton());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bankername()) {
      set_bankername(from.bankername());
    }
    if (from.has_bankerfaceid()) {
      set_bankerfaceid(from.bankerfaceid());
    }
    if (from.has_bankerlimit()) {
      set_bankerlimit(from.bankerlimit());
    }
    if (from.has_dropbanker()) {
      set_dropbanker(from.dropbanker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgpdinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgpdinfo::CopyFrom(const tgpdinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgpdinfo::IsInitialized() const {

  return true;
}

void tgpdinfo::Swap(tgpdinfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tabletype_, other->tabletype_);
    std::swap(state_, other->state_);
    std::swap(timemark_, other->timemark_);
    useridlist_.Swap(&other->useridlist_);
    std::swap(minjetton_, other->minjetton_);
    std::swap(bankerid_, other->bankerid_);
    std::swap(bankerjetton_, other->bankerjetton_);
    std::swap(bankername_, other->bankername_);
    std::swap(bankerfaceid_, other->bankerfaceid_);
    std::swap(bankerlimit_, other->bankerlimit_);
    std::swap(dropbanker_, other->dropbanker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgpdinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgpdinfo_descriptor_;
  metadata.reflection = tgpdinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tgpdpoint::kXFieldNumber;
const int tgpdpoint::kYFieldNumber;
#endif  // !_MSC_VER

tgpdpoint::tgpdpoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgpdpoint::InitAsDefaultInstance() {
}

tgpdpoint::tgpdpoint(const tgpdpoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgpdpoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgpdpoint::~tgpdpoint() {
  SharedDtor();
}

void tgpdpoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tgpdpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgpdpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgpdpoint_descriptor_;
}

const tgpdpoint& tgpdpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftgpd_2eproto();
  return *default_instance_;
}

tgpdpoint* tgpdpoint::default_instance_ = NULL;

tgpdpoint* tgpdpoint::New() const {
  return new tgpdpoint;
}

void tgpdpoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgpdpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgpdpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgpdpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgpdpoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgpdpoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgpdpoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgpdpoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgpdpoint::MergeFrom(const tgpdpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgpdpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgpdpoint::CopyFrom(const tgpdpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgpdpoint::IsInitialized() const {

  return true;
}

void tgpdpoint::Swap(tgpdpoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgpdpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgpdpoint_descriptor_;
  metadata.reflection = tgpdpoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tgpdgemcolumn::kListFieldNumber;
#endif  // !_MSC_VER

tgpdgemcolumn::tgpdgemcolumn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgpdgemcolumn::InitAsDefaultInstance() {
}

tgpdgemcolumn::tgpdgemcolumn(const tgpdgemcolumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgpdgemcolumn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgpdgemcolumn::~tgpdgemcolumn() {
  SharedDtor();
}

void tgpdgemcolumn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tgpdgemcolumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgpdgemcolumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgpdgemcolumn_descriptor_;
}

const tgpdgemcolumn& tgpdgemcolumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftgpd_2eproto();
  return *default_instance_;
}

tgpdgemcolumn* tgpdgemcolumn::default_instance_ = NULL;

tgpdgemcolumn* tgpdgemcolumn::New() const {
  return new tgpdgemcolumn;
}

void tgpdgemcolumn::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgpdgemcolumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgpdgemcolumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgpdgemcolumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgpdgemcolumn::ByteSize() const {
  int total_size = 0;

  // repeated int32 list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgpdgemcolumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgpdgemcolumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgpdgemcolumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgpdgemcolumn::MergeFrom(const tgpdgemcolumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgpdgemcolumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgpdgemcolumn::CopyFrom(const tgpdgemcolumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgpdgemcolumn::IsInitialized() const {

  return true;
}

void tgpdgemcolumn::Swap(tgpdgemcolumn* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgpdgemcolumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgpdgemcolumn_descriptor_;
  metadata.reflection = tgpdgemcolumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tgpdscoreitem::kGemFieldNumber;
const int tgpdscoreitem::kScorelistFieldNumber;
const int tgpdscoreitem::kPointlistFieldNumber;
#endif  // !_MSC_VER

tgpdscoreitem::tgpdscoreitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgpdscoreitem::InitAsDefaultInstance() {
}

tgpdscoreitem::tgpdscoreitem(const tgpdscoreitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgpdscoreitem::SharedCtor() {
  _cached_size_ = 0;
  gem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgpdscoreitem::~tgpdscoreitem() {
  SharedDtor();
}

void tgpdscoreitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tgpdscoreitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgpdscoreitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgpdscoreitem_descriptor_;
}

const tgpdscoreitem& tgpdscoreitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftgpd_2eproto();
  return *default_instance_;
}

tgpdscoreitem* tgpdscoreitem::default_instance_ = NULL;

tgpdscoreitem* tgpdscoreitem::New() const {
  return new tgpdscoreitem;
}

void tgpdscoreitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gem_ = 0;
  }
  scorelist_.Clear();
  pointlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgpdscoreitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scorelist;
        break;
      }

      // repeated string scorelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scorelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_scorelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scorelist(this->scorelist_size() - 1).data(),
            this->scorelist(this->scorelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scorelist;
        if (input->ExpectTag(26)) goto parse_pointlist;
        break;
      }

      // repeated .progame.tgpdpoint pointlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pointlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgpdscoreitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gem = 1;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gem(), output);
  }

  // repeated string scorelist = 2;
  for (int i = 0; i < this->scorelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->scorelist(i).data(), this->scorelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scorelist(i), output);
  }

  // repeated .progame.tgpdpoint pointlist = 3;
  for (int i = 0; i < this->pointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pointlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgpdscoreitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gem = 1;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gem(), target);
  }

  // repeated string scorelist = 2;
  for (int i = 0; i < this->scorelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scorelist(i).data(), this->scorelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->scorelist(i), target);
  }

  // repeated .progame.tgpdpoint pointlist = 3;
  for (int i = 0; i < this->pointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pointlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgpdscoreitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gem = 1;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }

  }
  // repeated string scorelist = 2;
  total_size += 1 * this->scorelist_size();
  for (int i = 0; i < this->scorelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->scorelist(i));
  }

  // repeated .progame.tgpdpoint pointlist = 3;
  total_size += 1 * this->pointlist_size();
  for (int i = 0; i < this->pointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgpdscoreitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgpdscoreitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgpdscoreitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgpdscoreitem::MergeFrom(const tgpdscoreitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  scorelist_.MergeFrom(from.scorelist_);
  pointlist_.MergeFrom(from.pointlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gem()) {
      set_gem(from.gem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgpdscoreitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgpdscoreitem::CopyFrom(const tgpdscoreitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgpdscoreitem::IsInitialized() const {

  return true;
}

void tgpdscoreitem::Swap(tgpdscoreitem* other) {
  if (other != this) {
    std::swap(gem_, other->gem_);
    scorelist_.Swap(&other->scorelist_);
    pointlist_.Swap(&other->pointlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgpdscoreitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgpdscoreitem_descriptor_;
  metadata.reflection = tgpdscoreitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tgpdscorelist::kListFieldNumber;
#endif  // !_MSC_VER

tgpdscorelist::tgpdscorelist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgpdscorelist::InitAsDefaultInstance() {
}

tgpdscorelist::tgpdscorelist(const tgpdscorelist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgpdscorelist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgpdscorelist::~tgpdscorelist() {
  SharedDtor();
}

void tgpdscorelist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tgpdscorelist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgpdscorelist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgpdscorelist_descriptor_;
}

const tgpdscorelist& tgpdscorelist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftgpd_2eproto();
  return *default_instance_;
}

tgpdscorelist* tgpdscorelist::default_instance_ = NULL;

tgpdscorelist* tgpdscorelist::New() const {
  return new tgpdscorelist;
}

void tgpdscorelist::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgpdscorelist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .progame.tgpdscoreitem list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgpdscorelist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .progame.tgpdscoreitem list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgpdscorelist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .progame.tgpdscoreitem list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgpdscorelist::ByteSize() const {
  int total_size = 0;

  // repeated .progame.tgpdscoreitem list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgpdscorelist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgpdscorelist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgpdscorelist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgpdscorelist::MergeFrom(const tgpdscorelist& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgpdscorelist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgpdscorelist::CopyFrom(const tgpdscorelist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgpdscorelist::IsInitialized() const {

  return true;
}

void tgpdscorelist::Swap(tgpdscorelist* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgpdscorelist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgpdscorelist_descriptor_;
  metadata.reflection = tgpdscorelist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tgpdpriavedata::kTotalscoreFieldNumber;
const int tgpdpriavedata::kRoundFieldNumber;
const int tgpdpriavedata::kBoardlengthFieldNumber;
const int tgpdpriavedata::kGemmapFieldNumber;
const int tgpdpriavedata::kReservegemmapFieldNumber;
const int tgpdpriavedata::kPourjettonlistFieldNumber;
const int tgpdpriavedata::kTimemarkFieldNumber;
#endif  // !_MSC_VER

tgpdpriavedata::tgpdpriavedata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tgpdpriavedata::InitAsDefaultInstance() {
}

tgpdpriavedata::tgpdpriavedata(const tgpdpriavedata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tgpdpriavedata::SharedCtor() {
  _cached_size_ = 0;
  totalscore_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  round_ = 0;
  boardlength_ = 0;
  timemark_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tgpdpriavedata::~tgpdpriavedata() {
  SharedDtor();
}

void tgpdpriavedata::SharedDtor() {
  if (totalscore_ != &::google::protobuf::internal::kEmptyString) {
    delete totalscore_;
  }
  if (this != default_instance_) {
  }
}

void tgpdpriavedata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tgpdpriavedata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tgpdpriavedata_descriptor_;
}

const tgpdpriavedata& tgpdpriavedata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_st_5ftgpd_2eproto();
  return *default_instance_;
}

tgpdpriavedata* tgpdpriavedata::default_instance_ = NULL;

tgpdpriavedata* tgpdpriavedata::New() const {
  return new tgpdpriavedata;
}

void tgpdpriavedata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_totalscore()) {
      if (totalscore_ != &::google::protobuf::internal::kEmptyString) {
        totalscore_->clear();
      }
    }
    round_ = 0;
    boardlength_ = 0;
    timemark_ = GOOGLE_LONGLONG(0);
  }
  gemmap_.Clear();
  reservegemmap_.Clear();
  pourjettonlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tgpdpriavedata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string totalscore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totalscore()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->totalscore().data(), this->totalscore().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_round;
        break;
      }

      // optional int32 round = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boardlength;
        break;
      }

      // optional int32 boardlength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boardlength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boardlength_)));
          set_has_boardlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gemmap;
        break;
      }

      // repeated .progame.tgpdgemcolumn gemmap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gemmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gemmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gemmap;
        if (input->ExpectTag(42)) goto parse_reservegemmap;
        break;
      }

      // repeated .progame.tgpdgemcolumn reservegemmap = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservegemmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reservegemmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reservegemmap;
        if (input->ExpectTag(50)) goto parse_pourjettonlist;
        break;
      }

      // repeated string pourjettonlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pourjettonlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pourjettonlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pourjettonlist(this->pourjettonlist_size() - 1).data(),
            this->pourjettonlist(this->pourjettonlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pourjettonlist;
        if (input->ExpectTag(56)) goto parse_timemark;
        break;
      }

      // optional int64 timemark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timemark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timemark_)));
          set_has_timemark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tgpdpriavedata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string totalscore = 1;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totalscore().data(), this->totalscore().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->totalscore(), output);
  }

  // optional int32 round = 2;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->round(), output);
  }

  // optional int32 boardlength = 3;
  if (has_boardlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boardlength(), output);
  }

  // repeated .progame.tgpdgemcolumn gemmap = 4;
  for (int i = 0; i < this->gemmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gemmap(i), output);
  }

  // repeated .progame.tgpdgemcolumn reservegemmap = 5;
  for (int i = 0; i < this->reservegemmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reservegemmap(i), output);
  }

  // repeated string pourjettonlist = 6;
  for (int i = 0; i < this->pourjettonlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pourjettonlist(i).data(), this->pourjettonlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pourjettonlist(i), output);
  }

  // optional int64 timemark = 7;
  if (has_timemark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->timemark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tgpdpriavedata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string totalscore = 1;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totalscore().data(), this->totalscore().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->totalscore(), target);
  }

  // optional int32 round = 2;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->round(), target);
  }

  // optional int32 boardlength = 3;
  if (has_boardlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boardlength(), target);
  }

  // repeated .progame.tgpdgemcolumn gemmap = 4;
  for (int i = 0; i < this->gemmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gemmap(i), target);
  }

  // repeated .progame.tgpdgemcolumn reservegemmap = 5;
  for (int i = 0; i < this->reservegemmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reservegemmap(i), target);
  }

  // repeated string pourjettonlist = 6;
  for (int i = 0; i < this->pourjettonlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pourjettonlist(i).data(), this->pourjettonlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->pourjettonlist(i), target);
  }

  // optional int64 timemark = 7;
  if (has_timemark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->timemark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tgpdpriavedata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string totalscore = 1;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totalscore());
    }

    // optional int32 round = 2;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 boardlength = 3;
    if (has_boardlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boardlength());
    }

    // optional int64 timemark = 7;
    if (has_timemark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timemark());
    }

  }
  // repeated .progame.tgpdgemcolumn gemmap = 4;
  total_size += 1 * this->gemmap_size();
  for (int i = 0; i < this->gemmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gemmap(i));
  }

  // repeated .progame.tgpdgemcolumn reservegemmap = 5;
  total_size += 1 * this->reservegemmap_size();
  for (int i = 0; i < this->reservegemmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reservegemmap(i));
  }

  // repeated string pourjettonlist = 6;
  total_size += 1 * this->pourjettonlist_size();
  for (int i = 0; i < this->pourjettonlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pourjettonlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tgpdpriavedata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tgpdpriavedata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tgpdpriavedata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tgpdpriavedata::MergeFrom(const tgpdpriavedata& from) {
  GOOGLE_CHECK_NE(&from, this);
  gemmap_.MergeFrom(from.gemmap_);
  reservegemmap_.MergeFrom(from.reservegemmap_);
  pourjettonlist_.MergeFrom(from.pourjettonlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_boardlength()) {
      set_boardlength(from.boardlength());
    }
    if (from.has_timemark()) {
      set_timemark(from.timemark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tgpdpriavedata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tgpdpriavedata::CopyFrom(const tgpdpriavedata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tgpdpriavedata::IsInitialized() const {

  return true;
}

void tgpdpriavedata::Swap(tgpdpriavedata* other) {
  if (other != this) {
    std::swap(totalscore_, other->totalscore_);
    std::swap(round_, other->round_);
    std::swap(boardlength_, other->boardlength_);
    gemmap_.Swap(&other->gemmap_);
    reservegemmap_.Swap(&other->reservegemmap_);
    pourjettonlist_.Swap(&other->pourjettonlist_);
    std::swap(timemark_, other->timemark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tgpdpriavedata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tgpdpriavedata_descriptor_;
  metadata.reflection = tgpdpriavedata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

// @@protoc_insertion_point(global_scope)
