// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: st_sicbo.proto

#ifndef PROTOBUF_st_5fsicbo_2eproto__INCLUDED
#define PROTOBUF_st_5fsicbo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "st_human.pb.h"
// @@protoc_insertion_point(includes)

namespace progame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_st_5fsicbo_2eproto();
void protobuf_AssignDesc_st_5fsicbo_2eproto();
void protobuf_ShutdownFile_st_5fsicbo_2eproto();

class sicbojetton;
class sicboplay;
class sicboinfo;
class sicbojettonrecordlist;
class sicbojettonrecorinfo;
class sicbogamehistoryinfo;
class sicbooneplayhistory;

// ===================================================================

class sicbojetton : public ::google::protobuf::Message {
 public:
  sicbojetton();
  virtual ~sicbojetton();

  sicbojetton(const sicbojetton& from);

  inline sicbojetton& operator=(const sicbojetton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sicbojetton& default_instance();

  void Swap(sicbojetton* other);

  // implements Message ----------------------------------------------

  sicbojetton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sicbojetton& from);
  void MergeFrom(const sicbojetton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 pourtype = 2;
  inline bool has_pourtype() const;
  inline void clear_pourtype();
  static const int kPourtypeFieldNumber = 2;
  inline ::google::protobuf::int32 pourtype() const;
  inline void set_pourtype(::google::protobuf::int32 value);

  // optional int32 jetton = 3;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 3;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sicbojetton)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_pourtype();
  inline void clear_has_pourtype();
  inline void set_has_jetton();
  inline void clear_has_jetton();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 pourtype_;
  ::google::protobuf::int32 jetton_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsicbo_2eproto();
  friend void protobuf_AssignDesc_st_5fsicbo_2eproto();
  friend void protobuf_ShutdownFile_st_5fsicbo_2eproto();

  void InitAsDefaultInstance();
  static sicbojetton* default_instance_;
};
// -------------------------------------------------------------------

class sicboplay : public ::google::protobuf::Message {
 public:
  sicboplay();
  virtual ~sicboplay();

  sicboplay(const sicboplay& from);

  inline sicboplay& operator=(const sicboplay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sicboplay& default_instance();

  void Swap(sicboplay* other);

  // implements Message ----------------------------------------------

  sicboplay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sicboplay& from);
  void MergeFrom(const sicboplay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playid = 1;
  inline bool has_playid() const;
  inline void clear_playid();
  static const int kPlayidFieldNumber = 1;
  inline ::google::protobuf::int32 playid() const;
  inline void set_playid(::google::protobuf::int32 value);

  // repeated int32 cardlist = 2;
  inline int cardlist_size() const;
  inline void clear_cardlist();
  static const int kCardlistFieldNumber = 2;
  inline ::google::protobuf::int32 cardlist(int index) const;
  inline void set_cardlist(int index, ::google::protobuf::int32 value);
  inline void add_cardlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardlist();

  // optional int32 cardtype = 3;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardtypeFieldNumber = 3;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sicboplay)
 private:
  inline void set_has_playid();
  inline void clear_has_playid();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardlist_;
  ::google::protobuf::int32 playid_;
  ::google::protobuf::int32 cardtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsicbo_2eproto();
  friend void protobuf_AssignDesc_st_5fsicbo_2eproto();
  friend void protobuf_ShutdownFile_st_5fsicbo_2eproto();

  void InitAsDefaultInstance();
  static sicboplay* default_instance_;
};
// -------------------------------------------------------------------

class sicboinfo : public ::google::protobuf::Message {
 public:
  sicboinfo();
  virtual ~sicboinfo();

  sicboinfo(const sicboinfo& from);

  inline sicboinfo& operator=(const sicboinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sicboinfo& default_instance();

  void Swap(sicboinfo* other);

  // implements Message ----------------------------------------------

  sicboinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sicboinfo& from);
  void MergeFrom(const sicboinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional int32 frameid = 2;
  inline bool has_frameid() const;
  inline void clear_frameid();
  static const int kFrameidFieldNumber = 2;
  inline ::google::protobuf::int32 frameid() const;
  inline void set_frameid(::google::protobuf::int32 value);

  // optional int32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 7;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 7;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated int32 situser = 8;
  inline int situser_size() const;
  inline void clear_situser();
  static const int kSituserFieldNumber = 8;
  inline ::google::protobuf::int32 situser(int index) const;
  inline void set_situser(int index, ::google::protobuf::int32 value);
  inline void add_situser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      situser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_situser();

  // repeated int32 bankerlist = 9;
  inline int bankerlist_size() const;
  inline void clear_bankerlist();
  static const int kBankerlistFieldNumber = 9;
  inline ::google::protobuf::int32 bankerlist(int index) const;
  inline void set_bankerlist(int index, ::google::protobuf::int32 value);
  inline void add_bankerlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bankerlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bankerlist();

  // repeated int32 standuser = 10;
  inline int standuser_size() const;
  inline void clear_standuser();
  static const int kStanduserFieldNumber = 10;
  inline ::google::protobuf::int32 standuser(int index) const;
  inline void set_standuser(int index, ::google::protobuf::int32 value);
  inline void add_standuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      standuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_standuser();

  // optional int32 usernum = 11;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUsernumFieldNumber = 11;
  inline ::google::protobuf::int32 usernum() const;
  inline void set_usernum(::google::protobuf::int32 value);

  // optional int32 bankerid = 12;
  inline bool has_bankerid() const;
  inline void clear_bankerid();
  static const int kBankeridFieldNumber = 12;
  inline ::google::protobuf::int32 bankerid() const;
  inline void set_bankerid(::google::protobuf::int32 value);

  // optional string bankerjetton = 13;
  inline bool has_bankerjetton() const;
  inline void clear_bankerjetton();
  static const int kBankerjettonFieldNumber = 13;
  inline const ::std::string& bankerjetton() const;
  inline void set_bankerjetton(const ::std::string& value);
  inline void set_bankerjetton(const char* value);
  inline void set_bankerjetton(const char* value, size_t size);
  inline ::std::string* mutable_bankerjetton();
  inline ::std::string* release_bankerjetton();
  inline void set_allocated_bankerjetton(::std::string* bankerjetton);

  // optional int32 maxuser = 14;
  inline bool has_maxuser() const;
  inline void clear_maxuser();
  static const int kMaxuserFieldNumber = 14;
  inline ::google::protobuf::int32 maxuser() const;
  inline void set_maxuser(::google::protobuf::int32 value);

  // optional string faceid = 15;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 15;
  inline const ::std::string& faceid() const;
  inline void set_faceid(const ::std::string& value);
  inline void set_faceid(const char* value);
  inline void set_faceid(const char* value, size_t size);
  inline ::std::string* mutable_faceid();
  inline ::std::string* release_faceid();
  inline void set_allocated_faceid(::std::string* faceid);

  // optional string bankername = 17;
  inline bool has_bankername() const;
  inline void clear_bankername();
  static const int kBankernameFieldNumber = 17;
  inline const ::std::string& bankername() const;
  inline void set_bankername(const ::std::string& value);
  inline void set_bankername(const char* value);
  inline void set_bankername(const char* value, size_t size);
  inline ::std::string* mutable_bankername();
  inline ::std::string* release_bankername();
  inline void set_allocated_bankername(::std::string* bankername);

  // optional int32 applydrop = 20;
  inline bool has_applydrop() const;
  inline void clear_applydrop();
  static const int kApplydropFieldNumber = 20;
  inline ::google::protobuf::int32 applydrop() const;
  inline void set_applydrop(::google::protobuf::int32 value);

  // optional int32 sicbotype = 21;
  inline bool has_sicbotype() const;
  inline void clear_sicbotype();
  static const int kSicbotypeFieldNumber = 21;
  inline ::google::protobuf::int32 sicbotype() const;
  inline void set_sicbotype(::google::protobuf::int32 value);

  // optional int32 tabletype = 22;
  inline bool has_tabletype() const;
  inline void clear_tabletype();
  static const int kTabletypeFieldNumber = 22;
  inline ::google::protobuf::int32 tabletype() const;
  inline void set_tabletype(::google::protobuf::int32 value);

  // optional int32 robotnum = 23;
  inline bool has_robotnum() const;
  inline void clear_robotnum();
  static const int kRobotnumFieldNumber = 23;
  inline ::google::protobuf::int32 robotnum() const;
  inline void set_robotnum(::google::protobuf::int32 value);

  // optional string bankerlimit = 24;
  inline bool has_bankerlimit() const;
  inline void clear_bankerlimit();
  static const int kBankerlimitFieldNumber = 24;
  inline const ::std::string& bankerlimit() const;
  inline void set_bankerlimit(const ::std::string& value);
  inline void set_bankerlimit(const char* value);
  inline void set_bankerlimit(const char* value, size_t size);
  inline ::std::string* mutable_bankerlimit();
  inline ::std::string* release_bankerlimit();
  inline void set_allocated_bankerlimit(::std::string* bankerlimit);

  // optional int32 maxrobotnum = 25;
  inline bool has_maxrobotnum() const;
  inline void clear_maxrobotnum();
  static const int kMaxrobotnumFieldNumber = 25;
  inline ::google::protobuf::int32 maxrobotnum() const;
  inline void set_maxrobotnum(::google::protobuf::int32 value);

  // optional int32 bankercount = 26;
  inline bool has_bankercount() const;
  inline void clear_bankercount();
  static const int kBankercountFieldNumber = 26;
  inline ::google::protobuf::int32 bankercount() const;
  inline void set_bankercount(::google::protobuf::int32 value);

  // optional int32 robotbanuserid = 27;
  inline bool has_robotbanuserid() const;
  inline void clear_robotbanuserid();
  static const int kRobotbanuseridFieldNumber = 27;
  inline ::google::protobuf::int32 robotbanuserid() const;
  inline void set_robotbanuserid(::google::protobuf::int32 value);

  // optional int32 playtype = 28;
  inline bool has_playtype() const;
  inline void clear_playtype();
  static const int kPlaytypeFieldNumber = 28;
  inline ::google::protobuf::int32 playtype() const;
  inline void set_playtype(::google::protobuf::int32 value);

  // optional int32 dianshu = 29;
  inline bool has_dianshu() const;
  inline void clear_dianshu();
  static const int kDianshuFieldNumber = 29;
  inline ::google::protobuf::int32 dianshu() const;
  inline void set_dianshu(::google::protobuf::int32 value);

  // optional int32 huase = 30;
  inline bool has_huase() const;
  inline void clear_huase();
  static const int kHuaseFieldNumber = 30;
  inline ::google::protobuf::int32 huase() const;
  inline void set_huase(::google::protobuf::int32 value);

  // optional string canjetton = 31;
  inline bool has_canjetton() const;
  inline void clear_canjetton();
  static const int kCanjettonFieldNumber = 31;
  inline const ::std::string& canjetton() const;
  inline void set_canjetton(const ::std::string& value);
  inline void set_canjetton(const char* value);
  inline void set_canjetton(const char* value, size_t size);
  inline ::std::string* mutable_canjetton();
  inline ::std::string* release_canjetton();
  inline void set_allocated_canjetton(::std::string* canjetton);

  // optional string legalkey = 32;
  inline bool has_legalkey() const;
  inline void clear_legalkey();
  static const int kLegalkeyFieldNumber = 32;
  inline const ::std::string& legalkey() const;
  inline void set_legalkey(const ::std::string& value);
  inline void set_legalkey(const char* value);
  inline void set_legalkey(const char* value, size_t size);
  inline ::std::string* mutable_legalkey();
  inline ::std::string* release_legalkey();
  inline void set_allocated_legalkey(::std::string* legalkey);

  // @@protoc_insertion_point(class_scope:progame.sicboinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_frameid();
  inline void clear_has_frameid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();
  inline void set_has_usernum();
  inline void clear_has_usernum();
  inline void set_has_bankerid();
  inline void clear_has_bankerid();
  inline void set_has_bankerjetton();
  inline void clear_has_bankerjetton();
  inline void set_has_maxuser();
  inline void clear_has_maxuser();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_bankername();
  inline void clear_has_bankername();
  inline void set_has_applydrop();
  inline void clear_has_applydrop();
  inline void set_has_sicbotype();
  inline void clear_has_sicbotype();
  inline void set_has_tabletype();
  inline void clear_has_tabletype();
  inline void set_has_robotnum();
  inline void clear_has_robotnum();
  inline void set_has_bankerlimit();
  inline void clear_has_bankerlimit();
  inline void set_has_maxrobotnum();
  inline void clear_has_maxrobotnum();
  inline void set_has_bankercount();
  inline void clear_has_bankercount();
  inline void set_has_robotbanuserid();
  inline void clear_has_robotbanuserid();
  inline void set_has_playtype();
  inline void clear_has_playtype();
  inline void set_has_dianshu();
  inline void clear_has_dianshu();
  inline void set_has_huase();
  inline void clear_has_huase();
  inline void set_has_canjetton();
  inline void clear_has_canjetton();
  inline void set_has_legalkey();
  inline void clear_has_legalkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 frameid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > situser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bankerlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > standuser_;
  ::google::protobuf::int32 usernum_;
  ::google::protobuf::int32 bankerid_;
  ::std::string* bankerjetton_;
  ::std::string* faceid_;
  ::google::protobuf::int32 maxuser_;
  ::google::protobuf::int32 applydrop_;
  ::std::string* bankername_;
  ::google::protobuf::int32 sicbotype_;
  ::google::protobuf::int32 tabletype_;
  ::std::string* bankerlimit_;
  ::google::protobuf::int32 robotnum_;
  ::google::protobuf::int32 maxrobotnum_;
  ::google::protobuf::int32 bankercount_;
  ::google::protobuf::int32 robotbanuserid_;
  ::google::protobuf::int32 playtype_;
  ::google::protobuf::int32 dianshu_;
  ::std::string* canjetton_;
  ::std::string* legalkey_;
  ::google::protobuf::int32 huase_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsicbo_2eproto();
  friend void protobuf_AssignDesc_st_5fsicbo_2eproto();
  friend void protobuf_ShutdownFile_st_5fsicbo_2eproto();

  void InitAsDefaultInstance();
  static sicboinfo* default_instance_;
};
// -------------------------------------------------------------------

class sicbojettonrecordlist : public ::google::protobuf::Message {
 public:
  sicbojettonrecordlist();
  virtual ~sicbojettonrecordlist();

  sicbojettonrecordlist(const sicbojettonrecordlist& from);

  inline sicbojettonrecordlist& operator=(const sicbojettonrecordlist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sicbojettonrecordlist& default_instance();

  void Swap(sicbojettonrecordlist* other);

  // implements Message ----------------------------------------------

  sicbojettonrecordlist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sicbojettonrecordlist& from);
  void MergeFrom(const sicbojettonrecordlist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 jetton = 1;
  inline int jetton_size() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 1;
  inline ::google::protobuf::int32 jetton(int index) const;
  inline void set_jetton(int index, ::google::protobuf::int32 value);
  inline void add_jetton(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      jetton() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_jetton();

  // repeated int32 wincondition = 2;
  inline int wincondition_size() const;
  inline void clear_wincondition();
  static const int kWinconditionFieldNumber = 2;
  inline ::google::protobuf::int32 wincondition(int index) const;
  inline void set_wincondition(int index, ::google::protobuf::int32 value);
  inline void add_wincondition(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wincondition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wincondition();

  // @@protoc_insertion_point(class_scope:progame.sicbojettonrecordlist)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > jetton_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wincondition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsicbo_2eproto();
  friend void protobuf_AssignDesc_st_5fsicbo_2eproto();
  friend void protobuf_ShutdownFile_st_5fsicbo_2eproto();

  void InitAsDefaultInstance();
  static sicbojettonrecordlist* default_instance_;
};
// -------------------------------------------------------------------

class sicbojettonrecorinfo : public ::google::protobuf::Message {
 public:
  sicbojettonrecorinfo();
  virtual ~sicbojettonrecorinfo();

  sicbojettonrecorinfo(const sicbojettonrecorinfo& from);

  inline sicbojettonrecorinfo& operator=(const sicbojettonrecorinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sicbojettonrecorinfo& default_instance();

  void Swap(sicbojettonrecorinfo* other);

  // implements Message ----------------------------------------------

  sicbojettonrecorinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sicbojettonrecorinfo& from);
  void MergeFrom(const sicbojettonrecorinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 jetton = 2;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 2;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // optional int32 winnum = 3;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinnumFieldNumber = 3;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional string jifen = 4;
  inline bool has_jifen() const;
  inline void clear_jifen();
  static const int kJifenFieldNumber = 4;
  inline const ::std::string& jifen() const;
  inline void set_jifen(const ::std::string& value);
  inline void set_jifen(const char* value);
  inline void set_jifen(const char* value, size_t size);
  inline ::std::string* mutable_jifen();
  inline ::std::string* release_jifen();
  inline void set_allocated_jifen(::std::string* jifen);

  // optional string nickname = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string facename = 6;
  inline bool has_facename() const;
  inline void clear_facename();
  static const int kFacenameFieldNumber = 6;
  inline const ::std::string& facename() const;
  inline void set_facename(const ::std::string& value);
  inline void set_facename(const char* value);
  inline void set_facename(const char* value, size_t size);
  inline ::std::string* mutable_facename();
  inline ::std::string* release_facename();
  inline void set_allocated_facename(::std::string* facename);

  // @@protoc_insertion_point(class_scope:progame.sicbojettonrecorinfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_jifen();
  inline void clear_has_jifen();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_facename();
  inline void clear_has_facename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 jetton_;
  ::std::string* jifen_;
  ::std::string* nickname_;
  ::std::string* facename_;
  ::google::protobuf::int32 winnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsicbo_2eproto();
  friend void protobuf_AssignDesc_st_5fsicbo_2eproto();
  friend void protobuf_ShutdownFile_st_5fsicbo_2eproto();

  void InitAsDefaultInstance();
  static sicbojettonrecorinfo* default_instance_;
};
// -------------------------------------------------------------------

class sicbogamehistoryinfo : public ::google::protobuf::Message {
 public:
  sicbogamehistoryinfo();
  virtual ~sicbogamehistoryinfo();

  sicbogamehistoryinfo(const sicbogamehistoryinfo& from);

  inline sicbogamehistoryinfo& operator=(const sicbogamehistoryinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sicbogamehistoryinfo& default_instance();

  void Swap(sicbogamehistoryinfo* other);

  // implements Message ----------------------------------------------

  sicbogamehistoryinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sicbogamehistoryinfo& from);
  void MergeFrom(const sicbogamehistoryinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // optional string tablename = 2;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTablenameFieldNumber = 2;
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional int32 magnification = 3;
  inline bool has_magnification() const;
  inline void clear_magnification();
  static const int kMagnificationFieldNumber = 3;
  inline ::google::protobuf::int32 magnification() const;
  inline void set_magnification(::google::protobuf::int32 value);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 timemark = 5;
  inline bool has_timemark() const;
  inline void clear_timemark();
  static const int kTimemarkFieldNumber = 5;
  inline ::google::protobuf::int32 timemark() const;
  inline void set_timemark(::google::protobuf::int32 value);

  // repeated string recordidentification = 6;
  inline int recordidentification_size() const;
  inline void clear_recordidentification();
  static const int kRecordidentificationFieldNumber = 6;
  inline const ::std::string& recordidentification(int index) const;
  inline ::std::string* mutable_recordidentification(int index);
  inline void set_recordidentification(int index, const ::std::string& value);
  inline void set_recordidentification(int index, const char* value);
  inline void set_recordidentification(int index, const char* value, size_t size);
  inline ::std::string* add_recordidentification();
  inline void add_recordidentification(const ::std::string& value);
  inline void add_recordidentification(const char* value);
  inline void add_recordidentification(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recordidentification() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recordidentification();

  // repeated int32 allnum1 = 7;
  inline int allnum1_size() const;
  inline void clear_allnum1();
  static const int kAllnum1FieldNumber = 7;
  inline ::google::protobuf::int32 allnum1(int index) const;
  inline void set_allnum1(int index, ::google::protobuf::int32 value);
  inline void add_allnum1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allnum1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allnum1();

  // repeated int32 allnum2 = 8;
  inline int allnum2_size() const;
  inline void clear_allnum2();
  static const int kAllnum2FieldNumber = 8;
  inline ::google::protobuf::int32 allnum2(int index) const;
  inline void set_allnum2(int index, ::google::protobuf::int32 value);
  inline void add_allnum2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allnum2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allnum2();

  // repeated int32 allnum3 = 9;
  inline int allnum3_size() const;
  inline void clear_allnum3();
  static const int kAllnum3FieldNumber = 9;
  inline ::google::protobuf::int32 allnum3(int index) const;
  inline void set_allnum3(int index, ::google::protobuf::int32 value);
  inline void add_allnum3(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      allnum3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_allnum3();

  // @@protoc_insertion_point(class_scope:progame.sicbogamehistoryinfo)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_magnification();
  inline void clear_has_magnification();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_timemark();
  inline void clear_has_timemark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tablename_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 magnification_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 timemark_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recordidentification_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allnum1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allnum2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > allnum3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsicbo_2eproto();
  friend void protobuf_AssignDesc_st_5fsicbo_2eproto();
  friend void protobuf_ShutdownFile_st_5fsicbo_2eproto();

  void InitAsDefaultInstance();
  static sicbogamehistoryinfo* default_instance_;
};
// -------------------------------------------------------------------

class sicbooneplayhistory : public ::google::protobuf::Message {
 public:
  sicbooneplayhistory();
  virtual ~sicbooneplayhistory();

  sicbooneplayhistory(const sicbooneplayhistory& from);

  inline sicbooneplayhistory& operator=(const sicbooneplayhistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sicbooneplayhistory& default_instance();

  void Swap(sicbooneplayhistory* other);

  // implements Message ----------------------------------------------

  sicbooneplayhistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sicbooneplayhistory& from);
  void MergeFrom(const sicbooneplayhistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string recordidentification = 1;
  inline bool has_recordidentification() const;
  inline void clear_recordidentification();
  static const int kRecordidentificationFieldNumber = 1;
  inline const ::std::string& recordidentification() const;
  inline void set_recordidentification(const ::std::string& value);
  inline void set_recordidentification(const char* value);
  inline void set_recordidentification(const char* value, size_t size);
  inline ::std::string* mutable_recordidentification();
  inline ::std::string* release_recordidentification();
  inline void set_allocated_recordidentification(::std::string* recordidentification);

  // optional int32 allnum1 = 2;
  inline bool has_allnum1() const;
  inline void clear_allnum1();
  static const int kAllnum1FieldNumber = 2;
  inline ::google::protobuf::int32 allnum1() const;
  inline void set_allnum1(::google::protobuf::int32 value);

  // optional int32 allnum2 = 3;
  inline bool has_allnum2() const;
  inline void clear_allnum2();
  static const int kAllnum2FieldNumber = 3;
  inline ::google::protobuf::int32 allnum2() const;
  inline void set_allnum2(::google::protobuf::int32 value);

  // optional int32 allnum3 = 4;
  inline bool has_allnum3() const;
  inline void clear_allnum3();
  static const int kAllnum3FieldNumber = 4;
  inline ::google::protobuf::int32 allnum3() const;
  inline void set_allnum3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:progame.sicbooneplayhistory)
 private:
  inline void set_has_recordidentification();
  inline void clear_has_recordidentification();
  inline void set_has_allnum1();
  inline void clear_has_allnum1();
  inline void set_has_allnum2();
  inline void clear_has_allnum2();
  inline void set_has_allnum3();
  inline void clear_has_allnum3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* recordidentification_;
  ::google::protobuf::int32 allnum1_;
  ::google::protobuf::int32 allnum2_;
  ::google::protobuf::int32 allnum3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_st_5fsicbo_2eproto();
  friend void protobuf_AssignDesc_st_5fsicbo_2eproto();
  friend void protobuf_ShutdownFile_st_5fsicbo_2eproto();

  void InitAsDefaultInstance();
  static sicbooneplayhistory* default_instance_;
};
// ===================================================================


// ===================================================================

// sicbojetton

// optional int32 userid = 1;
inline bool sicbojetton::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sicbojetton::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sicbojetton::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sicbojetton::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 sicbojetton::userid() const {
  return userid_;
}
inline void sicbojetton::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 pourtype = 2;
inline bool sicbojetton::has_pourtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sicbojetton::set_has_pourtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sicbojetton::clear_has_pourtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sicbojetton::clear_pourtype() {
  pourtype_ = 0;
  clear_has_pourtype();
}
inline ::google::protobuf::int32 sicbojetton::pourtype() const {
  return pourtype_;
}
inline void sicbojetton::set_pourtype(::google::protobuf::int32 value) {
  set_has_pourtype();
  pourtype_ = value;
}

// optional int32 jetton = 3;
inline bool sicbojetton::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sicbojetton::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sicbojetton::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sicbojetton::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 sicbojetton::jetton() const {
  return jetton_;
}
inline void sicbojetton::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// -------------------------------------------------------------------

// sicboplay

// optional int32 playid = 1;
inline bool sicboplay::has_playid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sicboplay::set_has_playid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sicboplay::clear_has_playid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sicboplay::clear_playid() {
  playid_ = 0;
  clear_has_playid();
}
inline ::google::protobuf::int32 sicboplay::playid() const {
  return playid_;
}
inline void sicboplay::set_playid(::google::protobuf::int32 value) {
  set_has_playid();
  playid_ = value;
}

// repeated int32 cardlist = 2;
inline int sicboplay::cardlist_size() const {
  return cardlist_.size();
}
inline void sicboplay::clear_cardlist() {
  cardlist_.Clear();
}
inline ::google::protobuf::int32 sicboplay::cardlist(int index) const {
  return cardlist_.Get(index);
}
inline void sicboplay::set_cardlist(int index, ::google::protobuf::int32 value) {
  cardlist_.Set(index, value);
}
inline void sicboplay::add_cardlist(::google::protobuf::int32 value) {
  cardlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicboplay::cardlist() const {
  return cardlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicboplay::mutable_cardlist() {
  return &cardlist_;
}

// optional int32 cardtype = 3;
inline bool sicboplay::has_cardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sicboplay::set_has_cardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sicboplay::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sicboplay::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 sicboplay::cardtype() const {
  return cardtype_;
}
inline void sicboplay::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// -------------------------------------------------------------------

// sicboinfo

// optional int32 tableid = 1;
inline bool sicboinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sicboinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sicboinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sicboinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 sicboinfo::tableid() const {
  return tableid_;
}
inline void sicboinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional int32 frameid = 2;
inline bool sicboinfo::has_frameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sicboinfo::set_has_frameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sicboinfo::clear_has_frameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sicboinfo::clear_frameid() {
  frameid_ = 0;
  clear_has_frameid();
}
inline ::google::protobuf::int32 sicboinfo::frameid() const {
  return frameid_;
}
inline void sicboinfo::set_frameid(::google::protobuf::int32 value) {
  set_has_frameid();
  frameid_ = value;
}

// optional int32 state = 6;
inline bool sicboinfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sicboinfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sicboinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sicboinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 sicboinfo::state() const {
  return state_;
}
inline void sicboinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 7;
inline bool sicboinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sicboinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sicboinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sicboinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 sicboinfo::timemark() const {
  return timemark_;
}
inline void sicboinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated int32 situser = 8;
inline int sicboinfo::situser_size() const {
  return situser_.size();
}
inline void sicboinfo::clear_situser() {
  situser_.Clear();
}
inline ::google::protobuf::int32 sicboinfo::situser(int index) const {
  return situser_.Get(index);
}
inline void sicboinfo::set_situser(int index, ::google::protobuf::int32 value) {
  situser_.Set(index, value);
}
inline void sicboinfo::add_situser(::google::protobuf::int32 value) {
  situser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicboinfo::situser() const {
  return situser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicboinfo::mutable_situser() {
  return &situser_;
}

// repeated int32 bankerlist = 9;
inline int sicboinfo::bankerlist_size() const {
  return bankerlist_.size();
}
inline void sicboinfo::clear_bankerlist() {
  bankerlist_.Clear();
}
inline ::google::protobuf::int32 sicboinfo::bankerlist(int index) const {
  return bankerlist_.Get(index);
}
inline void sicboinfo::set_bankerlist(int index, ::google::protobuf::int32 value) {
  bankerlist_.Set(index, value);
}
inline void sicboinfo::add_bankerlist(::google::protobuf::int32 value) {
  bankerlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicboinfo::bankerlist() const {
  return bankerlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicboinfo::mutable_bankerlist() {
  return &bankerlist_;
}

// repeated int32 standuser = 10;
inline int sicboinfo::standuser_size() const {
  return standuser_.size();
}
inline void sicboinfo::clear_standuser() {
  standuser_.Clear();
}
inline ::google::protobuf::int32 sicboinfo::standuser(int index) const {
  return standuser_.Get(index);
}
inline void sicboinfo::set_standuser(int index, ::google::protobuf::int32 value) {
  standuser_.Set(index, value);
}
inline void sicboinfo::add_standuser(::google::protobuf::int32 value) {
  standuser_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicboinfo::standuser() const {
  return standuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicboinfo::mutable_standuser() {
  return &standuser_;
}

// optional int32 usernum = 11;
inline bool sicboinfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void sicboinfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void sicboinfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void sicboinfo::clear_usernum() {
  usernum_ = 0;
  clear_has_usernum();
}
inline ::google::protobuf::int32 sicboinfo::usernum() const {
  return usernum_;
}
inline void sicboinfo::set_usernum(::google::protobuf::int32 value) {
  set_has_usernum();
  usernum_ = value;
}

// optional int32 bankerid = 12;
inline bool sicboinfo::has_bankerid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void sicboinfo::set_has_bankerid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void sicboinfo::clear_has_bankerid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void sicboinfo::clear_bankerid() {
  bankerid_ = 0;
  clear_has_bankerid();
}
inline ::google::protobuf::int32 sicboinfo::bankerid() const {
  return bankerid_;
}
inline void sicboinfo::set_bankerid(::google::protobuf::int32 value) {
  set_has_bankerid();
  bankerid_ = value;
}

// optional string bankerjetton = 13;
inline bool sicboinfo::has_bankerjetton() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void sicboinfo::set_has_bankerjetton() {
  _has_bits_[0] |= 0x00000200u;
}
inline void sicboinfo::clear_has_bankerjetton() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void sicboinfo::clear_bankerjetton() {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    bankerjetton_->clear();
  }
  clear_has_bankerjetton();
}
inline const ::std::string& sicboinfo::bankerjetton() const {
  return *bankerjetton_;
}
inline void sicboinfo::set_bankerjetton(const ::std::string& value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void sicboinfo::set_bankerjetton(const char* value) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(value);
}
inline void sicboinfo::set_bankerjetton(const char* value, size_t size) {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  bankerjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicboinfo::mutable_bankerjetton() {
  set_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    bankerjetton_ = new ::std::string;
  }
  return bankerjetton_;
}
inline ::std::string* sicboinfo::release_bankerjetton() {
  clear_has_bankerjetton();
  if (bankerjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerjetton_;
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicboinfo::set_allocated_bankerjetton(::std::string* bankerjetton) {
  if (bankerjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerjetton_;
  }
  if (bankerjetton) {
    set_has_bankerjetton();
    bankerjetton_ = bankerjetton;
  } else {
    clear_has_bankerjetton();
    bankerjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxuser = 14;
inline bool sicboinfo::has_maxuser() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void sicboinfo::set_has_maxuser() {
  _has_bits_[0] |= 0x00000400u;
}
inline void sicboinfo::clear_has_maxuser() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void sicboinfo::clear_maxuser() {
  maxuser_ = 0;
  clear_has_maxuser();
}
inline ::google::protobuf::int32 sicboinfo::maxuser() const {
  return maxuser_;
}
inline void sicboinfo::set_maxuser(::google::protobuf::int32 value) {
  set_has_maxuser();
  maxuser_ = value;
}

// optional string faceid = 15;
inline bool sicboinfo::has_faceid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void sicboinfo::set_has_faceid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void sicboinfo::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void sicboinfo::clear_faceid() {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    faceid_->clear();
  }
  clear_has_faceid();
}
inline const ::std::string& sicboinfo::faceid() const {
  return *faceid_;
}
inline void sicboinfo::set_faceid(const ::std::string& value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void sicboinfo::set_faceid(const char* value) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(value);
}
inline void sicboinfo::set_faceid(const char* value, size_t size) {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  faceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicboinfo::mutable_faceid() {
  set_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    faceid_ = new ::std::string;
  }
  return faceid_;
}
inline ::std::string* sicboinfo::release_faceid() {
  clear_has_faceid();
  if (faceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faceid_;
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicboinfo::set_allocated_faceid(::std::string* faceid) {
  if (faceid_ != &::google::protobuf::internal::kEmptyString) {
    delete faceid_;
  }
  if (faceid) {
    set_has_faceid();
    faceid_ = faceid;
  } else {
    clear_has_faceid();
    faceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bankername = 17;
inline bool sicboinfo::has_bankername() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void sicboinfo::set_has_bankername() {
  _has_bits_[0] |= 0x00001000u;
}
inline void sicboinfo::clear_has_bankername() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void sicboinfo::clear_bankername() {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    bankername_->clear();
  }
  clear_has_bankername();
}
inline const ::std::string& sicboinfo::bankername() const {
  return *bankername_;
}
inline void sicboinfo::set_bankername(const ::std::string& value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void sicboinfo::set_bankername(const char* value) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(value);
}
inline void sicboinfo::set_bankername(const char* value, size_t size) {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  bankername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicboinfo::mutable_bankername() {
  set_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    bankername_ = new ::std::string;
  }
  return bankername_;
}
inline ::std::string* sicboinfo::release_bankername() {
  clear_has_bankername();
  if (bankername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankername_;
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicboinfo::set_allocated_bankername(::std::string* bankername) {
  if (bankername_ != &::google::protobuf::internal::kEmptyString) {
    delete bankername_;
  }
  if (bankername) {
    set_has_bankername();
    bankername_ = bankername;
  } else {
    clear_has_bankername();
    bankername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 applydrop = 20;
inline bool sicboinfo::has_applydrop() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void sicboinfo::set_has_applydrop() {
  _has_bits_[0] |= 0x00002000u;
}
inline void sicboinfo::clear_has_applydrop() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void sicboinfo::clear_applydrop() {
  applydrop_ = 0;
  clear_has_applydrop();
}
inline ::google::protobuf::int32 sicboinfo::applydrop() const {
  return applydrop_;
}
inline void sicboinfo::set_applydrop(::google::protobuf::int32 value) {
  set_has_applydrop();
  applydrop_ = value;
}

// optional int32 sicbotype = 21;
inline bool sicboinfo::has_sicbotype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void sicboinfo::set_has_sicbotype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void sicboinfo::clear_has_sicbotype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void sicboinfo::clear_sicbotype() {
  sicbotype_ = 0;
  clear_has_sicbotype();
}
inline ::google::protobuf::int32 sicboinfo::sicbotype() const {
  return sicbotype_;
}
inline void sicboinfo::set_sicbotype(::google::protobuf::int32 value) {
  set_has_sicbotype();
  sicbotype_ = value;
}

// optional int32 tabletype = 22;
inline bool sicboinfo::has_tabletype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void sicboinfo::set_has_tabletype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void sicboinfo::clear_has_tabletype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void sicboinfo::clear_tabletype() {
  tabletype_ = 0;
  clear_has_tabletype();
}
inline ::google::protobuf::int32 sicboinfo::tabletype() const {
  return tabletype_;
}
inline void sicboinfo::set_tabletype(::google::protobuf::int32 value) {
  set_has_tabletype();
  tabletype_ = value;
}

// optional int32 robotnum = 23;
inline bool sicboinfo::has_robotnum() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void sicboinfo::set_has_robotnum() {
  _has_bits_[0] |= 0x00010000u;
}
inline void sicboinfo::clear_has_robotnum() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void sicboinfo::clear_robotnum() {
  robotnum_ = 0;
  clear_has_robotnum();
}
inline ::google::protobuf::int32 sicboinfo::robotnum() const {
  return robotnum_;
}
inline void sicboinfo::set_robotnum(::google::protobuf::int32 value) {
  set_has_robotnum();
  robotnum_ = value;
}

// optional string bankerlimit = 24;
inline bool sicboinfo::has_bankerlimit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void sicboinfo::set_has_bankerlimit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void sicboinfo::clear_has_bankerlimit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void sicboinfo::clear_bankerlimit() {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    bankerlimit_->clear();
  }
  clear_has_bankerlimit();
}
inline const ::std::string& sicboinfo::bankerlimit() const {
  return *bankerlimit_;
}
inline void sicboinfo::set_bankerlimit(const ::std::string& value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void sicboinfo::set_bankerlimit(const char* value) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(value);
}
inline void sicboinfo::set_bankerlimit(const char* value, size_t size) {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  bankerlimit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicboinfo::mutable_bankerlimit() {
  set_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    bankerlimit_ = new ::std::string;
  }
  return bankerlimit_;
}
inline ::std::string* sicboinfo::release_bankerlimit() {
  clear_has_bankerlimit();
  if (bankerlimit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankerlimit_;
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicboinfo::set_allocated_bankerlimit(::std::string* bankerlimit) {
  if (bankerlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete bankerlimit_;
  }
  if (bankerlimit) {
    set_has_bankerlimit();
    bankerlimit_ = bankerlimit;
  } else {
    clear_has_bankerlimit();
    bankerlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxrobotnum = 25;
inline bool sicboinfo::has_maxrobotnum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void sicboinfo::set_has_maxrobotnum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void sicboinfo::clear_has_maxrobotnum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void sicboinfo::clear_maxrobotnum() {
  maxrobotnum_ = 0;
  clear_has_maxrobotnum();
}
inline ::google::protobuf::int32 sicboinfo::maxrobotnum() const {
  return maxrobotnum_;
}
inline void sicboinfo::set_maxrobotnum(::google::protobuf::int32 value) {
  set_has_maxrobotnum();
  maxrobotnum_ = value;
}

// optional int32 bankercount = 26;
inline bool sicboinfo::has_bankercount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void sicboinfo::set_has_bankercount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void sicboinfo::clear_has_bankercount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void sicboinfo::clear_bankercount() {
  bankercount_ = 0;
  clear_has_bankercount();
}
inline ::google::protobuf::int32 sicboinfo::bankercount() const {
  return bankercount_;
}
inline void sicboinfo::set_bankercount(::google::protobuf::int32 value) {
  set_has_bankercount();
  bankercount_ = value;
}

// optional int32 robotbanuserid = 27;
inline bool sicboinfo::has_robotbanuserid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void sicboinfo::set_has_robotbanuserid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void sicboinfo::clear_has_robotbanuserid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void sicboinfo::clear_robotbanuserid() {
  robotbanuserid_ = 0;
  clear_has_robotbanuserid();
}
inline ::google::protobuf::int32 sicboinfo::robotbanuserid() const {
  return robotbanuserid_;
}
inline void sicboinfo::set_robotbanuserid(::google::protobuf::int32 value) {
  set_has_robotbanuserid();
  robotbanuserid_ = value;
}

// optional int32 playtype = 28;
inline bool sicboinfo::has_playtype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void sicboinfo::set_has_playtype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void sicboinfo::clear_has_playtype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void sicboinfo::clear_playtype() {
  playtype_ = 0;
  clear_has_playtype();
}
inline ::google::protobuf::int32 sicboinfo::playtype() const {
  return playtype_;
}
inline void sicboinfo::set_playtype(::google::protobuf::int32 value) {
  set_has_playtype();
  playtype_ = value;
}

// optional int32 dianshu = 29;
inline bool sicboinfo::has_dianshu() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void sicboinfo::set_has_dianshu() {
  _has_bits_[0] |= 0x00400000u;
}
inline void sicboinfo::clear_has_dianshu() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void sicboinfo::clear_dianshu() {
  dianshu_ = 0;
  clear_has_dianshu();
}
inline ::google::protobuf::int32 sicboinfo::dianshu() const {
  return dianshu_;
}
inline void sicboinfo::set_dianshu(::google::protobuf::int32 value) {
  set_has_dianshu();
  dianshu_ = value;
}

// optional int32 huase = 30;
inline bool sicboinfo::has_huase() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void sicboinfo::set_has_huase() {
  _has_bits_[0] |= 0x00800000u;
}
inline void sicboinfo::clear_has_huase() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void sicboinfo::clear_huase() {
  huase_ = 0;
  clear_has_huase();
}
inline ::google::protobuf::int32 sicboinfo::huase() const {
  return huase_;
}
inline void sicboinfo::set_huase(::google::protobuf::int32 value) {
  set_has_huase();
  huase_ = value;
}

// optional string canjetton = 31;
inline bool sicboinfo::has_canjetton() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void sicboinfo::set_has_canjetton() {
  _has_bits_[0] |= 0x01000000u;
}
inline void sicboinfo::clear_has_canjetton() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void sicboinfo::clear_canjetton() {
  if (canjetton_ != &::google::protobuf::internal::kEmptyString) {
    canjetton_->clear();
  }
  clear_has_canjetton();
}
inline const ::std::string& sicboinfo::canjetton() const {
  return *canjetton_;
}
inline void sicboinfo::set_canjetton(const ::std::string& value) {
  set_has_canjetton();
  if (canjetton_ == &::google::protobuf::internal::kEmptyString) {
    canjetton_ = new ::std::string;
  }
  canjetton_->assign(value);
}
inline void sicboinfo::set_canjetton(const char* value) {
  set_has_canjetton();
  if (canjetton_ == &::google::protobuf::internal::kEmptyString) {
    canjetton_ = new ::std::string;
  }
  canjetton_->assign(value);
}
inline void sicboinfo::set_canjetton(const char* value, size_t size) {
  set_has_canjetton();
  if (canjetton_ == &::google::protobuf::internal::kEmptyString) {
    canjetton_ = new ::std::string;
  }
  canjetton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicboinfo::mutable_canjetton() {
  set_has_canjetton();
  if (canjetton_ == &::google::protobuf::internal::kEmptyString) {
    canjetton_ = new ::std::string;
  }
  return canjetton_;
}
inline ::std::string* sicboinfo::release_canjetton() {
  clear_has_canjetton();
  if (canjetton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = canjetton_;
    canjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicboinfo::set_allocated_canjetton(::std::string* canjetton) {
  if (canjetton_ != &::google::protobuf::internal::kEmptyString) {
    delete canjetton_;
  }
  if (canjetton) {
    set_has_canjetton();
    canjetton_ = canjetton;
  } else {
    clear_has_canjetton();
    canjetton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string legalkey = 32;
inline bool sicboinfo::has_legalkey() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void sicboinfo::set_has_legalkey() {
  _has_bits_[0] |= 0x02000000u;
}
inline void sicboinfo::clear_has_legalkey() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void sicboinfo::clear_legalkey() {
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    legalkey_->clear();
  }
  clear_has_legalkey();
}
inline const ::std::string& sicboinfo::legalkey() const {
  return *legalkey_;
}
inline void sicboinfo::set_legalkey(const ::std::string& value) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(value);
}
inline void sicboinfo::set_legalkey(const char* value) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(value);
}
inline void sicboinfo::set_legalkey(const char* value, size_t size) {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  legalkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicboinfo::mutable_legalkey() {
  set_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    legalkey_ = new ::std::string;
  }
  return legalkey_;
}
inline ::std::string* sicboinfo::release_legalkey() {
  clear_has_legalkey();
  if (legalkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = legalkey_;
    legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicboinfo::set_allocated_legalkey(::std::string* legalkey) {
  if (legalkey_ != &::google::protobuf::internal::kEmptyString) {
    delete legalkey_;
  }
  if (legalkey) {
    set_has_legalkey();
    legalkey_ = legalkey;
  } else {
    clear_has_legalkey();
    legalkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sicbojettonrecordlist

// repeated int32 jetton = 1;
inline int sicbojettonrecordlist::jetton_size() const {
  return jetton_.size();
}
inline void sicbojettonrecordlist::clear_jetton() {
  jetton_.Clear();
}
inline ::google::protobuf::int32 sicbojettonrecordlist::jetton(int index) const {
  return jetton_.Get(index);
}
inline void sicbojettonrecordlist::set_jetton(int index, ::google::protobuf::int32 value) {
  jetton_.Set(index, value);
}
inline void sicbojettonrecordlist::add_jetton(::google::protobuf::int32 value) {
  jetton_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicbojettonrecordlist::jetton() const {
  return jetton_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicbojettonrecordlist::mutable_jetton() {
  return &jetton_;
}

// repeated int32 wincondition = 2;
inline int sicbojettonrecordlist::wincondition_size() const {
  return wincondition_.size();
}
inline void sicbojettonrecordlist::clear_wincondition() {
  wincondition_.Clear();
}
inline ::google::protobuf::int32 sicbojettonrecordlist::wincondition(int index) const {
  return wincondition_.Get(index);
}
inline void sicbojettonrecordlist::set_wincondition(int index, ::google::protobuf::int32 value) {
  wincondition_.Set(index, value);
}
inline void sicbojettonrecordlist::add_wincondition(::google::protobuf::int32 value) {
  wincondition_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicbojettonrecordlist::wincondition() const {
  return wincondition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicbojettonrecordlist::mutable_wincondition() {
  return &wincondition_;
}

// -------------------------------------------------------------------

// sicbojettonrecorinfo

// optional int32 userid = 1;
inline bool sicbojettonrecorinfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sicbojettonrecorinfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sicbojettonrecorinfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sicbojettonrecorinfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 sicbojettonrecorinfo::userid() const {
  return userid_;
}
inline void sicbojettonrecorinfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 jetton = 2;
inline bool sicbojettonrecorinfo::has_jetton() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sicbojettonrecorinfo::set_has_jetton() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sicbojettonrecorinfo::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sicbojettonrecorinfo::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 sicbojettonrecorinfo::jetton() const {
  return jetton_;
}
inline void sicbojettonrecorinfo::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
}

// optional int32 winnum = 3;
inline bool sicbojettonrecorinfo::has_winnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sicbojettonrecorinfo::set_has_winnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sicbojettonrecorinfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sicbojettonrecorinfo::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 sicbojettonrecorinfo::winnum() const {
  return winnum_;
}
inline void sicbojettonrecorinfo::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
}

// optional string jifen = 4;
inline bool sicbojettonrecorinfo::has_jifen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sicbojettonrecorinfo::set_has_jifen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sicbojettonrecorinfo::clear_has_jifen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sicbojettonrecorinfo::clear_jifen() {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    jifen_->clear();
  }
  clear_has_jifen();
}
inline const ::std::string& sicbojettonrecorinfo::jifen() const {
  return *jifen_;
}
inline void sicbojettonrecorinfo::set_jifen(const ::std::string& value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void sicbojettonrecorinfo::set_jifen(const char* value) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(value);
}
inline void sicbojettonrecorinfo::set_jifen(const char* value, size_t size) {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  jifen_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicbojettonrecorinfo::mutable_jifen() {
  set_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    jifen_ = new ::std::string;
  }
  return jifen_;
}
inline ::std::string* sicbojettonrecorinfo::release_jifen() {
  clear_has_jifen();
  if (jifen_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = jifen_;
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicbojettonrecorinfo::set_allocated_jifen(::std::string* jifen) {
  if (jifen_ != &::google::protobuf::internal::kEmptyString) {
    delete jifen_;
  }
  if (jifen) {
    set_has_jifen();
    jifen_ = jifen;
  } else {
    clear_has_jifen();
    jifen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 5;
inline bool sicbojettonrecorinfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sicbojettonrecorinfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sicbojettonrecorinfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sicbojettonrecorinfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& sicbojettonrecorinfo::nickname() const {
  return *nickname_;
}
inline void sicbojettonrecorinfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void sicbojettonrecorinfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void sicbojettonrecorinfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicbojettonrecorinfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* sicbojettonrecorinfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicbojettonrecorinfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string facename = 6;
inline bool sicbojettonrecorinfo::has_facename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sicbojettonrecorinfo::set_has_facename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sicbojettonrecorinfo::clear_has_facename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sicbojettonrecorinfo::clear_facename() {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    facename_->clear();
  }
  clear_has_facename();
}
inline const ::std::string& sicbojettonrecorinfo::facename() const {
  return *facename_;
}
inline void sicbojettonrecorinfo::set_facename(const ::std::string& value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void sicbojettonrecorinfo::set_facename(const char* value) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(value);
}
inline void sicbojettonrecorinfo::set_facename(const char* value, size_t size) {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  facename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicbojettonrecorinfo::mutable_facename() {
  set_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    facename_ = new ::std::string;
  }
  return facename_;
}
inline ::std::string* sicbojettonrecorinfo::release_facename() {
  clear_has_facename();
  if (facename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facename_;
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicbojettonrecorinfo::set_allocated_facename(::std::string* facename) {
  if (facename_ != &::google::protobuf::internal::kEmptyString) {
    delete facename_;
  }
  if (facename) {
    set_has_facename();
    facename_ = facename;
  } else {
    clear_has_facename();
    facename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// sicbogamehistoryinfo

// optional int32 tableid = 1;
inline bool sicbogamehistoryinfo::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sicbogamehistoryinfo::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sicbogamehistoryinfo::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sicbogamehistoryinfo::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 sicbogamehistoryinfo::tableid() const {
  return tableid_;
}
inline void sicbogamehistoryinfo::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
}

// optional string tablename = 2;
inline bool sicbogamehistoryinfo::has_tablename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sicbogamehistoryinfo::set_has_tablename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sicbogamehistoryinfo::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sicbogamehistoryinfo::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& sicbogamehistoryinfo::tablename() const {
  return *tablename_;
}
inline void sicbogamehistoryinfo::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void sicbogamehistoryinfo::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
}
inline void sicbogamehistoryinfo::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicbogamehistoryinfo::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    tablename_ = new ::std::string;
  }
  return tablename_;
}
inline ::std::string* sicbogamehistoryinfo::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicbogamehistoryinfo::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 magnification = 3;
inline bool sicbogamehistoryinfo::has_magnification() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sicbogamehistoryinfo::set_has_magnification() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sicbogamehistoryinfo::clear_has_magnification() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sicbogamehistoryinfo::clear_magnification() {
  magnification_ = 0;
  clear_has_magnification();
}
inline ::google::protobuf::int32 sicbogamehistoryinfo::magnification() const {
  return magnification_;
}
inline void sicbogamehistoryinfo::set_magnification(::google::protobuf::int32 value) {
  set_has_magnification();
  magnification_ = value;
}

// optional int32 state = 4;
inline bool sicbogamehistoryinfo::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sicbogamehistoryinfo::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sicbogamehistoryinfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sicbogamehistoryinfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 sicbogamehistoryinfo::state() const {
  return state_;
}
inline void sicbogamehistoryinfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 timemark = 5;
inline bool sicbogamehistoryinfo::has_timemark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sicbogamehistoryinfo::set_has_timemark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sicbogamehistoryinfo::clear_has_timemark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sicbogamehistoryinfo::clear_timemark() {
  timemark_ = 0;
  clear_has_timemark();
}
inline ::google::protobuf::int32 sicbogamehistoryinfo::timemark() const {
  return timemark_;
}
inline void sicbogamehistoryinfo::set_timemark(::google::protobuf::int32 value) {
  set_has_timemark();
  timemark_ = value;
}

// repeated string recordidentification = 6;
inline int sicbogamehistoryinfo::recordidentification_size() const {
  return recordidentification_.size();
}
inline void sicbogamehistoryinfo::clear_recordidentification() {
  recordidentification_.Clear();
}
inline const ::std::string& sicbogamehistoryinfo::recordidentification(int index) const {
  return recordidentification_.Get(index);
}
inline ::std::string* sicbogamehistoryinfo::mutable_recordidentification(int index) {
  return recordidentification_.Mutable(index);
}
inline void sicbogamehistoryinfo::set_recordidentification(int index, const ::std::string& value) {
  recordidentification_.Mutable(index)->assign(value);
}
inline void sicbogamehistoryinfo::set_recordidentification(int index, const char* value) {
  recordidentification_.Mutable(index)->assign(value);
}
inline void sicbogamehistoryinfo::set_recordidentification(int index, const char* value, size_t size) {
  recordidentification_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicbogamehistoryinfo::add_recordidentification() {
  return recordidentification_.Add();
}
inline void sicbogamehistoryinfo::add_recordidentification(const ::std::string& value) {
  recordidentification_.Add()->assign(value);
}
inline void sicbogamehistoryinfo::add_recordidentification(const char* value) {
  recordidentification_.Add()->assign(value);
}
inline void sicbogamehistoryinfo::add_recordidentification(const char* value, size_t size) {
  recordidentification_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
sicbogamehistoryinfo::recordidentification() const {
  return recordidentification_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
sicbogamehistoryinfo::mutable_recordidentification() {
  return &recordidentification_;
}

// repeated int32 allnum1 = 7;
inline int sicbogamehistoryinfo::allnum1_size() const {
  return allnum1_.size();
}
inline void sicbogamehistoryinfo::clear_allnum1() {
  allnum1_.Clear();
}
inline ::google::protobuf::int32 sicbogamehistoryinfo::allnum1(int index) const {
  return allnum1_.Get(index);
}
inline void sicbogamehistoryinfo::set_allnum1(int index, ::google::protobuf::int32 value) {
  allnum1_.Set(index, value);
}
inline void sicbogamehistoryinfo::add_allnum1(::google::protobuf::int32 value) {
  allnum1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicbogamehistoryinfo::allnum1() const {
  return allnum1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicbogamehistoryinfo::mutable_allnum1() {
  return &allnum1_;
}

// repeated int32 allnum2 = 8;
inline int sicbogamehistoryinfo::allnum2_size() const {
  return allnum2_.size();
}
inline void sicbogamehistoryinfo::clear_allnum2() {
  allnum2_.Clear();
}
inline ::google::protobuf::int32 sicbogamehistoryinfo::allnum2(int index) const {
  return allnum2_.Get(index);
}
inline void sicbogamehistoryinfo::set_allnum2(int index, ::google::protobuf::int32 value) {
  allnum2_.Set(index, value);
}
inline void sicbogamehistoryinfo::add_allnum2(::google::protobuf::int32 value) {
  allnum2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicbogamehistoryinfo::allnum2() const {
  return allnum2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicbogamehistoryinfo::mutable_allnum2() {
  return &allnum2_;
}

// repeated int32 allnum3 = 9;
inline int sicbogamehistoryinfo::allnum3_size() const {
  return allnum3_.size();
}
inline void sicbogamehistoryinfo::clear_allnum3() {
  allnum3_.Clear();
}
inline ::google::protobuf::int32 sicbogamehistoryinfo::allnum3(int index) const {
  return allnum3_.Get(index);
}
inline void sicbogamehistoryinfo::set_allnum3(int index, ::google::protobuf::int32 value) {
  allnum3_.Set(index, value);
}
inline void sicbogamehistoryinfo::add_allnum3(::google::protobuf::int32 value) {
  allnum3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
sicbogamehistoryinfo::allnum3() const {
  return allnum3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
sicbogamehistoryinfo::mutable_allnum3() {
  return &allnum3_;
}

// -------------------------------------------------------------------

// sicbooneplayhistory

// optional string recordidentification = 1;
inline bool sicbooneplayhistory::has_recordidentification() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sicbooneplayhistory::set_has_recordidentification() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sicbooneplayhistory::clear_has_recordidentification() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sicbooneplayhistory::clear_recordidentification() {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    recordidentification_->clear();
  }
  clear_has_recordidentification();
}
inline const ::std::string& sicbooneplayhistory::recordidentification() const {
  return *recordidentification_;
}
inline void sicbooneplayhistory::set_recordidentification(const ::std::string& value) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(value);
}
inline void sicbooneplayhistory::set_recordidentification(const char* value) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(value);
}
inline void sicbooneplayhistory::set_recordidentification(const char* value, size_t size) {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  recordidentification_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sicbooneplayhistory::mutable_recordidentification() {
  set_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    recordidentification_ = new ::std::string;
  }
  return recordidentification_;
}
inline ::std::string* sicbooneplayhistory::release_recordidentification() {
  clear_has_recordidentification();
  if (recordidentification_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recordidentification_;
    recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void sicbooneplayhistory::set_allocated_recordidentification(::std::string* recordidentification) {
  if (recordidentification_ != &::google::protobuf::internal::kEmptyString) {
    delete recordidentification_;
  }
  if (recordidentification) {
    set_has_recordidentification();
    recordidentification_ = recordidentification;
  } else {
    clear_has_recordidentification();
    recordidentification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 allnum1 = 2;
inline bool sicbooneplayhistory::has_allnum1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sicbooneplayhistory::set_has_allnum1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sicbooneplayhistory::clear_has_allnum1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sicbooneplayhistory::clear_allnum1() {
  allnum1_ = 0;
  clear_has_allnum1();
}
inline ::google::protobuf::int32 sicbooneplayhistory::allnum1() const {
  return allnum1_;
}
inline void sicbooneplayhistory::set_allnum1(::google::protobuf::int32 value) {
  set_has_allnum1();
  allnum1_ = value;
}

// optional int32 allnum2 = 3;
inline bool sicbooneplayhistory::has_allnum2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sicbooneplayhistory::set_has_allnum2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sicbooneplayhistory::clear_has_allnum2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sicbooneplayhistory::clear_allnum2() {
  allnum2_ = 0;
  clear_has_allnum2();
}
inline ::google::protobuf::int32 sicbooneplayhistory::allnum2() const {
  return allnum2_;
}
inline void sicbooneplayhistory::set_allnum2(::google::protobuf::int32 value) {
  set_has_allnum2();
  allnum2_ = value;
}

// optional int32 allnum3 = 4;
inline bool sicbooneplayhistory::has_allnum3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sicbooneplayhistory::set_has_allnum3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sicbooneplayhistory::clear_has_allnum3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sicbooneplayhistory::clear_allnum3() {
  allnum3_ = 0;
  clear_has_allnum3();
}
inline ::google::protobuf::int32 sicbooneplayhistory::allnum3() const {
  return allnum3_;
}
inline void sicbooneplayhistory::set_allnum3(::google::protobuf::int32 value) {
  set_has_allnum3();
  allnum3_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace progame

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_st_5fsicbo_2eproto__INCLUDED
